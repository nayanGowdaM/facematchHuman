/*
  Human
  homepage: <https://github.com/vladmandic/human>
  author: <https://github.com/vladmandic>'
*/

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// dist/tfjs.esm.js
var tfjs_esm_exports = {};
__export(tfjs_esm_exports, {
  Abs: () => Xs,
  Acos: () => Wo,
  Acosh: () => Uo,
  AdadeltaOptimizer: () => np,
  AdagradOptimizer: () => sp,
  AdamOptimizer: () => ap,
  AdamaxOptimizer: () => ip,
  Add: () => uo,
  AddN: () => Go,
  All: () => Ho,
  Any: () => Ko,
  ArgMax: () => Ys,
  ArgMin: () => Qs,
  Asin: () => qo,
  Asinh: () => jo,
  Atan: () => Xo,
  Atan2: () => Qo,
  Atanh: () => Yo,
  AvgPool: () => Zo,
  AvgPool3D: () => Zs,
  AvgPool3DGrad: () => Ai,
  AvgPoolGrad: () => Di,
  BackendWasm: () => pm,
  BatchMatMul: () => Jo,
  BatchToSpaceND: () => Js,
  Bincount: () => en,
  BitwiseAnd: () => ja,
  BroadcastArgs: () => ea,
  BroadcastTo: () => Bce,
  Cast: () => bo,
  Ceil: () => tn,
  ClipByValue: () => Co,
  Complex: () => Fi,
  ComplexAbs: () => Pi,
  Concat: () => ta,
  Conv2D: () => rn,
  Conv2DBackpropFilter: () => Oi,
  Conv2DBackpropInput: () => on,
  Conv3D: () => nn,
  Conv3DBackpropFilterV2: () => Xa,
  Conv3DBackpropInputV2: () => sn,
  Cos: () => an,
  Cosh: () => un,
  CropAndResize: () => ln,
  Cumprod: () => pn,
  Cumsum: () => cn,
  DataStorage: () => zo,
  DenseBincount: () => ra,
  DepthToSpace: () => mn,
  DepthwiseConv2dNative: () => dn,
  DepthwiseConv2dNativeBackpropFilter: () => Mi,
  DepthwiseConv2dNativeBackpropInput: () => Li,
  Diag: () => oa,
  Dilation2D: () => fn,
  Dilation2DBackpropFilter: () => zi,
  Dilation2DBackpropInput: () => Bi,
  Draw: () => Pu,
  ENV: () => nw,
  Einsum: () => Vi,
  Elu: () => gn,
  EluGrad: () => Ya,
  Environment: () => hl,
  Equal: () => yn,
  Erf: () => xn,
  Exp: () => bn,
  ExpandDims: () => na,
  Expm1: () => Cn,
  FFT: () => Wi,
  Fill: () => sa,
  FlipLeftRight: () => wn,
  Floor: () => Sn,
  FloorDiv: () => In,
  FromPixels: () => Mu,
  FusedBatchNorm: () => vn,
  FusedConv2D: () => vo,
  FusedDepthwiseConv2D: () => ko,
  GPGPUContext: () => kp,
  GatherNd: () => kn,
  GatherV2: () => aa,
  GraphModel: () => Bl,
  Greater: () => Nn,
  GreaterEqual: () => Tn,
  IFFT: () => Ui,
  Identity: () => wo,
  Imag: () => Gi,
  IsFinite: () => _n,
  IsInf: () => $n,
  IsNan: () => En,
  KernelBackend: () => ao,
  LRN: () => zn,
  LRNGrad: () => Qa,
  LeakyRelu: () => Rn,
  Less: () => Dn,
  LessEqual: () => An,
  LinSpace: () => Fn,
  Log: () => Pn,
  Log1p: () => On,
  LogSoftmax: () => zce,
  LogicalAnd: () => Mn,
  LogicalNot: () => Ln,
  LogicalOr: () => Bn,
  LogicalXor: () => $0,
  LowerBound: () => Vce,
  MathBackendCPU: () => xu,
  MathBackendWebGL: () => wu,
  MatrixBandPart: () => Wce,
  Max: () => Vn,
  MaxPool: () => Un,
  MaxPool3D: () => ia,
  MaxPool3DGrad: () => Ki,
  MaxPoolGrad: () => Hi,
  MaxPoolWithArgmax: () => ua,
  Maximum: () => Wn,
  Mean: () => Gn,
  Min: () => Hn,
  Minimum: () => Kn,
  MirrorPad: () => qn,
  Mod: () => jn,
  MomentumOptimizer: () => up,
  Multinomial: () => Xn,
  Multiply: () => Yn,
  Neg: () => pa,
  NonMaxSuppressionV3: () => Zn,
  NonMaxSuppressionV4: () => Za,
  NonMaxSuppressionV5: () => Jn,
  NotEqual: () => Qn,
  OP_SCOPE_SUFFIX: () => kw,
  OneHot: () => es,
  OnesLike: () => ca,
  Optimizer: () => Nr,
  OptimizerConstructors: () => Pl,
  Pack: () => la,
  PadV2: () => ts,
  Pool: () => Uce,
  Pow: () => rs,
  Prelu: () => os,
  Prod: () => ns,
  RMSPropOptimizer: () => pp,
  RaggedGather: () => Qp,
  RaggedRange: () => Zp,
  RaggedTensorToTensor: () => Jp,
  Range: () => ma,
  Rank: () => hw,
  Real: () => qi,
  RealDiv: () => hn,
  Reciprocal: () => ss,
  Reduction: () => Rt,
  Relu: () => as,
  Relu6: () => ps,
  Reshape: () => da,
  ResizeBilinear: () => us,
  ResizeBilinearGrad: () => ei,
  ResizeNearestNeighbor: () => is,
  ResizeNearestNeighborGrad: () => Ja,
  Reverse: () => cs,
  RotateWithOffset: () => As,
  Round: () => ls,
  Rsqrt: () => ms,
  SGDOptimizer: () => mi,
  ScatterNd: () => ds,
  SearchSorted: () => hs,
  Select: () => fa,
  Selu: () => gs,
  Sigmoid: () => Cs,
  Sign: () => bs,
  Sin: () => xs,
  Sinh: () => ys,
  Slice: () => ha,
  Softmax: () => vs,
  Softplus: () => ws,
  SpaceToBatchND: () => ga,
  SparseFillEmptyRows: () => ji,
  SparseReshape: () => ti,
  SparseSegmentMean: () => ya,
  SparseSegmentSum: () => ba,
  SparseToDense: () => ks,
  SplitV: () => xa,
  Sqrt: () => Ss,
  Square: () => Xi,
  SquaredDifference: () => Ns,
  StaticRegexReplace: () => Ou,
  Step: () => So,
  StridedSlice: () => Ts,
  StringNGrams: () => Ca,
  StringSplit: () => Yi,
  StringToHashBucketFast: () => Qi,
  Sub: () => _s,
  Sum: () => Is,
  Tan: () => $s,
  Tanh: () => Es,
  Tensor: () => ut,
  TensorBuffer: () => tt,
  TensorScatterUpdate: () => fs,
  Tile: () => po,
  TopK: () => Rs,
  Transform: () => Ds,
  Transpose: () => co,
  Unique: () => Zi,
  Unpack: () => wa,
  UnsortedSegmentSum: () => Ji,
  UpperBound: () => Gce,
  Variable: () => oi,
  WebGPUBackend: () => Tu,
  ZerosLike: () => Sa,
  _FusedMatMul: () => Io,
  abs: () => Jt,
  acos: () => kk,
  acosh: () => Nk,
  add: () => Ce,
  addN: () => Tk,
  all: () => _k,
  any: () => $k,
  argMax: () => Ek,
  argMin: () => Rk,
  asin: () => Dk,
  asinh: () => Ak,
  atan: () => Fk,
  atan2: () => Pk,
  atanh: () => Ok,
  avgPool: () => fd,
  avgPool3d: () => Bk,
  backend: () => vde,
  backend_util: () => w,
  basicLSTMCell: () => zk,
  batchNorm: () => au,
  batchNorm2d: () => Wk,
  batchNorm3d: () => Uk,
  batchNorm4d: () => Gk,
  batchToSpaceND: () => hd,
  bincount: () => gd,
  bitwiseAnd: () => Hk,
  booleanMaskAsync: () => E6,
  broadcastArgs: () => Kk,
  broadcastTo: () => iu,
  broadcast_util: () => Ir,
  browser: () => oT,
  buffer: () => me,
  cast: () => We,
  ceil: () => qk,
  clipByValue: () => jk,
  clone: () => Ur,
  complex: () => Er,
  concat: () => bt,
  concat1d: () => Xk,
  concat2d: () => Yk,
  concat3d: () => Qk,
  concat4d: () => Zk,
  conv1d: () => Jk,
  conv2d: () => uu,
  conv2dTranspose: () => e2,
  conv3d: () => t2,
  conv3dTranspose: () => o2,
  copyRegisteredKernels: () => Zce,
  cos: () => n2,
  cosh: () => s2,
  cosineWindow: () => Rl,
  cumprod: () => a2,
  cumsum: () => i2,
  customGrad: () => vr,
  denseBincount: () => u2,
  deprecationWarn: () => Pw,
  depthToSpace: () => p2,
  depthwiseConv2d: () => lc,
  deregisterOp: () => A5,
  device_util: () => ou,
  diag: () => c2,
  dilation2d: () => l2,
  disableDeprecationWarnings: () => dde,
  dispose: () => Mt,
  disposeVariables: () => fde,
  div: () => je,
  divNoNan: () => d2,
  dot: () => f2,
  dropout: () => W6,
  einsum: () => pu,
  elu: () => Cd,
  enableDebugMode: () => mde,
  enableProdMode: () => lde,
  enclosingPowerOfTwo: () => Qw,
  engine: () => pr,
  ensureShape: () => h2,
  env: () => A,
  equal: () => bd,
  erf: () => g2,
  euclideanNorm: () => b2,
  exp: () => $o,
  expandDims: () => Ms,
  expm1: () => C2,
  eye: () => wd,
  fft: () => fc,
  fill: () => Ea,
  findBackend: () => Sde,
  findBackendFactory: () => Ide,
  floor: () => Sd,
  floorDiv: () => dd,
  forceHalfFloat: () => MD,
  fused: () => Zw,
  gather: () => Id,
  gatherND: () => z6,
  gather_util: () => af,
  getBackend: () => Cde,
  getGradient: () => iw,
  getKernel: () => tc,
  getKernelsForBackend: () => Ym,
  getThreadsCount: () => Zse,
  gpgpu_util: () => cv,
  grad: () => AK,
  grads: () => FK,
  greater: () => qu,
  greaterEqual: () => vd,
  ifft: () => Ju,
  imag: () => lu,
  image: () => Kj,
  inTopKAsync: () => G6,
  io: () => fi,
  irfft: () => Kd,
  isFinite: () => w2,
  isInf: () => S2,
  isNaN: () => I2,
  keep: () => Rr,
  kernel_impls: () => Wt,
  leakyRelu: () => kd,
  less: () => _l,
  lessEqual: () => mc,
  linalg: () => qj,
  linspace: () => v2,
  loadGraphModel: () => $8,
  loadGraphModelSync: () => E8,
  localResponseNormalization: () => k2,
  log: () => pi,
  log1p: () => Nd,
  logSigmoid: () => N2,
  logSoftmax: () => T2,
  logSumExp: () => $d,
  logicalAnd: () => ju,
  logicalNot: () => Ed,
  logicalOr: () => Rd,
  logicalXor: () => _2,
  losses: () => jj,
  lowerBound: () => $2,
  matMul: () => Ze,
  math: () => JN,
  max: () => Ra,
  maxPool: () => Ad,
  maxPool3d: () => E2,
  maxPoolWithArgmax: () => R2,
  maximum: () => Fd,
  mean: () => Xu,
  memory: () => hde,
  meshgrid: () => D2,
  min: () => Tl,
  minimum: () => Yu,
  mirrorPad: () => A2,
  mod: () => F2,
  moments: () => P2,
  movingAverage: () => A6,
  mul: () => se,
  multiRNNCell: () => O2,
  multinomial: () => M2,
  neg: () => cr,
  nextFrame: () => pS,
  norm: () => Ku,
  notEqual: () => Pd,
  oneHot: () => El,
  ones: () => Da,
  onesLike: () => L2,
  op: () => N,
  outerProduct: () => B2,
  pad: () => Aa,
  pad1d: () => z2,
  pad2d: () => V2,
  pad3d: () => W2,
  pad4d: () => U2,
  pool: () => G2,
  pow: () => ui,
  prelu: () => Md,
  print: () => md,
  prod: () => H2,
  profile: () => gde,
  raggedGather: () => K2,
  raggedRange: () => q2,
  raggedTensorToTensor: () => j2,
  rand: () => X2,
  randomGamma: () => g1,
  randomNormal: () => Ud,
  randomStandardNormal: () => x1,
  randomUniform: () => dc,
  randomUniformInt: () => y1,
  range: () => mu,
  ready: () => bde,
  real: () => ci,
  reciprocal: () => b1,
  registerBackend: () => su,
  registerGradient: () => Xce,
  registerKernel: () => ri,
  registerOp: () => D5,
  relu: () => du,
  relu6: () => Gd,
  removeBackend: () => wde,
  reshape: () => W,
  reverse: () => mo,
  reverse1d: () => C1,
  reverse2d: () => w1,
  reverse3d: () => S1,
  reverse4d: () => I1,
  rfft: () => hc,
  round: () => Hd,
  rsqrt: () => v1,
  scalar: () => ke,
  scatterND: () => P6,
  scatter_util: () => hu,
  searchSorted: () => $l,
  selu: () => k1,
  separableConv2d: () => N1,
  serialization: () => WN,
  setBackend: () => yde,
  setPlatform: () => kde,
  setThreadsCount: () => Qse,
  setWasmPath: () => Xse,
  setWasmPaths: () => Yse,
  setWebGLContext: () => vI,
  setdiff1dAsync: () => T1,
  shared: () => Tc,
  sigmoid: () => $a,
  sign: () => _1,
  signal: () => Hj,
  sin: () => $1,
  sinh: () => E1,
  slice: () => Xe,
  slice1d: () => R1,
  slice2d: () => D1,
  slice3d: () => A1,
  slice4d: () => F1,
  slice_util: () => ct,
  softmax: () => P1,
  softplus: () => _d,
  spaceToBatchND: () => Od,
  sparse: () => Xj,
  sparseToDense: () => L6,
  spectral: () => Gj,
  split: () => li,
  sqrt: () => Dr,
  square: () => er,
  squaredDifference: () => qd,
  squeeze: () => gc,
  stack: () => kr,
  step: () => jd,
  stridedSlice: () => O1,
  string: () => Yj,
  sub: () => Te,
  sum: () => ot,
  sumOutType: () => ni,
  tan: () => M1,
  tanh: () => Nl,
  tensor: () => ur,
  tensor1d: () => tr,
  tensor2d: () => fu,
  tensor3d: () => Xd,
  tensor4d: () => L1,
  tensor5d: () => B1,
  tensor6d: () => z1,
  tensorScatterUpdate: () => W1,
  tensor_util: () => ek,
  test_util: () => h1,
  tidy: () => De,
  tile: () => cu,
  time: () => xde,
  topk: () => U1,
  train: () => TGe,
  transpose: () => yc,
  truncatedNormal: () => G1,
  unique: () => H1,
  unregisterGradient: () => Qce,
  unregisterKernel: () => Yce,
  unsortedSegmentSum: () => K1,
  unstack: () => fo,
  upcastType: () => dt,
  upperBound: () => q1,
  util: () => y,
  valueAndGrad: () => PK,
  valueAndGrads: () => OK,
  variable: () => j1,
  variableGrads: () => zw,
  version: () => Ace,
  version_converter: () => D8,
  version_core: () => _X,
  version_cpu: () => cY,
  version_wasm: () => Jse,
  version_webgl: () => s9,
  webgl: () => Cat,
  webgl_util: () => Ac,
  webgpu_util: () => Yv,
  where: () => lo,
  whereAsync: () => Qd,
  zeros: () => Gr,
  zerosLike: () => Ht
});
var wG = Object.create;
var QC = Object.defineProperty;
var SG = Object.getOwnPropertyDescriptor;
var IG = Object.getOwnPropertyNames;
var vG = Object.getPrototypeOf;
var kG = Object.prototype.hasOwnProperty;
var qt = (r, t8) => () => (t8 || r((t8 = { exports: {} }).exports, t8), t8.exports);
var qe = (r, t8) => {
  for (var e in t8)
    QC(r, e, { get: t8[e], enumerable: true });
};
var NG = (r, t8, e, o) => {
  if (t8 && typeof t8 == "object" || typeof t8 == "function")
    for (let n of IG(t8))
      !kG.call(r, n) && n !== e && QC(r, n, { get: () => t8[n], enumerable: !(o = SG(t8, n)) || o.enumerable });
  return r;
};
var Kp = (r, t8, e) => (e = r != null ? wG(vG(r)) : {}, NG(t8 || !r || !r.__esModule ? QC(e, "default", { value: r, enumerable: true }) : e, r));
var V0 = qt((tle, z0) => {
  z0.exports = Nt;
  var No = null;
  try {
    No = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch (r) {
  }
  function Nt(r, t8, e) {
    this.low = r | 0, this.high = t8 | 0, this.unsigned = !!e;
  }
  Nt.prototype.__isLong__;
  Object.defineProperty(Nt.prototype, "__isLong__", { value: true });
  function Wr(r) {
    return (r && r.__isLong__) === true;
  }
  Nt.isLong = Wr;
  var R0 = {}, D0 = {};
  function Bu(r, t8) {
    var e, o, n;
    return t8 ? (r >>>= 0, (n = 0 <= r && r < 256) && (o = D0[r], o) ? o : (e = Tt(r, (r | 0) < 0 ? -1 : 0, true), n && (D0[r] = e), e)) : (r |= 0, (n = -128 <= r && r < 128) && (o = R0[r], o) ? o : (e = Tt(r, r < 0 ? -1 : 0, false), n && (R0[r] = e), e));
  }
  Nt.fromInt = Bu;
  function To(r, t8) {
    if (isNaN(r))
      return t8 ? Lu : _o;
    if (t8) {
      if (r < 0)
        return Lu;
      if (r >= O0)
        return B0;
    } else {
      if (r <= -F0)
        return Vr;
      if (r + 1 >= F0)
        return L0;
    }
    return r < 0 ? To(-r, t8).neg() : Tt(r % oc | 0, r / oc | 0, t8);
  }
  Nt.fromNumber = To;
  function Tt(r, t8, e) {
    return new Nt(r, t8, e);
  }
  Nt.fromBits = Tt;
  var Zm = Math.pow;
  function cw(r, t8, e) {
    if (r.length === 0)
      throw Error("empty string");
    if (r === "NaN" || r === "Infinity" || r === "+Infinity" || r === "-Infinity")
      return _o;
    if (typeof t8 == "number" ? (e = t8, t8 = false) : t8 = !!t8, e = e || 10, e < 2 || 36 < e)
      throw RangeError("radix");
    var o;
    if ((o = r.indexOf("-")) > 0)
      throw Error("interior hyphen");
    if (o === 0)
      return cw(r.substring(1), t8, e).neg();
    for (var n = To(Zm(e, 8)), s = _o, a = 0; a < r.length; a += 8) {
      var i = Math.min(8, r.length - a), p = parseInt(r.substring(a, a + i), e);
      if (i < 8) {
        var u = To(Zm(e, i));
        s = s.mul(u).add(To(p));
      } else
        s = s.mul(n), s = s.add(To(p));
    }
    return s.unsigned = t8, s;
  }
  Nt.fromString = cw;
  function Fs(r, t8) {
    return typeof r == "number" ? To(r, t8) : typeof r == "string" ? cw(r, t8) : Tt(r.low, r.high, typeof t8 == "boolean" ? t8 : r.unsigned);
  }
  Nt.fromValue = Fs;
  var A0 = 65536, XG = 1 << 24, oc = A0 * A0, O0 = oc * oc, F0 = O0 / 2, P0 = Bu(XG), _o = Bu(0);
  Nt.ZERO = _o;
  var Lu = Bu(0, true);
  Nt.UZERO = Lu;
  var rc = Bu(1);
  Nt.ONE = rc;
  var M0 = Bu(1, true);
  Nt.UONE = M0;
  var pw = Bu(-1);
  Nt.NEG_ONE = pw;
  var L0 = Tt(-1, 2147483647, false);
  Nt.MAX_VALUE = L0;
  var B0 = Tt(-1, -1, true);
  Nt.MAX_UNSIGNED_VALUE = B0;
  var Vr = Tt(0, -2147483648, false);
  Nt.MIN_VALUE = Vr;
  var de = Nt.prototype;
  de.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  de.toNumber = function() {
    return this.unsigned ? (this.high >>> 0) * oc + (this.low >>> 0) : this.high * oc + (this.low >>> 0);
  };
  de.toString = function(t8) {
    if (t8 = t8 || 10, t8 < 2 || 36 < t8)
      throw RangeError("radix");
    if (this.isZero())
      return "0";
    if (this.isNegative())
      if (this.eq(Vr)) {
        var e = To(t8), o = this.div(e), n = o.mul(e).sub(this);
        return o.toString(t8) + n.toInt().toString(t8);
      } else
        return "-" + this.neg().toString(t8);
    for (var s = To(Zm(t8, 6), this.unsigned), a = this, i = ""; ; ) {
      var p = a.div(s), u = a.sub(p.mul(s)).toInt() >>> 0, c = u.toString(t8);
      if (a = p, a.isZero())
        return c + i;
      for (; c.length < 6; )
        c = "0" + c;
      i = "" + c + i;
    }
  };
  de.getHighBits = function() {
    return this.high;
  };
  de.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };
  de.getLowBits = function() {
    return this.low;
  };
  de.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };
  de.getNumBitsAbs = function() {
    if (this.isNegative())
      return this.eq(Vr) ? 64 : this.neg().getNumBitsAbs();
    for (var t8 = this.high != 0 ? this.high : this.low, e = 31; e > 0 && !(t8 & 1 << e); e--)
      ;
    return this.high != 0 ? e + 33 : e + 1;
  };
  de.isZero = function() {
    return this.high === 0 && this.low === 0;
  };
  de.eqz = de.isZero;
  de.isNegative = function() {
    return !this.unsigned && this.high < 0;
  };
  de.isPositive = function() {
    return this.unsigned || this.high >= 0;
  };
  de.isOdd = function() {
    return (this.low & 1) === 1;
  };
  de.isEven = function() {
    return (this.low & 1) === 0;
  };
  de.equals = function(t8) {
    return Wr(t8) || (t8 = Fs(t8)), this.unsigned !== t8.unsigned && this.high >>> 31 === 1 && t8.high >>> 31 === 1 ? false : this.high === t8.high && this.low === t8.low;
  };
  de.eq = de.equals;
  de.notEquals = function(t8) {
    return !this.eq(t8);
  };
  de.neq = de.notEquals;
  de.ne = de.notEquals;
  de.lessThan = function(t8) {
    return this.comp(t8) < 0;
  };
  de.lt = de.lessThan;
  de.lessThanOrEqual = function(t8) {
    return this.comp(t8) <= 0;
  };
  de.lte = de.lessThanOrEqual;
  de.le = de.lessThanOrEqual;
  de.greaterThan = function(t8) {
    return this.comp(t8) > 0;
  };
  de.gt = de.greaterThan;
  de.greaterThanOrEqual = function(t8) {
    return this.comp(t8) >= 0;
  };
  de.gte = de.greaterThanOrEqual;
  de.ge = de.greaterThanOrEqual;
  de.compare = function(t8) {
    if (Wr(t8) || (t8 = Fs(t8)), this.eq(t8))
      return 0;
    var e = this.isNegative(), o = t8.isNegative();
    return e && !o ? -1 : !e && o ? 1 : this.unsigned ? t8.high >>> 0 > this.high >>> 0 || t8.high === this.high && t8.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(t8).isNegative() ? -1 : 1;
  };
  de.comp = de.compare;
  de.negate = function() {
    return !this.unsigned && this.eq(Vr) ? Vr : this.not().add(rc);
  };
  de.neg = de.negate;
  de.add = function(t8) {
    Wr(t8) || (t8 = Fs(t8));
    var e = this.high >>> 16, o = this.high & 65535, n = this.low >>> 16, s = this.low & 65535, a = t8.high >>> 16, i = t8.high & 65535, p = t8.low >>> 16, u = t8.low & 65535, c = 0, l = 0, m = 0, d = 0;
    return d += s + u, m += d >>> 16, d &= 65535, m += n + p, l += m >>> 16, m &= 65535, l += o + i, c += l >>> 16, l &= 65535, c += e + a, c &= 65535, Tt(m << 16 | d, c << 16 | l, this.unsigned);
  };
  de.subtract = function(t8) {
    return Wr(t8) || (t8 = Fs(t8)), this.add(t8.neg());
  };
  de.sub = de.subtract;
  de.multiply = function(t8) {
    if (this.isZero())
      return _o;
    if (Wr(t8) || (t8 = Fs(t8)), No) {
      var e = No.mul(this.low, this.high, t8.low, t8.high);
      return Tt(e, No.get_high(), this.unsigned);
    }
    if (t8.isZero())
      return _o;
    if (this.eq(Vr))
      return t8.isOdd() ? Vr : _o;
    if (t8.eq(Vr))
      return this.isOdd() ? Vr : _o;
    if (this.isNegative())
      return t8.isNegative() ? this.neg().mul(t8.neg()) : this.neg().mul(t8).neg();
    if (t8.isNegative())
      return this.mul(t8.neg()).neg();
    if (this.lt(P0) && t8.lt(P0))
      return To(this.toNumber() * t8.toNumber(), this.unsigned);
    var o = this.high >>> 16, n = this.high & 65535, s = this.low >>> 16, a = this.low & 65535, i = t8.high >>> 16, p = t8.high & 65535, u = t8.low >>> 16, c = t8.low & 65535, l = 0, m = 0, d = 0, f = 0;
    return f += a * c, d += f >>> 16, f &= 65535, d += s * c, m += d >>> 16, d &= 65535, d += a * u, m += d >>> 16, d &= 65535, m += n * c, l += m >>> 16, m &= 65535, m += s * u, l += m >>> 16, m &= 65535, m += a * p, l += m >>> 16, m &= 65535, l += o * c + n * u + s * p + a * i, l &= 65535, Tt(d << 16 | f, l << 16 | m, this.unsigned);
  };
  de.mul = de.multiply;
  de.divide = function(t8) {
    if (Wr(t8) || (t8 = Fs(t8)), t8.isZero())
      throw Error("division by zero");
    if (No) {
      if (!this.unsigned && this.high === -2147483648 && t8.low === -1 && t8.high === -1)
        return this;
      var e = (this.unsigned ? No.div_u : No.div_s)(this.low, this.high, t8.low, t8.high);
      return Tt(e, No.get_high(), this.unsigned);
    }
    if (this.isZero())
      return this.unsigned ? Lu : _o;
    var o, n, s;
    if (this.unsigned) {
      if (t8.unsigned || (t8 = t8.toUnsigned()), t8.gt(this))
        return Lu;
      if (t8.gt(this.shru(1)))
        return M0;
      s = Lu;
    } else {
      if (this.eq(Vr)) {
        if (t8.eq(rc) || t8.eq(pw))
          return Vr;
        if (t8.eq(Vr))
          return rc;
        var a = this.shr(1);
        return o = a.div(t8).shl(1), o.eq(_o) ? t8.isNegative() ? rc : pw : (n = this.sub(t8.mul(o)), s = o.add(n.div(t8)), s);
      } else if (t8.eq(Vr))
        return this.unsigned ? Lu : _o;
      if (this.isNegative())
        return t8.isNegative() ? this.neg().div(t8.neg()) : this.neg().div(t8).neg();
      if (t8.isNegative())
        return this.div(t8.neg()).neg();
      s = _o;
    }
    for (n = this; n.gte(t8); ) {
      o = Math.max(1, Math.floor(n.toNumber() / t8.toNumber()));
      for (var i = Math.ceil(Math.log(o) / Math.LN2), p = i <= 48 ? 1 : Zm(2, i - 48), u = To(o), c = u.mul(t8); c.isNegative() || c.gt(n); )
        o -= p, u = To(o, this.unsigned), c = u.mul(t8);
      u.isZero() && (u = rc), s = s.add(u), n = n.sub(c);
    }
    return s;
  };
  de.div = de.divide;
  de.modulo = function(t8) {
    if (Wr(t8) || (t8 = Fs(t8)), No) {
      var e = (this.unsigned ? No.rem_u : No.rem_s)(this.low, this.high, t8.low, t8.high);
      return Tt(e, No.get_high(), this.unsigned);
    }
    return this.sub(this.div(t8).mul(t8));
  };
  de.mod = de.modulo;
  de.rem = de.modulo;
  de.not = function() {
    return Tt(~this.low, ~this.high, this.unsigned);
  };
  de.and = function(t8) {
    return Wr(t8) || (t8 = Fs(t8)), Tt(this.low & t8.low, this.high & t8.high, this.unsigned);
  };
  de.or = function(t8) {
    return Wr(t8) || (t8 = Fs(t8)), Tt(this.low | t8.low, this.high | t8.high, this.unsigned);
  };
  de.xor = function(t8) {
    return Wr(t8) || (t8 = Fs(t8)), Tt(this.low ^ t8.low, this.high ^ t8.high, this.unsigned);
  };
  de.shiftLeft = function(t8) {
    return Wr(t8) && (t8 = t8.toInt()), (t8 &= 63) === 0 ? this : t8 < 32 ? Tt(this.low << t8, this.high << t8 | this.low >>> 32 - t8, this.unsigned) : Tt(0, this.low << t8 - 32, this.unsigned);
  };
  de.shl = de.shiftLeft;
  de.shiftRight = function(t8) {
    return Wr(t8) && (t8 = t8.toInt()), (t8 &= 63) === 0 ? this : t8 < 32 ? Tt(this.low >>> t8 | this.high << 32 - t8, this.high >> t8, this.unsigned) : Tt(this.high >> t8 - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  };
  de.shr = de.shiftRight;
  de.shiftRightUnsigned = function(t8) {
    if (Wr(t8) && (t8 = t8.toInt()), t8 &= 63, t8 === 0)
      return this;
    var e = this.high;
    if (t8 < 32) {
      var o = this.low;
      return Tt(o >>> t8 | e << 32 - t8, e >>> t8, this.unsigned);
    } else
      return t8 === 32 ? Tt(e, 0, this.unsigned) : Tt(e >>> t8 - 32, 0, this.unsigned);
  };
  de.shru = de.shiftRightUnsigned;
  de.shr_u = de.shiftRightUnsigned;
  de.toSigned = function() {
    return this.unsigned ? Tt(this.low, this.high, false) : this;
  };
  de.toUnsigned = function() {
    return this.unsigned ? this : Tt(this.low, this.high, true);
  };
  de.toBytes = function(t8) {
    return t8 ? this.toBytesLE() : this.toBytesBE();
  };
  de.toBytesLE = function() {
    var t8 = this.high, e = this.low;
    return [e & 255, e >>> 8 & 255, e >>> 16 & 255, e >>> 24, t8 & 255, t8 >>> 8 & 255, t8 >>> 16 & 255, t8 >>> 24];
  };
  de.toBytesBE = function() {
    var t8 = this.high, e = this.low;
    return [t8 >>> 24, t8 >>> 16 & 255, t8 >>> 8 & 255, t8 & 255, e >>> 24, e >>> 16 & 255, e >>> 8 & 255, e & 255];
  };
  Nt.fromBytes = function(t8, e, o) {
    return o ? Nt.fromBytesLE(t8, e) : Nt.fromBytesBE(t8, e);
  };
  Nt.fromBytesLE = function(t8, e) {
    return new Nt(t8[0] | t8[1] << 8 | t8[2] << 16 | t8[3] << 24, t8[4] | t8[5] << 8 | t8[6] << 16 | t8[7] << 24, e);
  };
  Nt.fromBytesBE = function(t8, e) {
    return new Nt(t8[4] << 24 | t8[5] << 16 | t8[6] << 8 | t8[7], t8[0] << 24 | t8[1] << 16 | t8[2] << 8 | t8[3], e);
  };
});
var Ik = qt(() => {
});
var vk = qt(() => {
});
var Q2 = qt((Y2, Vw) => {
  (function(r, t8, e) {
    function o(i) {
      var p = this, u = a();
      p.next = function() {
        var c = 2091639 * p.s0 + p.c * 23283064365386963e-26;
        return p.s0 = p.s1, p.s1 = p.s2, p.s2 = c - (p.c = c | 0);
      }, p.c = 1, p.s0 = u(" "), p.s1 = u(" "), p.s2 = u(" "), p.s0 -= u(i), p.s0 < 0 && (p.s0 += 1), p.s1 -= u(i), p.s1 < 0 && (p.s1 += 1), p.s2 -= u(i), p.s2 < 0 && (p.s2 += 1), u = null;
    }
    function n(i, p) {
      return p.c = i.c, p.s0 = i.s0, p.s1 = i.s1, p.s2 = i.s2, p;
    }
    function s(i, p) {
      var u = new o(i), c = p && p.state, l = u.next;
      return l.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, l.double = function() {
        return l() + (l() * 2097152 | 0) * 11102230246251565e-32;
      }, l.quick = l, c && (typeof c == "object" && n(c, u), l.state = function() {
        return n(u, {});
      }), l;
    }
    function a() {
      var i = 4022871197, p = function(u) {
        u = String(u);
        for (var c = 0; c < u.length; c++) {
          i += u.charCodeAt(c);
          var l = 0.02519603282416938 * i;
          i = l >>> 0, l -= i, l *= i, i = l >>> 0, l -= i, i += l * 4294967296;
        }
        return (i >>> 0) * 23283064365386963e-26;
      };
      return p;
    }
    t8 && t8.exports ? t8.exports = s : e && e.amd ? e(function() {
      return s;
    }) : this.alea = s;
  })(Y2, typeof Vw == "object" && Vw, typeof define == "function" && define);
});
var J2 = qt((Z2, Ww) => {
  (function(r, t8, e) {
    function o(a) {
      var i = this, p = "";
      i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.next = function() {
        var c = i.x ^ i.x << 11;
        return i.x = i.y, i.y = i.z, i.z = i.w, i.w ^= i.w >>> 19 ^ c ^ c >>> 8;
      }, a === (a | 0) ? i.x = a : p += a;
      for (var u = 0; u < p.length + 64; u++)
        i.x ^= p.charCodeAt(u) | 0, i.next();
    }
    function n(a, i) {
      return i.x = a.x, i.y = a.y, i.z = a.z, i.w = a.w, i;
    }
    function s(a, i) {
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (typeof u == "object" && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    t8 && t8.exports ? t8.exports = s : e && e.amd ? e(function() {
      return s;
    }) : this.xor128 = s;
  })(Z2, typeof Ww == "object" && Ww, typeof define == "function" && define);
});
var t1 = qt((e1, Uw) => {
  (function(r, t8, e) {
    function o(a) {
      var i = this, p = "";
      i.next = function() {
        var c = i.x ^ i.x >>> 2;
        return i.x = i.y, i.y = i.z, i.z = i.w, i.w = i.v, (i.d = i.d + 362437 | 0) + (i.v = i.v ^ i.v << 4 ^ (c ^ c << 1)) | 0;
      }, i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.v = 0, a === (a | 0) ? i.x = a : p += a;
      for (var u = 0; u < p.length + 64; u++)
        i.x ^= p.charCodeAt(u) | 0, u == p.length && (i.d = i.x << 10 ^ i.x >>> 4), i.next();
    }
    function n(a, i) {
      return i.x = a.x, i.y = a.y, i.z = a.z, i.w = a.w, i.v = a.v, i.d = a.d, i;
    }
    function s(a, i) {
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (typeof u == "object" && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    t8 && t8.exports ? t8.exports = s : e && e.amd ? e(function() {
      return s;
    }) : this.xorwow = s;
  })(e1, typeof Uw == "object" && Uw, typeof define == "function" && define);
});
var o1 = qt((r1, Gw) => {
  (function(r, t8, e) {
    function o(a) {
      var i = this;
      i.next = function() {
        var u = i.x, c = i.i, l, m, d;
        return l = u[c], l ^= l >>> 7, m = l ^ l << 24, l = u[c + 1 & 7], m ^= l ^ l >>> 10, l = u[c + 3 & 7], m ^= l ^ l >>> 3, l = u[c + 4 & 7], m ^= l ^ l << 7, l = u[c + 7 & 7], l = l ^ l << 13, m ^= l ^ l << 9, u[c] = m, i.i = c + 1 & 7, m;
      };
      function p(u, c) {
        var l, m, d = [];
        if (c === (c | 0))
          m = d[0] = c;
        else
          for (c = "" + c, l = 0; l < c.length; ++l)
            d[l & 7] = d[l & 7] << 15 ^ c.charCodeAt(l) + d[l + 1 & 7] << 13;
        for (; d.length < 8; )
          d.push(0);
        for (l = 0; l < 8 && d[l] === 0; ++l)
          ;
        for (l == 8 ? m = d[7] = -1 : m = d[l], u.x = d, u.i = 0, l = 256; l > 0; --l)
          u.next();
      }
      p(i, a);
    }
    function n(a, i) {
      return i.x = a.x.slice(), i.i = a.i, i;
    }
    function s(a, i) {
      a == null && (a = +/* @__PURE__ */ new Date());
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (u.x && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    t8 && t8.exports ? t8.exports = s : e && e.amd ? e(function() {
      return s;
    }) : this.xorshift7 = s;
  })(r1, typeof Gw == "object" && Gw, typeof define == "function" && define);
});
var s1 = qt((n1, Hw) => {
  (function(r, t8, e) {
    function o(a) {
      var i = this;
      i.next = function() {
        var u = i.w, c = i.X, l = i.i, m, d;
        return i.w = u = u + 1640531527 | 0, d = c[l + 34 & 127], m = c[l = l + 1 & 127], d ^= d << 13, m ^= m << 17, d ^= d >>> 15, m ^= m >>> 12, d = c[l] = d ^ m, i.i = l, d + (u ^ u >>> 16) | 0;
      };
      function p(u, c) {
        var l, m, d, f, h, g = [], x = 128;
        for (c === (c | 0) ? (m = c, c = null) : (c = c + "\0", m = 0, x = Math.max(x, c.length)), d = 0, f = -32; f < x; ++f)
          c && (m ^= c.charCodeAt((f + 32) % c.length)), f === 0 && (h = m), m ^= m << 10, m ^= m >>> 15, m ^= m << 4, m ^= m >>> 13, f >= 0 && (h = h + 1640531527 | 0, l = g[f & 127] ^= m + h, d = l == 0 ? d + 1 : 0);
        for (d >= 128 && (g[(c && c.length || 0) & 127] = -1), d = 127, f = 4 * 128; f > 0; --f)
          m = g[d + 34 & 127], l = g[d = d + 1 & 127], m ^= m << 13, l ^= l << 17, m ^= m >>> 15, l ^= l >>> 12, g[d] = m ^ l;
        u.w = h, u.X = g, u.i = d;
      }
      p(i, a);
    }
    function n(a, i) {
      return i.i = a.i, i.w = a.w, i.X = a.X.slice(), i;
    }
    function s(a, i) {
      a == null && (a = +/* @__PURE__ */ new Date());
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (u.X && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    t8 && t8.exports ? t8.exports = s : e && e.amd ? e(function() {
      return s;
    }) : this.xor4096 = s;
  })(n1, typeof Hw == "object" && Hw, typeof define == "function" && define);
});
var i1 = qt((a1, Kw) => {
  (function(r, t8, e) {
    function o(a) {
      var i = this, p = "";
      i.next = function() {
        var c = i.b, l = i.c, m = i.d, d = i.a;
        return c = c << 25 ^ c >>> 7 ^ l, l = l - m | 0, m = m << 24 ^ m >>> 8 ^ d, d = d - c | 0, i.b = c = c << 20 ^ c >>> 12 ^ l, i.c = l = l - m | 0, i.d = m << 16 ^ l >>> 16 ^ d, i.a = d - c | 0;
      }, i.a = 0, i.b = 0, i.c = -1640531527, i.d = 1367130551, a === Math.floor(a) ? (i.a = a / 4294967296 | 0, i.b = a | 0) : p += a;
      for (var u = 0; u < p.length + 20; u++)
        i.b ^= p.charCodeAt(u) | 0, i.next();
    }
    function n(a, i) {
      return i.a = a.a, i.b = a.b, i.c = a.c, i.d = a.d, i;
    }
    function s(a, i) {
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (typeof u == "object" && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    t8 && t8.exports ? t8.exports = s : e && e.amd ? e(function() {
      return s;
    }) : this.tychei = s;
  })(a1, typeof Kw == "object" && Kw, typeof define == "function" && define);
});
var u1 = qt(() => {
});
var c1 = qt((p1, Ld) => {
  (function(r, t8, e) {
    var o = 256, n = 6, s = 52, a = "random", i = e.pow(o, n), p = e.pow(2, s), u = p * 2, c = o - 1, l;
    function m(C, S, k) {
      var _ = [];
      S = S == true ? { entropy: true } : S || {};
      var E = g(h(S.entropy ? [C, b(t8)] : C == null ? x() : C, 3), _), R = new d(_), D = function() {
        for (var P = R.g(n), O = i, M = 0; P < p; )
          P = (P + M) * o, O *= o, M = R.g(1);
        for (; P >= u; )
          P /= 2, O /= 2, M >>>= 1;
        return (P + M) / O;
      };
      return D.int32 = function() {
        return R.g(4) | 0;
      }, D.quick = function() {
        return R.g(4) / 4294967296;
      }, D.double = D, g(b(R.S), t8), (S.pass || k || function(P, O, M, L) {
        return L && (L.S && f(L, R), P.state = function() {
          return f(R, {});
        }), M ? (e[a] = P, O) : P;
      })(D, E, "global" in S ? S.global : this == e, S.state);
    }
    function d(C) {
      var S, k = C.length, _ = this, E = 0, R = _.i = _.j = 0, D = _.S = [];
      for (k || (C = [k++]); E < o; )
        D[E] = E++;
      for (E = 0; E < o; E++)
        D[E] = D[R = c & R + C[E % k] + (S = D[E])], D[R] = S;
      (_.g = function(P) {
        for (var O, M = 0, L = _.i, B = _.j, z = _.S; P--; )
          O = z[L = c & L + 1], M = M * o + z[c & (z[L] = z[B = c & B + O]) + (z[B] = O)];
        return _.i = L, _.j = B, M;
      })(o);
    }
    function f(C, S) {
      return S.i = C.i, S.j = C.j, S.S = C.S.slice(), S;
    }
    function h(C, S) {
      var k = [], _ = typeof C, E;
      if (S && _ == "object")
        for (E in C)
          try {
            k.push(h(C[E], S - 1));
          } catch (R) {
          }
      return k.length ? k : _ == "string" ? C : C + "\0";
    }
    function g(C, S) {
      for (var k = C + "", _, E = 0; E < k.length; )
        S[c & E] = c & (_ ^= S[c & E] * 19) + k.charCodeAt(E++);
      return b(S);
    }
    function x() {
      try {
        var C;
        return l && (C = l.randomBytes) ? C = C(o) : (C = new Uint8Array(o), (r.crypto || r.msCrypto).getRandomValues(C)), b(C);
      } catch (_) {
        var S = r.navigator, k = S && S.plugins;
        return [+/* @__PURE__ */ new Date(), r, k, r.screen, b(t8)];
      }
    }
    function b(C) {
      return String.fromCharCode.apply(0, C);
    }
    if (g(e.random(), t8), typeof Ld == "object" && Ld.exports) {
      Ld.exports = m;
      try {
        l = u1();
      } catch (C) {
      }
    } else
      typeof define == "function" && define.amd ? define(function() {
        return m;
      }) : e["seed" + a] = m;
  })(typeof self != "undefined" ? self : p1, [], Math);
});
var qw = qt((Y2e, l1) => {
  var vq = Q2(), kq = J2(), Nq = t1(), Tq = o1(), _q = s1(), $q = i1(), Qu = c1();
  Qu.alea = vq;
  Qu.xor128 = kq;
  Qu.xorwow = Nq;
  Qu.xorshift7 = Tq;
  Qu.xor4096 = _q;
  Qu.tychei = $q;
  l1.exports = Qu;
});
var Bv = qt(() => {
});
var zv = qt(() => {
});
var RB = qt(() => {
});
var DB = qt(() => {
});
var AB = qt(() => {
});
var FB = qt((Wg, Wv) => {
  var Vv = (() => {
    var r = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (r = r || __filename), function(t8) {
      t8 = t8 || {};
      function e() {
        return oe.buffer != Ge && _t(oe.buffer), mt;
      }
      function o() {
        return oe.buffer != Ge && _t(oe.buffer), it;
      }
      function n() {
        return oe.buffer != Ge && _t(oe.buffer), gt;
      }
      function s() {
        return oe.buffer != Ge && _t(oe.buffer), Lr;
      }
      function a() {
        return oe.buffer != Ge && _t(oe.buffer), Lt;
      }
      function i() {
        return oe.buffer != Ge && _t(oe.buffer), to;
      }
      function p() {
        return oe.buffer != Ge && _t(oe.buffer), nr;
      }
      var u = typeof t8 != "undefined" ? t8 : {}, c, l;
      u.ready = new Promise(function(F, V) {
        c = F, l = V;
      });
      var m;
      typeof process != "undefined" && process.listeners && (m = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
      var d = Object.assign({}, u), f = [], h = "./this.program", g = (F, V) => {
        throw V;
      }, x = typeof window == "object", b = typeof importScripts == "function", C = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", S = u.ENVIRONMENT_IS_PTHREAD || false, k = "";
      function _(F) {
        return u.locateFile ? u.locateFile(F, k) : k + F;
      }
      var E, R, D, P;
      function O(F) {
        if (F instanceof Eu)
          return;
        j("exiting due to exception: " + F);
      }
      if (C) {
        var M = Bv(), L = zv();
        b ? k = L.dirname(k) + "/" : k = __dirname + "/", E = (V, ue) => (V = zp(V) ? new URL(V) : L.normalize(V), M.readFileSync(V, ue ? void 0 : "utf8")), D = (V) => {
          var ue = E(V, true);
          return ue.buffer || (ue = new Uint8Array(ue)), ue;
        }, R = (V, ue, Ee) => {
          V = zp(V) ? new URL(V) : L.normalize(V), M.readFile(V, function(Be, Le) {
            Be ? Ee(Be) : ue(Le.buffer);
          });
        }, process.argv.length > 1 && (h = process.argv[1].replace(/\\/g, "/")), f = process.argv.slice(2), process.on("uncaughtException", function(V) {
          if (!(V instanceof Eu))
            throw V;
        }), process.on("unhandledRejection", function(V) {
          throw V;
        }), g = (V, ue) => {
          if (Bo())
            throw process.exitCode = V, ue;
          O(ue), process.exit(V);
        }, u.inspect = function() {
          return "[Emscripten Module object]";
        };
        let F;
        try {
          F = RB();
        } catch (V) {
          throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), V;
        }
        global.Worker = F.Worker;
      } else
        (x || b) && (b ? k = self.location.href : typeof document != "undefined" && document.currentScript && (k = document.currentScript.src), typeof r != "undefined" && r && (k = r), k.indexOf("blob:") !== 0 ? k = k.substr(0, k.replace(/[?#].*/, "").lastIndexOf("/") + 1) : k = "", C || (E = (F) => {
          var V = new XMLHttpRequest();
          return V.open("GET", F, false), V.send(null), V.responseText;
        }, b && (D = (F) => {
          var V = new XMLHttpRequest();
          return V.open("GET", F, false), V.responseType = "arraybuffer", V.send(null), new Uint8Array(V.response);
        }), R = (F, V, ue) => {
          var Ee = new XMLHttpRequest();
          Ee.open("GET", F, true), Ee.responseType = "arraybuffer", Ee.onload = () => {
            if (Ee.status == 200 || Ee.status == 0 && Ee.response) {
              V(Ee.response);
              return;
            }
            ue();
          }, Ee.onerror = ue, Ee.send(null);
        }), P = (F) => document.title = F);
      C && typeof performance == "undefined" && (global.performance = DB().performance);
      var B = console.log.bind(console), z = console.warn.bind(console);
      C && (B = (F) => M.writeSync(1, F + `
`), z = (F) => M.writeSync(2, F + `
`));
      var U = u.print || B, j = u.printErr || z;
      Object.assign(u, d), d = null, u.arguments && (f = u.arguments), u.thisProgram && (h = u.thisProgram), u.quit && (g = u.quit);
      var q = 4, Y = Atomics.load, J = Atomics.store, re = Atomics.compareExchange, ne;
      u.wasmBinary && (ne = u.wasmBinary);
      var ee = u.noExitRuntime || true;
      typeof WebAssembly != "object" && $u("no native wasm support detected");
      var oe, ie, le = false, be;
      function _e(F, V) {
        F || $u(V);
      }
      var ve = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
      function Fe(F, V, ue) {
        V >>>= 0;
        for (var Ee = V + ue, Be = V; F[Be] && !(Be >= Ee); )
          ++Be;
        if (Be - V > 16 && F.buffer && ve)
          return ve.decode(F.buffer instanceof SharedArrayBuffer ? F.slice(V, Be) : F.subarray(V, Be));
        for (var Le = ""; V < Be; ) {
          var ge = F[V++];
          if (!(ge & 128)) {
            Le += String.fromCharCode(ge);
            continue;
          }
          var Ne = F[V++] & 63;
          if ((ge & 224) == 192) {
            Le += String.fromCharCode((ge & 31) << 6 | Ne);
            continue;
          }
          var Pt = F[V++] & 63;
          if ((ge & 240) == 224 ? ge = (ge & 15) << 12 | Ne << 6 | Pt : ge = (ge & 7) << 18 | Ne << 12 | Pt << 6 | F[V++] & 63, ge < 65536)
            Le += String.fromCharCode(ge);
          else {
            var so = ge - 65536;
            Le += String.fromCharCode(55296 | so >> 10, 56320 | so & 1023);
          }
        }
        return Le;
      }
      function Pe(F, V) {
        return F >>>= 0, F ? Fe(o(), F, V) : "";
      }
      function st(F, V, ue, Ee) {
        if (ue >>>= 0, !(Ee > 0))
          return 0;
        for (var Be = ue, Le = ue + Ee - 1, ge = 0; ge < F.length; ++ge) {
          var Ne = F.charCodeAt(ge);
          if (Ne >= 55296 && Ne <= 57343) {
            var Pt = F.charCodeAt(++ge);
            Ne = 65536 + ((Ne & 1023) << 10) | Pt & 1023;
          }
          if (Ne <= 127) {
            if (ue >= Le)
              break;
            V[ue++ >>> 0] = Ne;
          } else if (Ne <= 2047) {
            if (ue + 1 >= Le)
              break;
            V[ue++ >>> 0] = 192 | Ne >> 6, V[ue++ >>> 0] = 128 | Ne & 63;
          } else if (Ne <= 65535) {
            if (ue + 2 >= Le)
              break;
            V[ue++ >>> 0] = 224 | Ne >> 12, V[ue++ >>> 0] = 128 | Ne >> 6 & 63, V[ue++ >>> 0] = 128 | Ne & 63;
          } else {
            if (ue + 3 >= Le)
              break;
            V[ue++ >>> 0] = 240 | Ne >> 18, V[ue++ >>> 0] = 128 | Ne >> 12 & 63, V[ue++ >>> 0] = 128 | Ne >> 6 & 63, V[ue++ >>> 0] = 128 | Ne & 63;
          }
        }
        return V[ue >>> 0] = 0, ue - Be;
      }
      function lt(F, V, ue) {
        return st(F, o(), V, ue);
      }
      var Ge, mt, it, gt, xt, Lr, Lt, to, nr;
      S && (Ge = u.buffer);
      function _t(F) {
        Ge = F, u.HEAP8 = mt = new Int8Array(F), u.HEAP16 = gt = new Int16Array(F), u.HEAP32 = Lr = new Int32Array(F), u.HEAPU8 = it = new Uint8Array(F), u.HEAPU16 = xt = new Uint16Array(F), u.HEAPU32 = Lt = new Uint32Array(F), u.HEAPF32 = to = new Float32Array(F), u.HEAPF64 = nr = new Float64Array(F);
      }
      var sr = u.INITIAL_MEMORY || 16777216;
      if (S)
        oe = u.wasmMemory, Ge = u.buffer;
      else if (u.wasmMemory)
        oe = u.wasmMemory;
      else if (oe = new WebAssembly.Memory({ initial: sr / 65536, maximum: 65536, shared: true }), !(oe.buffer instanceof SharedArrayBuffer))
        throw j("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), C && j("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
      oe && (Ge = oe.buffer), sr = Ge.byteLength, _t(Ge);
      var ar, ro = [], oo = [], hr = [], Wa = false;
      function Bo() {
        return ee;
      }
      function Ks() {
        if (u.preRun)
          for (typeof u.preRun == "function" && (u.preRun = [u.preRun]); u.preRun.length; )
            sl(u.preRun.shift());
        ul(ro);
      }
      function Yt() {
        Wa = true, !S && ul(oo);
      }
      function Ua() {
        if (!S) {
          if (u.postRun)
            for (typeof u.postRun == "function" && (u.postRun = [u.postRun]); u.postRun.length; )
              l0(u.postRun.shift());
          ul(hr);
        }
      }
      function sl(F) {
        ro.unshift(F);
      }
      function al(F) {
        oo.unshift(F);
      }
      function l0(F) {
        hr.unshift(F);
      }
      var Ti = 0, Bp = null, Ga = null;
      function Cy(F) {
        Ti++, u.monitorRunDependencies && u.monitorRunDependencies(Ti);
      }
      function wm(F) {
        if (Ti--, u.monitorRunDependencies && u.monitorRunDependencies(Ti), Ti == 0 && (Bp !== null && (clearInterval(Bp), Bp = null), Ga)) {
          var V = Ga;
          Ga = null, V();
        }
      }
      function $u(F) {
        u.onAbort && u.onAbort(F), F = "Aborted(" + F + ")", j(F), le = true, be = 1, F += ". Build with -sASSERTIONS for more info.";
        var V = new WebAssembly.RuntimeError(F);
        throw l(V), V;
      }
      var wy = "data:application/octet-stream;base64,";
      function Sm(F) {
        return F.startsWith(wy);
      }
      function zp(F) {
        return F.startsWith("file://");
      }
      var gr;
      gr = "tfjs-backend-wasm-threaded-simd.wasm", Sm(gr) || (gr = _(gr));
      function Im(F) {
        try {
          if (F == gr && ne)
            return new Uint8Array(ne);
          if (D)
            return D(F);
          throw "both async and sync fetching of the wasm failed";
        } catch (V) {
          $u(V);
        }
      }
      function Sy() {
        if (!ne && (x || b)) {
          if (typeof fetch == "function" && !zp(gr))
            return fetch(gr, { credentials: "same-origin" }).then(function(F) {
              if (!F.ok)
                throw "failed to load wasm binary file at '" + gr + "'";
              return F.arrayBuffer();
            }).catch(function() {
              return Im(gr);
            });
          if (R)
            return new Promise(function(F, V) {
              R(gr, function(ue) {
                F(new Uint8Array(ue));
              }, V);
            });
        }
        return Promise.resolve().then(function() {
          return Im(gr);
        });
      }
      function Iy() {
        var F = { env: Om, wasi_snapshot_preview1: Om };
        function V(ge, Ne) {
          var Pt = ge.exports;
          if (u.asm = Pt, Dy(u.asm._emscripten_tls_init), ar = u.asm.__indirect_function_table, al(u.asm.__wasm_call_ctors), ie = Ne, !S) {
            var so = Me.unusedWorkers.length;
            Me.unusedWorkers.forEach(function(Ka) {
              Me.loadWasmModuleToWorker(Ka, function() {
                --so || wm("wasm-instantiate");
              });
            });
          }
        }
        S || Cy("wasm-instantiate");
        function ue(ge) {
          V(ge.instance, ge.module);
        }
        function Ee(ge) {
          return Sy().then(function(Ne) {
            return WebAssembly.instantiate(Ne, F);
          }).then(function(Ne) {
            return Ne;
          }).then(ge, function(Ne) {
            j("failed to asynchronously prepare wasm: " + Ne), $u(Ne);
          });
        }
        function Be() {
          return !ne && typeof WebAssembly.instantiateStreaming == "function" && !Sm(gr) && !zp(gr) && !C && typeof fetch == "function" ? fetch(gr, { credentials: "same-origin" }).then(function(ge) {
            var Ne = WebAssembly.instantiateStreaming(ge, F);
            return Ne.then(ue, function(Pt) {
              return j("wasm streaming compile failed: " + Pt), j("falling back to ArrayBuffer instantiation"), Ee(ue);
            });
          }) : Ee(ue);
        }
        if (u.instantiateWasm)
          try {
            var Le = u.instantiateWasm(F, V);
            return Le;
          } catch (ge) {
            j("Module.instantiateWasm callback failed with error: " + ge), l(ge);
          }
        return Be().catch(l), {};
      }
      var m0, d0, vm = {};
      function Eu(F) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + F + ")", this.status = F;
      }
      function vy(F) {
        var V = Me.pthreads[F];
        delete Me.pthreads[F], V.terminate(), jC(F), Me.runningWorkers.splice(Me.runningWorkers.indexOf(V), 1), V.pthread_ptr = 0;
      }
      function ky(F) {
        var V = Me.pthreads[F];
        V.postMessage({ cmd: "cancel" });
      }
      function il(F) {
        var V = Me.pthreads[F];
        _e(V), Me.returnWorkerToPool(V);
      }
      function Ny(F) {
        var V = Me.getNewWorker();
        if (!V)
          return 6;
        Me.runningWorkers.push(V), Me.pthreads[F.pthread_ptr] = V, V.pthread_ptr = F.pthread_ptr;
        var ue = { cmd: "run", start_routine: F.startRoutine, arg: F.arg, pthread_ptr: F.pthread_ptr };
        return V.runPthread = () => {
          C && V.ref(), V.postMessage(ue, F.transferList), delete V.runPthread;
        }, V.loaded && V.runPthread(), 0;
      }
      var km = { varargs: void 0, get: function() {
        km.varargs += 4;
        var F = s()[km.varargs - 4 >>> 2];
        return F;
      }, getStr: function(F) {
        var V = Pe(F);
        return V;
      } };
      function Nm(F) {
        if (S)
          return _i(1, 1, F);
        be = F, Bo() || (Me.terminateAllThreads(), u.onExit && u.onExit(F), le = true), g(F, new Eu(F));
      }
      function Ty(F, V) {
        if (be = F, !V && S)
          throw _m(F), "unwind";
        Nm(F);
      }
      var Tm = Ty;
      function _y(F) {
        if (F instanceof Eu || F == "unwind")
          return be;
        g(1, F);
      }
      var Me = { unusedWorkers: [], runningWorkers: [], tlsInitFunctions: [], pthreads: {}, init: function() {
        S ? Me.initWorker() : Me.initMainThread();
      }, initMainThread: function() {
        for (var F = 8; F--; )
          Me.allocateUnusedWorker();
      }, initWorker: function() {
        ee = false;
      }, setExitStatus: function(F) {
        be = F;
      }, terminateAllThreads: function() {
        for (var F of Object.values(Me.pthreads))
          Me.returnWorkerToPool(F);
        for (var F of Me.unusedWorkers)
          F.terminate();
        Me.unusedWorkers = [];
      }, returnWorkerToPool: function(F) {
        var V = F.pthread_ptr;
        delete Me.pthreads[V], Me.unusedWorkers.push(F), Me.runningWorkers.splice(Me.runningWorkers.indexOf(F), 1), F.pthread_ptr = 0, C && F.unref(), jC(V);
      }, receiveObjectTransfer: function(F) {
      }, threadInitTLS: function() {
        Me.tlsInitFunctions.forEach((F) => F());
      }, loadWasmModuleToWorker: function(F, V) {
        F.onmessage = (Le) => {
          var ge = Le.data, Ne = ge.cmd;
          if (F.pthread_ptr && (Me.currentProxiedOperationCallerThread = F.pthread_ptr), ge.targetThread && ge.targetThread != Wm()) {
            var Pt = Me.pthreads[ge.targetThread];
            Pt ? Pt.postMessage(ge, ge.transferList) : j('Internal error! Worker sent a message "' + Ne + '" to target pthread ' + ge.targetThread + ", but that thread no longer exists!"), Me.currentProxiedOperationCallerThread = void 0;
            return;
          }
          Ne === "processProxyingQueue" ? pl(ge.queue) : Ne === "spawnThread" ? Ny(ge) : Ne === "cleanupThread" ? il(ge.thread) : Ne === "killThread" ? vy(ge.thread) : Ne === "cancelThread" ? ky(ge.thread) : Ne === "loaded" ? (F.loaded = true, C && F.unref(), V && V(F), F.runPthread && F.runPthread()) : Ne === "print" ? U("Thread " + ge.threadId + ": " + ge.text) : Ne === "printErr" ? j("Thread " + ge.threadId + ": " + ge.text) : Ne === "alert" ? alert("Thread " + ge.threadId + ": " + ge.text) : ge.target === "setimmediate" ? F.postMessage(ge) : Ne === "callHandler" ? u[ge.handler](...ge.args) : Ne && j("worker sent an unknown command " + Ne), Me.currentProxiedOperationCallerThread = void 0;
        }, F.onerror = (Le) => {
          var ge = "worker sent an error!";
          throw j(ge + " " + Le.filename + ":" + Le.lineno + ": " + Le.message), Le;
        }, C && (F.on("message", function(Le) {
          F.onmessage({ data: Le });
        }), F.on("error", function(Le) {
          F.onerror(Le);
        }), F.on("detachedExit", function() {
        }));
        var ue = [], Ee = ["onExit", "onAbort", "print", "printErr"];
        for (var Be of Ee)
          u.hasOwnProperty(Be) && ue.push(Be);
        F.postMessage({ cmd: "load", handlers: ue, urlOrBlob: u.mainScriptUrlOrBlob || r, wasmMemory: oe, wasmModule: ie });
      }, allocateUnusedWorker: function() {
        var F, V = _("tfjs-backend-wasm-threaded-simd.worker.js");
        F = new Worker(V), Me.unusedWorkers.push(F);
      }, getNewWorker: function() {
        return Me.unusedWorkers.length == 0 && (Me.allocateUnusedWorker(), Me.loadWasmModuleToWorker(Me.unusedWorkers[0])), Me.unusedWorkers.pop();
      } };
      u.PThread = Me;
      function ul(F) {
        for (; F.length > 0; )
          F.shift()(u);
      }
      function $y() {
        var F = Wm(), V = s()[F + 52 >>> 2], ue = s()[F + 56 >>> 2], Ee = V - ue;
        b0(V, Ee), Um(V);
      }
      u.establishStackSpace = $y;
      function _m(F) {
        if (S)
          return _i(2, 0, F);
        try {
          Tm(F);
        } catch (V) {
          _y(V);
        }
      }
      var Vp = [];
      function Ey(F) {
        var V = Vp[F];
        return V || (F >= Vp.length && (Vp.length = F + 1), Vp[F] = V = ar.get(F)), V;
      }
      function Ry(F, V) {
        var ue = Ey(F)(V);
        Bo() ? Me.setExitStatus(ue) : y0(ue);
      }
      u.invokeEntryPoint = Ry;
      function Dy(F) {
        Me.tlsInitFunctions.push(F);
      }
      function Ay(F) {
        h0(F, !b, 1, !x), Me.threadInitTLS();
      }
      function Fy(F) {
        S ? postMessage({ cmd: "cleanupThread", thread: F }) : il(F);
      }
      function $m(F, V, ue, Ee) {
        return S ? _i(3, 1, F, V, ue, Ee) : Em(F, V, ue, Ee);
      }
      function Em(F, V, ue, Ee) {
        if (typeof SharedArrayBuffer == "undefined")
          return j("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
        var Be = [], Le = 0;
        if (S && (Be.length === 0 || Le))
          return $m(F, V, ue, Ee);
        if (Le)
          return Le;
        var ge = { startRoutine: ue, pthread_ptr: F, arg: Ee, transferList: Be };
        return S ? (ge.cmd = "spawnThread", postMessage(ge, Be), 0) : Ny(ge);
      }
      function Py() {
        return 65536;
      }
      var Oy = true;
      function My() {
        return Oy;
      }
      function pl(F) {
        Atomics.store(s(), F >> 2, 1), Wm() && x0(F), Atomics.compareExchange(s(), F >> 2, 1, 0);
      }
      u.executeNotifiedProxyingQueue = pl;
      function Ly(F, V, ue, Ee) {
        if (F == V)
          setTimeout(() => pl(Ee));
        else if (S)
          postMessage({ targetThread: F, cmd: "processProxyingQueue", queue: Ee });
        else {
          var Be = Me.pthreads[F];
          if (!Be)
            return;
          Be.postMessage({ cmd: "processProxyingQueue", queue: Ee });
        }
        return 1;
      }
      function By(F, V, ue) {
        return -1;
      }
      function zy() {
        $u("");
      }
      function Ru(F) {
        Ru.shown || (Ru.shown = {}), Ru.shown[F] || (Ru.shown[F] = 1, C && (F = "warning: " + F), j(F));
      }
      function Vy() {
        C || b || Ru("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
      }
      function Wy() {
        return Date.now();
      }
      function Rm() {
        return 4294901760;
      }
      function Uy() {
        return Rm();
      }
      var cl;
      C ? cl = () => {
        var F = process.hrtime();
        return F[0] * 1e3 + F[1] / 1e6;
      } : cl = () => performance.timeOrigin + performance.now();
      function Gy(F, V, ue) {
        o().copyWithin(F >>> 0, V >>> 0, V + ue >>> 0);
      }
      function Hy() {
        return C ? AB().cpus().length : navigator.hardwareConcurrency;
      }
      function Ky(F) {
        var V = XC(), ue = F();
        return Um(V), ue;
      }
      function _i(F, V) {
        var ue = arguments.length - 2, Ee = arguments;
        return Ky(() => {
          for (var Be = ue, Le = Gm(Be * 8), ge = Le >> 3, Ne = 0; Ne < ue; Ne++) {
            var Pt = Ee[2 + Ne];
            p()[ge + Ne >>> 0] = Pt;
          }
          return g0(F, Be, Le, V);
        });
      }
      var ll = [];
      function qy(F, V, ue) {
        ll.length = V;
        for (var Ee = ue >> 3, Be = 0; Be < V; Be++)
          ll[Be] = p()[Ee + Be >>> 0];
        var Le = F < 0, ge = Le ? vm[-F - 1] : rb[F];
        return ge.apply(null, ll);
      }
      function jy(F) {
        try {
          return oe.grow(F - Ge.byteLength + 65535 >>> 16), _t(oe.buffer), 1;
        } catch (V) {
        }
      }
      function Xy(F) {
        var V = o().length;
        if (F = F >>> 0, F <= V)
          return false;
        var ue = Rm();
        if (F > ue)
          return false;
        let Ee = (Pt, so) => Pt + (so - Pt % so) % so;
        for (var Be = 1; Be <= 4; Be *= 2) {
          var Le = V * (1 + 0.2 / Be);
          Le = Math.min(Le, F + 100663296);
          var ge = Math.min(ue, Ee(Math.max(F, Le), 65536)), Ne = jy(ge);
          if (Ne)
            return true;
        }
        return false;
      }
      function Yy() {
        throw "unwind";
      }
      function Dm(F) {
        return S ? _i(4, 1, F) : 52;
      }
      function Am(F, V, ue, Ee, Be) {
        return S ? _i(5, 1, F, V, ue, Ee, Be) : 70;
      }
      var Qy = [null, [], []];
      function Zy(F, V) {
        var ue = Qy[F];
        V === 0 || V === 10 ? ((F === 1 ? U : j)(Fe(ue, 0)), ue.length = 0) : ue.push(V);
      }
      function Fm(F, V, ue, Ee) {
        if (S)
          return _i(6, 1, F, V, ue, Ee);
        for (var Be = 0, Le = 0; Le < ue; Le++) {
          var ge = a()[V >>> 2], Ne = a()[V + 4 >>> 2];
          V += 8;
          for (var Pt = 0; Pt < Ne; Pt++)
            Zy(F, o()[ge + Pt >>> 0]);
          Be += Ne;
        }
        return a()[Ee >>> 2] = Be, 0;
      }
      function Pm(F) {
        var V = u["_" + F];
        return V;
      }
      function Jy(F, V) {
        e().set(F, V >>> 0);
      }
      function eb(F, V, ue, Ee, Be) {
        var Le = { string: (Br) => {
          var Hp = 0;
          if (Br != null && Br !== 0) {
            var S0 = (Br.length << 2) + 1;
            Hp = Gm(S0), lt(Br, Hp, S0);
          }
          return Hp;
        }, array: (Br) => {
          var Hp = Gm(Br.length);
          return Jy(Br, Hp), Hp;
        } };
        function ge(Br) {
          return V === "string" ? Pe(Br) : V === "boolean" ? !!Br : Br;
        }
        var Ne = Pm(F), Pt = [], so = 0;
        if (Ee)
          for (var Ka = 0; Ka < Ee.length; Ka++) {
            var w0 = Le[ue[Ka]];
            w0 ? (so === 0 && (so = XC()), Pt[Ka] = w0(Ee[Ka])) : Pt[Ka] = Ee[Ka];
          }
        var YC = Ne.apply(null, Pt);
        function CG(Br) {
          return so !== 0 && Um(so), ge(Br);
        }
        return YC = CG(YC), YC;
      }
      function tb(F, V, ue, Ee) {
        ue = ue || [];
        var Be = ue.every((ge) => ge === "number" || ge === "boolean"), Le = V !== "string";
        return Le && Be && !Ee ? Pm(F) : function() {
          return eb(F, V, ue, arguments, Ee);
        };
      }
      Me.init();
      var rb = [null, Nm, _m, $m, Dm, Am, Fm], Om = { __emscripten_init_main_thread_js: Ay, __emscripten_thread_cleanup: Fy, __pthread_create_js: Em, _emscripten_default_pthread_stack_size: Py, _emscripten_get_now_is_monotonic: My, _emscripten_notify_task_queue: Ly, _emscripten_set_offscreencanvas_size: By, abort: zy, emscripten_check_blocking_allowed: Vy, emscripten_date_now: Wy, emscripten_get_heap_max: Uy, emscripten_get_now: cl, emscripten_memcpy_big: Gy, emscripten_num_logical_cores: Hy, emscripten_receive_on_main_thread_js: qy, emscripten_resize_heap: Xy, emscripten_unwind_to_js_event_loop: Yy, exit: Tm, fd_close: Dm, fd_seek: Am, fd_write: Fm, memory: oe || u.wasmMemory }, f0 = Iy(), ob = u.___wasm_call_ctors = function() {
        return (ob = u.___wasm_call_ctors = u.asm.__wasm_call_ctors).apply(null, arguments);
      }, nb = u._init = function() {
        return (nb = u._init = u.asm.init).apply(null, arguments);
      }, sb = u._init_with_threads_count = function() {
        return (sb = u._init_with_threads_count = u.asm.init_with_threads_count).apply(null, arguments);
      }, ab = u._get_threads_count = function() {
        return (ab = u._get_threads_count = u.asm.get_threads_count).apply(null, arguments);
      }, ib = u._register_tensor = function() {
        return (ib = u._register_tensor = u.asm.register_tensor).apply(null, arguments);
      }, ub = u._dispose_data = function() {
        return (ub = u._dispose_data = u.asm.dispose_data).apply(null, arguments);
      }, pb = u._dispose = function() {
        return (pb = u._dispose = u.asm.dispose).apply(null, arguments);
      }, cb = u._Abs = function() {
        return (cb = u._Abs = u.asm.Abs).apply(null, arguments);
      }, lb = u._Acos = function() {
        return (lb = u._Acos = u.asm.Acos).apply(null, arguments);
      }, mb = u._Acosh = function() {
        return (mb = u._Acosh = u.asm.Acosh).apply(null, arguments);
      }, db = u._Add = function() {
        return (db = u._Add = u.asm.Add).apply(null, arguments);
      }, fb = u._AddN = function() {
        return (fb = u._AddN = u.asm.AddN).apply(null, arguments);
      }, hb = u._All = function() {
        return (hb = u._All = u.asm.All).apply(null, arguments);
      }, gb = u._Any = function() {
        return (gb = u._Any = u.asm.Any).apply(null, arguments);
      }, xb = u._ArgMax = function() {
        return (xb = u._ArgMax = u.asm.ArgMax).apply(null, arguments);
      }, yb = u._ArgMin = function() {
        return (yb = u._ArgMin = u.asm.ArgMin).apply(null, arguments);
      }, bb = u._Asin = function() {
        return (bb = u._Asin = u.asm.Asin).apply(null, arguments);
      }, Cb = u._Asinh = function() {
        return (Cb = u._Asinh = u.asm.Asinh).apply(null, arguments);
      }, wb = u._Atan = function() {
        return (wb = u._Atan = u.asm.Atan).apply(null, arguments);
      }, Sb = u._Atan2 = function() {
        return (Sb = u._Atan2 = u.asm.Atan2).apply(null, arguments);
      }, Ib = u._Atanh = function() {
        return (Ib = u._Atanh = u.asm.Atanh).apply(null, arguments);
      }, vb = u._AvgPool = function() {
        return (vb = u._AvgPool = u.asm.AvgPool).apply(null, arguments);
      }, kb = u._AvgPool3D = function() {
        return (kb = u._AvgPool3D = u.asm.AvgPool3D).apply(null, arguments);
      }, Nb = u._AvgPool3DGrad = function() {
        return (Nb = u._AvgPool3DGrad = u.asm.AvgPool3DGrad).apply(null, arguments);
      }, Tb = u._AvgPoolGrad = function() {
        return (Tb = u._AvgPoolGrad = u.asm.AvgPoolGrad).apply(null, arguments);
      }, _b = u._BatchMatMul = function() {
        return (_b = u._BatchMatMul = u.asm.BatchMatMul).apply(null, arguments);
      }, $b = u._Bincount = function() {
        return ($b = u._Bincount = u.asm.Bincount).apply(null, arguments);
      }, Eb = u._BitwiseAnd = function() {
        return (Eb = u._BitwiseAnd = u.asm.BitwiseAnd).apply(null, arguments);
      }, Rb = u._Ceil = function() {
        return (Rb = u._Ceil = u.asm.Ceil).apply(null, arguments);
      }, Db = u._ClipByValue = function() {
        return (Db = u._ClipByValue = u.asm.ClipByValue).apply(null, arguments);
      }, Ab = u._Conv2D = function() {
        return (Ab = u._Conv2D = u.asm.Conv2D).apply(null, arguments);
      }, Fb = u._Conv2DBackpropInput = function() {
        return (Fb = u._Conv2DBackpropInput = u.asm.Conv2DBackpropInput).apply(null, arguments);
      }, Pb = u._Conv3D = function() {
        return (Pb = u._Conv3D = u.asm.Conv3D).apply(null, arguments);
      }, Ob = u._Conv3DBackpropFilterV2 = function() {
        return (Ob = u._Conv3DBackpropFilterV2 = u.asm.Conv3DBackpropFilterV2).apply(null, arguments);
      }, Mb = u._Conv3DBackpropInputV2 = function() {
        return (Mb = u._Conv3DBackpropInputV2 = u.asm.Conv3DBackpropInputV2).apply(null, arguments);
      }, Lb = u._Cos = function() {
        return (Lb = u._Cos = u.asm.Cos).apply(null, arguments);
      }, Bb = u._Cosh = function() {
        return (Bb = u._Cosh = u.asm.Cosh).apply(null, arguments);
      }, zb = u._CropAndResize = function() {
        return (zb = u._CropAndResize = u.asm.CropAndResize).apply(null, arguments);
      }, Vb = u._Cumprod = function() {
        return (Vb = u._Cumprod = u.asm.Cumprod).apply(null, arguments);
      }, Wb = u._Cumsum = function() {
        return (Wb = u._Cumsum = u.asm.Cumsum).apply(null, arguments);
      }, Ub = u._DenseBincount = function() {
        return (Ub = u._DenseBincount = u.asm.DenseBincount).apply(null, arguments);
      }, Gb = u._DepthToSpace = function() {
        return (Gb = u._DepthToSpace = u.asm.DepthToSpace).apply(null, arguments);
      }, Hb = u._DepthwiseConv2dNative = function() {
        return (Hb = u._DepthwiseConv2dNative = u.asm.DepthwiseConv2dNative).apply(null, arguments);
      }, Kb = u._Diag = function() {
        return (Kb = u._Diag = u.asm.Diag).apply(null, arguments);
      }, qb = u._Dilation2D = function() {
        return (qb = u._Dilation2D = u.asm.Dilation2D).apply(null, arguments);
      }, jb = u._Dilation2DBackpropFilter = function() {
        return (jb = u._Dilation2DBackpropFilter = u.asm.Dilation2DBackpropFilter).apply(null, arguments);
      }, Xb = u._Dilation2DBackpropInput = function() {
        return (Xb = u._Dilation2DBackpropInput = u.asm.Dilation2DBackpropInput).apply(null, arguments);
      }, Yb = u._Elu = function() {
        return (Yb = u._Elu = u.asm.Elu).apply(null, arguments);
      }, Qb = u._EluGrad = function() {
        return (Qb = u._EluGrad = u.asm.EluGrad).apply(null, arguments);
      }, Zb = u._Equal = function() {
        return (Zb = u._Equal = u.asm.Equal).apply(null, arguments);
      }, Jb = u._Erf = function() {
        return (Jb = u._Erf = u.asm.Erf).apply(null, arguments);
      }, eC = u._Exp = function() {
        return (eC = u._Exp = u.asm.Exp).apply(null, arguments);
      }, tC = u._Expm1 = function() {
        return (tC = u._Expm1 = u.asm.Expm1).apply(null, arguments);
      }, rC = u._FlipLeftRight = function() {
        return (rC = u._FlipLeftRight = u.asm.FlipLeftRight).apply(null, arguments);
      }, oC = u._Floor = function() {
        return (oC = u._Floor = u.asm.Floor).apply(null, arguments);
      }, nC = u._FloorDiv = function() {
        return (nC = u._FloorDiv = u.asm.FloorDiv).apply(null, arguments);
      }, sC = u._FusedBatchNorm = function() {
        return (sC = u._FusedBatchNorm = u.asm.FusedBatchNorm).apply(null, arguments);
      }, aC = u._FusedConv2D = function() {
        return (aC = u._FusedConv2D = u.asm.FusedConv2D).apply(null, arguments);
      }, iC = u._FusedDepthwiseConv2D = function() {
        return (iC = u._FusedDepthwiseConv2D = u.asm.FusedDepthwiseConv2D).apply(null, arguments);
      }, uC = u._Gather = function() {
        return (uC = u._Gather = u.asm.Gather).apply(null, arguments);
      }, pC = u._GatherNd = function() {
        return (pC = u._GatherNd = u.asm.GatherNd).apply(null, arguments);
      }, cC = u._Greater = function() {
        return (cC = u._Greater = u.asm.Greater).apply(null, arguments);
      }, lC = u._GreaterEqual = function() {
        return (lC = u._GreaterEqual = u.asm.GreaterEqual).apply(null, arguments);
      }, mC = u._IsFinite = function() {
        return (mC = u._IsFinite = u.asm.IsFinite).apply(null, arguments);
      }, dC = u._IsInf = function() {
        return (dC = u._IsInf = u.asm.IsInf).apply(null, arguments);
      }, fC = u._IsNan = function() {
        return (fC = u._IsNan = u.asm.IsNan).apply(null, arguments);
      }, hC = u._LRN = function() {
        return (hC = u._LRN = u.asm.LRN).apply(null, arguments);
      }, gC = u._LRNGrad = function() {
        return (gC = u._LRNGrad = u.asm.LRNGrad).apply(null, arguments);
      }, xC = u._LeakyRelu = function() {
        return (xC = u._LeakyRelu = u.asm.LeakyRelu).apply(null, arguments);
      }, yC = u._Less = function() {
        return (yC = u._Less = u.asm.Less).apply(null, arguments);
      }, bC = u._LessEqual = function() {
        return (bC = u._LessEqual = u.asm.LessEqual).apply(null, arguments);
      }, CC = u._LinSpace = function() {
        return (CC = u._LinSpace = u.asm.LinSpace).apply(null, arguments);
      }, wC = u._Log = function() {
        return (wC = u._Log = u.asm.Log).apply(null, arguments);
      }, SC = u._Log1p = function() {
        return (SC = u._Log1p = u.asm.Log1p).apply(null, arguments);
      }, IC = u._LogicalAnd = function() {
        return (IC = u._LogicalAnd = u.asm.LogicalAnd).apply(null, arguments);
      }, vC = u._LogicalNot = function() {
        return (vC = u._LogicalNot = u.asm.LogicalNot).apply(null, arguments);
      }, kC = u._LogicalOr = function() {
        return (kC = u._LogicalOr = u.asm.LogicalOr).apply(null, arguments);
      }, NC = u._LogicalXor = function() {
        return (NC = u._LogicalXor = u.asm.LogicalXor).apply(null, arguments);
      }, TC = u._Max = function() {
        return (TC = u._Max = u.asm.Max).apply(null, arguments);
      }, _C = u._MaxPool = function() {
        return (_C = u._MaxPool = u.asm.MaxPool).apply(null, arguments);
      }, $C = u._MaxPool3D = function() {
        return ($C = u._MaxPool3D = u.asm.MaxPool3D).apply(null, arguments);
      }, EC = u._MaxPool3DGrad = function() {
        return (EC = u._MaxPool3DGrad = u.asm.MaxPool3DGrad).apply(null, arguments);
      }, RC = u._MaxPoolGrad = function() {
        return (RC = u._MaxPoolGrad = u.asm.MaxPoolGrad).apply(null, arguments);
      }, DC = u._MaxPoolWithArgmax = function() {
        return (DC = u._MaxPoolWithArgmax = u.asm.MaxPoolWithArgmax).apply(null, arguments);
      }, AC = u._Maximum = function() {
        return (AC = u._Maximum = u.asm.Maximum).apply(null, arguments);
      }, FC = u._Mean = function() {
        return (FC = u._Mean = u.asm.Mean).apply(null, arguments);
      }, PC = u._Min = function() {
        return (PC = u._Min = u.asm.Min).apply(null, arguments);
      }, OC = u._Minimum = function() {
        return (OC = u._Minimum = u.asm.Minimum).apply(null, arguments);
      }, MC = u._MirrorPad = function() {
        return (MC = u._MirrorPad = u.asm.MirrorPad).apply(null, arguments);
      }, LC = u._Mod = function() {
        return (LC = u._Mod = u.asm.Mod).apply(null, arguments);
      }, BC = u._Multinomial = function() {
        return (BC = u._Multinomial = u.asm.Multinomial).apply(null, arguments);
      }, zC = u._Multiply = function() {
        return (zC = u._Multiply = u.asm.Multiply).apply(null, arguments);
      }, VC = u._Neg = function() {
        return (VC = u._Neg = u.asm.Neg).apply(null, arguments);
      }, WC = u._NonMaxSuppressionV3 = function() {
        return (WC = u._NonMaxSuppressionV3 = u.asm.NonMaxSuppressionV3).apply(null, arguments);
      }, UC = u._NonMaxSuppressionV4 = function() {
        return (UC = u._NonMaxSuppressionV4 = u.asm.NonMaxSuppressionV4).apply(null, arguments);
      }, Mm = u._NonMaxSuppressionV5 = function() {
        return (Mm = u._NonMaxSuppressionV5 = u.asm.NonMaxSuppressionV5).apply(null, arguments);
      }, Lm = u._NotEqual = function() {
        return (Lm = u._NotEqual = u.asm.NotEqual).apply(null, arguments);
      }, ml = u._OneHot = function() {
        return (ml = u._OneHot = u.asm.OneHot).apply(null, arguments);
      }, GC = u._PadV2 = function() {
        return (GC = u._PadV2 = u.asm.PadV2).apply(null, arguments);
      }, HC = u._Pow = function() {
        return (HC = u._Pow = u.asm.Pow).apply(null, arguments);
      }, Wp = u._Prelu = function() {
        return (Wp = u._Prelu = u.asm.Prelu).apply(null, arguments);
      }, Bm = u._Prod = function() {
        return (Bm = u._Prod = u.asm.Prod).apply(null, arguments);
      }, Up = u._RealDiv = function() {
        return (Up = u._RealDiv = u.asm.RealDiv).apply(null, arguments);
      }, Gp = u._Reciprocal = function() {
        return (Gp = u._Reciprocal = u.asm.Reciprocal).apply(null, arguments);
      }, KC = u._Relu = function() {
        return (KC = u._Relu = u.asm.Relu).apply(null, arguments);
      }, K = u._Relu6 = function() {
        return (K = u._Relu6 = u.asm.Relu6).apply(null, arguments);
      }, ae = u._ResizeBilinear = function() {
        return (ae = u._ResizeBilinear = u.asm.ResizeBilinear).apply(null, arguments);
      }, $e = u._ResizeBilinearGrad = function() {
        return ($e = u._ResizeBilinearGrad = u.asm.ResizeBilinearGrad).apply(null, arguments);
      }, at = u._ResizeNearestNeighbor = function() {
        return (at = u._ResizeNearestNeighbor = u.asm.ResizeNearestNeighbor).apply(null, arguments);
      }, $t = u._ResizeNearestNeighborGrad = function() {
        return ($t = u._ResizeNearestNeighborGrad = u.asm.ResizeNearestNeighborGrad).apply(null, arguments);
      }, Et = u._Reverse = function() {
        return (Et = u._Reverse = u.asm.Reverse).apply(null, arguments);
      }, Qe = u._RotateWithOffset = function() {
        return (Qe = u._RotateWithOffset = u.asm.RotateWithOffset).apply(null, arguments);
      }, Ke = u._Round = function() {
        return (Ke = u._Round = u.asm.Round).apply(null, arguments);
      }, Gt = u._Rsqrt = function() {
        return (Gt = u._Rsqrt = u.asm.Rsqrt).apply(null, arguments);
      }, no = u._ScatterNd = function() {
        return (no = u._ScatterNd = u.asm.ScatterNd).apply(null, arguments);
      }, Ha = u._SearchSorted = function() {
        return (Ha = u._SearchSorted = u.asm.SearchSorted).apply(null, arguments);
      }, zm = u._SelectV2 = function() {
        return (zm = u._SelectV2 = u.asm.SelectV2).apply(null, arguments);
      }, dl = u._Selu = function() {
        return (dl = u._Selu = u.asm.Selu).apply(null, arguments);
      }, qC = u._Sigmoid = function() {
        return (qC = u._Sigmoid = u.asm.Sigmoid).apply(null, arguments);
      }, br = u._Sign = function() {
        return (br = u._Sign = u.asm.Sign).apply(null, arguments);
      }, $i = u._Sin = function() {
        return ($i = u._Sin = u.asm.Sin).apply(null, arguments);
      }, Vm = u._Sinh = function() {
        return (Vm = u._Sinh = u.asm.Sinh).apply(null, arguments);
      }, WU = u._Softmax = function() {
        return (WU = u._Softmax = u.asm.Softmax).apply(null, arguments);
      }, UU = u._Softplus = function() {
        return (UU = u._Softplus = u.asm.Softplus).apply(null, arguments);
      }, GU = u._SparseFillEmptyRows = function() {
        return (GU = u._SparseFillEmptyRows = u.asm.SparseFillEmptyRows).apply(null, arguments);
      }, HU = u._SparseReshape = function() {
        return (HU = u._SparseReshape = u.asm.SparseReshape).apply(null, arguments);
      }, KU = u._SparseSegmentReduction = function() {
        return (KU = u._SparseSegmentReduction = u.asm.SparseSegmentReduction).apply(null, arguments);
      }, qU = u._SparseToDense = function() {
        return (qU = u._SparseToDense = u.asm.SparseToDense).apply(null, arguments);
      }, jU = u._Sqrt = function() {
        return (jU = u._Sqrt = u.asm.Sqrt).apply(null, arguments);
      }, XU = u._Square = function() {
        return (XU = u._Square = u.asm.Square).apply(null, arguments);
      }, YU = u._SquaredDifference = function() {
        return (YU = u._SquaredDifference = u.asm.SquaredDifference).apply(null, arguments);
      }, QU = u._Step = function() {
        return (QU = u._Step = u.asm.Step).apply(null, arguments);
      }, ZU = u._StridedSlice = function() {
        return (ZU = u._StridedSlice = u.asm.StridedSlice).apply(null, arguments);
      }, JU = u._Sub = function() {
        return (JU = u._Sub = u.asm.Sub).apply(null, arguments);
      }, eG = u._Sum = function() {
        return (eG = u._Sum = u.asm.Sum).apply(null, arguments);
      }, tG = u._Tan = function() {
        return (tG = u._Tan = u.asm.Tan).apply(null, arguments);
      }, rG = u._Tanh = function() {
        return (rG = u._Tanh = u.asm.Tanh).apply(null, arguments);
      }, oG = u._TensorScatterUpdate = function() {
        return (oG = u._TensorScatterUpdate = u.asm.TensorScatterUpdate).apply(null, arguments);
      }, nG = u._Tile = function() {
        return (nG = u._Tile = u.asm.Tile).apply(null, arguments);
      }, sG = u._TopK = function() {
        return (sG = u._TopK = u.asm.TopK).apply(null, arguments);
      }, aG = u._Transform = function() {
        return (aG = u._Transform = u.asm.Transform).apply(null, arguments);
      }, iG = u._Transpose = function() {
        return (iG = u._Transpose = u.asm.Transpose).apply(null, arguments);
      }, uG = u.__FusedMatMul = function() {
        return (uG = u.__FusedMatMul = u.asm._FusedMatMul).apply(null, arguments);
      }, pG = u._malloc = function() {
        return (pG = u._malloc = u.asm.malloc).apply(null, arguments);
      }, cG = u._free = function() {
        return (cG = u._free = u.asm.free).apply(null, arguments);
      }, lG = u.__emscripten_tls_init = function() {
        return (lG = u.__emscripten_tls_init = u.asm._emscripten_tls_init).apply(null, arguments);
      }, Wm = u._pthread_self = function() {
        return (Wm = u._pthread_self = u.asm.pthread_self).apply(null, arguments);
      }, mG = u.___errno_location = function() {
        return (mG = u.___errno_location = u.asm.__errno_location).apply(null, arguments);
      }, h0 = u.__emscripten_thread_init = function() {
        return (h0 = u.__emscripten_thread_init = u.asm._emscripten_thread_init).apply(null, arguments);
      }, dG = u.__emscripten_thread_crashed = function() {
        return (dG = u.__emscripten_thread_crashed = u.asm._emscripten_thread_crashed).apply(null, arguments);
      }, fG = u._emscripten_main_thread_process_queued_calls = function() {
        return (fG = u._emscripten_main_thread_process_queued_calls = u.asm.emscripten_main_thread_process_queued_calls).apply(null, arguments);
      }, hG = u._emscripten_main_browser_thread_id = function() {
        return (hG = u._emscripten_main_browser_thread_id = u.asm.emscripten_main_browser_thread_id).apply(null, arguments);
      }, g0 = u._emscripten_run_in_main_runtime_thread_js = function() {
        return (g0 = u._emscripten_run_in_main_runtime_thread_js = u.asm.emscripten_run_in_main_runtime_thread_js).apply(null, arguments);
      }, gG = u._emscripten_dispatch_to_thread_ = function() {
        return (gG = u._emscripten_dispatch_to_thread_ = u.asm.emscripten_dispatch_to_thread_).apply(null, arguments);
      }, x0 = u.__emscripten_proxy_execute_task_queue = function() {
        return (x0 = u.__emscripten_proxy_execute_task_queue = u.asm._emscripten_proxy_execute_task_queue).apply(null, arguments);
      }, jC = u.__emscripten_thread_free_data = function() {
        return (jC = u.__emscripten_thread_free_data = u.asm._emscripten_thread_free_data).apply(null, arguments);
      }, y0 = u.__emscripten_thread_exit = function() {
        return (y0 = u.__emscripten_thread_exit = u.asm._emscripten_thread_exit).apply(null, arguments);
      }, b0 = u._emscripten_stack_set_limits = function() {
        return (b0 = u._emscripten_stack_set_limits = u.asm.emscripten_stack_set_limits).apply(null, arguments);
      }, XC = u.stackSave = function() {
        return (XC = u.stackSave = u.asm.stackSave).apply(null, arguments);
      }, Um = u.stackRestore = function() {
        return (Um = u.stackRestore = u.asm.stackRestore).apply(null, arguments);
      }, Gm = u.stackAlloc = function() {
        return (Gm = u.stackAlloc = u.asm.stackAlloc).apply(null, arguments);
      }, xG = u.dynCall_iijjiiii = function() {
        return (xG = u.dynCall_iijjiiii = u.asm.dynCall_iijjiiii).apply(null, arguments);
      }, yG = u.dynCall_jiji = function() {
        return (yG = u.dynCall_jiji = u.asm.dynCall_jiji).apply(null, arguments);
      };
      u.keepRuntimeAlive = Bo, u.wasmMemory = oe, u.cwrap = tb, u.ExitStatus = Eu, u.PThread = Me;
      var Hm;
      Ga = function F() {
        Hm || C0(), Hm || (Ga = F);
      };
      function C0(F) {
        if (F = F || f, Ti > 0)
          return;
        if (S) {
          c(u), Yt(), startWorker(u);
          return;
        }
        if (Ks(), Ti > 0)
          return;
        function V() {
          Hm || (Hm = true, u.calledRun = true, !le && (Yt(), c(u), u.onRuntimeInitialized && u.onRuntimeInitialized(), Ua()));
        }
        u.setStatus ? (u.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            u.setStatus("");
          }, 1), V();
        }, 1)) : V();
      }
      if (u.preInit)
        for (typeof u.preInit == "function" && (u.preInit = [u.preInit]); u.preInit.length > 0; )
          u.preInit.pop()();
      C0();
      var Km;
      m && (Km = { uncaughtException: process.listeners("uncaughtException").filter(function(F) {
        return !m.uncaughtException.indexOf(F) > -1;
      }), unhandledRejection: process.listeners("unhandledRejection").filter(function(F) {
        return !m.unhandledRejection.indexOf(F) > -1;
      }) });
      var qm;
      if (typeof WasmBackendModule != "undefined")
        qm = WasmBackendModule;
      else if (typeof t8 != "undefined")
        qm = t8;
      else
        throw new Error("Could not find wasm module in post.js");
      if (Km) {
        var bG = qm._dispose;
        qm._dispose = function() {
          bG(), Km.uncaughtException.forEach(function(F) {
            process.removeListener("uncaughtException", F);
          }), Km.unhandledRejection.forEach(function(F) {
            process.removeListener("unhandledRejection", F);
          });
        };
      }
      return t8.ready;
    };
  })();
  typeof Wg == "object" && typeof Wv == "object" ? Wv.exports = Vv : typeof define == "function" && define.amd ? define([], function() {
    return Vv;
  }) : typeof Wg == "object" && (Wg.WasmBackendModuleThreadedSimd = Vv);
});
var OB = qt((UFt, PB) => {
  PB.exports.wasmWorkerContents = `"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f)},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"
");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"})};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=function(){postMessage({cmd:"callHandler",handler:handler,args:[...arguments]})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};`;
});
var MB = qt((Ug, Gv) => {
  var Uv = (() => {
    var r = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (r = r || __filename), function(t8) {
      t8 = t8 || {};
      var e = typeof t8 != "undefined" ? t8 : {}, o, n;
      e.ready = new Promise(function(K, ae) {
        o = K, n = ae;
      });
      var s;
      typeof process != "undefined" && process.listeners && (s = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
      var a = Object.assign({}, e), i = [], p = "./this.program", u = (K, ae) => {
        throw ae;
      }, c = typeof window == "object", l = typeof importScripts == "function", m = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", d = "";
      function f(K) {
        return e.locateFile ? e.locateFile(K, d) : d + K;
      }
      var h, g, x, b;
      function C(K) {
        if (K instanceof Bp)
          return;
        E("exiting due to exception: " + K);
      }
      if (m) {
        var S = Bv(), k = zv();
        l ? d = k.dirname(d) + "/" : d = __dirname + "/", h = (K, ae) => (K = Ks(K) ? new URL(K) : k.normalize(K), S.readFileSync(K, ae ? void 0 : "utf8")), x = (K) => {
          var ae = h(K, true);
          return ae.buffer || (ae = new Uint8Array(ae)), ae;
        }, g = (K, ae, $e) => {
          K = Ks(K) ? new URL(K) : k.normalize(K), S.readFile(K, function(at, $t) {
            at ? $e(at) : ae($t.buffer);
          });
        }, process.argv.length > 1 && (p = process.argv[1].replace(/\\/g, "/")), i = process.argv.slice(2), process.on("uncaughtException", function(K) {
          if (!(K instanceof Bp))
            throw K;
        }), process.on("unhandledRejection", function(K) {
          throw K;
        }), u = (K, ae) => {
          if (it())
            throw process.exitCode = K, ae;
          C(ae), process.exit(K);
        }, e.inspect = function() {
          return "[Emscripten Module object]";
        };
      } else
        (c || l) && (l ? d = self.location.href : typeof document != "undefined" && document.currentScript && (d = document.currentScript.src), r && (d = r), d.indexOf("blob:") !== 0 ? d = d.substr(0, d.replace(/[?#].*/, "").lastIndexOf("/") + 1) : d = "", h = (K) => {
          var ae = new XMLHttpRequest();
          return ae.open("GET", K, false), ae.send(null), ae.responseText;
        }, l && (x = (K) => {
          var ae = new XMLHttpRequest();
          return ae.open("GET", K, false), ae.responseType = "arraybuffer", ae.send(null), new Uint8Array(ae.response);
        }), g = (K, ae, $e) => {
          var at = new XMLHttpRequest();
          at.open("GET", K, true), at.responseType = "arraybuffer", at.onload = () => {
            if (at.status == 200 || at.status == 0 && at.response) {
              ae(at.response);
              return;
            }
            $e();
          }, at.onerror = $e, at.send(null);
        }, b = (K) => document.title = K);
      var _ = e.print || console.log.bind(console), E = e.printErr || console.warn.bind(console);
      Object.assign(e, a), a = null, e.arguments && (i = e.arguments), e.thisProgram && (p = e.thisProgram), e.quit && (u = e.quit);
      var R = 4, D;
      e.wasmBinary && (D = e.wasmBinary);
      var P = e.noExitRuntime || true;
      typeof WebAssembly != "object" && hr("no native wasm support detected");
      var O, M = false, L;
      function B(K, ae) {
        K || hr(ae);
      }
      var z = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
      function U(K, ae, $e) {
        ae >>>= 0;
        for (var at = ae + $e, $t = ae; K[$t] && !($t >= at); )
          ++$t;
        if ($t - ae > 16 && K.buffer && z)
          return z.decode(K.subarray(ae, $t));
        for (var Et = ""; ae < $t; ) {
          var Qe = K[ae++];
          if (!(Qe & 128)) {
            Et += String.fromCharCode(Qe);
            continue;
          }
          var Ke = K[ae++] & 63;
          if ((Qe & 224) == 192) {
            Et += String.fromCharCode((Qe & 31) << 6 | Ke);
            continue;
          }
          var Gt = K[ae++] & 63;
          if ((Qe & 240) == 224 ? Qe = (Qe & 15) << 12 | Ke << 6 | Gt : Qe = (Qe & 7) << 18 | Ke << 12 | Gt << 6 | K[ae++] & 63, Qe < 65536)
            Et += String.fromCharCode(Qe);
          else {
            var no = Qe - 65536;
            Et += String.fromCharCode(55296 | no >> 10, 56320 | no & 1023);
          }
        }
        return Et;
      }
      function j(K, ae) {
        return K >>>= 0, K ? U(ne, K, ae) : "";
      }
      function q(K, ae, $e, at) {
        if ($e >>>= 0, !(at > 0))
          return 0;
        for (var $t = $e, Et = $e + at - 1, Qe = 0; Qe < K.length; ++Qe) {
          var Ke = K.charCodeAt(Qe);
          if (Ke >= 55296 && Ke <= 57343) {
            var Gt = K.charCodeAt(++Qe);
            Ke = 65536 + ((Ke & 1023) << 10) | Gt & 1023;
          }
          if (Ke <= 127) {
            if ($e >= Et)
              break;
            ae[$e++ >>> 0] = Ke;
          } else if (Ke <= 2047) {
            if ($e + 1 >= Et)
              break;
            ae[$e++ >>> 0] = 192 | Ke >> 6, ae[$e++ >>> 0] = 128 | Ke & 63;
          } else if (Ke <= 65535) {
            if ($e + 2 >= Et)
              break;
            ae[$e++ >>> 0] = 224 | Ke >> 12, ae[$e++ >>> 0] = 128 | Ke >> 6 & 63, ae[$e++ >>> 0] = 128 | Ke & 63;
          } else {
            if ($e + 3 >= Et)
              break;
            ae[$e++ >>> 0] = 240 | Ke >> 18, ae[$e++ >>> 0] = 128 | Ke >> 12 & 63, ae[$e++ >>> 0] = 128 | Ke >> 6 & 63, ae[$e++ >>> 0] = 128 | Ke & 63;
          }
        }
        return ae[$e >>> 0] = 0, $e - $t;
      }
      function Y(K, ae, $e) {
        return q(K, ne, ae, $e);
      }
      var J, re, ne, ee, oe, ie, le, be, _e;
      function ve(K) {
        J = K, e.HEAP8 = re = new Int8Array(K), e.HEAP16 = ee = new Int16Array(K), e.HEAP32 = ie = new Int32Array(K), e.HEAPU8 = ne = new Uint8Array(K), e.HEAPU16 = oe = new Uint16Array(K), e.HEAPU32 = le = new Uint32Array(K), e.HEAPF32 = be = new Float32Array(K), e.HEAPF64 = _e = new Float64Array(K);
      }
      var Fe = e.INITIAL_MEMORY || 16777216, Pe, st = [], lt = [], Ge = [], mt = false;
      function it() {
        return P;
      }
      function gt() {
        if (e.preRun)
          for (typeof e.preRun == "function" && (e.preRun = [e.preRun]); e.preRun.length; )
            Lt(e.preRun.shift());
        Ga(st);
      }
      function xt() {
        mt = true, Ga(lt);
      }
      function Lr() {
        if (e.postRun)
          for (typeof e.postRun == "function" && (e.postRun = [e.postRun]); e.postRun.length; )
            nr(e.postRun.shift());
        Ga(Ge);
      }
      function Lt(K) {
        st.unshift(K);
      }
      function to(K) {
        lt.unshift(K);
      }
      function nr(K) {
        Ge.unshift(K);
      }
      var _t = 0, sr = null, ar = null;
      function ro(K) {
        _t++, e.monitorRunDependencies && e.monitorRunDependencies(_t);
      }
      function oo(K) {
        if (_t--, e.monitorRunDependencies && e.monitorRunDependencies(_t), _t == 0 && (sr !== null && (clearInterval(sr), sr = null), ar)) {
          var ae = ar;
          ar = null, ae();
        }
      }
      function hr(K) {
        e.onAbort && e.onAbort(K), K = "Aborted(" + K + ")", E(K), M = true, L = 1, K += ". Build with -sASSERTIONS for more info.";
        var ae = new WebAssembly.RuntimeError(K);
        throw n(ae), ae;
      }
      var Wa = "data:application/octet-stream;base64,";
      function Bo(K) {
        return K.startsWith(Wa);
      }
      function Ks(K) {
        return K.startsWith("file://");
      }
      var Yt;
      Yt = "tfjs-backend-wasm.wasm", Bo(Yt) || (Yt = f(Yt));
      function Ua(K) {
        try {
          if (K == Yt && D)
            return new Uint8Array(D);
          if (x)
            return x(K);
          throw "both async and sync fetching of the wasm failed";
        } catch (ae) {
          hr(ae);
        }
      }
      function sl() {
        if (!D && (c || l)) {
          if (typeof fetch == "function" && !Ks(Yt))
            return fetch(Yt, { credentials: "same-origin" }).then(function(K) {
              if (!K.ok)
                throw "failed to load wasm binary file at '" + Yt + "'";
              return K.arrayBuffer();
            }).catch(function() {
              return Ua(Yt);
            });
          if (g)
            return new Promise(function(K, ae) {
              g(Yt, function($e) {
                K(new Uint8Array($e));
              }, ae);
            });
        }
        return Promise.resolve().then(function() {
          return Ua(Yt);
        });
      }
      function al() {
        var K = { env: il, wasi_snapshot_preview1: il };
        function ae(Qe, Ke) {
          var Gt = Qe.exports;
          e.asm = Gt, O = e.asm.memory, ve(O.buffer), Pe = e.asm.__indirect_function_table, to(e.asm.__wasm_call_ctors), oo("wasm-instantiate");
        }
        ro("wasm-instantiate");
        function $e(Qe) {
          ae(Qe.instance);
        }
        function at(Qe) {
          return sl().then(function(Ke) {
            return WebAssembly.instantiate(Ke, K);
          }).then(function(Ke) {
            return Ke;
          }).then(Qe, function(Ke) {
            E("failed to asynchronously prepare wasm: " + Ke), hr(Ke);
          });
        }
        function $t() {
          return !D && typeof WebAssembly.instantiateStreaming == "function" && !Bo(Yt) && !Ks(Yt) && !m && typeof fetch == "function" ? fetch(Yt, { credentials: "same-origin" }).then(function(Qe) {
            var Ke = WebAssembly.instantiateStreaming(Qe, K);
            return Ke.then($e, function(Gt) {
              return E("wasm streaming compile failed: " + Gt), E("falling back to ArrayBuffer instantiation"), at($e);
            });
          }) : at($e);
        }
        if (e.instantiateWasm)
          try {
            var Et = e.instantiateWasm(K, ae);
            return Et;
          } catch (Qe) {
            E("Module.instantiateWasm callback failed with error: " + Qe), n(Qe);
          }
        return $t().catch(n), {};
      }
      var l0, Ti;
      function Bp(K) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + K + ")", this.status = K;
      }
      function Ga(K) {
        for (; K.length > 0; )
          K.shift()(e);
      }
      function Cy() {
        hr("");
      }
      function wm() {
        return 4294901760;
      }
      function $u() {
        return wm();
      }
      function wy(K, ae, $e) {
        ne.copyWithin(K >>> 0, ae >>> 0, ae + $e >>> 0);
      }
      function Sm(K) {
        try {
          return O.grow(K - J.byteLength + 65535 >>> 16), ve(O.buffer), 1;
        } catch (ae) {
        }
      }
      function zp(K) {
        var ae = ne.length;
        K = K >>> 0;
        var $e = wm();
        if (K > $e)
          return false;
        let at = (Gt, no) => Gt + (no - Gt % no) % no;
        for (var $t = 1; $t <= 4; $t *= 2) {
          var Et = ae * (1 + 0.2 / $t);
          Et = Math.min(Et, K + 100663296);
          var Qe = Math.min($e, at(Math.max(K, Et), 65536)), Ke = Sm(Qe);
          if (Ke)
            return true;
        }
        return false;
      }
      var gr = { varargs: void 0, get: function() {
        gr.varargs += 4;
        var K = ie[gr.varargs - 4 >>> 2];
        return K;
      }, getStr: function(K) {
        var ae = j(K);
        return ae;
      } };
      function Im(K) {
        return 52;
      }
      function Sy(K, ae, $e, at, $t) {
        return 70;
      }
      var Iy = [null, [], []];
      function m0(K, ae) {
        var $e = Iy[K];
        ae === 0 || ae === 10 ? ((K === 1 ? _ : E)(U($e, 0)), $e.length = 0) : $e.push(ae);
      }
      function d0(K, ae, $e, at) {
        for (var $t = 0, Et = 0; Et < $e; Et++) {
          var Qe = le[ae >>> 2], Ke = le[ae + 4 >>> 2];
          ae += 8;
          for (var Gt = 0; Gt < Ke; Gt++)
            m0(K, ne[Qe + Gt >>> 0]);
          $t += Ke;
        }
        return le[at >>> 2] = $t, 0;
      }
      function vm(K) {
        var ae = e["_" + K];
        return ae;
      }
      function Eu(K, ae) {
        re.set(K, ae >>> 0);
      }
      function vy(K, ae, $e, at, $t) {
        var Et = { string: (br) => {
          var $i = 0;
          if (br != null && br !== 0) {
            var Vm = (br.length << 2) + 1;
            $i = ml(Vm), Y(br, $i, Vm);
          }
          return $i;
        }, array: (br) => {
          var $i = ml(br.length);
          return Eu(br, $i), $i;
        } };
        function Qe(br) {
          return ae === "string" ? j(br) : ae === "boolean" ? !!br : br;
        }
        var Ke = vm(K), Gt = [], no = 0;
        if (at)
          for (var Ha = 0; Ha < at.length; Ha++) {
            var zm = Et[$e[Ha]];
            zm ? (no === 0 && (no = Mm()), Gt[Ha] = zm(at[Ha])) : Gt[Ha] = at[Ha];
          }
        var dl = Ke.apply(null, Gt);
        function qC(br) {
          return no !== 0 && Lm(no), Qe(br);
        }
        return dl = qC(dl), dl;
      }
      function ky(K, ae, $e, at) {
        $e = $e || [];
        var $t = $e.every((Qe) => Qe === "number" || Qe === "boolean"), Et = ae !== "string";
        return Et && $t && !at ? vm(K) : function() {
          return vy(K, ae, $e, arguments, at);
        };
      }
      var il = { abort: Cy, emscripten_get_heap_max: $u, emscripten_memcpy_big: wy, emscripten_resize_heap: zp, fd_close: Im, fd_seek: Sy, fd_write: d0 }, Ny = al(), km = e.___wasm_call_ctors = function() {
        return (km = e.___wasm_call_ctors = e.asm.__wasm_call_ctors).apply(null, arguments);
      }, Nm = e._init = function() {
        return (Nm = e._init = e.asm.init).apply(null, arguments);
      }, Ty = e._init_with_threads_count = function() {
        return (Ty = e._init_with_threads_count = e.asm.init_with_threads_count).apply(null, arguments);
      }, Tm = e._get_threads_count = function() {
        return (Tm = e._get_threads_count = e.asm.get_threads_count).apply(null, arguments);
      }, _y = e._register_tensor = function() {
        return (_y = e._register_tensor = e.asm.register_tensor).apply(null, arguments);
      }, Me = e._dispose_data = function() {
        return (Me = e._dispose_data = e.asm.dispose_data).apply(null, arguments);
      }, ul = e._dispose = function() {
        return (ul = e._dispose = e.asm.dispose).apply(null, arguments);
      }, $y = e._Abs = function() {
        return ($y = e._Abs = e.asm.Abs).apply(null, arguments);
      }, _m = e._Acos = function() {
        return (_m = e._Acos = e.asm.Acos).apply(null, arguments);
      }, Vp = e._Acosh = function() {
        return (Vp = e._Acosh = e.asm.Acosh).apply(null, arguments);
      }, Ey = e._Add = function() {
        return (Ey = e._Add = e.asm.Add).apply(null, arguments);
      }, Ry = e._AddN = function() {
        return (Ry = e._AddN = e.asm.AddN).apply(null, arguments);
      }, Dy = e._All = function() {
        return (Dy = e._All = e.asm.All).apply(null, arguments);
      }, Ay = e._Any = function() {
        return (Ay = e._Any = e.asm.Any).apply(null, arguments);
      }, Fy = e._ArgMax = function() {
        return (Fy = e._ArgMax = e.asm.ArgMax).apply(null, arguments);
      }, $m = e._ArgMin = function() {
        return ($m = e._ArgMin = e.asm.ArgMin).apply(null, arguments);
      }, Em = e._Asin = function() {
        return (Em = e._Asin = e.asm.Asin).apply(null, arguments);
      }, Py = e._Asinh = function() {
        return (Py = e._Asinh = e.asm.Asinh).apply(null, arguments);
      }, Oy = e._Atan = function() {
        return (Oy = e._Atan = e.asm.Atan).apply(null, arguments);
      }, My = e._Atan2 = function() {
        return (My = e._Atan2 = e.asm.Atan2).apply(null, arguments);
      }, pl = e._Atanh = function() {
        return (pl = e._Atanh = e.asm.Atanh).apply(null, arguments);
      }, Ly = e._AvgPool = function() {
        return (Ly = e._AvgPool = e.asm.AvgPool).apply(null, arguments);
      }, By = e._AvgPool3D = function() {
        return (By = e._AvgPool3D = e.asm.AvgPool3D).apply(null, arguments);
      }, zy = e._AvgPool3DGrad = function() {
        return (zy = e._AvgPool3DGrad = e.asm.AvgPool3DGrad).apply(null, arguments);
      }, Ru = e._AvgPoolGrad = function() {
        return (Ru = e._AvgPoolGrad = e.asm.AvgPoolGrad).apply(null, arguments);
      }, Vy = e._BatchMatMul = function() {
        return (Vy = e._BatchMatMul = e.asm.BatchMatMul).apply(null, arguments);
      }, Wy = e._Bincount = function() {
        return (Wy = e._Bincount = e.asm.Bincount).apply(null, arguments);
      }, Rm = e._BitwiseAnd = function() {
        return (Rm = e._BitwiseAnd = e.asm.BitwiseAnd).apply(null, arguments);
      }, Uy = e._Ceil = function() {
        return (Uy = e._Ceil = e.asm.Ceil).apply(null, arguments);
      }, cl = e._ClipByValue = function() {
        return (cl = e._ClipByValue = e.asm.ClipByValue).apply(null, arguments);
      }, Gy = e._Conv2D = function() {
        return (Gy = e._Conv2D = e.asm.Conv2D).apply(null, arguments);
      }, Hy = e._Conv2DBackpropInput = function() {
        return (Hy = e._Conv2DBackpropInput = e.asm.Conv2DBackpropInput).apply(null, arguments);
      }, Ky = e._Conv3D = function() {
        return (Ky = e._Conv3D = e.asm.Conv3D).apply(null, arguments);
      }, _i = e._Conv3DBackpropFilterV2 = function() {
        return (_i = e._Conv3DBackpropFilterV2 = e.asm.Conv3DBackpropFilterV2).apply(null, arguments);
      }, ll = e._Conv3DBackpropInputV2 = function() {
        return (ll = e._Conv3DBackpropInputV2 = e.asm.Conv3DBackpropInputV2).apply(null, arguments);
      }, qy = e._Cos = function() {
        return (qy = e._Cos = e.asm.Cos).apply(null, arguments);
      }, jy = e._Cosh = function() {
        return (jy = e._Cosh = e.asm.Cosh).apply(null, arguments);
      }, Xy = e._CropAndResize = function() {
        return (Xy = e._CropAndResize = e.asm.CropAndResize).apply(null, arguments);
      }, Yy = e._Cumprod = function() {
        return (Yy = e._Cumprod = e.asm.Cumprod).apply(null, arguments);
      }, Dm = e._Cumsum = function() {
        return (Dm = e._Cumsum = e.asm.Cumsum).apply(null, arguments);
      }, Am = e._DenseBincount = function() {
        return (Am = e._DenseBincount = e.asm.DenseBincount).apply(null, arguments);
      }, Qy = e._DepthToSpace = function() {
        return (Qy = e._DepthToSpace = e.asm.DepthToSpace).apply(null, arguments);
      }, Zy = e._DepthwiseConv2dNative = function() {
        return (Zy = e._DepthwiseConv2dNative = e.asm.DepthwiseConv2dNative).apply(null, arguments);
      }, Fm = e._Diag = function() {
        return (Fm = e._Diag = e.asm.Diag).apply(null, arguments);
      }, Pm = e._Dilation2D = function() {
        return (Pm = e._Dilation2D = e.asm.Dilation2D).apply(null, arguments);
      }, Jy = e._Dilation2DBackpropFilter = function() {
        return (Jy = e._Dilation2DBackpropFilter = e.asm.Dilation2DBackpropFilter).apply(null, arguments);
      }, eb = e._Dilation2DBackpropInput = function() {
        return (eb = e._Dilation2DBackpropInput = e.asm.Dilation2DBackpropInput).apply(null, arguments);
      }, tb = e._Elu = function() {
        return (tb = e._Elu = e.asm.Elu).apply(null, arguments);
      }, rb = e._EluGrad = function() {
        return (rb = e._EluGrad = e.asm.EluGrad).apply(null, arguments);
      }, Om = e._Equal = function() {
        return (Om = e._Equal = e.asm.Equal).apply(null, arguments);
      }, f0 = e._Erf = function() {
        return (f0 = e._Erf = e.asm.Erf).apply(null, arguments);
      }, ob = e._Exp = function() {
        return (ob = e._Exp = e.asm.Exp).apply(null, arguments);
      }, nb = e._Expm1 = function() {
        return (nb = e._Expm1 = e.asm.Expm1).apply(null, arguments);
      }, sb = e._FlipLeftRight = function() {
        return (sb = e._FlipLeftRight = e.asm.FlipLeftRight).apply(null, arguments);
      }, ab = e._Floor = function() {
        return (ab = e._Floor = e.asm.Floor).apply(null, arguments);
      }, ib = e._FloorDiv = function() {
        return (ib = e._FloorDiv = e.asm.FloorDiv).apply(null, arguments);
      }, ub = e._FusedBatchNorm = function() {
        return (ub = e._FusedBatchNorm = e.asm.FusedBatchNorm).apply(null, arguments);
      }, pb = e._FusedConv2D = function() {
        return (pb = e._FusedConv2D = e.asm.FusedConv2D).apply(null, arguments);
      }, cb = e._FusedDepthwiseConv2D = function() {
        return (cb = e._FusedDepthwiseConv2D = e.asm.FusedDepthwiseConv2D).apply(null, arguments);
      }, lb = e._Gather = function() {
        return (lb = e._Gather = e.asm.Gather).apply(null, arguments);
      }, mb = e._GatherNd = function() {
        return (mb = e._GatherNd = e.asm.GatherNd).apply(null, arguments);
      }, db = e._Greater = function() {
        return (db = e._Greater = e.asm.Greater).apply(null, arguments);
      }, fb = e._GreaterEqual = function() {
        return (fb = e._GreaterEqual = e.asm.GreaterEqual).apply(null, arguments);
      }, hb = e._IsFinite = function() {
        return (hb = e._IsFinite = e.asm.IsFinite).apply(null, arguments);
      }, gb = e._IsInf = function() {
        return (gb = e._IsInf = e.asm.IsInf).apply(null, arguments);
      }, xb = e._IsNan = function() {
        return (xb = e._IsNan = e.asm.IsNan).apply(null, arguments);
      }, yb = e._LRN = function() {
        return (yb = e._LRN = e.asm.LRN).apply(null, arguments);
      }, bb = e._LRNGrad = function() {
        return (bb = e._LRNGrad = e.asm.LRNGrad).apply(null, arguments);
      }, Cb = e._LeakyRelu = function() {
        return (Cb = e._LeakyRelu = e.asm.LeakyRelu).apply(null, arguments);
      }, wb = e._Less = function() {
        return (wb = e._Less = e.asm.Less).apply(null, arguments);
      }, Sb = e._LessEqual = function() {
        return (Sb = e._LessEqual = e.asm.LessEqual).apply(null, arguments);
      }, Ib = e._LinSpace = function() {
        return (Ib = e._LinSpace = e.asm.LinSpace).apply(null, arguments);
      }, vb = e._Log = function() {
        return (vb = e._Log = e.asm.Log).apply(null, arguments);
      }, kb = e._Log1p = function() {
        return (kb = e._Log1p = e.asm.Log1p).apply(null, arguments);
      }, Nb = e._LogicalAnd = function() {
        return (Nb = e._LogicalAnd = e.asm.LogicalAnd).apply(null, arguments);
      }, Tb = e._LogicalNot = function() {
        return (Tb = e._LogicalNot = e.asm.LogicalNot).apply(null, arguments);
      }, _b = e._LogicalOr = function() {
        return (_b = e._LogicalOr = e.asm.LogicalOr).apply(null, arguments);
      }, $b = e._LogicalXor = function() {
        return ($b = e._LogicalXor = e.asm.LogicalXor).apply(null, arguments);
      }, Eb = e._Max = function() {
        return (Eb = e._Max = e.asm.Max).apply(null, arguments);
      }, Rb = e._MaxPool = function() {
        return (Rb = e._MaxPool = e.asm.MaxPool).apply(null, arguments);
      }, Db = e._MaxPool3D = function() {
        return (Db = e._MaxPool3D = e.asm.MaxPool3D).apply(null, arguments);
      }, Ab = e._MaxPool3DGrad = function() {
        return (Ab = e._MaxPool3DGrad = e.asm.MaxPool3DGrad).apply(null, arguments);
      }, Fb = e._MaxPoolGrad = function() {
        return (Fb = e._MaxPoolGrad = e.asm.MaxPoolGrad).apply(null, arguments);
      }, Pb = e._MaxPoolWithArgmax = function() {
        return (Pb = e._MaxPoolWithArgmax = e.asm.MaxPoolWithArgmax).apply(null, arguments);
      }, Ob = e._Maximum = function() {
        return (Ob = e._Maximum = e.asm.Maximum).apply(null, arguments);
      }, Mb = e._Mean = function() {
        return (Mb = e._Mean = e.asm.Mean).apply(null, arguments);
      }, Lb = e._Min = function() {
        return (Lb = e._Min = e.asm.Min).apply(null, arguments);
      }, Bb = e._Minimum = function() {
        return (Bb = e._Minimum = e.asm.Minimum).apply(null, arguments);
      }, zb = e._MirrorPad = function() {
        return (zb = e._MirrorPad = e.asm.MirrorPad).apply(null, arguments);
      }, Vb = e._Mod = function() {
        return (Vb = e._Mod = e.asm.Mod).apply(null, arguments);
      }, Wb = e._Multinomial = function() {
        return (Wb = e._Multinomial = e.asm.Multinomial).apply(null, arguments);
      }, Ub = e._Multiply = function() {
        return (Ub = e._Multiply = e.asm.Multiply).apply(null, arguments);
      }, Gb = e._Neg = function() {
        return (Gb = e._Neg = e.asm.Neg).apply(null, arguments);
      }, Hb = e._NonMaxSuppressionV3 = function() {
        return (Hb = e._NonMaxSuppressionV3 = e.asm.NonMaxSuppressionV3).apply(null, arguments);
      }, Kb = e._NonMaxSuppressionV4 = function() {
        return (Kb = e._NonMaxSuppressionV4 = e.asm.NonMaxSuppressionV4).apply(null, arguments);
      }, qb = e._NonMaxSuppressionV5 = function() {
        return (qb = e._NonMaxSuppressionV5 = e.asm.NonMaxSuppressionV5).apply(null, arguments);
      }, jb = e._NotEqual = function() {
        return (jb = e._NotEqual = e.asm.NotEqual).apply(null, arguments);
      }, Xb = e._OneHot = function() {
        return (Xb = e._OneHot = e.asm.OneHot).apply(null, arguments);
      }, Yb = e._PadV2 = function() {
        return (Yb = e._PadV2 = e.asm.PadV2).apply(null, arguments);
      }, Qb = e._Pow = function() {
        return (Qb = e._Pow = e.asm.Pow).apply(null, arguments);
      }, Zb = e._Prelu = function() {
        return (Zb = e._Prelu = e.asm.Prelu).apply(null, arguments);
      }, Jb = e._Prod = function() {
        return (Jb = e._Prod = e.asm.Prod).apply(null, arguments);
      }, eC = e._RealDiv = function() {
        return (eC = e._RealDiv = e.asm.RealDiv).apply(null, arguments);
      }, tC = e._Reciprocal = function() {
        return (tC = e._Reciprocal = e.asm.Reciprocal).apply(null, arguments);
      }, rC = e._Relu = function() {
        return (rC = e._Relu = e.asm.Relu).apply(null, arguments);
      }, oC = e._Relu6 = function() {
        return (oC = e._Relu6 = e.asm.Relu6).apply(null, arguments);
      }, nC = e._ResizeBilinear = function() {
        return (nC = e._ResizeBilinear = e.asm.ResizeBilinear).apply(null, arguments);
      }, sC = e._ResizeBilinearGrad = function() {
        return (sC = e._ResizeBilinearGrad = e.asm.ResizeBilinearGrad).apply(null, arguments);
      }, aC = e._ResizeNearestNeighbor = function() {
        return (aC = e._ResizeNearestNeighbor = e.asm.ResizeNearestNeighbor).apply(null, arguments);
      }, iC = e._ResizeNearestNeighborGrad = function() {
        return (iC = e._ResizeNearestNeighborGrad = e.asm.ResizeNearestNeighborGrad).apply(null, arguments);
      }, uC = e._Reverse = function() {
        return (uC = e._Reverse = e.asm.Reverse).apply(null, arguments);
      }, pC = e._RotateWithOffset = function() {
        return (pC = e._RotateWithOffset = e.asm.RotateWithOffset).apply(null, arguments);
      }, cC = e._Round = function() {
        return (cC = e._Round = e.asm.Round).apply(null, arguments);
      }, lC = e._Rsqrt = function() {
        return (lC = e._Rsqrt = e.asm.Rsqrt).apply(null, arguments);
      }, mC = e._ScatterNd = function() {
        return (mC = e._ScatterNd = e.asm.ScatterNd).apply(null, arguments);
      }, dC = e._SearchSorted = function() {
        return (dC = e._SearchSorted = e.asm.SearchSorted).apply(null, arguments);
      }, fC = e._SelectV2 = function() {
        return (fC = e._SelectV2 = e.asm.SelectV2).apply(null, arguments);
      }, hC = e._Selu = function() {
        return (hC = e._Selu = e.asm.Selu).apply(null, arguments);
      }, gC = e._Sigmoid = function() {
        return (gC = e._Sigmoid = e.asm.Sigmoid).apply(null, arguments);
      }, xC = e._Sign = function() {
        return (xC = e._Sign = e.asm.Sign).apply(null, arguments);
      }, yC = e._Sin = function() {
        return (yC = e._Sin = e.asm.Sin).apply(null, arguments);
      }, bC = e._Sinh = function() {
        return (bC = e._Sinh = e.asm.Sinh).apply(null, arguments);
      }, CC = e._Softmax = function() {
        return (CC = e._Softmax = e.asm.Softmax).apply(null, arguments);
      }, wC = e._Softplus = function() {
        return (wC = e._Softplus = e.asm.Softplus).apply(null, arguments);
      }, SC = e._SparseFillEmptyRows = function() {
        return (SC = e._SparseFillEmptyRows = e.asm.SparseFillEmptyRows).apply(null, arguments);
      }, IC = e._SparseReshape = function() {
        return (IC = e._SparseReshape = e.asm.SparseReshape).apply(null, arguments);
      }, vC = e._SparseSegmentReduction = function() {
        return (vC = e._SparseSegmentReduction = e.asm.SparseSegmentReduction).apply(null, arguments);
      }, kC = e._SparseToDense = function() {
        return (kC = e._SparseToDense = e.asm.SparseToDense).apply(null, arguments);
      }, NC = e._Sqrt = function() {
        return (NC = e._Sqrt = e.asm.Sqrt).apply(null, arguments);
      }, TC = e._Square = function() {
        return (TC = e._Square = e.asm.Square).apply(null, arguments);
      }, _C = e._SquaredDifference = function() {
        return (_C = e._SquaredDifference = e.asm.SquaredDifference).apply(null, arguments);
      }, $C = e._Step = function() {
        return ($C = e._Step = e.asm.Step).apply(null, arguments);
      }, EC = e._StridedSlice = function() {
        return (EC = e._StridedSlice = e.asm.StridedSlice).apply(null, arguments);
      }, RC = e._Sub = function() {
        return (RC = e._Sub = e.asm.Sub).apply(null, arguments);
      }, DC = e._Sum = function() {
        return (DC = e._Sum = e.asm.Sum).apply(null, arguments);
      }, AC = e._Tan = function() {
        return (AC = e._Tan = e.asm.Tan).apply(null, arguments);
      }, FC = e._Tanh = function() {
        return (FC = e._Tanh = e.asm.Tanh).apply(null, arguments);
      }, PC = e._TensorScatterUpdate = function() {
        return (PC = e._TensorScatterUpdate = e.asm.TensorScatterUpdate).apply(null, arguments);
      }, OC = e._Tile = function() {
        return (OC = e._Tile = e.asm.Tile).apply(null, arguments);
      }, MC = e._TopK = function() {
        return (MC = e._TopK = e.asm.TopK).apply(null, arguments);
      }, LC = e._Transform = function() {
        return (LC = e._Transform = e.asm.Transform).apply(null, arguments);
      }, BC = e._Transpose = function() {
        return (BC = e._Transpose = e.asm.Transpose).apply(null, arguments);
      }, zC = e.__FusedMatMul = function() {
        return (zC = e.__FusedMatMul = e.asm._FusedMatMul).apply(null, arguments);
      }, VC = e._malloc = function() {
        return (VC = e._malloc = e.asm.malloc).apply(null, arguments);
      }, WC = e._free = function() {
        return (WC = e._free = e.asm.free).apply(null, arguments);
      }, UC = e.___errno_location = function() {
        return (UC = e.___errno_location = e.asm.__errno_location).apply(null, arguments);
      }, Mm = e.stackSave = function() {
        return (Mm = e.stackSave = e.asm.stackSave).apply(null, arguments);
      }, Lm = e.stackRestore = function() {
        return (Lm = e.stackRestore = e.asm.stackRestore).apply(null, arguments);
      }, ml = e.stackAlloc = function() {
        return (ml = e.stackAlloc = e.asm.stackAlloc).apply(null, arguments);
      }, GC = e.dynCall_iijjiiii = function() {
        return (GC = e.dynCall_iijjiiii = e.asm.dynCall_iijjiiii).apply(null, arguments);
      }, HC = e.dynCall_jiji = function() {
        return (HC = e.dynCall_jiji = e.asm.dynCall_jiji).apply(null, arguments);
      };
      e.cwrap = ky;
      var Wp;
      ar = function K() {
        Wp || Bm(), Wp || (ar = K);
      };
      function Bm(K) {
        if (K = K || i, _t > 0 || (gt(), _t > 0))
          return;
        function ae() {
          Wp || (Wp = true, e.calledRun = true, !M && (xt(), o(e), e.onRuntimeInitialized && e.onRuntimeInitialized(), Lr()));
        }
        e.setStatus ? (e.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            e.setStatus("");
          }, 1), ae();
        }, 1)) : ae();
      }
      if (e.preInit)
        for (typeof e.preInit == "function" && (e.preInit = [e.preInit]); e.preInit.length > 0; )
          e.preInit.pop()();
      Bm();
      var Up;
      s && (Up = { uncaughtException: process.listeners("uncaughtException").filter(function(K) {
        return !s.uncaughtException.indexOf(K) > -1;
      }), unhandledRejection: process.listeners("unhandledRejection").filter(function(K) {
        return !s.unhandledRejection.indexOf(K) > -1;
      }) });
      var Gp;
      if (typeof t8 != "undefined")
        Gp = t8;
      else if (typeof WasmBackendModuleThreadedSimd != "undefined")
        Gp = WasmBackendModuleThreadedSimd;
      else
        throw new Error("Could not find wasm module in post.js");
      if (Up) {
        var KC = Gp._dispose;
        Gp._dispose = function() {
          KC(), Up.uncaughtException.forEach(function(K) {
            process.removeListener("uncaughtException", K);
          }), Up.unhandledRejection.forEach(function(K) {
            process.removeListener("unhandledRejection", K);
          });
        };
      }
      return t8.ready;
    };
  })();
  typeof Ug == "object" && typeof Gv == "object" ? Gv.exports = Uv : typeof define == "function" && define.amd ? define([], function() {
    return Uv;
  }) : typeof Ug == "object" && (Ug.WasmBackendModule = Uv);
});
var zo = class {
  constructor(t8, e) {
    this.backend = t8, this.dataMover = e, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(t8) {
    return this.data.has(t8) || this.dataMover.moveData(this.backend, t8), this.data.get(t8);
  }
  set(t8, e) {
    this.dataIdsCount++, this.data.set(t8, e);
  }
  has(t8) {
    return this.data.has(t8);
  }
  delete(t8) {
    return this.dataIdsCount--, this.data.delete(t8);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
};
var ao = class {
  refCount(t8) {
    return zr("refCount");
  }
  incRef(t8) {
    return zr("incRef");
  }
  timerAvailable() {
    return true;
  }
  time(t8) {
    return zr("time");
  }
  read(t8) {
    return zr("read");
  }
  readSync(t8) {
    return zr("readSync");
  }
  readToGPU(t8, e) {
    return zr("readToGPU");
  }
  numDataIds() {
    return zr("numDataIds");
  }
  disposeData(t8, e) {
    return zr("disposeData");
  }
  write(t8, e, o) {
    return zr("write");
  }
  move(t8, e, o, n, s) {
    return zr("move");
  }
  createTensorFromGPUData(t8, e, o) {
    return zr("createTensorFromGPUData");
  }
  memory() {
    return zr("memory");
  }
  floatPrecision() {
    return zr("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? 1e-7 : 1e-4;
  }
  dispose() {
    return zr("dispose");
  }
};
function zr(r) {
  throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
function I0(r) {
  let t8 = r.length, e = 0;
  for (; t8 > 0; )
    e = Math.random() * t8 | 0, t8--, jm(r, t8, e);
}
function TG(r, t8) {
  if (r.length !== t8.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${t8.length}`);
  let e = r.length, o = 0;
  for (; e > 0; )
    o = Math.random() * e | 0, e--, jm(r, e, o), jm(t8, e, o);
}
function qp(r, t8, e) {
  return Math.max(r, Math.min(t8, e));
}
function _G(r) {
  return r % 2 === 0 ? r : r + 1;
}
function jm(r, t8, e) {
  let o = r[t8];
  r[t8] = r[e], r[e] = o;
}
function $G(r) {
  let t8 = 0;
  for (let e = 0; e < r.length; e++)
    t8 += r[e];
  return t8;
}
function EG(r, t8) {
  let e = Math.random();
  return t8 * e + (1 - e) * r;
}
function RG(r, t8) {
  let e = 0;
  for (let o = 0; o < r.length; o++) {
    let n = Number(r[o]) - Number(t8[o]);
    e += n * n;
  }
  return e;
}
function $(r, t8) {
  if (!r)
    throw new Error(typeof t8 == "string" ? t8 : t8());
}
function yt(r, t8, e = "") {
  $(Cr(r, t8), () => e + ` Shapes ${r} and ${t8} must match`);
}
function io(r) {
  $(r != null, () => "The input to the tensor constructor must be a non-null value.");
}
function He(r) {
  if (r.length === 0)
    return 1;
  let t8 = r[0];
  for (let e = 1; e < r.length; e++)
    t8 *= r[e];
  return t8;
}
function DG(r) {
  return r.length === 0;
}
function ZC(r, t8) {
  if (r === t8)
    return true;
  if (r == null || t8 == null || r.length !== t8.length)
    return false;
  for (let e = 0; e < r.length; e++)
    if (r[e] !== null && t8[e] !== null && r[e] !== t8[e])
      return false;
  return true;
}
function Cr(r, t8) {
  if (r === t8)
    return true;
  if (r == null || t8 == null || r.length !== t8.length)
    return false;
  for (let e = 0; e < r.length; e++)
    if (r[e] !== t8[e])
      return false;
  return true;
}
function qa(r) {
  return r % 1 === 0;
}
function AG(r) {
  if (Math.tanh != null)
    return Math.tanh(r);
  if (r === 1 / 0)
    return 1;
  if (r === -1 / 0)
    return -1;
  {
    let t8 = Math.exp(2 * r);
    return (t8 - 1) / (t8 + 1);
  }
}
function FG(r) {
  let t8 = Math.ceil(Math.sqrt(r));
  return [t8, Math.ceil(r / t8)];
}
function PG(r) {
  let t8 = new Uint32Array(r);
  for (let e = 0; e < r; ++e)
    t8[e] = e;
  return I0(t8), t8;
}
function Au(r, t8) {
  return t8 <= r.length ? r : r + " ".repeat(t8 - r.length);
}
function OG(r, t8 = (n) => 0, e, o) {
  return new Promise((n, s) => {
    let a = 0, i = () => {
      if (r()) {
        n();
        return;
      }
      a++;
      let p = t8(a);
      if (e != null && a >= e) {
        s();
        return;
      }
      o != null ? o(i, p) : setTimeout(i, p);
    };
    i();
  });
}
function MG(r, t8) {
  let e = 1, o = -1;
  for (let s = 0; s < r.length; ++s)
    if (r[s] >= 0)
      e *= r[s];
    else if (r[s] === -1) {
      if (o !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);
      o = s;
    } else if (r[s] < 0)
      throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);
  if (o === -1) {
    if (t8 > 0 && t8 !== e)
      throw Error(`Size(${t8}) must match the product of shape ${r}`);
    return r;
  }
  if (e === 0)
    throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);
  if (t8 % e !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${t8} / ${e}`);
  let n = r.slice();
  return n[o] = t8 / e, n;
}
function Ei(r, t8) {
  let e = t8.length;
  return r = r == null ? t8.map((o, n) => n) : [].concat(r), $(r.every((o) => o >= -e && o < e), () => `All values in axis param must be in range [-${e}, ${e}) but got axis ${r}`), $(r.every((o) => qa(o)), () => `All values in axis param must be integers but got axis ${r}`), r.map((o) => o < 0 ? e + o : o);
}
function JC(r, t8) {
  let e = [], o = [], n = t8 != null && Array.isArray(t8) && t8.length === 0, s = t8 == null || n ? null : Ei(t8, r).sort(), a = 0;
  for (let i = 0; i < r.length; ++i) {
    if (s != null) {
      if (s[a] === i && r[i] !== 1)
        throw new Error(`Can't squeeze axis ${i} since its dim '${r[i]}' is not 1`);
      (s[a] == null || s[a] > i) && r[i] === 1 && (e.push(r[i]), o.push(i)), s[a] <= i && a++;
    }
    r[i] !== 1 && (e.push(r[i]), o.push(i));
  }
  return { newShape: e, keptDims: o };
}
function ew(r, t8) {
  return Xm(r, t8);
}
function Xm(r, t8) {
  let e = null;
  if (r == null || r === "float32")
    e = new Float32Array(t8);
  else if (r === "int32")
    e = new Int32Array(t8);
  else if (r === "bool")
    e = new Uint8Array(t8);
  else if (r === "string")
    e = new Array(t8);
  else
    throw new Error(`Unknown data type ${r}`);
  return e;
}
function tw(r, t8) {
  for (let e = 0; e < r.length; e++) {
    let o = r[e];
    if (isNaN(o) || !isFinite(o))
      throw Error(`A tensor of type ${t8} being uploaded contains ${o}.`);
  }
}
function rw(r) {
  return r === "bool" || r === "complex64" || r === "float32" || r === "int32" || r === "string";
}
function LG(r, t8) {
  return !(t8 === "complex64" || t8 === "float32" && r !== "complex64" || t8 === "int32" && r !== "float32" && r !== "complex64" || t8 === "bool" && r === "bool");
}
function jp(r) {
  if (r === "float32" || r === "int32")
    return 4;
  if (r === "complex64")
    return 8;
  if (r === "bool")
    return 1;
  throw new Error(`Unknown dtype ${r}`);
}
function ow(r) {
  if (r == null)
    return 0;
  let t8 = 0;
  return r.forEach((e) => t8 += e.length), t8;
}
function Vo(r) {
  return typeof r == "string" || r instanceof String;
}
function v0(r) {
  return typeof r == "boolean";
}
function k0(r) {
  return typeof r == "number";
}
function Ri(r) {
  return Array.isArray(r) ? Ri(r[0]) : r instanceof Float32Array ? "float32" : r instanceof Int32Array || r instanceof Uint8Array || r instanceof Uint8ClampedArray ? "int32" : k0(r) ? "float32" : Vo(r) ? "string" : v0(r) ? "bool" : "float32";
}
function qs(r) {
  return !!(r && r.constructor && r.call && r.apply);
}
function Xp(r, t8) {
  for (let e = t8; e < r; ++e)
    if (r % e === 0)
      return e;
  return r;
}
function js(r) {
  let t8 = r.length;
  if (t8 < 2)
    return [];
  let e = new Array(t8 - 1);
  e[t8 - 2] = r[t8 - 1];
  for (let o = t8 - 3; o >= 0; --o)
    e[o] = e[o + 1] * r[o + 1];
  return e;
}
function N0(r, t8, e, o = false) {
  let n = new Array();
  if (t8.length === 1) {
    let s = t8[0] * (o ? 2 : 1);
    for (let a = 0; a < s; a++)
      n[a] = e[r + a];
  } else {
    let s = t8[0], a = t8.slice(1), i = a.reduce((p, u) => p * u) * (o ? 2 : 1);
    for (let p = 0; p < s; p++)
      n[p] = N0(r + p * i, a, e, o);
  }
  return n;
}
function Du(r, t8, e = false) {
  if (r.length === 0)
    return t8[0];
  let o = r.reduce((n, s) => n * s) * (e ? 2 : 1);
  if (o === 0)
    return [];
  if (o !== t8.length)
    throw new Error(`[${r}] does not match the input size ${t8.length}${e ? " for a complex tensor" : ""}.`);
  return N0(0, r, t8, e);
}
function BG(r, t8) {
  if (Array.isArray(r))
    return r;
  if (t8 === "float32")
    return r instanceof Float32Array ? r : new Float32Array(r);
  if (t8 === "int32")
    return r instanceof Int32Array ? r : new Int32Array(r);
  if (t8 === "bool" || t8 === "string")
    return Uint8Array.from(new Int32Array(r));
  throw new Error(`Unknown dtype ${t8}`);
}
function fl(r, t8) {
  let e = Yp(r, t8);
  for (let o = 0; o < e.length; o++)
    e[o] = 1;
  return e;
}
function Yp(r, t8) {
  if (t8 == null || t8 === "float32" || t8 === "complex64")
    return new Float32Array(r);
  if (t8 === "int32")
    return new Int32Array(r);
  if (t8 === "bool")
    return new Uint8Array(r);
  throw new Error(`Unknown data type ${t8}`);
}
function zG(r, t8) {
  let e = r.reduce((o, n) => o * n, 1);
  if (t8 == null || t8 === "float32")
    return Du(r, new Float32Array(e));
  if (t8 === "int32")
    return Du(r, new Int32Array(e));
  if (t8 === "bool")
    return Du(r, new Uint8Array(e));
  throw new Error(`Unknown data type ${t8}`);
}
function wt(r) {
  r.forEach((t8) => {
    $(Number.isInteger(t8) && t8 >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${r}].`);
  });
}
function VG(r, t8, e) {
  if (t8 === 0)
    return 0;
  if (t8 === 1)
    return r[0];
  let o = r[r.length - 1];
  for (let n = 0; n < r.length - 1; ++n)
    o += e[n] * r[n];
  return o;
}
function WG(r, t8, e) {
  if (t8 === 0)
    return [];
  if (t8 === 1)
    return [r];
  let o = new Array(t8);
  for (let n = 0; n < o.length - 1; ++n)
    o[n] = Math.floor(r / e[n]), r -= o[n] * e[n];
  return o[o.length - 1] = r, o;
}
function Fu(r) {
  return r && r.then && typeof r.then == "function";
}
var T0 = "tfjsflags";
var hl = class {
  constructor(t8) {
    this.global = t8, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = GG, this.populateURLFlags();
  }
  setPlatform(t8, e) {
    this.platform != null && (A().getBool("IS_TEST") || A().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t8}.`)), this.platformName = t8, this.platform = e;
  }
  registerFlag(t8, e, o) {
    if (this.flagRegistry[t8] = { evaluationFn: e, setHook: o }, this.urlFlags[t8] != null) {
      let n = this.urlFlags[t8];
      A().getBool("IS_TEST") || A().getBool("PROD") || console.warn(`Setting feature override from URL ${t8}: ${n}.`), this.set(t8, n);
    }
  }
  async getAsync(t8) {
    return t8 in this.flags ? this.flags[t8] : (this.flags[t8] = await this.evaluateFlag(t8), this.flags[t8]);
  }
  get(t8) {
    if (t8 in this.flags)
      return this.flags[t8];
    let e = this.evaluateFlag(t8);
    if (Fu(e))
      throw new Error(`Flag ${t8} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[t8] = e, this.flags[t8];
  }
  getNumber(t8) {
    return this.get(t8);
  }
  getBool(t8) {
    return this.get(t8);
  }
  getString(t8) {
    return this.get(t8);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(t8, e) {
    if (this.flagRegistry[t8] == null)
      throw new Error(`Cannot set flag ${t8} as it has not been registered.`);
    this.flags[t8] = e, this.flagRegistry[t8].setHook != null && this.flagRegistry[t8].setHook(e);
  }
  evaluateFlag(t8) {
    if (this.flagRegistry[t8] == null)
      throw new Error(`Cannot evaluate flag '${t8}': no evaluation function found.`);
    return this.flagRegistry[t8].evaluationFn();
  }
  setFlags(t8) {
    this.flags = Object.assign({}, t8);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global == "undefined" || typeof this.global.location == "undefined" || typeof this.global.location.search == "undefined")
      return;
    let t8 = this.getQueryParams(this.global.location.search);
    T0 in t8 && t8[T0].split(",").forEach((o) => {
      let [n, s] = o.split(":");
      this.urlFlags[n] = KG(n, s);
    });
  }
};
function GG(r) {
  let t8 = {};
  return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (e, ...o) => (HG(t8, o[0], o[1]), o.join("="))), t8;
}
function HG(r, t8, e) {
  r[decodeURIComponent(t8)] = decodeURIComponent(e || "");
}
function KG(r, t8) {
  let e = t8.toLowerCase();
  return e === "true" || e === "false" ? e === "true" : `${+e}` === e ? +e : t8;
}
function A() {
  return nw;
}
var nw = null;
function _0(r) {
  nw = r;
}
var sw;
function aw() {
  if (sw == null) {
    let r;
    if (typeof window != "undefined")
      r = window;
    else if (typeof global != "undefined")
      r = global;
    else if (typeof process != "undefined")
      r = process;
    else if (typeof self != "undefined")
      r = self;
    else
      throw new Error("Could not find a global object");
    sw = r;
  }
  return sw;
}
function qG() {
  let r = aw();
  return r._tfGlobals == null && (r._tfGlobals = /* @__PURE__ */ new Map()), r._tfGlobals;
}
function gl(r, t8) {
  let e = qG();
  if (e.has(r))
    return e.get(r);
  {
    let o = t8();
    return e.set(r, o), e.get(r);
  }
}
var Xs = "Abs";
var Wo = "Acos";
var Uo = "Acosh";
var uo = "Add";
var Go = "AddN";
var Ho = "All";
var Ko = "Any";
var Ys = "ArgMax";
var Qs = "ArgMin";
var qo = "Asin";
var jo = "Asinh";
var Xo = "Atan";
var Yo = "Atanh";
var Qo = "Atan2";
var Zo = "AvgPool";
var Di = "AvgPoolGrad";
var Zs = "AvgPool3D";
var Ai = "AvgPool3DGrad";
var Jo = "BatchMatMul";
var Js = "BatchToSpaceND";
var en = "Bincount";
var ja = "BitwiseAnd";
var Bce = "BroadcastTo";
var ea = "BroadcastArgs";
var bo = "Cast";
var tn = "Ceil";
var Co = "ClipByValue";
var Fi = "Complex";
var Pi = "ComplexAbs";
var ta = "Concat";
var rn = "Conv2D";
var Oi = "Conv2DBackpropFilter";
var on = "Conv2DBackpropInput";
var nn = "Conv3D";
var Xa = "Conv3DBackpropFilterV2";
var sn = "Conv3DBackpropInputV2";
var an = "Cos";
var un = "Cosh";
var pn = "Cumprod";
var cn = "Cumsum";
var ln = "CropAndResize";
var ra = "DenseBincount";
var mn = "DepthToSpace";
var dn = "DepthwiseConv2dNative";
var Mi = "DepthwiseConv2dNativeBackpropFilter";
var Li = "DepthwiseConv2dNativeBackpropInput";
var oa = "Diag";
var fn = "Dilation2D";
var Bi = "Dilation2DBackpropInput";
var zi = "Dilation2DBackpropFilter";
var Pu = "Draw";
var hn = "RealDiv";
var Vi = "Einsum";
var gn = "Elu";
var Ya = "EluGrad";
var xn = "Erf";
var yn = "Equal";
var bn = "Exp";
var na = "ExpandDims";
var Cn = "Expm1";
var Wi = "FFT";
var sa = "Fill";
var wn = "FlipLeftRight";
var Sn = "Floor";
var In = "FloorDiv";
var vn = "FusedBatchNorm";
var aa = "GatherV2";
var kn = "GatherNd";
var Nn = "Greater";
var Tn = "GreaterEqual";
var wo = "Identity";
var Ui = "IFFT";
var Gi = "Imag";
var _n = "IsFinite";
var $n = "IsInf";
var En = "IsNan";
var Rn = "LeakyRelu";
var Dn = "Less";
var An = "LessEqual";
var Fn = "LinSpace";
var Pn = "Log";
var On = "Log1p";
var Mn = "LogicalAnd";
var Ln = "LogicalNot";
var Bn = "LogicalOr";
var $0 = "LogicalXor";
var zce = "LogSoftmax";
var Vce = "LowerBound";
var zn = "LRN";
var Qa = "LRNGrad";
var Wce = "MatrixBandPart";
var Vn = "Max";
var Wn = "Maximum";
var Un = "MaxPool";
var Hi = "MaxPoolGrad";
var ia = "MaxPool3D";
var Ki = "MaxPool3DGrad";
var ua = "MaxPoolWithArgmax";
var Gn = "Mean";
var Hn = "Min";
var Kn = "Minimum";
var qn = "MirrorPad";
var jn = "Mod";
var Xn = "Multinomial";
var Yn = "Multiply";
var pa = "Neg";
var Qn = "NotEqual";
var Zn = "NonMaxSuppressionV3";
var Za = "NonMaxSuppressionV4";
var Jn = "NonMaxSuppressionV5";
var ca = "OnesLike";
var es = "OneHot";
var la = "Pack";
var ts = "PadV2";
var Uce = "Pool";
var rs = "Pow";
var os = "Prelu";
var ns = "Prod";
var Qp = "RaggedGather";
var Zp = "RaggedRange";
var Jp = "RaggedTensorToTensor";
var ma = "Range";
var qi = "Real";
var ss = "Reciprocal";
var as = "Relu";
var da = "Reshape";
var is = "ResizeNearestNeighbor";
var Ja = "ResizeNearestNeighborGrad";
var us = "ResizeBilinear";
var ei = "ResizeBilinearGrad";
var ps = "Relu6";
var cs = "Reverse";
var ls = "Round";
var ms = "Rsqrt";
var ds = "ScatterNd";
var fs = "TensorScatterUpdate";
var hs = "SearchSorted";
var fa = "Select";
var gs = "Selu";
var ha = "Slice";
var xs = "Sin";
var ys = "Sinh";
var bs = "Sign";
var Cs = "Sigmoid";
var ws = "Softplus";
var Ss = "Sqrt";
var Is = "Sum";
var ga = "SpaceToBatchND";
var xa = "SplitV";
var vs = "Softmax";
var ji = "SparseFillEmptyRows";
var ti = "SparseReshape";
var ya = "SparseSegmentMean";
var ba = "SparseSegmentSum";
var ks = "SparseToDense";
var Ns = "SquaredDifference";
var Xi = "Square";
var Ou = "StaticRegexReplace";
var Ts = "StridedSlice";
var Ca = "StringNGrams";
var Yi = "StringSplit";
var Qi = "StringToHashBucketFast";
var _s = "Sub";
var $s = "Tan";
var Es = "Tanh";
var po = "Tile";
var Rs = "TopK";
var Ds = "Transform";
var co = "Transpose";
var Zi = "Unique";
var wa = "Unpack";
var Ji = "UnsortedSegmentSum";
var Gce = "UpperBound";
var Sa = "ZerosLike";
var So = "Step";
var Mu = "FromPixels";
var As = "RotateWithOffset";
var Io = "_FusedMatMul";
var vo = "FusedConv2D";
var ko = "FusedDepthwiseConv2D";
function Ia(...r) {
  A().getBool("IS_TEST") || A().getBool("PROD") || console.warn(...r);
}
function jG(...r) {
  A().getBool("IS_TEST") || A().getBool("PROD") || console.log(...r);
}
var ec = gl("kernelRegistry", () => /* @__PURE__ */ new Map());
var xl = gl("gradRegistry", () => /* @__PURE__ */ new Map());
function tc(r, t8) {
  let e = uw(r, t8);
  return ec.get(e);
}
function iw(r) {
  return xl.get(r);
}
function Ym(r) {
  let t8 = ec.entries(), e = [];
  for (; ; ) {
    let { done: o, value: n } = t8.next();
    if (o)
      break;
    let [s, a] = n, [i] = s.split("_");
    i === r && e.push(a);
  }
  return e;
}
function ri(r) {
  let { kernelName: t8, backendName: e } = r, o = uw(t8, e);
  ec.has(o) && Ia(`The kernel '${t8}' for backend '${e}' is already registered`), ec.set(o, r);
}
function Xce(r) {
  let { kernelName: t8 } = r;
  xl.has(t8) && A().getBool("DEBUG") && Ia(`Overriding the gradient for '${t8}'`), xl.set(t8, r);
}
function Yce(r, t8) {
  let e = uw(r, t8);
  if (!ec.has(e))
    throw new Error(`The kernel '${r}' for backend '${t8}' is not registered`);
  ec.delete(e);
}
function Qce(r) {
  if (!xl.has(r))
    throw new Error(`The gradient '${r}' for backend is not registered`);
  xl.delete(r);
}
function Zce(r, t8) {
  Ym(r).forEach((o) => {
    let n = Object.assign({}, o, { backendName: t8 });
    ri(n);
  });
}
function uw(r, t8) {
  return `${t8}_${r}`;
}
var y = {};
qe(y, { arraysEqual: () => Cr, arraysEqualWithNull: () => ZC, assert: () => $, assertNonNegativeIntegerDimensions: () => wt, assertNonNull: () => io, assertShapesMatch: () => yt, bytesFromStringArray: () => ow, bytesPerElement: () => jp, checkConversionForErrors: () => tw, clamp: () => qp, computeStrides: () => js, convertBackendValuesAndArrayBuffer: () => BG, createScalarValue: () => t4, createShuffledIndices: () => PG, decodeString: () => sc, distSquared: () => RG, encodeString: () => tu, fetch: () => o4, fingerPrint64: () => e4, flatten: () => Ps, getArrayFromDType: () => Xm, getTypedArrayFromDType: () => ew, hasEncodingLoss: () => LG, hexToLong: () => yl, indexToLoc: () => WG, inferDtype: () => Ri, inferFromImplicitShape: () => MG, isBoolean: () => v0, isFunction: () => qs, isInt: () => qa, isNumber: () => k0, isPromise: () => Fu, isScalarShape: () => DG, isString: () => Vo, isTypedArray: () => Ot, isValidDtype: () => rw, locToIndex: () => VG, makeOnesTypedArray: () => fl, makeZerosNestedTypedArray: () => zG, makeZerosTypedArray: () => Yp, nearestDivisor: () => Xp, nearestLargerEven: () => _G, now: () => Wu, parseAxisParam: () => Ei, randUniform: () => EG, repeatedTry: () => OG, rightPad: () => Au, shuffle: () => I0, shuffleCombo: () => TG, sizeFromShape: () => He, sizeToSquarishShape: () => FG, squeezeShape: () => JC, sum: () => $G, swap: () => jm, tanh: () => AG, toNestedArray: () => Du, toTypedArray: () => nc });
function Qm(r) {
  return r instanceof Float32Array || r instanceof Int32Array || r instanceof Uint8Array || r instanceof Uint8ClampedArray;
}
var mw = Kp(V0());
var Vu = mw.default || mw;
function yl(r) {
  return Vu.fromString(r, true, 16);
}
var U0 = yl("c3a5c85c97cb3127");
var zu = yl("b492b66fbe98f273");
var wr = yl("9ae16a3b2f90404f");
function lw(r) {
  return r.xor(r.shru(47));
}
function G0(r, t8, e) {
  let o = r.slice(t8, t8 + e);
  return Vu.fromBytes(Array.from(o), true, true);
}
function St(r, t8) {
  return G0(r, t8, 8);
}
function W0(r, t8) {
  return G0(r, t8, 4);
}
function Qt(r, t8) {
  return t8 === 0 ? r : r.shru(t8).or(r.shl(64 - t8));
}
function eu(r, t8, e = yl("9ddfea08eb382d69")) {
  let o = r.xor(t8).mul(e);
  o = o.xor(o.shru(47));
  let n = t8.xor(o).mul(e);
  return n = n.xor(n.shru(47)), n = n.mul(e), n;
}
function YG(r, t8, e, o, n, s) {
  n = n.add(r), s = Qt(s.add(n).add(o), 21);
  let a = n;
  return n = n.add(t8), n = n.add(e), s = s.add(Qt(n, 44)), [n.add(o), s.add(a)];
}
function Jm(r, t8, e, o) {
  return YG(St(r, t8), St(r, t8 + 8), St(r, t8 + 16), St(r, t8 + 24), e, o);
}
function QG(r, t8 = r.length) {
  if (t8 >= 8) {
    let e = wr.add(t8 * 2), o = St(r, 0).add(wr), n = St(r, t8 - 8), s = Qt(n, 37).mul(e).add(o), a = Qt(o, 25).add(n).mul(e);
    return eu(s, a, e);
  }
  if (t8 >= 4) {
    let e = wr.add(t8 * 2), o = W0(r, 0);
    return eu(o.shl(3).add(t8), W0(r, t8 - 4), e);
  }
  if (t8 > 0) {
    let e = r[0], o = r[t8 >> 1], n = r[t8 - 1], s = e + (o << 8), a = t8 + (n << 2);
    return lw(wr.mul(s).xor(U0.mul(a))).mul(wr);
  }
  return wr;
}
function ZG(r, t8 = r.length) {
  let e = wr.add(t8 * 2), o = St(r, 0).mul(zu), n = St(r, 8), s = St(r, t8 - 8).mul(e), a = St(r, t8 - 16).mul(wr);
  return eu(Qt(o.add(n), 43).add(Qt(s, 30)).add(a), o.add(Qt(n.add(wr), 18)).add(s), e);
}
function JG(r, t8 = r.length) {
  let e = wr.add(t8 * 2), o = St(r, 0).mul(wr), n = St(r, 8), s = St(r, t8 - 8).mul(e), a = St(r, t8 - 16).mul(wr), i = Qt(o.add(n), 43).add(Qt(s, 30)).add(a), p = eu(i, o.add(Qt(n.add(wr), 18)).add(s), e), u = St(r, 16).mul(e), c = St(r, 24), l = i.add(St(r, t8 - 32)).mul(e), m = p.add(St(r, t8 - 24)).mul(e);
  return eu(Qt(u.add(c), 43).add(Qt(l, 30)).add(m), u.add(Qt(c.add(o), 18)).add(l), e);
}
function e4(r, t8 = r.length) {
  let e = Vu.fromNumber(81, true);
  if (t8 <= 32)
    return t8 <= 16 ? QG(r, t8) : ZG(r, t8);
  if (t8 <= 64)
    return JG(r, t8);
  let o = e, n = e.mul(zu).add(113), s = lw(n.mul(wr).add(113)).mul(wr), a = [Vu.UZERO, Vu.UZERO], i = [Vu.UZERO, Vu.UZERO];
  o = o.mul(wr).add(St(r, 0));
  let p = 0, u = (t8 - 1 >> 6) * 64, c = u + (t8 - 1 & 63) - 63;
  do
    o = Qt(o.add(n).add(a[0]).add(St(r, p + 8)), 37).mul(zu), n = Qt(n.add(a[1]).add(St(r, p + 48)), 42).mul(zu), o = o.xor(i[1]), n = n.add(a[0]).add(St(r, p + 40)), s = Qt(s.add(i[0]), 33).mul(zu), a = Jm(r, p, a[1].mul(zu), o.add(i[0])), i = Jm(r, p + 32, s.add(i[1]), n.add(St(r, p + 16))), [s, o] = [o, s], p += 64;
  while (p !== u);
  let l = zu.add(s.and(255).shl(1));
  return p = c, i[0] = i[0].add(t8 - 1 & 63), a[0] = a[0].add(i[0]), i[0] = i[0].add(a[0]), o = Qt(o.add(n).add(a[0]).add(St(r, p + 8)), 37).mul(l), n = Qt(n.add(a[1]).add(St(r, p + 48)), 42).mul(l), o = o.xor(i[1].mul(9)), n = n.add(a[0].mul(9).add(St(r, p + 40))), s = Qt(s.add(i[0]), 33).mul(l), a = Jm(r, p, a[1].mul(l), o.add(i[0])), i = Jm(r, p + 32, s.add(i[1]), n.add(St(r, p + 16))), [s, o] = [o, s], eu(eu(a[0], i[0], l).add(lw(n).mul(U0)).add(s), eu(a[1], i[1], l).add(o), l);
}
function t4(r, t8) {
  return t8 === "string" ? tu(r) : nc([r], t8);
}
function r4(r, t8) {
  return r instanceof Float32Array && t8 === "float32" || r instanceof Int32Array && t8 === "int32" || r instanceof Uint8Array && t8 === "bool";
}
function nc(r, t8) {
  if (t8 === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(r) && (r = Ps(r)), A().getBool("DEBUG") && tw(r, t8), r4(r, t8))
    return r;
  if (t8 == null || t8 === "float32" || t8 === "complex64")
    return new Float32Array(r);
  if (t8 === "int32")
    return new Int32Array(r);
  if (t8 === "bool") {
    let e = new Uint8Array(r.length);
    for (let o = 0; o < e.length; ++o)
      Math.round(r[o]) !== 0 && (e[o] = 1);
    return e;
  } else
    throw new Error(`Unknown data type ${t8}`);
}
function Wu() {
  return A().platform.now();
}
function o4(r, t8) {
  return A().platform.fetch(r, t8);
}
function tu(r, t8 = "utf-8") {
  return t8 = t8 || "utf-8", A().platform.encode(r, t8);
}
function sc(r, t8 = "utf-8") {
  return t8 = t8 || "utf-8", A().platform.decode(r, t8);
}
function Ot(r) {
  return A().platform.isTypedArray != null ? A().platform.isTypedArray(r) : Qm(r);
}
function Ps(r, t8 = [], e = false) {
  if (t8 == null && (t8 = []), typeof r == "boolean" || typeof r == "number" || typeof r == "string" || Fu(r) || r == null || Ot(r) && e)
    t8.push(r);
  else if (Array.isArray(r) || Ot(r))
    for (let o = 0; o < r.length; ++o)
      Ps(r[o], t8, e);
  else {
    let o = -1;
    for (let n of Object.keys(r))
      /^([1-9]+[0-9]*|0)$/.test(n) && (o = Math.max(o, Number(n)));
    for (let n = 0; n <= o; n++)
      Ps(r[n], t8, e);
  }
  return t8;
}
var ed = class {
  constructor(t8, e) {
    this.backendTimer = t8, this.logger = e, e == null && (this.logger = new dw());
  }
  profileKernel(t8, e, o) {
    let n, s = () => {
      n = o();
    }, a, i = Wu();
    if (this.backendTimer.timerAvailable())
      a = this.backendTimer.time(s);
    else {
      s();
      for (let u of n)
        u.dataSync();
      a = Promise.resolve({ kernelMs: Wu() - i });
    }
    if (A().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let u = 0; u < n.length; u++) {
        let c = n[u];
        c.data().then((l) => {
          n4(l, c.dtype, t8);
        });
      }
    return { kernelName: t8, outputs: n, inputs: e, timeMs: a.then((u) => u.kernelMs), extraInfo: a.then((u) => u.getExtraProfileInfo != null ? u.getExtraProfileInfo() : "") };
  }
  logKernelProfile(t8) {
    let { kernelName: e, outputs: o, timeMs: n, inputs: s, extraInfo: a } = t8;
    o.forEach((i) => {
      Promise.all([i.data(), n, a]).then((p) => {
        this.logger.logKernelProfile(e, i, p[0], p[1], s, p[2]);
      });
    });
  }
};
function n4(r, t8, e) {
  if (t8 !== "float32")
    return false;
  for (let o = 0; o < r.length; o++) {
    let n = r[o];
    if (isNaN(n) || !isFinite(n))
      return console.warn(`Found ${n} in the result of '${e}'`), true;
  }
  return false;
}
var dw = class {
  logKernelProfile(t8, e, o, n, s, a) {
    let i = typeof n == "number" ? Au(`${n}ms`, 9) : n.error, p = Au(t8, 25), u = e.rank, c = e.size, l = Au(e.shape.toString(), 14), m = "";
    for (let d in s) {
      let f = s[d];
      if (f != null) {
        let h = f.shape || e.shape, g = h.length;
        m += `${d}: ${g}D ${g > 0 ? h : ""} `;
      }
    }
    console.log(`%c${p}	%c${i}	%c${u}D ${l}	%c${c}	%c${m}	%c${a}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
};
function H0(r, t8, e) {
  let o = {}, n = {};
  for (let p = 0; p < t8.length; p++)
    o[t8[p].id] = true;
  for (let p = 0; p < r.length; p++) {
    let u = r[p], c = u.inputs;
    for (let l in c) {
      let m = c[l], d = false;
      for (let f = 0; f < t8.length; f++)
        if (o[m.id]) {
          u.outputs.forEach((h) => o[h.id] = true), d = true, n[u.id] = true;
          break;
        }
      if (d)
        break;
    }
  }
  let s = {};
  s[e.id] = true;
  let a = {};
  for (let p = r.length - 1; p >= 0; p--) {
    let u = r[p], c = u.inputs;
    for (let l = 0; l < u.outputs.length; l++)
      if (s[u.outputs[l].id]) {
        for (let m in c)
          s[c[m].id] = true, a[u.id] = true;
        break;
      }
  }
  let i = [];
  for (let p = 0; p < r.length; p++) {
    let u = r[p];
    if (n[u.id] && a[u.id]) {
      let c = {};
      for (let m in u.inputs) {
        let d = u.inputs[m];
        o[d.id] && (c[m] = d);
      }
      let l = Object.assign({}, u);
      l.inputs = c, l.outputs = u.outputs, i.push(l);
    }
  }
  return i;
}
function K0(r, t8, e, o) {
  for (let n = t8.length - 1; n >= 0; n--) {
    let s = t8[n], a = [];
    if (s.outputs.forEach((p) => {
      let u = r[p.id];
      u != null ? a.push(u) : a.push(null);
    }), s.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);
    let i = s.gradient(a);
    for (let p in s.inputs) {
      if (!(p in i))
        throw new Error(`Cannot backprop through input ${p}. Available gradients found: ${Object.keys(i)}.`);
      let u = e(() => i[p]());
      if (u.dtype !== "float32")
        throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${p} must have 'float32' dtype, but has '${u.dtype}'`);
      let c = s.inputs[p];
      if (!Cr(u.shape, c.shape))
        throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${p}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);
      if (r[c.id] == null)
        r[c.id] = u;
      else {
        let l = r[c.id];
        r[c.id] = o(l, u), l.dispose();
      }
    }
  }
}
var q0 = 20;
var bl = 3;
var fw = 7;
function j0(r, t8, e, o) {
  let n = js(t8), s = s4(r, t8, e, n), a = t8.length, i = td(r, t8, e, n, s), p = ["Tensor"];
  return o && (p.push(`  dtype: ${e}`), p.push(`  rank: ${a}`), p.push(`  shape: [${t8}]`), p.push("  values:")), p.push(i.map((u) => "    " + u).join(`
`)), p.join(`
`);
}
function s4(r, t8, e, o) {
  let n = He(t8), s = o[o.length - 1], a = new Array(s).fill(0), i = t8.length, p = e === "complex64" ? wl(r) : r;
  if (i > 1)
    for (let u = 0; u < n / s; u++) {
      let c = u * s;
      for (let l = 0; l < s; l++)
        a[l] = Math.max(a[l], Cl(p[c + l], 0, e).length);
    }
  return a;
}
function Cl(r, t8, e) {
  let o;
  return Array.isArray(r) ? o = `${parseFloat(r[0].toFixed(fw))} + ${parseFloat(r[1].toFixed(fw))}j` : Vo(r) ? o = `'${r}'` : e === "bool" ? o = X0(r) : o = parseFloat(r.toFixed(fw)).toString(), Au(o, t8);
}
function X0(r) {
  return r === 0 ? "false" : "true";
}
function td(r, t8, e, o, n, s = true) {
  let a = e === "complex64" ? 2 : 1, i = t8[0], p = t8.length;
  if (p === 0) {
    if (e === "complex64") {
      let h = wl(r);
      return [Cl(h[0], 0, e)];
    }
    return e === "bool" ? [X0(r[0])] : [r[0].toString()];
  }
  if (p === 1) {
    if (i > q0) {
      let g = bl * a, x = Array.from(r.slice(0, g)), b = Array.from(r.slice((i - bl) * a, i * a));
      return e === "complex64" && (x = wl(x), b = wl(b)), ["[" + x.map((C, S) => Cl(C, n[S], e)).join(", ") + ", ..., " + b.map((C, S) => Cl(C, n[i - bl + S], e)).join(", ") + "]"];
    }
    return ["[" + (e === "complex64" ? wl(r) : Array.from(r)).map((g, x) => Cl(g, n[x], e)).join(", ") + "]"];
  }
  let u = t8.slice(1), c = o.slice(1), l = o[0] * a, m = [];
  if (i > q0) {
    for (let h = 0; h < bl; h++) {
      let g = h * l, x = g + l;
      m.push(...td(r.slice(g, x), u, e, c, n, false));
    }
    m.push("...");
    for (let h = i - bl; h < i; h++) {
      let g = h * l, x = g + l;
      m.push(...td(r.slice(g, x), u, e, c, n, h === i - 1));
    }
  } else
    for (let h = 0; h < i; h++) {
      let g = h * l, x = g + l;
      m.push(...td(r.slice(g, x), u, e, c, n, h === i - 1));
    }
  let d = p === 2 ? "," : "";
  m[0] = "[" + (i > 0 ? m[0] + d : "");
  for (let h = 1; h < m.length - 1; h++)
    m[h] = " " + m[h] + d;
  let f = `,
`;
  for (let h = 2; h < p; h++)
    f += `
`;
  return m[m.length - 1] = " " + m[m.length - 1] + "]" + (s ? "" : f), m;
}
function wl(r) {
  let t8 = [];
  for (let e = 0; e < r.length; e += 2)
    t8.push([r[e], r[e + 1]]);
  return t8;
}
var tt = class {
  constructor(t8, e, o) {
    if (this.dtype = e, this.shape = t8.slice(), this.size = He(t8), o != null) {
      let n = o.length;
      $(n === this.size, () => `Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (e === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = o || Xm(e, this.size), this.strides = js(t8);
  }
  set(t8, ...e) {
    e.length === 0 && (e = [0]), $(e.length === this.rank, () => `The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);
    let o = this.locToIndex(e);
    this.values[o] = t8;
  }
  get(...t8) {
    t8.length === 0 && (t8 = [0]);
    let e = 0;
    for (let n of t8) {
      if (n < 0 || n >= this.shape[e]) {
        let s = `Requested out of range element at ${t8}.   Buffer shape=${this.shape}`;
        throw new Error(s);
      }
      e++;
    }
    let o = t8[t8.length - 1];
    for (let n = 0; n < t8.length - 1; ++n)
      o += this.strides[n] * t8[n];
    return this.values[o];
  }
  locToIndex(t8) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return t8[0];
    let e = t8[t8.length - 1];
    for (let o = 0; o < t8.length - 1; ++o)
      e += this.strides[o] * t8[o];
    return e;
  }
  indexToLoc(t8) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [t8];
    let e = new Array(this.shape.length);
    for (let o = 0; o < e.length - 1; ++o)
      e[o] = Math.floor(t8 / this.strides[o]), t8 -= e[o] * this.strides[o];
    return e[e.length - 1] = t8, e;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return Os().makeTensor(this.values, this.shape, this.dtype);
  }
};
var Os = null;
var ac = null;
var a4 = null;
function Y0(r) {
  Os = r;
}
function Q0(r) {
  ac = r;
}
function Z0(r) {
  a4 = r;
}
var ut = class {
  constructor(t8, e, o, n) {
    this.kept = false, this.isDisposedInternal = false, this.shape = t8.slice(), this.dtype = e || "float32", this.size = He(t8), this.strides = js(t8), this.dataId = o, this.id = n, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    let t8 = await this.data();
    return ac.buffer(this.shape, this.dtype, t8);
  }
  bufferSync() {
    return ac.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    let t8 = await this.data();
    return Du(this.shape, t8, this.dtype === "complex64");
  }
  arraySync() {
    return Du(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    let t8 = Os().read(this.dataId);
    if (this.dtype === "string") {
      let e = await t8;
      try {
        return e.map((o) => sc(o));
      } catch (o) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return t8;
  }
  dataToGPU(t8) {
    return this.throwIfDisposed(), Os().readToGPU(this.dataId, t8);
  }
  dataSync() {
    this.throwIfDisposed();
    let t8 = Os().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return t8.map((e) => sc(e));
      } catch (e) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return t8;
  }
  async bytes() {
    this.throwIfDisposed();
    let t8 = await Os().read(this.dataId);
    return this.dtype === "string" ? t8 : new Uint8Array(t8.buffer);
  }
  dispose() {
    this.isDisposed || (this.kerasMask && this.kerasMask.dispose(), Os().disposeTensor(this), this.isDisposedInternal = true);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  print(t8 = false) {
    return ac.print(this, t8);
  }
  clone() {
    return this.throwIfDisposed(), ac.clone(this);
  }
  toString(t8 = false) {
    let e = this.dataSync();
    return j0(e, this.shape, this.dtype, t8);
  }
  cast(t8) {
    return this.throwIfDisposed(), ac.cast(this, t8);
  }
  variable(t8 = true, e, o) {
    return this.throwIfDisposed(), Os().makeVariable(this, t8, e, o);
  }
};
Object.defineProperty(ut, Symbol.hasInstance, { value: (r) => !!r && r.data != null && r.dataSync != null && r.throwIfDisposed != null });
function i4() {
  return gl("Tensor", () => ut);
}
i4();
var oi = class extends ut {
  constructor(t8, e, o, n) {
    super(t8.shape, t8.dtype, t8.dataId, n), this.trainable = e, this.name = o;
  }
  assign(t8) {
    if (t8.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${t8.dtype}) and previous value (${this.dtype}) must match`);
    if (!Cr(t8.shape, this.shape))
      throw new Error(`shape of the new value (${t8.shape}) and previous value (${this.shape}) must match`);
    Os().disposeTensor(this), this.dataId = t8.dataId, Os().incRef(this, null);
  }
  dispose() {
    Os().disposeVariable(this), this.isDisposedInternal = true;
  }
};
Object.defineProperty(oi, Symbol.hasInstance, { value: (r) => r instanceof ut && r.assign != null && r.assign instanceof Function });
var ek = {};
qe(ek, { assertTypesMatch: () => Cw, getTensorsInContainer: () => Sl, isTensorInList: () => p4, makeTypesMatch: () => Oe });
var hw;
(function(r) {
  r.R0 = "R0", r.R1 = "R1", r.R2 = "R2", r.R3 = "R3", r.R4 = "R4", r.R5 = "R5", r.R6 = "R6";
})(hw || (hw = {}));
var gw;
(function(r) {
  r.float32 = "float32", r.int32 = "int32", r.bool = "int32", r.complex64 = "complex64";
})(gw || (gw = {}));
var xw;
(function(r) {
  r.float32 = "float32", r.int32 = "int32", r.bool = "bool", r.complex64 = "complex64";
})(xw || (xw = {}));
var yw;
(function(r) {
  r.float32 = "float32", r.int32 = "float32", r.bool = "float32", r.complex64 = "complex64";
})(yw || (yw = {}));
var bw;
(function(r) {
  r.float32 = "complex64", r.int32 = "complex64", r.bool = "complex64", r.complex64 = "complex64";
})(bw || (bw = {}));
var u4 = { float32: yw, int32: gw, bool: xw, complex64: bw };
function dt(r, t8) {
  if (r === "string" || t8 === "string") {
    if (r === "string" && t8 === "string")
      return "string";
    throw new Error(`Can not upcast ${r} with ${t8}`);
  }
  return u4[r][t8];
}
function ni(r) {
  return dt(r, "int32");
}
function rd(r) {
  return r != null && typeof r == "object" && "texture" in r && r.texture instanceof WebGLTexture;
}
function od(r) {
  return typeof GPUBuffer != "undefined" && r != null && typeof r == "object" && "buffer" in r && r.buffer instanceof GPUBuffer;
}
function Oe(r, t8) {
  if (r.dtype === t8.dtype)
    return [r, t8];
  let e = dt(r.dtype, t8.dtype);
  return [r.cast(e), t8.cast(e)];
}
function Cw(r, t8) {
  $(r.dtype === t8.dtype, () => `The dtypes of the first(${r.dtype}) and second(${t8.dtype}) input must match`);
}
function p4(r, t8) {
  return t8.some((e) => e.id === r.id);
}
function Sl(r) {
  let t8 = [];
  return J0(r, t8, /* @__PURE__ */ new Set()), t8;
}
function J0(r, t8, e) {
  if (r == null)
    return;
  if (r instanceof ut) {
    t8.push(r);
    return;
  }
  if (!c4(r))
    return;
  let o = r;
  for (let n in o) {
    let s = o[n];
    e.has(s) || (e.add(s), J0(s, t8, e));
  }
}
function c4(r) {
  return Array.isArray(r) || typeof r == "object";
}
function ww(r) {
  return r.kernelName != null;
}
var nd = class {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null, get kernelNames() {
      return Array.from(new Set(this.kernels.map((t8) => t8.name)));
    } };
  }
  dispose() {
    for (let t8 in this.registeredVariables)
      this.registeredVariables[t8].dispose();
  }
};
var ru = class {
  constructor(t8) {
    this.ENV = t8, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new nd();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    let t8 = this.getSortedBackends();
    for (let e = 0; e < t8.length; e++) {
      let o = t8[e];
      if (await this.initializeBackend(o).success) {
        await this.setBackend(o);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      let { name: t8, asyncInit: e } = this.initializeBackendsAndReturnBest();
      if (e)
        throw new Error(`The highest priority backend '${t8}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(t8);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(t8) {
    if (!(t8 in this.registry))
      if (t8 in this.registryFactory) {
        let { asyncInit: e } = this.initializeBackend(t8);
        if (e)
          return null;
      } else
        return null;
    return this.registry[t8];
  }
  findBackendFactory(t8) {
    return t8 in this.registryFactory ? this.registryFactory[t8].factory : null;
  }
  registerBackend(t8, e, o = 1) {
    return t8 in this.registryFactory ? (Ia(`${t8} backend was already registered. Reusing existing backend factory.`), false) : (this.registryFactory[t8] = { factory: e, priority: o }, true);
  }
  async setBackend(t8) {
    if (this.registryFactory[t8] == null)
      throw new Error(`Backend name '${t8}' not found in registry`);
    if (this.backendName = t8, this.registry[t8] == null) {
      this.backendInstance = null;
      let { success: e, asyncInit: o } = this.initializeBackend(t8);
      if (!(o ? await e : e))
        return false;
    }
    return this.backendInstance = this.registry[t8], this.setupRegisteredKernels(), this.profiler = new ed(this.backendInstance), true;
  }
  setupRegisteredKernels() {
    Ym(this.backendName).forEach((e) => {
      e.setupFunc != null && e.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(t8) {
    Ym(t8).forEach((o) => {
      o.disposeFunc != null && o.disposeFunc(this.registry[t8]);
    });
  }
  initializeBackend(t8) {
    let e = this.registryFactory[t8];
    if (e == null)
      throw new Error(`Cannot initialize backend ${t8}, no registration found.`);
    try {
      let o = e.factory();
      if (o && !(o instanceof ao) && typeof o.then == "function") {
        let n = ++this.pendingBackendInitId, s = o.then((a) => n < this.pendingBackendInitId ? false : (this.registry[t8] = a, this.pendingBackendInit = null, true)).catch((a) => (n < this.pendingBackendInitId || (this.pendingBackendInit = null, Ia(`Initialization of backend ${t8} failed`), Ia(a.stack || a.message)), false));
        return this.pendingBackendInit = s, { success: s, asyncInit: true };
      } else
        return this.registry[t8] = o, { success: true, asyncInit: false };
    } catch (o) {
      return Ia(`Initialization of backend ${t8} failed`), Ia(o.stack || o.message), { success: false, asyncInit: false };
    }
  }
  removeBackend(t8) {
    if (!(t8 in this.registryFactory))
      throw new Error(`${t8} backend not found in registry`);
    this.backendName === t8 && this.pendingBackendInit != null && this.pendingBackendInitId++, t8 in this.registry && (this.disposeRegisteredKernels(t8), this.registry[t8].dispose(), delete this.registry[t8]), delete this.registryFactory[t8], this.backendName === t8 && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((t8, e) => this.registryFactory[e].priority - this.registryFactory[t8].priority);
  }
  initializeBackendsAndReturnBest() {
    let t8 = this.getSortedBackends();
    for (let e = 0; e < t8.length; e++) {
      let o = t8[e], { success: n, asyncInit: s } = this.initializeBackend(o);
      if (s || n)
        return { name: o, asyncInit: s };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(t8, e) {
    let o = this.state.tensorInfo.get(e), n = o.backend, s = this.readSync(e), a = n.refCount(e);
    n.disposeData(e, true), o.backend = t8, t8.move(e, s, o.shape, o.dtype, a), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(t8, e) {
    let o = null;
    if (e == null) {
      if (typeof t8 != "function")
        throw new Error("Please provide a function to tidy()");
      e = t8;
    } else {
      if (typeof t8 != "string" && !(t8 instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof e != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      o = t8;
    }
    let n;
    return this.scopedRun(() => this.startScope(o), () => this.endScope(n), () => (n = e(), n instanceof Promise && console.error("Cannot return a Promise inside of tidy."), n));
  }
  scopedRun(t8, e, o) {
    t8();
    try {
      let n = o();
      return e(), n;
    } catch (n) {
      throw e(), n;
    }
  }
  nextTensorId() {
    return ru.nextTensorId++;
  }
  nextVariableId() {
    return ru.nextVariableId++;
  }
  clone(t8) {
    let e = T.runKernel(wo, { x: t8 }), o = { x: t8 }, n = (a) => ({ x: () => {
      let i = "float32", p = { x: a }, u = { dtype: i };
      return T.runKernel(bo, p, u);
    } }), s = [];
    return this.addTapeNode(this.state.activeScope.name, o, [e], n, s, {}), e;
  }
  runKernel(t8, e, o) {
    if (this.backendName == null && this.backend, !(tc(t8, this.backendName) != null))
      throw new Error(`Kernel '${t8}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: t8, inputs: e, attrs: o });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(t8, e, o) {
    let n = this.backend.numDataIds(), s = 0;
    o.forEach((p) => {
      s += p.dtype === "complex64" ? 3 : 1;
    });
    let a = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = n - e - s - a;
    if (i > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t8}'`);
  }
  runKernelFunc(t8) {
    let e, o = [], n = this.isTapeOn(), s = this.state.numBytes, a = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let i;
    this.backendName == null && this.backend;
    let p, u = ww(t8) ? t8.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (ww(t8)) {
      let { kernelName: f, inputs: h, attrs: g } = t8;
      this.backendName == null && this.backend;
      let x = tc(f, this.backendName);
      $(x != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), i = () => {
        let b = this.backend.numDataIds();
        p = x.kernelFunc({ inputs: h, attrs: g, backend: this.backend });
        let C = Array.isArray(p) ? p : [p];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, b, C);
        let S = C.map((k) => k.rank != null ? k : this.makeTensorFromTensorInfo(k));
        if (n) {
          let k = this.getTensorsForGradient(f, h, S);
          o = this.saveTensorsForBackwardMode(k);
        }
        return S;
      };
    } else {
      let { forwardFunc: f } = t8, h = (g) => {
        n && (o = g.map((x) => this.keep(this.clone(x))));
      };
      i = () => {
        let g = this.backend.numDataIds();
        p = this.tidy(() => f(this.backend, h));
        let x = Array.isArray(p) ? p : [p];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(u, g, x), x;
      };
    }
    let { inputs: c, attrs: l } = t8, m = ww(t8) ? null : t8.backwardsFunc, d;
    return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      !this.ENV.getBool("DEBUG") && !this.state.profiling ? e = i() : (d = this.profiler.profileKernel(u, c, () => i()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(d), e = d.outputs);
    }), n && this.addTapeNode(u, c, e, m, o, l), this.state.profiling && this.state.activeProfile.kernels.push({ name: u, bytesAdded: this.state.numBytes - s, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - a, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(c).map((f) => c[f] != null ? c[f].shape : null), outputShapes: e.map((f) => f.shape), kernelTimeMs: d.timeMs, extraInfo: d.extraInfo }), Array.isArray(p) ? e : e[0];
  }
  saveTensorsForBackwardMode(t8) {
    return t8.map((o) => this.keep(this.clone(o)));
  }
  getTensorsForGradient(t8, e, o) {
    let n = iw(t8);
    if (n != null) {
      let s = n.inputsToSave || [], a = n.outputsToSave || [], i;
      n.saveAllInputs ? ($(Array.isArray(e), () => "saveAllInputs is true, expected inputs to be an array."), i = Object.keys(e).map((u) => e[u])) : i = s.map((u) => e[u]);
      let p = o.filter((u, c) => a[c]);
      return i.concat(p);
    }
    return [];
  }
  makeTensor(t8, e, o, n) {
    if (t8 == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    o = o || "float32", n = n || this.backend;
    let s = t8;
    o === "string" && Vo(t8[0]) && (s = t8.map((p) => tu(p)));
    let a = n.write(s, e, o), i = new ut(e, o, a, this.nextTensorId());
    if (this.trackTensor(i, n), o === "string") {
      let p = this.state.tensorInfo.get(a), u = ow(s);
      this.state.numBytes += u - p.bytes, p.bytes = u;
    }
    return i;
  }
  makeTensorFromDataId(t8, e, o, n) {
    o = o || "float32";
    let s = { dataId: t8, shape: e, dtype: o };
    return this.makeTensorFromTensorInfo(s, n);
  }
  makeTensorFromTensorInfo(t8, e) {
    let { dataId: o, shape: n, dtype: s } = t8, a = new ut(n, s, o, this.nextTensorId());
    return this.trackTensor(a, e), a;
  }
  makeVariable(t8, e = true, o, n) {
    o = o || this.nextVariableId().toString(), n != null && n !== t8.dtype && (t8 = t8.cast(n));
    let s = new oi(t8, e, o, this.nextTensorId());
    if (this.state.registeredVariables[s.name] != null)
      throw new Error(`Variable with name ${s.name} was already registered`);
    return this.state.registeredVariables[s.name] = s, this.incRef(s, this.backend), s;
  }
  trackTensor(t8, e) {
    this.state.numTensors++, t8.dtype === "string" && this.state.numStringTensors++;
    let o = 0;
    t8.dtype !== "complex64" && t8.dtype !== "string" && (o = t8.size * jp(t8.dtype)), this.state.numBytes += o, this.state.tensorInfo.has(t8.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(t8.dataId, { backend: e || this.backend, dtype: t8.dtype, shape: t8.shape, bytes: o })), t8 instanceof oi || this.track(t8);
  }
  incRef(t8, e) {
    this.trackTensor(t8, e), this.backend.incRef(t8.dataId);
  }
  removeDataId(t8, e) {
    this.state.tensorInfo.has(t8) && this.state.tensorInfo.get(t8).backend === e && (this.state.tensorInfo.delete(t8), this.state.numDataBuffers--);
  }
  disposeTensor(t8) {
    if (!this.state.tensorInfo.has(t8.dataId))
      return;
    let e = this.state.tensorInfo.get(t8.dataId);
    if (this.state.numTensors--, t8.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= e.bytes), t8.dtype !== "complex64" && t8.dtype !== "string") {
      let o = t8.size * jp(t8.dtype);
      this.state.numBytes -= o;
    }
    e.backend.disposeData(t8.dataId) && this.removeDataId(t8.dataId, e.backend);
  }
  disposeVariables() {
    for (let t8 in this.state.registeredVariables) {
      let e = this.state.registeredVariables[t8];
      this.disposeVariable(e);
    }
  }
  disposeVariable(t8) {
    this.disposeTensor(t8), this.state.registeredVariables[t8.name] != null && delete this.state.registeredVariables[t8.name];
  }
  memory() {
    let t8 = this.backend.memory();
    return t8.numTensors = this.state.numTensors, t8.numDataBuffers = this.state.numDataBuffers, t8.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t8.unreliable = true, t8.reasons == null && (t8.reasons = []), t8.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t8;
  }
  async profile(t8) {
    this.state.profiling = true;
    let e = this.state.numBytes, o = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await t8(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((n) => n.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - e, this.state.activeProfile.newTensors = this.state.numTensors - o;
    for (let n of this.state.activeProfile.kernels)
      n.kernelTimeMs = await n.kernelTimeMs, n.extraInfo = await n.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(t8, e, o, n, s, a) {
    let i = { id: this.state.nextTapeNodeId++, kernelName: t8, inputs: e, outputs: o, saved: s }, p = iw(t8);
    p != null && (n = p.gradFunc), n != null && (i.gradient = (u) => (u = u.map((c, l) => {
      if (c == null) {
        let m = o[l], d = Yp(m.size, m.dtype);
        return this.makeTensor(d, m.shape, m.dtype);
      }
      return c;
    }), n(u.length > 1 ? u : u[0], s, a))), this.state.activeTape.push(i);
  }
  keep(t8) {
    return t8.kept = true, t8;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(t8) {
    let e = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    t8 && (e.name = t8), this.state.scopeStack.push(e), this.state.activeScope = e;
  }
  endScope(t8) {
    let e = Sl(t8), o = new Set(e.map((s) => s.id));
    for (let s = 0; s < this.state.activeScope.track.length; s++) {
      let a = this.state.activeScope.track[s];
      !a.kept && !o.has(a.id) && a.dispose();
    }
    let n = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], e.forEach((s) => {
      !s.kept && s.scopeId === n.id && this.track(s);
    });
  }
  gradients(t8, e, o, n = false) {
    if ($(e.length > 0, () => "gradients() received an empty list of xs."), o != null && o.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);
    let s = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", t8));
    $(s instanceof ut, () => "The result y returned by f() must be a tensor.");
    let a = H0(this.state.activeTape, e, s);
    if (!n && a.length === 0 && e.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      let i = {};
      i[s.id] = o == null ? l4(s.shape) : o, K0(i, a, (u) => this.tidy(u), m4);
      let p = e.map((u) => i[u.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((u) => {
        for (let c of u.saved)
          c.dispose();
      }), this.state.activeTape = null), { value: s, grads: p };
    });
  }
  customGrad(t8) {
    return $(qs(t8), () => "The f passed in customGrad(f) must be a function."), (...e) => {
      $(e.every((i) => i instanceof ut), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let o, n = {};
      e.forEach((i, p) => {
        n[p] = i;
      });
      let s = (i, p) => (o = t8(...e, p), $(o.value instanceof ut, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), $(qs(o.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), o.value), a = (i, p) => {
        let u = o.gradFunc(i, p), c = Array.isArray(u) ? u : [u];
        $(c.length === e.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), $(c.every((m) => m instanceof ut), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        let l = {};
        return c.forEach((m, d) => {
          l[d] = () => m;
        }), l;
      };
      return this.runKernelFunc({ forwardFunc: s, backwardsFunc: a, inputs: n });
    };
  }
  readSync(t8) {
    return this.state.tensorInfo.get(t8).backend.readSync(t8);
  }
  read(t8) {
    return this.state.tensorInfo.get(t8).backend.read(t8);
  }
  readToGPU(t8, e) {
    return this.state.tensorInfo.get(t8).backend.readToGPU(t8, e);
  }
  async time(t8) {
    let e = Wu(), o = await this.backend.time(t8);
    return o.wallMs = Wu() - e, o;
  }
  track(t8) {
    return this.state.activeScope != null && (t8.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t8)), t8;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new nd();
    for (let t8 in this.registry)
      this.disposeRegisteredKernels(t8), this.registry[t8].dispose(), delete this.registry[t8];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
};
ru.nextTensorId = 0;
ru.nextVariableId = 0;
function l4(r) {
  let t8 = fl(He(r), "float32");
  return T.makeTensor(t8, r, "float32");
}
function Sw() {
  let r = aw();
  if (r._tfengine == null) {
    let t8 = new hl(r);
    r._tfengine = new ru(t8);
  }
  return _0(r._tfengine.ENV), Y0(() => r._tfengine), r._tfengine;
}
var T = Sw();
function m4(r, t8) {
  let e = { a: r, b: t8 };
  return T.runKernel(uo, e);
}
var ou = {};
qe(ou, { isBrowser: () => vw, isMobile: () => h4, mockIsMobile: () => f4 });
function d4() {
  return typeof navigator != "undefined" && navigator != null;
}
var Iw;
function f4(r) {
  Iw = r;
}
function h4(r) {
  if (Iw !== void 0)
    return Iw;
  if (r || d4()) {
    if (r || (r = navigator), r.product === "ReactNative")
      return true;
    let t8 = r.userAgent || r.vendor || (typeof window != "undefined" ? window.opera : "");
    if (!t8) {
      let e = r;
      return e.userAgentData && e.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t8) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t8.substr(0, 4));
  }
  return false;
}
function vw() {
  return typeof window != "undefined" && window.document != null || typeof WorkerGlobalScope != "undefined";
}
var $r = A();
$r.registerFlag("DEBUG", () => false, (r) => {
  r && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
$r.registerFlag("IS_BROWSER", () => vw());
$r.registerFlag("IS_NODE", () => typeof process != "undefined" && typeof process.versions != "undefined" && typeof process.versions.node != "undefined");
$r.registerFlag("IS_CHROME", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
$r.registerFlag("IS_SAFARI", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Safari/.test(navigator.userAgent) && /Apple/.test(navigator.vendor));
$r.registerFlag("PROD", () => false);
$r.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => $r.getBool("DEBUG"));
$r.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => true);
$r.registerFlag("IS_TEST", () => false);
$r.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => $r.getBool("DEBUG"));
$r.registerFlag("WRAP_TO_IMAGEBITMAP", () => false);
$r.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => false);
$r.registerFlag("USE_SETTIMEOUTCUSTOM", () => false);
function ir(r, t8) {
  let e = r;
  if (Ot(r))
    return t8 === "string" ? [] : [r.length];
  if (rd(r)) {
    let n = r.channels || "RGBA";
    return [r.height, r.width * n.length];
  } else if (od(r))
    return [r.buffer.size / (t8 == null ? 4 : jp(t8))];
  if (!Array.isArray(r))
    return [];
  let o = [];
  for (; Array.isArray(e) || Ot(e) && t8 !== "string"; )
    o.push(e.length), e = e[0];
  return Array.isArray(r) && A().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && rk(r, o, []), o;
}
function rk(r, t8, e) {
  if (e = e || [], !Array.isArray(r) && !Ot(r)) {
    $(t8.length === 0, () => `Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t8[0]} elements`);
    return;
  }
  $(t8.length > 0, () => `Element arr[${e.join("][")}] should be a primitive, but is an array of ${r.length} elements`), $(r.length === t8[0], () => `Element arr[${e.join("][")}] should have ${t8[0]} elements, but has ${r.length} elements`);
  let o = t8.slice(1);
  for (let n = 0; n < r.length; ++n)
    rk(r[n], o, e.concat(n));
}
function tk(r, t8, e, o) {
  if (r !== "string_or_numeric") {
    if (r == null)
      throw new Error("Expected dtype cannot be null.");
    if (r !== "numeric" && r !== t8 || r === "numeric" && t8 === "string")
      throw new Error(`Argument '${e}' passed to '${o}' must be ${r} tensor, but got ${t8} tensor`);
  }
}
function v(r, t8, e, o = "numeric") {
  if (r instanceof ut)
    return tk(o, r.dtype, t8, e), r;
  let n = Ri(r);
  if (n !== "string" && ["bool", "int32", "float32"].indexOf(o) >= 0 && (n = o), tk(o, n, t8, e), r == null || !Ot(r) && !Array.isArray(r) && typeof r != "number" && typeof r != "boolean" && typeof r != "string") {
    let p = r == null ? "null" : r.constructor.name;
    throw new Error(`Argument '${t8}' passed to '${e}' must be a Tensor or TensorLike, but got '${p}'`);
  }
  let s = ir(r, n);
  !Ot(r) && !Array.isArray(r) && (r = [r]);
  let i = n !== "string" ? nc(r, n) : Ps(r, [], true);
  return T.makeTensor(i, s, n);
}
function si(r, t8, e, o = "numeric") {
  if (!Array.isArray(r))
    throw new Error(`Argument ${t8} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return r.map((s, a) => v(s, `${t8}[${a}]`, e, o));
}
var kw = "__op";
function N(r) {
  let t8 = Object.keys(r);
  if (t8.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t8.length} keys.`);
  let e = t8[0], o = r[e];
  e.endsWith("_") && (e = e.substring(0, e.length - 1)), e = e + kw;
  let n = (...s) => {
    T.startScope(e);
    try {
      let a = o(...s);
      return Fu(a) && console.error("Cannot return a Promise inside of tidy."), T.endScope(a), a;
    } catch (a) {
      throw T.endScope(null), a;
    }
  };
  return Object.defineProperty(n, "name", { value: e, configurable: true }), n;
}
function g4(r, t8) {
  let e = v(r, "real", "complex"), o = v(t8, "imag", "complex");
  yt(e.shape, o.shape, `real and imag shapes, ${e.shape} and ${o.shape}, must match in call to tf.complex().`);
  let n = { real: e, imag: o };
  return T.runKernel(Fi, n);
}
var Er = N({ complex_: g4 });
function Sr(r, t8, e, o) {
  if (o == null)
    o = Ri(r);
  else if (o === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (od(r) || rd(r)) {
    if (o !== "float32" && o !== "int32")
      throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${o}.`);
    return T.backend.createTensorFromGPUData(r, t8 || e, o);
  }
  if (!Ot(r) && !Array.isArray(r) && typeof r != "number" && typeof r != "boolean" && typeof r != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (t8 != null) {
    wt(t8);
    let n = He(t8), s = He(e);
    $(n === s, () => `Based on the provided shape, [${t8}], the tensor should have ${n} values but has ${s}`);
    for (let a = 0; a < e.length; ++a) {
      let i = e[a], p = a === e.length - 1 ? i !== He(t8.slice(a)) : true;
      $(e[a] === t8[a] || !p, () => `Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t8}). `);
    }
  }
  return !Ot(r) && !Array.isArray(r) && (r = [r]), t8 = t8 || e, r = o !== "string" ? nc(r, o) : Ps(r, [], true), T.makeTensor(r, t8, o);
}
function ur(r, t8, e) {
  let o = ir(r, e);
  return Sr(r, t8, o, e);
}
var Il = { float32: 4, float16: 2, int32: 4, uint16: 2, uint8: 1, bool: 1, complex64: 8 };
var jt = class {
  static join(t8) {
    return new jt(t8).slice();
  }
  constructor(t8) {
    if (this.shards = [], this.previousShardIndex = 0, t8 == null || (t8 instanceof Array || (t8 = [t8]), t8 = t8.map((o) => Ot(o) ? o.buffer : o), t8.length === 0))
      return;
    this.bufferUniformSize = t8[0].byteLength;
    let e = 0;
    for (let o = 0; o < t8.length; o++) {
      let n = t8[o];
      o !== t8.length - 1 && n.byteLength !== this.bufferUniformSize && (this.bufferUniformSize = void 0);
      let s = e + n.byteLength;
      this.shards.push({ buffer: n, start: e, end: s }), e = s;
    }
    this.shards.length === 0 && (this.byteLength = 0), this.byteLength = this.shards[this.shards.length - 1].end;
  }
  slice(t8 = 0, e = this.byteLength) {
    if (this.shards.length === 0)
      return new ArrayBuffer(0);
    if (t8 = isNaN(Number(t8)) ? 0 : t8, e = isNaN(Number(e)) ? 0 : e, t8 = Math.max(0, t8), e = Math.min(this.byteLength, e), e <= t8)
      return new ArrayBuffer(0);
    let o = this.findShardForByte(t8);
    if (o === -1)
      throw new Error(`Could not find start shard for byte ${t8}`);
    let n = e - t8, s = new ArrayBuffer(n), a = new Uint8Array(s), i = 0;
    for (let p = o; p < this.shards.length; p++) {
      let u = this.shards[p], l = t8 + i - u.start, m = i, f = Math.min(e, u.end) - u.start, h = new Uint8Array(u.buffer, l, f - l);
      if (a.set(h, m), i += h.length, e < u.end)
        break;
    }
    return s;
  }
  findShardForByte(t8) {
    if (this.shards.length === 0 || t8 < 0 || t8 >= this.byteLength)
      return -1;
    if (this.bufferUniformSize != null)
      return this.previousShardIndex = Math.floor(t8 / this.bufferUniformSize), this.previousShardIndex;
    function e(n) {
      return t8 < n.start ? -1 : t8 >= n.end ? 1 : 0;
    }
    if (e(this.shards[this.previousShardIndex]) === 0)
      return this.previousShardIndex;
    let o = x4(this.shards, e);
    return o === -1 ? -1 : (this.previousShardIndex = o, this.previousShardIndex);
  }
};
function x4(r, t8) {
  let e = 0, o = r.length;
  for (; e <= o; ) {
    let n = Math.floor((o - e) / 2) + e, s = t8(r[n]);
    if (s === 0)
      return n;
    s < 0 ? o = n : e = n + 1;
  }
  return -1;
}
var sd = 4;
async function nk(r, t8) {
  let e = [], o = [], n = Array.isArray(r) ? r.map((a) => a.name) : Object.keys(r);
  for (let a = 0; a < n.length; ++a) {
    let i = n[a], p = Array.isArray(r) ? r[a].tensor : r[i];
    if (p.dtype !== "float32" && p.dtype !== "int32" && p.dtype !== "bool" && p.dtype !== "string" && p.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${i}': ${p.dtype}`);
    let u = { name: i, shape: p.shape, dtype: p.dtype };
    if (p.dtype === "string") {
      let c = new Promise(async (l) => {
        let m = await p.bytes(), d = m.reduce((g, x) => g + x.length, 0) + sd * m.length, f = new Uint8Array(d), h = 0;
        for (let g = 0; g < m.length; g++) {
          let x = m[g], b = new Uint8Array(new Uint32Array([x.length]).buffer);
          f.set(b, h), h += sd, f.set(x, h), h += x.length;
        }
        l(f);
      });
      o.push(c);
    } else
      o.push(p.data());
    t8 != null && (u.group = t8), e.push(u);
  }
  let s = await Promise.all(o);
  return { data: y4(s), specs: e };
}
function ad(r, t8) {
  let e = new jt(r), o = {}, n, s = 0;
  for (let a of t8) {
    let i = a.name, p = a.dtype, u = a.shape, c = He(u), l;
    if ("quantization" in a) {
      let m = a.quantization;
      if (m.dtype === "uint8" || m.dtype === "uint16") {
        if (!("min" in m && "scale" in m))
          throw new Error(`Weight ${a.name} with quantization ${m.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (m.dtype === "float16") {
        if (p !== "float32")
          throw new Error(`Weight ${a.name} is quantized with ${m.dtype} which only supports weights of type float32 not ${p}.`);
      } else
        throw new Error(`Weight ${a.name} has unknown quantization dtype ${m.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      let d = Il[m.dtype], f = e.slice(s, s + c * d), h = m.dtype === "uint8" ? new Uint8Array(f) : new Uint16Array(f);
      if (p === "float32")
        if (m.dtype === "uint8" || m.dtype === "uint16") {
          l = new Float32Array(h.length);
          for (let g = 0; g < h.length; g++) {
            let x = h[g];
            l[g] = x * m.scale + m.min;
          }
        } else if (m.dtype === "float16")
          n === void 0 && (n = S4()), l = n(h);
        else
          throw new Error(`Unsupported quantization type ${m.dtype} for weight type float32.`);
      else if (p === "int32") {
        if (m.dtype !== "uint8" && m.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${m.dtype} for weight type int32.`);
        l = new Int32Array(h.length);
        for (let g = 0; g < h.length; g++) {
          let x = h[g];
          l[g] = Math.round(x * m.scale + m.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${p}`);
      s += c * d;
    } else if (p === "string") {
      let m = He(a.shape);
      l = [];
      for (let d = 0; d < m; d++) {
        let f = new Uint32Array(e.slice(s, s + sd))[0];
        s += sd;
        let h = new Uint8Array(e.slice(s, s + f));
        l.push(h), s += f;
      }
    } else {
      let m = Il[p], d = e.slice(s, s + c * m);
      if (p === "float32")
        l = new Float32Array(d);
      else if (p === "int32")
        l = new Int32Array(d);
      else if (p === "bool")
        l = new Uint8Array(d);
      else if (p === "complex64") {
        l = new Float32Array(d);
        let f = new Float32Array(l.length / 2), h = new Float32Array(l.length / 2);
        for (let b = 0; b < f.length; b++)
          f[b] = l[b * 2], h[b] = l[b * 2 + 1];
        let g = ur(f, u, "float32"), x = ur(h, u, "float32");
        o[i] = Er(g, x), g.dispose(), x.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${i}': ${p}`);
      s += c * m;
    }
    p !== "complex64" && (o[i] = ur(l, u, p));
  }
  return o;
}
function y4(r) {
  if (r === null)
    throw new Error(`Invalid input value: ${JSON.stringify(r)}`);
  let t8 = 0, e = [];
  r.forEach((s) => {
    if (t8 += s.byteLength, e.push(s.byteLength === s.buffer.byteLength ? s : new s.constructor(s)), !(s instanceof Float32Array || s instanceof Int32Array || s instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`);
  });
  let o = new Uint8Array(t8), n = 0;
  return e.forEach((s) => {
    o.set(new Uint8Array(s.buffer), n), n += s.byteLength;
  }), o.buffer;
}
var Nw = typeof Buffer != "undefined" && (typeof Blob == "undefined" || typeof atob == "undefined" || typeof btoa == "undefined");
function ok(r) {
  return Nw ? Buffer.byteLength(r, "utf8") : new Blob([r]).size;
}
function sk(r) {
  if (Nw)
    return Buffer.from(r).toString("base64");
  let t8 = new Uint8Array(r), e = "";
  for (let o = 0, n = t8.length; o < n; o++)
    e += String.fromCharCode(t8[o]);
  return btoa(e);
}
function ak(r) {
  if (Nw) {
    let o = Buffer.from(r, "base64");
    return o.buffer.slice(o.byteOffset, o.byteOffset + o.byteLength);
  }
  let t8 = atob(r), e = new Uint8Array(t8.length);
  for (let o = 0; o < t8.length; ++o)
    e.set([t8.charCodeAt(o)], o);
  return e.buffer;
}
function ik(r) {
  return jt.join(r);
}
function Tw(r) {
  let t8 = "/";
  for (r = r.trim(); r.endsWith(t8); )
    r = r.slice(0, r.length - 1);
  let e = r.split(t8);
  return e[e.length - 1];
}
function id(r, t8) {
  let e = { modelTopology: r.modelTopology, format: r.format, generatedBy: r.generatedBy, convertedBy: r.convertedBy, weightsManifest: t8 };
  return r.signature != null && (e.signature = r.signature), r.userDefinedMetadata != null && (e.userDefinedMetadata = r.userDefinedMetadata), r.modelInitializer != null && (e.modelInitializer = r.modelInitializer), r.initializerSignature != null && (e.initializerSignature = r.initializerSignature), r.trainingConfig != null && (e.trainingConfig = r.trainingConfig), e;
}
function _w(r, t8, e) {
  let o = { modelTopology: r.modelTopology, format: r.format, generatedBy: r.generatedBy, convertedBy: r.convertedBy };
  if (r.trainingConfig != null && (o.trainingConfig = r.trainingConfig), r.weightsManifest != null) {
    if (!t8)
      throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!e)
      throw new Error("modelJSON has weightsManifest but weightData is null");
    o.weightSpecs = t8, o.weightData = e;
  }
  return r.signature != null && (o.signature = r.signature), r.userDefinedMetadata != null && (o.userDefinedMetadata = r.userDefinedMetadata), r.modelInitializer != null && (o.modelInitializer = r.modelInitializer), r.initializerSignature != null && (o.initializerSignature = r.initializerSignature), o;
}
async function ic(r, t8) {
  let e, o;
  return r.weightsManifest != null && ([e, o] = await t8(r.weightsManifest)), _w(r, e, o);
}
function va(r) {
  if (r.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: /* @__PURE__ */ new Date(), modelTopologyType: "JSON", modelTopologyBytes: r.modelTopology == null ? 0 : ok(JSON.stringify(r.modelTopology)), weightSpecsBytes: r.weightSpecs == null ? 0 : ok(JSON.stringify(r.weightSpecs)), weightDataBytes: r.weightData == null ? 0 : new jt(r.weightData).byteLength };
}
function ud(r) {
  let t8 = [];
  for (let e of r)
    t8.push(...e.weights);
  return t8;
}
function b4() {
  let r = (e) => {
    let o = e << 13, n = 0;
    for (; !(o & 8388608); )
      n -= 8388608, o <<= 1;
    return o &= -8388609, n += 947912704, o | n;
  }, t8 = new Uint32Array(2048);
  t8[0] = 0;
  for (let e = 1; e < 1024; e++)
    t8[e] = r(e);
  for (let e = 1024; e < 2048; e++)
    t8[e] = 939524096 + (e - 1024 << 13);
  return t8;
}
function C4() {
  let r = new Uint32Array(64);
  r[0] = 0, r[31] = 1199570944, r[32] = 2147483648, r[63] = 3347054592;
  for (let t8 = 1; t8 < 31; t8++)
    r[t8] = t8 << 23;
  for (let t8 = 33; t8 < 63; t8++)
    r[t8] = 2147483648 + (t8 - 32 << 23);
  return r;
}
function w4() {
  let r = new Uint32Array(64);
  for (let t8 = 0; t8 < 64; t8++)
    r[t8] = 1024;
  return r[0] = r[32] = 0, r;
}
function S4() {
  let r = b4(), t8 = C4(), e = w4();
  return (o) => {
    let n = new ArrayBuffer(4 * o.length), s = new Uint32Array(n);
    for (let a = 0; a < o.length; a++) {
      let i = o[a], p = r[e[i >> 10] + (i & 1023)] + t8[i >> 10];
      s[a] = p;
    }
    return new Float32Array(n);
  };
}
var ft = class {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return ft.instance == null && (ft.instance = new ft()), ft.instance;
  }
  static registerSaveRouter(t8) {
    ft.getInstance().saveRouters.push(t8);
  }
  static registerLoadRouter(t8) {
    ft.getInstance().loadRouters.push(t8);
  }
  static getSaveHandlers(t8) {
    return ft.getHandlers(t8, "save");
  }
  static getLoadHandlers(t8, e) {
    return ft.getHandlers(t8, "load", e);
  }
  static getHandlers(t8, e, o) {
    let n = [];
    return (e === "load" ? ft.getInstance().loadRouters : ft.getInstance().saveRouters).forEach((a) => {
      let i = a(t8, o);
      i !== null && n.push(i);
    }), n;
  }
};
var uk = (r) => ft.registerSaveRouter(r);
var pk = (r) => ft.registerLoadRouter(r);
var ck = (r) => ft.getSaveHandlers(r);
var lk = (r, t8) => ft.getLoadHandlers(r, t8);
var $w = "tensorflowjs";
var Ew = 1;
var Uu = "models_store";
var nu = "model_info_store";
function mk() {
  if (!A().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  let r = typeof window == "undefined" ? self : window, t8 = r.indexedDB || r.mozIndexedDB || r.webkitIndexedDB || r.msIndexedDB || r.shimIndexedDB;
  if (t8 == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return t8;
}
function Rw(r) {
  let t8 = r.result;
  t8.createObjectStore(Uu, { keyPath: "modelPath" }), t8.createObjectStore(nu, { keyPath: "modelPath" });
}
var ka = class {
  constructor(t8) {
    if (this.indexedDB = mk(), t8 == null || !t8)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = t8;
  }
  async save(t8) {
    if (t8.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, t8);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(t8, e) {
    return new Promise((o, n) => {
      let s = this.indexedDB.open($w, Ew);
      s.onupgradeneeded = () => Rw(s), s.onsuccess = () => {
        let a = s.result;
        if (e == null) {
          let i = a.transaction(Uu, "readonly"), u = i.objectStore(Uu).get(this.modelPath);
          u.onsuccess = () => {
            if (u.result == null)
              return a.close(), n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            o(u.result.modelArtifacts);
          }, u.onerror = (c) => (a.close(), n(u.error)), i.oncomplete = () => a.close();
        } else {
          e.weightData = jt.join(e.weightData);
          let i = va(e), p = a.transaction(nu, "readwrite"), u = p.objectStore(nu), c;
          try {
            c = u.put({ modelPath: this.modelPath, modelArtifactsInfo: i });
          } catch (m) {
            return n(m);
          }
          let l;
          c.onsuccess = () => {
            l = a.transaction(Uu, "readwrite");
            let m = l.objectStore(Uu), d;
            try {
              d = m.put({ modelPath: this.modelPath, modelArtifacts: e, modelArtifactsInfo: i });
            } catch (f) {
              return n(f);
            }
            d.onsuccess = () => o({ modelArtifactsInfo: i }), d.onerror = (f) => {
              u = p.objectStore(nu);
              let h = u.delete(this.modelPath);
              h.onsuccess = () => (a.close(), n(d.error)), h.onerror = (g) => (a.close(), n(d.error));
            };
          }, c.onerror = (m) => (a.close(), n(c.error)), p.oncomplete = () => {
            l == null ? a.close() : l.oncomplete = () => a.close();
          };
        }
      }, s.onerror = (a) => n(s.error);
    });
  }
};
ka.URL_SCHEME = "indexeddb://";
var dk = (r) => A().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(ka.URL_SCHEME) ? I4(r.slice(ka.URL_SCHEME.length)) : null;
ft.registerSaveRouter(dk);
ft.registerLoadRouter(dk);
function I4(r) {
  return new ka(r);
}
function v4(r) {
  return r.startsWith(ka.URL_SCHEME) ? r.slice(ka.URL_SCHEME.length) : r;
}
var pd = class {
  constructor() {
    this.indexedDB = mk();
  }
  async listModels() {
    return new Promise((t8, e) => {
      let o = this.indexedDB.open($w, Ew);
      o.onupgradeneeded = () => Rw(o), o.onsuccess = () => {
        let n = o.result, s = n.transaction(nu, "readonly"), i = s.objectStore(nu).getAll();
        i.onsuccess = () => {
          let p = {};
          for (let u of i.result)
            p[u.modelPath] = u.modelArtifactsInfo;
          t8(p);
        }, i.onerror = (p) => (n.close(), e(i.error)), s.oncomplete = () => n.close();
      }, o.onerror = (n) => e(o.error);
    });
  }
  async removeModel(t8) {
    return t8 = v4(t8), new Promise((e, o) => {
      let n = this.indexedDB.open($w, Ew);
      n.onupgradeneeded = () => Rw(n), n.onsuccess = () => {
        let s = n.result, a = s.transaction(nu, "readwrite"), i = a.objectStore(nu), p = i.get(t8), u;
        p.onsuccess = () => {
          if (p.result == null)
            return s.close(), o(new Error(`Cannot find model with path '${t8}' in IndexedDB.`));
          {
            let c = i.delete(t8), l = () => {
              u = s.transaction(Uu, "readwrite");
              let d = u.objectStore(Uu).delete(t8);
              d.onsuccess = () => e(p.result.modelArtifactsInfo), d.onerror = (f) => o(p.error);
            };
            c.onsuccess = l, c.onerror = (m) => (l(), s.close(), o(p.error));
          }
        }, p.onerror = (c) => (s.close(), o(p.error)), a.oncomplete = () => {
          u == null ? s.close() : u.oncomplete = () => s.close();
        };
      }, n.onerror = (s) => o(n.error);
    });
  }
};
var ai = "/";
var uc = "tensorflowjs_models";
var fk = "info";
var k4 = "model_topology";
var N4 = "weight_specs";
var T4 = "weight_data";
var _4 = "model_metadata";
function hk(r) {
  return { info: [uc, r, fk].join(ai), topology: [uc, r, k4].join(ai), weightSpecs: [uc, r, N4].join(ai), weightData: [uc, r, T4].join(ai), modelMetadata: [uc, r, _4].join(ai) };
}
function gk(r) {
  for (let t8 of Object.values(r))
    window.localStorage.removeItem(t8);
}
function $4(r) {
  let t8 = r.split(ai);
  if (t8.length < 3)
    throw new Error(`Invalid key format: ${r}`);
  return t8.slice(1, t8.length - 1).join(ai);
}
function E4(r) {
  return r.startsWith(Na.URL_SCHEME) ? r.slice(Na.URL_SCHEME.length) : r;
}
var Na = class {
  constructor(t8) {
    if (!A().getBool("IS_BROWSER") || typeof window == "undefined" || typeof window.localStorage == "undefined")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, t8 == null || !t8)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = t8, this.keys = hk(this.modelPath);
  }
  async save(t8) {
    if (t8.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      let e = JSON.stringify(t8.modelTopology), o = JSON.stringify(t8.weightSpecs), n = va(t8), s = jt.join(t8.weightData);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(n)), this.LS.setItem(this.keys.topology, e), this.LS.setItem(this.keys.weightSpecs, o), this.LS.setItem(this.keys.weightData, sk(s));
        let a = { format: t8.format, generatedBy: t8.generatedBy, convertedBy: t8.convertedBy, signature: t8.signature != null ? t8.signature : void 0, userDefinedMetadata: t8.userDefinedMetadata != null ? t8.userDefinedMetadata : void 0, modelInitializer: t8.modelInitializer != null ? t8.modelInitializer : void 0, initializerSignature: t8.initializerSignature != null ? t8.initializerSignature : void 0, trainingConfig: t8.trainingConfig != null ? t8.trainingConfig : void 0 };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(a)), { modelArtifactsInfo: n };
      } catch (a) {
        throw gk(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`);
      }
    }
  }
  async load() {
    let t8 = JSON.parse(this.LS.getItem(this.keys.info));
    if (t8 == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (t8.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    let e = {}, o = JSON.parse(this.LS.getItem(this.keys.topology));
    if (o == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    e.modelTopology = o;
    let n = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (n == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    e.weightSpecs = n;
    let s = this.LS.getItem(this.keys.modelMetadata);
    if (s != null) {
      let i = JSON.parse(s);
      e.format = i.format, e.generatedBy = i.generatedBy, e.convertedBy = i.convertedBy, i.signature != null && (e.signature = i.signature), i.userDefinedMetadata != null && (e.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (e.modelInitializer = i.modelInitializer), i.initializerSignature != null && (e.initializerSignature = i.initializerSignature), i.trainingConfig != null && (e.trainingConfig = i.trainingConfig);
    }
    let a = this.LS.getItem(this.keys.weightData);
    if (a == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return e.weightData = ak(a), e;
  }
};
Na.URL_SCHEME = "localstorage://";
var xk = (r) => A().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(Na.URL_SCHEME) ? R4(r.slice(Na.URL_SCHEME.length)) : null;
ft.registerSaveRouter(xk);
ft.registerLoadRouter(xk);
function R4(r) {
  return new Na(r);
}
var cd = class {
  constructor() {
    $(A().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), $(typeof window == "undefined" || typeof window.localStorage != "undefined", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    let t8 = {}, e = uc + ai, o = ai + fk;
    for (let n = 0; n < this.LS.length; ++n) {
      let s = this.LS.key(n);
      if (s.startsWith(e) && s.endsWith(o)) {
        let a = $4(s);
        t8[a] = JSON.parse(this.LS.getItem(s));
      }
    }
    return t8;
  }
  async removeModel(t8) {
    t8 = E4(t8);
    let e = hk(t8);
    if (this.LS.getItem(e.info) == null)
      throw new Error(`Cannot find model at path '${t8}'`);
    let o = JSON.parse(this.LS.getItem(e.info));
    return gk(e), o;
  }
};
var pc = "://";
var Zt = class {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return Zt.instance == null && (Zt.instance = new Zt()), Zt.instance;
  }
  static registerManager(t8, e) {
    $(t8 != null, () => "scheme must not be undefined or null."), t8.endsWith(pc) && (t8 = t8.slice(0, t8.indexOf(pc))), $(t8.length > 0, () => "scheme must not be an empty string.");
    let o = Zt.getInstance();
    $(o.managers[t8] == null, () => `A model store manager is already registered for scheme '${t8}'.`), o.managers[t8] = e;
  }
  static getManager(t8) {
    let e = Zt.getInstance().managers[t8];
    if (e == null)
      throw new Error(`Cannot find model manager for scheme '${t8}'`);
    return e;
  }
  static getSchemes() {
    return Object.keys(Zt.getInstance().managers);
  }
};
function ld(r) {
  if (r.indexOf(pc) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Zt.getSchemes().join(",")}`);
  return { scheme: r.split(pc)[0], path: r.split(pc)[1] };
}
async function yk(r, t8, e = false) {
  $(r !== t8, () => `Old path and new path are the same: '${r}'`);
  let o = ft.getLoadHandlers(r);
  $(o.length > 0, () => `Copying failed because no load handler is found for source URL ${r}.`), $(o.length < 2, () => `Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);
  let n = o[0], s = ft.getSaveHandlers(t8);
  $(s.length > 0, () => `Copying failed because no save handler is found for destination URL ${t8}.`), $(s.length < 2, () => `Copying failed because more than one (${o.length}) save handlers for destination URL ${t8}.`);
  let a = s[0], i = ld(r).scheme, p = ld(r).path, u = i === ld(r).scheme, c = await n.load();
  e && u && await Zt.getManager(i).removeModel(p);
  let l = await a.save(c);
  return e && !u && await Zt.getManager(i).removeModel(p), l.modelArtifactsInfo;
}
async function bk() {
  let r = Zt.getSchemes(), t8 = {};
  for (let e of r) {
    let o = await Zt.getManager(e).listModels();
    for (let n in o) {
      let s = e + pc + n;
      t8[s] = o[n];
    }
  }
  return t8;
}
async function Ck(r) {
  let t8 = ld(r);
  return Zt.getManager(t8.scheme).removeModel(t8.path);
}
async function wk(r, t8) {
  return yk(r, t8, false);
}
async function Sk(r, t8) {
  return yk(r, t8, true);
}
var Dw = class {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = false;
  }
  fetch(t8, e) {
    return fetch(t8, e);
  }
  now() {
    return performance.now();
  }
  encode(t8, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(t8);
  }
  decode(t8, e) {
    return new TextDecoder(e).decode(t8);
  }
  setTimeoutCustom(t8, e) {
    if (typeof window == "undefined" || !A().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(t8, e);
      return;
    }
    this.functionRefs.push(t8), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, e), this.hasEventListener || (this.hasEventListener = true, window.addEventListener("message", (o) => {
      if (o.source === window && o.data.name === this.messageName) {
        o.stopPropagation();
        let n = this.functionRefs[o.data.index];
        n(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, true));
  }
  isTypedArray(t8) {
    return Qm(t8);
  }
};
if (A().get("IS_BROWSER")) {
  A().setPlatform("browser", new Dw());
  try {
    Zt.registerManager(Na.URL_SCHEME, new cd());
  } catch (r) {
  }
  try {
    Zt.registerManager(ka.URL_SCHEME, new pd());
  } catch (r) {
  }
}
var D4 = { importFetch: () => Ik() };
var Aw;
var Fw = class {
  constructor() {
    this.util = vk(), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(t8, e) {
    return A().global.fetch != null ? A().global.fetch(t8, e) : (Aw == null && (Aw = D4.importFetch()), Aw(t8, e));
  }
  now() {
    let t8 = process.hrtime();
    return t8[0] * 1e3 + t8[1] / 1e6;
  }
  encode(t8, e) {
    if (e !== "utf-8" && e !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);
    return this.textEncoder.encode(t8);
  }
  decode(t8, e) {
    return t8.length === 0 ? "" : new this.util.TextDecoder(e).decode(t8);
  }
  isTypedArray(t8) {
    return this.util.types.isFloat32Array(t8) || this.util.types.isInt32Array(t8) || this.util.types.isUint8Array(t8) || this.util.types.isUint8ClampedArray(t8);
  }
};
A().get("IS_NODE") && !A().get("IS_BROWSER") && A().setPlatform("node", new Fw());
function me(r, t8 = "float32", e) {
  return t8 = t8 || "float32", wt(r), new tt(r, t8, e);
}
function A4(r, t8) {
  let e = v(r, "x", "cast");
  if (!rw(t8))
    throw new Error(`Failed to cast to unknown dtype ${t8}`);
  if (t8 === "string" && e.dtype !== "string" || t8 !== "string" && e.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  let o = { x: e }, n = { dtype: t8 };
  return T.runKernel(bo, o, n);
}
var We = N({ cast_: A4 });
function F4(r) {
  let e = { x: v(r, "x", "clone", "string_or_numeric") };
  return T.runKernel(wo, e);
}
var Ur = N({ clone_: F4 });
function md(r, t8 = false) {
  console.log(r.toString(t8));
}
Sw();
var P4 = { buffer: me, cast: We, clone: Ur, print: md };
Q0(P4);
function lde() {
  A().set("PROD", true);
}
function mde() {
  A().set("DEBUG", true);
}
function dde() {
  A().set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function Pw(r) {
  A().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(r + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
Z0(Pw);
function fde() {
  T.disposeVariables();
}
function pr() {
  return T;
}
function hde() {
  return T.memory();
}
function gde(r) {
  return T.profile(r);
}
function De(r, t8) {
  return T.tidy(r, t8);
}
function Mt(r) {
  Sl(r).forEach((e) => e.dispose());
}
function Rr(r) {
  return T.keep(r);
}
function xde(r) {
  return T.time(r);
}
function yde(r) {
  return T.setBackend(r);
}
function bde() {
  return T.ready();
}
function Cde() {
  return T.backendName;
}
function wde(r) {
  T.removeBackend(r);
}
function Sde(r) {
  return T.findBackend(r);
}
function Ide(r) {
  return T.findBackendFactory(r);
}
function su(r, t8, e = 1) {
  return T.registerBackend(r, t8, e);
}
function vde() {
  return T.backend;
}
function kde(r, t8) {
  A().setPlatform(r, t8);
}
function O4(r, t8) {
  let e = v(r, "a", "add"), o = v(t8, "b", "add");
  [e, o] = Oe(e, o);
  let n = { a: e, b: o };
  return T.runKernel(uo, n);
}
var Ce = N({ add_: O4 });
function M4(r, t8) {
  let e = v(r, "a", "floorDiv"), o = v(t8, "b", "floorDiv");
  [e, o] = Oe(e, o);
  let n = { a: e, b: o };
  return T.runKernel(In, n);
}
var dd = N({ floorDiv_: M4 });
function L4(r, t8) {
  let e = v(r, "a", "div"), o = v(t8, "b", "div");
  if ([e, o] = Oe(e, o), e.dtype === "int32" && o.dtype === "int32")
    return dd(e, o);
  let n = { a: e, b: o }, s = {};
  return T.runKernel(hn, n, s);
}
var je = N({ div_: L4 });
function B4(r, t8) {
  let e = v(r, "a", "mul"), o = v(t8, "b", "mul");
  [e, o] = Oe(e, o);
  let n = { a: e, b: o };
  return T.runKernel(Yn, n);
}
var se = N({ mul_: B4 });
function z4(r) {
  let t8 = v(r, "x", "abs");
  if (t8.dtype === "complex64") {
    let e = { x: t8 };
    return T.runKernel(Pi, e);
  } else {
    let e = { x: t8 };
    return T.runKernel(Xs, e);
  }
}
var Jt = N({ abs_: z4 });
function V4(r) {
  let e = { x: v(r, "x", "acos") };
  return T.runKernel(Wo, e);
}
var kk = N({ acos_: V4 });
function W4(r) {
  let e = { x: v(r, "x", "acosh") };
  return T.runKernel(Uo, e);
}
var Nk = N({ acosh_: W4 });
function U4(r) {
  $(Array.isArray(r), () => "The argument passed to tf.addN() must be a list of tensors"), $(r.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${r.length}`);
  let t8 = r.map((n, s) => v(n, `tensors${s}`, "addN")), e = t8[0];
  t8.forEach((n) => {
    if (n.dtype !== e.dtype)
      throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), t8.forEach((n) => {
    if (!Cr(n.shape, e.shape))
      throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  let o = t8;
  return T.runKernel(Go, o);
}
var Tk = N({ addN_: U4 });
function G4(r, t8 = null, e = false) {
  let n = { x: v(r, "x", "all", "bool") }, s = { axis: t8, keepDims: e };
  return T.runKernel(Ho, n, s);
}
var _k = N({ all_: G4 });
function H4(r, t8 = null, e = false) {
  let n = { x: v(r, "x", "any", "bool") }, s = { axis: t8, keepDims: e };
  return T.runKernel(Ko, n, s);
}
var $k = N({ any_: H4 });
function K4(r, t8 = 0) {
  let o = { x: v(r, "x", "argMax") }, n = { axis: t8 };
  return T.runKernel(Ys, o, n);
}
var Ek = N({ argMax_: K4 });
function q4(r, t8 = 0) {
  let o = { x: v(r, "x", "argMin") }, n = { axis: t8 };
  return T.runKernel(Qs, o, n);
}
var Rk = N({ argMin_: q4 });
function j4(r) {
  let e = { x: v(r, "x", "asin") };
  return T.runKernel(qo, e);
}
var Dk = N({ asin_: j4 });
function X4(r) {
  let e = { x: v(r, "x", "asinh") };
  return T.runKernel(jo, e);
}
var Ak = N({ asinh_: X4 });
function Y4(r) {
  let e = { x: v(r, "x", "atan") };
  return T.runKernel(Xo, e);
}
var Fk = N({ atan_: Y4 });
function Q4(r, t8) {
  let e = v(r, "a", "atan2"), o = v(t8, "b", "atan2");
  [e, o] = Oe(e, o);
  let n = { a: e, b: o };
  return T.runKernel(Qo, n);
}
var Pk = N({ atan2_: Q4 });
function Z4(r) {
  let e = { x: v(r, "x", "atanh") };
  return T.runKernel(Yo, e);
}
var Ok = N({ atanh_: Z4 });
function J4(r, t8, e, o, n = "NHWC", s) {
  let a = r[3], i = [...t8, a], p = Lk(n);
  return Hu(r, i, e, s, o, null, null, p);
}
function Mw(r, t8, e, o, n, s, a = "channelsLast") {
  let [i, p] = vl(t8), u;
  if (a === "channelsLast")
    u = [i, p, r[3], r[3]];
  else if (a === "channelsFirst")
    u = [i, p, r[1], r[1]];
  else
    throw new Error(`Unknown dataFormat ${a}`);
  return Hu(r, u, e, o, n, s, false, a);
}
function eH(r, t8, e, o, n, s, a = "NDHWC") {
  let [i, p, u] = Ow(t8), c, l;
  if (a === "NDHWC")
    l = "channelsLast", c = [i, p, u, r[4], r[4]];
  else if (a === "NCDHW")
    l = "channelsFirst", c = [i, p, u, r[1], r[1]];
  else
    throw new Error(`Unknown dataFormat ${a}`);
  return Mk(r, c, e, o, n, false, l, s);
}
function Hu(r, t8, e, o, n, s, a = false, i = "channelsLast") {
  let [p, u, c, l] = [-1, -1, -1, -1];
  if (i === "channelsLast")
    [p, u, c, l] = r;
  else if (i === "channelsFirst")
    [p, l, u, c] = r;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  let [m, d, , f] = t8, [h, g] = vl(e), [x, b] = vl(o), C = cc(m, x), S = cc(d, b), { padInfo: k, outHeight: _, outWidth: E } = oH(n, u, c, h, g, C, S, s, i), R = a ? f * l : f, D;
  return i === "channelsFirst" ? D = [p, R, _, E] : i === "channelsLast" && (D = [p, _, E, R]), { batchSize: p, dataFormat: i, inHeight: u, inWidth: c, inChannels: l, outHeight: _, outWidth: E, outChannels: R, padInfo: k, strideHeight: h, strideWidth: g, filterHeight: m, filterWidth: d, effectiveFilterHeight: C, effectiveFilterWidth: S, dilationHeight: x, dilationWidth: b, inShape: r, outShape: D, filterShape: t8 };
}
function Mk(r, t8, e, o, n, s = false, a = "channelsLast", i) {
  let [p, u, c, l, m] = [-1, -1, -1, -1, -1];
  if (a === "channelsLast")
    [p, u, c, l, m] = r;
  else if (a === "channelsFirst")
    [p, m, u, c, l] = r;
  else
    throw new Error(`Unknown dataFormat ${a}`);
  let [d, f, h, , g] = t8, [x, b, C] = Ow(e), [S, k, _] = Ow(o), E = cc(d, S), R = cc(f, k), D = cc(h, _), { padInfo: P, outDepth: O, outHeight: M, outWidth: L } = nH(n, u, c, l, x, b, C, E, R, D, i), B = s ? g * m : g, z;
  return a === "channelsFirst" ? z = [p, B, O, M, L] : a === "channelsLast" && (z = [p, O, M, L, B]), { batchSize: p, dataFormat: a, inDepth: u, inHeight: c, inWidth: l, inChannels: m, outDepth: O, outHeight: M, outWidth: L, outChannels: B, padInfo: P, strideDepth: x, strideHeight: b, strideWidth: C, filterDepth: d, filterHeight: f, filterWidth: h, effectiveFilterDepth: E, effectiveFilterHeight: R, effectiveFilterWidth: D, dilationDepth: S, dilationHeight: k, dilationWidth: _, inShape: r, outShape: z, filterShape: t8 };
}
function tH(r, t8, e, o, n) {
  o == null && (o = Lw(r, t8, e));
  let s = r[0], a = r[1], i = kl((s - t8 + 2 * o) / e + 1, n), p = kl((a - t8 + 2 * o) / e + 1, n);
  return [i, p];
}
function rH(r, t8, e, o, n, s) {
  n == null && (n = Lw(r, t8[0], o[0]));
  let a = [0, 0, 0, e];
  for (let i = 0; i < 3; i++)
    r[i] + 2 * n >= t8[i] && (a[i] = kl((r[i] - t8[i] + 2 * n) / o[i] + 1, s));
  return a;
}
function Lw(r, t8, e, o = 1) {
  let n = cc(t8, o);
  return Math.floor((r[0] * (e - 1) - e + n) / 2);
}
function vl(r) {
  return typeof r == "number" ? [r, r, r] : r.length === 2 ? [r[0], r[1], 1] : r;
}
function Ow(r) {
  return typeof r == "number" ? [r, r, r] : r;
}
function cc(r, t8) {
  return t8 <= 1 ? r : r + (r - 1) * (t8 - 1);
}
function oH(r, t8, e, o, n, s, a, i, p) {
  let u, c, l;
  if (typeof r == "number") {
    u = { top: r, bottom: r, left: r, right: r, type: r === 0 ? "VALID" : "NUMBER" };
    let d = tH([t8, e], s, o, r, i);
    c = d[0], l = d[1];
  } else if (r === "same") {
    c = Math.ceil(t8 / o), l = Math.ceil(e / n);
    let m = Math.max(0, (c - 1) * o + s - t8), d = Math.max(0, (l - 1) * n + a - e), f = Math.floor(m / 2), h = m - f, g = Math.floor(d / 2), x = d - g;
    u = { top: f, bottom: h, left: g, right: x, type: "SAME" };
  } else if (r === "valid")
    u = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, c = Math.ceil((t8 - s + 1) / o), l = Math.ceil((e - a + 1) / n);
  else if (typeof r == "object") {
    let m = p === "channelsLast" ? r[1][0] : r[2][0], d = p === "channelsLast" ? r[1][1] : r[2][1], f = p === "channelsLast" ? r[2][0] : r[3][0], h = p === "channelsLast" ? r[2][1] : r[3][1];
    u = { top: m, bottom: d, left: f, right: h, type: m === 0 && d === 0 && f === 0 && h === 0 ? "VALID" : "EXPLICIT" }, c = kl((t8 - s + m + d) / o + 1, i), l = kl((e - a + f + h) / n + 1, i);
  } else
    throw Error(`Unknown padding parameter: ${r}`);
  return { padInfo: u, outHeight: c, outWidth: l };
}
function nH(r, t8, e, o, n, s, a, i, p, u, c) {
  let l, m, d, f;
  if (r === "valid" && (r = 0), typeof r == "number") {
    l = { top: r, bottom: r, left: r, right: r, front: r, back: r, type: r === 0 ? "VALID" : "NUMBER" };
    let g = rH([t8, e, o, 1], [i, p, u], 1, [n, s, a], r, c);
    m = g[0], d = g[1], f = g[2];
  } else if (r === "same") {
    m = Math.ceil(t8 / n), d = Math.ceil(e / s), f = Math.ceil(o / a);
    let h = (m - 1) * n + i - t8, g = (d - 1) * s + p - e, x = (f - 1) * a + u - o, b = Math.floor(h / 2), C = h - b, S = Math.floor(g / 2), k = g - S, _ = Math.floor(x / 2), E = x - _;
    l = { top: S, bottom: k, left: _, right: E, front: b, back: C, type: "SAME" };
  } else
    throw Error(`Unknown padding parameter: ${r}`);
  return { padInfo: l, outDepth: m, outHeight: d, outWidth: f };
}
function kl(r, t8) {
  if (!t8)
    return Math.trunc(r);
  switch (t8) {
    case "round":
      return Math.round(r);
    case "ceil":
      return Math.ceil(r);
    case "floor":
      return Math.floor(r);
    default:
      throw new Error(`Unknown roundingMode ${t8}`);
  }
}
function Gu(r) {
  let [t8, e, o] = vl(r);
  return t8 === 1 && e === 1 && o === 1;
}
function xr(r, t8) {
  return Gu(r) || Gu(t8);
}
function Ta(r) {
  return vl(r).every((t8) => t8 > 0);
}
function Lk(r) {
  if (r === "NHWC")
    return "channelsLast";
  if (r === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${r}`);
}
function Bt(r, t8, e) {
  if (e != null) {
    if (typeof t8 == "string")
      throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t8}.`);
    if (typeof t8 == "number")
      $(qa(t8), () => `Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t8}.`);
    else if (typeof t8 == "object")
      t8.forEach((o) => {
        o.forEach((n) => {
          $(qa(n), () => `Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${n}.`);
        });
      });
    else
      throw Error(`Error in ${r}: Unknown padding parameter: ${t8}`);
  }
}
function sH(r, t8) {
  let o = { x: v(r, "x", "reshape", "string_or_numeric") }, n = { shape: t8 };
  return T.runKernel(da, o, n);
}
var W = N({ reshape_: sH });
function aH(r, t8, e, o, n) {
  let s = v(r, "x", "avgPool", "float32"), a = 1;
  $(xr(e, a), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`);
  let i = s, p = false;
  s.rank === 3 && (p = true, i = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])), $(i.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${i.rank}.`), Bt("avgPool", o, n);
  let u = { x: i }, c = { filterSize: t8, strides: e, pad: o, dimRoundingMode: n }, l = T.runKernel(Zo, u, c);
  return l = We(l, s.dtype), p ? W(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var fd = N({ avgPool_: aH });
function iH(r, t8, e, o, n, s = "NDHWC") {
  let a = v(r, "x", "avgPool3d", "float32"), i = a, p = false;
  a.rank === 4 && (p = true, i = W(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), $(i.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`), $(s === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), $(typeof e == "number" && e > 0 || Array.isArray(e) && e[0] > 0 && e[1] > 0 && e[2] > 0, () => `Error in avgPool3d: Stride must be > 0, but got '${e}'`), Bt("avgPool3d", o, n);
  let u = { x: i }, c = { filterSize: t8, strides: e, pad: o, dimRoundingMode: n, dataFormat: s }, l = T.runKernel(Zs, u, c);
  return l = We(l, i.dtype), p ? W(l, [l.shape[1], l.shape[2], l.shape[3], l.shape[4]]) : l;
}
var Bk = N({ avgPool3d_: iH });
function uH(r, t8 = 0) {
  $(r.length >= 1, () => "Pass at least one tensor to concat");
  let e = si(r, "tensors", "concat", "string_or_numeric");
  if (e[0].dtype === "complex64" && e.forEach((s) => {
    if (s.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `);
  }), e.length === 1)
    return Ur(e[0]);
  let o = e, n = { axis: t8 };
  return T.runKernel(ta, o, n);
}
var bt = N({ concat_: uH });
function pH(r, t8, e = false, o = false) {
  let n = v(r, "a", "matMul"), s = v(t8, "b", "matMul");
  [n, s] = Oe(n, s);
  let a = { a: n, b: s }, i = { transposeA: e, transposeB: o };
  return T.runKernel(Jo, a, i);
}
var Ze = N({ matMul_: pH });
function cH(r) {
  let e = { x: v(r, "x", "sigmoid", "float32") };
  return T.runKernel(Cs, e);
}
var $a = N({ sigmoid_: cH });
function lH(r, t8, e) {
  let o = v(r, "x", "slice", "string_or_numeric");
  if (o.rank === 0)
    throw new Error("Slicing scalar is not possible");
  let n = { x: o }, s = { begin: t8, size: e };
  return T.runKernel(ha, n, s);
}
var Xe = N({ slice_: lH });
function mH(r) {
  let e = { x: v(r, "x", "tanh", "float32") };
  return T.runKernel(Es, e);
}
var Nl = N({ tanh_: mH });
function dH(r, t8, e, o, n, s) {
  let a = v(r, "forgetBias", "basicLSTMCell"), i = v(t8, "lstmKernel", "basicLSTMCell"), p = v(e, "lstmBias", "basicLSTMCell"), u = v(o, "data", "basicLSTMCell"), c = v(n, "c", "basicLSTMCell"), l = v(s, "h", "basicLSTMCell"), m = bt([u, l], 1), d = Ze(m, i), f = Ce(d, p), h = f.shape[0], g = f.shape[1] / 4, x = [h, g], b = Xe(f, [0, 0], x), C = Xe(f, [0, g], x), S = Xe(f, [0, g * 2], x), k = Xe(f, [0, g * 3], x), _ = Ce(se($a(b), Nl(C)), se(c, $a(Ce(a, S)))), E = se(Nl(_), $a(k));
  return [_, E];
}
var zk = N({ basicLSTMCell_: dH });
function fH(r, t8, e) {
  let o = v(r, "x", "batchToSpaceND"), n = t8.reduce((i, p) => i * p);
  $(o.rank >= 1 + t8.length, () => `input rank is ${o.rank} but should be > than blockShape.length ${t8.length}`), $(e.length === t8.length, () => `crops.length is ${e.length} but should be equal to blockShape.length  ${t8.length}`), $(o.shape[0] % n === 0, () => `input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t8.join(" * ")} === ${n}`);
  let s = { x: o }, a = { blockShape: t8, crops: e };
  return T.runKernel(Js, s, a);
}
var hd = N({ batchToSpaceND_: fH });
function Vk(r) {
  let t8;
  return r.rank === 0 || r.rank === 1 ? t8 = W(r, [1, 1, 1, r.size]) : r.rank === 2 ? t8 = W(r, [1, 1, r.shape[0], r.shape[1]]) : r.rank === 3 ? t8 = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]) : t8 = r, t8;
}
function hH(r, t8, e, o, n, s) {
  s == null && (s = 1e-3);
  let a = v(r, "x", "batchNorm"), i = v(t8, "mean", "batchNorm"), p = v(e, "variance", "batchNorm"), u;
  n != null && (u = v(n, "scale", "batchNorm"));
  let c;
  o != null && (c = v(o, "offset", "batchNorm")), $(i.rank === p.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), $(c == null || i.rank === c.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), $(u == null || i.rank === u.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let m = { x: Vk(a), scale: u, offset: c, mean: i, variance: p }, d = { varianceEpsilon: s }, f = T.runKernel(vn, m, d);
  return W(f, a.shape);
}
var au = N({ batchNorm_: hH });
function gH(r, t8, e, o, n, s) {
  let a = v(r, "x", "batchNorm"), i = v(t8, "mean", "batchNorm"), p = v(e, "variance", "batchNorm"), u;
  n != null && (u = v(n, "scale", "batchNorm"));
  let c;
  return o != null && (c = v(o, "offset", "batchNorm")), $(a.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`), $(i.rank === 2 || i.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`), $(p.rank === 2 || p.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${p.rank}.`), u != null && $(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`), c != null && $(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`), au(a, i, p, c, u, s);
}
var Wk = N({ batchNorm2d_: gH });
function xH(r, t8, e, o, n, s) {
  let a = v(r, "x", "batchNorm"), i = v(t8, "mean", "batchNorm"), p = v(e, "variance", "batchNorm"), u;
  n != null && (u = v(n, "scale", "batchNorm"));
  let c;
  return o != null && (c = v(o, "offset", "batchNorm")), $(a.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`), $(i.rank === 3 || i.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`), $(p.rank === 3 || p.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${p.rank}.`), u != null && $(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`), c != null && $(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`), au(a, i, p, c, u, s);
}
var Uk = N({ batchNorm3d_: xH });
function yH(r, t8, e, o, n, s) {
  let a = v(r, "x", "batchNorm"), i = v(t8, "mean", "batchNorm"), p = v(e, "variance", "batchNorm"), u;
  n != null && (u = v(n, "scale", "batchNorm"));
  let c;
  return o != null && (c = v(o, "offset", "batchNorm")), $(a.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`), $(i.rank === 4 || i.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`), $(p.rank === 4 || p.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${p.rank}.`), u != null && $(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`), c != null && $(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`), au(a, i, p, c, u, s);
}
var Gk = N({ batchNorm4d_: yH });
function bH(r, t8, e) {
  let o = v(r, "x", "bincount"), n = v(t8, "weights", "bincount");
  $(o.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${o.dtype}`), $(e >= 0, () => `size must be non-negative, but got ${e}.`), $(n.size === o.size || n.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);
  let s = { x: o, weights: n }, a = { size: e };
  return T.runKernel(en, s, a);
}
var gd = N({ bincount_: bH });
function CH(r, t8) {
  let e = v(r, "x", "bitwiseAnd"), o = v(t8, "y", "bitwiseAnd");
  if (!Cr(e.shape, o.shape))
    throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${o.shape}`);
  if (e.dtype !== "int32" || o.dtype !== "int32")
    throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${o.dtype}`);
  let n = { a: e, b: o };
  return T.runKernel(ja, n);
}
var Hk = N({ bitwiseAnd_: CH });
function wH(r, t8) {
  let e = v(r, "s0", "broadcastArgs", "int32"), o = v(t8, "s1", "broadcastArgs", "int32");
  if (e.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);
  if (o.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);
  let n = { s0: e, s1: o };
  return T.runKernel(ea, n);
}
var Kk = N({ broadcastArgs_: wH });
function SH(r, t8) {
  let e = v(r, "broadcastTo", "x"), o = e.shape;
  if (wt(t8), t8.length < e.rank)
    throw new Error(`broadcastTo(): shape.length=${t8.length} < input.rank=${e.rank}.`);
  if (t8.length > e.rank) {
    let u = e.shape.slice();
    for (; u.length < t8.length; )
      u.unshift(1);
    e = W(e, u);
  }
  let n = e.shape, s = Array.from(t8);
  for (let u = t8.length - 1; u >= 0; u--)
    if (n[u] === t8[u])
      s[u] = 1;
    else if (e.shape[u] !== 1)
      throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t8}].`);
  if (s.map((u, c) => u > 1 ? c : -1).filter((u) => u >= 0).length === 0)
    return Ur(e);
  let i = { x: e }, p = { reps: s };
  return T.runKernel(po, i, p);
}
var iu = N({ broadcastTo_: SH });
function IH(r) {
  let e = { x: v(r, "x", "ceil", "float32") };
  return T.runKernel(tn, e);
}
var qk = N({ ceil_: IH });
function Ea(r, t8, e) {
  wt(r), e = e || Ri(t8);
  let o = { shape: r, value: t8, dtype: e };
  return T.runKernel(sa, {}, o);
}
function vH(r, t8, e) {
  let o = v(r, "x", "clipByValue");
  if ($(t8 <= e, () => `Error in clip: min (${t8}) must be less than or equal to max (${e}).`), t8 === e)
    return Ea(o.shape, t8, o.dtype);
  let n = { x: o }, s = { clipValueMin: t8, clipValueMax: e };
  return T.runKernel(Co, n, s);
}
var jk = N({ clipByValue_: vH });
function kH(r) {
  return bt(r, 0);
}
var Xk = N({ concat1d_: kH });
function NH(r, t8) {
  return bt(r, t8);
}
var Yk = N({ concat2d_: NH });
function TH(r, t8) {
  return bt(r, t8);
}
var Qk = N({ concat3d_: TH });
function _H(r, t8) {
  return bt(r, t8);
}
var Zk = N({ concat4d_: _H });
function $H(r, t8, e, o, n = "NHWC", s = [1, 1], a) {
  let i = v(r, "x", "conv2d", "float32"), p = v(t8, "filter", "conv2d", "float32"), u = i, c = false;
  i.rank === 3 && (c = true, u = W(i, [1, i.shape[0], i.shape[1], i.shape[2]])), $(u.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${u.rank}.`), $(p.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${p.rank}.`), Bt("conv2d", o, a);
  let l = n === "NHWC" ? u.shape[3] : u.shape[1];
  $(l === p.shape[2], () => `Error in conv2d: depth of input (${l}) must match input depth for filter ${p.shape[2]}.`), $(xr(e, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`), $(Ta(s), () => "Error in conv2D: Dilated rates should be larger than 0."), $(Ta(e), () => "Error in conv2D: Strides should be larger than 0.");
  let m = { x: u, filter: p }, d = { strides: e, pad: o, dataFormat: n, dilations: s, dimRoundingMode: a }, f = T.runKernel(rn, m, d);
  return c ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var uu = N({ conv2d_: $H });
function EH(r, t8, e, o, n = "NWC", s = 1, a) {
  let i = v(r, "x", "conv1d"), p = v(t8, "filter", "conv1d"), u = i, c = false;
  i.rank === 2 && (c = true, u = W(i, [1, i.shape[0], i.shape[1]])), $(u.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${u.rank}.`), $(p.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${p.rank}.`), Bt("conv1d", o, a), $(u.shape[2] === p.shape[1], () => `Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${p.shape[1]}.`), $(xr(e, s), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${s}'`), $(Ta(s), () => "Error in conv1D: Dilated rates should be larger than 0."), $(Ta(e), () => "Error in conv1D: Stride should be larger than 0."), $(n === "NWC", () => `Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);
  let l = W(p, [1, p.shape[0], p.shape[1], p.shape[2]]), m = W(u, [u.shape[0], 1, u.shape[1], u.shape[2]]), g = uu(m, l, [1, e], o, "NHWC", [1, s], a);
  return c ? W(g, [g.shape[2], g.shape[3]]) : W(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
var Jk = N({ conv1d_: EH });
function RH(r, t8, e, o, n, s = "NHWC", a) {
  $(r.length === t8.rank, () => `Length of inShape (${r.length}) and rank of dy (${t8.rank}) must match`);
  let i = r, p = t8, u = false;
  t8.rank === 3 && (u = true, p = W(t8, [1, t8.shape[0], t8.shape[1], t8.shape[2]]), i = [1, r[0], r[1], r[2]]), $(i.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`), $(p.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${p.rank}`), $(e.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);
  let c = s === "NHWC" ? i[3] : i[1], l = s === "NHWC" ? p.shape[3] : p.shape[1];
  $(c === e.shape[2], () => `Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`), $(l === e.shape[3], () => `Error in conv2dDerInput: depth of output (${l}) must match output depth for filter ${e.shape[3]}.`), Bt("conv2dDerInput", n, a);
  let m = { dy: p, filter: e }, d = { strides: o, pad: n, dataFormat: s, dimRoundingMode: a, inputShape: i }, f = T.runKernel(on, m, d);
  return u ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var xd = N({ conv2DBackpropInput_: RH });
function DH(r, t8, e, o, n, s) {
  let a = v(r, "x", "conv2dTranspose"), i = v(t8, "filter", "conv2dTranspose");
  return xd(e, a, i, o, n, "NHWC", s);
}
var e2 = N({ conv2dTranspose_: DH });
function AH(r, t8, e, o, n = "NDHWC", s = [1, 1, 1]) {
  let a = v(r, "x", "conv3d"), i = v(t8, "filter", "conv3d"), p = a, u = false;
  a.rank === 4 && (u = true, p = W(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), $(p.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${p.rank}.`), $(i.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`), $(p.shape[4] === i.shape[3], () => `Error in conv3d: depth of input (${p.shape[4]}) must match input depth for filter ${i.shape[3]}.`), $(xr(e, s), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`), $(n === "NDHWC", () => `Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`), $(Ta(s), () => "Error in conv3D: Dilated rates should be larger than 0."), $(Ta(e), () => "Error in conv3D: Strides should be larger than 0.");
  let c = { x: p, filter: i }, l = { strides: e, pad: o, dataFormat: n, dilations: s }, m = T.runKernel(nn, c, l);
  return u ? W(m, [m.shape[1], m.shape[2], m.shape[3], m.shape[4]]) : m;
}
var t2 = N({ conv3d_: AH });
function FH(r, t8, e, o, n) {
  $(r.length === t8.rank, () => `Length of inShape (${r.length}) and rank of dy (${t8.rank}) must match`);
  let s = r, a = t8, i = false;
  t8.rank === 4 && (i = true, a = W(t8, [1, t8.shape[0], t8.shape[1], t8.shape[2], t8.shape[3]]), s = [1, r[0], r[1], r[2], r[3]]);
  let p = s[4], u = a.shape[4];
  $(s.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`), $(a.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`), $(e.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`), $(p === e.shape[3], () => `Error in conv3dDerInput: depth of input (${p}) must match input depth for filter ${e.shape[3]}.`), $(u === e.shape[4], () => `Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);
  let c = { dy: a, filter: e }, l = { pad: n, strides: o, inputShape: s }, m = T.runKernel(sn, c, l);
  return i ? W(m, [m.shape[1], m.shape[2], m.shape[3], m.shape[4]]) : m;
}
var r2 = N({ conv3DBackpropInput_: FH });
function PH(r, t8, e, o, n) {
  let s = v(r, "x", "conv3dTranspose"), a = v(t8, "filter", "conv3dTranspose");
  return r2(e, s, a, o, n);
}
var o2 = N({ conv3dTranspose_: PH });
function OH(r) {
  let e = { x: v(r, "x", "cos", "float32") };
  return T.runKernel(an, e);
}
var n2 = N({ cos_: OH });
function MH(r) {
  let e = { x: v(r, "x", "cosh", "float32") };
  return T.runKernel(un, e);
}
var s2 = N({ cosh_: MH });
function LH(r, t8 = 0, e = false, o = false) {
  let s = { x: v(r, "x", "cumprod") }, a = { axis: t8, exclusive: e, reverse: o };
  return T.runKernel(pn, s, a);
}
var a2 = N({ cumprod_: LH });
function BH(r, t8 = 0, e = false, o = false) {
  let s = { x: v(r, "x", "cumsum") }, a = { axis: t8, exclusive: e, reverse: o };
  return T.runKernel(cn, s, a);
}
var i2 = N({ cumsum_: BH });
function zH(r, t8, e, o = false) {
  let n = v(r, "x", "denseBincount"), s = v(t8, "weights", "denseBincount");
  $(n.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${n.dtype}`), $(n.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`), $(e >= 0, () => `size must be non-negative, but got ${e}.`), $(s.size === n.size || s.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);
  let a = { x: n, weights: s }, i = { size: e, binaryOutput: o };
  return T.runKernel(ra, a, i);
}
var u2 = N({ denseBincount_: zH });
function VH(r, t8, e = "NHWC") {
  let o = v(r, "x", "depthToSpace", "float32"), n = e === "NHWC" ? o.shape[1] : o.shape[2], s = e === "NHWC" ? o.shape[2] : o.shape[3], a = e === "NHWC" ? o.shape[3] : o.shape[1];
  $(t8 > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${t8}`), $(n * t8 >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${n} and ${t8}  for depthToSpace with input shape
    ${o.shape}`), $(s * t8 >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${s} and ${t8} for depthToSpace with input shape
        ${o.shape}`), $(a % (t8 * t8) === 0, () => `Dimension size must be evenly divisible by ${t8 * t8} but is ${a} for depthToSpace with input shape ${o.shape}`);
  let i = { x: o }, p = { blockSize: t8, dataFormat: e };
  return T.runKernel(mn, i, p);
}
var p2 = N({ depthToSpace_: VH });
function WH(r, t8, e, o, n = "NHWC", s = [1, 1], a) {
  let i = v(r, "x", "depthwiseConv2d", "float32"), p = v(t8, "filter", "depthwiseConv2d", "float32"), u = i, c = false;
  i.rank === 3 && (c = true, u = W(i, [1, i.shape[0], i.shape[1], i.shape[2]])), $(u.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`), $(p.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`);
  let l = n === "NHWC" ? u.shape[3] : u.shape[1];
  $(l === p.shape[2], () => `Error in depthwiseConv2d: number of input channels (${l}) must match the inChannels dimension in filter ${p.shape[2]}.`), Bt("depthwiseConv2d", o, a);
  let m = { x: u, filter: p }, d = { strides: e, pad: o, dataFormat: n, dilations: s, dimRoundingMode: a }, f = T.runKernel(dn, m, d);
  return c ? W(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var lc = N({ depthwiseConv2d_: WH });
function UH(r) {
  let e = { x: v(r, "x", "diag") };
  return T.runKernel(oa, e);
}
var c2 = N({ diag_: UH });
function GH(r, t8, e, o, n = [1, 1], s = "NHWC") {
  let a = v(r, "x", "dilation2d"), i = v(t8, "filter", "dilation2d");
  $(a.rank === 3 || a.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`), $(i.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`), $(s === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);
  let p = a, u = false;
  a.rank === 3 && (p = W(a, [1, a.shape[0], a.shape[1], a.shape[2]]), u = true), $(p.shape[3] === i.shape[2], () => `Error in dilation2d:  input and filter must have the same depth: ${p.shape[3]} vs ${i.shape[2]}`);
  let c = { x: p, filter: i }, l = { strides: e, pad: o, dilations: n }, m = T.runKernel(fn, c, l);
  return u ? W(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
var l2 = N({ dilation2d_: GH });
var Ir = {};
qe(Ir, { assertAndGetBroadcastShape: () => rt, getBroadcastDims: () => m2, getReductionAxes: () => yd });
function m2(r, t8) {
  let e = r.length, o = [];
  for (let n = 0; n < e; n++) {
    let s = e - 1 - n, a = r[s] || 1;
    (t8[t8.length - 1 - n] || 1) > 1 && a === 1 && o.unshift(s);
  }
  return o;
}
function yd(r, t8) {
  let e = [];
  for (let o = 0; o < t8.length; o++) {
    let n = r[r.length - o - 1], s = t8.length - o - 1, a = t8[s];
    (n == null || n === 1 && a > 1) && e.unshift(s);
  }
  return e;
}
function rt(r, t8) {
  let e = Math.max(r.length, t8.length), o = new Array(e);
  for (let n = 0; n < e; n++) {
    let s = r[r.length - n - 1];
    s == null && (s = 1);
    let a = t8[t8.length - n - 1];
    if (a == null && (a = 1), s === 1)
      o[e - n - 1] = a;
    else if (a === 1)
      o[e - n - 1] = s;
    else if (s !== a) {
      let i = `Operands could not be broadcast together with shapes ${r} and ${t8}.`;
      throw Error(i);
    } else
      o[e - n - 1] = s;
  }
  return o;
}
function HH(r, t8) {
  let e = v(r, "a", "equal", "string_or_numeric"), o = v(t8, "b", "equal", "string_or_numeric");
  [e, o] = Oe(e, o), rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(yn, n);
}
var bd = N({ equal_: HH });
function KH(r, t8, e) {
  let o = v(t8, "a", "where"), n = v(e, "b", "where"), s = v(r, "condition", "where", "bool"), a = rt(rt(s.shape, o.shape), n.shape), i = iu(s, a), p = iu(o, a), u = iu(n, a), c = { condition: i, t: p, e: u };
  return T.runKernel(fa, c);
}
var lo = N({ where_: KH });
function qH(r) {
  let e = { x: v(r, "x", "zerosLike") };
  return T.runKernel(Sa, e);
}
var Ht = N({ zerosLike_: qH });
function jH(r, t8) {
  let e = v(r, "a", "div"), o = v(t8, "b", "div");
  [e, o] = Oe(e, o);
  let n = je(e, o), s = Ht(n), a = bd(o, s);
  return lo(a, s, n);
}
var d2 = N({ divNoNan_: jH });
function XH(r, t8) {
  let e = v(r, "t1", "dot"), o = v(t8, "t2", "dot");
  $((e.rank === 1 || e.rank === 2) && (o.rank === 1 || o.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${o.rank}.`);
  let n = e.rank === 1 ? e.size : e.shape[1], s = o.rank === 1 ? o.size : o.shape[0];
  if ($(n === s, () => `Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`), e.rank === 1 && o.rank === 1) {
    let a = W(e, [1, -1]), i = W(o, [-1, 1]), p = Ze(a, i);
    return W(p, []);
  } else if (e.rank === 1 && o.rank === 2) {
    let a = W(e, [1, -1]), i = W(o, [o.shape[0], o.shape[1]]), p = Ze(a, i);
    return W(p, [p.size]);
  } else if (e.rank === 2 && o.rank === 1) {
    let a = W(o, [-1, 1]), i = Ze(e, a);
    return W(i, [i.size]);
  } else {
    let a = W(o, [o.shape[0], o.shape[1]]);
    return Ze(e, a);
  }
}
var f2 = N({ dot_: XH });
function YH(r, ...t8) {
  let e = t8.map((n, s) => v(n, `tensors${s}`, "einsum")), o = { equation: r };
  return T.runKernel(Vi, e, o);
}
var pu = N({ einsum_: YH });
function QH(r) {
  let e = { x: v(r, "x", "elu", "float32") };
  return T.runKernel(gn, e);
}
var Cd = N({ elu_: QH });
function ZH(r, t8) {
  let e = v(r, "x", "ensureShape", "string_or_numeric");
  if (!ZC(e.shape, t8))
    throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t8}`);
  return r;
}
var h2 = N({ ensureShape_: ZH });
function JH(r) {
  let t8 = v(r, "x", "erf");
  $(t8.dtype === "int32" || t8.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), t8.dtype === "int32" && (t8 = We(t8, "float32"));
  let e = { x: t8 };
  return T.runKernel(xn, e);
}
var g2 = N({ erf_: JH });
function Bw(r, t8) {
  for (let e = 0; e < r.length; ++e)
    if (r[r.length - e - 1] !== t8 - 1 - e)
      return false;
  return true;
}
function x2(r, t8, e) {
  let o = r.length + t8.length, n = [], s = 0, a = 0;
  for (let i = 0; i < o; i++)
    e.indexOf(i) === -1 ? n.push(r[s++]) : n.push(t8[a++]);
  return n;
}
function eK(r, t8) {
  let e = [], o = r.length;
  for (let s = 0; s < o; s++)
    t8.indexOf(s) === -1 && e.push(r[s]);
  let n = t8.map((s) => r[s]);
  return [e, n];
}
function ii(r, t8) {
  let e = t8.map((o) => 1);
  return x2(r, e, t8);
}
function tK(r, t8, e) {
  $(Bw(t8, e), () => `${r} supports only inner-most axes for now. Got axes ${t8} and rank-${e} input.`);
}
function rK(r, t8) {
  if (Bw(r, t8))
    return null;
  let e = [];
  for (let o = 0; o < t8; ++o)
    r.indexOf(o) === -1 && e.push(o);
  return r.forEach((o) => e.push(o)), e;
}
function oK(r) {
  return r.map((t8, e) => [e, t8]).sort((t8, e) => t8[1] - e[1]).map((t8) => t8[0]);
}
function nK(r, t8) {
  let e = [];
  for (let o = t8 - r; o < t8; ++o)
    e.push(o);
  return e;
}
function aK(r, t8 = null, e = false) {
  let n = { x: v(r, "x", "max") }, s = { reductionIndices: t8, keepDims: e };
  return T.runKernel(Vn, n, s);
}
var Ra = N({ max_: aK });
function iK(r, t8 = null, e = false) {
  let n = { x: v(r, "x", "min") }, s = { axis: t8, keepDims: e };
  return T.runKernel(Hn, n, s);
}
var Tl = N({ min_: iK });
function uK(r, t8) {
  let e = v(r, "base", "pow"), o = v(t8, "exp", "pow");
  [e, o] = Oe(e, o);
  let n = { a: e, b: o };
  return T.runKernel(rs, n);
}
var ui = N({ pow_: uK });
function ke(r, t8) {
  if ((Ot(r) && t8 !== "string" || Array.isArray(r)) && t8 !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (t8 === "string" && Ot(r) && !(r instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return Sr(r, [], [], t8);
}
function pK(r) {
  let e = { x: v(r, "x", "sqrt", "float32") };
  return T.runKernel(Ss, e);
}
var Dr = N({ sqrt_: pK });
function cK(r) {
  let t8 = v(r, "x", "square"), e = {};
  return T.runKernel("Square", { x: t8 }, e);
}
var er = N({ square_: cK });
function lK(r, t8 = null, e = false) {
  let o = v(r, "x", "sum");
  o.dtype === "bool" && (o = We(o, "int32"));
  let n = { x: o }, s = { axis: t8, keepDims: e };
  return T.runKernel(Is, n, s);
}
var ot = N({ sum_: lK });
function mK(r, t8 = "euclidean", e = null, o = false) {
  r = v(r, "x", "norm");
  let n = y2(r, t8, e), s = n.shape;
  if (o) {
    let a = Ei(e, r.shape);
    s = ii(n.shape, a);
  }
  return W(n, s);
}
function y2(r, t8, e = null) {
  if (r.rank === 0)
    return Jt(r);
  if (r.rank !== 1 && e === null)
    return y2(W(r, [-1]), t8, e);
  if (r.rank === 1 || typeof e == "number" || Array.isArray(e) && e.length === 1) {
    if (t8 === 1)
      return ot(Jt(r), e);
    if (t8 === 1 / 0)
      return Ra(Jt(r), e);
    if (t8 === -1 / 0)
      return Tl(Jt(r), e);
    if (t8 === "euclidean" || t8 === 2)
      return Dr(ot(ui(Jt(r), ke(2, "int32")), e));
    throw new Error(`Error in norm: invalid ord value: ${t8}`);
  }
  if (Array.isArray(e) && e.length === 2) {
    if (t8 === 1)
      return Ra(ot(Jt(r), e[0]), e[1] - 1);
    if (t8 === 1 / 0)
      return Ra(ot(Jt(r), e[1]), e[0]);
    if (t8 === -1 / 0)
      return Tl(ot(Jt(r), e[1]), e[0]);
    if (t8 === "fro" || t8 === "euclidean")
      return Dr(ot(er(r), e));
    throw new Error(`Error in norm: invalid ord value: ${t8}`);
  }
  throw new Error(`Error in norm: invalid axis: ${e}`);
}
var Ku = N({ norm_: mK });
function dK(r, t8 = null, e = false) {
  return Ku(r, "euclidean", t8, e);
}
var b2 = N({ euclideanNorm_: dK });
function fK(r) {
  let e = { x: v(r, "x", "exp") };
  return T.runKernel(bn, e);
}
var $o = N({ exp_: fK });
function hK(r, t8 = 0) {
  let e = v(r, "x", "expandDims", "string_or_numeric");
  $(t8 <= e.rank, () => "Axis must be <= rank of the tensor");
  let o = { input: e }, n = { dim: t8 };
  return T.runKernel(na, o, n);
}
var Ms = N({ expandDims_: hK });
function gK(r) {
  let e = { x: v(r, "x", "expm1") };
  return T.runKernel(Cn, e);
}
var C2 = N({ expm1_: gK });
function xK(r, t8) {
  let e = v(r, "x", "tile", "string_or_numeric");
  $(e.rank === t8.length, () => `Error in transpose: rank of input ${e.rank} must match length of reps ${t8}.`);
  let o = { x: e }, n = { reps: t8 };
  return T.runKernel(po, o, n);
}
var cu = N({ tile_: xK });
function yK(r, t8, e, o = "float32") {
  t8 == null && (t8 = r);
  let n = me([r, t8], o), s = r <= t8 ? r : t8;
  for (let i = 0; i < s; ++i)
    n.set(1, i, i);
  let a = W(n.toTensor(), [r, t8]);
  if (e == null)
    return a;
  if (e.length === 1)
    return cu(Ms(a, 0), [e[0], 1, 1]);
  if (e.length === 2)
    return cu(Ms(Ms(a, 0), 0), [e[0], e[1], 1, 1]);
  if (e.length === 3)
    return cu(Ms(Ms(Ms(a, 0), 0), 0), [e[0], e[1], e[2], 1, 1]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`);
}
var wd = N({ eye_: yK });
function bK(r) {
  let e = { x: v(r, "x", "floor", "float32") };
  return T.runKernel(Sn, e);
}
var Sd = N({ floor_: bK });
function CK(r, t8, e = 0, o = 0) {
  let n = v(r, "x", "gather"), s = v(t8, "indices", "gather", "int32"), a = { x: n, indices: s }, i = { axis: e, batchDims: o };
  return T.runKernel(aa, a, i);
}
var Id = N({ gather_: CK });
function wK(r, t8) {
  let e = v(r, "a", "greater", "string_or_numeric"), o = v(t8, "b", "greater", "string_or_numeric");
  [e, o] = Oe(e, o), rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(Nn, n);
}
var qu = N({ greater_: wK });
function SK(r, t8) {
  let e = v(r, "a", "greaterEqual", "string_or_numeric"), o = v(t8, "b", "greaterEqual", "string_or_numeric");
  [e, o] = Oe(e, o), rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(Tn, n);
}
var vd = N({ greaterEqual_: SK });
function IK(r) {
  let e = { input: v(r, "input", "imag") };
  return T.runKernel(Gi, e);
}
var lu = N({ imag_: IK });
function vK(r) {
  let e = { x: v(r, "x", "isFinite") };
  return T.runKernel(_n, e);
}
var w2 = N({ isFinite_: vK });
function kK(r) {
  let e = { x: v(r, "x", "isInf") };
  return T.runKernel($n, e);
}
var S2 = N({ isInf_: kK });
function NK(r) {
  let e = { x: v(r, "x", "isNaN") };
  return T.runKernel(En, e);
}
var I2 = N({ isNaN_: NK });
function TK(r, t8 = 0.2) {
  let o = { x: v(r, "x", "leakyRelu") }, n = { alpha: t8 };
  return T.runKernel(Rn, o, n);
}
var kd = N({ leakyRelu_: TK });
function _K(r, t8) {
  let e = v(r, "a", "less", "string_or_numeric"), o = v(t8, "b", "less", "string_or_numeric");
  [e, o] = Oe(e, o), rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(Dn, n);
}
var _l = N({ less_: _K });
function $K(r, t8) {
  let e = v(r, "a", "lessEqual", "string_or_numeric"), o = v(t8, "b", "lessEqual", "string_or_numeric");
  [e, o] = Oe(e, o), rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(An, n);
}
var mc = N({ lessEqual_: $K });
function v2(r, t8, e) {
  if (e <= 0)
    throw new Error("The number of values should be positive.");
  let o = { start: r, stop: t8, num: e };
  return T.runKernel(Fn, {}, o);
}
function EK(r, t8 = 5, e = 1, o = 1, n = 0.5) {
  let s = v(r, "x", "localResponseNormalization");
  $(s.rank === 4 || s.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`), $(qa(t8), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t8}.`);
  let a = s, i = false;
  s.rank === 3 && (i = true, a = W(s, [1, s.shape[0], s.shape[1], s.shape[2]]));
  let p = { x: a }, u = { depthRadius: t8, bias: e, alpha: o, beta: n }, c = T.runKernel(zn, p, u);
  return i ? W(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
var k2 = N({ localResponseNormalization_: EK });
function RK(r) {
  let e = { x: v(r, "x", "log", "float32") };
  return T.runKernel(Pn, e);
}
var pi = N({ log_: RK });
function DK(r) {
  let e = { x: v(r, "x", "log1p") };
  return T.runKernel(On, e);
}
var Nd = N({ log1p_: DK });
function AK(r) {
  return $(qs(r), () => "The f passed in grad(f) must be a function"), (t8, e) => {
    let o = v(t8, "x", "tf.grad", "string_or_numeric"), n = e != null ? v(e, "dy", "tf.grad") : null;
    return T.tidy(() => {
      let { value: s, grads: a } = T.gradients(() => r(o), [o], n);
      return n != null && yt(s.shape, n.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), Td(a), a[0];
    });
  };
}
function FK(r) {
  return $(qs(r), () => "The f passed in grads(f) must be a function"), (t8, e) => {
    $(Array.isArray(t8), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    let o = si(t8, "args", "tf.grads", "string_or_numeric"), n = e != null ? v(e, "dy", "tf.grads") : null;
    return T.tidy(() => {
      let { value: s, grads: a } = T.gradients(() => r(...o), o, n);
      return n != null && yt(s.shape, n.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Td(a), a;
    });
  };
}
function PK(r) {
  return $(qs(r), () => "The f passed in valueAndGrad(f) must be a function"), (t8, e) => {
    $(t8 instanceof ut, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), $(e == null || e instanceof ut, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    let { grads: o, value: n } = T.gradients(() => r(t8), [t8], e);
    return Td(o), { grad: o[0], value: n };
  };
}
function OK(r) {
  return $(qs(r), () => "The f passed in valueAndGrads(f) must be a function"), (t8, e) => {
    $(Array.isArray(t8) && t8.every((n) => n instanceof ut), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), $(e == null || e instanceof ut, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    let o = T.gradients(() => r(...t8), t8, e);
    return e != null && yt(o.value.shape, e.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Td(o.grads), o;
  };
}
function zw(r, t8) {
  $(qs(r), () => "The f passed in variableGrads(f) must be a function"), $(t8 == null || Array.isArray(t8) && t8.every((u) => u instanceof oi), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  let e = t8 != null;
  if (!e) {
    t8 = [];
    for (let u in T.registeredVariables)
      t8.push(T.registeredVariables[u]);
  }
  let o = e ? t8.filter((u) => !u.trainable) : null, n = t8.length;
  t8 = t8.filter((u) => u.trainable), $(t8.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);
  let s = true, { value: a, grads: i } = T.gradients(r, t8, null, s);
  $(i.some((u) => u != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), $(a.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);
  let p = {};
  return t8.forEach((u, c) => {
    i[c] != null && (p[u.name] = i[c]);
  }), o != null && o.forEach((u) => p[u.name] = null), { value: a, grads: p };
}
function vr(r) {
  return T.customGrad(r);
}
function Td(r) {
  if (r.filter((e) => e == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
function MK(r) {
  let e = { x: v(r, "x", "neg") };
  return T.runKernel(pa, e);
}
var cr = N({ neg_: MK });
function LK(r) {
  let e = { x: v(r, "x", "softplus") };
  return T.runKernel(ws, e);
}
var _d = N({ softplus_: LK });
function BK(r) {
  let t8 = v(r, "x", "logSigmoid");
  return vr((o) => ({ value: cr(_d(cr(o))), gradFunc: (a) => se(a, $a(cr(o))) }))(t8);
}
var N2 = N({ logSigmoid_: BK });
function zK(r, t8) {
  let e = v(r, "a", "sub"), o = v(t8, "b", "sub");
  [e, o] = Oe(e, o);
  let n = { a: e, b: o };
  return T.runKernel(_s, n);
}
var Te = N({ sub_: zK });
function VK(r, t8 = -1) {
  let e = v(r, "logits", "logSoftmax");
  if (t8 === -1 && (t8 = e.rank - 1), t8 !== e.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t8}`);
  return vr((n, s) => {
    let i = Ra(n, t8, true), p = Te(n, i), u = Te(We(p, "float32"), pi(ot($o(p), t8, true)));
    return s([u]), { value: u, gradFunc: (l, m) => {
      let [d] = m, f = true, h = $o(d);
      return Te(l, se(ot(l, t8, f), h));
    } };
  })(e);
}
var T2 = N({ logSoftmax_: VK });
function WK(r, t8 = null, e = false) {
  let o = v(r, "x", "logSumExp"), n = Ei(t8, o.shape), s = Ra(o, n, true), a = Te(o, s), i = $o(a), p = ot(i, n), u = pi(p), c = Ce(W(s, u.shape), u);
  if (e) {
    let l = ii(c.shape, n);
    return W(c, l);
  }
  return c;
}
var $d = N({ logSumExp_: WK });
function UK(r, t8) {
  let e = v(r, "a", "logicalAnd", "bool"), o = v(t8, "b", "logicalAnd", "bool");
  rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(Mn, n);
}
var ju = N({ logicalAnd_: UK });
function GK(r) {
  let e = { x: v(r, "x", "logicalNot", "bool") };
  return T.runKernel(Ln, e);
}
var Ed = N({ logicalNot_: GK });
function HK(r, t8) {
  let e = v(r, "a", "logicalOr", "bool"), o = v(t8, "b", "logicalOr", "bool");
  rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(Bn, n);
}
var Rd = N({ logicalOr_: HK });
function KK(r, t8) {
  let e = v(r, "a", "logicalXor", "bool"), o = v(t8, "b", "logicalXor", "bool");
  return rt(e.shape, o.shape), ju(Rd(r, t8), Ed(ju(r, t8)));
}
var _2 = N({ logicalXor_: KK });
var Dd = 2147483648;
function qK(r, t8, e = "left") {
  let o = v(r, "sortedSequence", "searchSorted"), n = v(t8, "values", "searchSorted"), s = o.shape[o.shape.length - 1], a = n.shape[n.shape.length - 1], i = W(o, [-1, s]), p = W(n, [-1, a]);
  if (i.rank < 2)
    throw new Error("Sorted input argument must be at least 2-dimensional");
  if (i.shape[0] !== p.shape[0])
    throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (He(p.shape) >= Dd)
    throw new Error(`values tensor size must less than ${Dd}`);
  if (i.shape[1] >= Dd)
    throw new Error(`trailing dim_size must less than ${Dd} for int32 output type, was ${i.shape[1]}`);
  let u = { sortedSequence: i, values: p }, c = { side: e };
  return T.runKernel(hs, u, c);
}
var $l = N({ searchSorted_: qK });
function $2(r, t8) {
  return $l(r, t8, "left");
}
function jK(r, t8, e, o, n) {
  let s = v(r, "x", "maxPool"), a = 1, i = s, p = false;
  s.rank === 3 && (p = true, i = W(s, [1, s.shape[0], s.shape[1], s.shape[2]])), $(i.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${i.rank}.`), $(xr(e, a), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`), Bt("maxPool", o, n);
  let u = { x: i }, c = { filterSize: t8, strides: e, pad: o, dimRoundingMode: n }, l = T.runKernel(Un, u, c);
  return p ? W(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var Ad = N({ maxPool_: jK });
function XK(r, t8 = [1, 1, 1], e, o, n, s = "NDHWC") {
  let a = v(r, "x", "maxPool3d"), i = a, p = false;
  a.rank === 4 && (p = true, i = W(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), $(i.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`), $(s === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), Bt("maxPool3d", o, n);
  let u = { x: i }, c = { filterSize: t8, strides: e, pad: o, dimRoundingMode: n, dataFormat: s }, l = T.runKernel(ia, u, c);
  return p ? W(l, [l.shape[1], l.shape[2], l.shape[3], l.shape[4]]) : l;
}
var E2 = N({ maxPool3d_: XK });
function YK(r, t8, e, o, n = false) {
  let a = { x: v(r, "x", "maxPoolWithArgmax") }, i = { filterSize: t8, strides: e, pad: o, includeBatchInIndex: n }, p = T.runKernel(ua, a, i);
  return { result: p[0], indexes: p[1] };
}
var R2 = N({ maxPoolWithArgmax_: YK });
function QK(r, t8) {
  let e = v(r, "a", "maximum"), o = v(t8, "b", "maximum");
  [e, o] = Oe(e, o), e.dtype === "bool" && (e = We(e, "int32"), o = We(o, "int32")), rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(Wn, n);
}
var Fd = N({ maximum_: QK });
function ZK(r, t8 = null, e = false) {
  let n = { x: v(r, "x", "mean") }, s = { axis: t8, keepDims: e };
  return T.runKernel(Gn, n, s);
}
var Xu = N({ mean_: ZK });
function Gr(r, t8 = "float32") {
  if (wt(r), t8 === "complex64") {
    let o = Gr(r, "float32"), n = Gr(r, "float32");
    return Er(o, n);
  }
  let e = Yp(He(r), t8);
  return T.makeTensor(e, r, t8);
}
function Da(r, t8 = "float32") {
  if (wt(r), t8 === "complex64") {
    let o = Da(r, "float32"), n = Gr(r, "float32");
    return Er(o, n);
  }
  let e = fl(He(r), t8);
  return T.makeTensor(e, r, t8);
}
function D2(r, t8, { indexing: e = "xy" } = {}) {
  if (e !== "xy" && e !== "ij")
    throw new TypeError(`${e} is not a valid third argument to meshgrid`);
  if (r === void 0)
    return [];
  let o = v(r, "x", "meshgrid", r instanceof ut ? r.dtype : "float32");
  if (t8 === void 0)
    return [o];
  let n = v(t8, "y", "meshgrid", t8 instanceof ut ? t8.dtype : "float32"), s = He(o.shape), a = He(n.shape);
  return e === "xy" ? (o = W(o, [1, -1]), n = W(n, [-1, 1]), [Ze(Da([a, 1], o.dtype), o), Ze(n, Da([1, s], n.dtype))]) : (o = W(o, [-1, 1]), n = W(n, [1, -1]), [Ze(o, Da([1, a], o.dtype)), Ze(Da([s, 1], n.dtype), n)]);
}
function JK(r, t8) {
  let e = v(r, "a", "minimum"), o = v(t8, "b", "minimum");
  [e, o] = Oe(e, o), e.dtype === "bool" && (e = We(e, "int32"), o = We(o, "int32")), rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(Kn, n);
}
var Yu = N({ minimum_: JK });
function eq(r, t8, e) {
  $(e === "reflect" || e === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);
  let o = v(r, "x", "mirrorPad");
  if (o.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  $(t8.length === o.rank, () => `Padding doesn't match input. Must be ${o.rank}. Got ${t8.length}.`);
  let n = e === "reflect" ? 1 : 0;
  for (let i = 0; i < o.rank; i++)
    $(t8[i].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), $(t8[i][0] >= 0 && t8[i][0] <= o.shape[i] - n && t8[i][1] >= 0 && t8[i][1] <= o.shape[i] - n, () => `Padding in dimension ${i} cannot be greater than or equal to ${o.shape[i] - n} or less than 0 for input of shape ${o.shape}`);
  let s = { paddings: t8, mode: e }, a = { x: o };
  return T.runKernel(qn, a, s);
}
var A2 = N({ mirrorPad_: eq });
function tq(r, t8) {
  let e = v(r, "a", "mod"), o = v(t8, "b", "mod");
  [e, o] = Oe(e, o);
  let n = { a: e, b: o };
  return T.runKernel(jn, n);
}
var F2 = N({ mod_: tq });
function rq(r, t8 = null, e = false) {
  r = v(r, "x", "moments");
  let o = Ei(t8, r.shape), n = Xu(r, o, e), s = n.shape;
  e || (s = ii(n.shape, o));
  let a = er(Te(We(r, "float32"), W(n, s))), i = Xu(a, o, e);
  return { mean: n, variance: i };
}
var P2 = N({ moments_: rq });
function oq(r, t8, e, o) {
  let n = v(t8, "data", "multiRNNCell"), s = si(e, "c", "multiRNNCell"), a = si(o, "h", "multiRNNCell"), i = n, p = [];
  for (let l = 0; l < r.length; l++) {
    let m = r[l](i, s[l], a[l]);
    p.push(m[0]), p.push(m[1]), i = m[1];
  }
  let u = [], c = [];
  for (let l = 0; l < p.length; l += 2)
    u.push(p[l]), c.push(p[l + 1]);
  return [u, c];
}
var O2 = N({ multiRNNCell_: oq });
function nq(r, t8, e, o = false) {
  let n = v(r, "logits", "multinomial"), s = n.size, a = n.rank;
  if (s < 2)
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);
  if (a > 2)
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);
  e = e || Math.random();
  let p = { logits: a === 1 ? W(n, [1, -1]) : n }, u = { numSamples: t8, seed: e, normalized: o }, c = T.runKernel(Xn, p, u);
  return a === 1 ? W(c, [c.size]) : c;
}
var M2 = N({ multinomial_: nq });
function sq(r, t8) {
  let e = v(r, "a", "notEqual", "string_or_numeric"), o = v(t8, "b", "notEqual", "string_or_numeric");
  [e, o] = Oe(e, o), rt(e.shape, o.shape);
  let n = { a: e, b: o };
  return T.runKernel(Qn, n);
}
var Pd = N({ notEqual_: sq });
function aq(r, t8, e = 1, o = 0, n = "int32") {
  if (t8 < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${t8}`);
  let a = { indices: v(r, "indices", "oneHot", "int32") }, i = { dtype: n, depth: t8, onValue: e, offValue: o };
  return T.runKernel(es, a, i);
}
var El = N({ oneHot_: aq });
function iq(r) {
  let e = { x: v(r, "x", "onesLike") };
  return T.runKernel(ca, e);
}
var L2 = N({ onesLike_: iq });
function uq(r, t8) {
  let e = v(r, "v1", "outerProduct"), o = v(t8, "v2", "outerProduct");
  $(e.rank === 1 && o.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${o.rank}.`);
  let n = W(e, [-1, 1]), s = W(o, [1, -1]);
  return Ze(n, s);
}
var B2 = N({ outerProduct_: uq });
function pq(r, t8, e = 0) {
  let o = v(r, "x", "pad");
  if (o.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  let n = { paddings: t8, constantValue: e }, s = { x: o };
  return T.runKernel(ts, s, n);
}
var Aa = N({ pad_: pq });
function cq(r, t8, e = 0) {
  return $(t8.length === 2, () => "Invalid number of paddings. Must be length of 2."), Aa(r, [t8], e);
}
var z2 = N({ pad1d_: cq });
function lq(r, t8, e = 0) {
  return $(t8.length === 2 && t8[0].length === 2 && t8[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Aa(r, t8, e);
}
var V2 = N({ pad2d_: lq });
function mq(r, t8, e = 0) {
  return $(t8.length === 3 && t8[0].length === 2 && t8[1].length === 2 && t8[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Aa(r, t8, e);
}
var W2 = N({ pad3d_: mq });
function dq(r, t8, e = 0) {
  return $(t8.length === 4 && t8[0].length === 2 && t8[1].length === 2 && t8[2].length === 2 && t8[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Aa(r, t8, e);
}
var U2 = N({ pad4d_: dq });
function fq(r, t8, e) {
  let o = v(r, "x", "spaceToBatchND");
  $(o.rank >= 1 + t8.length, () => `input rank ${o.rank} should be > than [blockShape] ${t8.length}`), $(e.length === t8.length, () => `paddings.shape[0] ${e.length} must be equal to [blockShape] ${t8.length}`), $(o.shape.reduce((a, i, p) => p > 0 && p <= t8.length ? a && (i + e[p - 1][0] + e[p - 1][1]) % t8[p - 1] === 0 : a, true), () => `input spatial dimensions ${o.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t8.toString()}`);
  let n = { x: o }, s = { blockShape: t8, paddings: e };
  return T.runKernel(ga, n, s);
}
var Od = N({ spaceToBatchND_: fq });
function hq(r, t8, e, o, n, s, a) {
  n == null && (n = [1, 1]), s == null && (s = 1), o === 0 && (o = "valid");
  let i = v(r, "x", "maxPool"), p = i, u = false;
  i.rank === 3 && (u = true, p = W(i, [1, i.shape[0], i.shape[1], i.shape[2]])), $(xr(s, n), () => `Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);
  let c = Mw(p.shape, t8, s, n, o), l = [c.dilationHeight, c.dilationWidth], m;
  o === "same" ? m = xq([c.filterHeight, c.filterWidth], l) : m = [[0, 0], [0, 0]];
  let d = l[0] === 1 && l[1] === 1, [f, h] = gq([c.inHeight, c.inWidth], l, m), g = d ? o : "valid", x = d ? p : Od(p, l, f), C = (e === "avg" ? () => fd(x, t8, s, g, a) : () => Ad(x, t8, s, g, a))(), S = d ? C : hd(C, l, h);
  return u ? W(S, [S.shape[1], S.shape[2], S.shape[3]]) : S;
}
function gq(r, t8, e) {
  let o = e.map((c) => c[0]), n = e.map((c) => c[1]), s = r.concat(o, n), a = t8.map((c, l) => (c - s[l] % c) % c), i = n.map((c, l) => c + a[l]), p = t8.map((c, l) => [o[l], i[l]]), u = t8.map((c, l) => [0, a[l]]);
  return [p, u];
}
function xq(r, t8) {
  let o = r.map((a, i) => a + (a - 1) * (t8[i] - 1)).map((a) => a - 1), n = o.map((a) => Math.floor(a / 2)), s = o.map((a, i) => a - n[i]);
  return o.map((a, i) => [n[i], s[i]]);
}
var G2 = N({ pool_: hq });
function yq(r, t8) {
  let e = v(r, "x", "prelu"), o = v(t8, "alpha", "prelu"), n = { x: e, alpha: o };
  return T.runKernel(os, n);
}
var Md = N({ prelu_: yq });
function bq(r, t8 = null, e = false) {
  let o = v(r, "x", "prod");
  o.dtype === "bool" && (o = We(o, "int32"));
  let n = { x: o }, s = { axis: t8, keepDims: e };
  return T.runKernel(ns, n, s);
}
var H2 = N({ prod_: bq });
function Cq(r, t8, e, o) {
  let n = r.map((c, l) => v(c, `tensors${l}`, "raggedGather", "int32")), s = v(t8, "paramsDenseValues", "raggedGather"), a = v(e, "indices", "raggedGather", "int32"), i = { paramsNestedSplits: n, paramsDenseValues: s, indices: a }, p = { outputRaggedRank: o }, u = T.runKernel(Qp, i, p);
  return { outputNestedSplits: u.slice(0, u.length - 1), outputDenseValues: u[u.length - 1] };
}
var K2 = N({ raggedGather_: Cq });
function wq(r, t8, e) {
  let o = v(r, "starts", "raggedRange"), n = v(t8, "limits", "raggedRange", o.dtype), s = v(e, "deltas", "raggedRange", o.dtype), a = { starts: o, limits: n, deltas: s }, i = T.runKernel(Zp, a);
  return { rtNestedSplits: i[0], rtDenseValues: i[1] };
}
var q2 = N({ raggedRange_: wq });
function Sq(r, t8, e, o, n) {
  let s = v(r, "shape", "raggedTensorToTensor", "int32"), a = v(t8, "values", "raggedTensorToTensor"), i = v(e, "defaultValue", "raggedTensorToTensor", a.dtype), p = o.map((l, m) => v(l, `tensors${m}`, "raggedTensorToTensor", "int32")), u = { shape: s, values: a, defaultValue: i, rowPartitionTensors: p }, c = { rowPartitionTypes: n };
  return T.runKernel(Jp, u, c);
}
var j2 = N({ raggedTensorToTensor_: Sq });
function Iq(r, t8, e) {
  wt(r);
  let o = He(r), n = null;
  if (e == null || e === "float32")
    n = new Float32Array(o);
  else if (e === "int32")
    n = new Int32Array(o);
  else if (e === "bool")
    n = new Uint8Array(o);
  else
    throw new Error(`Unknown data type ${e}`);
  for (let s = 0; s < o; s++)
    n[s] = t8();
  return T.makeTensor(n, r, e);
}
var X2 = N({ rand_: Iq });
var Wd = Kp(qw());
var h1 = {};
qe(h1, { TEST_EPSILON_FLOAT16: () => m1, createVideoElement: () => Oq, encodeStrings: () => f1, expectArrayBuffersEqual: () => Pq, expectArraysClose: () => Rq, expectArraysEqual: () => Aq, expectNumbersClose: () => d1, expectPromiseToFail: () => Dq, expectValuesInRange: () => Fq, play: () => Mq, testEpsilon: () => Bd });
var Eq = 1e-3;
var m1 = 0.1;
function Rq(r, t8, e) {
  return e == null && (e = Bd()), jw(r, t8, (o, n) => Xw(o, n, e));
}
function Bd() {
  return T.backend.floatPrecision() === 32 ? Eq : m1;
}
function jw(r, t8, e) {
  let o = true;
  if ((Ot(r) || Ot(t8)) && (o = false), Ot(r) && Ot(t8) && (o = true), o) {
    let a = r.constructor.name, i = t8.constructor.name;
    if (a !== i)
      throw new Error(`Arrays are of different type. Actual: ${a}. Expected: ${i}`);
  }
  if (Array.isArray(r) && Array.isArray(t8)) {
    let a = ir(r), i = ir(t8);
    if (!Cr(a, i))
      throw new Error(`Arrays have different shapes. Actual: [${a}]. Expected: [${i}]`);
  }
  let n = Ot(r) ? r : Ps(r), s = Ot(t8) ? t8 : Ps(t8);
  if (n.length !== s.length)
    throw new Error(`Arrays have different lengths actual: ${n.length} vs expected: ${s.length}.
Actual:   ${n}.
Expected: ${s}.`);
  for (let a = 0; a < s.length; ++a) {
    let i = n[a], p = s[a];
    if (!e(i, p))
      throw new Error(`Arrays differ: actual[${a}] = ${i}, expected[${a}] = ${p}.
Actual:   ${n}.
Expected: ${s}.`);
  }
  typeof expect != "undefined" && expect().nothing();
}
function Dq(r, t8) {
  r().then(() => t8.fail(), () => t8()), typeof expect != "undefined" && expect().nothing();
}
function Aq(r, t8) {
  let e = typeof t8 == "string" || typeof t8 == "number" || typeof t8 == "boolean" ? [t8] : t8;
  return Vo(r) || Vo(r[0]) || Vo(t8) || Vo(t8[0]) ? jw(r, e, (o, n) => o == n) : jw(r, t8, (o, n) => Xw(o, n, 0));
}
function d1(r, t8, e) {
  if (e == null && (e = Bd()), !Xw(r, t8, e))
    throw new Error(`Numbers differ: actual === ${r}, expected === ${t8}`);
  typeof expect != "undefined" && expect().nothing();
}
function Xw(r, t8, e) {
  return !isFinite(r) && !isFinite(t8) ? true : !(isNaN(r) || isNaN(t8) || Math.abs(r - t8) > e);
}
function Fq(r, t8, e) {
  for (let o = 0; o < r.length; o++)
    if (r[o] < t8 || r[o] > e)
      throw new Error(`Value out of range:${r[o]} low: ${t8}, high: ${e}`);
}
function Pq(r, t8) {
  let e = new Float32Array(r), o = new Float32Array(t8);
  if (e.length !== o.length)
    throw new Error(`Expected ArrayBuffer to be of length ${o.length}, but it was ${e.length}`);
  for (let n = 0; n < o.length; n++)
    if (e[n] !== o[n])
      throw new Error(`Expected ArrayBuffer value at ${n} to be ${o[n]} but got ${e[n]} instead`);
}
function f1(r) {
  for (let t8 = 0; t8 < r.length; t8++) {
    let e = r[t8];
    Array.isArray(e) ? f1(e) : r[t8] = tu(e);
  }
  return r;
}
function Oq(r) {
  let t8 = document.createElement("video");
  return "playsInline" in t8 && (t8.playsInline = true), t8.muted = true, t8.loop = true, t8.style.position = "fixed", t8.style.left = "0px", t8.style.top = "0px", t8.preload = "auto", t8.appendChild(r), new Promise((e) => {
    t8.addEventListener("loadeddata", (o) => e(t8)), t8.load();
  });
}
async function Mq(r) {
  await r.play(), "requestVideoFrameCallback" in r && await new Promise((t8) => {
    r.requestVideoFrameCallback(t8);
  });
}
var Zu = class {
  constructor(t8, e, o, n, s) {
    this.mean = t8, this.stdDev = e, this.dtype = o, this.nextVal = NaN, this.truncated = n, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    let a = s || Math.random();
    this.random = Wd.alea(a.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      let n = this.nextVal;
      return this.nextVal = NaN, n;
    }
    let t8, e, o = false;
    for (; !o; ) {
      let n, s, a;
      do
        n = 2 * this.random() - 1, s = 2 * this.random() - 1, a = n * n + s * s;
      while (a >= 1 || a === 0);
      let i = Math.sqrt(-2 * Math.log(a) / a);
      t8 = this.mean + this.stdDev * n * i, e = this.mean + this.stdDev * s * i, (!this.truncated || this.isValidTruncated(t8)) && (o = true);
    }
    return (!this.truncated || this.isValidTruncated(e)) && (this.nextVal = this.convertValue(e)), this.convertValue(t8);
  }
  convertValue(t8) {
    return this.dtype == null || this.dtype === "float32" ? t8 : Math.round(t8);
  }
  isValidTruncated(t8) {
    return t8 <= this.upper && t8 >= this.lower;
  }
};
var zd = class {
  constructor(t8, e, o, n) {
    this.alpha = t8, this.beta = 1 / e, this.dtype = o;
    let s = n || Math.random();
    this.randu = Wd.alea(s.toString()), this.randn = new Zu(0, 1, o, false, this.randu()), t8 < 1 ? this.d = t8 + 2 / 3 : this.d = t8 - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  nextValue() {
    let t8, e, o, n, s, a;
    for (; ; ) {
      do
        n = this.randn.nextValue(), a = 1 + this.c * n;
      while (a <= 0);
      if (a *= a * a, t8 = n * n, e = 1 - 0.331 * t8 * t8, o = 0.5 * t8 + this.d * (1 - a + Math.log(a)), s = this.randu(), s < e || Math.log(s) < o)
        break;
    }
    return a = 1 / this.beta * this.d * a, this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a);
  }
  convertValue(t8) {
    return this.dtype === "float32" ? t8 : Math.round(t8);
  }
};
var Vd = class {
  constructor(t8 = 0, e = 1, o, n) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = t8, this.range = e - t8, this.dtype = o, n == null && (n = Math.random()), typeof n == "number" && (n = n.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${t8} - ${e} <= 1 and dtype is not float`);
    this.random = Wd.alea(n);
  }
  convertValue(t8) {
    return this.canReturnFloat() ? t8 : Math.round(t8);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
};
function Lq(r, t8, e = 1, o = "float32", n) {
  if (wt(r), e == null && (e = 1), o == null && (o = "float32"), o !== "float32" && o !== "int32")
    throw new Error(`Unsupported data type ${o}`);
  let s = new zd(t8, e, o, n), a = me(r, o);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var g1 = N({ randomGamma_: Lq });
function Bq(r, t8 = 0, e = 1, o, n) {
  if (wt(r), o != null && o === "bool")
    throw new Error(`Unsupported data type ${o}`);
  let s = new Zu(t8, e, o, false, n), a = me(r, o);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var Ud = N({ randomNormal_: Bq });
function zq(r, t8, e) {
  if (t8 != null && t8 === "bool")
    throw new Error(`Unsupported data type ${t8}`);
  return Ud(r, 0, 1, t8, e);
}
var x1 = N({ randomStandardNormal_: zq });
function Vq(r, t8 = 0, e = 1, o = "float32", n) {
  wt(r);
  let s = me(r, o), a = new Vd(t8, e, null, n);
  for (let i = 0; i < s.values.length; i++)
    s.values[i] = a.nextValue();
  return s.toTensor();
}
var dc = N({ randomUniform_: Vq });
function Wq(r, t8, e, o) {
  return dc(r, t8, e, "int32", o);
}
var y1 = N({ randomUniformInt_: Wq });
function mu(r, t8, e = 1, o = "float32") {
  if (e === 0)
    throw new Error("Cannot have a step of zero");
  let n = { start: r, stop: t8, step: e, dtype: o };
  return T.runKernel(ma, {}, n);
}
function Uq(r) {
  let e = { input: v(r, "input", "real") };
  return T.runKernel(qi, e);
}
var ci = N({ real_: Uq });
function Gq(r) {
  let e = { x: v(r, "x", "reciprocal") };
  return T.runKernel(ss, e);
}
var b1 = N({ reciprocal_: Gq });
function Hq(r) {
  let e = { x: v(r, "x", "relu") };
  return T.runKernel(as, e);
}
var du = N({ relu_: Hq });
function Kq(r) {
  let e = { x: v(r, "x", "relu6") };
  return T.runKernel(ps, e);
}
var Gd = N({ relu6_: Kq });
function qq(r, t8) {
  let o = { x: v(r, "x", "reverse") }, n = { dims: t8 };
  return T.runKernel(cs, o, n);
}
var mo = N({ reverse_: qq });
function jq(r) {
  let t8 = v(r, "x", "reverse");
  return $(t8.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${t8.rank}.`), mo(t8, 0);
}
var C1 = N({ reverse1d_: jq });
function Xq(r, t8) {
  let e = v(r, "x", "reverse");
  return $(e.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`), mo(e, t8);
}
var w1 = N({ reverse2d_: Xq });
function Yq(r, t8) {
  let e = v(r, "x", "reverse");
  return $(e.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`), mo(e, t8);
}
var S1 = N({ reverse3d_: Yq });
function Qq(r, t8) {
  let e = v(r, "x", "reverse");
  return $(e.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`), mo(e, t8);
}
var I1 = N({ reverse4d_: Qq });
function Zq(r) {
  let e = { x: v(r, "x", "round") };
  return T.runKernel(ls, e);
}
var Hd = N({ round_: Zq });
function Jq(r) {
  let e = { x: v(r, "x", "rsqrt", "float32") };
  return T.runKernel(ms, e);
}
var v1 = N({ rsqrt_: Jq });
function e6(r) {
  let e = { x: v(r, "x", "selu") };
  return T.runKernel(gs, e);
}
var k1 = N({ selu_: e6 });
function t6(r, t8, e, o, n, s = [1, 1], a = "NHWC") {
  let i = v(r, "x", "separableConv2d"), p = v(t8, "depthwiseFilter", "separableConv2d"), u = v(e, "pointwiseFilter", "separableConv2d"), c = i, l = false;
  if (i.rank === 3 && (l = true, c = W(i, [1, i.shape[0], i.shape[1], i.shape[2]])), a === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  $(c.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`), $(p.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${p.rank}.`), $(u.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${p.rank}.`), $(u.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`), $(u.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);
  let m = p.shape[2], d = p.shape[3];
  $(u.shape[2] === m * d, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${m * d}, but got ${u.shape[2]}.`);
  let f = lc(c, p, o, n, a, s), g = uu(f, u, 1, "valid", a);
  return l ? W(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
var N1 = N({ separableConv2d_: t6 });
async function r6(r, t8) {
  let e = v(r, "x", "setdiff1d"), o = v(t8, "y", "setdiff1d");
  $(e.dtype === o.dtype, () => `x and y should have the same dtype, but got x (${e.dtype}) and y (${o.dtype}).`), $(e.rank === 1, () => `x should be 1D tensor, but got x (${e.shape}).`), $(o.rank === 1, () => `y should be 1D tensor, but got y (${o.shape}).`);
  let n = await e.data(), s = await o.data(), a = new Set(s), i = 0;
  for (let c = 0; c < n.length; c++)
    a.has(n[c]) || i++;
  let p = new tt([i], e.dtype), u = new tt([i], "int32");
  for (let c = 0, l = 0; c < n.length; c++)
    a.has(n[c]) || (p.values[l] = n[c], u.values[l] = c, l++);
  return [p.toTensor(), u.toTensor()];
}
var T1 = r6;
function o6(r) {
  let e = { x: v(r, "x", "sign") };
  return T.runKernel(bs, e);
}
var _1 = N({ sign_: o6 });
function n6(r) {
  let e = { x: v(r, "x", "sin", "float32") };
  return T.runKernel(xs, e);
}
var $1 = N({ sin_: n6 });
function s6(r) {
  let e = { x: v(r, "x", "sinh") };
  return T.runKernel(ys, e);
}
var E1 = N({ sinh_: s6 });
function a6(r, t8, e) {
  let o = v(r, "x", "slice1d");
  return $(o.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`), Xe(o, [t8], [e]);
}
var R1 = N({ slice1d_: a6 });
function i6(r, t8, e) {
  let o = v(r, "x", "slice2d");
  return $(o.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`), Xe(o, t8, e);
}
var D1 = N({ slice2d_: i6 });
function u6(r, t8, e) {
  let o = v(r, "x", "slice3d");
  return $(o.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`), Xe(o, t8, e);
}
var A1 = N({ slice3d_: u6 });
function p6(r, t8, e) {
  let o = v(r, "x", "slice4d");
  return $(o.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`), Xe(o, t8, e);
}
var F1 = N({ slice4d_: p6 });
function c6(r, t8 = -1) {
  let e = v(r, "logits", "softmax", "float32");
  if (t8 === -1 && (t8 = e.rank - 1), t8 !== e.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t8}`);
  let o = { logits: e }, n = { dim: t8 };
  return T.runKernel(vs, o, n);
}
var P1 = N({ softmax_: c6 });
function l6(r) {
  $(r.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);
  let t8 = { input: r };
  return T.runKernel(Wi, t8);
}
var fc = N({ fft_: l6 });
function m6(r) {
  $(r.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);
  let t8 = { input: r };
  return T.runKernel(Ui, t8);
}
var Ju = N({ ifft_: m6 });
function d6(r) {
  let t8 = r.shape[r.shape.length - 1], e = r.size / t8, o;
  if (t8 <= 2) {
    let n = W(r, [e, t8]);
    o = Ju(n);
  } else {
    let n = [e, 2 * (t8 - 1)], s = W(ci(r), [e, t8]), a = W(lu(r), [e, t8]), i = mo(Xe(s, [0, 1], [e, t8 - 2]), 1), p = se(mo(Xe(a, [0, 1], [e, t8 - 2]), 1), ke(-1)), u = bt([s, i], 1), c = bt([a, p], 1), l = W(Er(u, c), [n[0], n[1]]);
    o = Ju(l);
  }
  if (o = ci(o), r.rank === 3 && r.shape[0] !== 0) {
    let n = o, s = r.shape[0];
    o = W(o, [s, o.shape[0] / s, o.shape[1]]), n.dispose();
  }
  return o;
}
var Kd = N({ irfft_: d6 });
function f6(r, t8, e = 0) {
  let n = { x: v(r, "x", "split") }, s = { numOrSizeSplits: t8, axis: e };
  return T.runKernel(xa, n, s);
}
var li = N({ split_: f6 });
function h6(r, t8) {
  $(r.dtype === "float32", () => `The dtype for rfft() must be real value but got ${r.dtype}`);
  let e = r.shape[r.shape.length - 1], o = r.size / e, n;
  if (t8 != null && t8 < e) {
    let f = r.shape.map((g) => 0), h = r.shape.map((g) => g);
    h[r.shape.length - 1] = t8, n = Xe(r, f, h), e = t8;
  } else if (t8 != null && t8 > e) {
    let f = r.shape.map((h) => h);
    f[r.shape.length - 1] = t8 - e, n = bt([r, Gr(f)], r.shape.length - 1), e = t8;
  } else
    n = r;
  let s = Ht(n), a = W(Er(n, s), [o, e]), i = fc(a), p = Math.floor(e / 2) + 1, u = ci(i), c = lu(i), l = li(u, [p, e - p], u.shape.length - 1), m = li(c, [p, e - p], c.shape.length - 1), d = n.shape.slice();
  return d[n.shape.length - 1] = p, W(Er(l[0], m[0]), d);
}
var hc = N({ rfft_: h6 });
function g6(r, t8) {
  let e = v(r, "a", "squaredDifference"), o = v(t8, "b", "squaredDifference");
  [e, o] = Oe(e, o), rt(e.shape, o.shape);
  let n = { a: e, b: o }, s = {};
  return T.runKernel(Ns, n, s);
}
var qd = N({ squaredDifference_: g6 });
function x6(r, t8) {
  let e = v(r, "x", "squeeze", "string_or_numeric");
  return W(e, JC(e.shape, t8).newShape);
}
var gc = N({ squeeze_: x6 });
function y6(r, t8 = 0) {
  let e = si(r, "tensors", "stack", "string_or_numeric");
  $(e.length >= 1, () => "Pass at least one tensor to tf.stack"), e.length > 0 && $(t8 <= e[0].rank, () => "Axis must be <= rank of the tensor");
  let o = e, n = { axis: t8 };
  return T.runKernel(la, o, n);
}
var kr = N({ stack_: y6 });
function b6(r, t8 = 0) {
  let o = { x: v(r, "x", "step") }, n = { alpha: t8 };
  return T.runKernel(So, o, n);
}
var jd = N({ step_: b6 });
function C6(r, t8, e, o, n = 0, s = 0, a = 0, i = 0, p = 0) {
  let c = { x: v(r, "x", "stridedSlice", "string_or_numeric") }, l = { begin: t8, end: e, strides: o, beginMask: n, endMask: s, ellipsisMask: a, newAxisMask: i, shrinkAxisMask: p };
  return T.runKernel(Ts, c, l);
}
var O1 = N({ stridedSlice_: C6 });
function w6(r) {
  let e = { x: v(r, "x", "tan", "float32") };
  return T.runKernel($s, e);
}
var M1 = N({ tan_: w6 });
function tr(r, t8) {
  io(r);
  let e = ir(r, t8);
  if (e.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return Sr(r, null, e, t8);
}
function fu(r, t8, e) {
  if (io(r), t8 != null && t8.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  let o = ir(r, e);
  if (o.length !== 2 && o.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (o.length === 1 && t8 == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return Sr(r, t8, o, e);
}
function Xd(r, t8, e) {
  if (io(r), t8 != null && t8.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  let o = ir(r, e);
  if (o.length !== 3 && o.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (o.length === 1 && t8 == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return Sr(r, t8, o, e);
}
function L1(r, t8, e) {
  if (io(r), t8 != null && t8.length !== 4)
    throw new Error("tensor4d() requires shape to have four numbers");
  let o = ir(r, e);
  if (o.length !== 4 && o.length !== 1)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (o.length === 1 && t8 == null)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return Sr(r, t8, o, e);
}
function B1(r, t8, e) {
  if (io(r), t8 != null && t8.length !== 5)
    throw new Error("tensor5d() requires shape to have five numbers");
  let o = ir(r, e);
  if (o.length !== 5 && o.length !== 1)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (o.length === 1 && t8 == null)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return Sr(r, t8, o, e);
}
function z1(r, t8, e) {
  if (io(r), t8 != null && t8.length !== 6)
    throw new Error("tensor6d() requires shape to have six numbers");
  let o = ir(r, e);
  if (o.length !== 6 && o.length !== 1)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (o.length === 1 && t8 == null)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return t8 = t8 || o, Sr(r, t8, o, e);
}
var hu = {};
qe(hu, { calculateShapes: () => V1, validateInput: () => xc, validateUpdateShape: () => Yw });
function Yw(r, t8, e) {
  let o = t8.rank > 1 ? t8.shape[t8.rank - 1] : 1, n = t8.rank > 1 ? t8.rank - 1 : 1, s = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t8.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;
  if (e.rank < n)
    throw new Error(s + ` update.rank < ${n}. `);
  if (r.length < o + (e.rank - n))
    throw new Error(s + ` Output shape length < ${o + (e.rank - n)}`);
  if (e.rank !== n + r.length - o)
    throw new Error(s + ` update.rank != ${n + r.length - o}`);
  for (let a = 0; a < n; ++a)
    if (e.shape[a] !== t8.shape[a])
      throw new Error(s + ` updates.shape[${a}] (${e.shape[a]}) != indices.shape[${a}] (${t8.shape[a]}).`);
  for (let a = 0; a < e.rank - n; ++a)
    if (e.shape[a + n] !== r[a + o])
      throw new Error(s + ` updates.shape[${a + n}] (${e.shape[a + n]}) != shape[${a + n}] (${r[a + n]})`);
}
function xc(r, t8, e) {
  if (t8.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t8.rank}.`);
  if (r.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);
  if (t8.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t8.dtype}`);
  if (e.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);
  if (e.length === 0) {
    if (t8.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${t8.shape}`);
    if (r.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`);
  }
  Yw(e, t8, r);
}
function V1(r, t8, e) {
  let o = t8.shape.length, n = o > 1 ? t8.shape[o - 1] : 1, s = e.length, a = 1;
  for (let l = n; l < s; ++l)
    a *= e[l];
  let i = n < 1 ? 1 : n, p = He(t8.shape) / i, u = [...js(e.slice(0, n)), 1], c = He(e);
  return { sliceRank: n, numUpdates: p, sliceSize: a, strides: u, outputSize: c };
}
function S6(r, t8, e) {
  let o = v(r, "tensor", "tensorScatterupdate"), n = v(t8, "indices", "tensorScatterupdate", "int32"), s = v(e, "updates", "tensorScatterupdate");
  if (xc(s, n, o.shape), o.dtype !== s.dtype)
    throw new Error(`tensor and updates must have the same dtype, instead they are ${o.dtype} and ${s.dtype}.`);
  let a = { tensor: o, indices: n, updates: s }, i = {};
  return T.runKernel(fs, a, i);
}
var W1 = N({ tensorScatterUpdate_: S6 });
function I6(r, t8 = 1, e = true) {
  let o = v(r, "x", "topk");
  if (o.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  let n = o.shape[o.shape.length - 1];
  if (t8 < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${t8}`);
  if (t8 > n)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${t8}`);
  let s = { x: o }, a = { k: t8, sorted: e }, [i, p] = T.runKernel(Rs, s, a);
  return { values: i, indices: p };
}
var U1 = N({ topk_: I6 });
function v6(r, t8 = 0, e = 1, o, n) {
  if (wt(r), o != null && o === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  let s = new Zu(t8, e, o, true, n), a = me(r, o);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var G1 = N({ truncatedNormal_: v6 });
function k6(r, t8 = 0) {
  let e = v(r, "x", "unique", "string_or_numeric");
  $(e.rank > 0, () => "The input tensor must be at least 1D");
  let o = { x: e }, n = { axis: t8 }, [s, a] = T.runKernel(Zi, o, n);
  return { values: s, indices: a };
}
var H1 = N({ unique_: k6 });
function N6(r, t8, e) {
  let o = v(r, "x", "unsortedSegmentSum"), n = v(t8, "segmentIds", "unsortedSegmentSum", "int32");
  $(qa(e), () => "numSegments must be of dtype int");
  let s = { x: o, segmentIds: n }, a = { numSegments: e };
  return T.runKernel(Ji, s, a);
}
var K1 = N({ unsortedSegmentSum_: N6 });
function T6(r, t8 = 0) {
  let e = v(r, "x", "unstack", "string_or_numeric");
  $(t8 >= -e.shape.length && t8 < e.shape.length, () => `Axis = ${t8} is not in [-${e.shape.length}, ${e.shape.length})`);
  let o = { value: e }, n = { axis: t8 };
  return T.runKernel(wa, o, n);
}
var fo = N({ unstack_: T6 });
function q1(r, t8) {
  return $l(r, t8, "right");
}
function j1(r, t8 = true, e, o) {
  return T.makeVariable(r, t8, e, o);
}
function Yd(r, t8) {
  let e = [];
  for (let s = 0; s < t8.length; s++)
    t8[s] && e.push(s);
  let o = me(r, "int32"), n = me([e.length, r.length], "int32");
  for (let s = 0; s < e.length; s++) {
    let a = o.indexToLoc(e[s]), i = s * r.length;
    n.values.set(a, i);
  }
  return n.toTensor();
}
async function _6(r) {
  let t8 = v(r, "condition", "whereAsync", "bool"), e = await t8.data(), o = Yd(t8.shape, e);
  return r !== t8 && t8.dispose(), o;
}
var Qd = _6;
async function $6(r, t8, e) {
  let o = v(r, "tensor", "boolMask"), n = v(t8, "mask", "boolMask", "bool"), s = e == null ? 0 : e, a = n.rank, i = o.shape;
  $(a > 0, () => "mask cannot be scalar"), yt(i.slice(s, s + a), n.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let p = 1;
  for (let h = s; h < s + a; h++)
    p *= i[h];
  let u = i.slice(0, s).concat([p], i.slice(s + a)), c = W(o, u), l = W(n, [-1]), m = await Qd(l), d = gc(m, [1]), f = Id(c, d, s);
  return r !== o && o.dispose(), t8 !== n && n.dispose(), d.dispose(), c.dispose(), l.dispose(), m.dispose(), f;
}
var E6 = $6;
function R6(r, t8, e) {
  let o = v(r, "x", "transpose");
  if (t8 == null && (t8 = o.shape.map((a, i) => i).reverse()), $(o.rank === t8.length, () => `Error in transpose: rank of input ${o.rank} must match length of perm ${t8}.`), t8.forEach((a) => {
    $(a >= 0 && a < o.rank, () => `All entries in 'perm' must be between 0 and ${o.rank - 1} but got ${t8}`);
  }), o.rank <= 1)
    return o.clone();
  let n = { x: o }, s = { perm: t8 };
  return o.dtype === "complex64" ? De(() => {
    let a = ci(o), i = lu(o);
    return a = T.runKernel(co, { x: a }, s), i = T.runKernel(co, { x: i }, s), e && (i = cr(i)), Er(a, i);
  }) : T.runKernel(co, n, s);
}
var yc = N({ transpose_: R6 });
function D6(r, t8, e, o, n = true) {
  let s = v(r, "v", "movingAverage"), a = v(t8, "x", "movingAverage"), i = v(e, "decay", "movingAverage");
  Cw(s, a), $(Cr(s.shape, a.shape), () => "Shape mismatch in v and x");
  let p = ke(1), u = Te(p, i), c = se(Te(a, s), u);
  if (n) {
    $(o != null, () => "When using zeroDebias: true, step is required.");
    let l = v(o, "step", "movingAverage");
    c = je(c, Te(p, ui(i, l)));
  }
  return Ce(s, c);
}
var A6 = N({ movingAverage_: D6 });
function F6(r, t8, e) {
  wt(e);
  let o = v(r, "indices", "scatterND", "int32"), n = v(t8, "updates", "scatterND");
  xc(n, o, e);
  let s = { indices: o, updates: n }, a = { shape: e };
  return T.runKernel(ds, s, a);
}
var P6 = N({ scatterND_: F6 });
function X1(r, t8, e, o) {
  if (r.dtype !== "int32")
    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);
  if (r.rank > 2)
    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);
  let n = r.rank > 0 ? r.shape[0] : 1, s = r.rank > 1 ? r.shape[1] : 1;
  if (e.length !== s)
    throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${s}.`);
  let a = t8.size;
  if (!(t8.rank === 0 || t8.rank === 1 && a === n))
    throw new Error(`sparseValues has incorrect shape ${t8.shape}, should be [] or [${n}]`);
  if (t8.dtype !== o.dtype)
    throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
function M6(r, t8, e, o = 0) {
  wt(e);
  let n = v(r, "sparseIndices", "sparseToDense", "int32"), s = v(t8, "sparseValues", "sparseToDense", "string_or_numeric"), a = v(o, "defaultValue", "sparseToDense", s.dtype);
  X1(n, s, e, a);
  let i = { sparseIndices: n, sparseValues: s, defaultValue: a }, p = { outputShape: e };
  return T.runKernel(ks, i, p);
}
var L6 = N({ sparseToDense_: M6 });
function B6(r, t8) {
  let e = v(t8, "indices", "gatherND", "int32"), n = { params: v(r, "x", "gatherND", "string_or_numeric"), indices: e };
  return T.runKernel(kn, n);
}
var z6 = N({ gatherND_: B6 });
function Y1(r, t8) {
  if (t8 == null)
    return r.shape.slice();
  if (Cr(r.shape, t8))
    return t8;
  if (r.shape.length === t8.length) {
    let e = [];
    for (let o = 0; o < r.shape.length; o++)
      t8[o] == null && r.shape[o] != null ? e.push(r.shape[o]) : e.push(t8[o]);
    return e;
  }
  return t8;
}
function V6(r, t8, e, o) {
  let n = v(r, "x", "dropout");
  if ($(n.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`), $(t8 >= 0 && t8 < 1, () => `rate must be a float in the range [0, 1), but got ${t8}.`), t8 === 0)
    return r instanceof ut ? n.clone() : n;
  let s = Y1(n, e), a = 1 - t8, i = je(Sd(Ce(dc(s, 0, 1, "float32", o), a)), a);
  return se(n, i);
}
var W6 = N({ dropout_: V6 });
function Qw(r) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(r) / Math.log(2))));
}
function Rl(r, t8, e) {
  let o = 1 - r % 2, n = new Float32Array(r);
  for (let s = 0; s < r; ++s) {
    let a = 2 * Math.PI * s / (r + o - 1);
    n[s] = t8 - e * Math.cos(a);
  }
  return tr(n, "float32");
}
async function U6(r, t8, e = 1) {
  let o = v(r, "predictions", "inTopK"), n = v(t8, "targets", "inTopK");
  $(o.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`), $(o.rank - 1 === n.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`), yt(o.shape.slice(0, o.shape.length - 1), n.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  let s = o.shape[o.shape.length - 1];
  $(e > 0 && e <= s, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${e}`);
  let a = await o.data(), i = await n.data(), [p, u] = [a.length / s, s], c = ew("bool", p);
  for (let l = 0; l < p; l++) {
    let m = l * u, d = a.subarray(m, m + u), f = [];
    for (let h = 0; h < d.length; h++)
      f.push({ value: d[h], index: h });
    f.sort((h, g) => g.value - h.value), c[l] = 0;
    for (let h = 0; h < e; h++)
      if (f[h].index === i[l]) {
        c[l] = 1;
        break;
      }
  }
  return r !== o && o.dispose(), t8 !== n && n.dispose(), ur(c, n.shape, "bool");
}
var G6 = U6;
var Zw = {};
qe(Zw, { conv2d: () => Z1, depthwiseConv2d: () => tN, matMul: () => rN });
function H6(r, t8, e, o, n, s = "NHWC", a) {
  let i = r;
  r.rank === 3 && (i = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let p = t8;
  p.rank === 3 && (p = W(t8, [1, t8.shape[0], t8.shape[1], t8.shape[2]])), $(i.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`), $(p.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${p.shape}.`), $(e.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);
  let u = s === "NHWC" ? i.shape[3] : i.shape[1], c = s === "NHWC" ? p.shape[3] : p.shape[1];
  $(u === e[2], () => `Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`), $(c === e[3], () => `Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`), Bt("conv2dDerFilter", n, a);
  let l = { x: i, dy: p }, m = { strides: o, pad: n, dataFormat: s, dimRoundingMode: a, filterShape: e };
  return T.runKernel(Oi, l, m);
}
var Q1 = N({ conv2DBackpropFilter_: H6 });
function ep(r, t8, e) {
  if (e == null || e === "linear")
    return r;
  if (e === "relu")
    return se(r, jd(t8));
  throw new Error(`Cannot compute gradient for fused activation ${e}.`);
}
function tp(r, t8) {
  let e = t8, o = yd(r.shape, t8.shape);
  return o.length > 0 && (e = ot(e, o)), W(e, r.shape);
}
function rp(r, t8, e, o) {
  if (t8 === "linear")
    return r;
  if (t8 === "relu")
    return du(r);
  if (t8 === "elu")
    return Cd(r);
  if (t8 === "relu6")
    return Gd(r);
  if (t8 === "prelu")
    return Md(r, e);
  if (t8 === "leakyrelu")
    return kd(r, o);
  if (t8 === "sigmoid")
    return $a(r);
  throw new Error(`Unknown fused activation ${t8}.`);
}
var op = (r, t8) => !(r > 0) || t8 === "linear";
function K6({ x: r, filter: t8, strides: e, pad: o, dataFormat: n = "NHWC", dilations: s = [1, 1], dimRoundingMode: a, bias: i, activation: p = "linear", preluActivationWeights: u, leakyreluAlpha: c }) {
  if (p = p || "linear", op(T.state.gradientDepth, p) === false) {
    $(n === "NHWC", () => `Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let _ = uu(r, t8, e, o, n, s, a);
    return i != null && (_ = Ce(_, i)), rp(_, p, u, c);
  }
  let l = v(r, "x", "conv2d", "float32"), m = v(t8, "filter", "conv2d", "float32"), d = l, f = false;
  l.rank === 3 && (f = true, d = W(l, [1, l.shape[0], l.shape[1], l.shape[2]])), $(d.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`), $(m.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`), Bt("fused conv2d", o, a);
  let h = n === "NHWC" ? d.shape[3] : d.shape[1];
  $(m.shape[2] === h, () => `Error in conv2d: depth of input (${h}) must match input depth for filter ${m.shape[2]}.`), $(xr(e, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);
  let g = Hu(d.shape, m.shape, e, s, o, a), x;
  i != null && (x = v(i, "bias", "fused conv2d"), [x] = Oe(x, l), n === "NHWC" ? rt(g.outShape, x.shape) : ($(x.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`), $(x.shape.length === 0 || x.shape[0] === g.outChannels || x.shape[0] === 1, () => `Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
  let b;
  if (u != null) {
    let _ = u.shape;
    if ($(_.length <= 1 || _.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${_.length}.`), _.length === 1)
      $(_[0] === 1 || _[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${_}) is not compatible with the number of output channels (${g.outChannels}).`);
    else if (_.length === 3)
      try {
        rt(_, g.outShape);
      } catch (E) {
        let R = `Error in fused conv2d: PReLU activation weights (${_}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
        throw Error(R);
      }
    b = v(u, "prelu weights", "fused conv2d");
  }
  let C = (_, E) => {
    $(n === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);
    let [R, D, P, O] = E, M = ep(_, P, p);
    $(Gu(s), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    let L = xd(D.shape, M, R, e, o), B = Q1(D, M, R.shape, e, o), z = [L, B];
    if (O != null) {
      let U = tp(O, M);
      z.push(U);
    }
    return z;
  }, S = { x: d, filter: m, bias: x, preluActivationWeights: b }, k = { strides: e, pad: o, dataFormat: n, dilations: s, dimRoundingMode: a, activation: p, leakyreluAlpha: c };
  return i == null ? vr((E, R, D) => {
    let P = T.runKernel(vo, S, k);
    return D([R, E, P]), f && (P = W(P, [P.shape[1], P.shape[2], P.shape[3]])), { value: P, gradFunc: C };
  })(d, m) : vr((E, R, D, P) => {
    let O = T.runKernel(vo, S, k);
    return P([R, E, O, D]), f && (O = W(O, [O.shape[1], O.shape[2], O.shape[3]])), { value: O, gradFunc: C };
  })(d, m, x);
}
var Z1 = N({ fusedConv2d_: K6 });
function q6(r, t8, e, o, n, s = [1, 1], a) {
  let i = r;
  r.rank === 3 && (i = W(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let p = t8;
  p.rank === 3 && (p = W(t8, [1, t8.shape[0], t8.shape[1], t8.shape[2]]));
  let u = { x: i, dy: p }, c = { strides: o, pad: n, dimRoundingMode: a, dilations: s, filterShape: e };
  return T.runKernel(Mi, u, c);
}
var J1 = N({ depthwiseConv2dNativeBackpropFilter_: q6 });
function j6(r, t8, e, o, n, s = [1, 1], a) {
  let i = t8, p = false;
  t8.rank === 3 && (p = true, i = W(t8, [1, t8.shape[0], t8.shape[1], t8.shape[2]]));
  let u = { dy: i, filter: e }, c = { strides: o, pad: n, dimRoundingMode: a, dilations: s, inputShape: r }, l = T.runKernel(Li, u, c);
  return p ? W(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var eN = N({ depthwiseConv2dNativeBackpropInput_: j6 });
function X6({ x: r, filter: t8, strides: e, pad: o, dataFormat: n = "NHWC", dilations: s = [1, 1], dimRoundingMode: a, bias: i, activation: p = "linear", preluActivationWeights: u, leakyreluAlpha: c }) {
  if (op(T.state.gradientDepth, p) === false) {
    let k = lc(r, t8, e, o, n, s, a);
    return i != null && (k = Ce(k, i)), rp(k, p, u, c);
  }
  let l = v(r, "x", "depthwiseConv2d", "float32"), m = v(t8, "filter", "depthwiseConv2d", "float32"), d = l, f = false;
  l.rank === 3 && (f = true, d = W(l, [1, l.shape[0], l.shape[1], l.shape[2]])), $(d.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`), $(m.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`), $(d.shape[3] === m.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`), s == null && (s = [1, 1]), $(xr(e, s), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`), Bt("fused depthwiseConv2d", o, a);
  let h = Hu(d.shape, m.shape, e, s, o, a, true), g;
  i != null && (g = v(i, "bias", "fused conv2d"), [g] = Oe(g, l), rt(h.outShape, g.shape));
  let x;
  u != null && (x = v(u, "prelu weights", "fused depthwiseConv2d"));
  let b = (k, _) => {
    $(Gu(s), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);
    let [E, R, D, P] = _, O = ep(k, D, p), M = eN(R.shape, O, E, e, o, s, a), L = J1(R, O, E.shape, e, o, s, a);
    if (P != null) {
      let B = tp(g, O);
      return [M, L, B];
    }
    return [M, L];
  }, C = { x: d, filter: m, bias: g, preluActivationWeights: x }, S = { strides: e, pad: o, dataFormat: n, dilations: s, dimRoundingMode: a, activation: p, leakyreluAlpha: c };
  return i == null ? vr((_, E, R) => {
    let D = T.runKernel(ko, C, S);
    return R([E, _, D]), f && (D = W(D, [D.shape[1], D.shape[2], D.shape[3]])), { value: D, gradFunc: b };
  })(d, m) : vr((_, E, R, D) => {
    let P = T.runKernel(ko, C, S);
    return D([E, _, P, R]), f && (P = W(P, [P.shape[1], P.shape[2], P.shape[3]])), { value: P, gradFunc: b };
  })(d, m, g);
}
var tN = N({ fusedDepthwiseConv2d_: X6 });
function Y6({ a: r, b: t8, transposeA: e = false, transposeB: o = false, bias: n, activation: s = "linear", preluActivationWeights: a, leakyreluAlpha: i = 0.2 }) {
  if (op(T.state.gradientDepth, s) === false) {
    let O = Ze(r, t8, e, o);
    return n != null && (O = Ce(O, n)), rp(O, s, a, i);
  }
  let p = v(r, "a", "fused matMul"), u = v(t8, "b", "fused matMul");
  [p, u] = Oe(p, u);
  let c = e ? p.shape[p.rank - 2] : p.shape[p.rank - 1], l = o ? u.shape[u.rank - 1] : u.shape[u.rank - 2], m = e ? p.shape[p.rank - 1] : p.shape[p.rank - 2], d = o ? u.shape[u.rank - 2] : u.shape[u.rank - 1], f = p.shape.slice(0, -2), h = u.shape.slice(0, -2), g = He(f), x = He(h);
  $(c === l, () => `Error in fused matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${p.shape} and ${u.shape} and transposeA=${e} and transposeB=${o} must match.`);
  let C = rt(p.shape.slice(0, -2), u.shape.slice(0, -2)).concat([m, d]), S = e ? W(p, [g, c, m]) : W(p, [g, m, c]), k = o ? W(u, [x, d, l]) : W(u, [x, l, d]), _;
  n != null && (_ = v(n, "bias", "fused matMul"), [_] = Oe(_, p), rt(C, _.shape));
  let E;
  a != null && (E = v(a, "prelu weights", "fused matMul"));
  let R = (O, M) => {
    let [L, B, z, U] = M, j = ep(W(O, z.shape), z, s), q, Y;
    if (!e && !o ? (q = Ze(j, B, false, true), Y = Ze(L, j, true, false)) : !e && o ? (q = Ze(j, B, false, false), Y = Ze(j, L, true, false)) : e && !o ? (q = Ze(B, j, false, true), Y = Ze(L, j, false, false)) : (q = Ze(B, j, true, true), Y = Ze(j, L, true, true)), n != null) {
      let J = tp(U, j);
      return [q, Y, J];
    } else
      return [q, Y];
  }, D = { a: S, b: k, bias: _, preluActivationWeights: E }, P = { transposeA: e, transposeB: o, activation: s, leakyreluAlpha: i };
  return n == null ? vr((M, L, B) => {
    let z = T.runKernel(Io, D, P);
    return B([M, L, z]), { value: W(z, C), gradFunc: R };
  })(S, k) : vr((M, L, B, z) => {
    let U = T.runKernel(Io, D, P);
    return z([M, L, U, B]), { value: W(U, C), gradFunc: R };
  })(S, k, _);
}
var rN = N({ fusedMatMul_: Y6 });
function Q6(r) {
  return Rl(r, 0.54, 0.46);
}
var oN = N({ hammingWindow_: Q6 });
function Z6(r) {
  return Rl(r, 0.5, 0.5);
}
var Zd = N({ hannWindow_: Z6 });
function J6(r, t8, e, o = false, n = 0) {
  let s = 0, a = [];
  for (; s + t8 <= r.size; )
    a.push(Xe(r, s, t8)), s += e;
  if (o)
    for (; s < r.size; ) {
      let i = s + t8 - r.size, p = bt([Xe(r, s, t8 - i), Ea([i], n)]);
      a.push(p), s += e;
    }
  return a.length === 0 ? fu([], [0, t8]) : W(bt(a), [a.length, t8]);
}
var Jd = N({ frame_: J6 });
function ej(r, t8, e, o, n = Zd) {
  o == null && (o = Qw(t8));
  let s = Jd(r, t8, e), a = se(s, n(t8));
  return hc(a, o);
}
var nN = N({ stft_: ej });
function tj(r, t8, e, o, n = "bilinear", s = 0) {
  let a = v(r, "image", "cropAndResize"), i = v(t8, "boxes", "cropAndResize", "float32"), p = v(e, "boxInd", "cropAndResize", "int32"), u = i.shape[0];
  $(a.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`), $(i.rank === 2 && i.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`), $(p.rank === 1 && p.shape[0] === u, () => `Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`), $(o.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`), $(o[0] >= 1 && o[1] >= 1, () => `cropSize must be atleast [1,1], but was ${o}`), $(n === "bilinear" || n === "nearest", () => `method must be bilinear or nearest, but was ${n}`);
  let c = { image: a, boxes: i, boxInd: p }, l = { method: n, extrapolationValue: s, cropSize: o };
  return T.runKernel(ln, c, l);
}
var sN = N({ cropAndResize_: tj });
function rj(r) {
  let t8 = v(r, "image", "flipLeftRight", "float32");
  $(t8.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${t8.rank}.`);
  let e = { image: t8 };
  return T.runKernel(wn, e, {});
}
var aN = N({ flipLeftRight_: rj });
function oj(r) {
  let t8 = v(r, "image", "grayscaleToRGB"), e = t8.rank - 1, o = t8.shape[e];
  $(t8.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t8.rank}.`), $(o === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);
  let n = new Array(t8.rank);
  return n.fill(1, 0, e), n[e] = 3, cu(t8, n);
}
var iN = N({ grayscaleToRGB_: oj });
function nj(r) {
  let t8 = v(r, "image", "RGBToGrayscale"), e = t8.rank - 1, o = t8.shape[e];
  $(t8.rank >= 2, () => `Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t8.rank}.`), $(o === 3, () => `Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${o}.`);
  let n = t8.dtype, s = We(t8, "float32"), a = tr([0.2989, 0.587, 0.114]), i;
  switch (t8.rank) {
    case 2:
      i = pu("ij,j->i", s, a);
      break;
    case 3:
      i = pu("ijk,k->ij", s, a);
      break;
    case 4:
      i = pu("ijkl,l->ijk", s, a);
      break;
    case 5:
      i = pu("ijklm,m->ijkl", s, a);
      break;
    case 6:
      i = pu("ijklmn,n->ijklm", s, a);
      break;
    default:
      throw new Error("Not a valid tensor rank.");
  }
  return i = Ms(i, -1), We(i, n);
}
var uN = N({ rgbToGrayscale_: nj });
function sj(r, t8, e = 0, o = 0.5) {
  let n = v(r, "image", "rotateWithOffset", "float32");
  $(n.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);
  let s = { image: n }, a = { radians: t8, fillValue: e, center: o };
  return T.runKernel(As, s, a);
}
var pN = N({ rotateWithOffset_: sj });
function Eo(r, t8, e, o, n, s) {
  o == null && (o = 0.5), n == null && (n = Number.NEGATIVE_INFINITY), s == null && (s = 0);
  let a = r.shape[0];
  return e = Math.min(e, a), $(0 <= o && o <= 1, () => `iouThreshold must be in [0, 1], but was '${o}'`), $(r.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${r.rank}'`), $(r.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`), $(t8.rank === 1, () => "scores must be a 1D tensor"), $(t8.shape[0] === a, () => `scores has incompatible shape with boxes. Expected ${a}, but was ${t8.shape[0]}`), $(0 <= s && s <= 1, () => `softNmsSigma must be in [0, 1], but was '${s}'`), { maxOutputSize: e, iouThreshold: o, scoreThreshold: n, softNmsSigma: s };
}
function aj(r, t8, e, o = 0.5, n = Number.NEGATIVE_INFINITY) {
  let s = v(r, "boxes", "nonMaxSuppression", "float32"), a = v(t8, "scores", "nonMaxSuppression", "float32"), i = Eo(s, a, e, o, n);
  e = i.maxOutputSize, o = i.iouThreshold, n = i.scoreThreshold;
  let p = { maxOutputSize: e, iouThreshold: o, scoreThreshold: n };
  return T.runKernel(Zn, { boxes: s, scores: a }, p);
}
var cN = N({ nonMaxSuppression_: aj });
function lN(r, t8, e) {
  let o = ij(r, t8, e), n = o < 0 ? -(o + 1) : o;
  r.splice(n, 0, t8);
}
function ij(r, t8, e) {
  return pj(r, t8, e || uj);
}
function uj(r, t8) {
  return r > t8 ? 1 : r < t8 ? -1 : 0;
}
function pj(r, t8, e) {
  let o = 0, n = r.length, s = 0, a = false;
  for (; o < n; ) {
    s = o + (n - o >>> 1);
    let i = e(t8, r[s]);
    i > 0 ? o = s + 1 : (n = s, a = !i);
  }
  return a ? o : -o - 1;
}
function ef(r, t8, e, o, n) {
  return Jw(r, t8, e, o, n, 0);
}
function tf(r, t8, e, o, n, s) {
  return Jw(r, t8, e, o, n, 0, false, s, true);
}
function rf(r, t8, e, o, n, s) {
  return Jw(r, t8, e, o, n, s, true);
}
function Jw(r, t8, e, o, n, s, a = false, i = false, p = false) {
  let u = [];
  for (let g = 0; g < t8.length; g++)
    t8[g] > n && u.push({ score: t8[g], boxIndex: g, suppressBeginIndex: 0 });
  u.sort(mN);
  let c = s > 0 ? -0.5 / s : 0, l = [], m = [];
  for (; l.length < e && u.length > 0; ) {
    let g = u.pop(), { score: x, boxIndex: b, suppressBeginIndex: C } = g;
    if (x < n)
      break;
    let S = false;
    for (let k = l.length - 1; k >= C; --k) {
      let _ = cj(r, b, l[k]);
      if (_ >= o) {
        S = true;
        break;
      }
      if (g.score = g.score * lj(o, c, _), g.score <= n)
        break;
    }
    g.suppressBeginIndex = l.length, S || (g.score === x ? (l.push(b), m.push(g.score)) : g.score > n && lN(u, g, mN));
  }
  let d = l.length, f = e - d;
  i && f > 0 && (l.push(...new Array(f).fill(0)), m.push(...new Array(f).fill(0)));
  let h = { selectedIndices: l };
  return a && (h.selectedScores = m), p && (h.validOutputs = d), h;
}
function cj(r, t8, e) {
  let o = r.subarray(t8 * 4, t8 * 4 + 4), n = r.subarray(e * 4, e * 4 + 4), s = Math.min(o[0], o[2]), a = Math.min(o[1], o[3]), i = Math.max(o[0], o[2]), p = Math.max(o[1], o[3]), u = Math.min(n[0], n[2]), c = Math.min(n[1], n[3]), l = Math.max(n[0], n[2]), m = Math.max(n[1], n[3]), d = (i - s) * (p - a), f = (l - u) * (m - c);
  if (d <= 0 || f <= 0)
    return 0;
  let h = Math.max(s, u), g = Math.max(a, c), x = Math.min(i, l), b = Math.min(p, m), C = Math.max(x - h, 0) * Math.max(b - g, 0);
  return C / (d + f - C);
}
function lj(r, t8, e) {
  let o = Math.exp(t8 * e * e);
  return e <= r ? o : 0;
}
function mN(r, t8) {
  return r.score - t8.score || r.score === t8.score && t8.boxIndex - r.boxIndex;
}
async function mj(r, t8, e, o = 0.5, n = Number.NEGATIVE_INFINITY) {
  let s = v(r, "boxes", "nonMaxSuppressionAsync"), a = v(t8, "scores", "nonMaxSuppressionAsync"), i = Eo(s, a, e, o, n);
  e = i.maxOutputSize, o = i.iouThreshold, n = i.scoreThreshold;
  let p = await Promise.all([s.data(), a.data()]), u = p[0], c = p[1], { selectedIndices: l } = ef(u, c, e, o, n);
  return s !== r && s.dispose(), a !== t8 && a.dispose(), tr(l, "int32");
}
var dN = mj;
function dj(r, t8, e, o = 0.5, n = Number.NEGATIVE_INFINITY, s = 0) {
  let a = v(r, "boxes", "nonMaxSuppression"), i = v(t8, "scores", "nonMaxSuppression"), p = Eo(a, i, e, o, n, s);
  e = p.maxOutputSize, o = p.iouThreshold, n = p.scoreThreshold, s = p.softNmsSigma;
  let u = { boxes: a, scores: i }, c = { maxOutputSize: e, iouThreshold: o, scoreThreshold: n, softNmsSigma: s }, l = T.runKernel(Jn, u, c);
  return { selectedIndices: l[0], selectedScores: l[1] };
}
var fN = N({ nonMaxSuppressionWithScore_: dj });
async function fj(r, t8, e, o = 0.5, n = Number.NEGATIVE_INFINITY, s = 0) {
  let a = v(r, "boxes", "nonMaxSuppressionAsync"), i = v(t8, "scores", "nonMaxSuppressionAsync"), p = Eo(a, i, e, o, n, s);
  e = p.maxOutputSize, o = p.iouThreshold, n = p.scoreThreshold, s = p.softNmsSigma;
  let u = await Promise.all([a.data(), i.data()]), c = u[0], l = u[1], { selectedIndices: m, selectedScores: d } = rf(c, l, e, o, n, s);
  return a !== r && a.dispose(), i !== t8 && i.dispose(), { selectedIndices: tr(m, "int32"), selectedScores: tr(d) };
}
var hN = fj;
function hj(r, t8, e, o = 0.5, n = Number.NEGATIVE_INFINITY, s = false) {
  let a = v(r, "boxes", "nonMaxSuppression"), i = v(t8, "scores", "nonMaxSuppression"), p = Eo(a, i, e, o, n, null), u = p.maxOutputSize, c = p.iouThreshold, l = p.scoreThreshold, m = { boxes: a, scores: i }, d = { maxOutputSize: u, iouThreshold: c, scoreThreshold: l, padToMaxOutputSize: s }, f = T.runKernel(Za, m, d);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
var gN = N({ nonMaxSuppressionPadded_: hj });
async function gj(r, t8, e, o = 0.5, n = Number.NEGATIVE_INFINITY, s = false) {
  let a = v(r, "boxes", "nonMaxSuppressionAsync"), i = v(t8, "scores", "nonMaxSuppressionAsync"), p = Eo(a, i, e, o, n, null), u = p.maxOutputSize, c = p.iouThreshold, l = p.scoreThreshold, [m, d] = await Promise.all([a.data(), i.data()]), { selectedIndices: f, validOutputs: h } = tf(m, d, u, c, l, s);
  return a !== r && a.dispose(), i !== t8 && i.dispose(), { selectedIndices: tr(f, "int32"), validOutputs: ke(h, "int32") };
}
var xN = gj;
function xj(r, t8, e = false, o = false) {
  let n = v(r, "images", "resizeBilinear");
  $(n.rank === 3 || n.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`), $(t8.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${t8}.`), $(o === false || e === false, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let s = n, a = false;
  n.rank === 3 && (a = true, s = W(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let [] = t8, i = { images: s }, p = { alignCorners: e, halfPixelCenters: o, size: t8 }, u = T.runKernel(us, i, p);
  return a ? W(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var yN = N({ resizeBilinear_: xj });
function yj(r, t8, e = false, o = false) {
  let n = v(r, "images", "resizeNearestNeighbor");
  $(n.rank === 3 || n.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`), $(t8.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t8}.`), $(n.dtype === "float32" || n.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), $(o === false || e === false, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let s = n, a = false;
  n.rank === 3 && (a = true, s = W(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let [] = t8, i = { images: s }, p = { alignCorners: e, halfPixelCenters: o, size: t8 }, u = T.runKernel(is, i, p);
  return a ? W(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var bN = N({ resizeNearestNeighbor_: yj });
function bj(r, t8 = "binary", e = false, o = 0.5) {
  let n = v(r, "image", "threshold"), s = 0.2989, a = 0.587, i = 0.114, p = n.shape[0] * n.shape[1], u = se(tr([o]), 255), c, l, m, d;
  if ($(n.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${n.rank}.`), $(n.shape[2] === 3 || n.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`), $(n.dtype === "int32" || n.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`), $(t8 === "otsu" || t8 === "binary", () => `Method must be binary or otsu, but was ${t8}`), n.shape[2] === 3) {
    [c, l, m] = li(n, [1, 1, 1], -1);
    let g = se(c, s), x = se(l, a), b = se(m, i);
    d = Ce(Ce(g, x), b);
  } else
    d = r;
  if (t8 === "otsu") {
    let g = gd(We(Hd(d), "int32"), ur([]), 256);
    u = Cj(g, p);
  }
  let f = e ? mc(d, u) : qu(d, u);
  return We(se(f, 255), "int32");
}
function Cj(r, t8) {
  let e = tr([-1]), o = tr([0]), n = tr([0]), s, a, i, p, u, c;
  for (let l = 0; l < r.size - 1; l++) {
    s = Xe(r, 0, l + 1), a = Xe(r, l + 1), u = je(ot(s), t8), c = je(ot(a), t8);
    let m = ot(se(s, mu(0, s.size)));
    i = je(m, ot(s));
    let d = Ea(a.shape, s.size), f = Ce(mu(0, a.size), d), h = se(a, f);
    p = je(ot(h), ot(a));
    let g = Te(i, p), x = Te(i, p), b = se(u, c);
    n = se(se(b, g), x);
    let C = qu(n, o);
    o = lo(C, n, o), e = lo(C, tr([l]), e);
  }
  return e;
}
var CN = N({ threshold_: bj });
function wj(r, t8, e = "nearest", o = "constant", n = 0, s) {
  let a = v(r, "image", "transform", "float32"), i = v(t8, "transforms", "transform", "float32");
  $(a.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${a.rank}.`), $(i.rank === 2 && (i.shape[0] === a.shape[0] || i.shape[0] === 1) && i.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), $(s == null || s.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${s}.`);
  let p = { image: a, transforms: i }, u = { interpolation: e, fillMode: o, fillValue: n, outputShape: s };
  return T.runKernel(Ds, p, u);
}
var wN = N({ transform_: wj });
function Sj(r, t8, e) {
  let o = v(r, "a", "bandPart");
  $(o.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${o.rank}.`);
  let n = o.shape, [s, a] = o.shape.slice(-2), i, p;
  typeof t8 == "number" ? ($(t8 % 1 === 0, () => `bandPart(): numLower must be an integer, got ${t8}.`), $(t8 <= s, () => `bandPart(): numLower (${t8}) must not be greater than the number of rows (${s}).`), i = v(t8 < 0 ? s : t8, "numLower", "bandPart")) : ($(t8.dtype === "int32", () => "bandPart(): numLower's dtype must be an int32."), i = lo(_l(t8, 0), s, Yu(t8, s))), typeof e == "number" ? ($(e % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${e}.`), $(e <= a, () => `bandPart(): numUpper (${e}) must not be greater than the number of columns (${a}).`), p = v(e < 0 ? a : e, "numUpper", "bandPart")) : ($(e.dtype === "int32", () => "bandPart(): numUpper's dtype must be an int32."), p = lo(_l(e, 0), a, Yu(e, a)));
  let u = W(mu(0, s, 1, "int32"), [-1, 1]), c = mu(0, a, 1, "int32"), l = Te(u, c), m = ju(mc(l, i), vd(l, cr(p))), d = Gr([s, a], o.dtype);
  return W(kr(fo(W(o, [-1, s, a])).map((f) => lo(m, f, d))), n);
}
var SN = N({ bandPart_: Sj });
function Ij(r) {
  let t8;
  if (Array.isArray(r)) {
    t8 = false, $(r != null && r.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    let n = r[0].shape[0];
    for (let s = 1; s < r.length; ++s)
      $(r[s].shape[0] === n, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`);
  } else
    t8 = true, r = li(r, r.shape[0], 0).map((n) => gc(n, [0]));
  $(r.length <= r[0].shape[0], () => `Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);
  let e = [], o = r;
  for (let n = 0; n < r.length; ++n)
    e.push(T.tidy(() => {
      let s = o[n];
      if (n > 0)
        for (let a = 0; a < n; ++a) {
          let i = se(ot(se(e[a], s)), e[a]);
          s = Te(s, i);
        }
      return je(s, Ku(s, "euclidean"));
    }));
  return t8 ? kr(e, 0) : e;
}
var IN = N({ gramSchmidt_: Ij });
function vj(r, t8 = false) {
  if ($(r.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`), r.rank === 2)
    return vN(r, t8);
  {
    let e = r.shape.slice(0, r.shape.length - 2).reduce((p, u) => p * u), o = fo(W(r, [e, r.shape[r.shape.length - 2], r.shape[r.shape.length - 1]]), 0), n = [], s = [];
    o.forEach((p) => {
      let [u, c] = vN(p, t8);
      n.push(u), s.push(c);
    });
    let a = W(kr(n, 0), r.shape), i = W(kr(s, 0), r.shape);
    return [a, i];
  }
}
function vN(r, t8 = false) {
  return T.tidy(() => {
    $(r.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);
    let e = r.shape[0], o = r.shape[1], n = wd(e), s = Ur(r), a = fu([[1]], [1, 1]), i = Ur(a), p = e >= o ? o : e;
    for (let u = 0; u < p; ++u) {
      let c = s, l = i, m = n;
      [i, s, n] = T.tidy(() => {
        let d = Xe(s, [u, u], [e - u, 1]), f = Ku(d), h = Xe(s, [u, u], [1, 1]), g = lo(qu(h, 0), fu([[-1]]), fu([[1]])), x = Te(h, se(g, f)), b = je(d, x);
        b.shape[0] === 1 ? i = Ur(a) : i = bt([a, Xe(b, [1, 0], [b.shape[0] - 1, b.shape[1]])], 0);
        let C = cr(je(Ze(g, x), f)), S = Xe(s, [u, 0], [e - u, o]), k = se(C, i), _ = yc(i);
        if (u === 0)
          s = Te(S, Ze(k, Ze(_, S)));
        else {
          let D = Te(S, Ze(k, Ze(_, S)));
          s = bt([Xe(s, [0, 0], [u, o]), D], 0);
        }
        let E = yc(k), R = Xe(n, [0, u], [e, n.shape[1] - u]);
        if (u === 0)
          n = Te(R, Ze(Ze(R, i), E));
        else {
          let D = Te(R, Ze(Ze(R, i), E));
          n = bt([Xe(n, [0, 0], [e, u]), D], 1);
        }
        return [i, s, n];
      }), Mt([c, l, m]);
    }
    return !t8 && e > o && (n = Xe(n, [0, 0], [e, o]), s = Xe(s, [0, 0], [o, o])), [n, s];
  });
}
var kN = N({ qr_: vj });
var Rt;
(function(r) {
  r[r.NONE = 0] = "NONE", r[r.MEAN = 1] = "MEAN", r[r.SUM = 2] = "SUM", r[r.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Rt || (Rt = {}));
function kj(r, t8, e = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let o = v(r, "losses", "computeWeightedLoss"), n = null;
  t8 != null && (n = v(t8, "weights", "computeWeightedLoss"));
  let s = n == null ? o : se(o, n);
  if (e === Rt.NONE)
    return s;
  if (e === Rt.SUM)
    return ot(s);
  if (e === Rt.MEAN) {
    if (n == null)
      return Xu(s);
    {
      let a = o.size / n.size, i = je(ot(s), ot(n));
      return a > 1 ? je(i, ke(a)) : i;
    }
  }
  if (e === Rt.SUM_BY_NONZERO_WEIGHTS) {
    if (n == null)
      return je(ot(s), ke(o.size));
    {
      let a = se(n, Da(o.shape)), i = We(ot(Pd(a, ke(0))), "float32");
      return je(ot(s), i);
    }
  }
  throw Error(`Unknown reduction: ${e}`);
}
var lr = N({ computeWeightedLoss_: kj });
function Nj(r, t8, e, o = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let n = v(r, "labels", "absoluteDifference"), s = v(t8, "predictions", "absoluteDifference"), a = null;
  e != null && (a = v(e, "weights", "absoluteDifference")), yt(n.shape, s.shape, "Error in absoluteDifference: ");
  let i = Jt(Te(n, s));
  return lr(i, a, o);
}
var NN = N({ absoluteDifference_: Nj });
function Tj(r, t8, e, o, n = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "labels", "cosineDistance"), a = v(t8, "predictions", "cosineDistance"), i = null;
  o != null && (i = v(o, "weights", "cosineDistance")), yt(s.shape, a.shape, "Error in cosineDistance: ");
  let p = ke(1), u = Te(p, ot(se(s, a), e, true));
  return lr(u, i, n);
}
var TN = N({ cosineDistance_: Tj });
function _j(r, t8, e, o = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let n = v(r, "labels", "hingeLoss"), s = v(t8, "predictions", "hingeLoss"), a = null;
  e != null && (a = v(e, "weights", "hingeLoss")), yt(n.shape, s.shape, "Error in hingeLoss: ");
  let i = ke(1);
  n = Te(se(ke(2), n), i);
  let p = du(Te(i, se(n, s)));
  return lr(p, a, o);
}
var _N = N({ hingeLoss_: _j });
function $j(r, t8, e, o = 1, n = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "labels", "huberLoss"), a = v(t8, "predictions", "huberLoss"), i = null;
  e != null && (i = v(e, "weights", "huberLoss")), yt(s.shape, a.shape, "Error in huberLoss: ");
  let p = ke(o), u = Jt(Te(a, s)), c = Yu(u, p), l = Te(u, c), m = Ce(se(ke(0.5), er(c)), se(p, l));
  return lr(m, i, n);
}
var $N = N({ huberLoss_: $j });
function Ej(r, t8, e, o = 1e-7, n = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "labels", "logLoss"), a = v(t8, "predictions", "logLoss"), i = null;
  e != null && (i = v(e, "weights", "logLoss")), yt(s.shape, a.shape, "Error in logLoss: ");
  let p = ke(1), u = ke(o), c = cr(se(s, pi(Ce(a, u)))), l = se(Te(p, s), pi(Ce(Te(p, a), u))), m = Te(c, l);
  return lr(m, i, n);
}
var EN = N({ logLoss_: Ej });
function Rj(r, t8, e, o = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let n = v(r, "labels", "meanSquaredError"), s = v(t8, "predictions", "meanSquaredError"), a = null;
  e != null && (a = v(e, "weights", "meanSquaredError")), yt(n.shape, s.shape, "Error in meanSquaredError: ");
  let i = qd(n, s);
  return lr(i, a, o);
}
var RN = N({ meanSquaredError_: Rj });
function Dj(r, t8) {
  let e = v(r, "labels", "sigmoidCrossEntropyWithLogits"), o = v(t8, "logits", "sigmoidCrossEntropyWithLogits");
  yt(e.shape, o.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  let n = du(o), s = se(o, e), a = Nd($o(cr(Jt(o))));
  return Ce(Te(n, s), a);
}
function Aj(r, t8, e, o = 0, n = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "multiClassLabels", "sigmoidCrossEntropy"), a = v(t8, "logits", "sigmoidCrossEntropy"), i = null;
  if (e != null && (i = v(e, "weights", "sigmoidCrossEntropy")), yt(s.shape, a.shape, "Error in sigmoidCrossEntropy: "), o > 0) {
    let u = ke(o), c = ke(1), l = ke(0.5);
    s = Ce(se(s, Te(c, u)), se(l, u));
  }
  let p = Dj(s, a);
  return lr(p, i, n);
}
var DN = N({ sigmoidCrossEntropy_: Aj });
function Fj(r, t8, e = -1) {
  if (e === -1 && (e = t8.rank - 1), e !== t8.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t8.rank} and dim was ${e}`);
  return vr((n, s, a) => {
    let p = $d(s, [e], true), u = Te(We(s, "float32"), p);
    a([n, u]);
    let c = cr(se(u, n));
    return { value: ot(c, [e]), gradFunc: (d, f) => {
      let [h, g] = f, x = ii(d.shape, [e]);
      return [se(W(d, x), Te(We(h, "float32"), $o(g))), se(W(d, x), Te($o(g), We(h, "float32")))];
    } };
  })(r, t8);
}
function Pj(r, t8, e, o = 0, n = Rt.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "onehotLabels", "softmaxCrossEntropy"), a = v(t8, "logits", "softmaxCrossEntropy"), i = null;
  if (e != null && (i = v(e, "weights", "softmaxCrossEntropy")), yt(s.shape, a.shape, "Error in softmaxCrossEntropy: "), o > 0) {
    let u = ke(o), c = ke(1), l = ke(s.shape[1]);
    s = Ce(se(s, Te(c, u)), je(u, l));
  }
  let p = Fj(s, a);
  return lr(p, i, n);
}
var AN = N({ softmaxCrossEntropy_: Pj });
function Oj(r, t8, e, o) {
  let n = v(r, "indices", "sparseFillEmptyRows", "int32"), s = v(t8, "values", "sparseFillEmptyRows"), a = v(e, "denseShape", "sparseFillEmptyRows", "int32"), i = v(o, "defaultValue", "sparseFillEmptyRows", s.dtype);
  if (n.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);
  if (a.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);
  if (i.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${i.shape}`);
  let p = { indices: n, values: s, denseShape: a, defaultValue: i }, u = T.runKernel(ji, p);
  return { outputIndices: u[0], outputValues: u[1], emptyRowIndicator: u[2], reverseIndexMap: u[3] };
}
var FN = N({ sparseFillEmptyRows_: Oj });
function Mj(r, t8, e) {
  let o = v(r, "inputIndices", "sparseReshape", "int32"), n = v(t8, "inputShape", "sparseReshape", "int32"), s = v(e, "newShape", "sparseReshape", "int32");
  if (o.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);
  if (n.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);
  let a = { inputIndices: o, inputShape: n, newShape: s }, i = T.runKernel(ti, a);
  return { outputIndices: i[0], outputShape: i[1] };
}
var PN = N({ sparseReshape_: Mj });
function Lj(r, t8, e) {
  let o = v(r, "data", "sparseSegmentMean"), n = v(t8, "indices", "sparseSegmentMean", "int32"), s = v(e, "segmentIds", "sparseSegmentMean", "int32");
  if (o.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);
  let a = { data: o, indices: n, segmentIds: s };
  return T.runKernel(ya, a);
}
var ON = N({ sparseSegmentMean_: Lj });
function Bj(r, t8, e) {
  let o = v(r, "data", "sparseSegmentSum"), n = v(t8, "indices", "sparseSegmentSum", "int32"), s = v(e, "segmentIds", "sparseSegmentSum", "int32");
  if (o.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);
  let a = { data: o, indices: n, segmentIds: s };
  return T.runKernel(ba, a);
}
var MN = N({ sparseSegmentSum_: Bj });
function zj(r, t8, e, o, n, s, a, i) {
  let p = v(r, "data", "stringNGrams", "string");
  if (p.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (p.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${p.shape}`);
  let u = v(t8, "dataSplits", "stringNGrams");
  if (u.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  let c = { separator: e, nGramWidths: o, leftPad: n, rightPad: s, padWidth: a, preserveShortSequences: i }, l = { data: p, dataSplits: u }, m = T.runKernel(Ca, l, c);
  return { nGrams: m[0], nGramsSplits: m[1] };
}
var LN = N({ stringNGrams_: zj });
function Vj(r, t8, e = true) {
  let o = v(r, "input", "stringSplit", "string"), n = v(t8, "delimiter", "stringSplit", "string");
  if (o.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);
  if (n.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);
  let s = { skipEmpty: e }, a = { input: o, delimiter: n }, i = T.runKernel(Yi, a, s);
  return { indices: i[0], values: i[1], shape: i[2] };
}
var BN = N({ stringSplit_: Vj });
function Wj(r, t8) {
  let e = v(r, "input", "stringToHashBucketFast", "string"), o = { numBuckets: t8 };
  if (t8 <= 0)
    throw new Error("Number of buckets must be at least 1");
  let n = { input: e };
  return T.runKernel(Qi, n, o);
}
var zN = N({ stringToHashBucketFast_: Wj });
function Uj(r, t8, e, o = true) {
  let n = v(r, "input", "staticRegexReplace", "string"), s = { pattern: t8, rewrite: e, replaceGlobal: o };
  return T.runKernel(Ou, { x: n }, s);
}
var VN = N({ staticRegexReplace_: Uj });
var Gj = { fft: fc, ifft: Ju, rfft: hc, irfft: Kd };
var Hj = { hammingWindow: oN, hannWindow: Zd, frame: Jd, stft: nN };
var Kj = { flipLeftRight: aN, grayscaleToRGB: iN, resizeNearestNeighbor: bN, resizeBilinear: yN, rgbToGrayscale: uN, rotateWithOffset: pN, cropAndResize: sN, nonMaxSuppression: cN, nonMaxSuppressionAsync: dN, nonMaxSuppressionWithScore: fN, nonMaxSuppressionWithScoreAsync: hN, nonMaxSuppressionPadded: gN, nonMaxSuppressionPaddedAsync: xN, threshold: CN, transform: wN };
var qj = { bandPart: SN, gramSchmidt: IN, qr: kN };
var jj = { absoluteDifference: NN, computeWeightedLoss: lr, cosineDistance: TN, hingeLoss: _N, huberLoss: $N, logLoss: EN, meanSquaredError: RN, sigmoidCrossEntropy: DN, softmaxCrossEntropy: AN };
var Xj = { sparseFillEmptyRows: FN, sparseReshape: PN, sparseSegmentMean: ON, sparseSegmentSum: MN };
var Yj = { stringNGrams: LN, stringSplit: BN, stringToHashBucketFast: zN, staticRegexReplace: VN };
var WN = {};
qe(WN, { Serializable: () => Dl, SerializationMap: () => Fa, getRegisteredName: () => Zj, registerClass: () => tS });
var Qj = /* @__PURE__ */ new Map();
var eS = /* @__PURE__ */ new Map();
var Dl = class {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(t8, e) {
    return new t8(e);
  }
};
var Fa = class {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return Fa.instance == null && (Fa.instance = new Fa()), Fa.instance;
  }
  static register(t8) {
    Fa.getMap().classNameMap[t8.className] = [t8, t8.fromConfig];
  }
};
function tS(r, t8, e) {
  $(r.className != null, () => "Class being registered does not have the static className property defined."), $(typeof r.className == "string", () => "className is required to be a string, but got type " + typeof r.className), $(r.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), typeof t8 == "undefined" && (t8 = "Custom"), typeof e == "undefined" && (e = r.className);
  let o = e, n = t8 + ">" + o;
  return Fa.register(r), Qj.set(n, r), eS.set(r, n), r;
}
function Zj(r) {
  return eS.has(r) ? eS.get(r) : r.className;
}
var Nr = class extends Dl {
  minimize(t8, e = false, o) {
    let { value: n, grads: s } = this.computeGradients(t8, o);
    if (o != null) {
      let a = o.map((i) => ({ name: i.name, tensor: s[i.name] }));
      this.applyGradients(a);
    } else
      this.applyGradients(s);
    return Mt(s), e ? n : (n.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(t8, e) {
    return zw(t8, e);
  }
  dispose() {
    this.iterations_ != null && Mt(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), { name: "iter", tensor: ke(this.iterations_, "int32") };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(t8) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(t8) {
    return this.iterations_ = (await t8[0].tensor.data())[0], t8.slice(1);
  }
};
Object.defineProperty(Nr, Symbol.hasInstance, { value: (r) => r.minimize != null && r.computeGradients != null && r.applyGradients != null });
var np = class extends Nr {
  static get className() {
    return "Adadelta";
  }
  constructor(t8, e, o = null) {
    super(), this.learningRate = t8, this.rho = e, this.epsilon = o, this.accumulatedGrads = [], this.accumulatedUpdates = [], o == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(t8) {
    (Array.isArray(t8) ? t8.map((o) => o.name) : Object.keys(t8)).forEach((o, n) => {
      let s = T.registeredVariables[o], a = false;
      this.accumulatedGrads[n] == null && (this.accumulatedGrads[n] = { originalName: `${o}/accum_grad`, variable: De(() => Ht(s).variable(a)) }), this.accumulatedUpdates[n] == null && (this.accumulatedUpdates[n] = { originalName: `${o}/accum_var`, variable: De(() => Ht(s).variable(a)) });
      let i = Array.isArray(t8) ? t8[n].tensor : t8[o];
      if (i == null)
        return;
      let p = this.accumulatedGrads[n].variable, u = this.accumulatedUpdates[n].variable;
      De(() => {
        let c = Ce(se(p, this.rho), se(er(i), 1 - this.rho)), l = se(je(Dr(Ce(u, this.epsilon)), Dr(Ce(p, this.epsilon))), i), m = Ce(se(u, this.rho), se(er(l), 1 - this.rho));
        p.assign(c), u.assign(m);
        let d = Ce(se(l, -this.learningRate), s);
        s.assign(d);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Mt(this.accumulatedGrads.map((t8) => t8.variable)), Mt(this.accumulatedUpdates.map((t8) => t8.variable)));
  }
  async getWeights() {
    let t8 = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(t8.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t8) {
    t8 = await this.extractIterations(t8);
    let e = t8.length / 2, o = false;
    this.accumulatedGrads = t8.slice(0, e).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })), this.accumulatedUpdates = t8.slice(e, e * 2).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }
  static fromConfig(t8, e) {
    return new t8(e.learningRate, e.rho, e.epsilon);
  }
};
var sp = class extends Nr {
  static get className() {
    return "Adagrad";
  }
  constructor(t8, e = 0.1) {
    super(), this.learningRate = t8, this.initialAccumulatorValue = e, this.accumulatedGrads = [];
  }
  applyGradients(t8) {
    (Array.isArray(t8) ? t8.map((o) => o.name) : Object.keys(t8)).forEach((o, n) => {
      let s = T.registeredVariables[o];
      this.accumulatedGrads[n] == null && (this.accumulatedGrads[n] = { originalName: `${o}/accumulator`, variable: De(() => Ea(s.shape, this.initialAccumulatorValue).variable(false)) });
      let a = Array.isArray(t8) ? t8[n].tensor : t8[o];
      if (a == null)
        return;
      let i = this.accumulatedGrads[n].variable;
      De(() => {
        let p = Ce(i, er(a));
        i.assign(p);
        let u = Ce(se(je(a, Dr(Ce(p, T.backend.epsilon()))), -this.learningRate), s);
        s.assign(u);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Mt(this.accumulatedGrads.map((t8) => t8.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((t8) => ({ name: t8.originalName, tensor: t8.variable })));
  }
  async setWeights(t8) {
    t8 = await this.extractIterations(t8);
    let e = false;
    this.accumulatedGrads = t8.map((o) => ({ originalName: o.name, variable: o.tensor.variable(e) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }
  static fromConfig(t8, e) {
    return new t8(e.learningRate, e.initialAccumulatorValue);
  }
};
var ap = class extends Nr {
  static get className() {
    return "Adam";
  }
  constructor(t8, e, o, n = null) {
    super(), this.learningRate = t8, this.beta1 = e, this.beta2 = o, this.epsilon = n, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], De(() => {
      this.accBeta1 = ke(e).variable(), this.accBeta2 = ke(o).variable();
    }), n == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(t8) {
    let e = Array.isArray(t8) ? t8.map((o) => o.name) : Object.keys(t8);
    De(() => {
      let o = Te(1, this.accBeta1), n = Te(1, this.accBeta2);
      e.forEach((s, a) => {
        let i = T.registeredVariables[s], p = false;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = { originalName: `${s}/m`, variable: De(() => Ht(i).variable(p)) }), this.accumulatedSecondMoment[a] == null && (this.accumulatedSecondMoment[a] = { originalName: `${s}/v`, variable: De(() => Ht(i).variable(p)) });
        let u = Array.isArray(t8) ? t8[a].tensor : t8[s];
        if (u == null)
          return;
        let c = this.accumulatedFirstMoment[a].variable, l = this.accumulatedSecondMoment[a].variable, m = Ce(se(c, this.beta1), se(u, 1 - this.beta1)), d = Ce(se(l, this.beta2), se(er(u), 1 - this.beta2)), f = je(m, o), h = je(d, n);
        c.assign(m), l.assign(d);
        let g = Ce(se(je(f, Ce(Dr(h), this.epsilon)), -this.learningRate), i);
        i.assign(g);
      }), this.accBeta1.assign(se(this.accBeta1, this.beta1)), this.accBeta2.assign(se(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Mt(this.accumulatedFirstMoment.map((t8) => t8.variable)), this.accumulatedSecondMoment != null && Mt(this.accumulatedSecondMoment.map((t8) => t8.variable));
  }
  async getWeights() {
    let t8 = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(t8.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t8) {
    t8 = await this.extractIterations(t8), De(() => {
      this.accBeta1.assign(ui(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(ui(this.beta2, this.iterations_ + 1));
    });
    let e = t8.length / 2, o = false;
    this.accumulatedFirstMoment = t8.slice(0, e).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })), this.accumulatedSecondMoment = t8.slice(e, e * 2).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }
  static fromConfig(t8, e) {
    return new t8(e.learningRate, e.beta1, e.beta2, e.epsilon);
  }
};
var ip = class extends Nr {
  static get className() {
    return "Adamax";
  }
  constructor(t8, e, o, n = null, s = 0) {
    super(), this.learningRate = t8, this.beta1 = e, this.beta2 = o, this.epsilon = n, this.decay = s, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], De(() => {
      this.iteration = ke(0).variable(), this.accBeta1 = ke(e).variable();
    }), n == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(t8) {
    let e = Array.isArray(t8) ? t8.map((o) => o.name) : Object.keys(t8);
    De(() => {
      let o = Te(1, this.accBeta1), n = je(-this.learningRate, Ce(se(this.iteration, this.decay), 1));
      e.forEach((s, a) => {
        let i = T.registeredVariables[s], p = false;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = { originalName: `${s}/m`, variable: Ht(i).variable(p) }), this.accumulatedWeightedInfNorm[a] == null && (this.accumulatedWeightedInfNorm[a] = { originalName: `${s}/v`, variable: Ht(i).variable(p) });
        let u = Array.isArray(t8) ? t8[a].tensor : t8[s];
        if (u == null)
          return;
        let c = this.accumulatedFirstMoment[a].variable, l = this.accumulatedWeightedInfNorm[a].variable, m = Ce(se(c, this.beta1), se(u, 1 - this.beta1)), d = se(l, this.beta2), f = Jt(u), h = Fd(d, f);
        c.assign(m), l.assign(h);
        let g = Ce(se(je(n, o), je(m, Ce(h, this.epsilon))), i);
        i.assign(g);
      }), this.iteration.assign(Ce(this.iteration, 1)), this.accBeta1.assign(se(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Mt(this.accumulatedFirstMoment.map((t8) => t8.variable)), this.accumulatedWeightedInfNorm != null && Mt(this.accumulatedWeightedInfNorm.map((t8) => t8.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(t8) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }
  static fromConfig(t8, e) {
    return new t8(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
  }
};
var mi = class extends Nr {
  static get className() {
    return "SGD";
  }
  constructor(t8) {
    super(), this.learningRate = t8, this.setLearningRate(t8);
  }
  applyGradients(t8) {
    (Array.isArray(t8) ? t8.map((o) => o.name) : Object.keys(t8)).forEach((o, n) => {
      let s = Array.isArray(t8) ? t8[n].tensor : t8[o];
      if (s == null)
        return;
      let a = T.registeredVariables[o];
      De(() => {
        let i = Ce(se(this.c, s), a);
        a.assign(i);
      });
    }), this.incrementIterations();
  }
  setLearningRate(t8) {
    this.learningRate = t8, this.c != null && this.c.dispose(), this.c = Rr(ke(-t8));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(t8) {
    if (t8 = await this.extractIterations(t8), t8.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(t8, e) {
    return new t8(e.learningRate);
  }
};
var up = class extends mi {
  static get className() {
    return "Momentum";
  }
  constructor(t8, e, o = false) {
    super(t8), this.learningRate = t8, this.momentum = e, this.useNesterov = o, this.accumulations = [], this.m = ke(this.momentum);
  }
  applyGradients(t8) {
    (Array.isArray(t8) ? t8.map((o) => o.name) : Object.keys(t8)).forEach((o, n) => {
      let s = T.registeredVariables[o];
      this.accumulations[n] == null && (this.accumulations[n] = { originalName: `${o}/momentum`, variable: De(() => Ht(s).variable(false)) });
      let a = this.accumulations[n].variable, i = Array.isArray(t8) ? t8[n].tensor : t8[o];
      i != null && De(() => {
        let p, u = Ce(se(this.m, a), i);
        this.useNesterov ? p = Ce(se(this.c, Ce(i, se(u, this.m))), s) : p = Ce(se(this.c, u), s), a.assign(u), s.assign(p);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Mt(this.accumulations.map((t8) => t8.variable));
  }
  setMomentum(t8) {
    this.momentum = t8;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((t8) => ({ name: t8.originalName, tensor: t8.variable })));
  }
  async setWeights(t8) {
    t8 = await this.extractIterations(t8);
    let e = false;
    this.accumulations = t8.map((o) => ({ originalName: o.name, variable: o.tensor.variable(e) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }
  static fromConfig(t8, e) {
    return new t8(e.learningRate, e.momentum, e.useNesterov);
  }
};
var pp = class extends Nr {
  static get className() {
    return "RMSProp";
  }
  constructor(t8, e = 0.9, o = 0, n = null, s = false) {
    if (super(), this.learningRate = t8, this.decay = e, this.momentum = o, this.epsilon = n, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = s, n == null && (this.epsilon = T.backend.epsilon()), t8 == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(t8) {
    (Array.isArray(t8) ? t8.map((o) => o.name) : Object.keys(t8)).forEach((o, n) => {
      let s = T.registeredVariables[o], a = false;
      this.accumulatedMeanSquares[n] == null && (this.accumulatedMeanSquares[n] = { originalName: `${o}/rms`, variable: De(() => Ht(s).variable(a)) }), this.accumulatedMoments[n] == null && (this.accumulatedMoments[n] = { originalName: `${o}/momentum`, variable: De(() => Ht(s).variable(a)) }), this.accumulatedMeanGrads[n] == null && this.centered && (this.accumulatedMeanGrads[n] = { originalName: `${o}/mg`, variable: De(() => Ht(s).variable(a)) });
      let i = Array.isArray(t8) ? t8[n].tensor : t8[o];
      if (i == null)
        return;
      let p = this.accumulatedMeanSquares[n].variable, u = this.accumulatedMoments[n].variable;
      De(() => {
        let c = Ce(se(p, this.decay), se(er(i), 1 - this.decay));
        if (this.centered) {
          let l = this.accumulatedMeanGrads[n].variable, m = Ce(se(l, this.decay), se(i, 1 - this.decay)), d = je(se(i, this.learningRate), Dr(Te(c, Ce(er(m), this.epsilon)))), f = Ce(se(u, this.momentum), d);
          p.assign(c), l.assign(m), u.assign(f);
          let h = Te(s, f);
          s.assign(h);
        } else {
          let l = Ce(se(p, this.decay), se(er(i), 1 - this.decay)), m = Ce(se(u, this.momentum), je(se(i, this.learningRate), Dr(Ce(l, this.epsilon))));
          p.assign(l), u.assign(m);
          let d = Te(s, m);
          s.assign(d);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Mt(this.accumulatedMeanSquares.map((t8) => t8.variable)), this.accumulatedMeanGrads != null && this.centered && Mt(this.accumulatedMeanGrads.map((t8) => t8.variable)), this.accumulatedMoments != null && Mt(this.accumulatedMoments.map((t8) => t8.variable));
  }
  async getWeights() {
    let t8 = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && t8.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(t8.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(t8) {
    t8 = await this.extractIterations(t8);
    let e = this.centered ? t8.length / 3 : t8.length / 2, o = false;
    this.accumulatedMeanSquares = t8.slice(0, e).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })), this.accumulatedMoments = t8.slice(e, e * 2).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })), this.centered && (this.accumulatedMeanGrads = t8.slice(e * 2, e * 3).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })));
  }
  getConfig() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }
  static fromConfig(t8, e) {
    return new t8(e.learningRate, e.decay, e.momentum, e.epsilon, e.centered);
  }
};
var Jj = [np, sp, ap, ip, up, pp, mi];
function UN() {
  for (let r of Jj)
    tS(r);
}
var fi = {};
qe(fi, { CompositeArrayBuffer: () => jt, browserFiles: () => HN, browserHTTPRequest: () => jN, concatenateArrayBuffers: () => ik, copyModel: () => wk, decodeWeights: () => ad, encodeWeights: () => nk, fromMemory: () => XN, fromMemorySync: () => iS, getLoadHandlers: () => lk, getModelArtifactsForJSON: () => ic, getModelArtifactsForJSONSync: () => _w, getModelArtifactsInfoForJSON: () => va, getSaveHandlers: () => ck, getWeightSpecs: () => ud, http: () => nf, isHTTPScheme: () => of, listModels: () => bk, loadWeights: () => KN, moveModel: () => Sk, registerLoadRouter: () => pk, registerSaveRouter: () => uk, removeModel: () => Ck, weightsLoaderFactory: () => sS, withSaveHandler: () => YN, withSaveHandlerSync: () => QN });
var eX = "model";
var tX = ".json";
var rX = ".weights.bin";
function GN(r) {
  return new Promise((t8) => setTimeout(t8)).then(r);
}
var di = class {
  constructor(t8) {
    if (!A().getBool("IS_BROWSER"))
      throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    t8.startsWith(di.URL_SCHEME) && (t8 = t8.slice(di.URL_SCHEME.length)), (t8 == null || t8.length === 0) && (t8 = eX), this.modelJsonFileName = t8 + tX, this.weightDataFileName = t8 + rX;
  }
  async save(t8) {
    if (typeof document == "undefined")
      throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    let e = jt.join(t8.weightData), o = window.URL.createObjectURL(new Blob([e], { type: "application/octet-stream" }));
    if (t8.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      let n = [{ paths: ["./" + this.weightDataFileName], weights: t8.weightSpecs }], s = id(t8, n), a = window.URL.createObjectURL(new Blob([JSON.stringify(s)], { type: "application/json" })), i = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (i.download = this.modelJsonFileName, i.href = a, await GN(() => i.dispatchEvent(new MouseEvent("click"))), t8.weightData != null) {
        let p = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        p.download = this.weightDataFileName, p.href = o, await GN(() => p.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: va(t8) };
    }
  }
};
di.URL_SCHEME = "downloads://";
var rS = class {
  constructor(t8) {
    if (t8 == null || t8.length < 1)
      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t8}`);
    this.jsonFile = t8[0], this.weightsFiles = t8.slice(1);
  }
  async load() {
    return new Promise((t8, e) => {
      let o = new FileReader();
      o.onload = (n) => {
        let s = JSON.parse(n.target.result), a = s.modelTopology;
        if (a == null) {
          e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (s.weightsManifest == null) {
          e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          t8({ modelTopology: a });
          return;
        }
        let p = ic(s, (u) => this.loadWeights(u));
        t8(p);
      }, o.onerror = (n) => e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), o.readAsText(this.jsonFile);
    });
  }
  loadWeights(t8) {
    let e = [], o = [];
    for (let a of t8)
      e.push(...a.weights), o.push(...a.paths);
    let n = this.checkManifestAndWeightFiles(t8), s = o.map((a) => this.loadWeightsFile(a, n[a]));
    return Promise.all(s).then((a) => [e, a]);
  }
  loadWeightsFile(t8, e) {
    return new Promise((o, n) => {
      let s = new FileReader();
      s.onload = (a) => {
        let i = a.target.result;
        o(i);
      }, s.onerror = (a) => n(`Failed to weights data from file of path '${t8}'.`), s.readAsArrayBuffer(e);
    });
  }
  checkManifestAndWeightFiles(t8) {
    let e = [], o = this.weightsFiles.map((s) => Tw(s.name)), n = {};
    for (let s of t8)
      s.paths.forEach((a) => {
        let i = Tw(a);
        if (e.indexOf(i) !== -1)
          throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);
        if (e.push(i), o.indexOf(i) === -1)
          throw new Error(`Weight file with basename '${i}' is not provided.`);
        n[a] = this.weightsFiles[o.indexOf(i)];
      });
    if (e.length !== this.weightsFiles.length)
      throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return n;
  }
};
var oX = (r) => A().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(di.URL_SCHEME) ? nX(r.slice(di.URL_SCHEME.length)) : null;
ft.registerSaveRouter(oX);
function nX(r = "model") {
  return new di(r);
}
function HN(r) {
  return new rS(r);
}
function oS(r, t8, e, o) {
  a(r), e = e == null ? 0 : e, o = o == null ? 1 : o, i(e, o);
  let n = 0, s = (p) => (p.then((u) => {
    let c = e + ++n / r.length * (o - e);
    return t8(c), u;
  }), p);
  function a(p) {
    $(p != null && Array.isArray(p) && p.length > 0, () => "promises must be a none empty array");
  }
  function i(p, u) {
    $(p >= 0 && p <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${p}`), $(u >= 0 && u <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${u}`), $(u >= p, () => `startFraction must be no more than endFraction, but got startFraction ${p} and endFraction ${u}`);
  }
  return Promise.all(r.map(s));
}
async function nS(r, t8) {
  t8 == null && (t8 = {});
  let e = t8.fetchFunc == null ? A().platform.fetch : t8.fetchFunc, o = r.map((l) => e(l, t8.requestInit, { isBinary: true })), n = 0, s = 0.5, i = (t8.onProgress == null ? await Promise.all(o) : await oS(o, t8.onProgress, n, s)).map((l) => l.arrayBuffer()), p = 0.5, u = 1;
  return t8.onProgress == null ? await Promise.all(i) : await oS(i, t8.onProgress, p, u);
}
async function KN(r, t8 = "", e, o) {
  return sS((a) => nS(a, { requestInit: o }))(r, t8, e);
}
function sS(r) {
  return async (t8, e = "", o) => {
    let n = t8.map(() => false), s = {}, a = o != null ? o.map(() => false) : [], i = [];
    if (t8.forEach((d, f) => {
      let h = 0;
      d.weights.forEach((g) => {
        let x = "quantization" in g ? g.quantization.dtype : g.dtype, b = Il[x] * He(g.shape), C = () => {
          n[f] = true, s[f] == null && (s[f] = []), s[f].push({ manifestEntry: g, groupOffset: h, sizeBytes: b });
        };
        o != null ? o.forEach((S, k) => {
          S === g.name && (C(), a[k] = true);
        }) : C(), i.push(g.name), h += b;
      });
    }), !a.every((d) => d)) {
      let d = o.filter((f, h) => !a[h]);
      throw new Error(`Could not find weights in manifest with names: ${d.join(", ")}. 
Manifest JSON has weights with names: ${i.join(", ")}.`);
    }
    let p = n.reduce((d, f, h) => (f && d.push(h), d), []), u = [];
    p.forEach((d) => {
      t8[d].paths.forEach((f) => {
        let h = e + (e.endsWith("/") ? "" : "/") + f;
        u.push(h);
      });
    });
    let c = await r(u), l = {}, m = 0;
    return p.forEach((d) => {
      let f = t8[d].paths.length, h = new jt(c.slice(m, m + f));
      s[d].forEach((x) => {
        let b = h.slice(x.groupOffset, x.groupOffset + x.sizeBytes), C = ad(b, [x.manifestEntry]);
        for (let S in C)
          l[S] = C[S];
      }), m += f;
    }), l;
  };
}
var sX = "application/octet-stream";
var aX = "application/json";
var Al = class {
  constructor(t8, e) {
    if (this.DEFAULT_METHOD = "POST", e == null && (e = {}), this.weightPathPrefix = e.weightPathPrefix, this.onProgress = e.onProgress, this.weightUrlConverter = e.weightUrlConverter, e.fetchFunc != null ? ($(typeof e.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = e.fetchFunc) : this.fetch = A().platform.fetch, $(t8 != null && t8.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(t8) && $(t8.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${t8.length}).`), this.path = t8, e.requestInit != null && e.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = e.requestInit || {};
  }
  async save(t8) {
    if (t8.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    let e = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    e.body = new FormData();
    let o = [{ paths: ["./model.weights.bin"], weights: t8.weightSpecs }], n = id(t8, o);
    if (e.body.append("model.json", new Blob([JSON.stringify(n)], { type: aX }), "model.json"), t8.weightData != null) {
      let a = jt.join(t8.weightData);
      e.body.append("model.weights.bin", new Blob([a], { type: sX }), "model.weights.bin");
    }
    let s = await this.fetch(this.path, e);
    if (s.ok)
      return { modelArtifactsInfo: va(t8), responses: [s] };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`);
  }
  async load() {
    let t8 = await this.fetch(this.path, this.requestInit);
    if (!t8.ok)
      throw new Error(`Request to ${this.path} failed with status code ${t8.status}. Please verify this URL points to the model JSON of the model to load.`);
    let e;
    try {
      e = await t8.json();
    } catch (s) {
      let a = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? a += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : a += " Please make sure the server is serving valid JSON for this request.", new Error(a);
    }
    let o = e.modelTopology, n = e.weightsManifest;
    if (o == null && n == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return ic(e, (s) => this.loadWeights(s));
  }
  async loadWeights(t8) {
    let e = Array.isArray(this.path) ? this.path[1] : this.path, [o, n] = iX(e), s = this.weightPathPrefix || o, a = ud(t8), i = [], p = [];
    for (let c of t8)
      for (let l of c.paths)
        this.weightUrlConverter != null ? p.push(this.weightUrlConverter(l)) : i.push(s + l + n);
    this.weightUrlConverter && i.push(...await Promise.all(p));
    let u = await nS(i, { requestInit: this.requestInit, fetchFunc: this.fetch, onProgress: this.onProgress });
    return [a, u];
  }
};
Al.URL_SCHEME_REGEX = /^https?:\/\//;
function iX(r) {
  let t8 = r.lastIndexOf("/"), e = r.lastIndexOf("?"), o = r.substring(0, t8), n = e > t8 ? r.substring(e) : "";
  return [o + "/", n];
}
function of(r) {
  return r.match(Al.URL_SCHEME_REGEX) != null;
}
var qN = (r, t8) => {
  if (typeof fetch == "undefined" && (t8 == null || t8.fetchFunc == null))
    return null;
  {
    let e = true;
    if (Array.isArray(r) ? e = r.every((o) => of(o)) : e = of(r), e)
      return nf(r, t8);
  }
  return null;
};
ft.registerSaveRouter(qN);
ft.registerLoadRouter(qN);
function nf(r, t8) {
  return new Al(r, t8);
}
function jN(r, t8) {
  return nf(r, t8);
}
var Fl = class {
  constructor(t8) {
    this.modelArtifacts = t8;
  }
  load() {
    return this.modelArtifacts;
  }
};
var sf = class {
  constructor(t8) {
    this.saveHandler = t8;
  }
  save(t8) {
    return this.saveHandler(t8);
  }
};
var aS = class {
  constructor(t8) {
    t8.load && (this.load = () => Promise.resolve(t8.load())), t8.save && (this.save = (e) => Promise.resolve(t8.save(e)));
  }
};
function XN(r, t8, e, o) {
  let n = arguments;
  return new aS(iS(...n));
}
function iS(r, t8, e, o) {
  return arguments.length === 1 ? r.modelTopology != null || r.weightSpecs != null ? new Fl(r) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Fl({ modelTopology: r })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Fl({ modelTopology: r, weightSpecs: t8, weightData: e, trainingConfig: o }));
}
function YN(r) {
  return new sf(r);
}
function QN(r) {
  return new sf(r);
}
var JN = {};
qe(JN, { confusionMatrix: () => ZN });
function uX(r, t8, e) {
  let o = v(r, "labels", "confusionMatrix"), n = v(t8, "predictions", "confusionMatrix");
  $(e == null || e > 0 && Number.isInteger(e), () => `If provided, numClasses must be a positive integer, but got ${e}`), $(o.rank === 1, () => `Expected the rank of labels to be 1, but got ${o.rank}`), $(n.rank === 1, () => `Expected the rank of predictions to be 1, but got ${n.rank}`), $(o.shape[0] === n.shape[0], () => `Mismatch in the number of examples: ${o.shape[0]} vs. ${n.shape[0]}. Labels and predictions should have the same number of elements.`), $(e > 0 && Number.isInteger(e), () => `numClasses is required to be a positive integer, but got ${e}`);
  let s = El(We(o, "int32"), e), a = El(We(n, "int32"), e), i = yc(s), p = Ze(i, a);
  return We(p, "int32");
}
var ZN = N({ confusionMatrix_: uX });
var oT = {};
qe(oT, { draw: () => gX, fromPixels: () => xX, fromPixelsAsync: () => dX, toPixels: () => hX });
var cp;
var eT = false;
function tT(r, t8 = 3) {
  if (t8 > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (r == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let e = false, o = false, n = false, s = false, a = false, i = false;
  if (r.data instanceof Uint8Array)
    e = true;
  else if (typeof ImageData != "undefined" && r instanceof ImageData)
    o = true;
  else if (typeof HTMLVideoElement != "undefined" && r instanceof HTMLVideoElement)
    n = true;
  else if (typeof HTMLImageElement != "undefined" && r instanceof HTMLImageElement)
    s = true;
  else if (r.getContext != null)
    a = true;
  else if (typeof ImageBitmap != "undefined" && r instanceof ImageBitmap)
    i = true;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);
  if (tc(Mu, T.backendName) != null) {
    let f = { pixels: r }, h = { numChannels: t8 };
    return T.runKernel(Mu, f, h);
  }
  let [u, c] = n ? [r.videoWidth, r.videoHeight] : [r.width, r.height], l;
  if (a)
    l = r.getContext("2d").getImageData(0, 0, u, c).data;
  else if (o || e)
    l = r.data;
  else if (s || n || i) {
    if (cp == null)
      if (typeof document == "undefined")
        if (typeof OffscreenCanvas != "undefined" && typeof OffscreenCanvasRenderingContext2D != "undefined")
          cp = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        cp = document.createElement("canvas").getContext("2d", { willReadFrequently: true });
    cp.canvas.width = u, cp.canvas.height = c, cp.drawImage(r, 0, 0, u, c), l = cp.getImageData(0, 0, u, c).data;
  }
  let m;
  if (t8 === 4)
    m = new Int32Array(l);
  else {
    let f = u * c;
    m = new Int32Array(f * t8);
    for (let h = 0; h < f; h++)
      for (let g = 0; g < t8; ++g)
        m[h * t8 + g] = l[h * 4 + g];
  }
  return Xd(m, [c, u, t8], "int32");
}
function pX(r) {
  return r != null && r.data instanceof Uint8Array;
}
function cX() {
  return typeof window != "undefined" && typeof ImageBitmap != "undefined" && window.hasOwnProperty("createImageBitmap");
}
function lX(r) {
  return r != null && r.width !== 0 && r.height !== 0;
}
function mX(r) {
  return cX() && !(r instanceof ImageBitmap) && lX(r) && !pX(r);
}
async function dX(r, t8 = 3) {
  let e = null;
  if (A().getBool("WRAP_TO_IMAGEBITMAP") && mX(r)) {
    let o;
    try {
      o = await createImageBitmap(r, { premultiplyAlpha: "none" });
    } catch (n) {
      o = null;
    }
    o != null && o.width === r.width && o.height === r.height ? e = o : e = r;
  } else
    e = r;
  return tT(e, t8);
}
function rT(r) {
  if (r.rank !== 2 && r.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${r.rank}.`);
  let t8 = r.rank === 2 ? 1 : r.shape[2];
  if (t8 > 4 || t8 === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t8}`);
  if (r.dtype !== "float32" && r.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${r.dtype}. Please use float32 or int32 tensors.`);
}
function fX(r) {
  let t8 = (r == null ? void 0 : r.alpha) || 1;
  if (t8 > 1 || t8 < 0)
    throw new Error(`Alpha value ${t8} is suppoed to be in range [0 - 1].`);
}
async function hX(r, t8) {
  let e = v(r, "img", "toPixels");
  if (!(r instanceof ut)) {
    let u = e;
    e = We(u, "int32"), u.dispose();
  }
  rT(e);
  let [o, n] = e.shape.slice(0, 2), s = e.rank === 2 ? 1 : e.shape[2], a = await e.data(), i = e.dtype === "float32" ? 255 : 1, p = new Uint8ClampedArray(n * o * 4);
  for (let u = 0; u < o * n; ++u) {
    let c = [0, 0, 0, 255];
    for (let m = 0; m < s; m++) {
      let d = a[u * s + m];
      if (e.dtype === "float32") {
        if (d < 0 || d > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${d}.`);
      } else if (e.dtype === "int32" && (d < 0 || d > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${d}.`);
      s === 1 ? (c[0] = d * i, c[1] = d * i, c[2] = d * i) : c[m] = d * i;
    }
    let l = u * 4;
    p[l + 0] = Math.round(c[0]), p[l + 1] = Math.round(c[1]), p[l + 2] = Math.round(c[2]), p[l + 3] = Math.round(c[3]);
  }
  if (t8 != null) {
    eT || tc(Pu, T.backendName) != null && (console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."), eT = true), t8.width = n, t8.height = o;
    let u = t8.getContext("2d"), c = new ImageData(p, n, o);
    u.putImageData(c, 0, 0);
  }
  return e !== r && e.dispose(), p;
}
function gX(r, t8, e) {
  let o = v(r, "img", "draw");
  if (!(r instanceof ut)) {
    let a = o;
    o = We(a, "int32"), a.dispose();
  }
  rT(o), fX(e == null ? void 0 : e.imageOptions);
  let n = { image: o }, s = { canvas: t8, options: e };
  T.runKernel(Pu, n, s);
}
var xX = N({ fromPixels_: tT });
var af = {};
qe(af, { prepareAndValidate: () => nT });
function nT(r, t8) {
  let e = r.shape.length, o = t8.shape.length;
  if (e < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);
  if (o < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);
  if (t8.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t8.dtype}.`);
  if (t8.shape[o - 1] > e)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t8.shape[o - 1]} vs. ${e}`);
  if (He(r.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);
  let n = t8.shape, s = n[n.length - 1], a = 1;
  for (let l = 0; l < n.length - 1; ++l)
    a *= n[l];
  let i = r.shape, p = n.slice();
  p.pop();
  let u = 1;
  for (let l = s; l < e; ++l)
    u *= i[l], p.push(i[l]);
  let c = [...js(r.shape).map((l) => l / u), 1].slice(0, s);
  return [p, a, u, c];
}
var ct = {};
qe(ct, { assertParamsValid: () => bX, computeFlatOffset: () => vX, computeOutShape: () => wX, getNormalizedAxes: () => SX, isSliceContinous: () => IX, maskToAxes: () => CX, parseSliceParams: () => kX, sliceInfo: () => NX, startForAxis: () => mT, startIndicesWithElidedDims: () => pT, stopForAxis: () => dT, stopIndicesWithElidedDims: () => cT, stridesForAxis: () => lT, stridesWithElidedDims: () => aT });
var uS = -2;
var yX = -1;
function bX(r, t8, e) {
  let o = r.shape.length;
  $(o === t8.length, () => `Error in slice${o}D: Length of begin ${t8} must match the rank of the array (${o}).`), $(o === e.length, () => `Error in slice${o}D: Length of size ${e} must match the rank of the array (${o}).`);
  for (let n = 0; n < o; ++n)
    $(t8[n] + e[n] <= r.shape[n], () => `Error in slice${o}D: begin[${n}] + size[${n}] (${t8[n] + e[n]}) would overflow input.shape[${n}] (${r.shape[n]})`);
}
function CX(r) {
  let t8 = [], e = 0;
  for (; r > 0; )
    r & 1 && t8.push(e), r /= 2, e++;
  return t8;
}
function wX(r, t8, e) {
  let o = [];
  for (let n = 0; n < r.length; n++)
    o[n] = Math.ceil((t8[n] - r[n]) / e[n]);
  return o;
}
function aT(r, t8, e, o) {
  let n = [...r];
  for (let s = n.length; s < o.length; s++)
    n.push(1);
  for (let s = 0; s < e; s++)
    s === 0 ? n[t8] = 1 : (n.splice(t8, 0, 1), n.pop());
  return n;
}
function iT(r, t8, e) {
  return e <= r ? e : e - (t8 - 1);
}
function uT(r, t8) {
  let e = [];
  for (let o = 0; o < r; o++)
    e.push(t8 + o);
  return e;
}
function SX(r, t8, e, o, n, s, a, i, p) {
  let u = r.length, c = new Array(u), l = new Array(u), m = new Array(u);
  if (t8.length && e > 0) {
    let d = t8[0], f = e + 1;
    c = pT(a, d, f, o, r), l = cT(i, d, f, n, r), m = aT(s, d, f, r);
  } else
    for (let d = 0; d < u; d++)
      c[d] = mT(a, o, s, r, d, p), l[d] = dT(i, n, s, r, d, p), m[d] = lT(s, d, p);
  return { begin: c, end: l, strides: m };
}
function pT(r, t8, e, o, n) {
  let s = [...n], a = uT(e, t8);
  for (let i = 0; i < s.length; i++)
    if (a.indexOf(i) > -1)
      s[i] = 0;
    else {
      let p = iT(t8, e, i), u = o[p];
      r & 1 << p && (u = 0), s[i] = u;
    }
  return s;
}
function cT(r, t8, e, o, n) {
  let s = [...n], a = uT(e, t8);
  for (let i = 0; i < s.length; i++)
    if (a.indexOf(i) > -1)
      s[i] = Number.MAX_SAFE_INTEGER;
    else {
      let p = iT(t8, e, i), u = o[p];
      r & 1 << p && (u = Number.MAX_SAFE_INTEGER), s[i] = u;
    }
  for (let i = 0; i < s.length; i++) {
    let p = n[i];
    s[i] < 0 && (s[i] += p), s[i] = qp(0, s[i], n[i]);
  }
  return s;
}
function lT(r, t8, e) {
  let o = r[t8];
  return (e & 1 << t8 || o == null) && (o = 1), o;
}
function mT(r, t8, e, o, n, s) {
  let a = t8[n], i = e[n] || 1;
  (r & 1 << n || s & 1 << n || a == null) && (i > 0 ? a = Number.MIN_SAFE_INTEGER : a = Number.MAX_SAFE_INTEGER);
  let p = o[n];
  return a < 0 && (a += p), a = qp(0, a, p - 1), a;
}
function dT(r, t8, e, o, n, s) {
  let a = t8[n], i = e[n] || 1;
  (r & 1 << n || s & 1 << n || a == null) && (i > 0 ? a = Number.MAX_SAFE_INTEGER : a = Number.MIN_SAFE_INTEGER);
  let p = o[n];
  return a < 0 && (a += p), i > 0 ? a = qp(0, a, p) : a = qp(-1, a, p - 1), a;
}
function IX(r, t8, e) {
  let o = e.length;
  for (let n = 0; n < e.length; n++)
    if (e[n] > 1) {
      o = n;
      break;
    }
  for (let n = o + 1; n < e.length; n++)
    if (t8[n] > 0 || e[n] !== r[n])
      return false;
  return true;
}
function vX(r, t8) {
  let e = r.length > 0 ? r[r.length - 1] : 1;
  for (let o = 0; o < r.length - 1; o++)
    e += r[o] * t8[o];
  return e;
}
function kX(r, t8, e) {
  let o, n = r.shape.length;
  typeof t8 == "number" ? o = [t8, ...new Array(n - 1).fill(0)] : t8.length < n ? o = t8.concat(new Array(n - t8.length).fill(0)) : o = t8.slice(), o.forEach((a) => {
    $(a !== -1, () => "slice() does not support negative begin indexing.");
  });
  let s;
  return e == null ? s = new Array(n).fill(-1) : typeof e == "number" ? s = [e, ...new Array(n - 1).fill(-1)] : e.length < n ? s = e.concat(new Array(n - e.length).fill(-1)) : s = e, s = s.map((a, i) => a >= 0 ? a : ($(a === -1, () => `Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`), r.shape[i] - o[i])), [o, s];
}
function NX(r, t8, e, o, n, s, a, i, p) {
  let u;
  if (o == null ? (u = new Array(t8.length), u.fill(1)) : u = o, a != null && a & a - 1)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let c = false, l = { dims: u.length, numAddAxisAfterEllipsis: 0, begin: t8.slice(), end: e.slice(), strides: u.slice(), beginMask: n, endMask: s, ellipsisMask: a, newAxisMask: i, shrinkAxisMask: p };
  for (let C = 0; C < l.dims; C++)
    c && 1 << C & i && l.numAddAxisAfterEllipsis++, 1 << C & a && (c = true);
  c || (l.ellipsisMask |= 1 << l.dims, l.dims++);
  let m = { dims: r.length, beginMask: 0, endMask: 0, beginValid: false, endValid: false };
  TX(l, m);
  let d = true, f = true, h = true, g = [], x = [];
  for (let C = 0; C < r.length; ++C) {
    if (m.strides[C] === 0)
      throw Error(`strides[${C}] must be non-zero`);
    let S = !!(m.shrinkAxisMask & 1 << C), k = r[C];
    if (k === -1) {
      g.push(S ? 1 : -1);
      continue;
    }
    let _ = [m.beginMask & 1 << C, m.endMask & 1 << C], E = [m.strides[C] > 0 ? 0 : -1, m.strides[C] > 0 ? k : k - 1];
    if (S && m.strides[C] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    h = h && m.strides[C] === 1;
    let R = !!(m.beginMask & 1 << C && m.endMask & 1 << C);
    if (m.beginValid && m.endValid) {
      if (S) {
        let M = m.begin[C] < 0 ? k + m.begin[C] : m.begin[C];
        if (m.begin[C] = M, m.end[C] = m.begin[C] + 1, M < 0 || M >= k)
          throw Error(`slice index ${m.begin[C]} of dimension ${C} out of bounds.`);
      } else
        m.begin[C] = sT(m.begin[C], 0, m.strides[C], k, _, E), m.end[C] = sT(m.end[C], 1, m.strides[C], k, _, E);
      let O = m.strides[C] === 1 && m.begin[C] === 0 && m.end[C] === k;
      d = d && O, f = f && (C === 0 && m.strides[C] === 1 || O);
    } else
      d = d && m.strides[C] === 1 && R, f = f && (C === 0 && m.strides[C] === 1 || R);
    let D, P = false;
    if (m.beginValid && m.endValid ? (D = m.end[C] - m.begin[C], P = true) : S ? (D = 1, P = true) : R && k >= 0 && (m.strides[C] < 0 ? D = -k : D = k, P = true), P) {
      let O;
      D === 0 || D < 0 != m.strides[C] < 0 ? O = 0 : O = Math.trunc(D / m.strides[C]) + (D % m.strides[C] !== 0 ? 1 : 0), g.push(O);
    } else
      g.push(-1);
  }
  for (let C = 0; C < m.finalShapeGatherIndices.length; ++C) {
    let S = m.finalShapeGatherIndices[C];
    S >= 0 ? x.push(g[S]) : S === uS && x.push(1);
  }
  return { finalShapeSparse: x.filter((C, S) => m.finalShapeGatherIndices[S] !== uS), finalShape: x, isIdentity: d, sliceDim0: f, isSimpleSlice: h, begin: m.begin, end: m.end, strides: m.strides };
}
function TX(r, t8) {
  t8.beginMask = 0, t8.endMask = 0, t8.shrinkAxisMask = 0;
  let e = 0;
  t8.beginValid = r.begin != null, t8.endValid = r.end != null, t8.begin = new Array(t8.dims), t8.end = new Array(t8.dims), t8.strides = new Array(t8.dims), t8.finalShapeGatherIndices = [], t8.finalShapeGatherIndicesSparse = [], t8.inputShapeGatherIndicesSparse = new Array(t8.dims);
  for (let o = 0; o < r.dims; o++)
    if (1 << o & r.ellipsisMask) {
      let n = Math.min(t8.dims - (r.dims - o) + 1 + r.numAddAxisAfterEllipsis, t8.dims);
      for (; e < n; e++)
        t8.begin[e] = 0, t8.end[e] = 0, t8.strides[e] = 1, t8.beginMask |= 1 << e, t8.endMask |= 1 << e, t8.finalShapeGatherIndices.push(e), t8.finalShapeGatherIndicesSparse.push(-1), t8.inputShapeGatherIndicesSparse[e] = o;
    } else if (1 << o & r.newAxisMask)
      t8.finalShapeGatherIndices.push(uS), t8.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (e === t8.begin.length)
        throw Error(`Index out of range using input dim ${e}; input has only ${t8.dims} dims, ${t8.begin.length}.`);
      r.begin != null && (t8.begin[e] = r.begin[o]), r.end != null && (t8.end[e] = r.end[o]), t8.strides[e] = r.strides[o], r.beginMask & 1 << o && (t8.beginMask |= 1 << e), r.endMask & 1 << o && (t8.endMask |= 1 << e), r.shrinkAxisMask & 1 << o ? (t8.finalShapeGatherIndices.push(yX), t8.finalShapeGatherIndicesSparse.push(-1), t8.shrinkAxisMask |= 1 << e) : (t8.finalShapeGatherIndices.push(e), t8.finalShapeGatherIndicesSparse.push(o)), t8.inputShapeGatherIndicesSparse[e] = o, e++;
    }
}
function sT(r, t8, e, o, n, s) {
  if (n[t8])
    return e > 0 ? s[t8] : s[t8 + 1 & 1];
  {
    let a = r < 0 ? o + r : r;
    return a < s[0] ? s[0] : a > s[1] ? s[1] : a;
  }
}
var _X = "4.11.0";
var Pl = class {
  static sgd(t8) {
    return new mi(t8);
  }
  static momentum(t8, e, o = false) {
    return new up(t8, e, o);
  }
  static rmsprop(t8, e = 0.9, o = 0, n = null, s = false) {
    return new pp(t8, e, o, n, s);
  }
  static adam(t8 = 1e-3, e = 0.9, o = 0.999, n = null) {
    return new ap(t8, e, o, n);
  }
  static adadelta(t8 = 1e-3, e = 0.95, o = null) {
    return new np(t8, e, o);
  }
  static adamax(t8 = 2e-3, e = 0.9, o = 0.999, n = null, s = 0) {
    return new ip(t8, e, o, n, s);
  }
  static adagrad(t8, e = 0.1) {
    return new sp(t8, e);
  }
};
var TGe = Pl;
var $X = (() => typeof requestAnimationFrame != "undefined" ? requestAnimationFrame : typeof setImmediate != "undefined" ? setImmediate : (r) => r())();
function pS() {
  return new Promise((r) => $X(() => r()));
}
var w = {};
qe(w, { ERF_A1: () => KX, ERF_A2: () => qX, ERF_A3: () => jX, ERF_A4: () => XX, ERF_A5: () => YX, ERF_P: () => HX, PARALLELIZE_THRESHOLD: () => uf, RowPartitionType: () => Pa, SELU_SCALE: () => GX, SELU_SCALEALPHA: () => UX, applyActivation: () => rp, assertAndGetBroadcastShape: () => rt, assertAxesAreInnerMostDims: () => tK, assertParamsConsistent: () => EX, assignToTypedArray: () => r5, axesAreInnerMostDims: () => Bw, calculateShapes: () => V1, checkEinsumDimSizes: () => u5, checkPadOnDimRoundingMode: () => Bt, combineLocations: () => x2, combineRaggedTensorToTensorShapes: () => DX, complexWithEvenIndex: () => JX, complexWithOddIndex: () => e5, computeConv2DInfo: () => Hu, computeConv3DInfo: () => Mk, computeDefaultPad: () => Lw, computeDilation2DInfo: () => J4, computeOptimalWindowSize: () => OX, computeOutAndReduceShapes: () => eK, computeOutShape: () => RX, computePool2DInfo: () => Mw, computePool3DInfo: () => eH, convertConv2DDataFormat: () => Lk, decodeEinsumEquation: () => a5, eitherStridesOrDilationsAreOne: () => xr, expandShapeToKeepDim: () => ii, exponent: () => n5, exponents: () => o5, fromStringArrayToUint8: () => $5, fromUint8ToStringArray: () => _5, getAxesPermutation: () => rK, getBroadcastDims: () => m2, getComplexWithIndex: () => t5, getEinsumComputePath: () => p5, getEinsumPermutation: () => i5, getFusedBiasGradient: () => tp, getFusedDyActivation: () => ep, getImageCenter: () => MX, getInnerMostAxes: () => nK, getPermuted: () => BX, getRaggedRank: () => FX, getReductionAxes: () => yd, getReshaped: () => LX, getReshapedPermuted: () => zX, getRowPartitionTypesHelper: () => AX, getSliceBeginCoords: () => VX, getSliceSize: () => WX, getSparseFillEmptyRowsIndicesDenseShapeMismatch: () => d5, getSparseFillEmptyRowsNegativeIndexErrorMessage: () => f5, getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: () => h5, getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: () => y5, getSparseReshapeInputOutputMismatchErrorMessage: () => C5, getSparseReshapeInputOutputMultipleErrorMessage: () => b5, getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: () => g5, getSparseReshapeNegativeOutputDimErrorMessage: () => x5, getSparseSegmentReductionIndicesOutOfRangeErrorMessage: () => v5, getSparseSegmentReductionNegativeSegmentIdsErrorMessage: () => w5, getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: () => S5, getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: () => I5, getUndoAxesPermutation: () => oK, isIdentityPermutation: () => c5, log: () => jG, mergeRealAndImagArrays: () => QX, prepareAndValidate: () => nT, prepareSplitSize: () => m5, segment_util: () => lS, shouldFuse: () => op, slice_util: () => ct, splitRealAndImagArrays: () => ZX, stridesOrDilationsArePositive: () => Ta, tupleValuesAreOne: () => Gu, upcastType: () => dt, validateDefaultValueShape: () => PX, validateInput: () => xc, validateUpdateShape: () => Yw, warn: () => Ia });
function EX(r, t8) {
  let e = r[0].length;
  r.forEach((n, s) => {
    $(n.length === e, () => `Error in concat${e}D: rank of tensors[${s}] must be the same as the rank of the rest (${e})`);
  }), $(t8 >= 0 && t8 < e, () => `Error in concat${e}D: axis must be between 0 and ${e - 1}.`);
  let o = r[0];
  r.forEach((n, s) => {
    for (let a = 0; a < e; a++)
      $(a === t8 || n[a] === o[a], () => `Error in concat${e}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`);
  });
}
function RX(r, t8) {
  let e = r[0].slice();
  for (let o = 1; o < r.length; o++)
    e[t8] += r[o][t8];
  return e;
}
var Pa;
(function(r) {
  r[r.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", r[r.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", r[r.ROW_LENGTHS = 2] = "ROW_LENGTHS", r[r.ROW_SPLITS = 3] = "ROW_SPLITS", r[r.ROW_LIMITS = 4] = "ROW_LIMITS", r[r.ROW_STARTS = 5] = "ROW_STARTS";
})(Pa || (Pa = {}));
function DX(r, t8, e) {
  let o = new Array();
  if (e == null && t8 == null)
    return o;
  if (t8 == null)
    for (; o.length < r + e.length; )
      o.push(-1);
  else
    o = t8.slice();
  if (e == null)
    return o;
  if (r + e.length !== o.length)
    throw new Error(`rt input.shape and shape=${t8} are incompatible: rt input.rank = ${r + e.length}, but shape.rank = ${o.length}`);
  for (let n = 1; n < e.length; ++n) {
    let s = e[n], a = o[o.length - e.length + n], i = o[a];
    if (s >= 0)
      if (i >= 0) {
        if (i !== s)
          throw new Error(`rt input.shape and shape=${t8} are incompatible: rt input.shape[${n + r}] = ${s} but shape[${n + r}] = ${i}`);
      } else
        o[a] = s;
  }
  return o;
}
function AX(r) {
  let t8 = { FIRST_DIM_SIZE: Pa.FIRST_DIM_SIZE, VALUE_ROWIDS: Pa.VALUE_ROWIDS, ROW_LENGTHS: Pa.ROW_LENGTHS, ROW_SPLITS: Pa.ROW_SPLITS, ROW_LIMITS: Pa.ROW_LIMITS, ROW_STARTS: Pa.ROW_STARTS }, e = [];
  for (let o of r)
    if (o in t8)
      e.push(t8[o]);
    else
      break;
  return e;
}
function FX(r) {
  return r.length === 0 ? 0 : r[0] === Pa.FIRST_DIM_SIZE ? r.length - 1 : r.length;
}
function PX(r, t8) {
  if (r == null || t8 == null)
    return;
  let e = r.length, o = t8.length;
  if (e >= o)
    throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${t8}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${o})`);
  for (let n = 0; n < Math.min(e, o - 1); ++n) {
    let s = r[n], a = t8[n + 1];
    if (s >= 0 && a >= 0 && s !== 1 && s !== a)
      throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${t8} are incompatible: defaultValue.shape[${n - r.length}] = ${s} but ragged tensor input.flatValues.shape[${n - r.length}] = ${a}`);
  }
}
var uf = 30;
function OX(r) {
  return r <= uf ? r : Xp(r, Math.floor(Math.sqrt(r)));
}
function MX(r, t8, e) {
  let o = e * (typeof r == "number" ? r : r[0]), n = t8 * (typeof r == "number" ? r : r[1]);
  return [o, n];
}
function LX(r, t8, e, o = true) {
  let n = [];
  if (o)
    n = n.concat(t8.slice(0)), n.push(r[0] / e), n = n.concat(r.slice(1));
  else {
    n = n.concat(r[0]);
    let s = t8.length;
    for (let a = 0; a < s; ++a)
      n = n.concat([r[a + 1] / t8[a], t8[a]]);
    n = n.concat(r.slice(s + 1));
  }
  return n;
}
function BX(r, t8, e = true) {
  let o = [];
  if (e) {
    o.push(t8);
    for (let n = t8 + 1; n < r; ++n)
      n <= 2 * t8 ? (o.push(n), o.push(n - (t8 + 1))) : o.push(n);
  } else {
    let n = [], s = [];
    for (let a = 1; a < r; ++a)
      a >= t8 * 2 + 1 || a % 2 === 1 ? s.push(a) : n.push(a);
    o.push(...n), o.push(0), o.push(...s);
  }
  return o;
}
function zX(r, t8, e, o = true) {
  let n = [];
  o ? n.push(r[0] / e) : n.push(r[0] * e);
  for (let s = 1; s < r.length; ++s)
    s <= t8.length ? o ? n.push(t8[s - 1] * r[s]) : n.push(r[s] / t8[s - 1]) : n.push(r[s]);
  return n;
}
function VX(r, t8) {
  let e = [0];
  for (let o = 0; o < t8; ++o)
    e.push(r[o][0]);
  return e;
}
function WX(r, t8, e) {
  let o = r.slice(0, 1);
  for (let n = 0; n < e; ++n)
    o.push(r[n + 1] - t8[n][0] - t8[n][1]);
  return o;
}
var UX = 1.7580993408473768;
var GX = 1.0507009873554805;
var HX = 0.3275911;
var KX = 0.254829592;
var qX = -0.284496736;
var jX = 1.421413741;
var XX = -1.453152027;
var YX = 1.061405429;
function QX(r, t8) {
  if (r.length !== t8.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${t8.length}.`);
  let e = new Float32Array(r.length * 2);
  for (let o = 0; o < e.length; o += 2)
    e[o] = r[o / 2], e[o + 1] = t8[o / 2];
  return e;
}
function ZX(r) {
  let t8 = new Float32Array(r.length / 2), e = new Float32Array(r.length / 2);
  for (let o = 0; o < r.length; o += 2)
    t8[o / 2] = r[o], e[o / 2] = r[o + 1];
  return { real: t8, imag: e };
}
function JX(r) {
  let t8 = Math.ceil(r.length / 4), e = new Float32Array(t8), o = new Float32Array(t8);
  for (let n = 0; n < r.length; n += 4)
    e[Math.floor(n / 4)] = r[n], o[Math.floor(n / 4)] = r[n + 1];
  return { real: e, imag: o };
}
function e5(r) {
  let t8 = Math.floor(r.length / 4), e = new Float32Array(t8), o = new Float32Array(t8);
  for (let n = 2; n < r.length; n += 4)
    e[Math.floor(n / 4)] = r[n], o[Math.floor(n / 4)] = r[n + 1];
  return { real: e, imag: o };
}
function t5(r, t8) {
  let e = r[t8 * 2], o = r[t8 * 2 + 1];
  return { real: e, imag: o };
}
function r5(r, t8, e, o) {
  r[o * 2] = t8, r[o * 2 + 1] = e;
}
function o5(r, t8) {
  let e = new Float32Array(r / 2), o = new Float32Array(r / 2);
  for (let n = 0; n < Math.ceil(r / 2); n++) {
    let s = (t8 ? 2 : -2) * Math.PI * (n / r);
    e[n] = Math.cos(s), o[n] = Math.sin(s);
  }
  return { real: e, imag: o };
}
function n5(r, t8, e) {
  let o = (e ? 2 : -2) * Math.PI * (r / t8), n = Math.cos(o), s = Math.sin(o);
  return { real: n, imag: s };
}
var cS = "->";
var s5 = /->/g;
var fT = ",";
var hT = "...";
function a5(r, t8) {
  r = r.replace(/\s/g, "");
  let e = (r.length - r.replace(s5, "").length) / cS.length;
  if (e < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (e > 1)
    throw new Error(`Equation must contain exactly one arrow ("${cS}").`);
  let [o, n] = r.split(cS);
  $(o.indexOf(hT) === -1, () => `The ellipsis notation ("${hT}") is not supported yet.`);
  let s = o.split(fT), a = s.length;
  if (t8 !== a)
    throw new Error(`Expected ${a} input tensors, received ${t8}`);
  if (a > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  let i = [];
  for (let m = 0; m < n.length; ++m) {
    let d = n[m];
    if (!s.some((f) => f.indexOf(d) !== -1))
      throw new Error(`Output subscripts contain the label ${d} not present in the input subscripts.`);
    i.indexOf(d) === -1 && i.push(d);
  }
  for (let m = 0; m < o.length; ++m) {
    let d = o[m];
    i.indexOf(d) === -1 && d !== fT && i.push(d);
  }
  let p = new Array(s.length);
  for (let m = 0; m < a; ++m) {
    if (new Set(s[m].split("")).size !== s[m].length)
      throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);
    p[m] = [];
    for (let d = 0; d < s[m].length; ++d)
      p[m].push(i.indexOf(s[m][d]));
  }
  let u = i.length, c = n.length, l = [];
  for (let m = c; m < u; ++m)
    l.push(m);
  return { allDims: i, summedDims: l, idDims: p };
}
function i5(r, t8) {
  let e = new Array(r);
  e.fill(-1);
  for (let n = 0; n < t8.length; ++n)
    e[t8[n]] = n;
  let o = [];
  for (let n = 0; n < r; ++n)
    e[n] === -1 && o.push(n);
  return e = e.filter((n) => n !== -1), { permutationIndices: e, expandDims: o };
}
function u5(r, t8, e) {
  let o = new Array(r);
  for (let n = 0; n < e.length; ++n) {
    let s = e[n].shape;
    for (let a = 0; a < t8[n].length; ++a)
      o[t8[n][a]] === void 0 ? o[t8[n][a]] = s[a] : $(o[t8[n][a]] === s[a], () => `Expected dimension ${o[t8[n][a]]} at axis ${a} of input shaped ${JSON.stringify(s)}, but got dimension ${s[a]}`);
  }
}
function p5(r, t8) {
  let e = r, o = [], n = 0;
  r.length === 0 && e.push(-1), n = r.length + 1;
  for (let a = 0; a < n; ++a)
    o.push([]);
  let s = [];
  for (let a = 0; a < e.length; ++a) {
    let i = e[a], p = l5(t8, i);
    for (let u of p)
      s.indexOf(u) === -1 && (o[a].push(u), s.push(u));
  }
  return { path: e, steps: o };
}
function c5(r) {
  return r.every((t8, e) => t8 === e);
}
function l5(r, t8) {
  let e = [];
  for (let o = 0; o < r.length; ++o)
    (r[o].length === 0 || r[o].indexOf(t8) !== -1 || t8 === -1) && e.push(o);
  return e;
}
function m5(r, t8, e = 0) {
  let o = [];
  if (typeof t8 == "number")
    $(r.shape[e] % t8 === 0, () => "Number of splits must evenly divide the axis."), o = new Array(t8).fill(r.shape[e] / t8);
  else {
    let n = t8.reduce((a, i) => (i === -1 && (a += 1), a), 0);
    $(n <= 1, () => "There should be only one negative value in split array.");
    let s = t8.indexOf(-1);
    if (s !== -1) {
      let a = t8.reduce((i, p) => p > 0 ? i + p : i);
      t8[s] = r.shape[e] - a;
    }
    $(r.shape[e] === t8.reduce((a, i) => a + i), () => "The sum of sizes must match the size of the axis dimension."), o = t8;
  }
  return o;
}
function d5(r) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`;
}
function f5(r, t8) {
  return `indices(${r}, 0) is invalid: ${t8} < 0`;
}
function h5(r, t8, e) {
  return `indices(${r}, 0) is invalid: ${t8} >= ${e}`;
}
function g5(r, t8) {
  return `only one output dimension may be -1, not both ${r} and ${t8}`;
}
function x5(r, t8) {
  return `size ${r} must be non-negative, not ${t8}`;
}
function y5() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function b5(r, t8) {
  let e = He(r), o = He(t8);
  return `Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${t8}`;
}
function C5(r, t8) {
  let e = He(r), o = He(t8);
  return `Input to reshape is a tensor with ${e} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${t8}`;
}
function w5() {
  return "segment ids must be >= 0";
}
function S5() {
  return "segment ids are not increasing";
}
function I5(r, t8) {
  return `Segment id ${r} out of range [0, ${t8}), possibly because segmentIds input is not sorted.`;
}
function v5(r, t8, e) {
  return `Bad: indices[${r}] == ${t8} out of range [0, ${e})`;
}
var lS = {};
qe(lS, { collectGatherOpShapeInfo: () => T5, computeOutShape: () => N5, segOpComputeOptimalWindowSize: () => k5 });
function k5(r, t8) {
  let e = false, o;
  for (r <= uf ? (o = r, e = true) : o = Xp(r, Math.floor(Math.sqrt(r))); !e; )
    o > t8 || o === r ? e = true : o = Xp(r, o + 1);
  return o;
}
function N5(r, t8, e) {
  let o = [], n = r.length;
  for (let s = 0; s < n; s++)
    s !== t8 ? o.push(r[s]) : o.push(e);
  return o;
}
function T5(r, t8, e, o) {
  let n = t8.shape.length, s = r.shape.length;
  if (o !== 0 && (o < -n || o > n))
    throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);
  if (o < 0 && (o += n), o > s)
    throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);
  if (e < o)
    throw new Error(`batchDims (${o}) must be less than or equal to axis (${e}).`);
  for (let l = 0; l < o; ++l)
    if (r.shape[l] !== t8.shape[l])
      throw new Error(`x.shape[${l}]: ${r.shape[l]} should be equal to indices.shape[${l}]: ${t8.shape[l]}.`);
  let a = r.shape[e], i = [], p = 1, u = 1, c = 1;
  for (let l = 0; l < o; ++l)
    i.push(r.shape[l]), p *= r.shape[l];
  for (let l = o; l < e; l++)
    i.push(r.shape[l]), u *= r.shape[l];
  for (let l = o; l < n; l++)
    i.push(t8.shape[l]);
  for (let l = e + 1; l < s; l++)
    i.push(r.shape[l]), c *= r.shape[l];
  return { batchSize: p, sliceSize: c, outerSize: u, dimSize: a, outputShape: i };
}
function _5(r) {
  try {
    return r.map((t8) => sc(t8));
  } catch (t8) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t8}`);
  }
}
function $5(r) {
  return r.map((t8) => tu(t8));
}
var Wt = {};
qe(Wt, { nonMaxSuppressionV3Impl: () => ef, nonMaxSuppressionV4Impl: () => tf, nonMaxSuppressionV5Impl: () => rf, whereImpl: () => Yd });
UN();
var E5 = A();
E5.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => false, (r) => {
  r && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
var ho;
(function(r) {
  r[r.DT_INVALID = 0] = "DT_INVALID", r[r.DT_FLOAT = 1] = "DT_FLOAT", r[r.DT_DOUBLE = 2] = "DT_DOUBLE", r[r.DT_INT32 = 3] = "DT_INT32", r[r.DT_UINT8 = 4] = "DT_UINT8", r[r.DT_INT16 = 5] = "DT_INT16", r[r.DT_INT8 = 6] = "DT_INT8", r[r.DT_STRING = 7] = "DT_STRING", r[r.DT_COMPLEX64 = 8] = "DT_COMPLEX64", r[r.DT_INT64 = 9] = "DT_INT64", r[r.DT_BOOL = 10] = "DT_BOOL", r[r.DT_QINT8 = 11] = "DT_QINT8", r[r.DT_QUINT8 = 12] = "DT_QUINT8", r[r.DT_QINT32 = 13] = "DT_QINT32", r[r.DT_BFLOAT16 = 14] = "DT_BFLOAT16", r[r.DT_QINT16 = 15] = "DT_QINT16", r[r.DT_QUINT16 = 16] = "DT_QUINT16", r[r.DT_UINT16 = 17] = "DT_UINT16", r[r.DT_COMPLEX128 = 18] = "DT_COMPLEX128", r[r.DT_HALF = 19] = "DT_HALF", r[r.DT_RESOURCE = 20] = "DT_RESOURCE", r[r.DT_VARIANT = 21] = "DT_VARIANT", r[r.DT_UINT32 = 22] = "DT_UINT32", r[r.DT_UINT64 = 23] = "DT_UINT64", r[r.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", r[r.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", r[r.DT_INT32_REF = 103] = "DT_INT32_REF", r[r.DT_UINT8_REF = 104] = "DT_UINT8_REF", r[r.DT_INT16_REF = 105] = "DT_INT16_REF", r[r.DT_INT8_REF = 106] = "DT_INT8_REF", r[r.DT_STRING_REF = 107] = "DT_STRING_REF", r[r.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", r[r.DT_INT64_REF = 109] = "DT_INT64_REF", r[r.DT_BOOL_REF = 110] = "DT_BOOL_REF", r[r.DT_QINT8_REF = 111] = "DT_QINT8_REF", r[r.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", r[r.DT_QINT32_REF = 113] = "DT_QINT32_REF", r[r.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", r[r.DT_QINT16_REF = 115] = "DT_QINT16_REF", r[r.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", r[r.DT_UINT16_REF = 117] = "DT_UINT16_REF", r[r.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", r[r.DT_HALF_REF = 119] = "DT_HALF_REF", r[r.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", r[r.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", r[r.DT_UINT32_REF = 122] = "DT_UINT32_REF", r[r.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(ho || (ho = {}));
var gT;
(function(r) {
  let t8;
  (function(e) {
    e[e.LEGACY = 0] = "LEGACY", e[e.V1 = 1] = "V1", e[e.V2 = 2] = "V2";
  })(t8 = r.CheckpointFormatVersion || (r.CheckpointFormatVersion = {}));
})(gT || (gT = {}));
var dS = {};
function D5(r, t8) {
  let e = { tfOpName: r, category: "custom", inputs: [], attrs: [], customExecutor: t8 };
  dS[r] = e;
}
function pf(r) {
  return dS[r];
}
function A5(r) {
  delete dS[r];
}
function I(r, t8, e, o, n) {
  let s = t8.inputParams[r];
  if (s && s.inputIndexStart !== void 0) {
    let i = s.inputIndexStart, p = s.inputIndexEnd === 0 ? void 0 : s.inputIndexEnd === void 0 ? i + 1 : s.inputIndexEnd, u = i < 0 ? t8.inputNames.length + i : i;
    if (s.type === "tensor")
      return zt(t8.inputNames[u], e, o, n);
    if (s.type === "tensors") {
      let m = t8.inputs.slice(i, p);
      return t8.inputNames.slice(i, p).filter((f, h) => {
        var g;
        return ((g = m[h]) === null || g === void 0 ? void 0 : g.op) !== "NoOp";
      }).map((f) => zt(f, e, o, n));
    }
    let c = zt(t8.inputNames[u], e, o, n), l = c.dataSync();
    return s.type === "number" ? l[0] : y.toNestedArray(c.shape, l);
  }
  let a = t8.attrParams[r];
  return a && a.value;
}
function zt(r, t8, e, o) {
  let [n, s] = Tr(r, e);
  if (o != null) {
    let i = o.getHashTableHandleByName(n);
    if (i != null)
      return i;
  }
  let a = e.currentContextIds.find((i) => !!t8[cf(n, i)]);
  return a !== void 0 ? t8[cf(n, a)][s] : void 0;
}
function fS(r, t8, e) {
  return t8[cf(r, e.currentContextId)];
}
function Ls(r, t8) {
  let [e, o, n] = Tr(r, t8);
  return [cf(e, t8 && t8.currentContextId), o, n];
}
function cf(r, t8) {
  return t8 ? `${r}-${t8}` : r;
}
function Tr(r, t8) {
  if (r === "")
    return ["", 0, void 0];
  let e = t8 != null && t8.parseNodeNameCache != null;
  if (e) {
    let s = t8.parseNodeNameCache.get(r);
    if (s != null)
      return s;
  }
  let o = r.split(":"), n;
  if (o.length === 1)
    n = [r, 0, void 0];
  else {
    let s = o[0], a = o.length === 3 ? o[1] : void 0, i = Number(o[o.length - 1]);
    n = [s, i, a];
  }
  return e && t8.parseNodeNameCache.set(r, n), n;
}
function Ol(r, t8, e) {
  let o = I("pad", r, t8, e);
  if (o === "explicit") {
    o = I("explicitPaddings", r, t8, e);
    let n = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let s = 0; s < 4; s++)
      n[s][0] = o[s * 2], n[s][1] = o[s * 2 + 1];
    return n;
  }
  return o;
}
function Bs(r) {
  return r.kept ? r : Ur(r);
}
var hS = {};
qe(hS, { json: () => F5 });
var F5 = [{ tfOpName: "Add", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddV2", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "BiasAdd", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "Sub", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "RealDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Div", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "DivNoNan", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mul", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Maximum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Minimum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Pow", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SquaredDifference", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorMod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var gS = {};
qe(gS, { json: () => P5 });
var P5 = [{ tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan2", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ClipByValue", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "clipValueMin", type: "number" }, { start: 2, name: "clipValueMax", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Complex", category: "basic_math", inputs: [{ start: 0, name: "real", type: "tensor" }, { start: 1, name: "imag", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Imag", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Real", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Prelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "alpha", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu6", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LeakyRelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsNan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsFinite", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsInf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var xS = {};
qe(xS, { json: () => O5 });
var O5 = [{ tfOpName: "EmptyTensorList", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "maxNumElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] }, { tfOpName: "Switch", category: "control", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "pred", type: "tensor" }] }, { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "Enter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "frame_name", name: "frameName", type: "string" }, { tfName: "is_constant", name: "isConstant", type: "bool" }] }, { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayV3", category: "control", inputs: [{ start: 0, name: "size", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "dynamic_size", name: "dynamicSize", type: "bool" }, { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" }, { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" }, { tfName: "tensor_array_name", name: "name", type: "string" }] }, { tfOpName: "TensorArrayWriteV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayReadV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayGatherV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }] }, { tfOpName: "TensorArrayScatterV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArrayConcatV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: true }] }, { tfOpName: "TensorArraySplitV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }, { start: 2, name: "lengths", type: "number[]" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArraySizeV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }] }, { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }] }, { tfOpName: "StatelessIf", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "If", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "StatelessWhile", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "While", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "TensorListScatter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListScatterV2", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }, { start: 3, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGather", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListSetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListReserve", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListFromTensor", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListStack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }, { tfName: "num_elements", name: "numElements", type: "dtype" }] }, { tfOpName: "TensorListSplit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }, { start: 2, name: "lengths", type: "number[]" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcat", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcatV2", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPopBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPushBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListLength", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }] }, { tfOpName: "TensorListResize", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "size", type: "number" }] }];
var yS = {};
qe(yS, { json: () => M5 });
var M5 = [{ tfOpName: "AvgPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [], notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPoolWithArgmax", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "include_batch_in_index", name: "includeBatchInIndex", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AvgPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Conv1D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "stride", name: "stride", type: "number" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 }] }, { tfOpName: "Conv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "_FusedConv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: true }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: 0.2 }] }, { tfOpName: "Conv2DBackpropInput", category: "convolution", inputs: [{ start: 2, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 0, name: "outputShape", type: "number[]" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]", notSupported: true }] }, { tfOpName: "DepthwiseConv2d", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "DepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "FusedDepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }] }, { tfOpName: "Conv3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "Dilation2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "rates", name: "dilations", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }] }];
var bS = {};
qe(bS, { json: () => L5 });
var L5 = [{ tfOpName: "Fill", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }, { start: 1, name: "value", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "LinSpace", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "num", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "OneHot", category: "creation", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "depth", type: "number" }, { start: 2, name: "onValue", type: "number", defaultValue: 1 }, { start: 3, name: "offValue", type: "number", defaultValue: 0 }], attrs: [{ tfName: "axis", name: "axis", type: "number", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "RandomStandardNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "RandomUniform", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number", defaultValue: 0 }, { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "RandomUniformInt", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number" }, { tfName: "maxval", name: "maxval", type: "number" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Range", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "step", type: "number", defaultValue: 0 }], attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }] }, { tfOpName: "TruncatedNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "means", name: "mean", type: "number", defaultValue: 0 }, { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 }, { tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Multinomial", category: "creation", inputs: [{ start: 0, name: "logits", type: "tensor" }, { start: 1, name: "numSamples", type: "number" }], attrs: [{ tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number" }, { tfName: "T", name: "dtype", type: "dtype" }, { tfName: "output_dtype", name: "output_dtype", type: "dtype" }] }];
var CS = {};
qe(CS, { json: () => B5 });
var B5 = [{ tfOpName: "NonMaxSuppressionV2", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV3", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV4", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "T_threshold", name: "threshold", type: "dtype", notSupported: true }, { tfName: "pad_to_max_output_size", name: "padToMaxOutputSize", type: "bool" }] }, { tfOpName: "NonMaxSuppressionV5", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }, { start: 5, name: "softNmsSigma", type: "number" }] }, { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ListDiff", category: "dynamic", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var wS = {};
qe(wS, { json: () => z5 });
var z5 = [{ tfOpName: "LowerBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "TopKV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "k", type: "number" }], attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }] }, { tfOpName: "UpperBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "Unique", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "UniqueV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }];
var SS = {};
qe(SS, { json: () => V5 });
var V5 = [{ tfOpName: "PlaceholderWithDefault", category: "graph", inputs: [{ start: 0, name: "default", type: "tensor" }], attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Placeholder", category: "graph", attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Const", category: "graph" }, { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Print", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "data", type: "tensors" }], attrs: [{ tfName: "message", name: "message", type: "string" }, { tfName: "first_n", name: "firstN", type: "number", notSupported: true }, { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 }] }, { tfOpName: "NoOp", category: "graph", inputs: [] }, { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "FakeQuantWithMinMaxVars", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "min", name: "min", type: "number" }, { tfName: "max", name: "max", type: "number" }] }];
var IS = {};
qe(IS, { json: () => W5 });
var W5 = [{ tfOpName: "HashTable", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "HashTableV2", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "LookupTableImport", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableImportV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFind", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFindV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableSize", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "LookupTableSizeV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "InitializeTable", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }, { tfOpName: "InitializeTableV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }];
var vS = {};
qe(vS, { json: () => U5 });
var U5 = [{ tfOpName: "ResizeBilinear", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ResizeNearestNeighbor", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "CropAndResize", category: "image", inputs: [{ start: 0, name: "image", type: "tensor" }, { start: 1, name: "boxes", type: "tensor" }, { start: 2, name: "boxInd", type: "tensor" }, { start: 3, name: "cropSize", type: "number[]" }], attrs: [{ tfName: "method", name: "method", type: "string" }, { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" }] }, { tfOpName: "ImageProjectiveTransformV3", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "transforms", type: "tensor" }, { start: 2, name: "outputShape", type: "number[]" }, { start: 3, name: "fillValue", type: "number" }], attrs: [{ tfName: "interpolation", name: "interpolation", type: "string" }, { tfName: "fill_mode", name: "fillMode", type: "string" }] }];
var kS = {};
qe(kS, { json: () => G5 });
var G5 = [{ tfOpName: "Equal", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NotEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Greater", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "GreaterEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Less", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LessEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalAnd", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalOr", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Select", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SelectV2", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BitwiseAnd", category: "logical", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }] }];
var NS = {};
qe(NS, { json: () => H5 });
var H5 = [{ tfOpName: "_FusedMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMulV2", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Transpose", category: "matrices", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "perm", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Einsum", category: "matrices", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "equation", name: "equation", type: "string" }, { tfName: "N", name: "n", type: "number", defaultValue: 2 }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "MatrixBandPart", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "numLower", type: "tensor" }, { start: 1, name: "numUpper", type: "tensor" }] }];
var TS = {};
qe(TS, { json: () => K5 });
var K5 = [{ tfOpName: "EuclideanNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", defaultValue: false }] }, { tfOpName: "FusedBatchNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV2", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV3", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "LRN", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 }, { tfName: "bias", name: "bias", type: "number", defaultValue: 1 }, { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 }, { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 }] }, { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }];
var _S = {};
qe(_S, { json: () => q5 });
var q5 = [{ tfOpName: "Bincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }] }, { tfOpName: "DenseBincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }], attrs: [{ tfName: "binary_output", name: "binaryOutput", type: "bool" }] }, { tfOpName: "Max", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Mean", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Min", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Sum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "All", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Any", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "ArgMax", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "ArgMin", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Prod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cumprod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }, { tfOpName: "Cumsum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }];
var $S = {};
qe($S, { json: () => j5 });
var j5 = [{ tfOpName: "ConcatV2", category: "slice_join", inputs: [{ start: 0, end: -1, name: "tensors", type: "tensors" }, { start: -1, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "Concat", category: "slice_join", inputs: [{ start: 1, end: 0, name: "tensors", type: "tensors" }, { start: 0, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "GatherV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }], attrs: [{ tfName: "batch_dims", name: "batchDims", type: "number", defaultValue: 0 }] }, { tfOpName: "Gather", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: true }] }, { tfOpName: "Reverse", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "dims", type: "bool[]" }] }, { tfOpName: "ReverseV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }] }, { tfOpName: "Slice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "size", type: "number[]" }] }, { tfOpName: "StridedSlice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "end", type: "number[]" }, { start: 3, name: "strides", type: "number[]" }], attrs: [{ tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 }, { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 }, { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 }, { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 }, { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 }] }, { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Unpack", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Tile", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "reps", type: "number[]" }] }, { tfOpName: "Split", category: "slice_join", inputs: [{ start: 0, name: "axis", type: "number", defaultValue: 0 }, { start: 1, name: "x", type: "tensor" }], attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }] }, { tfOpName: "SplitV", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "numOrSizeSplits", type: "number[]" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "ScatterNd", category: "slice_join", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "shape", type: "number[]" }] }, { tfOpName: "GatherNd", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "slice_join", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: false, notSupported: true }] }, { tfOpName: "TensorScatterUpdate", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }];
var ES = {};
qe(ES, { json: () => X5 });
var X5 = [{ tfOpName: "SparseFillEmptyRows", category: "sparse", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "denseShape", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }] }, { tfOpName: "SparseReshape", category: "sparse", inputs: [{ start: 0, name: "inputIndices", type: "tensor" }, { start: 1, name: "inputShape", type: "tensor" }, { start: 2, name: "newShape", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SparseSegmentMean", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }, { tfOpName: "SparseSegmentSum", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }];
var RS = {};
qe(RS, { json: () => Y5 });
var Y5 = [{ tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "RFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }, { tfOpName: "IRFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }];
var DS = {};
qe(DS, { json: () => Q5 });
var Q5 = [{ tfOpName: "StaticRegexReplace", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "pattern", name: "pattern", type: "string" }, { tfName: "rewrite", name: "rewrite", type: "string" }, { tfName: "replace_global", name: "replaceGlobal", type: "bool" }] }, { tfOpName: "StringNGrams", category: "string", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "dataSplits", type: "tensor" }], attrs: [{ tfName: "separator", name: "separator", type: "string" }, { tfName: "ngram_widths", name: "nGramWidths", type: "number[]" }, { tfName: "left_pad", name: "leftPad", type: "string" }, { tfName: "right_pad", name: "rightPad", type: "string" }, { tfName: "pad_width", name: "padWidth", type: "number" }, { tfName: "preserve_short_sequences", name: "preserveShortSequences", type: "bool" }], outputs: ["ngrams", "ngrams_splits"] }, { tfOpName: "StringSplit", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "delimiter", type: "tensor" }], attrs: [{ tfName: "skip_empty", name: "skipEmpty", type: "bool" }], outputs: ["indices", "values", "shape"] }, { tfOpName: "StringToHashBucketFast", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "num_buckets", name: "numBuckets", type: "number" }] }];
var AS = {};
qe(AS, { json: () => Z5 });
var Z5 = [{ tfOpName: "Cast", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: true }, { tfName: "DstT", name: "dtype", type: "dtype" }] }, { tfOpName: "ExpandDims", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "MirrorPad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "mode", name: "mode", type: "string" }] }, { tfOpName: "Pad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "PadV2", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }, { start: 2, name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "Reshape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "EnsureShape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] }, { tfOpName: "SpaceToBatchND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "paddings", type: "number[]" }] }, { tfOpName: "BatchToSpaceND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "crops", type: "number[]" }] }, { tfOpName: "DepthToSpace", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "block_size", name: "blockSize", type: "number" }, { tfName: "data_format", name: "dataFormat", type: "string" }] }, { tfOpName: "BroadcastTo", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }], attrs: [] }, { tfOpName: "BroadcastArgs", category: "transformation", inputs: [{ start: 0, name: "s0", type: "tensor" }, { start: 1, name: "s1", type: "tensor" }], attrs: [] }];
var Ml = class {
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  constructor() {
    let t8 = [hS, gS, xS, yS, bS, CS, wS, SS, IS, vS, kS, NS, TS, _S, $S, ES, RS, DS, AS], e = [].concat(...t8.map((o) => o.json));
    this.opMappers = e.reduce((o, n) => (o[n.tfOpName] = n, o), {});
  }
  transformGraph(t8, e = {}) {
    let o = t8.node, n = [], s = [], a = [], i = o.reduce((h, g) => (h[g.name] = this.mapNode(g), g.op.startsWith("Placeholder") ? n.push(h[g.name]) : g.op === "Const" ? s.push(h[g.name]) : (g.input == null || g.input.length === 0) && a.push(h[g.name]), h), {}), p = [], u = [], c = {}, l = {};
    e != null && (c = this.mapSignatureEntries(e.inputs), l = this.mapSignatureEntries(e.outputs));
    let m = Object.keys(i);
    m.forEach((h) => {
      let g = i[h];
      g.inputNames.forEach((x, b) => {
        let [C, , S] = Ls(x), k = i[C];
        if (k.outputs != null) {
          let _ = k.outputs.indexOf(S);
          if (_ !== -1) {
            let E = `${C}:${_}`;
            g.inputNames[b] = E;
          }
        }
        g.inputs.push(k), k.children.push(g);
      });
    }), Object.keys(l).length === 0 ? m.forEach((h) => {
      let g = i[h];
      g.children.length === 0 && u.push(g);
    }) : Object.keys(l).forEach((h) => {
      let [g] = Ls(h), x = i[g];
      x != null && (x.signatureKey = l[h], u.push(x));
    }), Object.keys(c).length > 0 ? Object.keys(c).forEach((h) => {
      let [g] = Ls(h), x = i[g];
      x && (x.signatureKey = c[h], p.push(x));
    }) : p = n;
    let d = {};
    t8.library != null && t8.library.function != null && (d = t8.library.function.reduce((h, g) => (h[g.signature.name] = this.mapFunction(g), h), {}));
    let f = { nodes: i, inputs: p, outputs: u, weights: s, placeholders: n, signature: e, functions: d };
    return a.length > 0 && (f.initNodes = a), f;
  }
  mapSignatureEntries(t8) {
    return Object.keys(t8 || {}).reduce((e, o) => (e[t8[o].name] = o, e), {});
  }
  mapNode(t8) {
    let e = pf(t8.op) || this.opMappers[t8.op] || {};
    t8.attr == null && (t8.attr = {});
    let o = { name: t8.name, op: t8.op, category: e.category, inputNames: (t8.input || []).map((n) => n.startsWith("^") ? n.slice(1) : n), inputs: [], children: [], inputParams: {}, attrParams: {}, rawAttrs: t8.attr, outputs: e.outputs };
    return e.inputs != null && (o.inputParams = e.inputs.reduce((n, s) => (n[s.name] = { type: s.type, inputIndexStart: s.start, inputIndexEnd: s.end }, n), {})), e.attrs != null && (o.attrParams = e.attrs.reduce((n, s) => {
      let a = s.type, i;
      switch (s.type) {
        case "string":
          i = lf(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = lf(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "string[]":
          i = yf(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = yf(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "number":
          i = df(t8.attr, s.tfName, s.defaultValue || 0), i === void 0 && s.tfDeprecatedName && (i = df(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "number[]":
          i = xf(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = xf(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "bool":
          i = mf(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = mf(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "bool[]":
          i = Cf(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = Cf(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "shape":
          i = gf(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = gf(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "shape[]":
          i = bf(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = bf(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "dtype":
          i = ff(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = ff(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "dtype[]":
          i = hf(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = hf(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "func":
          i = xT(t8.attr, s.tfName, s.defaultValue), i === void 0 && s.tfDeprecatedName && (i = xT(t8.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${s.type} for op: ${t8.op}`);
      }
      return n[s.name] = { value: i, type: a }, n;
    }, {})), o;
  }
  mapFunction(t8) {
    let e = t8.nodeDef, o = [], n = [], s = {};
    e != null && (s = e.reduce((l, m) => (l[m.name] = this.mapNode(m), m.op === "Const" && n.push(l[m.name]), l), {}));
    let a = [], i = [];
    t8.signature.inputArg.forEach((l) => {
      let [m] = Ls(l.name), d = { name: m, op: "Placeholder", inputs: [], inputNames: [], category: "graph", inputParams: {}, attrParams: { dtype: { value: FS(l.type), type: "dtype" } }, children: [] };
      d.signatureKey = l.name, a.push(d), s[m] = d;
    }), Object.keys(s).forEach((l) => {
      let m = s[l];
      m.inputNames.forEach((d, f) => {
        let [h, , g] = Ls(d), x = s[h];
        if (x.outputs != null) {
          let b = x.outputs.indexOf(g);
          if (b !== -1) {
            let C = `${h}:${b}`;
            m.inputNames[f] = C;
          }
        }
        m.inputs.push(x), x.children.push(m);
      });
    });
    let u = t8.ret;
    t8.signature.outputArg.forEach((l) => {
      let [m, d] = Ls(u[l.name]), f = s[m];
      f != null && (f.defaultOutput = d, i.push(f));
    });
    let c = this.mapArgsToSignature(t8);
    return { nodes: s, inputs: a, outputs: i, weights: n, placeholders: o, signature: c };
  }
  mapArgsToSignature(t8) {
    return { methodName: t8.signature.name, inputs: t8.signature.inputArg.reduce((e, o) => (e[o.name] = this.mapArgToTensorInfo(o), e), {}), outputs: t8.signature.outputArg.reduce((e, o) => (e[o.name] = this.mapArgToTensorInfo(o, t8.ret), e), {}) };
  }
  mapArgToTensorInfo(t8, e) {
    let o = t8.name;
    return e != null && (o = e[o]), { name: o, dtype: t8.type };
  }
};
function J5(r) {
  let t8 = A().global;
  if (typeof t8.atob != "undefined")
    return t8.atob(r);
  if (typeof Buffer != "undefined")
    return new Buffer(r, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function yT(r, t8) {
  let e = Array.isArray(r) ? String.fromCharCode.apply(null, r) : J5(r);
  return t8 ? e : e.toLowerCase();
}
function lf(r, t8, e, o = false) {
  let n = r[t8];
  return n != null ? yT(n.s, o) : e;
}
function mf(r, t8, e) {
  let o = r[t8];
  return o ? o.b : e;
}
function df(r, t8, e) {
  let o = r[t8] || {}, n = o.i != null ? o.i : o.f != null ? o.f : e;
  return typeof n == "number" ? n : parseInt(n, 10);
}
function FS(r) {
  switch (typeof r == "string" && (r = ho[r]), r) {
    case ho.DT_FLOAT:
    case ho.DT_HALF:
      return "float32";
    case ho.DT_INT32:
    case ho.DT_INT64:
    case ho.DT_INT8:
    case ho.DT_UINT8:
      return "int32";
    case ho.DT_BOOL:
      return "bool";
    case ho.DT_DOUBLE:
      return "float32";
    case ho.DT_STRING:
      return "string";
    default:
      return null;
  }
}
function xT(r, t8, e) {
  let o = r[t8];
  return o && o.func ? o.func.name : e;
}
function ff(r, t8, e) {
  let o = r[t8];
  return o && o.type ? FS(o.type) : e;
}
function hf(r, t8, e) {
  let o = r[t8];
  return o && o.list && o.list.type ? o.list.type.map((n) => FS(n)) : e;
}
function bT(r) {
  if (!r.unknownRank)
    return r.dim != null ? r.dim.map((t8) => typeof t8.size == "number" ? t8.size : parseInt(t8.size, 10)) : [];
}
function gf(r, t8, e) {
  let o = r[t8];
  return o && o.shape ? bT(o.shape) : e;
}
function xf(r, t8, e) {
  let o = r[t8];
  return o ? ((o.list.f && o.list.f.length ? o.list.f : o.list.i) || []).map((n) => typeof n == "number" ? n : parseInt(n, 10)) : e;
}
function yf(r, t8, e, o = false) {
  let n = r[t8];
  return n && n.list && n.list.s ? n.list.s.map((s) => yT(s, o)) : e;
}
function bf(r, t8, e) {
  let o = r[t8];
  return o && o.list && o.list.shape ? o.list.shape.map((n) => bT(n)) : e;
}
function Cf(r, t8, e) {
  let o = r[t8];
  return o && o.list && o.list.b ? o.list.b : e;
}
var wf = class {
  constructor(t8, e, o) {
    this.node = t8, this.tensorMap = e, this.context = o, this.inputs = [], this.attrs = {}, this.inputs = t8.inputNames.map((n) => this.getInput(n)), t8.rawAttrs != null && (this.attrs = Object.keys(t8.rawAttrs).reduce((n, s) => (n[s] = this.getAttr(s), n), {}));
  }
  getInput(t8) {
    return zt(t8, this.tensorMap, this.context);
  }
  getAttr(t8, e) {
    let o = this.node.rawAttrs[t8];
    if (o.tensor != null)
      return zt(t8, this.tensorMap, this.context);
    if (o.i != null || o.f != null)
      return df(this.node.rawAttrs, t8, e);
    if (o.s != null)
      return lf(this.node.rawAttrs, t8, e);
    if (o.b != null)
      return mf(this.node.rawAttrs, t8, e);
    if (o.shape != null)
      return gf(this.node.rawAttrs, t8, e);
    if (o.type != null)
      return ff(this.node.rawAttrs, t8, e);
    if (o.list != null) {
      if (o.list.i != null || o.list.f != null)
        return xf(this.node.rawAttrs, t8, e);
      if (o.list.s != null)
        return yf(this.node.rawAttrs, t8, e);
      if (o.list.shape != null)
        return bf(this.node.rawAttrs, t8, e);
      if (o.list.b != null)
        return Cf(this.node.rawAttrs, t8, e);
      if (o.list.type != null)
        return hf(this.node.rawAttrs, t8, e);
    }
    return e;
  }
};
var Je = {};
qe(Je, { OP_SCOPE_SUFFIX: () => kw, abs: () => Jt, acos: () => kk, acosh: () => Nk, add: () => Ce, addN: () => Tk, all: () => _k, any: () => $k, argMax: () => Ek, argMin: () => Rk, asin: () => Dk, asinh: () => Ak, atan: () => Fk, atan2: () => Pk, atanh: () => Ok, avgPool: () => fd, avgPool3d: () => Bk, basicLSTMCell: () => zk, batchNorm: () => au, batchNorm2d: () => Wk, batchNorm3d: () => Uk, batchNorm4d: () => Gk, batchToSpaceND: () => hd, bincount: () => gd, bitwiseAnd: () => Hk, booleanMaskAsync: () => E6, broadcastArgs: () => Kk, broadcastTo: () => iu, buffer: () => me, cast: () => We, ceil: () => qk, clipByValue: () => jk, clone: () => Ur, complex: () => Er, concat: () => bt, concat1d: () => Xk, concat2d: () => Yk, concat3d: () => Qk, concat4d: () => Zk, conv1d: () => Jk, conv2d: () => uu, conv2dTranspose: () => e2, conv3d: () => t2, conv3dTranspose: () => o2, cos: () => n2, cosh: () => s2, cosineWindow: () => Rl, cumprod: () => a2, cumsum: () => i2, denseBincount: () => u2, depthToSpace: () => p2, depthwiseConv2d: () => lc, diag: () => c2, dilation2d: () => l2, div: () => je, divNoNan: () => d2, dot: () => f2, dropout: () => W6, einsum: () => pu, elu: () => Cd, enclosingPowerOfTwo: () => Qw, ensureShape: () => h2, equal: () => bd, erf: () => g2, euclideanNorm: () => b2, exp: () => $o, expandDims: () => Ms, expm1: () => C2, eye: () => wd, fft: () => fc, fill: () => Ea, floor: () => Sd, floorDiv: () => dd, fused: () => Zw, gather: () => Id, gatherND: () => z6, greater: () => qu, greaterEqual: () => vd, ifft: () => Ju, imag: () => lu, image: () => Kj, inTopKAsync: () => G6, irfft: () => Kd, isFinite: () => w2, isInf: () => S2, isNaN: () => I2, leakyRelu: () => kd, less: () => _l, lessEqual: () => mc, linalg: () => qj, linspace: () => v2, localResponseNormalization: () => k2, log: () => pi, log1p: () => Nd, logSigmoid: () => N2, logSoftmax: () => T2, logSumExp: () => $d, logicalAnd: () => ju, logicalNot: () => Ed, logicalOr: () => Rd, logicalXor: () => _2, losses: () => jj, lowerBound: () => $2, matMul: () => Ze, max: () => Ra, maxPool: () => Ad, maxPool3d: () => E2, maxPoolWithArgmax: () => R2, maximum: () => Fd, mean: () => Xu, meshgrid: () => D2, min: () => Tl, minimum: () => Yu, mirrorPad: () => A2, mod: () => F2, moments: () => P2, movingAverage: () => A6, mul: () => se, multiRNNCell: () => O2, multinomial: () => M2, neg: () => cr, norm: () => Ku, notEqual: () => Pd, oneHot: () => El, ones: () => Da, onesLike: () => L2, op: () => N, outerProduct: () => B2, pad: () => Aa, pad1d: () => z2, pad2d: () => V2, pad3d: () => W2, pad4d: () => U2, pool: () => G2, pow: () => ui, prelu: () => Md, print: () => md, prod: () => H2, raggedGather: () => K2, raggedRange: () => q2, raggedTensorToTensor: () => j2, rand: () => X2, randomGamma: () => g1, randomNormal: () => Ud, randomStandardNormal: () => x1, randomUniform: () => dc, randomUniformInt: () => y1, range: () => mu, real: () => ci, reciprocal: () => b1, relu: () => du, relu6: () => Gd, reshape: () => W, reverse: () => mo, reverse1d: () => C1, reverse2d: () => w1, reverse3d: () => S1, reverse4d: () => I1, rfft: () => hc, round: () => Hd, rsqrt: () => v1, scalar: () => ke, scatterND: () => P6, searchSorted: () => $l, selu: () => k1, separableConv2d: () => N1, setdiff1dAsync: () => T1, sigmoid: () => $a, sign: () => _1, signal: () => Hj, sin: () => $1, sinh: () => E1, slice: () => Xe, slice1d: () => R1, slice2d: () => D1, slice3d: () => A1, slice4d: () => F1, softmax: () => P1, softplus: () => _d, spaceToBatchND: () => Od, sparse: () => Xj, sparseToDense: () => L6, spectral: () => Gj, split: () => li, sqrt: () => Dr, square: () => er, squaredDifference: () => qd, squeeze: () => gc, stack: () => kr, step: () => jd, stridedSlice: () => O1, string: () => Yj, sub: () => Te, sum: () => ot, tan: () => M1, tanh: () => Nl, tensor: () => ur, tensor1d: () => tr, tensor2d: () => fu, tensor3d: () => Xd, tensor4d: () => L1, tensor5d: () => B1, tensor6d: () => z1, tensorScatterUpdate: () => W1, tile: () => cu, topk: () => U1, transpose: () => yc, truncatedNormal: () => G1, unique: () => H1, unsortedSegmentSum: () => K1, unstack: () => fo, upperBound: () => q1, variable: () => j1, where: () => lo, whereAsync: () => Qd, zeros: () => Gr, zerosLike: () => Ht });
var CT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [o.add(I("a", r, t8, e), I("b", r, t8, e))];
    case "AddN":
      return [o.addN(I("tensors", r, t8, e))];
    case "FloorMod":
    case "Mod":
      return [o.mod(I("a", r, t8, e), I("b", r, t8, e))];
    case "Mul":
      return [o.mul(I("a", r, t8, e), I("b", r, t8, e))];
    case "RealDiv":
    case "Div":
      return [o.div(I("a", r, t8, e), I("b", r, t8, e))];
    case "DivNoNan":
      return [o.divNoNan(I("a", r, t8, e), I("b", r, t8, e))];
    case "FloorDiv":
      return [o.floorDiv(I("a", r, t8, e), I("b", r, t8, e))];
    case "Sub":
      return [o.sub(I("a", r, t8, e), I("b", r, t8, e))];
    case "Minimum":
      return [o.minimum(I("a", r, t8, e), I("b", r, t8, e))];
    case "Maximum":
      return [o.maximum(I("a", r, t8, e), I("b", r, t8, e))];
    case "Pow":
      return [o.pow(I("a", r, t8, e), I("b", r, t8, e))];
    case "SquaredDifference":
      return [o.squaredDifference(I("a", r, t8, e), I("b", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var wT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "Abs":
    case "ComplexAbs":
      return [o.abs(I("x", r, t8, e))];
    case "Acos":
      return [o.acos(I("x", r, t8, e))];
    case "Acosh":
      return [o.acosh(I("x", r, t8, e))];
    case "Asin":
      return [o.asin(I("x", r, t8, e))];
    case "Asinh":
      return [o.asinh(I("x", r, t8, e))];
    case "Atan":
      return [o.atan(I("x", r, t8, e))];
    case "Atan2":
      return [o.atan2(I("x", r, t8, e), I("y", r, t8, e))];
    case "Atanh":
      return [o.atanh(I("x", r, t8, e))];
    case "Ceil":
      return [o.ceil(I("x", r, t8, e))];
    case "Complex":
      return [o.complex(I("real", r, t8, e), I("imag", r, t8, e))];
    case "Cos":
      return [o.cos(I("x", r, t8, e))];
    case "Cosh":
      return [o.cosh(I("x", r, t8, e))];
    case "Elu":
      return [o.elu(I("x", r, t8, e))];
    case "Erf":
      return [o.erf(I("x", r, t8, e))];
    case "Exp":
      return [o.exp(I("x", r, t8, e))];
    case "Expm1":
      return [o.expm1(I("x", r, t8, e))];
    case "Floor":
      return [o.floor(I("x", r, t8, e))];
    case "Log":
      return [o.log(I("x", r, t8, e))];
    case "Log1p":
      return [o.log1p(I("x", r, t8, e))];
    case "Imag":
      return [o.imag(I("x", r, t8, e))];
    case "Neg":
      return [o.neg(I("x", r, t8, e))];
    case "Reciprocal":
      return [o.reciprocal(I("x", r, t8, e))];
    case "Real":
      return [o.real(I("x", r, t8, e))];
    case "Relu":
      return [o.relu(I("x", r, t8, e))];
    case "Round":
      return [o.round(I("x", r, t8, e))];
    case "Selu":
      return [o.selu(I("x", r, t8, e))];
    case "Sigmoid":
      return [o.sigmoid(I("x", r, t8, e))];
    case "Sin":
      return [o.sin(I("x", r, t8, e))];
    case "Sign":
      return [o.sign(I("x", r, t8, e))];
    case "Sinh":
      return [o.sinh(I("x", r, t8, e))];
    case "Softplus":
      return [o.softplus(I("x", r, t8, e))];
    case "Sqrt":
      return [o.sqrt(I("x", r, t8, e))];
    case "Square":
      return [o.square(I("x", r, t8, e))];
    case "Tanh":
      return [o.tanh(I("x", r, t8, e))];
    case "Tan":
      return [o.tan(I("x", r, t8, e))];
    case "ClipByValue":
      return [o.clipByValue(I("x", r, t8, e), I("clipValueMin", r, t8, e), I("clipValueMax", r, t8, e))];
    case "Relu6":
      return [o.relu6(I("x", r, t8, e))];
    case "Rsqrt":
      return [o.rsqrt(zt(r.inputNames[0], t8, e))];
    case "LeakyRelu":
      return [o.leakyRelu(I("x", r, t8, e), I("alpha", r, t8, e))];
    case "Prelu":
      return [o.prelu(I("x", r, t8, e), I("alpha", r, t8, e))];
    case "IsNan":
      return [o.isNaN(zt(r.inputNames[0], t8, e))];
    case "IsInf":
      return [o.isInf(zt(r.inputNames[0], t8, e))];
    case "IsFinite":
      return [o.isFinite(zt(r.inputNames[0], t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function Hr(r, t8, e = "") {
  if (!(typeof r == "number" || typeof t8 == "number")) {
    y.assert(r.length === t8.length, () => e + ` Shapes ${r} and ${t8} must match`);
    for (let o = 0; o < r.length; o++) {
      let n = r[o], s = t8[o];
      y.assert(n < 0 || s < 0 || n === s, () => e + ` Shapes ${r} and ${t8} must match`);
    }
  }
}
function ST(r) {
  return !(typeof r == "number" || r.some((t8) => t8 < 0));
}
function bc(r, t8, e) {
  let o = Sf(r, e), n = !ST(o);
  if (n && t8.length === 0)
    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);
  if (n && t8.forEach((s) => {
    o = Sf(s.shape, o);
  }), !ST(o))
    throw new Error(`Non-fully-defined elementShape: ${o}`);
  return o;
}
function Sf(r, t8) {
  if (typeof r == "number")
    return t8;
  if (typeof t8 == "number")
    return r;
  if (r.length !== t8.length)
    throw new Error(`Incompatible ranks during merge: ${r} vs. ${t8}`);
  let e = [];
  for (let o = 0; o < r.length; ++o) {
    let n = r[o], s = t8[o];
    if (n >= 0 && s >= 0 && n !== s)
      throw new Error(`Incompatible shape during merge: ${r} vs. ${t8}`);
    e[o] = n >= 0 ? n : s;
  }
  return e;
}
var If = class {
  constructor(t8, e, o, n, s, a, i) {
    this.name = t8, this.dtype = e, this.maxSize = o, this.elementShape = n, this.identicalElementShapes = s, this.dynamicSize = a, this.clearAfterRead = i, this.tensors = [], this.closed_ = false, this.idTensor = ke(0), Rr(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  clearAndClose(t8) {
    this.tensors.forEach((e) => {
      (t8 == null || !t8.has(e.tensor.id)) && e.tensor.dispose();
    }), this.tensors = [], this.closed_ = true, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  read(t8) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (t8 < 0 || t8 >= this.size())
      throw new Error(`Tried to read from index ${t8}, but array size is: ${this.size()}`);
    let e = this.tensors[t8];
    if (e.cleared)
      throw new Error(`TensorArray ${this.name}: Could not read index ${t8} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (e.cleared = true), e.read = true, e.tensor;
  }
  readMany(t8) {
    return t8.map((e) => this.read(e));
  }
  write(t8, e) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (t8 < 0 || !this.dynamicSize && t8 >= this.maxSize)
      throw new Error(`Tried to write to index ${t8}, but array is not resizeable and size is: ${this.maxSize}`);
    let o = this.tensors[t8] || {};
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t8},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = e.shape), Hr(this.elementShape, e.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${t8}.`), o.read)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t8}, because it has already been read.`);
    if (o.written)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t8}, because it has already been written.`);
    o.tensor = e, Rr(e), o.written = true, this.tensors[t8] = o;
  }
  writeMany(t8, e) {
    if (t8.length !== e.length)
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t8.length} is not the same as tensors size: ${e.length}.`);
    t8.forEach((o, n) => this.write(o, e[n]));
  }
  gather(t8, e) {
    if (e && e !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);
    if (t8)
      t8 = t8.slice(0, this.size());
    else {
      t8 = [];
      for (let n = 0; n < this.size(); n++)
        t8.push(n);
    }
    if (t8.length === 0)
      return ur([], [0].concat(this.elementShape));
    let o = this.readMany(t8);
    return Hr(this.elementShape, o[0].shape, "TensorArray shape mismatch: "), kr(o, 0);
  }
  concat(t8) {
    if (t8 && t8 !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t8}`);
    if (this.size() === 0)
      return ur([], [0].concat(this.elementShape));
    let e = [];
    for (let n = 0; n < this.size(); n++)
      e.push(n);
    let o = this.readMany(e);
    return Hr(this.elementShape, o[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`), bt(o, 0);
  }
  scatter(t8, e) {
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);
    if (t8.length !== e.shape[0])
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t8.length} vs. ${e.shape[0]}`);
    let o = Math.max(...t8);
    if (!this.dynamicSize && o >= this.maxSize)
      throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);
    this.writeMany(t8, fo(e, 0));
  }
  split(t8, e) {
    if (e.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);
    let o = 0, n = t8.map((p) => (o += p, o));
    if (o !== e.shape[0])
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${e.shape}`);
    if (!this.dynamicSize && t8.length !== this.maxSize)
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t8.length}), and the TensorArray is not marked as dynamically resizeable`);
    let s = o === 0 ? 0 : e.size / o, a = [];
    De(() => {
      e = W(e, [1, o, s]);
      for (let p = 0; p < t8.length; ++p) {
        let c = [0, p === 0 ? 0 : n[p - 1], 0], l = [1, t8[p], s];
        a[p] = W(Xe(e, c, l), this.elementShape);
      }
      return a;
    });
    let i = [];
    for (let p = 0; p < t8.length; p++)
      i[p] = p;
    this.writeMany(i, a);
  }
};
var hi = class {
  get id() {
    return this.idTensor.id;
  }
  constructor(t8, e, o, n = -1) {
    this.tensors = t8, this.elementShape = e, this.elementDtype = o, t8 != null && t8.forEach((s) => {
      if (o !== s.dtype)
        throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);
      Hr(e, s.shape, "TensorList shape mismatch: "), Rr(s);
    }), this.idTensor = ke(0), this.maxNumElements = n, Rr(this.idTensor);
  }
  copy() {
    return new hi([...this.tensors], this.elementShape, this.elementDtype);
  }
  clearAndClose(t8) {
    this.tensors.forEach((e) => {
      (t8 == null || !t8.has(e.id)) && e.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  stack(t8, e, o = -1) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    if (o !== -1 && this.tensors.length !== o)
      throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);
    Hr(t8, this.elementShape, "TensorList shape mismatch: ");
    let n = bc(this.elementShape, this.tensors, t8);
    return De(() => {
      let s = this.tensors.map((a) => W(a, n));
      return kr(s, 0);
    });
  }
  popBack(t8, e) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    if (this.size() === 0)
      throw new Error("Trying to pop from an empty list.");
    let o = bc(this.elementShape, this.tensors, t8), n = this.tensors.pop();
    return n.kept = false, Hr(n.shape, t8, "TensorList shape mismatch: "), W(n, o);
  }
  pushBack(t8) {
    if (t8.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t8.dtype}, but list elements ${this.elementDtype}`);
    if (Hr(t8.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size())
      throw new Error("Trying to push element into a full list.");
    Rr(t8), this.tensors.push(t8);
  }
  resize(t8) {
    if (t8 < 0)
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${t8}`);
    if (this.maxNumElements !== -1 && t8 > this.maxNumElements)
      throw new Error(`TensorListResize input size ${t8} is greater maxNumElement ${this.maxNumElements}.`);
    let e = new hi([], this.elementShape, this.elementDtype, this.maxNumElements);
    e.tensors.length = t8;
    for (let o = 0; o < Math.min(this.tensors.length, t8); ++o)
      e.tensors[o] = this.tensors[o];
    return e;
  }
  getItem(t8, e, o) {
    if (o !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);
    if (t8 < 0 || t8 > this.tensors.length)
      throw new Error(`Trying to access element ${t8} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[t8] == null)
      throw new Error(`element at index ${t8} is null.`);
    Hr(this.tensors[t8].shape, e, "TensorList shape mismatch: ");
    let n = bc(this.elementShape, this.tensors, e);
    return W(this.tensors[t8], n);
  }
  setItem(t8, e) {
    if (e.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (t8 < 0 || this.maxNumElements !== -1 && t8 >= this.maxNumElements)
      throw new Error(`Trying to set element ${t8} in a list with max ${this.maxNumElements} elements.`);
    Hr(this.elementShape, e.shape, "TensorList shape mismatch: "), Rr(e), this.tensors[t8] != null && (this.tensors[t8].kept = false), this.tensors[t8] = e;
  }
  gather(t8, e, o) {
    if (e !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);
    Hr(this.elementShape, o, "TensorList shape mismatch: "), t8 = t8.slice(0, this.size());
    let n = bc(this.elementShape, this.tensors, o);
    return t8.length === 0 ? ur([], [0].concat(n)) : De(() => {
      let s = t8.map((a) => W(this.tensors[a], n));
      return kr(s, 0);
    });
  }
  concat(t8, e) {
    if (t8 && t8 !== this.elementDtype)
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t8}`);
    Hr(this.elementShape, e, "TensorList shape mismatch: ");
    let o = bc(this.elementShape, this.tensors, e);
    return this.size() === 0 ? ur([], [0].concat(o)) : De(() => {
      let n = this.tensors.map((s) => W(s, o));
      return bt(n, 0);
    });
  }
};
function IT(r, t8, e) {
  let o = r.dtype;
  if (r.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);
  if (r.dtype !== e)
    throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${e}`);
  let n = r.shape.slice(1);
  Hr(n, t8, "TensorList shape mismatch: ");
  let s = fo(r);
  return new hi(s, t8, o);
}
function vT(r, t8, e, o) {
  return new hi([], r, t8, o);
}
function kT(r, t8, e, o) {
  if (t8.length !== r.shape[0])
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t8.length} vs. ${r.shape[0]}`);
  let n = Math.max(...t8);
  if (o != null && o !== -1 && n >= o)
    throw new Error(`Max index must be < array size (${n}  vs. ${o})`);
  let s = new hi([], e, r.dtype, o), a = fo(r, 0);
  return t8.forEach((i, p) => {
    s.setItem(i, a[p]);
  }), s;
}
function NT(r, t8, e) {
  let o = 0, n = t8.map((c) => (o += c, o));
  if (o !== r.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);
  let s = r.shape.slice(1), a = Sf(s, e), i = o === 0 ? 0 : r.size / o, p = De(() => {
    let c = [];
    r = W(r, [1, o, i]);
    for (let l = 0; l < t8.length; ++l) {
      let d = [0, l === 0 ? 0 : n[l - 1], 0], f = [1, t8[l], i];
      c[l] = W(Xe(r, d, f), a);
    }
    return r.dispose(), c;
  }), u = new hi([], e, r.dtype, t8.length);
  for (let c = 0; c < p.length; c++)
    u.setItem(c, p[c]);
  return u;
}
var TT = async (r, t8, e) => {
  switch (r.op) {
    case "If":
    case "StatelessIf": {
      let o = I("thenBranch", r, t8, e), n = I("elseBranch", r, t8, e), s = I("cond", r, t8, e), a = I("args", r, t8, e);
      return (await s.data())[0] ? e.functionMap[o].executeFunctionAsync(a, e.tensorArrayMap, e.tensorListMap) : e.functionMap[n].executeFunctionAsync(a, e.tensorArrayMap, e.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      let o = I("body", r, t8, e), n = I("cond", r, t8, e), s = I("args", r, t8, e), a = await e.functionMap[n].executeFunctionAsync(s, e.tensorArrayMap, e.tensorListMap), i = s.map((c) => c.id), p = await a[0].data();
      a.forEach((c) => {
        !c.kept && i.indexOf(c.id) === -1 && c.dispose();
      });
      let u = s;
      for (; p[0]; ) {
        let c = u;
        u = await e.functionMap[o].executeFunctionAsync(u, e.tensorArrayMap, e.tensorListMap);
        let l = u.map((d) => d.id);
        c.forEach((d) => {
          !d.kept && i.indexOf(d.id) === -1 && l.indexOf(d.id) === -1 && d.dispose();
        });
        let m = await e.functionMap[n].executeFunctionAsync(u, e.tensorArrayMap, e.tensorListMap);
        p = await m[0].data(), m.forEach((d) => {
          !d.kept && i.indexOf(d.id) === -1 && l.indexOf(d.id) === -1 && d.dispose();
        });
      }
      return u;
    }
    case "LoopCond": {
      let o = I("pred", r, t8, e);
      return [Bs(o)];
    }
    case "Switch": {
      let o = I("pred", r, t8, e), n = I("data", r, t8, e);
      return n.kept || (n = Bs(n)), (await o.data())[0] ? [void 0, n] : [n, void 0];
    }
    case "Merge": {
      let o = r.inputNames.find((n) => zt(n, t8, e) !== void 0);
      if (o) {
        let n = zt(o, t8, e);
        return [Bs(n)];
      }
      return;
    }
    case "Enter": {
      let o = I("frameName", r, t8, e), n = I("tensor", r, t8, e);
      return e.enterFrame(o), [Bs(n)];
    }
    case "Exit": {
      let o = I("tensor", r, t8, e);
      return e.exitFrame(), [Bs(o)];
    }
    case "NextIteration": {
      let o = I("tensor", r, t8, e);
      return e.nextIteration(), [Bs(o)];
    }
    case "TensorArrayV3": {
      let o = I("size", r, t8, e), n = I("dtype", r, t8, e), s = I("elementShape", r, t8, e), a = I("dynamicSize", r, t8, e), i = I("clearAfterRead", r, t8, e), p = I("identicalElementShapes", r, t8, e), u = I("name", r, t8, e), c = new If(u, n, o, s, p, a, i);
      return e.addTensorArray(c), [c.idTensor, ke(1)];
    }
    case "TensorArrayWriteV3": {
      let o = I("tensorArrayId", r, t8, e), n = I("index", r, t8, e), s = I("tensor", r, t8, e), a = e.getTensorArray(o.id);
      return a.write(n, s), [a.idTensor];
    }
    case "TensorArrayReadV3": {
      let o = I("tensorArrayId", r, t8, e), n = I("index", r, t8, e);
      return [e.getTensorArray(o.id).read(n)];
    }
    case "TensorArrayGatherV3": {
      let o = I("tensorArrayId", r, t8, e), n = I("indices", r, t8, e), s = I("dtype", r, t8, e);
      return [e.getTensorArray(o.id).gather(n, s)];
    }
    case "TensorArrayScatterV3": {
      let o = I("tensorArrayId", r, t8, e), n = I("indices", r, t8, e), s = I("tensor", r, t8, e), a = e.getTensorArray(o.id);
      return a.scatter(n, s), [a.idTensor];
    }
    case "TensorArrayConcatV3": {
      let o = I("tensorArrayId", r, t8, e), n = e.getTensorArray(o.id), s = I("dtype", r, t8, e);
      return [n.concat(s)];
    }
    case "TensorArraySplitV3": {
      let o = I("tensorArrayId", r, t8, e), n = I("tensor", r, t8, e), s = I("lengths", r, t8, e), a = e.getTensorArray(o.id);
      return a.split(s, n), [a.idTensor];
    }
    case "TensorArraySizeV3": {
      let o = I("tensorArrayId", r, t8, e), n = e.getTensorArray(o.id);
      return [ke(n.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      let o = I("tensorArrayId", r, t8, e), n = e.getTensorArray(o.id);
      return n.clearAndClose(), [n.idTensor];
    }
    case "TensorListSetItem": {
      let o = I("tensorListId", r, t8, e), n = I("index", r, t8, e), s = I("tensor", r, t8, e), a = e.getTensorList(o.id);
      return a.setItem(n, s), [a.idTensor];
    }
    case "TensorListGetItem": {
      let o = I("tensorListId", r, t8, e), n = I("index", r, t8, e), s = I("elementShape", r, t8, e), a = I("elementDType", r, t8, e);
      return [e.getTensorList(o.id).getItem(n, s, a)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      let o = I("indices", r, t8, e), n = I("tensor", r, t8, e), s = I("elementShape", r, t8, e), a = I("numElements", r, t8, e), i = kT(n, o, s, a);
      return e.addTensorList(i), [i.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      let o = I("elementShape", r, t8, e), n = I("elementDType", r, t8, e), s;
      r.op === "TensorListReserve" ? s = "numElements" : s = "maxNumElements";
      let a = I(s, r, t8, e), i = r.op === "TensorListReserve" ? -1 : a, p = vT(o, n, a, i);
      return e.addTensorList(p), [p.idTensor];
    }
    case "TensorListGather": {
      let o = I("tensorListId", r, t8, e), n = I("indices", r, t8, e), s = I("elementShape", r, t8, e), a = I("elementDType", r, t8, e);
      return [e.getTensorList(o.id).gather(n, a, s)];
    }
    case "TensorListStack": {
      let o = I("tensorListId", r, t8, e), n = I("elementShape", r, t8, e), s = I("elementDType", r, t8, e), a = I("numElements", r, t8, e);
      return [e.getTensorList(o.id).stack(n, s, a)];
    }
    case "TensorListFromTensor": {
      let o = I("tensor", r, t8, e), n = I("elementShape", r, t8, e), s = I("elementDType", r, t8, e), a = IT(o, n, s);
      return e.addTensorList(a), [a.idTensor];
    }
    case "TensorListConcat":
    case "TensorListConcatV2": {
      let o = I("tensorListId", r, t8, e), n = e.getTensorList(o.id), s = I("dtype", r, t8, e), a = I("elementShape", r, t8, e);
      return [n.concat(s, a)];
    }
    case "TensorListPushBack": {
      let o = I("tensorListId", r, t8, e), n = I("tensor", r, t8, e), s = e.getTensorList(o.id);
      return s.pushBack(n), [s.idTensor];
    }
    case "TensorListPopBack": {
      let o = I("tensorListId", r, t8, e), n = I("elementShape", r, t8, e), s = I("elementDType", r, t8, e);
      return [e.getTensorList(o.id).popBack(n, s)];
    }
    case "TensorListSplit": {
      let o = I("tensor", r, t8, e), n = I("elementShape", r, t8, e), s = I("lengths", r, t8, e), a = NT(o, s, n);
      return e.addTensorList(a), [a.idTensor];
    }
    case "TensorListLength": {
      let o = I("tensorListId", r, t8, e), n = e.getTensorList(o.id);
      return [ke(n.size(), "int32")];
    }
    case "TensorListResize": {
      let o = I("tensorListId", r, t8, e), n = I("size", r, t8, e), a = e.getTensorList(o.id).resize(n);
      return e.addTensorList(a), [a.idTensor];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function _T(r, t8, e) {
  let [o, n] = I("fusedOps", r, t8, e), s = o === "biasadd", a = !s, i = n === "prelu", p = o === "fusedbatchnorm", u = I("numArgs", r, t8, e);
  if (s) {
    if (i && u !== 2)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!i && s && u !== 1)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (p)
    throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  let c = I("strides", r, t8, e), l = Ol(r, t8, e), m = I("dataFormat", r, t8, e).toUpperCase(), d = I("dilations", r, t8, e), [f, h] = I("args", r, t8, e);
  a && (h = f, f = void 0);
  let g = I("leakyreluAlpha", r, t8, e);
  return { stride: c, pad: l, dataFormat: m, dilations: d, biasArg: f, preluArg: h, activationFunc: n, leakyreluAlpha: g };
}
var $T = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "Conv1D": {
      let n = I("stride", r, t8, e), s = I("pad", r, t8, e), a = I("dataFormat", r, t8, e).toUpperCase(), i = I("dilation", r, t8, e);
      return [o.conv1d(I("x", r, t8, e), I("filter", r, t8, e), n, s, a, i)];
    }
    case "Conv2D": {
      let n = I("strides", r, t8, e), s = Ol(r, t8, e), a = I("dataFormat", r, t8, e).toUpperCase(), i = I("dilations", r, t8, e);
      return [o.conv2d(I("x", r, t8, e), I("filter", r, t8, e), [n[1], n[2]], s, a, [i[1], i[2]])];
    }
    case "_FusedConv2D": {
      let { stride: n, pad: s, dataFormat: a, dilations: i, biasArg: p, preluArg: u, activationFunc: c, leakyreluAlpha: l } = _T(r, t8, e);
      return [o.fused.conv2d({ x: I("x", r, t8, e), filter: I("filter", r, t8, e), strides: [n[1], n[2]], pad: s, dataFormat: a, dilations: [i[1], i[2]], bias: p, activation: c, preluActivationWeights: u, leakyreluAlpha: l })];
    }
    case "FusedDepthwiseConv2dNative": {
      let { stride: n, pad: s, dataFormat: a, dilations: i, biasArg: p, preluArg: u, activationFunc: c, leakyreluAlpha: l } = _T(r, t8, e);
      return [o.fused.depthwiseConv2d({ x: I("x", r, t8, e), filter: I("filter", r, t8, e), strides: [n[1], n[2]], pad: s, dataFormat: a, dilations: [i[1], i[2]], bias: p, activation: c, preluActivationWeights: u, leakyreluAlpha: l })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      let n = I("outputShape", r, t8, e), s = I("strides", r, t8, e), a = Ol(r, t8, e);
      return [o.conv2dTranspose(I("x", r, t8, e), I("filter", r, t8, e), n, [s[1], s[2]], a)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      let n = I("strides", r, t8, e), s = Ol(r, t8, e), a = I("dilations", r, t8, e), i = I("dataFormat", r, t8, e).toUpperCase();
      return [o.depthwiseConv2d(I("input", r, t8, e), I("filter", r, t8, e), [n[1], n[2]], s, i, [a[1], a[2]])];
    }
    case "Conv3D": {
      let n = I("strides", r, t8, e), s = I("pad", r, t8, e), a = I("dataFormat", r, t8, e).toUpperCase(), i = I("dilations", r, t8, e);
      return [o.conv3d(I("x", r, t8, e), I("filter", r, t8, e), [n[1], n[2], n[3]], s, a, [i[1], i[2], i[3]])];
    }
    case "AvgPool": {
      let n = I("strides", r, t8, e), s = I("pad", r, t8, e), a = I("kernelSize", r, t8, e);
      return [o.avgPool(I("x", r, t8, e), [a[1], a[2]], [n[1], n[2]], s)];
    }
    case "MaxPool": {
      let n = I("strides", r, t8, e), s = I("pad", r, t8, e), a = I("kernelSize", r, t8, e);
      return [o.maxPool(I("x", r, t8, e), [a[1], a[2]], [n[1], n[2]], s)];
    }
    case "MaxPoolWithArgmax": {
      let n = I("strides", r, t8, e), s = I("pad", r, t8, e), a = I("kernelSize", r, t8, e), i = I("includeBatchInIndex", r, t8, e), { result: p, indexes: u } = o.maxPoolWithArgmax(I("x", r, t8, e), [a[1], a[2]], [n[1], n[2]], s, i);
      return [p, u];
    }
    case "AvgPool3D": {
      let n = I("strides", r, t8, e), s = I("pad", r, t8, e), a = I("kernelSize", r, t8, e);
      return [o.avgPool3d(I("x", r, t8, e), [a[1], a[2], a[3]], [n[1], n[2], n[3]], s)];
    }
    case "MaxPool3D": {
      let n = I("strides", r, t8, e), s = I("pad", r, t8, e), a = I("kernelSize", r, t8, e);
      return [o.maxPool3d(I("x", r, t8, e), [a[1], a[2], a[3]], [n[1], n[2], n[3]], s)];
    }
    case "Dilation2D": {
      let n = I("strides", r, t8, e), s = I("pad", r, t8, e), a = I("dilations", r, t8, e), i = n[1], p = n[2], u = a[1], c = a[2];
      return [o.dilation2d(I("x", r, t8, e), I("filter", r, t8, e), [i, p], s, [u, c], "NHWC")];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var ET = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "Fill": {
      let n = I("shape", r, t8, e), s = I("dtype", r, t8, e), a = I("value", r, t8, e);
      return [o.fill(n, a, s)];
    }
    case "LinSpace": {
      let n = I("start", r, t8, e), s = I("stop", r, t8, e), a = I("num", r, t8, e);
      return [o.linspace(n, s, a)];
    }
    case "Multinomial": {
      let n = I("logits", r, t8, e), s = I("numSamples", r, t8, e), a = I("seed", r, t8, e);
      return [o.multinomial(n, s, a)];
    }
    case "OneHot": {
      let n = I("indices", r, t8, e), s = I("depth", r, t8, e), a = I("onValue", r, t8, e), i = I("offValue", r, t8, e), p = I("dtype", r, t8, e);
      return [o.oneHot(n, s, a, i, p)];
    }
    case "Ones":
      return [o.ones(I("shape", r, t8, e), I("dtype", r, t8, e))];
    case "OnesLike":
      return [o.onesLike(I("x", r, t8, e))];
    case "RandomStandardNormal":
      return [o.randomStandardNormal(I("shape", r, t8, e), I("dtype", r, t8, e), I("seed", r, t8, e))];
    case "RandomUniform":
      return [o.randomUniform(I("shape", r, t8, e), I("minval", r, t8, e), I("maxval", r, t8, e), I("dtype", r, t8, e))];
    case "RandomUniformInt":
      return [o.randomUniformInt(I("shape", r, t8, e), I("minval", r, t8, e), I("maxval", r, t8, e), I("seed", r, t8, e))];
    case "Range": {
      let n = I("start", r, t8, e), s = I("stop", r, t8, e), a = I("step", r, t8, e);
      return [o.range(n, s, a, I("dtype", r, t8, e))];
    }
    case "TruncatedNormal": {
      let n = I("shape", r, t8, e), s = I("mean", r, t8, e), a = I("stdDev", r, t8, e), i = I("seed", r, t8, e);
      return [o.truncatedNormal(n, s, a, I("dtype", r, t8, e), i)];
    }
    case "Zeros":
      return [o.zeros(I("shape", r, t8, e), I("dtype", r, t8, e))];
    case "ZerosLike":
      return [o.zerosLike(I("x", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function PS(r, t8, e) {
  let o = I("boxes", r, t8, e), n = I("scores", r, t8, e), s = I("maxOutputSize", r, t8, e), a = I("iouThreshold", r, t8, e), i = I("scoreThreshold", r, t8, e), p = I("softNmsSigma", r, t8, e);
  return { boxes: o, scores: n, maxOutputSize: s, iouThreshold: a, scoreThreshold: i, softNmsSigma: p };
}
var RT = async (r, t8, e, o, n = Je) => {
  switch (r.op) {
    case "NonMaxSuppressionV5": {
      let { boxes: s, scores: a, maxOutputSize: i, iouThreshold: p, scoreThreshold: u, softNmsSigma: c } = PS(r, t8, e), l = await n.image.nonMaxSuppressionWithScoreAsync(s, a, i, p, u, c);
      return [l.selectedIndices, l.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      let { boxes: s, scores: a, maxOutputSize: i, iouThreshold: p, scoreThreshold: u } = PS(r, t8, e), c = I("padToMaxOutputSize", r, t8, e), l = await n.image.nonMaxSuppressionPaddedAsync(s, a, i, p, u, c);
      return [l.selectedIndices, l.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      let { boxes: s, scores: a, maxOutputSize: i, iouThreshold: p, scoreThreshold: u } = PS(r, t8, e);
      return [await n.image.nonMaxSuppressionAsync(s, a, i, p, u)];
    }
    case "Where": {
      let s = n.cast(I("condition", r, t8, e), "bool"), a = [await n.whereAsync(s)];
      return s.dispose(), a;
    }
    case "ListDiff":
      return n.setdiff1dAsync(I("x", r, t8, e), I("y", r, t8, e));
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var DT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "LowerBound": {
      let n = I("sortedSequence", r, t8, e), s = I("values", r, t8, e);
      return [o.lowerBound(n, s)];
    }
    case "TopKV2": {
      let n = I("x", r, t8, e), s = I("k", r, t8, e), a = I("sorted", r, t8, e), i = o.topk(n, s, a);
      return [i.values, i.indices];
    }
    case "UpperBound": {
      let n = I("sortedSequence", r, t8, e), s = I("values", r, t8, e);
      return [o.upperBound(n, s)];
    }
    case "Unique": {
      let n = I("x", r, t8, e), s = o.unique(n);
      return [s.values, s.indices];
    }
    case "UniqueV2": {
      let n = I("x", r, t8, e), s = I("axis", r, t8, e), a = o.unique(n, s);
      return [a.values, a.indices];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var AT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "Const":
      return t8[r.name];
    case "PlaceholderWithDefault":
      let n = I("default", r, t8, e);
      return [zt(r.name, t8, e) || n];
    case "Placeholder":
      return [zt(r.name, t8, e)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      let c = I("x", r, t8, e);
      return [Bs(c)];
    }
    case "IdentityN":
      return I("x", r, t8, e).map((c) => Bs(c));
    case "Snapshot":
      let s = I("x", r, t8, e);
      return [Bs(s)];
    case "Shape":
      return [o.tensor1d(I("x", r, t8, e).shape, "int32")];
    case "ShapeN":
      return I("x", r, t8, e).map((c) => o.tensor1d(c.shape));
    case "Size":
      return [o.scalar(I("x", r, t8, e).size, "int32")];
    case "Rank":
      return [o.scalar(I("x", r, t8, e).rank, "int32")];
    case "NoOp":
      return [o.scalar(1)];
    case "Print":
      let a = I("x", r, t8, e), i = I("data", r, t8, e), p = I("message", r, t8, e), u = I("summarize", r, t8, e);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(p);
      for (let c = 0; c < i.length; c++)
        console.log(Array.prototype.slice.call(i[c].dataSync()).slice(0, u));
      return [a];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var vf = class {
  get id() {
    return this.handle.id;
  }
  constructor(t8, e) {
    this.keyDType = t8, this.valueDType = e, this.handle = ke(0), this.tensorMap = /* @__PURE__ */ new Map(), Rr(this.handle);
  }
  clearAndClose() {
    this.tensorMap.forEach((t8) => t8.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  size() {
    return this.tensorMap.size;
  }
  tensorSize() {
    return ke(this.size(), "int32");
  }
  async import(t8, e) {
    this.checkKeyAndValueTensor(t8, e);
    let o = await t8.data();
    return this.tensorMap.forEach((n) => n.dispose()), this.tensorMap.clear(), De(() => {
      let n = fo(e), s = o.length, a = n.length;
      y.assert(s === a, () => `The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`);
      for (let i = 0; i < s; i++) {
        let p = o[i], u = n[i];
        Rr(u), this.tensorMap.set(p, u);
      }
      return this.handle;
    });
  }
  async find(t8, e) {
    this.checkKeyAndValueTensor(t8, e);
    let o = await t8.data();
    return De(() => {
      let n = [];
      for (let s = 0; s < o.length; s++) {
        let a = o[s], i = this.findWithDefault(a, e);
        n.push(i);
      }
      return kr(n);
    });
  }
  findWithDefault(t8, e) {
    let o = this.tensorMap.get(t8);
    return o != null ? o : e;
  }
  checkKeyAndValueTensor(t8, e) {
    if (t8.dtype !== this.keyDType)
      throw new Error(`Expect key dtype ${this.keyDType}, but got ${t8.dtype}`);
    if (e.dtype !== this.valueDType)
      throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`);
  }
};
var FT = async (r, t8, e, o) => {
  switch (r.op) {
    case "HashTable":
    case "HashTableV2": {
      let n = o.getHashTableHandleByName(r.name);
      if (n != null)
        return [n];
      {
        let s = I("keyDType", r, t8, e), a = I("valueDType", r, t8, e), i = new vf(s, a);
        return o.addHashTable(r.name, i), [i.handle];
      }
    }
    case "InitializeTable":
    case "InitializeTableV2":
    case "LookupTableImport":
    case "LookupTableImportV2": {
      let n = I("tableHandle", r, t8, e, o), s = I("keys", r, t8, e), a = I("values", r, t8, e);
      return [await o.getHashTableById(n.id).import(s, a)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      let n = I("tableHandle", r, t8, e, o), s = I("keys", r, t8, e), a = I("defaultValue", r, t8, e);
      return [await o.getHashTableById(n.id).find(s, a)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      let n = I("tableHandle", r, t8, e, o);
      return [o.getHashTableById(n.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var PT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "ResizeBilinear": {
      let n = I("images", r, t8, e), s = I("size", r, t8, e), a = I("alignCorners", r, t8, e), i = I("halfPixelCenters", r, t8, e);
      return [o.image.resizeBilinear(n, [s[0], s[1]], a, i)];
    }
    case "ResizeNearestNeighbor": {
      let n = I("images", r, t8, e), s = I("size", r, t8, e), a = I("alignCorners", r, t8, e), i = I("halfPixelCenters", r, t8, e);
      return [o.image.resizeNearestNeighbor(n, [s[0], s[1]], a, i)];
    }
    case "CropAndResize": {
      let n = I("image", r, t8, e), s = I("boxes", r, t8, e), a = I("boxInd", r, t8, e), i = I("cropSize", r, t8, e), p = I("method", r, t8, e), u = I("extrapolationValue", r, t8, e);
      return [o.image.cropAndResize(n, s, a, i, p, u)];
    }
    case "ImageProjectiveTransformV3": {
      let n = I("images", r, t8, e), s = I("transforms", r, t8, e), a = I("outputShape", r, t8, e), i = I("fillValue", r, t8, e), p = I("interpolation", r, t8, e), u = I("fillMode", r, t8, e);
      return [o.image.transform(n, s, p.toLowerCase(), u.toLowerCase(), i, a)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var OT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "Equal":
      return [o.equal(I("a", r, t8, e), I("b", r, t8, e))];
    case "NotEqual":
      return [o.notEqual(I("a", r, t8, e), I("b", r, t8, e))];
    case "Greater":
      return [o.greater(I("a", r, t8, e), I("b", r, t8, e))];
    case "GreaterEqual":
      return [o.greaterEqual(I("a", r, t8, e), I("b", r, t8, e))];
    case "Less":
      return [o.less(I("a", r, t8, e), I("b", r, t8, e))];
    case "LessEqual":
      return [o.lessEqual(I("a", r, t8, e), I("b", r, t8, e))];
    case "LogicalAnd":
      return [o.logicalAnd(I("a", r, t8, e), I("b", r, t8, e))];
    case "LogicalNot":
      return [o.logicalNot(I("a", r, t8, e))];
    case "LogicalOr":
      return [o.logicalOr(I("a", r, t8, e), I("b", r, t8, e))];
    case "Select":
    case "SelectV2":
      return [o.where(I("condition", r, t8, e), I("a", r, t8, e), I("b", r, t8, e))];
    case "BitwiseAnd":
      return [o.bitwiseAnd(I("a", r, t8, e), I("b", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var MT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [o.matMul(I("a", r, t8, e), I("b", r, t8, e), I("transposeA", r, t8, e), I("transposeB", r, t8, e))];
    case "Einsum":
      return [o.einsum(I("equation", r, t8, e), ...I("tensors", r, t8, e))];
    case "Transpose":
      return [o.transpose(I("x", r, t8, e), I("perm", r, t8, e))];
    case "_FusedMatMul":
      let [n, s] = I("fusedOps", r, t8, e), a = n === "biasadd", i = s === "prelu", p = I("numArgs", r, t8, e), u = I("leakyreluAlpha", r, t8, e);
      if (a) {
        if (i && p !== 2)
          throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!i && p !== 1)
          throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      let [c, l] = I("args", r, t8, e);
      return [o.fused.matMul({ a: I("a", r, t8, e), b: I("b", r, t8, e), transposeA: I("transposeA", r, t8, e), transposeB: I("transposeB", r, t8, e), bias: c, activation: s, preluActivationWeights: l, leakyreluAlpha: u })];
    case "MatrixBandPart":
      return [o.linalg.bandPart(I("a", r, t8, e), I("numLower", r, t8, e), I("numUpper", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var LT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "EuclideanNorm":
      return [o.euclideanNorm(I("x", r, t8, e), I("axis", r, t8, e), I("keepDims", r, t8, e))];
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [o.batchNorm(I("x", r, t8, e), I("mean", r, t8, e), I("variance", r, t8, e), I("offset", r, t8, e), I("scale", r, t8, e), I("epsilon", r, t8, e))];
    case "FusedBatchNormV3":
      return [o.batchNorm(I("x", r, t8, e), I("mean", r, t8, e), I("variance", r, t8, e), I("offset", r, t8, e), I("scale", r, t8, e), I("epsilon", r, t8, e))];
    case "LRN":
      return [o.localResponseNormalization(I("x", r, t8, e), I("radius", r, t8, e), I("bias", r, t8, e), I("alpha", r, t8, e), I("beta", r, t8, e))];
    case "Softmax":
      return [o.softmax(I("x", r, t8, e))];
    case "LogSoftmax":
      return [o.logSoftmax(I("x", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var BT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "RaggedGather": {
      let { outputNestedSplits: n, outputDenseValues: s } = o.raggedGather(I("paramsNestedSplits", r, t8, e), I("paramsDenseValues", r, t8, e), I("indices", r, t8, e), I("outputRaggedRank", r, t8, e));
      return n.concat(s);
    }
    case "RaggedRange": {
      let { rtNestedSplits: n, rtDenseValues: s } = o.raggedRange(I("starts", r, t8, e), I("limits", r, t8, e), I("splits", r, t8, e));
      return [n, s];
    }
    case "RaggedTensorToTensor":
      return [o.raggedTensorToTensor(I("shape", r, t8, e), I("values", r, t8, e), I("defaultValue", r, t8, e), I("rowPartitionTensors", r, t8, e), I("rowPartitionTypes", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var zT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "Max": {
      let i = I("axis", r, t8, e), p = I("keepDims", r, t8, e);
      return [o.max(I("x", r, t8, e), i, p)];
    }
    case "Mean": {
      let i = I("axis", r, t8, e), p = I("keepDims", r, t8, e);
      return [o.mean(I("x", r, t8, e), i, p)];
    }
    case "Min": {
      let i = I("axis", r, t8, e), p = I("keepDims", r, t8, e);
      return [o.min(I("x", r, t8, e), i, p)];
    }
    case "Sum": {
      let i = I("axis", r, t8, e), p = I("keepDims", r, t8, e);
      return [o.sum(I("x", r, t8, e), i, p)];
    }
    case "All": {
      let i = I("axis", r, t8, e), p = I("keepDims", r, t8, e);
      return [o.all(I("x", r, t8, e), i, p)];
    }
    case "Any": {
      let i = I("axis", r, t8, e), p = I("keepDims", r, t8, e);
      return [o.any(I("x", r, t8, e), i, p)];
    }
    case "ArgMax": {
      let i = I("axis", r, t8, e);
      return [o.argMax(I("x", r, t8, e), i)];
    }
    case "ArgMin": {
      let i = I("axis", r, t8, e);
      return [o.argMin(I("x", r, t8, e), i)];
    }
    case "Prod": {
      let i = I("axis", r, t8, e), p = I("keepDims", r, t8, e);
      return [o.prod(I("x", r, t8, e), i, p)];
    }
    case "Cumprod": {
      let i = I("axis", r, t8, e), p = I("exclusive", r, t8, e), u = I("reverse", r, t8, e);
      return [o.cumprod(I("x", r, t8, e), i, p, u)];
    }
    case "Cumsum": {
      let i = I("axis", r, t8, e), p = I("exclusive", r, t8, e), u = I("reverse", r, t8, e);
      return [o.cumsum(I("x", r, t8, e), i, p, u)];
    }
    case "Bincount":
      let n = I("x", r, t8, e), s = I("weights", r, t8, e), a = I("size", r, t8, e);
      return [o.bincount(n, s, a)];
    case "DenseBincount": {
      let i = I("x", r, t8, e), p = I("weights", r, t8, e), u = I("size", r, t8, e), c = I("binaryOutput", r, t8, e);
      return [o.denseBincount(i, p, u, c)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var VT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "ConcatV2":
    case "Concat": {
      let n = I("n", r, t8, e), s = I("axis", r, t8, e), a = I("tensors", r, t8, e);
      return a = a.slice(0, n), [o.concat(a, s)];
    }
    case "Gather": {
      let n = I("x", r, t8, e), s = I("indices", r, t8, e);
      return [o.gather(n, o.cast(s, "int32"), 0)];
    }
    case "GatherV2": {
      let n = I("axis", r, t8, e), s = I("batchDims", r, t8, e), a = I("x", r, t8, e), i = I("indices", r, t8, e);
      return [o.gather(a, o.cast(i, "int32"), n, s)];
    }
    case "Reverse": {
      let n = I("dims", r, t8, e), s = [];
      for (let i = 0; i < n.length; i++)
        n[i] && s.push(i);
      let a = I("x", r, t8, e);
      return [o.reverse(a, s)];
    }
    case "ReverseV2": {
      let n = I("axis", r, t8, e), s = I("x", r, t8, e);
      return [o.reverse(s, n)];
    }
    case "Slice": {
      let n = I("begin", r, t8, e), s = I("size", r, t8, e);
      return [o.slice(I("x", r, t8, e), n, s)];
    }
    case "StridedSlice": {
      let n = I("begin", r, t8, e), s = I("end", r, t8, e), a = I("strides", r, t8, e), i = I("beginMask", r, t8, e), p = I("endMask", r, t8, e), u = I("ellipsisMask", r, t8, e), c = I("newAxisMask", r, t8, e), l = I("shrinkAxisMask", r, t8, e), m = I("x", r, t8, e);
      return [o.stridedSlice(m, n, s, a, i, p, u, c, l)];
    }
    case "Pack":
      return De(() => {
        let n = I("axis", r, t8, e), s = I("tensors", r, t8, e), a = s[0].shape, i = o.squeeze(s[0]).shape, p = s.map((u) => {
          let c = y.arraysEqual(u.shape, a);
          if (!c && !y.arraysEqual(o.squeeze(u).shape, i))
            throw new Error("the input tensors shape does not match");
          return c ? u : o.reshape(u, a);
        });
        return [o.stack(p, n)];
      });
    case "Unpack": {
      let n = I("axis", r, t8, e), s = I("tensor", r, t8, e);
      return o.unstack(s, n);
    }
    case "Tile": {
      let n = I("reps", r, t8, e);
      return [o.tile(I("x", r, t8, e), n)];
    }
    case "Split":
    case "SplitV": {
      let n = I("axis", r, t8, e), s = I("numOrSizeSplits", r, t8, e), a = I("x", r, t8, e);
      return o.split(a, s, n);
    }
    case "ScatterNd": {
      let n = I("indices", r, t8, e), s = I("values", r, t8, e), a = I("shape", r, t8, e);
      return [o.scatterND(n, s, a)];
    }
    case "GatherNd": {
      let n = I("x", r, t8, e), s = I("indices", r, t8, e);
      return [o.gatherND(n, s)];
    }
    case "SparseToDense": {
      let n = I("sparseIndices", r, t8, e), s = I("outputShape", r, t8, e), a = I("sparseValues", r, t8, e), i = I("defaultValue", r, t8, e);
      return [o.sparseToDense(n, a, s, a.dtype === i.dtype ? i : o.cast(i, a.dtype))];
    }
    case "TensorScatterUpdate": {
      let n = I("indices", r, t8, e), s = I("values", r, t8, e), a = I("tensor", r, t8, e);
      return [o.tensorScatterUpdate(a, n, s)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var WT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "SparseFillEmptyRows": {
      let { outputIndices: n, outputValues: s, emptyRowIndicator: a, reverseIndexMap: i } = o.sparse.sparseFillEmptyRows(I("indices", r, t8, e), I("values", r, t8, e), I("denseShape", r, t8, e), I("defaultValue", r, t8, e));
      return [n, s, a, i];
    }
    case "SparseReshape": {
      let { outputIndices: n, outputShape: s } = o.sparse.sparseReshape(I("inputIndices", r, t8, e), I("inputShape", r, t8, e), I("newShape", r, t8, e));
      return [n, s];
    }
    case "SparseSegmentMean":
      return [o.sparse.sparseSegmentMean(I("data", r, t8, e), I("indices", r, t8, e), I("segmentIds", r, t8, e))];
    case "SparseSegmentSum":
      return [o.sparse.sparseSegmentSum(I("data", r, t8, e), I("indices", r, t8, e), I("segmentIds", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var UT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "FFT":
      return [o.fft(I("x", r, t8, e))];
    case "IFFT":
      return [o.ifft(I("x", r, t8, e))];
    case "RFFT":
      return [o.rfft(I("x", r, t8, e))];
    case "IRFFT":
      return [o.irfft(I("x", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var GT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "StaticRegexReplace":
      return [o.string.staticRegexReplace(I("input", r, t8, e), I("pattern", r, t8, e), I("rewrite", r, t8, e), I("replaceGlobal", r, t8, e))];
    case "StringNGrams": {
      let { nGrams: n, nGramsSplits: s } = o.string.stringNGrams(I("data", r, t8, e), I("dataSplits", r, t8, e), I("separator", r, t8, e), I("nGramWidths", r, t8, e), I("leftPad", r, t8, e), I("rightPad", r, t8, e), I("padWidth", r, t8, e), I("preserveShortSequences", r, t8, e));
      return [n, s];
    }
    case "StringSplit": {
      let { indices: n, values: s, shape: a } = o.string.stringSplit(I("input", r, t8, e), I("delimiter", r, t8, e), I("skipEmpty", r, t8, e));
      return [n, s, a];
    }
    case "StringToHashBucketFast":
      return [o.string.stringToHashBucketFast(I("input", r, t8, e), I("numBuckets", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var HT = (r, t8, e, o = Je) => {
  switch (r.op) {
    case "Cast":
      return [o.cast(I("x", r, t8, e), I("dtype", r, t8, e))];
    case "ExpandDims": {
      let n = I("axis", r, t8, e);
      return [o.expandDims(I("x", r, t8, e), n)];
    }
    case "Squeeze": {
      let n = I("axis", r, t8, e);
      return [o.squeeze(I("x", r, t8, e), n)];
    }
    case "Reshape":
      return [o.reshape(I("x", r, t8, e), I("shape", r, t8, e))];
    case "EnsureShape":
      return [o.ensureShape(I("x", r, t8, e), I("shape", r, t8, e))];
    case "MirrorPad":
      return [o.mirrorPad(I("x", r, t8, e), I("padding", r, t8, e), I("mode", r, t8, e))];
    case "PadV2":
    case "Pad":
      return [o.pad(I("x", r, t8, e), I("padding", r, t8, e), I("constantValue", r, t8, e))];
    case "SpaceToBatchND": {
      let n = I("blockShape", r, t8, e), s = I("paddings", r, t8, e);
      return [o.spaceToBatchND(I("x", r, t8, e), n, s)];
    }
    case "BatchToSpaceND": {
      let n = I("blockShape", r, t8, e), s = I("crops", r, t8, e);
      return [o.batchToSpaceND(I("x", r, t8, e), n, s)];
    }
    case "DepthToSpace": {
      let n = I("blockSize", r, t8, e), s = I("dataFormat", r, t8, e).toUpperCase();
      return [o.depthToSpace(I("x", r, t8, e), n, s)];
    }
    case "BroadcastTo":
      return [o.broadcastTo(I("x", r, t8, e), I("shape", r, t8, e))];
    case "BroadcastArgs":
      return [o.broadcastArgs(I("s0", r, t8, e), I("s1", r, t8, e))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function OS(r, t8, e, o, n = De) {
  let s = ((a, i, p) => {
    switch (a.category) {
      case "arithmetic":
        return n(() => CT(a, i, p));
      case "basic_math":
        return n(() => wT(a, i, p));
      case "control":
        return TT(a, i, p);
      case "convolution":
        return n(() => $T(a, i, p));
      case "creation":
        return n(() => ET(a, i, p));
      case "dynamic":
        return RT(a, i, p);
      case "evaluation":
        return n(() => DT(a, i, p));
      case "image":
        return n(() => PT(a, i, p));
      case "graph":
        return n(() => AT(a, i, p));
      case "logical":
        return n(() => OT(a, i, p));
      case "matrices":
        return n(() => MT(a, i, p));
      case "normalization":
        return n(() => LT(a, i, p));
      case "ragged":
        return n(() => BT(a, i, p));
      case "reduction":
        return n(() => zT(a, i, p));
      case "slice_join":
        return n(() => VT(a, i, p));
      case "sparse":
        return n(() => WT(a, i, p));
      case "spectral":
        return n(() => UT(a, i, p));
      case "string":
        return n(() => GT(a, i, p));
      case "transformation":
        return n(() => HT(a, i, p));
      case "hash_table":
        return FT(a, i, p, o);
      case "custom":
        let u = pf(a.op);
        if (u && u.customExecutor)
          return u.customExecutor(new wf(a, i, p));
        throw TypeError(`Custom op ${a.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(r, t8, e);
  return y.isPromise(s) ? s.then((a) => [].concat(a)) : [].concat(s);
}
var Ll = class {
  constructor(t8 = {}, e = {}, o = {}, n = {}, s) {
    this.weightMap = t8, this.tensorArrayMap = e, this.tensorListMap = o, this.functionMap = n, this.parseNodeNameCache = s, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(t8, e) {
    return { id: t8, frameName: e, iterationId: 0 };
  }
  set currentContext(t8) {
    this.contexts !== t8 && (this.contexts = t8, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    let t8 = [];
    for (let e = 0; e < this.contexts.length - 1; e++) {
      let o = this.contexts.slice(0, this.contexts.length - e);
      t8.push(this.contextIdforContexts(o));
    }
    t8.push(""), this._currentContextIds = t8;
  }
  contextIdforContexts(t8) {
    return t8 ? t8.map((e) => e.id === 0 && e.iterationId === 0 ? "" : `${e.frameName}-${e.iterationId}`).join("/") : "";
  }
  enterFrame(t8) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, t8)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else
      throw new Error("Cannot exit frame, the context is empty");
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      let t8 = Object.assign({}, this.contexts[this.contexts.length - 1]);
      t8.iterationId += 1, t8.id = this.lastId, this.contexts.splice(-1, 1, t8), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else
      throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(t8) {
    return this.weightMap[t8];
  }
  addTensorArray(t8) {
    this.tensorArrayMap[t8.id] = t8;
  }
  getTensorArray(t8) {
    return this.tensorArrayMap[t8];
  }
  addTensorList(t8) {
    this.tensorListMap[t8.id] = t8;
  }
  getTensorList(t8) {
    return this.tensorListMap[t8];
  }
  dispose(t8) {
    for (let e in this.tensorArrayMap)
      this.tensorArrayMap[e].clearAndClose(t8);
    for (let e in this.tensorListMap)
      this.tensorListMap[e].clearAndClose(t8);
  }
};
function MS(r, t8, e, o) {
  let n = /* @__PURE__ */ new Set(), s = [], a = null, i = null, p = /* @__PURE__ */ new Set(), u = new Set(Object.keys(r).map((m) => Tr(m)[0]));
  o = o || [];
  let c = new Set(o.map((m) => Tr(m.name)[0])), l = [...t8];
  for (; l.length > 0; ) {
    let m = l.pop();
    if ((gu(m) || k8(m) || N8(m)) && a == null && (a = m, i = a.children.map((d) => d.name).filter((d) => n.has(d))), n.add(m.name), e[m.name] == null && !u.has(m.name) && !c.has(m.name)) {
      if (m.inputs.length === 0) {
        s.push(m.name);
        continue;
      }
      m.inputs.forEach((d) => {
        p.has(d.name) || (p.add(d.name), l.push(d));
      });
    }
  }
  return { inputs: r, outputs: t8, usedNodes: n, missingInputs: s, dynamicNode: a, syncInputs: i };
}
function KT(r, t8) {
  let { usedNodes: e, inputs: o } = t8, n = Object.keys(o).map((g) => Tr(g)[0]).map((g) => r.nodes[g]), s = r.initNodes || [], a = (g) => e.has(typeof g == "string" ? g : g.name);
  function i(g) {
    return [...new Map(g.map((x) => [x.name, x])).values()];
  }
  let p = i([...n, ...r.weights, ...s]).filter(a), u = i([...p, ...Object.values(r.nodes)]).filter(a), c = new Map(u.map((g) => [g.name, g])), l = {};
  for (let g of u) {
    l[g.name] = l[g.name] || 0;
    for (let x of g.children)
      a(x) || (l[x.name] = Number.POSITIVE_INFINITY), l[x.name] = (l[x.name] || 0) + 1;
  }
  let m = Object.entries(l).filter(([, g]) => g === 0).map(([g]) => g), d = [...m];
  for (; m.length > 0; ) {
    let g = m.pop(), x = c.get(g);
    for (let b of x.children.filter(a))
      --l[b.name] === 0 && (d.push(b.name), m.push(b.name));
  }
  let f = d.map((g) => c.get(g)), h = C8(f, p);
  return w8(h, p), h;
}
function C8(r, t8) {
  let e = new Map(r.map((a) => [a.name, a])), o = t8.map((a) => a.name), n = new Set(o);
  for (; o.length > 0; ) {
    let a = o.pop(), i = e.get(a);
    for (let p of i.children)
      !e.has(p.name) || n.has(p.name) || (n.add(p.name), o.push(p.name));
  }
  return r.filter((a) => n.has(a.name));
}
var Cc = class extends Error {
  constructor(t8) {
    super(`NodesExecutionOrderError: ${t8}`);
  }
};
function w8(r, t8) {
  let e = new Map(r.map((i, p) => [i.name, p])), o = new Set(t8.map((i) => i.name)), n = (i) => o.has(typeof i == "string" ? i : i.name), s = new Set(r.map((i) => i.name)), a = (i) => s.has(typeof i == "string" ? i : i.name);
  for (let i of r) {
    for (let p of i.children.filter(a)) {
      if (!e.has(p.name))
        throw new Cc(`Child ${p.name} of node ${i.name} is unreachable.`);
      if (e.get(i.name) > e.get(p.name))
        throw new Cc(`Node ${i.name} is scheduled to run after its child ${p.name}.`);
    }
    if (!n(i))
      for (let p of i.inputs) {
        if (!e.has(p.name))
          throw new Cc(`Input ${p.name} of node ${i.name} is unreachable.`);
        if (e.get(p.name) > e.get(i.name))
          throw new Cc(`Node ${i.name} is scheduled to run before its input ${p.name}.`);
      }
  }
}
function qT(r) {
  let t8 = new Map(r.map((i, p) => [i.name, p])), e = Number.MAX_SAFE_INTEGER, o = r.map((i, p) => gu(i) ? e : p), n = (i) => {
    let p = o[t8.get(i.name)];
    return p == null ? -1 : p;
  }, s = r.map((i, p) => i.children.map(n).reduce((u, c) => Math.max(u, c), o[p])), a = /* @__PURE__ */ new Map();
  for (let i = 0; i < r.length; ++i) {
    let p = s[i];
    if (p === e)
      continue;
    let u = r[i], c = r[p];
    a.has(c.name) || a.set(c.name, []), a.get(c.name).push(u);
  }
  return a;
}
var S8 = /* @__PURE__ */ new Set(["Switch", "Merge", "Enter", "Exit", "NextIteration", "StatelessIf", "StatelessWhile", "if", "While"]);
var I8 = /* @__PURE__ */ new Set(["NonMaxSuppressionV2", "NonMaxSuppressionV3", "NonMaxSuppressionV5", "Where"]);
var v8 = /* @__PURE__ */ new Set(["HashTable", "HashTableV2", "LookupTableImport", "LookupTableImportV2", "LookupTableFind", "LookupTableFindV2", "LookupTableSize", "LookupTableSizeV2"]);
function gu(r) {
  return S8.has(r.op);
}
function k8(r) {
  return I8.has(r.op);
}
function N8(r) {
  return v8.has(r.op);
}
var lp = class {
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(t8) {
    let e = Object.keys(t8).map((o) => t8[o].map((n) => n.id));
    this._weightIds = [].concat(...e), this._weightMap = t8;
  }
  set resourceManager(t8) {
    this._resourceManager = t8;
  }
  get inputs() {
    return this._inputs.map((t8) => ({ name: t8.name, shape: t8.attrParams.shape ? t8.attrParams.shape.value : void 0, dtype: t8.attrParams.dtype ? t8.attrParams.dtype.value : void 0 }));
  }
  get outputs() {
    return this._outputs.map((t8) => ({ name: t8.name, shape: t8.attrParams.shape ? t8.attrParams.shape.value : void 0, dtype: t8.attrParams.dtype ? t8.attrParams.dtype.value : void 0 }));
  }
  get inputNodes() {
    return this._inputs.map((t8) => t8.signatureKey || t8.name);
  }
  get outputNodes() {
    return this._outputs.map((t8) => {
      let e = t8.signatureKey || t8.name;
      return t8.defaultOutput ? `${e}:${t8.defaultOutput}` : e;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((t8, e) => (t8[e] = this._functions[e].signature, t8), {});
  }
  constructor(t8, e) {
    this.graph = t8, this.parent = e, this.compiledMap = /* @__PURE__ */ new Map(), this.parseNodeNameCache = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPARATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.keepIntermediateTensors = false, this._outputs = t8.outputs, this._inputs = t8.inputs, this._initNodes = t8.initNodes, this._signature = t8.signature, this._functions = t8.functions, t8.functions != null && Object.keys(t8.functions).forEach((o) => {
      this._functionExecutorMap[o] = new lp(t8.functions[o], this);
    });
  }
  getCompilationKey(t8, e) {
    let o = t8.map((s) => s.name).sort(), n = e.map((s) => s.name).sort();
    return o.join(this.SEPARATOR) + "--" + n.join(this.SEPARATOR);
  }
  compile(t8, e) {
    let o = MS(t8, e, this.weightMap, this._initNodes), { missingInputs: n, dynamicNode: s, syncInputs: a } = o;
    if (s != null)
      throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);
    if (n.length > 0) {
      let u = e.map((l) => l.name), c = Object.keys(t8);
      throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${c}]. Missing the following inputs: [${n}]`);
    }
    let i = KT(this.graph, o), p = qT(i);
    return { orderedNodes: i, nodeLiveUntilMap: p };
  }
  cloneAndKeepTensor(t8) {
    if (t8 == null)
      return null;
    let e = t8.clone();
    return Rr(e), e;
  }
  cloneTensorList(t8) {
    return t8 ? t8.map((o) => this.cloneAndKeepTensor(o)) : null;
  }
  cloneTensorMap(t8) {
    return Object.fromEntries(Object.entries(t8).map(([e, o]) => [e, this.cloneTensorList(o)]));
  }
  execute(t8, e) {
    this.disposeIntermediateTensors(), t8 = this.mapInputs(t8);
    let o = Object.keys(t8).sort();
    this.checkInputs(t8), this.checkInputShapeAndType(t8), e = this.mapOutputs(e), this.checkOutputs(e);
    let n = o.map((m) => this.graph.nodes[Tr(m)[0]]), s = e.map((m) => Tr(m)[0]), a = new Set(s), i = s.map((m) => this.graph.nodes[m]);
    i.length === 0 && (i = this._outputs);
    let p = this.getCompilationKey(n, i), u = this.compiledMap.get(p);
    u == null && (u = this.compile(t8, i), this.compiledMap.set(p, u));
    try {
      this.keepIntermediateTensors = A().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (m) {
      this.keepIntermediateTensors = false, console.warn(m.message);
    }
    let c = {}, l = {};
    return De(() => {
      let m = new Ll(this.weightMap, c, l, this.functionExecutorMap, this.parseNodeNameCache), d = Object.assign({}, this.weightMap);
      this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)), Object.keys(t8).forEach((x) => {
        let [b, C] = Tr(x, m), S = [];
        S[C] = t8[x], d[b] = S, this.keepIntermediateTensors && (this.clonedTensorsMap[b] = this.cloneTensorList(S));
      });
      let f = this.getFrozenTensorIds(d), { orderedNodes: h, nodeLiveUntilMap: g } = u;
      for (let x of h) {
        if (d[x.name])
          continue;
        let b = OS(x, d, m, this._resourceManager);
        if (y.isPromise(b))
          throw new Error(`The execution of the op '${x.op}' returned a promise. Please use model.executeAsync() instead.`);
        d[x.name] = b, this.keepIntermediateTensors && (this.clonedTensorsMap[x.name] = this.cloneTensorList(b)), this.checkTensorForDisposalWithNodeLiveUntilInfo(x, d, m, f, a, g.get(x.name));
      }
      return this.parent == null && m.dispose(f), e.map((x) => zt(x, d, m));
    });
  }
  getFrozenTensorIds(t8) {
    let e = [].concat.apply([], Object.keys(t8).map((o) => t8[o]).map((o) => o.map((n) => n.id)));
    return new Set(e);
  }
  checkTensorForDisposal(t8, e, o, n, s, a, i) {
    if (!(gu(e) || a.has(t8))) {
      for (let p of o[t8])
        p != null && (i[p.id] = (i[p.id] || 0) + e.children.length);
      for (let p of e.inputs) {
        if (gu(p))
          continue;
        let u = fS(p.name, o, n);
        if (u != null)
          for (let c of u) {
            if (!c || c.kept || s.has(c.id))
              continue;
            let l = i[c.id];
            l === 1 ? (c.dispose(), delete i[c.id]) : l != null && i[c.id]--;
          }
      }
    }
  }
  checkTensorForDisposalWithNodeLiveUntilInfo(t8, e, o, n, s, a) {
    function i(p) {
      return gu(p) || s.has(p.name);
    }
    if (!(gu(t8) || a == null))
      for (let p of a) {
        if (i(p))
          continue;
        let u = fS(p.name, e, o);
        for (let c of u)
          !c || c.kept || n.has(c.id) || c.dispose();
      }
  }
  async executeAsync(t8, e) {
    return this._executeAsync(t8, e);
  }
  disposeIntermediateTensors() {
    this.clonedTensorsMap && (Object.values(this.clonedTensorsMap).forEach((t8) => {
      for (let e of t8)
        e && !e.isDisposed && e.dispose();
    }), this.clonedTensorsMap = null);
  }
  getIntermediateTensors() {
    return this.clonedTensorsMap;
  }
  async _executeAsync(t8, e, o = false, n = {}, s = {}) {
    this.disposeIntermediateTensors(), o || (t8 = this.mapInputs(t8), this.checkInputs(t8), this.checkInputShapeAndType(t8), e = this.mapOutputs(e), this.checkOutputs(e));
    try {
      this.keepIntermediateTensors = A().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (m) {
      this.keepIntermediateTensors = false, console.warn(m.message);
    }
    let a = new Ll(this.weightMap, n, s, this.functionExecutorMap, this.parseNodeNameCache);
    this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap));
    let i = await this.executeWithControlFlow(t8, a, e, o), p = e.map((m) => zt(m, i, a)), u = p.map((m) => m.id), c = Object.keys(t8).map((m) => t8[m].id), l = /* @__PURE__ */ new Set([...u, ...c, ...this.weightIds]);
    return Object.values(i).forEach((m) => {
      m.forEach((d) => {
        d && !d.isDisposed && !l.has(d.id) && d.dispose();
      });
    }), this.parent == null && a.dispose(l), p;
  }
  async executeFunctionAsync(t8, e, o) {
    let n = t8.reduce((s, a, i) => (s[this.inputs[i].name] = a, s), {});
    return this._executeAsync(n, this.outputNodes, true, e, o);
  }
  async executeWithControlFlow(t8, e, o, n) {
    let s = Object.keys(t8), a = s.map((S) => this.graph.nodes[Tr(S)[0]]), i = o.map((S) => Tr(S)[0]), p = new Set(i), u = i.map((S) => this.graph.nodes[S]);
    u.length === 0 && (u = this._outputs);
    let { usedNodes: c, missingInputs: l, dynamicNode: m, syncInputs: d } = MS(t8, u, this.weightMap, this._initNodes), f = [...a, ...this.graph.weights, ...this._initNodes || []].map((S) => ({ node: S, contexts: e.currentContext })), h = Object.assign({}, this.weightMap);
    Object.keys(t8).forEach((S) => {
      let [k, _] = Tr(S), E = [];
      E[_] = t8[S], h[k] = E;
    });
    let g = {}, x = this.getFrozenTensorIds(h), b = {};
    for (; f.length > 0; ) {
      let S = this.processStack(a, f, e, h, b, x, p, g, c);
      await Promise.all(S);
    }
    m == null && !n && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    let C = u.filter((S) => !gu(S) && !zt(S.name, h, e)).map((S) => S.name);
    if (C.length > 0) {
      let S = "";
      throw m != null && (S = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`), new Error(`Cannot compute the outputs [${C}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${S}`);
    }
    return h;
  }
  processStack(t8, e, o, n, s, a, i, p, u) {
    let c = [];
    for (; e.length > 0; ) {
      let l = e.pop();
      o.currentContext = l.contexts;
      let m = "";
      if (l.node.op === "Enter" && I("isConstant", l.node, n, o) && ([m] = Ls(l.node.name, o)), n[l.node.name] == null) {
        let d = OS(l.node, n, o, this._resourceManager);
        m || ([m] = Ls(l.node.name, o));
        let f = o.currentContext;
        y.isPromise(d) ? c.push(d.then((h) => (n[m] = h, this.keepIntermediateTensors && (this.clonedTensorsMap[m] = this.cloneTensorList(h)), o.currentContext = f, this.checkTensorForDisposal(m, l.node, n, o, a, i, p), this.processChildNodes(l.node, e, o, n, s, u), h))) : (n[m] = d, this.keepIntermediateTensors && (this.clonedTensorsMap[m] = this.cloneTensorList(d)), this.checkTensorForDisposal(m, l.node, n, o, a, i, p), this.processChildNodes(l.node, e, o, n, s, u));
      } else
        this.processChildNodes(l.node, e, o, n, s, u);
    }
    return c;
  }
  processChildNodes(t8, e, o, n, s, a) {
    t8.children.forEach((i) => {
      let [p] = Ls(i.name, o);
      s[p] || !a.has(i.name) || (i.op === "Merge" ? i.inputNames.some((u) => !!zt(u, n, o)) && (s[p] = true, e.push({ contexts: o.currentContext, node: i })) : i.inputNames.every((u) => !!zt(u, n, o)) && (s[p] = true, e.push({ contexts: o.currentContext, node: i })));
    });
  }
  dispose() {
    Object.keys(this.weightMap).forEach((t8) => this.weightMap[t8].forEach((e) => e.dispose()));
  }
  checkInputShapeAndType(t8) {
    Object.keys(t8).forEach((e) => {
      let o = t8[e], [n] = Tr(e), s = this.graph.nodes[n];
      if (s.attrParams.shape && s.attrParams.shape.value) {
        let a = s.attrParams.shape.value, i = a.length === o.shape.length && o.shape.every((p, u) => a[u] === -1 || a[u] === p);
        y.assert(i, () => `The shape of dict['${s.name}'] provided in model.execute(dict) must be [${a}], but was [${o.shape}]`);
      }
      s.attrParams.dtype && s.attrParams.dtype.value && y.assert(o.dtype === s.attrParams.dtype.value, () => `The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`);
    });
  }
  mapInputs(t8) {
    var e, o;
    let n = {};
    for (let s in t8) {
      let a = (o = (e = this._signature) === null || e === void 0 ? void 0 : e.inputs) === null || o === void 0 ? void 0 : o[s];
      a != null ? n[a.name] = t8[s] : n[s] = t8[s];
    }
    return n;
  }
  checkInputs(t8) {
    let e = Object.keys(t8).filter((o) => {
      let [n] = Tr(o);
      return this.graph.nodes[n] == null;
    });
    if (e.length > 0)
      throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`);
  }
  mapOutputs(t8) {
    return t8.map((e) => {
      var o, n;
      let s = (n = (o = this._signature) === null || o === void 0 ? void 0 : o.outputs) === null || n === void 0 ? void 0 : n[e];
      return s != null ? s.name : e;
    }, {});
  }
  checkOutputs(t8) {
    t8.forEach((e) => {
      let [o] = Tr(e);
      if (!this.graph.nodes[o])
        throw new Error(`The output '${e}' is not found in the graph`);
    });
  }
};
var kf = class {
  constructor(t8 = {}, e = {}) {
    this.hashTableNameToHandle = t8, this.hashTableMap = e;
  }
  addHashTable(t8, e) {
    this.hashTableNameToHandle[t8] = e.handle, this.hashTableMap[e.id] = e;
  }
  getHashTableHandleByName(t8) {
    return this.hashTableNameToHandle[t8];
  }
  getHashTableById(t8) {
    return this.hashTableMap[t8];
  }
  dispose() {
    for (let t8 in this.hashTableMap)
      this.hashTableMap[t8].clearAndClose(), delete this.hashTableMap[t8];
    for (let t8 in this.hashTableNameToHandle)
      this.hashTableNameToHandle[t8].dispose(), delete this.hashTableNameToHandle[t8];
  }
};
var T8 = "?tfjs-format=file";
var _8 = "model.json";
var Bl = class {
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  constructor(t8, e = {}, o = fi) {
    this.modelUrl = t8, this.loadOptions = e, this.version = "n/a", this.io = o, e == null && (this.loadOptions = {}), this.resourceManager = new kf();
  }
  findIOHandler() {
    let t8 = this.modelUrl;
    if (t8.load != null)
      this.handler = t8;
    else if (this.loadOptions.requestInit != null)
      this.handler = this.io.browserHTTPRequest(t8, this.loadOptions);
    else {
      let e = this.io.getLoadHandlers(t8, this.loadOptions);
      if (e.length === 0)
        e.push(this.io.browserHTTPRequest(t8, this.loadOptions));
      else if (e.length > 1)
        throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t8]}'`);
      this.handler = e[0];
    }
  }
  load() {
    if (this.findIOHandler(), this.handler.load == null)
      throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    let t8 = this.handler.load();
    return y.isPromise(t8) ? t8.then((e) => this.loadSync(e)) : this.loadSync(t8);
  }
  loadSync(t8) {
    this.artifacts = t8;
    let e = this.artifacts.modelTopology, o = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      let s = this.artifacts.userDefinedMetadata;
      s.signature != null && (o = s.signature), s.structuredOutputKeys != null && (this.structuredOutputKeys = s.structuredOutputKeys);
    }
    this.signature = o, this.version = `${e.versions.producer}.${e.versions.minConsumer}`;
    let n = this.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
    if (this.executor = new lp(Ml.Instance.transformGraph(e, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(n), this.executor.resourceManager = this.resourceManager, t8.modelInitializer != null && t8.modelInitializer.node != null) {
      let s = Ml.Instance.transformGraph(t8.modelInitializer);
      this.initializer = new lp(s), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializerSignature = t8.initializerSignature;
    }
    return true;
  }
  async save(t8, e) {
    if (typeof t8 == "string") {
      let o = this.io.getSaveHandlers(t8);
      if (o.length === 0)
        throw new Error(`Cannot find any save handlers for URL '${t8}'`);
      if (o.length > 1)
        throw new Error(`Found more than one (${o.length}) save handlers for URL '${t8}'`);
      t8 = o[0];
    }
    if (t8.save == null)
      throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return t8.save(this.artifacts);
  }
  addStructuredOutputNames(t8) {
    if (this.structuredOutputKeys) {
      let e = t8 instanceof ut ? [t8] : t8, o = {};
      return e.forEach((n, s) => o[this.structuredOutputKeys[s]] = n), o;
    }
    return t8;
  }
  predict(t8, e) {
    let o = this.execute(t8, this.outputNodes);
    return this.addStructuredOutputNames(o);
  }
  async predictAsync(t8, e) {
    let o = await this.executeAsync(t8, this.outputNodes);
    return this.addStructuredOutputNames(o);
  }
  normalizeInputs(t8) {
    var e;
    if (!(t8 instanceof ut) && !Array.isArray(t8)) {
      let s = (e = this.signature) === null || e === void 0 ? void 0 : e.inputs;
      if (s != null)
        for (let a in s) {
          let i = s[a];
          i.resourceId != null && (t8[a] = this.resourceIdToCapturedInput[i.resourceId]);
        }
      return t8;
    }
    t8 = Array.isArray(t8) ? t8 : [t8];
    let o = Object.keys(this.resourceIdToCapturedInput).length;
    if (t8.length + o !== this.inputNodes.length)
      throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - o} non-resource placeholders, while there are ${t8.length} input tensors provided.`);
    let n = 0;
    return this.inputNodes.reduce((s, a) => {
      var i, p, u;
      let c = (u = (p = (i = this.signature) === null || i === void 0 ? void 0 : i.inputs) === null || p === void 0 ? void 0 : p[a]) === null || u === void 0 ? void 0 : u.resourceId;
      return c != null ? s[a] = this.resourceIdToCapturedInput[c] : s[a] = t8[n++], s;
    }, {});
  }
  normalizeOutputs(t8) {
    return t8 = t8 || this.outputNodes, Array.isArray(t8) ? t8 : [t8];
  }
  executeInitializerGraph() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.execute({}, []) : this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));
  }
  async executeInitializerGraphAsync() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.executeAsync({}, []) : this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));
  }
  setResourceIdToCapturedInput(t8) {
    if (this.resourceIdToCapturedInput = {}, this.initializerSignature) {
      let e = this.initializerSignature.outputs, o = Object.keys(e);
      for (let n = 0; n < o.length; n++) {
        let s = o[n], a = e[s];
        this.resourceIdToCapturedInput[a.resourceId] = t8[n];
      }
    }
  }
  execute(t8, e) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(this.executeInitializerGraph()), t8 = this.normalizeInputs(t8), e = this.normalizeOutputs(e);
    let o = this.executor.execute(t8, e);
    return o.length > 1 ? o : o[0];
  }
  async executeAsync(t8, e) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()), t8 = this.normalizeInputs(t8), e = this.normalizeOutputs(e);
    let o = await this.executor.executeAsync(t8, e);
    return o.length > 1 ? o : o[0];
  }
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(t8) {
    return Object.keys(t8).reduce((e, o) => (e[o] = [t8[o]], e), {});
  }
  dispose() {
    this.executor.dispose(), this.initializer && (this.initializer.dispose(), this.resourceIdToCapturedInput && Mt(this.resourceIdToCapturedInput)), this.resourceManager.dispose();
  }
};
async function $8(r, t8 = {}, e = fi) {
  if (r == null)
    throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  t8 == null && (t8 = {}), t8.fromTFHub && typeof r == "string" && (r = R8(r));
  let o = new Bl(r, t8, e);
  return await o.load(), o;
}
function E8(r) {
  if (r == null)
    throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");
  let t8;
  if (r instanceof Array) {
    let [o, n] = r;
    if (!o)
      throw new Error("modelJSON must be the first element of the array");
    if (!n || !(n instanceof ArrayBuffer))
      throw new Error("An ArrayBuffer of weights must be the second element of the array");
    if (!("modelTopology" in o))
      throw new Error("Model JSON is missing 'modelTopology'");
    if (!("weightsManifest" in o))
      throw new Error("Model JSON is missing 'weightsManifest'");
    let s = fi.getWeightSpecs(o.weightsManifest), a = fi.getModelArtifactsForJSONSync(o, s, n);
    t8 = fi.fromMemorySync(a);
  } else if ("load" in r)
    t8 = r;
  else if ("modelTopology" in r && "weightSpecs" in r && "weightData" in r)
    t8 = fi.fromMemorySync(r);
  else
    throw new Error("Unknown model format");
  let e = new Bl(t8);
  return e.load(), e;
}
function R8(r) {
  return r.endsWith("/") || (r = r + "/"), `${r}${_8}${T8}`;
}
var D8 = "4.11.0";
function Q(r, t8) {
  Array.isArray(r) || (r = [r]), r.forEach((e) => {
    e != null && y.assert(e.dtype !== "complex64", () => `${t8} does not support complex64 tensors in the CPU backend.`);
  });
}
var A8 = Wt.whereImpl;
var xu = class extends ao {
  nextDataId() {
    return xu.nextDataId++;
  }
  constructor() {
    super(), this.blockSize = 48, this.firstUse = true, this.data = new zo(this, pr());
  }
  write(t8, e, o) {
    this.firstUse && (this.firstUse = false, A().get("IS_NODE") && w.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    let n = { id: this.nextDataId() };
    return this.data.set(n, { values: t8, dtype: o, refCount: 1 }), n;
  }
  makeTensorInfo(t8, e, o) {
    let n;
    if (e === "string" && o != null && o.length > 0 && y.isString(o[0])) {
      let s = o.map((a) => y.encodeString(a));
      n = this.write(s, t8, e);
    } else
      n = this.write(o, t8, e);
    return { dataId: n, shape: t8, dtype: e };
  }
  refCount(t8) {
    return this.data.has(t8) ? this.data.get(t8).refCount : 0;
  }
  incRef(t8) {
    let e = this.data.get(t8);
    e.refCount++;
  }
  decRef(t8) {
    if (this.data.has(t8)) {
      let e = this.data.get(t8);
      e.refCount--;
    }
  }
  move(t8, e, o, n, s) {
    this.data.set(t8, { values: e, dtype: n, refCount: s });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(t8) {
    return this.readSync(t8);
  }
  readSync(t8) {
    let { dtype: e, complexTensorInfos: o } = this.data.get(t8);
    if (e === "complex64") {
      let n = this.readSync(o.real.dataId), s = this.readSync(o.imag.dataId);
      return w.mergeRealAndImagArrays(n, s);
    }
    return y.convertBackendValuesAndArrayBuffer(this.data.get(t8).values, e);
  }
  bufferSync(t8) {
    let e = this.readSync(t8.dataId);
    if (t8.dtype === "string")
      try {
        let o = e.map((n) => y.decodeString(n));
        return me(t8.shape, t8.dtype, o);
      } catch (o) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return me(t8.shape, t8.dtype, e);
  }
  makeOutput(t8, e, o) {
    return pr().makeTensorFromTensorInfo(this.makeTensorInfo(e, o, t8), this);
  }
  disposeData(t8, e = false) {
    if (this.data.has(t8)) {
      if (this.data.get(t8).refCount--, !e && this.data.get(t8).refCount > 0)
        return false;
      let { complexTensorInfos: o } = this.data.get(t8);
      o != null && (this.disposeData(o.real.dataId, true), this.disposeData(o.imag.dataId, true)), this.data.delete(t8);
    }
    return true;
  }
  disposeIntermediateTensorInfo(t8) {
    this.disposeData(t8.dataId);
  }
  async time(t8) {
    let e = y.now();
    return t8(), { kernelMs: y.now() - e };
  }
  memory() {
    return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }
  where(t8) {
    Q([t8], "where");
    let e = this.readSync(t8.dataId);
    return A8(t8.shape, e);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
};
xu.nextDataId = 0;
var Tc = {};
qe(Tc, { addImpl: () => zS, bincountImpl: () => Ic, bincountReduceImpl: () => Nf, bitwiseAndImpl: () => VS, castImpl: () => BS, ceilImpl: () => WS, concatImpl: () => mp, equalImpl: () => US, expImpl: () => HS, expm1Impl: () => qS, floorDivImpl: () => XS, floorImpl: () => jS, gatherNdImpl: () => Tf, gatherV2Impl: () => _f, greaterEqualImpl: () => QS, greaterImpl: () => YS, lessEqualImpl: () => JS, lessImpl: () => ZS, linSpaceImpl: () => $f, logImpl: () => eI, maxImpl: () => Ef, maximumImpl: () => tI, minimumImpl: () => rI, multiplyImpl: () => zl, negImpl: () => oI, notEqualImpl: () => nI, prodImpl: () => sI, raggedGatherImpl: () => Rf, raggedRangeImpl: () => Df, raggedTensorToTensorImpl: () => Af, rangeImpl: () => fp, rsqrtImpl: () => aI, scatterImpl: () => zs, sigmoidImpl: () => v_, simpleAbsImpl: () => LS, sliceImpl: () => hp, sparseFillEmptyRowsImpl: () => Ff, sparseReshapeImpl: () => Pf, sparseSegmentReductionImpl: () => Nc, sqrtImpl: () => T_, squaredDifferenceImpl: () => uI, staticRegexReplaceImpl: () => pI, stridedSliceImpl: () => Of, stringNGramsImpl: () => gp, stringSplitImpl: () => xp, stringToHashBucketFastImpl: () => yp, subImpl: () => lI, tileImpl: () => Mf, topKImpl: () => Lf, transposeImpl: () => vc, uniqueImpl: () => bp });
function LS(r) {
  let t8 = new Float32Array(r.length);
  for (let e = 0; e < r.length; ++e)
    t8[e] = Math.abs(r[e]);
  return t8;
}
var F8 = (r) => {
  let { x: t8 } = r.inputs, e = r.backend;
  Q(t8, "abs");
  let o = new Float32Array(y.sizeFromShape(t8.shape)), n = e.data.get(t8.dataId).values;
  return o = LS(n), e.makeOutput(o, t8.shape, t8.dtype);
};
var jT = { kernelName: Xs, backendName: "cpu", kernelFunc: F8 };
function ze(r) {
  return (t8, e, o, n, s) => {
    let a = w.assertAndGetBroadcastShape(t8, e), i = a.length, p = y.computeStrides(a), u = y.sizeFromShape(a), c = y.getTypedArrayFromDType(s, u), l = t8.length, m = e.length, d = y.computeStrides(t8), f = y.computeStrides(e), h = w.getBroadcastDims(t8, a), g = w.getBroadcastDims(e, a);
    if (h.length + g.length === 0)
      for (let x = 0; x < c.length; ++x)
        c[x] = r(o[x % o.length], n[x % n.length]);
    else
      for (let x = 0; x < c.length; ++x) {
        let b = y.indexToLoc(x, i, p), C = b.slice(-l);
        h.forEach((E) => C[E] = 0);
        let S = y.locToIndex(C, l, d), k = b.slice(-m);
        g.forEach((E) => k[E] = 0);
        let _ = y.locToIndex(k, m, f);
        c[x] = r(o[S], n[_]);
      }
    return [c, a];
  };
}
function Kt(r) {
  let { inputs: t8, backend: e } = r, { real: o, imag: n } = t8, s = e.data.get(o.dataId).values, a = e.data.get(n.dataId).values, i = e.makeTensorInfo(o.shape, "complex64"), p = e.data.get(i.dataId);
  return p.complexTensorInfos = { real: e.makeTensorInfo(o.shape, "float32", s), imag: e.makeTensorInfo(n.shape, "float32", a) }, i;
}
var XT = { kernelName: Fi, backendName: "cpu", kernelFunc: Kt };
function wc(r, t8, e = "float32") {
  if (e === "complex64") {
    let n = wc(r, t8, "float32"), s = wc(r, t8, "float32");
    return Kt({ inputs: { real: n, imag: s }, backend: r });
  }
  let o = y.makeZerosTypedArray(y.sizeFromShape(t8), e);
  return r.makeTensorInfo(t8, e, o);
}
function mr(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  return e.incRef(o.dataId), { dataId: o.dataId, shape: o.shape, dtype: o.dtype };
}
var YT = { kernelName: wo, backendName: "cpu", kernelFunc: mr };
function Ro(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8, n = e.data.get(o.dataId).complexTensorInfos.real, s = e.data.get(n.dataId).values;
  return e.makeTensorInfo(n.shape, n.dtype, s);
}
var QT = { kernelName: qi, backendName: "cpu", kernelFunc: Ro };
function BS(r, t8, e, o) {
  if (o === "int32") {
    let n = Int32Array.from(r);
    return [t8, "int32", n];
  }
  if (o === "bool") {
    let n = y.toTypedArray([0], e), [s, a] = ze((i, p) => i !== p ? 1 : 0)(t8, [], r, n, "bool");
    return [a, "bool", s];
  }
  throw new Error(`Error in Cast: failed to cast ${e} to ${o}`);
}
function Do(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { dtype: s } = o;
  if (s === "complex64") {
    if (n.dtype === "complex64")
      return mr({ inputs: { x: n }, backend: e });
    let c = wc(e, n.shape, n.dtype), l = Do({ inputs: { x: n }, backend: e, attrs: { dtype: "float32" } }), m = Kt({ inputs: { real: l, imag: c }, backend: e });
    return e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(l), m;
  }
  if (n.dtype === "complex64") {
    let c = Ro({ inputs: { input: n }, backend: e }), l = Do({ inputs: { x: c }, backend: e, attrs: { dtype: s } });
    return e.disposeIntermediateTensorInfo(c), l;
  }
  if (!y.hasEncodingLoss(n.dtype, s)) {
    let c = mr({ inputs: { x: n }, backend: e });
    return { dataId: c.dataId, shape: c.shape, dtype: s };
  }
  let a = e.data.get(n.dataId).values, [i, p, u] = BS(a, n.shape, n.dtype, s);
  return e.makeTensorInfo(i, p, u);
}
var ZT = { kernelName: bo, backendName: "cpu", kernelFunc: Do };
function Ye(r, t8, e, o) {
  return e == null ? ({ inputs: n, backend: s }) => {
    let { a, b: i } = n, p = s;
    Q([a, i], r);
    let u = p.data.get(a.dataId).values, c = p.data.get(i.dataId).values, l = a.dtype === "string" ? w.fromUint8ToStringArray(u) : u, m = a.dtype === "string" ? w.fromUint8ToStringArray(c) : c, d = o || a.dtype, [f, h] = t8(a.shape, i.shape, l, m, d);
    return p.makeTensorInfo(h, d, f);
  } : ({ inputs: n, backend: s }) => {
    let { a, b: i } = n, p = s;
    if (a.dtype === "complex64" || i.dtype === "complex64") {
      let u = Do({ inputs: { x: a }, backend: p, attrs: { dtype: "complex64" } }), c = p.data.get(u.dataId), l = c.complexTensorInfos.real, m = c.complexTensorInfos.imag, d = p.data.get(l.dataId).values, f = p.data.get(m.dataId).values, h = Do({ inputs: { x: i }, backend: p, attrs: { dtype: "complex64" } }), g = p.data.get(h.dataId), x = g.complexTensorInfos.real, b = g.complexTensorInfos.imag, C = p.data.get(x.dataId).values, S = p.data.get(b.dataId).values, [k, _, E] = e(a.shape, i.shape, d, f, C, S), R = p.makeTensorInfo(E, "float32", k), D = p.makeTensorInfo(E, "float32", _), P = Kt({ inputs: { real: R, imag: D }, backend: p });
      return p.disposeIntermediateTensorInfo(u), p.disposeIntermediateTensorInfo(h), p.disposeIntermediateTensorInfo(R), p.disposeIntermediateTensorInfo(D), P;
    } else {
      let u = p.data.get(a.dataId).values, c = p.data.get(i.dataId).values, l = o || a.dtype, [m, d] = t8(a.shape, i.shape, u, c, l);
      return p.makeTensorInfo(d, l, m);
    }
  };
}
function Sc(r) {
  return (t8, e, o, n, s, a) => {
    let i = w.assertAndGetBroadcastShape(t8, e), p = y.sizeFromShape(i), u = i.length, c = y.computeStrides(i), l = y.getTypedArrayFromDType("float32", p), m = y.getTypedArrayFromDType("float32", p), d = w.getBroadcastDims(t8, i), f = w.getBroadcastDims(e, i), h = w.mergeRealAndImagArrays(o, n), g = w.mergeRealAndImagArrays(s, a), x = t8.length, b = y.computeStrides(t8), C = e.length, S = y.computeStrides(e);
    if (d.length + f.length === 0)
      for (let k = 0; k < l.length; k++) {
        let _ = k % h.length, E = k % g.length, R = r(h[_ * 2], h[_ * 2 + 1], g[E * 2], g[E * 2 + 1]);
        l[k] = R.real, m[k] = R.imag;
      }
    else
      for (let k = 0; k < l.length; k++) {
        let _ = y.indexToLoc(k, u, c), E = _.slice(-x);
        d.forEach((M) => E[M] = 0);
        let R = y.locToIndex(E, x, b), D = _.slice(-C);
        f.forEach((M) => D[M] = 0);
        let P = y.locToIndex(D, C, S), O = r(h[R * 2], h[R * 2 + 1], g[P * 2], g[P * 2 + 1]);
        l[k] = O.real, m[k] = O.imag;
      }
    return [l, m, i];
  };
}
var zS = ze((r, t8) => r + t8);
var P8 = Sc((r, t8, e, o) => ({ real: r + e, imag: t8 + o }));
var Oa = Ye(uo, zS, P8);
var JT = { kernelName: uo, backendName: "cpu", kernelFunc: Oa };
function Ic(r, t8, e, o, n) {
  let s = y.sizeFromShape(o), a = y.makeZerosTypedArray(n, e);
  for (let i = 0; i < r.length; i++) {
    let p = r[i];
    if (p < 0)
      throw new Error("Input x must be non-negative!");
    p >= n || (s > 0 ? a[p] += t8[i] : a[p] += 1);
  }
  return a;
}
function Nf(r, t8, e, o = false) {
  let n = r.shape[0], s = r.shape[1], a = me([n, e], t8.dtype);
  for (let i = 0; i < n; i++)
    for (let p = 0; p < s; p++) {
      let u = r.get(i, p);
      if (u < 0)
        throw new Error("Input x must be non-negative!");
      u >= e || (o ? a.set(1, i, u) : t8.size > 0 ? a.set(a.get(i, u) + t8.get(i, p), i, u) : a.set(a.get(i, u) + 1, i, u));
    }
  return a;
}
var VS = ze((r, t8) => r & t8);
var O8 = Ye(ja, VS);
var e_ = { kernelName: ja, backendName: "cpu", kernelFunc: O8 };
function Xt(r) {
  return (t8, e, o) => {
    let n = y.getArrayFromDType(e, t8.length);
    for (let s = 0; s < t8.length; ++s)
      n[s] = r(t8[s], o);
    return n;
  };
}
function Ie(r, t8, e) {
  let o = Xt(t8);
  return Ar(r, o, e);
}
function Ar(r, t8, e) {
  return ({ inputs: o, attrs: n, backend: s }) => {
    let { x: a } = o;
    Q(a, r);
    let i = s, p = i.data.get(a.dataId).values, u;
    if (a.dtype === "string") {
      if (!Array.isArray(p))
        throw new Error("String tensor's value was not an instance of Array");
      u = w.fromUint8ToStringArray(p);
    } else
      u = p;
    let c = e || a.dtype, l = t8(u, c, n);
    return i.makeTensorInfo(a.shape, c, l);
  };
}
var WS = Xt((r) => Math.ceil(r));
var M8 = Ar(tn, WS);
var t_ = { kernelName: tn, backendName: "cpu", kernelFunc: M8 };
function mp(r, t8, e, o) {
  let n = y.getArrayFromDType(e, y.sizeFromShape(t8));
  if (o && e !== "string") {
    let s = 0;
    r.forEach((a) => {
      let i = y.sizeFromShape(a.shape);
      n.set(a.vals, s), s += i;
    });
  } else {
    let s = 0;
    r.forEach((a) => {
      let i = e === "string" ? w.fromUint8ToStringArray(a.vals) : a.vals, p = 0;
      for (let u = 0; u < a.shape[0]; ++u) {
        let c = u * t8[1] + s;
        for (let l = 0; l < a.shape[1]; ++l)
          n[c + l] = i[p++];
      }
      s += a.shape[1];
    });
  }
  return n;
}
var US = ze((r, t8) => r === t8 ? 1 : 0);
var GS = Ye(yn, US, null, "bool");
var r_ = { kernelName: yn, backendName: "cpu", kernelFunc: GS };
var HS = Xt((r) => Math.exp(r));
var KS = Ar(bn, HS, "float32");
var o_ = { kernelName: bn, backendName: "cpu", kernelFunc: KS };
var qS = Xt((r) => Math.expm1(r));
var L8 = Ar(Cn, qS);
var n_ = { kernelName: Cn, backendName: "cpu", kernelFunc: L8 };
var jS = Xt((r) => Math.floor(r));
var B8 = Ar(Sn, jS);
var s_ = { kernelName: Sn, backendName: "cpu", kernelFunc: B8 };
var XS = ze((r, t8) => Math.floor(r / t8));
var z8 = Ye(In, XS, null, "int32");
var a_ = { kernelName: In, backendName: "cpu", kernelFunc: z8 };
function Tf(r, t8, e, o, n, s, a, i, p) {
  let u = me([o, s], e);
  for (let c = 0; c < o; c++) {
    let l = [], m = 0;
    for (let d = 0; d < n; d++) {
      let f = r[c * n + d];
      m += f * a[d], l.push(f);
    }
    if (m < 0 || m >= p / s)
      throw new Error(`Invalid indices: ${l} does not index into ${i}`);
    for (let d = 0; d < s; d++)
      u.values[c * s + d] = t8.get(...t8.indexToLoc(m * s + d));
  }
  return u;
}
function _f(r, t8, e) {
  let o = me(e, r.dtype);
  for (let n = 0; n < o.size; ++n) {
    let a = o.indexToLoc(n).slice(), i = a[0], p = a[2], u = t8.locToIndex([i, p]);
    a[2] = t8.values[u];
    let c = r.locToIndex(a);
    0 <= c && c < r.values.length && (o.values[n] = r.values[c]);
  }
  return o;
}
var YS = ze((r, t8) => r > t8 ? 1 : 0);
var V8 = Ye(Nn, YS, null, "bool");
var i_ = { kernelName: Nn, backendName: "cpu", kernelFunc: V8 };
var QS = ze((r, t8) => r >= t8 ? 1 : 0);
var W8 = Ye(Tn, QS, null, "bool");
var u_ = { kernelName: Tn, backendName: "cpu", kernelFunc: W8 };
var ZS = ze((r, t8) => r < t8 ? 1 : 0);
var U8 = Ye(Dn, ZS, null, "bool");
var p_ = { kernelName: Dn, backendName: "cpu", kernelFunc: U8 };
var JS = ze((r, t8) => r <= t8 ? 1 : 0);
var G8 = Ye(An, JS, null, "bool");
var c_ = { kernelName: An, backendName: "cpu", kernelFunc: G8 };
function $f(r, t8, e) {
  let o = (t8 - r) / (e - 1), n = y.makeZerosTypedArray(e, "float32");
  n[0] = r;
  for (let s = 1; s < n.length; s++)
    n[s] = n[s - 1] + o;
  return n;
}
var eI = Xt((r) => Math.log(r));
var H8 = Ar(Pn, eI);
var l_ = { kernelName: Pn, backendName: "cpu", kernelFunc: H8 };
function Ef(r, t8, e, o) {
  let n = y.getTypedArrayFromDType(o, y.sizeFromShape(e));
  for (let s = 0; s < n.length; ++s) {
    let a = s * t8, i = r[a];
    for (let p = 0; p < t8; ++p) {
      let u = r[a + p];
      (Number.isNaN(u) || u > i) && (i = u);
    }
    n[s] = i;
  }
  return n;
}
var tI = ze((r, t8) => Math.max(r, t8));
var K8 = Ye(Wn, tI);
var m_ = { kernelName: Wn, backendName: "cpu", kernelFunc: K8 };
var rI = ze((r, t8) => Math.min(r, t8));
var q8 = Ye(Kn, rI);
var d_ = { kernelName: Kn, backendName: "cpu", kernelFunc: q8 };
var zl = ze((r, t8) => r * t8);
var j8 = Sc((r, t8, e, o) => ({ real: r * e - t8 * o, imag: r * o + t8 * e }));
var dp = Ye(Yn, zl, j8);
var f_ = { kernelName: Yn, backendName: "cpu", kernelFunc: dp };
function oI(r, t8, e) {
  let o = y.createScalarValue(-1, e);
  return zl([], t8, o, r, e);
}
function X8(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  Q(o, "neg");
  let n = e.data.get(o.dataId).values, [s, a] = oI(n, o.shape, o.dtype);
  return e.makeTensorInfo(a, o.dtype, s);
}
var h_ = { kernelName: pa, backendName: "cpu", kernelFunc: X8 };
var nI = ze((r, t8) => r !== t8 ? 1 : 0);
var Y8 = Ye(Qn, nI, null, "bool");
var g_ = { kernelName: Qn, backendName: "cpu", kernelFunc: Y8 };
function vc(r, t8, e, o, n) {
  let s = t8.length, a = y.sizeFromShape(t8), i = y.computeStrides(t8), p = y.computeStrides(n), u = y.getTypedArrayFromDType(e, y.sizeFromShape(n));
  for (let c = 0; c < a; ++c) {
    let l = y.indexToLoc(c, s, i), m = new Array(l.length);
    for (let f = 0; f < m.length; f++)
      m[f] = l[o[f]];
    let d = y.locToIndex(m, s, p);
    u[d] = r[c];
  }
  return u;
}
function It(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { x: n } = t8, { perm: s } = e;
  Q(n, "transpose");
  let a = n.shape.length, i = new Array(a);
  for (let l = 0; l < i.length; l++)
    i[l] = n.shape[s[l]];
  let p = o.data.get(n.dataId).values, u = vc(p, n.shape, n.dtype, s, i);
  return { dataId: o.write(u, i, n.dtype), shape: i, dtype: n.dtype };
}
var x_ = { kernelName: co, backendName: "cpu", kernelFunc: It };
function sI(r, t8, e, o) {
  let [n, s] = w.computeOutAndReduceShapes(r, o), a = dt(t8, "int32"), i = y.makeZerosTypedArray(y.sizeFromShape(n), a), p = y.sizeFromShape(s);
  for (let u = 0; u < i.length; ++u) {
    let c = u * p, l = 1;
    for (let m = 0; m < p; ++m)
      l *= e[c + m];
    i[u] = l;
  }
  return { outVals: i, outShape: n, outDtype: a };
}
function Q8(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  Q(n, "prod");
  let i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = w.getAxesPermutation(p, i), c = p, l = n, m = [];
  u != null && (l = It({ inputs: { x: n }, backend: e, attrs: { perm: u } }), m.push(l), c = w.getInnerMostAxes(c.length, i));
  let d = e.data.get(l.dataId).values, { outVals: f, outShape: h, outDtype: g } = sI(l.shape, l.dtype, d, c), x = h;
  return a && (x = w.expandShapeToKeepDim(h, p)), m.forEach((b) => e.disposeIntermediateTensorInfo(b)), e.makeTensorInfo(x, g, f);
}
var y_ = { kernelName: ns, backendName: "cpu", kernelFunc: Q8 };
function Z8(r, t8, e) {
  r.forEach((o, n) => {
    if (o < 0 || o >= e) {
      let s = y.indexToLoc(n, t8.length, y.computeStrides(t8)).join(",");
      throw new Error(`indices[${s}] = ${o} is not in [0, ${e})`);
    }
  });
}
function J8(r, t8) {
  for (let e = 0; e < r.length; ++e) {
    let o = r[e], n = e === r.length - 1 ? t8 : r[e + 1].length;
    if (o.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (o[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (o[o.length - 1] > n)
      throw new Error("Ragged splits must not point past values");
    for (let s = 1; s < o.length; ++s)
      if (o[s - 1] > o[s])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function eY(r, t8, e, o) {
  let n = [], s = 0, a = t8.length - 1 + e.length, i = new Array(a).fill(null).map(() => [0]);
  J8(e, o);
  let p = 1;
  for (let u = 0; u < t8.length - 1; ++u) {
    p *= t8[u];
    let c = t8[u + 1];
    for (let l = 1; l < p + 1; ++l)
      i[u].push(l * c);
  }
  for (let u = 0; u < r.length; ++u) {
    let c = r[u], l = r[u] + 1;
    for (let m = 0; m < e.length; ++m) {
      let d = e[m], f = m + t8.length - 1;
      if (f >= 0) {
        let h = i[f], g = h[h.length - 1] - d[c];
        for (let x = c; x < l; ++x)
          i[f].push(d[x + 1] + g);
      }
      c = d[c], l = d[l];
    }
    l !== c && (n.push([c, l]), s += l - c);
  }
  return { outSplits: i, valueSlices: n, numValues: s };
}
function tY(r) {
  let t8 = [];
  for (let e = 0; e < r.length; ++e) {
    let o = r[e].length, n = y.getArrayFromDType("int32", o);
    t8.push(n), r[e].forEach((s, a) => n[a] = s);
  }
  return t8;
}
function b_(r, t8) {
  let e = r.slice(0, t8);
  for (; e.length < t8; )
    e.push(1);
  for (let o = t8; o < r.length; o++)
    e[t8 - 1] *= r[o];
  return e;
}
function rY(r, t8, e, o, n, s) {
  let a = b_(t8, 2)[1], i = b_(s, 2)[1], p = 0;
  for (let u of e)
    for (let c = u[0]; c < u[1]; ++c) {
      for (let l = 0; l < o; ++l)
        n[p * i + l] = r[c * a + l];
      ++p;
    }
}
function oY(r, t8, e, o, n) {
  let s = t8.slice();
  s[0] = n;
  let a = y.getArrayFromDType(e, y.sizeFromShape(s)), i = r.length, p = i === 0 ? 0 : i / t8[0];
  return rY(r, t8, o, p, a, s), [a, s];
}
function Rf(r, t8, e, o, n, s, a, i) {
  if (r.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (t8[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  let p = t8[0][0] - 1;
  if (Z8(s, a, p), o.length === 0)
    throw new Error("params.rank must be nonzero");
  let u = o[0], { outSplits: c, valueSlices: l, numValues: m } = eY(s, a, r, u), d = tY(c), f = oY(e, o, n, l, m);
  return [d, f[0], f[1]];
}
var C_ = 2147483647;
function Df(r, t8, e, o, n, s, a) {
  if (t8.length > 1)
    throw new Error("starts must be a scalar or vector");
  if (n.length > 1)
    throw new Error("limits must be a scalar or vector");
  if (a.length > 1)
    throw new Error("deltas must be a scalar or vector");
  let i = t8.length === 0, p = n.length === 0, u = a.length === 0, c = [];
  i || c.push(t8[0]), p || c.push(n[0]), u || c.push(a[0]);
  for (let g = 1; g < c.length; ++g)
    if (c[g] !== c[g - 1])
      throw new Error("starts, limits, and deltas must have the same shape");
  let l = c.length === 0 ? 1 : c[0], m = y.getArrayFromDType("int32", l + 1);
  m[0] = 0;
  for (let g = 0; g < l; ++g) {
    let x = i ? r[0] : r[g], b = p ? o[0] : o[g], C = u ? s[0] : s[g];
    if (C === 0)
      throw new Error("Requires delta != 0");
    let S;
    if (C > 0 && b < x || C < 0 && b > x)
      S = 0;
    else if (S = Math.ceil(Math.abs((b - x) / C)), S > C_)
      throw new Error(`Requires ((limit - start) / delta) <= ${C_}`);
    m[g + 1] = m[g] + S;
  }
  let d = m[l], f = y.getArrayFromDType(e, d), h = 0;
  for (let g = 0; g < l; ++g) {
    let x = m[g + 1] - m[g], b = i ? r[0] : r[g], C = u ? s[0] : s[g];
    for (let S = 0; S < x; ++S)
      f[h++] = b, b += C;
  }
  return [m, f];
}
var Ao = w.RowPartitionType;
var kc = class {
  constructor(t8, e, o, n, s, a, i, p, u, c) {
    this.shape = t8, this.shapeShape = e, this.values = o, this.valuesShape = n, this.valuesDType = s, this.defaultValue = a, this.defaultValueShape = i, this.rowPartitionValues = p, this.rowPartitionValuesShapes = u, this.rowPartitionTypes = w.getRowPartitionTypesHelper(c), this.raggedRank = w.getRaggedRank(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(t8) {
    return this.rowPartitionTypes[0] === Ao.FIRST_DIM_SIZE ? this.rowPartitionTypes[t8 + 1] : this.rowPartitionTypes[t8];
  }
  getRowPartitionTensor(t8) {
    return this.rowPartitionTypes[0] === Ao.FIRST_DIM_SIZE ? this.rowPartitionValues[t8 + 1] : this.rowPartitionValues[t8];
  }
  getMaxWidth(t8) {
    let e = this.getRowPartitionTensor(t8 - 1);
    switch (this.getRowPartitionTypeByDimension(t8 - 1)) {
      case Ao.VALUE_ROWIDS:
        return kc.getMaxWidthValueRowID(e);
      case Ao.ROW_SPLITS:
        return kc.getMaxWidthRowSplit(e);
      default:
        throw new Error(`Cannot handle partition type ${Ao[this.getRowPartitionTypeByDimension(t8 - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(t8) {
    let e = t8.length;
    if (e === 0 || e === 1)
      return 0;
    let o = 0;
    for (let n = 0; n < e - 1; ++n) {
      let s = t8[n + 1] - t8[n];
      s > o && (o = s);
    }
    return o;
  }
  static getMaxWidthValueRowID(t8) {
    let e = t8.length;
    if (e === 0)
      return 0;
    let o = 0, n = t8[0], s = 0;
    for (let a = 1; a < e; ++a) {
      let i = t8[a];
      i !== n && (n = i, s = Math.max(a - o, s), o = a);
    }
    return Math.max(e - o, s);
  }
  tensorShapeFromTensor(t8, e, o = true) {
    if (e.length === 0) {
      if (t8[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return S_(t8, o);
  }
  calculateOutputSize(t8) {
    let e = this.valuesShape, o = this.defaultValueShape;
    w.validateDefaultValueShape(o, e);
    let n = this.tensorShapeFromTensor(this.shape, this.shapeShape), a = w.combineRaggedTensorToTensorShapes(this.raggedRank, n, e);
    a[0] < 0 && (a[0] = t8);
    for (let i = 1; i <= this.raggedRank; ++i)
      a[i] < 0 && (a[i] = this.getMaxWidth(i));
    return a;
  }
  calculateFirstParentOutputIndex(t8, e, o) {
    let n = Math.min(t8, o), s = [], a = 0;
    for (let i = 0; i < n; ++i, a += e)
      s.push(a);
    for (let i = n; i < t8; ++i)
      s.push(-1);
    return y.assert(s.length === t8, () => "Final length of result must be equal to firstDimension."), s;
  }
  calculateOutputIndexRowSplit(t8, e, o, n) {
    let s = t8.length, a = [];
    for (let i = 0; i < s - 1; ++i) {
      let p = t8[i + 1] - t8[i], u = Math.min(n, p), c = e[i];
      c === -1 && (u = 0);
      for (let l = 0; l < u; ++l)
        a.push(c), c += o;
      for (let l = 0; l < p - u; ++l)
        a.push(-1);
    }
    if (s > 0 && a.length !== t8[s - 1])
      throw new Error("Invalid row split size.");
    return a;
  }
  calculateOutputIndexValueRowID(t8, e, o, n) {
    let s = t8.length, a = [];
    if (s === 0)
      return [];
    let i = 0, p = t8[0];
    if (p >= e.length)
      throw new Error(`Got currentValueRowId=${p}, which is not less than ${e.length}`);
    let u = e[p];
    a.push(u);
    for (let c = 1; c < s; ++c) {
      let l = t8[c];
      if (l === p)
        u >= 0 && (++i, i < n ? u += o : u = -1);
      else {
        if (i = 0, p = l, l >= e.length)
          throw new Error(`Got nextValueRowId=${l} which is not less than ${e.length}`);
        u = e[l];
      }
      a.push(u);
    }
    if (a.length !== t8.length)
      throw new Error("Invalid row ids.");
    return a;
  }
  calculateOutputIndex(t8, e, o, n) {
    let s = this.getRowPartitionTensor(t8), a = this.getRowPartitionTypeByDimension(t8);
    switch (a) {
      case Ao.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(s, e, o, n);
      case Ao.ROW_SPLITS:
        if (s.length - 1 > e.length)
          throw new Error(`Row partition size is greater than output size: ${s.length - 1} > ${e.length}`);
        return this.calculateOutputIndexRowSplit(s, e, o, n);
      default:
        throw new Error(`Unsupported partition type: ${Ao[a]}`);
    }
  }
  getFirstDimensionSize() {
    let t8 = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    let e = this.rowPartitionTypes[0];
    switch (e) {
      case Ao.FIRST_DIM_SIZE:
        return t8[0];
      case Ao.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case Ao.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${Ao[e]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    let e = this.getFirstDimensionSize(), o = this.calculateOutputSize(e), n = new Array(this.raggedRank + 1);
    n[n.length - 1] = 1;
    for (let p = n.length - 2; p >= 0; --p)
      n[p] = n[p + 1] * o[p + 1];
    let s = S_(o, false), a = y.getArrayFromDType(this.valuesDType, y.sizeFromShape(s));
    if (n[0] * o[0] > 0) {
      let p = this.calculateFirstParentOutputIndex(e, n[0], o[0]);
      for (let u = 1; u <= this.raggedRank; ++u)
        p = this.calculateOutputIndex(u - 1, p, n[u], o[u]);
      this.setOutput(this.raggedRank, p, a, s);
    }
    return [s, a];
  }
  setOutput(t8, e, o, n) {
    if (o.length === 0)
      return;
    let s = this.values, a = o, i = n.slice();
    i = i.slice(t8 + 1);
    let p = y.sizeFromShape(i), u = e.length, c = this.defaultValue;
    if (c.length !== p && c.length !== 1) {
      let f = this.defaultValueShape;
      De(() => {
        let h = W(c, f);
        c = iu(h, i).dataSync();
      });
    }
    let l = 0, m = 0, d = 0;
    for (let f = 0; f <= u; ++f) {
      let h = f < u ? e[f] : -1;
      if (h === d) {
        ++d;
        continue;
      }
      if (m < d) {
        let g = s.subarray(l * p), x = a.subarray(m * p), b = (d - m) * p;
        w_(x, g, b);
      }
      if (f >= u) {
        let g = o.length;
        h = Math.floor(g / p);
      }
      if (h > d)
        if (this.defaultValue.length === 1)
          a.subarray(d * p, h * p).fill(this.defaultValue[0]), d = h;
        else
          for (; h > d; ) {
            let g = a.slice(d * p);
            w_(g, c, p), ++d;
          }
      h < 0 ? (l = f + 1, m = d) : (l = f, m = d, d = m + 1);
    }
  }
};
function w_(r, t8, e) {
  for (let o = 0; o < e; o++)
    r[o] = t8[o];
}
function S_(r, t8) {
  let e = [];
  for (let o of r) {
    if (o < 0) {
      if (!t8)
        throw new Error(`Dimension ${o} must be >= 0`);
      if (o < -1)
        throw new Error(`Dimension ${o} must be >= -1`);
      o = -1;
    }
    e.push(o);
  }
  return e;
}
function Af(r, t8, e, o, n, s, a, i, p, u) {
  return new kc(r, t8, e, o, n, s, a, i, p, u).compute();
}
function fp(r, t8, e, o) {
  let n = r === t8, s = r < t8 && e < 0, a = t8 < r && e > 1;
  if (n || s || a)
    return y.makeZerosTypedArray(0, o);
  let i = Math.abs(Math.ceil((t8 - r) / e)), p = y.makeZerosTypedArray(i, o);
  t8 < r && e === 1 && (e = -1), p[0] = r;
  for (let u = 1; u < p.length; u++)
    p[u] = p[u - 1] + e;
  return p;
}
var aI = Xt((r) => 1 / Math.sqrt(r));
var nY = Ar(ms, aI);
var I_ = { kernelName: ms, backendName: "cpu", kernelFunc: nY };
function zs(r, t8, e, o, n, s, a, i, p, u) {
  let c = [o / n, n], l = r.values, m = t8.values;
  if (o === 0)
    return me(e, t8.dtype);
  let d = p instanceof tt ? p : me(c, t8.dtype);
  typeof p == "string" || typeof p == "number" ? d.values.fill(p) : typeof p == "boolean" && d.values.fill(+p);
  for (let f = 0; f < s; f++) {
    let h = [], g = 0;
    for (let x = 0; x < a; x++) {
      let b = l[f * a + x];
      h.push(b), g += b * i[x];
    }
    if (g < 0 || g >= o / n)
      throw new Error(`Invalid indices: ${h} does not index into ${e}`);
    for (let x = 0; x < n; x++)
      u ? d.values[g * n + x] += m[f * n + x] : d.values[g * n + x] = t8.rank === 0 ? m[0] : m[f * n + x];
  }
  return d;
}
var v_ = Xt((r) => 1 / (1 + Math.exp(-r)));
var iI = Ie(Cs, (r) => 1 / (1 + Math.exp(-r)));
var k_ = { kernelName: Cs, backendName: "cpu", kernelFunc: iI };
function hp(r, t8, e, o, n) {
  let s = ct.isSliceContinous(o, t8, e), a = y.sizeFromShape(e), i = y.computeStrides(o);
  if (s) {
    let l = ct.computeFlatOffset(t8, i);
    return n === "string" ? r.slice(l, l + a) : r.subarray(l, l + a);
  }
  let p = n === "string" ? w.fromUint8ToStringArray(r) : r, u = me(o, n, p), c = me(e, n);
  for (let l = 0; l < c.size; ++l) {
    let m = c.indexToLoc(l), d = m.map((f, h) => f + t8[h]);
    c.set(u.get(...d), ...m);
  }
  return n === "string" ? w.fromStringArrayToUint8(c.values) : c.values;
}
function Fo(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { begin: s, size: a } = o;
  Q(n, "slice");
  let [i, p] = ct.parseSliceParams(n, s, a);
  ct.assertParamsValid(n, i, p);
  let u = e.data.get(n.dataId).values, c = hp(u, i, p, n.shape, n.dtype);
  return e.makeTensorInfo(p, n.dtype, c);
}
var N_ = { kernelName: ha, backendName: "cpu", kernelFunc: Fo };
function Ff(r, t8, e, o, n, s, a) {
  let i = t8[0], p = s[0], u = new Array(p), c = new Array(i), l = t8[1];
  if (p === 0) {
    if (i !== 0)
      throw new Error(w.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));
    let g = y.getArrayFromDType(e, 0), x = y.getArrayFromDType(n, 0);
    return [g, [0, l], x, u, c];
  }
  let m = true, d = 0, f = new Array(p).fill(0);
  for (let g = 0; g < i; ++g) {
    let x = r[g * l];
    if (x < 0)
      throw new Error(w.getSparseFillEmptyRowsNegativeIndexErrorMessage(g, x));
    if (x >= p)
      throw new Error(w.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g, x, p));
    ++f[x], m = m && x >= d, d = x;
  }
  let h = true;
  for (let g = 0; g < p; ++g) {
    let x = f[g] === 0;
    u[g] = x, h = h && !x, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (h && m) {
    let g = r, x = o;
    for (let b = 0; b < i; ++b)
      c[b] = b;
    return [g, [i, l], x, u, c];
  } else {
    let g = f[p - 1], x = y.getArrayFromDType(e, g * l), b = y.getArrayFromDType(n, g), C = new Array(p).fill(0);
    for (let S = 0; S < i; ++S) {
      let k = r[S * l], _ = C[k], E = (k === 0 ? 0 : f[k - 1]) + _;
      C[k]++;
      for (let R = 0; R < l; ++R)
        x[E * l + R] = r[S * l + R];
      b[E] = o[S], c[S] = E;
    }
    for (let S = 0; S < p; ++S)
      if (C[S] === 0) {
        let _ = S === 0 ? 0 : f[S - 1];
        x[_ * l + 0] = S;
        for (let E = 1; E < l; ++E)
          x[_ * l + E] = 0;
        b[_] = a;
      }
    return [x, [g, l], b, u, c];
  }
}
function Pf(r, t8, e, o, n) {
  let s = y.sizeFromShape(o), a = t8[0], i = n.length, p = [], u = 1, c = -1;
  for (let g = 0; g < i; ++g) {
    let x = n[g];
    if (x === -1) {
      if (c !== -1)
        throw new Error(w.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c, g));
      c = g, p.push(1);
    } else {
      if (x < 0)
        throw new Error(w.getSparseReshapeNegativeOutputDimErrorMessage(g, x));
      u *= x, p.push(x);
    }
  }
  if (c !== -1) {
    if (u <= 0)
      throw new Error(w.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());
    let g = Math.trunc(s / u);
    if (u * g !== s)
      throw new Error(w.getSparseReshapeInputOutputMultipleErrorMessage(o, p));
    p[c] = g;
  }
  if (y.sizeFromShape(p) !== s)
    throw new Error(w.getSparseReshapeInputOutputMismatchErrorMessage(o, p));
  let m = o.length, d = [];
  if (m > 0) {
    d[m - 1] = 1;
    for (let g = m - 2; g >= 0; --g)
      d[g] = d[g + 1] * o[g + 1];
  }
  let f = [];
  if (i > 0) {
    f[i - 1] = 1;
    for (let g = i - 2; g >= 0; --g)
      f[g] = f[g + 1] * p[g + 1];
  }
  let h = y.getArrayFromDType(e, a * i);
  for (let g = 0; g < a; ++g) {
    let x = 0;
    for (let b = 0; b < m; ++b)
      x += r[g * m + b] * d[b];
    for (let b = 0; b < i; ++b)
      h[g * i + b] = Math.trunc(x / f[b]), x %= f[b];
  }
  return [h, [a, i], p];
}
function Nc(r, t8, e, o, n, s = false, a = 0) {
  let i = o.length, p = [t8[0], r.length / t8[0]], u = p[1], l = i > 0 ? n[i - 1] + 1 : 0;
  if (l < 0)
    throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let m = t8.slice();
  m[0] = l;
  let d = m.reduce((C, S) => C * S, 1), f = y.getArrayFromDType(e, d);
  if (i === 0)
    return l > 0 && f.fill(a), [f, m];
  if (l <= 0)
    throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let h = 0, g = 1, x = 0, b = n[h];
  for (; ; ) {
    let C = 0;
    if (g < i) {
      if (C = n[g], b === C) {
        ++g;
        continue;
      }
      if (b >= C)
        throw new Error(w.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());
    }
    if (b < 0 || b >= l)
      throw new Error(w.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b, l));
    b > x && f.fill(a, x * u, b * u);
    for (let S = h; S < g; ++S) {
      let k = o[S];
      if (k < 0 || k >= p[0])
        throw new Error(w.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(S, o[S], p[0]));
      for (let _ = 0; _ < u; _++)
        f[b * u + _] += r[k * u + _];
    }
    if (s)
      for (let S = 0; S < u; S++)
        f[b * u + S] /= g - h;
    if (h = g, ++g, x = b + 1, b = C, g > i)
      break;
  }
  return x < l && f.fill(a, x * u, l * u), [f, m];
}
var T_ = Xt((r) => Math.sqrt(r));
var sY = Ie(Ss, (r) => Math.sqrt(r));
var __ = { kernelName: Ss, backendName: "cpu", kernelFunc: sY };
var uI = ze((r, t8) => {
  let e = r - t8;
  return e * e;
});
var aY = Ye(Ns, uI);
var $_ = { kernelName: Ns, backendName: "cpu", kernelFunc: aY };
var pI = Xt((r, t8) => {
  let { pattern: e, replaceGlobal: o, rewrite: n } = t8;
  return r.replace(new RegExp(e, o ? "g" : ""), n);
});
var iY = Ar(Ou, pI);
var E_ = { kernelName: Ou, backendName: "cpu", kernelFunc: iY };
function Of(r, t8, e, o) {
  let n = me(r, t8.dtype);
  for (let s = 0; s < n.size; s++) {
    let a = n.indexToLoc(s), i = new Array(a.length);
    for (let p = 0; p < i.length; p++)
      i[p] = a[p] * e[p] + o[p];
    n.set(t8.get(...i), ...a);
  }
  return n;
}
var cI = class {
  constructor(t8, e, o, n, s, a) {
    this.separator = y.encodeString(t8), this.nGramWidths = e, this.leftPad = y.encodeString(o), this.rightPad = y.encodeString(n), this.padWidth = s, this.preserveShort = a;
  }
  getPadWidth(t8) {
    return Math.min(this.padWidth < 0 ? t8 - 1 : this.padWidth, t8 - 1);
  }
  getNumNGrams(t8, e) {
    let o = this.getPadWidth(e);
    return Math.max(0, t8 + 2 * o - e + 1);
  }
  createNGrams(t8, e, o, n, s, a) {
    for (let i = 0; i < s; ++i) {
      let p = this.getPadWidth(a), u = Math.max(0, p - i), c = Math.max(0, p - (s - (i + 1))), l = a - (u + c), m = e + (u > 0 ? 0 : i - p), d = 0;
      d += u * this.leftPad.length;
      for (let b = 0; b < l; ++b)
        d += t8[m + b].length;
      d += c * this.rightPad.length;
      let f = u + c + l - 1;
      d += f * this.separator.length, o[n + i] = new Uint8Array(d);
      let h = o[n + i], g = 0, x = (b) => b.forEach((C) => h[g++] = C);
      for (let b = 0; b < u; ++b)
        x(this.leftPad), x(this.separator);
      for (let b = 0; b < l - 1; ++b)
        x(t8[m + b]), x(this.separator);
      if (l > 0) {
        x(t8[m + l - 1]);
        for (let b = 0; b < c; ++b)
          x(this.separator), x(this.rightPad);
      } else {
        for (let b = 0; b < c - 1; ++b)
          x(this.rightPad), x(this.separator);
        x(this.rightPad);
      }
    }
  }
  compute(t8, e) {
    let o = t8.length, n = e.length;
    if (n > 0) {
      let p = e[0];
      if (p !== 0)
        throw new Error(`First split value must be 0, got ${p}`);
      for (let u = 1; u < n; ++u) {
        let c = e[u] >= p;
        if (c = c && e[u] <= o, !c)
          throw new Error(`Invalid split value ${e[u]}, must be in [${p}, ${o}]`);
        p = e[u];
      }
      if (p !== o)
        throw new Error(`Last split value must be data size. Expected ${o}, got ${p}`);
    }
    let s = n - 1, a = y.getArrayFromDType("int32", n);
    if (o === 0 || n === 0) {
      let p = new Array(o);
      for (let u = 0; u <= s; ++u)
        a[u] = 0;
      return [p, a];
    }
    a[0] = 0;
    for (let p = 1; p <= s; ++p) {
      let u = e[p] - e[p - 1], c = 0;
      this.nGramWidths.forEach((l) => {
        c += this.getNumNGrams(u, l);
      }), this.preserveShort && u > 0 && c === 0 && (c = 1), a[p] = a[p - 1] + c;
    }
    let i = new Array(a[s]);
    for (let p = 0; p < s; ++p) {
      let u = e[p], c = a[p];
      if (this.nGramWidths.forEach((l) => {
        let m = e[p + 1] - e[p], d = this.getNumNGrams(m, l);
        this.createNGrams(t8, u, i, c, d, l), c += d;
      }), this.preserveShort && c === a[p]) {
        let l = e[p + 1] - e[p];
        if (l === 0)
          continue;
        let m = l + 2 * this.padWidth, d = 1;
        this.createNGrams(t8, u, i, c, d, m);
      }
    }
    return [i, a];
  }
};
function gp(r, t8, e, o, n, s, a, i) {
  return new cI(e, o, n, s, a, i).compute(r, t8);
}
function uY(r, t8, e, o) {
  if (!r.length)
    return;
  if (t8.length === 0) {
    for (let s = 0; s < r.length; ++s)
      o.push(r.subarray(s, s + 1));
    return;
  }
  if (t8.length === 1) {
    let s = t8[0], a = r.indexOf(s);
    for (; a !== -1; ) {
      let i = r.subarray(0, a);
      (!e || i.length !== 0) && o.push(i), r = r.subarray(a + 1), a = r.indexOf(s);
    }
    (!e || r.length !== 0) && o.push(r);
    return;
  }
  let n = 0;
  for (let s = 0; s < r.length + 1; s++)
    if (s === r.length || t8.indexOf(r[s]) !== -1) {
      let a = r.subarray(n, s);
      (!e || a.length !== 0) && o.push(a), n = s + 1;
    }
}
function xp(r, t8, e) {
  let o = r.length, n = [], s = 0, a = 0, i = new Array(o);
  for (let m = 0; m < o; ++m) {
    let d = n.length;
    uY(r[m], t8, e, n);
    let f = n.length - d;
    i[m] = f, s += f, a = Math.max(a, f);
  }
  let p = y.getArrayFromDType("int32", s * 2), u = new Array(s), c = [o, a], l = 0;
  for (let m = 0; m < o; ++m)
    for (let d = 0; d < i[m]; ++d)
      p[l * 2] = m, p[l * 2 + 1] = d, u[l] = n[l], ++l;
  return [p, u, c];
}
function yp(r, t8) {
  let e = y.getArrayFromDType("int32", r.length);
  for (let o = 0; o < r.length; ++o)
    e[o] = y.fingerPrint64(r[o]).modulo(t8).getLowBitsUnsigned();
  return e;
}
var lI = ze((r, t8) => r - t8);
var pY = Sc((r, t8, e, o) => ({ real: r - e, imag: t8 - o }));
var Vl = Ye(_s, lI, pY);
var R_ = { kernelName: _s, backendName: "cpu", kernelFunc: Vl };
function Mf(r, t8) {
  let e = new Array(r.rank);
  for (let n = 0; n < e.length; n++)
    e[n] = r.shape[n] * t8[n];
  let o = me(e, r.dtype);
  for (let n = 0; n < o.values.length; ++n) {
    let s = o.indexToLoc(n), a = new Array(r.rank);
    for (let p = 0; p < a.length; p++)
      a[p] = s[p] % r.shape[p];
    let i = r.locToIndex(a);
    o.values[n] = r.values[i];
  }
  return o;
}
var Wl = (r, t8) => {
  let e = t8.value - r.value;
  return e === 0 ? r.index - t8.index : e;
};
function D_(r, t8, e = 0, o = r.length - 1) {
  for (; o > e; ) {
    if (o - e > 600) {
      let i = o - e + 1, p = t8 - e + 1, u = Math.log(i), c = 0.5 * Math.exp(2 * u / 3), l = 0.5 * Math.sqrt(u * c * (i - c) / i) * Math.sign(p - i / 2), m = Math.max(e, Math.floor(t8 - p * c / i + l)), d = Math.min(o, Math.floor(t8 + (i - p) * c / i + l));
      D_(r, t8, m, d);
    }
    let n = r[t8], s = e, a = o;
    for (y.swap(r, e, t8), Wl(r[o], n) > 0 && y.swap(r, e, o); s < a; ) {
      for (y.swap(r, s, a), s++, a--; Wl(r[s], n) < 0; )
        s = s + 1;
      for (; Wl(r[a], n) > 0; )
        a = a - 1;
    }
    Wl(r[e], n) === 0 ? y.swap(r, e, a) : (a = a + 1, y.swap(r, a, o)), a <= t8 && (e = a + 1), t8 <= a && (o = a - 1);
  }
}
function Lf(r, t8, e, o, n) {
  let s = t8[t8.length - 1], [a, i] = [r.length / s, s], p = y.getTypedArrayFromDType(e, a * o), u = y.getTypedArrayFromDType("int32", a * o);
  for (let l = 0; l < a; l++) {
    let m = l * i, d = r.subarray(m, m + i), f = new Array(d.length);
    d.forEach((b, C) => f[C] = { value: b, index: C }), o < f.length && (D_(f, o), f = f.slice(0, o)), n && f.sort(Wl);
    let h = l * o, g = p.subarray(h, h + o), x = u.subarray(h, h + o);
    for (let b = 0; b < o; b++)
      g[b] = f[b].value, x[b] = f[b].index;
  }
  let c = t8.slice();
  return c[c.length - 1] = o, [me(c, e, p), me(c, "int32", u)];
}
function bp(r, t8, e, o) {
  let n = y.parseAxisParam(t8, e)[0], s = [1, e[0], 1];
  for (let f = 0; f < n; f++)
    s[0] *= e[f];
  s[1] = e[n];
  for (let f = n + 1; f < e.length; f++)
    s[2] *= e[f];
  let a = /* @__PURE__ */ new Map(), i = new Int32Array(e[n]), p = new tt(s, o, r), u = [], c = s[0] === 1 && s[2] === 1;
  for (let f = 0; f < e[n]; f++) {
    let h;
    if (c)
      h = r[f].toString();
    else {
      let x = [];
      for (let b = 0; b < s[0]; b++)
        for (let C = 0; C < s[2]; C++)
          x.push(p.get(b, f, C));
      h = x.join(",");
    }
    let g = a.get(h);
    if (g != null)
      i[f] = g;
    else {
      let x = a.size;
      a.set(h, x), i[f] = x, u.push(f);
    }
  }
  let l = s.slice();
  l[1] = a.size;
  let m = new tt(l, o);
  u.forEach((f, h) => {
    for (let g = 0; g < s[0]; g++)
      for (let x = 0; x < s[2]; x++)
        m.set(p.get(g, f, x), g, h, x);
  });
  let d = e.slice();
  return d[n] = l[1], { outputValues: m.values, outputShape: d, indices: i };
}
var cY = "4.11.0";
su("cpu", () => new xu(), 1);
var mI = Ie(gn, (r) => r >= 0 ? r : Math.exp(r) - 1);
var A_ = { kernelName: gn, backendName: "cpu", kernelFunc: mI };
function dI(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { alpha: s } = o;
  Q([n], "leakyRelu");
  let a = y.sizeFromShape(n.shape), i = e.data.get(n.dataId).values, p = y.getTypedArrayFromDType("float32", a);
  for (let u = 0; u < i.length; u++)
    p[u] = i[u] < 0 ? s * i[u] : i[u];
  return e.makeTensorInfo(n.shape, "float32", p);
}
var F_ = { kernelName: Rn, backendName: "cpu", kernelFunc: dI };
var lY = ze((r, t8) => r < 0 ? t8 * r : r);
function fI(r) {
  let { inputs: t8, backend: e } = r, { x: o, alpha: n } = t8;
  Q([o, n], "prelu");
  let s = e.data.get(o.dataId).values, a = e.data.get(n.dataId).values, [i, p] = lY(o.shape, n.shape, s, a, "float32");
  return e.makeTensorInfo(p, "float32", i);
}
var P_ = { kernelName: os, backendName: "cpu", kernelFunc: fI };
var hI = Ie(as, (r) => Math.max(0, r));
var O_ = { kernelName: as, backendName: "cpu", kernelFunc: hI };
var gI = Ie(ps, (r) => Math.min(Math.max(0, r), 6));
var M_ = { kernelName: ps, backendName: "cpu", kernelFunc: gI };
function Cp(r, t8, e, o, n) {
  if (e === "linear")
    return mr({ inputs: { x: t8 }, backend: r });
  if (e === "relu")
    return hI({ inputs: { x: t8 }, backend: r });
  if (e === "elu")
    return mI({ inputs: { x: t8 }, backend: r });
  if (e === "relu6")
    return gI({ inputs: { x: t8 }, backend: r });
  if (e === "prelu")
    return fI({ inputs: { x: t8, alpha: o }, backend: r });
  if (e === "leakyrelu")
    return dI({ inputs: { x: t8 }, backend: r, attrs: { alpha: n } });
  if (e === "sigmoid")
    return iI({ inputs: { x: t8 }, backend: r });
  throw new Error(`Activation ${e} has not been implemented for the CPU backend.`);
}
function Ve(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { shape: s } = o, a = y.sizeFromShape(n.shape), i = y.inferFromImplicitShape(s, a), p = y.sizeFromShape(i);
  y.assert(a === p, () => `The new shape (${i}) has ${p} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`), e.incRef(n.dataId);
  let u = e.data.get(n.dataId);
  if (u.complexTensorInfos != null) {
    let c = u.complexTensorInfos.real, l = u.complexTensorInfos.imag;
    c.shape = i, l.shape = i;
  }
  return { dataId: n.dataId, shape: i, dtype: n.dtype };
}
var L_ = { kernelName: da, backendName: "cpu", kernelFunc: Ve };
function xI(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { a: n, b: s } = t8, { transposeA: a, transposeB: i } = o;
  Q([n, s], "matMul");
  let p = n.shape.length, u = s.shape.length, c = a ? n.shape[p - 2] : n.shape[p - 1], l = i ? s.shape[u - 1] : s.shape[u - 2], m = a ? n.shape[p - 1] : n.shape[p - 2], d = i ? s.shape[u - 2] : s.shape[u - 1], f = n.shape.slice(0, -2), h = s.shape.slice(0, -2), g = y.sizeFromShape(f), x = y.sizeFromShape(h), C = Ir.assertAndGetBroadcastShape(n.shape.slice(0, -2), s.shape.slice(0, -2)).concat([m, d]);
  y.assert(c === l, () => `Error in matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);
  let S = a ? [g, c, m] : [g, m, c], k = i ? [x, d, l] : [x, l, d], _ = Ve({ inputs: { x: n }, backend: e, attrs: { shape: S } }), E = Ve({ inputs: { x: s }, backend: e, attrs: { shape: k } }), R = a ? _.shape[1] : _.shape[2], D = a ? _.shape[2] : _.shape[1], P = i ? E.shape[1] : E.shape[2], O = Math.max(g, x), M = e.data.get(_.dataId).values, L = e.data.get(E.dataId).values, B = y.computeStrides(_.shape), z = y.computeStrides(E.shape), [U, j, q] = a ? [B[0], 1, B[1]] : [B[0], B[1], 1], [Y, J, re] = i ? [1, z[1], z[0]] : [z[1], 1, z[0]], ne = D * P, ee = me([O, D, P], _.dtype), oe = ee.values, ie = e.blockSize;
  for (let le = 0; le < O; le++) {
    let be = le % g, _e = le % x;
    for (let ve = 0; ve < D; ve += ie) {
      let Fe = Math.min(ve + ie, D);
      for (let Pe = 0; Pe < P; Pe += ie) {
        let st = Math.min(Pe + ie, P);
        for (let lt = 0; lt < R; lt += ie) {
          let Ge = Math.min(lt + ie, R);
          for (let mt = ve; mt < Fe; mt++)
            for (let it = Pe; it < st; it++) {
              let gt = 0;
              for (let xt = lt; xt < Ge; xt++) {
                let Lr = M[be * U + mt * j + xt * q], Lt = L[xt * Y + it * J + _e * re];
                gt += Lr * Lt;
              }
              oe[le * ne + (mt * P + it)] += gt;
            }
        }
      }
    }
  }
  return e.disposeIntermediateTensorInfo(_), e.disposeIntermediateTensorInfo(E), e.makeTensorInfo(C, ee.dtype, ee.values);
}
var B_ = { kernelName: Jo, backendName: "cpu", kernelFunc: xI };
function mY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { a: n, b: s, bias: a, preluActivationWeights: i } = t8, { transposeA: p, transposeB: u, activation: c, leakyreluAlpha: l } = o, m, d, f, h = [];
  m = xI({ inputs: { a: n, b: s }, attrs: { transposeA: p, transposeB: u }, backend: e }), a && (d = Oa({ inputs: { a: m, b: a }, backend: e }), h.push(m), m = d), c && (f = Cp(e, m, c, i, l), h.push(m), m = f);
  for (let x of h)
    e.disposeIntermediateTensorInfo(x);
  return m;
}
var z_ = { kernelName: Io, backendName: "cpu", kernelFunc: mY };
var dY = Ie(Wo, (r) => Math.acos(r));
var V_ = { kernelName: Wo, backendName: "cpu", kernelFunc: dY };
var fY = Ie(Uo, (r) => Math.acosh(r));
var W_ = { kernelName: Uo, backendName: "cpu", kernelFunc: fY };
function hY(r) {
  let { inputs: t8, backend: e } = r, o = t8;
  Q(t8, "addN");
  let n = o.map((i) => e.data.get(i.dataId).values), s = me(o[0].shape, o[0].dtype), a = s.values;
  for (let i = 0; i < o.length; i++) {
    let p = n[i];
    for (let u = 0; u < a.length; u++)
      a[u] += p[u];
  }
  return e.makeTensorInfo(s.shape, s.dtype, s.values);
}
var U_ = { kernelName: Go, backendName: "cpu", kernelFunc: hY };
function gY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  Q(n, "all");
  let i = y.parseAxisParam(s, n.shape), p = i, u = w.getAxesPermutation(p, n.shape.length), c = n;
  u != null && (c = It({ inputs: { x: n }, backend: e, attrs: { perm: u } }), p = w.getInnerMostAxes(p.length, n.shape.length)), w.assertAxesAreInnerMostDims("all", p, c.shape.length);
  let [l, m] = w.computeOutAndReduceShapes(c.shape, p), d = y.sizeFromShape(m), f = y.makeZerosTypedArray(y.sizeFromShape(l), c.dtype), h = e.data.get(c.dataId).values;
  for (let x = 0; x < f.length; ++x) {
    let b = x * d, C = h[b];
    for (let S = 0; S < d; ++S) {
      let k = h[b + S];
      C = C && k;
    }
    f[x] = C;
  }
  u != null && e.disposeIntermediateTensorInfo(c);
  let g = e.makeTensorInfo(l, c.dtype, f);
  if (a) {
    let x = w.expandShapeToKeepDim(l, i), b = Ve({ inputs: { x: g }, backend: e, attrs: { shape: x } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
var G_ = { kernelName: Ho, backendName: "cpu", kernelFunc: gY };
function xY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  Q(n, "any");
  let i = y.parseAxisParam(s, n.shape), p = i, u = w.getAxesPermutation(p, n.shape.length), c = n;
  u != null && (c = It({ inputs: { x: n }, backend: e, attrs: { perm: u } }), p = w.getInnerMostAxes(p.length, n.shape.length)), w.assertAxesAreInnerMostDims("any", p, c.shape.length);
  let [l, m] = w.computeOutAndReduceShapes(c.shape, p), d = y.sizeFromShape(m), f = y.makeZerosTypedArray(y.sizeFromShape(l), c.dtype), h = e.data.get(c.dataId).values;
  for (let x = 0; x < f.length; ++x) {
    let b = x * d, C = h[b];
    for (let S = 0; S < d; ++S) {
      let k = h[b + S];
      C = C || k;
    }
    f[x] = C;
  }
  u != null && e.disposeIntermediateTensorInfo(c);
  let g = e.makeTensorInfo(l, c.dtype, f);
  if (a) {
    let x = w.expandShapeToKeepDim(l, i), b = Ve({ inputs: { x: g }, backend: e, attrs: { shape: x } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
var H_ = { kernelName: Ko, backendName: "cpu", kernelFunc: xY };
function yY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s } = o;
  Q(n, "argMax");
  let a = y.parseAxisParam(s, n.shape), i = w.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = It({ inputs: { x: n }, backend: e, attrs: { perm: i } }), u.push(p), a = w.getInnerMostAxes(a.length, p.shape.length)), a = [a[0]], w.assertAxesAreInnerMostDims("argMax", a, p.shape.length);
  let [c, l] = w.computeOutAndReduceShapes(p.shape, a), m = y.sizeFromShape(c), d = y.makeZerosTypedArray(m, "int32"), f = y.sizeFromShape(l), h = e.data.get(p.dataId).values;
  for (let g = 0; g < d.length; ++g) {
    let x = g * f, b = h[x], C = 0;
    for (let S = 0; S < f; ++S) {
      let k = h[x + S];
      k > b && (b = k, C = S);
    }
    d[g] = C;
  }
  return u.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.makeTensorInfo(c, "int32", d);
}
var K_ = { kernelName: Ys, backendName: "cpu", kernelFunc: yY };
function bY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s } = o;
  Q(n, "argMin");
  let a = y.parseAxisParam(s, n.shape), i = w.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = It({ inputs: { x: n }, backend: e, attrs: { perm: i } }), u.push(p), a = w.getInnerMostAxes(a.length, p.shape.length)), a = [a[0]], w.assertAxesAreInnerMostDims("argMin", a, p.shape.length);
  let [c, l] = w.computeOutAndReduceShapes(p.shape, a), m = y.sizeFromShape(c), d = y.makeZerosTypedArray(m, "int32"), f = y.sizeFromShape(l), h = e.data.get(p.dataId).values;
  for (let g = 0; g < d.length; ++g) {
    let x = g * f, b = h[x], C = 0;
    for (let S = 0; S < f; ++S) {
      let k = h[x + S];
      k < b && (b = k, C = S);
    }
    d[g] = C;
  }
  return u.forEach((g) => e.disposeIntermediateTensorInfo(g)), e.makeTensorInfo(c, "int32", d);
}
var q_ = { kernelName: Qs, backendName: "cpu", kernelFunc: bY };
var CY = Ie(qo, (r) => Math.asin(r));
var j_ = { kernelName: qo, backendName: "cpu", kernelFunc: CY };
var wY = Ie(jo, (r) => Math.asinh(r));
var X_ = { kernelName: jo, backendName: "cpu", kernelFunc: wY };
var SY = Ie(Xo, (r) => Math.atan(r));
var Y_ = { kernelName: Xo, backendName: "cpu", kernelFunc: SY };
var IY = ze((r, t8) => Math.atan2(r, t8));
var vY = Ye(Qo, IY);
var Q_ = { kernelName: Qo, backendName: "cpu", kernelFunc: vY };
var kY = Ie(Yo, (r) => Math.atanh(r));
var Z_ = { kernelName: Yo, backendName: "cpu", kernelFunc: kY };
function _c(r, t8, e, o, n, s) {
  let a = n.strideHeight, i = n.strideWidth, p = n.dilationHeight, u = n.dilationWidth, c = n.effectiveFilterHeight, l = n.effectiveFilterWidth, m = n.padInfo.top, d = n.padInfo.left, f = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, h = me(n.outShape, e), g = h.values, x = n.outShape[1] * n.outShape[2] * n.outShape[3], b = n.outShape[2] * n.outShape[3], C = n.outShape[3];
  for (let S = 0; S < n.batchSize; ++S) {
    let k = S * x, _ = S * o[0];
    for (let E = 0; E < n.inChannels; ++E)
      for (let R = 0; R < n.outHeight; ++R) {
        let D = R * a - m, P = Math.max(0, D), O = Math.min(n.inHeight, c + D), M = k + R * b;
        for (let L = 0; L < n.outWidth; ++L) {
          let B = L * i - d, z = Math.max(0, B), U = Math.min(n.inWidth, l + B), j = f, q = 0, Y = 0;
          for (let re = P; re < O; re += p) {
            let ne = _ + re * o[1];
            for (let ee = z; ee < U; ee += u) {
              let oe = ne + ee * o[2], ie = r[oe + E];
              s === "max" && ie > j ? j = ie : s === "avg" && (q += ie, Y++);
            }
            if (isNaN(j))
              break;
          }
          let J = M + L * C + E;
          g[J] = s === "avg" ? q / Y : j;
        }
      }
  }
  return h;
}
function Bf(r, t8, e, o, n = false, s = false) {
  let a = me(o.outShape, "int32"), i = o.strideHeight, p = o.strideWidth, u = o.dilationHeight, c = o.dilationWidth, l = o.effectiveFilterHeight, m = o.effectiveFilterWidth, d = o.padInfo.top, f = o.padInfo.left, h = me(t8, e, r);
  for (let g = 0; g < o.batchSize; ++g)
    for (let x = 0; x < o.inChannels; ++x)
      for (let b = 0; b < o.outHeight; ++b) {
        let C = b * i - d, S = C;
        for (; S < 0; )
          S += u;
        let k = Math.min(o.inHeight, l + C);
        for (let _ = 0; _ < o.outWidth; ++_) {
          let E = _ * p - f, R = E;
          for (; R < 0; )
            R += c;
          let D = Math.min(o.inWidth, m + E), P = Number.NEGATIVE_INFINITY, O = -1;
          for (let M = S; M < k; M += u) {
            let L = M - C;
            for (let B = R; B < D; B += c) {
              let z = B - E, U = h.get(g, M, B, x);
              U > P && (P = U, n ? O = s ? ((g * o.inHeight + M) * o.inWidth + B) * o.inChannels + x : (M * o.inWidth + B) * o.inChannels + x : O = L * m + z);
            }
          }
          a.set(O, g, b, _, x);
        }
      }
  return a;
}
function zf(r, t8, e, o, n, s) {
  let a = n.strideDepth, i = n.strideHeight, p = n.strideWidth, u = n.dilationDepth, c = n.dilationHeight, l = n.dilationWidth, m = n.effectiveFilterDepth, d = n.effectiveFilterHeight, f = n.effectiveFilterWidth, h = n.padInfo.front, g = n.padInfo.top, x = n.padInfo.left, b = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, C = me(n.outShape, e), S = C.values, k = n.outShape[1] * n.outShape[2] * n.outShape[3] * n.outShape[4], _ = n.outShape[2] * n.outShape[3] * n.outShape[4], E = n.outShape[3] * n.outShape[4], R = n.outShape[4];
  for (let D = 0; D < n.batchSize; ++D) {
    let P = D * k, O = D * o[0];
    for (let M = 0; M < n.inChannels; ++M)
      for (let L = 0; L < n.outDepth; ++L) {
        let B = L * a - h, z = B;
        for (; z < 0; )
          z += u;
        let U = Math.min(n.inDepth, m + B), j = P + L * _;
        for (let q = 0; q < n.outHeight; ++q) {
          let Y = q * i - g, J = Y;
          for (; J < 0; )
            J += c;
          let re = Math.min(n.inHeight, d + Y), ne = j + q * E;
          for (let ee = 0; ee < n.outWidth; ++ee) {
            let oe = ee * p - x, ie = oe;
            for (; ie < 0; )
              ie += l;
            let le = Math.min(n.inWidth, f + oe), be = ne + ee * R, _e = b, ve = 0, Fe = 0;
            for (let st = z; st < U; st += u) {
              let lt = O + st * o[1];
              for (let Ge = J; Ge < re; Ge += c) {
                let mt = lt + Ge * o[2];
                for (let it = ie; it < le; it += l) {
                  let gt = mt + it * o[3], xt = r[gt + M];
                  if (s === "max" && xt > _e ? _e = xt : s === "avg" && (ve += xt, Fe++), isNaN(_e))
                    break;
                }
                if (isNaN(_e))
                  break;
              }
              if (isNaN(_e))
                break;
            }
            let Pe = be + M;
            S[Pe] = s === "avg" ? ve / Math.max(Fe, 1) : _e;
          }
        }
      }
  }
  return C;
}
function J_(r, t8) {
  let e = me(t8.outShape, "int32"), o = t8.strideDepth, n = t8.strideHeight, s = t8.strideWidth, a = t8.dilationDepth, i = t8.dilationHeight, p = t8.dilationWidth, u = t8.effectiveFilterDepth, c = t8.effectiveFilterHeight, l = t8.effectiveFilterWidth, m = t8.padInfo.front, d = t8.padInfo.top, f = t8.padInfo.left;
  for (let h = 0; h < t8.batchSize; ++h)
    for (let g = 0; g < t8.inChannels; ++g)
      for (let x = 0; x < t8.outDepth; ++x) {
        let b = x * o - m, C = b;
        for (; C < 0; )
          C += a;
        let S = Math.min(t8.inDepth, u + b);
        for (let k = 0; k < t8.outHeight; ++k) {
          let _ = k * n - d, E = _;
          for (; E < 0; )
            E += i;
          let R = Math.min(t8.inHeight, c + _);
          for (let D = 0; D < t8.outWidth; ++D) {
            let P = D * s - f, O = P;
            for (; O < 0; )
              O += p;
            let M = Math.min(t8.inWidth, l + P), L = Number.NEGATIVE_INFINITY, B = -1;
            for (let z = C; z < S; z += a) {
              let U = z - b;
              for (let j = E; j < R; j += i) {
                let q = j - _;
                for (let Y = O; Y < M; Y += p) {
                  let J = Y - P, re = r.get(h, z, j, Y, g);
                  re >= L && (L = re, B = U * c * l + q * c + J);
                }
              }
            }
            e.set(B, h, x, k, D, g);
          }
        }
      }
  return e;
}
function NY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8;
  Q(n, "avgPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1;
  y.assert(w.eitherStridesOrDilationsAreOne(a, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = w.computePool2DInfo(n.shape, s, a, u, i, p), l;
  if (c.filterWidth === 1 && c.filterHeight === 1 && y.arraysEqual(c.inShape, c.outShape))
    l = mr({ inputs: { x: n }, backend: e });
  else {
    let m = e.data.get(n.dataId).values, d = y.computeStrides(n.shape), f = _c(m, n.shape, n.dtype, d, c, "avg");
    l = e.makeTensorInfo(c.outShape, n.dtype, f.values);
  }
  return l;
}
var e$ = { kernelName: Zo, backendName: "cpu", kernelFunc: NY };
function TY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dimRoundingMode: p, dataFormat: u } = o;
  Q(n, "avgPool3d");
  let c = w.computePool3DInfo(n.shape, s, a, 1, i, p, u), l = e.data.get(n.dataId).values, m = zf(l, n.shape, n.dtype, y.computeStrides(n.shape), c, "avg");
  return e.makeTensorInfo(m.shape, "float32", m.values);
}
var t$ = { kernelName: Zs, backendName: "cpu", kernelFunc: TY };
function _Y(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = o;
  Q([n, s], "avgPool3DGrad");
  let c = w.computePool3DInfo(s.shape, a, i, 1, p, u), l = c.strideDepth, m = c.strideHeight, d = c.strideWidth, f = c.filterDepth, h = c.filterHeight, g = c.filterWidth, x = c.dilationDepth, b = c.dilationHeight, C = c.dilationWidth, S = c.effectiveFilterDepth, k = c.effectiveFilterHeight, _ = c.effectiveFilterWidth, E = S - 1 - c.padInfo.front, R = _ - 1 - c.padInfo.left, D = k - 1 - c.padInfo.top, P = me(s.shape, "float32"), O = 1 / (f * h * g), M = e.bufferSync(n);
  for (let L = 0; L < c.batchSize; ++L)
    for (let B = 0; B < c.inChannels; ++B)
      for (let z = 0; z < c.inDepth; ++z)
        for (let U = 0; U < c.inHeight; ++U)
          for (let j = 0; j < c.inWidth; ++j) {
            let q = z - E, Y = U - D, J = j - R, re = 0;
            for (let ne = 0; ne < S; ne += x) {
              let ee = (q + ne) / l;
              if (!(ee < 0 || ee >= c.outDepth || Math.floor(ee) !== ee))
                for (let oe = 0; oe < k; oe += b) {
                  let ie = (Y + oe) / m;
                  if (!(ie < 0 || ie >= c.outHeight || Math.floor(ie) !== ie))
                    for (let le = 0; le < _; le += C) {
                      let be = (J + le) / d;
                      if (be < 0 || be >= c.outWidth || Math.floor(be) !== be)
                        continue;
                      let _e = M.get(L, ee, ie, be, B);
                      re += _e;
                    }
                }
            }
            P.set(re * O, L, z, U, j, B);
          }
  return e.makeTensorInfo(P.shape, P.dtype, P.values);
}
var r$ = { kernelName: Ai, backendName: "cpu", kernelFunc: _Y };
function $Y(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, a = s;
  Q([n, s], "avgPoolGrad");
  let { filterSize: i, strides: p, pad: u } = o, c = w.computePool2DInfo(a.shape, i, p, 1, u), l = c.strideHeight, m = c.strideWidth, d = c.filterHeight, f = c.filterWidth, h = c.dilationHeight, g = c.dilationWidth, x = c.effectiveFilterHeight, b = c.effectiveFilterWidth, C = b - 1 - c.padInfo.left, S = x - 1 - c.padInfo.top, k = me(a.shape, "float32"), _ = 1 / (d * f), E = e.data.get(n.dataId).values, R = me(n.shape, "float32", E);
  for (let D = 0; D < c.batchSize; ++D)
    for (let P = 0; P < c.inChannels; ++P)
      for (let O = 0; O < c.inHeight; ++O)
        for (let M = 0; M < c.inWidth; ++M) {
          let L = O - S, B = M - C, z = 0;
          for (let U = 0; U < x; U += h) {
            let j = (L + U) / l;
            if (!(j < 0 || j >= c.outHeight || Math.floor(j) !== j))
              for (let q = 0; q < b; q += g) {
                let Y = (B + q) / m;
                if (Y < 0 || Y >= c.outWidth || Math.floor(Y) !== Y)
                  continue;
                let J = R.get(D, j, Y, P);
                z += J;
              }
          }
          k.set(z * _, D, O, M, P);
        }
  return e.makeTensorInfo(k.shape, k.dtype, k.values);
}
var o$ = { kernelName: Di, backendName: "cpu", kernelFunc: $Y };
function EY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, scale: s, offset: a, mean: i, variance: p } = t8;
  y.assert(i.shape.length === p.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), y.assert(a == null || i.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), y.assert(s == null || i.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), Q([n, i, p, s, a], "batchNorm");
  let { varianceEpsilon: u } = o;
  u == null && (u = 1e-3);
  let c = e.data.get(n.dataId).values, l = e.data.get(i.dataId).values, m = e.data.get(p.dataId).values, d = s ? e.data.get(s.dataId).values : new Float32Array([1]), f = a ? e.data.get(a.dataId).values : new Float32Array([0]), h = new Float32Array(c.length), g = f.length, x = d.length, b = m.length, C = l.length, S = 0, k = 0, _ = 0, E = 0;
  for (let R = 0; R < c.length; ++R)
    h[R] = f[S++] + (c[R] - l[k++]) * d[_++] / Math.sqrt(m[E++] + u), S >= g && (S = 0), k >= C && (k = 0), _ >= x && (_ = 0), E >= b && (E = 0);
  return e.makeTensorInfo(n.shape, n.dtype, h);
}
var n$ = { kernelName: vn, backendName: "cpu", kernelFunc: EY };
function RY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockShape: s, crops: a } = o;
  Q([n], "batchToSpaceND");
  let i = s.reduce((x, b) => x * b), p = w.getReshaped(n.shape, s, i), u = w.getPermuted(p.length, s.length), c = w.getReshapedPermuted(n.shape, s, i), l = w.getSliceBeginCoords(a, s.length), m = w.getSliceSize(c, a, s.length), d = Ve({ inputs: { x: n }, backend: e, attrs: { shape: p } }), f = It({ inputs: { x: d }, backend: e, attrs: { perm: u } }), h = Ve({ inputs: { x: f }, backend: e, attrs: { shape: c } }), g = Fo({ inputs: { x: h }, backend: e, attrs: { begin: l, size: m } });
  return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(h), g;
}
var s$ = { kernelName: Js, backendName: "cpu", kernelFunc: RY };
function DY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, weights: s } = t8, { size: a } = o, i = e.data.get(n.dataId).values, p = e.data.get(s.dataId).values, u = Ic(i, p, s.dtype, s.shape, a);
  return e.makeTensorInfo([a], s.dtype, u);
}
var a$ = { kernelName: en, backendName: "cpu", kernelFunc: DY };
function AY(r) {
  let { inputs: t8, backend: e } = r, { s0: o, s1: n } = t8, s = e.data.get(o.dataId).values, a = e.data.get(n.dataId).values, i = w.assertAndGetBroadcastShape(Array.from(s), Array.from(a));
  return e.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
var i$ = { kernelName: ea, backendName: "cpu", kernelFunc: AY };
var FY = Ie(Co, (r, t8) => {
  let e = t8;
  return r > e.clipValueMax ? e.clipValueMax : r < e.clipValueMin ? e.clipValueMin : r;
});
var u$ = { kernelName: Co, backendName: "cpu", kernelFunc: FY };
var PY = (r) => {
  let { x: t8 } = r.inputs, e = r.backend, o = new Float32Array(y.sizeFromShape(t8.shape)), n = e.data.get(t8.dataId), s = n.complexTensorInfos.real, a = n.complexTensorInfos.imag, i = e.data.get(s.dataId).values, p = e.data.get(a.dataId).values;
  for (let u = 0; u < i.length; u++) {
    let c = i[u], l = p[u];
    o[u] = Math.hypot(c, l);
  }
  return e.makeOutput(o, t8.shape, "float32");
};
var p$ = { kernelName: Pi, backendName: "cpu", kernelFunc: PY };
function Ma(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8, n = e.data.get(o.dataId).complexTensorInfos.imag, s = e.data.get(n.dataId).values;
  return e.makeTensorInfo(n.shape, n.dtype, s);
}
var c$ = { kernelName: Gi, backendName: "cpu", kernelFunc: Ma };
function yu(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { axis: n } = o, s = y.parseAxisParam(n, t8[0].shape)[0], a = t8.map((h) => h.shape);
  w.assertParamsConsistent(a, s);
  let i = w.computeOutShape(t8.map((h) => h.shape), s);
  if (y.sizeFromShape(i) === 0)
    return e.makeTensorInfo(i, t8[0].dtype, []);
  let p = t8.filter((h) => y.sizeFromShape(h.shape) > 0);
  if (p.length === 1)
    return mr({ inputs: { x: p[0] }, backend: e });
  if (p[0].dtype === "complex64") {
    let h = p.map((S) => Ro({ inputs: { input: S }, backend: e })), g = p.map((S) => Ma({ inputs: { input: S }, backend: e })), x = yu({ inputs: h, backend: e, attrs: { axis: s } }), b = yu({ inputs: g, backend: e, attrs: { axis: s } }), C = Kt({ inputs: { real: x, imag: b }, backend: e });
    return h.forEach((S) => e.disposeIntermediateTensorInfo(S)), g.forEach((S) => e.disposeIntermediateTensorInfo(S)), e.disposeIntermediateTensorInfo(x), e.disposeIntermediateTensorInfo(b), C;
  }
  let u = p.map((h) => {
    let x = [-1, y.sizeFromShape(h.shape.slice(s))];
    return Ve({ inputs: { x: h }, backend: e, attrs: { shape: x } });
  }), c = u.map((h) => ({ vals: e.data.get(h.dataId).values, shape: h.shape }));
  i = w.computeOutShape(u.map((h) => h.shape), 1);
  let l = u[0].shape[0] === 1, m = mp(c, i, t8[0].dtype, l), d = w.computeOutShape(p.map((h) => h.shape), s), f = e.makeTensorInfo(d, t8[0].dtype, m);
  return u.forEach((h) => e.disposeIntermediateTensorInfo(h)), f;
}
var l$ = { kernelName: ta, backendName: "cpu", kernelFunc: yu };
function yI(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dataFormat: p, dilations: u, dimRoundingMode: c } = o;
  Q([n, s], "conv2d");
  let l = w.convertConv2DDataFormat(p), m = w.computeConv2DInfo(n.shape, s.shape, a, u, i, c, false, l), d = m.filterHeight, f = m.filterWidth, h = m.dilationHeight, g = m.dilationWidth, x = m.padInfo.left, b = m.padInfo.top, C = m.dataFormat === "channelsLast", S = new tt(m.outShape, n.dtype), k = y.computeStrides(n.shape), _ = y.computeStrides(s.shape), E = k[0], R = C ? k[1] : k[2], D = C ? k[2] : 1, P = C ? 1 : k[1], O = S.strides[0], M = C ? S.strides[1] : S.strides[2], L = C ? S.strides[2] : 1, B = C ? 1 : S.strides[1], z = e.data.get(n.dataId).values, U = e.data.get(s.dataId).values, j = S.values;
  for (let q = 0; q < m.batchSize; ++q) {
    let Y = q * E, J = q * O;
    for (let re = 0; re < m.outHeight; ++re) {
      let ne = J + re * M, ee = re * m.strideHeight - b;
      for (let oe = 0; oe < d; ++oe) {
        let ie = ee + oe * h;
        if (ie < 0 || ie >= m.inHeight)
          continue;
        let le = oe * _[0], be = Y + ie * R;
        for (let _e = 0; _e < m.outWidth; ++_e) {
          let ve = ne + _e * L, Fe = _e * m.strideWidth - x;
          for (let Pe = 0; Pe < f; ++Pe) {
            let st = Fe + Pe * g;
            if (st < 0 || st >= m.inWidth)
              continue;
            let lt = le + Pe * _[1], Ge = be + st * D, mt = lt;
            for (let it = 0; it < m.inChannels; ++it) {
              let gt = z[Ge + it * P];
              for (let xt = 0; xt < m.outChannels; ++xt)
                j[ve + xt * B] += gt * U[mt + xt];
              mt += m.outChannels;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(S.shape, S.dtype, j);
}
var m$ = { kernelName: rn, backendName: "cpu", kernelFunc: yI };
function OY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, pad: i, dataFormat: p, dimRoundingMode: u, filterShape: c } = o;
  Q([n, s], "conv2dBackpropFilter");
  let l = w.convertConv2DDataFormat(p), m = w.computeConv2DInfo(n.shape, c, a, 1, i, u, false, l), { strideHeight: d, strideWidth: f, filterHeight: h, filterWidth: g } = m, x = m.dataFormat === "channelsLast", b = new tt(m.filterShape, "float32"), C = m.padInfo.left, S = m.padInfo.top, k = e.data.get(n.dataId).values, _ = e.data.get(s.dataId).values, E = new tt(n.shape, n.dtype, k), R = new tt(s.shape, s.dtype, _);
  for (let D = 0; D < h; ++D) {
    let P = Math.max(0, Math.ceil((S - D) / d)), O = Math.min(m.outHeight, (m.inHeight + S - D) / d);
    for (let M = 0; M < g; ++M) {
      let L = Math.max(0, Math.ceil((C - M) / f)), B = Math.min(m.outWidth, (m.inWidth + C - M) / f);
      for (let z = 0; z < m.inChannels; ++z)
        for (let U = 0; U < m.outChannels; ++U) {
          let j = 0;
          for (let q = 0; q < m.batchSize; ++q)
            for (let Y = P; Y < O; ++Y) {
              let J = D + Y * d - S;
              for (let re = L; re < B; ++re) {
                let ne = M + re * f - C;
                x ? j += E.get(q, J, ne, z) * R.get(q, Y, re, U) : j += E.get(q, z, J, ne) * R.get(q, U, Y, re);
              }
            }
          b.set(j, D, M, z, U);
        }
    }
  }
  return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
var d$ = { kernelName: Oi, backendName: "cpu", kernelFunc: OY };
function MY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { inputShape: a, strides: i, pad: p, dataFormat: u, dimRoundingMode: c } = o;
  Q([n, s], "conv2dBackpropInput");
  let l = y.computeStrides(s.shape), m = y.computeStrides(n.shape), d = w.convertConv2DDataFormat(u), f = w.computeConv2DInfo(a, s.shape, i, 1, p, c, false, d), h = new tt(f.inShape, "float32"), g = h.values, x = e.data.get(n.dataId).values, b = e.data.get(s.dataId).values, [C, S, k] = l, { batchSize: _, filterHeight: E, filterWidth: R, inChannels: D, inHeight: P, inWidth: O, outChannels: M, outHeight: L, outWidth: B, strideHeight: z, strideWidth: U } = f;
  d = f.dataFormat;
  let j = E - 1 - f.padInfo.top, q = R - 1 - f.padInfo.left, Y = d === "channelsLast", J = h.strides[0], re = Y ? h.strides[1] : h.strides[2], ne = Y ? h.strides[2] : 1, ee = Y ? 1 : h.strides[1], oe = m[0], ie = Y ? m[1] : m[2], le = Y ? m[2] : 1, be = Y ? 1 : m[1];
  for (let _e = 0; _e < _; ++_e)
    for (let ve = 0; ve < D; ++ve)
      for (let Fe = 0; Fe < P; ++Fe) {
        let Pe = Fe - j, st = Math.max(0, Math.ceil(Pe / z)), lt = Math.min(L, (E + Pe) / z);
        for (let Ge = 0; Ge < O; ++Ge) {
          let mt = Ge - q, it = Math.max(0, Math.ceil(mt / U)), gt = Math.min(B, (R + mt) / U), xt = 0;
          for (let Lt = st; Lt < lt; ++Lt) {
            let to = Lt * z - Pe;
            for (let nr = it; nr < gt; ++nr) {
              let _t = nr * U - mt, sr = oe * _e + ie * Lt + le * nr, ar = C * (E - 1 - to) + S * (R - 1 - _t) + k * ve;
              for (let ro = 0; ro < M; ++ro) {
                let oo = x[sr + be * ro], hr = b[ar + ro];
                xt += oo * hr;
              }
            }
          }
          let Lr = J * _e + re * Fe + ne * Ge + ee * ve;
          g[Lr] = xt;
        }
      }
  return e.makeTensorInfo(h.shape, h.dtype, h.values);
}
var f$ = { kernelName: on, backendName: "cpu", kernelFunc: MY };
function LY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p } = o;
  Q([n, s], "conv3d");
  let u = w.computeConv3DInfo(n.shape, s.shape, a, p, i), { filterDepth: c, filterHeight: l, filterWidth: m, dilationDepth: d, dilationHeight: f, dilationWidth: h, padInfo: g } = u, x = g.front, b = g.left, C = g.top, S = new tt(u.outShape, n.dtype), k = e.data.get(n.dataId).values, _ = e.data.get(s.dataId).values, E = S.values, R = y.computeStrides(n.shape), D = y.computeStrides(s.shape);
  for (let P = 0; P < u.batchSize; ++P) {
    let O = P * R[0], M = P * S.strides[0];
    for (let L = 0; L < u.outDepth; ++L) {
      let B = M + L * S.strides[1], z = L * u.strideDepth - x;
      for (let U = 0; U < c; ++U) {
        let j = z + U * d;
        if (j < 0 || j >= u.inDepth)
          continue;
        let q = U * D[0], Y = O + j * R[1];
        for (let J = 0; J < u.outHeight; ++J) {
          let re = B + J * S.strides[2], ne = J * u.strideHeight - C;
          for (let ee = 0; ee < l; ++ee) {
            let oe = ne + ee * f;
            if (oe < 0 || oe >= u.inHeight)
              continue;
            let ie = q + ee * D[1], le = Y + oe * R[2];
            for (let be = 0; be < u.outWidth; ++be) {
              let _e = re + be * u.outChannels, ve = be * u.strideWidth - b;
              for (let Fe = 0; Fe < m; ++Fe) {
                let Pe = ve + Fe * h;
                if (Pe < 0 || Pe >= u.inWidth)
                  continue;
                let st = ie + Fe * D[2], lt = le + Pe * u.inChannels, Ge = st;
                for (let mt = 0; mt < u.inChannels; ++mt) {
                  let it = k[lt + mt];
                  for (let gt = 0; gt < u.outChannels; ++gt)
                    E[_e + gt] += it * _[Ge + gt];
                  Ge += u.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(S.shape, S.dtype, S.values);
}
var h$ = { kernelName: nn, backendName: "cpu", kernelFunc: LY };
function BY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, pad: i, filterShape: p } = o;
  Q([n, s], "conv3dBackpropFilterV2");
  let u = y.computeStrides(n.shape), c = y.computeStrides(s.shape), l = w.computeConv3DInfo(n.shape, p, a, 1, i), m = l.strideDepth, d = l.strideHeight, f = l.strideWidth, h = l.filterDepth, g = l.filterHeight, x = l.filterWidth, b = new tt(l.filterShape, "float32"), C = b.values, [S, k, _, E] = b.strides, R = e.data.get(s.dataId).values, [D, P, O, M] = c, L = e.data.get(n.dataId).values, [B, z, U, j] = u, q = l.padInfo.front, Y = l.padInfo.left, J = l.padInfo.top;
  for (let re = 0; re < h; ++re) {
    let ne = Math.max(0, Math.ceil((q - re) / m)), ee = Math.min(l.outDepth, (l.inDepth + q - re) / m), oe = re * S;
    for (let ie = 0; ie < g; ++ie) {
      let le = Math.max(0, Math.ceil((J - ie) / d)), be = Math.min(l.outHeight, (l.inHeight + J - ie) / d), _e = ie * k + oe;
      for (let ve = 0; ve < x; ++ve) {
        let Fe = Math.max(0, Math.ceil((Y - ve) / f)), Pe = Math.min(l.outWidth, (l.inWidth + Y - ve) / f), st = ve * _ + _e;
        for (let lt = 0; lt < l.inChannels; ++lt) {
          let Ge = lt * E + st;
          for (let mt = 0; mt < l.outChannels; ++mt) {
            let it = 0;
            for (let gt = 0; gt < l.batchSize; ++gt) {
              let xt = gt * B, Lr = gt * D;
              for (let Lt = ne; Lt < ee; ++Lt) {
                let nr = (re + Lt * m - q) * z + xt, _t = Lt * P + Lr;
                for (let sr = le; sr < be; ++sr) {
                  let ro = (ie + sr * d - J) * U + nr, oo = sr * O + _t;
                  for (let hr = Fe; hr < Pe; ++hr) {
                    let Bo = (ve + hr * f - Y) * j + ro, Ks = hr * M + oo;
                    it += L[Bo + lt] * R[Ks + mt];
                  }
                }
              }
            }
            C[Ge + mt] = it;
          }
        }
      }
    }
  }
  return e.makeTensorInfo(b.shape, b.dtype, b.values);
}
var g$ = { kernelName: Xa, backendName: "cpu", kernelFunc: BY };
function zY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { pad: a, strides: i, inputShape: p } = o;
  Q([n], "conv3dBackpropInputV2");
  let u = y.computeStrides(n.shape), c = y.computeStrides(s.shape), l = w.computeConv3DInfo(p, s.shape, i, 1, a), m = new tt(l.inShape, "float32"), d = m.values, [f, h, g, x] = m.strides, b = e.data.get(n.dataId).values, [C, S, k, _] = u, E = e.data.get(s.dataId).values, [R, D, P, O] = c, { batchSize: M, filterDepth: L, filterHeight: B, filterWidth: z, inChannels: U, inDepth: j, inHeight: q, inWidth: Y, outChannels: J, outDepth: re, outHeight: ne, outWidth: ee, strideDepth: oe, strideHeight: ie, strideWidth: le } = l, be = L - 1 - l.padInfo.front, _e = B - 1 - l.padInfo.top, ve = z - 1 - l.padInfo.left;
  for (let Fe = 0; Fe < M; ++Fe)
    for (let Pe = 0; Pe < U; ++Pe)
      for (let st = 0; st < j; ++st) {
        let lt = st - be, Ge = Math.max(0, Math.ceil(lt / oe)), mt = Math.min(re, (L + lt) / oe);
        for (let it = 0; it < q; ++it) {
          let gt = it - _e, xt = Math.max(0, Math.ceil(gt / ie)), Lr = Math.min(ne, (B + gt) / ie);
          for (let Lt = 0; Lt < Y; ++Lt) {
            let to = Lt - ve, nr = Math.max(0, Math.ceil(to / le)), _t = Math.min(ee, (z + to) / le), sr = 0;
            for (let ar = Ge; ar < mt; ++ar) {
              let ro = ar * oe - lt;
              for (let oo = xt; oo < Lr; ++oo) {
                let hr = oo * ie - gt;
                for (let Wa = nr; Wa < _t; ++Wa) {
                  let Bo = Wa * le - to, Ks = C * Fe + S * ar + k * oo + _ * Wa, Yt = R * (L - 1 - ro) + D * (B - 1 - hr) + P * (z - 1 - Bo) + O * Pe;
                  for (let Ua = 0; Ua < J; ++Ua) {
                    let sl = b[Ks + Ua], al = E[Yt + Ua];
                    sr += sl * al;
                  }
                }
              }
            }
            d[f * Fe + h * st + g * it + x * Lt + Pe] = sr;
          }
        }
      }
  return e.makeTensorInfo(m.shape, m.dtype, m.values);
}
var x$ = { kernelName: sn, backendName: "cpu", kernelFunc: zY };
var VY = Ie(an, (r) => Math.cos(r));
var y$ = { kernelName: an, backendName: "cpu", kernelFunc: VY };
var WY = Ie(un, (r) => Math.cosh(r));
var b$ = { kernelName: un, backendName: "cpu", kernelFunc: WY };
function UY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { image: n, boxes: s, boxInd: a } = t8, { cropSize: i, method: p, extrapolationValue: u } = o, [c, l, m, d] = n.shape, f = s.shape[0], [h, g] = i, x = me([f, h, g, d], "float32"), b = e.data.get(s.dataId).values, C = e.data.get(a.dataId).values, S = e.data.get(n.dataId).values, k = y.computeStrides(n.shape), _ = y.computeStrides(x.shape);
  for (let E = 0; E < f; E++) {
    let R = E * 4, D = b[R], P = b[R + 1], O = b[R + 2], M = b[R + 3], L = C[E];
    if (L >= c)
      continue;
    let B = h > 1 ? (O - D) * (l - 1) / (h - 1) : 0, z = g > 1 ? (M - P) * (m - 1) / (g - 1) : 0;
    for (let U = 0; U < h; U++) {
      let j = h > 1 ? D * (l - 1) + U * B : 0.5 * (D + O) * (l - 1);
      if (j < 0 || j > l - 1) {
        for (let q = 0; q < g; q++)
          for (let Y = 0; Y < d; Y++) {
            let J = Y + q * _[2] + U * _[1] + E * _[0];
            x.values[J] = u;
          }
        continue;
      }
      if (p === "bilinear") {
        let q = Math.floor(j), Y = Math.ceil(j), J = j - q;
        for (let re = 0; re < g; re++) {
          let ne = g > 1 ? P * (m - 1) + re * z : 0.5 * (P + M) * (m - 1);
          if (ne < 0 || ne > m - 1) {
            for (let le = 0; le < d; le++) {
              let be = le + re * _[2] + U * _[1] + E * _[0];
              x.values[be] = u;
            }
            continue;
          }
          let ee = Math.floor(ne), oe = Math.ceil(ne), ie = ne - ee;
          for (let le = 0; le < d; le++) {
            let be = le + ee * k[2] + q * k[1] + L * k[0], _e = S[be];
            be = le + oe * k[2] + q * k[1] + L * k[0];
            let ve = S[be];
            be = le + ee * k[2] + Y * k[1] + L * k[0];
            let Fe = S[be];
            be = le + oe * k[2] + Y * k[1] + L * k[0];
            let Pe = S[be], st = _e + (ve - _e) * ie, lt = Fe + (Pe - Fe) * ie;
            be = le + re * _[2] + U * _[1] + E * _[0], x.values[be] = st + (lt - st) * J;
          }
        }
      } else
        for (let q = 0; q < g; ++q) {
          let Y = g > 1 ? P * (m - 1) + q * z : 0.5 * (P + M) * (m - 1);
          if (Y < 0 || Y > m - 1) {
            for (let ne = 0; ne < d; ne++) {
              let ee = ne + q * _[2] + U * _[1] + E * _[0];
              x.values[ee] = u;
            }
            continue;
          }
          let J = Math.round(Y), re = Math.round(j);
          for (let ne = 0; ne < d; ne++) {
            let ee = ne + J * k[2] + re * k[1] + L * k[0], oe = ne + q * _[2] + U * _[1] + E * _[0];
            x.values[oe] = S[ee];
          }
        }
    }
  }
  return e.makeTensorInfo(x.shape, x.dtype, x.values);
}
var C$ = { kernelName: ln, backendName: "cpu", kernelFunc: UY };
function GY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, exclusive: a, reverse: i } = o;
  Q(n, "cumprod");
  let p = w.getAxesPermutation([s], n.shape.length), u = n;
  p != null && (u = It({ inputs: { x: n }, backend: e, attrs: { perm: p } }));
  let c = w.getInnerMostAxes(1, n.shape.length)[0];
  if (c !== u.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${c}`);
  let l = dt(u.dtype, "int32"), m = y.makeOnesTypedArray(y.sizeFromShape(u.shape), l), d = e.data.get(u.dataId).values, f = u.shape[u.shape.length - 1], h = i ? (x, b) => x + f - b - 1 : (x, b) => x + b;
  for (let x = 0; x < d.length; x += f)
    for (let b = 0; b < f; b++) {
      let C = h(x, b);
      if (b === 0)
        m[C] = a ? 1 : d[C];
      else {
        let S = h(x, b - 1);
        m[C] = a ? d[S] * m[S] : d[C] * m[S];
      }
    }
  let g = e.makeTensorInfo(u.shape, l, m);
  if (p != null) {
    let x = w.getUndoAxesPermutation(p), b = It({ inputs: { x: g }, backend: e, attrs: { perm: x } });
    return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(u), b;
  }
  return g;
}
var w$ = { kernelName: pn, backendName: "cpu", kernelFunc: GY };
function HY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, exclusive: a, reverse: i } = o;
  Q(n, "cumsum");
  let p = w.getAxesPermutation([s], n.shape.length), u = n;
  p != null && (u = It({ inputs: { x: n }, backend: e, attrs: { perm: p } }));
  let c = w.getInnerMostAxes(1, n.shape.length)[0];
  if (c !== u.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${c}`);
  let l = dt(u.dtype, "int32"), m = y.makeZerosTypedArray(y.sizeFromShape(u.shape), l), d = e.data.get(u.dataId).values, f = u.shape[u.shape.length - 1], h = i ? (x, b) => x + f - b - 1 : (x, b) => x + b;
  for (let x = 0; x < d.length; x += f)
    for (let b = 0; b < f; b++) {
      let C = h(x, b);
      if (b === 0)
        m[C] = a ? 0 : d[C];
      else {
        let S = h(x, b - 1);
        m[C] = a ? d[S] + m[S] : d[C] + m[S];
      }
    }
  let g = e.makeTensorInfo(u.shape, l, m);
  if (p != null) {
    let x = w.getUndoAxesPermutation(p), b = It({ inputs: { x: g }, backend: e, attrs: { perm: x } });
    return e.disposeIntermediateTensorInfo(g), e.disposeIntermediateTensorInfo(u), b;
  }
  return g;
}
var S$ = { kernelName: cn, backendName: "cpu", kernelFunc: HY };
function KY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, weights: s } = t8, { size: a, binaryOutput: i } = o;
  if (n.shape.length === 1) {
    let p = e.data.get(n.dataId).values, u = e.data.get(s.dataId).values, c = Ic(p, u, s.dtype, s.shape, a);
    return e.makeTensorInfo([a], s.dtype, c);
  } else if (n.shape.length === 2) {
    let p = e.bufferSync(n), u = e.bufferSync(s), c = Nf(p, u, a, i);
    return e.makeTensorInfo(c.shape, s.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`);
}
var I$ = { kernelName: ra, backendName: "cpu", kernelFunc: KY };
function qY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockSize: s, dataFormat: a } = o;
  y.assert(a === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);
  let i = n.shape[0], p = n.shape[1], u = n.shape[2], c = n.shape[3], l = p * s, m = u * s, d = c / (s * s), f = e.data.get(n.dataId).values, h = new Float32Array(i * l * m * d), g = 0;
  for (let x = 0; x < i; ++x)
    for (let b = 0; b < l; ++b) {
      let C = Math.floor(b / s), S = b % s;
      for (let k = 0; k < m; ++k) {
        let _ = Math.floor(k / s), E = k % s, R = (S * s + E) * d;
        for (let D = 0; D < d; ++D) {
          let O = D + R + c * (_ + u * (C + p * x));
          h[g++] = f[O];
        }
      }
    }
  return e.makeTensorInfo([i, l, m, d], n.dtype, h);
}
var v$ = { kernelName: mn, backendName: "cpu", kernelFunc: qY };
function bI(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p, dimRoundingMode: u } = o;
  Q([n, s], "depthwiseConv2DNative");
  let c = y.computeStrides(n.shape), l = y.computeStrides(s.shape), m = p;
  m == null && (m = [1, 1]), y.assert(w.eitherStridesOrDilationsAreOne(a, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${m}'`);
  let d = w.computeConv2DInfo(n.shape, s.shape, a, m, i, u, true), { filterHeight: f, filterWidth: h, dilationHeight: g, dilationWidth: x, padInfo: b } = d, C = b.left, S = b.top, k = d.outChannels / d.inChannels, _ = new tt(d.outShape, n.dtype), E = e.data.get(n.dataId).values, R = e.data.get(s.dataId).values, D = _.values;
  for (let P = 0; P < d.batchSize; ++P) {
    let O = P * c[0], M = P * _.strides[0];
    for (let L = 0; L < d.outHeight; ++L) {
      let B = M + L * _.strides[1], z = L * d.strideHeight - S;
      for (let U = 0; U < f; ++U) {
        let j = z + U * g;
        if (j < 0 || j >= d.inHeight)
          continue;
        let q = U * l[0], Y = O + j * c[1];
        for (let J = 0; J < d.outWidth; ++J) {
          let re = B + J * _.strides[2], ne = J * d.strideWidth - C;
          for (let ee = 0; ee < h; ++ee) {
            let oe = ne + ee * x;
            if (oe < 0 || oe >= d.inWidth)
              continue;
            let ie = q + ee * l[1], le = Y + oe * d.inChannels, be = re, _e = ie;
            for (let ve = 0; ve < d.inChannels; ++ve) {
              let Fe = E[le + ve];
              for (let Pe = 0; Pe < k; ++Pe)
                D[be + Pe] += Fe * R[_e + Pe];
              be += k, _e += k;
            }
          }
        }
      }
    }
  }
  return e.makeTensorInfo(_.shape, _.dtype, _.values);
}
var k$ = { kernelName: dn, backendName: "cpu", kernelFunc: bI };
function jY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, dilations: i, pad: p, dimRoundingMode: u, filterShape: c } = o;
  Q([n, s], "depthwiseConv2dNativeBackpropFilter");
  let l = w.computeConv2DInfo(n.shape, c, a, i, p, u, true), { strideHeight: m, strideWidth: d, filterHeight: f, filterWidth: h } = l, g = new tt(l.filterShape, "float32"), x = l.padInfo.left, b = l.padInfo.top, C = l.outChannels / l.inChannels, S = e.data.get(n.dataId).values, k = new tt(n.shape, n.dtype, S), _ = e.data.get(s.dataId).values, E = new tt(s.shape, s.dtype, _);
  for (let R = 0; R < f; ++R) {
    let D = Math.max(0, Math.ceil((b - R) / m)), P = Math.min(l.outHeight, (l.inHeight + b - R) / m);
    for (let O = 0; O < h; ++O) {
      let M = Math.max(0, Math.ceil((x - O) / d)), L = Math.min(l.outWidth, (l.inWidth + x - O) / d);
      for (let B = 0; B < l.outChannels; ++B) {
        let z = Math.trunc(B / C), U = B % C, j = 0;
        for (let q = 0; q < l.batchSize; ++q)
          for (let Y = D; Y < P; ++Y) {
            let J = R + Y * m - b;
            for (let re = M; re < L; ++re) {
              let ne = O + re * d - x;
              j += k.get(q, J, ne, z) * E.get(q, Y, re, B);
            }
          }
        g.set(j, R, O, z, U);
      }
    }
  }
  return e.makeTensorInfo(g.shape, g.dtype, g.values);
}
var N$ = { kernelName: Mi, backendName: "cpu", kernelFunc: jY };
function XY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { strides: a, dilations: i, pad: p, dimRoundingMode: u, inputShape: c } = o;
  Q([n, s], "depthwiseConv2DNativeBackpropInput");
  let l = y.computeStrides(n.shape), m = y.computeStrides(s.shape), d = w.computeConv2DInfo(c, s.shape, a, i, p, u, true), f = new tt(d.inShape, "float32"), h = f.values, [g, x, b] = f.strides, C = e.data.get(n.dataId).values, [S, k, _] = l, E = e.data.get(s.dataId).values, [R, D, P] = m, { batchSize: O, filterHeight: M, filterWidth: L, inChannels: B, inHeight: z, inWidth: U, outChannels: j, outHeight: q, outWidth: Y, strideHeight: J, strideWidth: re } = d, ne = M - 1 - d.padInfo.top, ee = L - 1 - d.padInfo.left, oe = j / B;
  for (let ie = 0; ie < O; ++ie)
    for (let le = 0; le < B; ++le)
      for (let be = 0; be < z; ++be) {
        let _e = be - ne, ve = Math.max(0, Math.ceil(_e / J)), Fe = Math.min(q, (M + _e) / J);
        for (let Pe = 0; Pe < U; ++Pe) {
          let st = Pe - ee, lt = Math.max(0, Math.ceil(st / re)), Ge = Math.min(Y, (L + st) / re), mt = 0;
          for (let it = ve; it < Fe; ++it) {
            let gt = it * J - _e;
            for (let xt = lt; xt < Ge; ++xt) {
              let Lr = xt * re - st, Lt = S * ie + k * it + _ * xt, to = R * (M - 1 - gt) + D * (L - 1 - Lr) + P * le;
              for (let nr = 0; nr < oe; ++nr) {
                let _t = le * oe + nr, sr = C[Lt + _t], ar = E[to + nr];
                mt += sr * ar;
              }
            }
          }
          h[g * ie + x * be + b * Pe + le] = mt;
        }
      }
  return e.makeTensorInfo(f.shape, f.dtype, f.values);
}
var T$ = { kernelName: Li, backendName: "cpu", kernelFunc: XY };
function YY(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8, n = y.sizeFromShape(o.shape), s = e.data.get(o.dataId).values, a = me([n, n], o.dtype), i = a.values;
  for (let u = 0; u < s.length; u++)
    i[u * n + u] = s[u];
  let p = [...o.shape, ...o.shape];
  return e.makeTensorInfo(p, a.dtype, a.values);
}
var _$ = { kernelName: oa, backendName: "cpu", kernelFunc: YY };
var $$ = { kernelName: fn, backendName: "cpu", kernelFunc: ({ inputs: r, backend: t8, attrs: e }) => {
  let { x: o, filter: n } = r, { strides: s, pad: a, dilations: i } = e, p = t8, u = p.data.get(o.dataId).values, c = o.shape.length, l = p.data.get(n.dataId).values, m = n.shape.length, { batchSize: d, inHeight: f, inWidth: h, inChannels: g, outHeight: x, outWidth: b, padInfo: C, strideHeight: S, strideWidth: k, filterHeight: _, filterWidth: E, dilationHeight: R, dilationWidth: D, outShape: P } = w.computeDilation2DInfo(o.shape, n.shape, s, a, "NHWC", i), O = y.sizeFromShape(P), M = P.length, L = y.getArrayFromDType(o.dtype, O);
  for (let z = 0; z < d; ++z)
    for (let U = 0; U < x; ++U) {
      let j = U * S - C.top;
      for (let q = 0; q < b; ++q) {
        let Y = q * k - C.left;
        for (let J = 0; J < g; ++J) {
          let re = Number.MIN_SAFE_INTEGER;
          for (let ee = 0; ee < _; ++ee) {
            let oe = j + ee * R;
            if (oe >= 0 && oe < f)
              for (let ie = 0; ie < E; ++ie) {
                let le = Y + ie * D;
                if (le >= 0 && le < h) {
                  let be = y.locToIndex([z, oe, le, J], c, y.computeStrides(o.shape)), _e = y.locToIndex([ee, ie, J], m, y.computeStrides(n.shape)), ve = u[be] + l[_e];
                  ve > re && (re = ve);
                }
              }
          }
          let ne = y.locToIndex([z, U, q, J], M, y.computeStrides(P));
          L[ne] = re;
        }
      }
    }
  return { dataId: p.write(y.toTypedArray(L, o.dtype), P, o.dtype), shape: P, dtype: o.dtype };
} };
var E$ = { kernelName: zi, backendName: "cpu", kernelFunc: ({ inputs: r, backend: t8, attrs: e }) => {
  let { x: o, filter: n, dy: s } = r, { strides: a, pad: i, dilations: p } = e, u = t8, c = y.toNestedArray(o.shape, u.data.get(o.dataId).values), l = y.toNestedArray(n.shape, u.data.get(n.dataId).values), { batchSize: m, inHeight: d, inWidth: f, inChannels: h, outHeight: g, outWidth: x, padInfo: b, strideHeight: C, strideWidth: S, filterHeight: k, filterWidth: _, dilationHeight: E, dilationWidth: R, outShape: D } = w.computeDilation2DInfo(o.shape, n.shape, a, i, "NHWC", p);
  y.assert(s.rank === D.length, () => `Error in ${zi}, dy must have the same rank as output ${D.length}, but got ${s.rank}`);
  let P = y.toNestedArray(D, u.data.get(s.dataId).values), O = y.makeZerosNestedTypedArray(n.shape, n.dtype);
  for (let L = 0; L < m; ++L)
    for (let B = 0; B < g; ++B) {
      let z = B * C - b.top;
      for (let U = 0; U < x; ++U) {
        let j = U * S - b.left;
        for (let q = 0; q < h; ++q) {
          let Y = Number.MIN_SAFE_INTEGER, J = 0, re = 0;
          for (let ne = 0; ne < k; ++ne) {
            let ee = z + ne * E;
            if (ee >= 0 && ee < d)
              for (let oe = 0; oe < _; ++oe) {
                let ie = j + oe * R;
                if (ie >= 0 && ie < f) {
                  let le = c[L][ee][ie][q] + l[ne][oe][q];
                  le > Y && (Y = le, J = ne, re = oe);
                }
              }
          }
          O[J][re][q] += P[L][B][U][q];
        }
      }
    }
  return { dataId: u.write(y.toTypedArray(O, o.dtype), n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
} };
var R$ = { kernelName: Bi, backendName: "cpu", kernelFunc: ({ inputs: r, backend: t8, attrs: e }) => {
  let { x: o, filter: n, dy: s } = r, { strides: a, pad: i, dilations: p } = e, u = t8, c = y.toNestedArray(o.shape, u.data.get(o.dataId).values), l = y.toNestedArray(n.shape, u.data.get(n.dataId).values), { batchSize: m, inHeight: d, inWidth: f, inChannels: h, outHeight: g, outWidth: x, padInfo: b, strideHeight: C, strideWidth: S, filterHeight: k, filterWidth: _, dilationHeight: E, dilationWidth: R, outShape: D } = w.computeDilation2DInfo(o.shape, n.shape, a, i, "NHWC", p);
  y.assert(s.rank === D.length, () => `Error in ${Bi}, dy must have the same rank as output ${D.length}, but got ${s.rank}`);
  let P = y.toNestedArray(D, u.data.get(s.dataId).values), O = y.makeZerosNestedTypedArray(o.shape, o.dtype);
  for (let L = 0; L < m; ++L)
    for (let B = 0; B < g; ++B) {
      let z = B * C - b.top;
      for (let U = 0; U < x; ++U) {
        let j = U * S - b.left;
        for (let q = 0; q < h; ++q) {
          let Y = Number.MIN_SAFE_INTEGER, J = z < 0 ? 0 : z, re = j < 0 ? 0 : j;
          for (let ne = 0; ne < k; ++ne) {
            let ee = z + ne * E;
            if (ee >= 0 && ee < d)
              for (let oe = 0; oe < _; ++oe) {
                let ie = j + oe * R;
                if (ie >= 0 && ie < f) {
                  let le = c[L][ee][ie][q] + l[ne][oe][q];
                  le > Y && (Y = le, J = ee, re = ie);
                }
              }
          }
          O[L][J][re][q] += P[L][B][U][q];
        }
      }
    }
  return { dataId: u.write(y.toTypedArray(O, o.dtype), o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
} };
function QY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { image: n } = t8, { canvas: s, options: a } = o, { contextOptions: i, imageOptions: p } = a || {}, u = (p == null ? void 0 : p.alpha) || 1, c = (i == null ? void 0 : i.contextType) || "2d";
  if (c !== "2d")
    throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);
  let l = s.getContext(c, (i == null ? void 0 : i.contextAttributes) || {});
  if (l == null)
    throw new Error(`Could not get the context with ${c} type.`);
  let [m, d] = n.shape.slice(0, 2), f = n.shape.length === 2 ? 1 : n.shape[2], h = e.data.get(n.dataId).values, g = n.dtype === "float32" ? 255 : 1, x = new Uint8ClampedArray(d * m * 4);
  for (let C = 0; C < m * d; ++C) {
    let S = [0, 0, 0, 255 * u];
    for (let _ = 0; _ < f; _++) {
      let E = h[C * f + _];
      if (n.dtype === "float32") {
        if (E < 0 || E > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${E}.`);
      } else if (n.dtype === "int32" && (E < 0 || E > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${E}.`);
      f === 1 ? (S[0] = E * g, S[1] = E * g, S[2] = E * g) : S[_] = E * g;
    }
    let k = C * 4;
    x[k + 0] = Math.round(S[0]), x[k + 1] = Math.round(S[1]), x[k + 2] = Math.round(S[2]), x[k + 3] = Math.round(S[3]);
  }
  s.width = d, s.height = m;
  let b = new ImageData(x, d, m);
  return l.putImageData(b, 0, 0), n;
}
var D$ = { kernelName: Pu, backendName: "cpu", kernelFunc: QY };
function gi(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  Q(n, "sum");
  let i;
  n.dtype === "bool" ? i = Do({ inputs: { x: n }, backend: e, attrs: { dtype: "int32" } }) : i = mr({ inputs: { x: n }, backend: e });
  let p = i.shape.length, u = y.parseAxisParam(s, i.shape), c = w.getAxesPermutation(u, p), l = u, m = i;
  c != null && (m = It({ inputs: { x: i }, backend: e, attrs: { perm: c } }), l = w.getInnerMostAxes(l.length, p)), w.assertAxesAreInnerMostDims("sum", l, m.shape.length);
  let [d, f] = w.computeOutAndReduceShapes(m.shape, l), h = w.upcastType(m.dtype, "int32"), g = wc(e, d, h), x = y.sizeFromShape(f), b = e.data.get(g.dataId).values, C = e.data.get(m.dataId).values;
  for (let S = 0; S < b.length; ++S) {
    let k = S * x, _ = 0;
    for (let E = 0; E < x; ++E)
      _ += C[k + E];
    b[S] = _;
  }
  if (a) {
    let S = w.expandShapeToKeepDim(g.shape, u), k = g;
    g = Ve({ inputs: { x: g }, backend: e, attrs: { shape: S } }), e.disposeIntermediateTensorInfo(k);
  }
  return e.disposeIntermediateTensorInfo(i), c != null && e.disposeIntermediateTensorInfo(m), g;
}
var A$ = { kernelName: Is, backendName: "cpu", kernelFunc: gi };
function ZY(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { equation: n } = o, s = t8, { allDims: a, summedDims: i, idDims: p } = w.decodeEinsumEquation(n, s.length);
  w.checkEinsumDimSizes(a.length, p, s);
  let { path: u, steps: c } = w.getEinsumComputePath(i, p), l = c.length, m = null, d = a.length, f = [];
  for (let h = 0; h < l; ++h) {
    for (let g of c[h]) {
      let { permutationIndices: x, expandDims: b } = w.getEinsumPermutation(d, p[g]), C;
      w.isIdentityPermutation(x) ? C = s[g] : (C = It({ inputs: { x: s[g] }, backend: e, attrs: { perm: x } }), f.push(C));
      let S = C.shape.slice();
      for (let k = 0; k < b.length; ++k)
        S.splice(b[k], 0, 1);
      y.arraysEqual(C.shape, S) || (C = Ve({ inputs: { x: C }, backend: e, attrs: { shape: S } }), f.push(C)), m === null ? m = C : (m = dp({ inputs: { a: C, b: m }, backend: e }), f.push(m));
    }
    h < l - 1 && (u[h] >= 0 && (m = gi({ inputs: { x: m }, backend: e, attrs: { axis: u[h] - (a.length - d), keepDims: false } }), f.push(m)), d--);
  }
  for (let h of f)
    h !== m && e.disposeIntermediateTensorInfo(h);
  return m;
}
var F$ = { kernelName: Vi, backendName: "cpu", kernelFunc: ZY };
function JY(r) {
  let { inputs: t8, backend: e } = r, { dy: o, y: n } = t8;
  Q([o, n], "eluGrad");
  let s = new Float32Array(y.sizeFromShape(n.shape)), a = e.data.get(n.dataId).values, i = e.data.get(o.dataId).values;
  for (let p = 0; p < a.length; ++p) {
    let u = a[p];
    u >= 0 ? s[p] = i[p] : s[p] = i[p] * (u + 1);
  }
  return e.makeTensorInfo(n.shape, "float32", s);
}
var P$ = { kernelName: Ya, backendName: "cpu", kernelFunc: JY };
var eQ = w.ERF_P;
var tQ = w.ERF_A1;
var rQ = w.ERF_A2;
var oQ = w.ERF_A3;
var nQ = w.ERF_A4;
var sQ = w.ERF_A5;
var aQ = Ie(xn, (r) => {
  let t8 = Math.sign(r), e = Math.abs(r), o = 1 / (1 + eQ * e);
  return t8 * (1 - ((((sQ * o + nQ) * o + oQ) * o + rQ) * o + tQ) * o * Math.exp(-e * e));
});
var O$ = { kernelName: xn, backendName: "cpu", kernelFunc: aQ };
function $c(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { input: n } = t8, { dim: s } = o, a = n.shape.length, i = n.shape.slice(), p = s;
  return s < 0 && (y.assert(-(a + 1) <= s, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), p = a + s + 1), i.splice(p, 0, 1), Ve({ inputs: { x: n }, backend: e, attrs: { shape: i } });
}
var M$ = { kernelName: na, backendName: "cpu", kernelFunc: $c };
var iQ = ze((r, t8) => r / t8);
var Ul = Ye(hn, iQ);
var Gl = { kernelName: hn, backendName: "cpu", kernelFunc: Ul };
function Vf(r, t8, e) {
  let o = r.shape, n = o[0], s = o[1], a = e.data.get(r.dataId), i = a.complexTensorInfos.real, p = a.complexTensorInfos.imag, u = [n, s], c = y.sizeFromShape(u), l = y.getTypedArrayFromDType("float32", c), m = y.getTypedArrayFromDType("float32", c);
  for (let g = 0; g < n; g++) {
    let x = Fo({ inputs: { x: i }, backend: e, attrs: { begin: [g, 0], size: [1, s] } }), b = Fo({ inputs: { x: p }, backend: e, attrs: { begin: [g, 0], size: [1, s] } }), C = Kt({ inputs: { real: x, imag: b }, backend: e }), { real: S, imag: k } = uQ(C, t8, e), _ = w.mergeRealAndImagArrays(S, k);
    for (let E = 0; E < s; E++) {
      let R = w.getComplexWithIndex(_, E);
      l[g * s + E] = R.real, m[g * s + E] = R.imag;
    }
    e.disposeIntermediateTensorInfo(x), e.disposeIntermediateTensorInfo(b), e.disposeIntermediateTensorInfo(C);
  }
  let d = e.makeTensorInfo(u, "float32", l), f = e.makeTensorInfo(u, "float32", m), h = Kt({ inputs: { real: d, imag: f }, backend: e });
  return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(f), h;
}
function uQ(r, t8, e) {
  let o = y.sizeFromShape(r.shape), n = e.data.get(r.dataId), s = e.data.get(n.complexTensorInfos.real.dataId).values, a = e.data.get(n.complexTensorInfos.imag.dataId).values;
  if (pQ(o)) {
    let i = CI(s, a, o, t8, e), p = [r.shape[0], r.shape[1]];
    if (t8) {
      let u = e.makeTensorInfo(p, "float32", i.real), c = e.makeTensorInfo(p, "float32", i.imag), l = e.makeTensorInfo([], "float32", y.createScalarValue(o, "float32")), m = mr({ inputs: { x: l }, backend: e }), d = Gl.kernelFunc({ inputs: { a: u, b: l }, backend: e }), f = Gl.kernelFunc({ inputs: { a: c, b: m }, backend: e }), h = e.data.get(d.dataId).values, g = e.data.get(f.dataId).values;
      return e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(l), e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(f), { real: h, imag: g };
    }
    return i;
  } else {
    let i = w.mergeRealAndImagArrays(s, a), p = cQ(i, o, t8);
    return w.splitRealAndImagArrays(p);
  }
}
function pQ(r) {
  return (r & r - 1) === 0;
}
function CI(r, t8, e, o, n) {
  if (e === 1)
    return { real: r, imag: t8 };
  let s = w.mergeRealAndImagArrays(r, t8), a = e / 2, i = w.complexWithEvenIndex(s), p = i.real, u = i.imag, c = [p.length], l = n.makeTensorInfo(c, "float32", p), m = n.makeTensorInfo(c, "float32", u), d = Kt({ inputs: { real: l, imag: m }, backend: n }), f = w.complexWithOddIndex(s), h = f.real, g = f.imag, x = [h.length], b = n.makeTensorInfo(x, "float32", h), C = n.makeTensorInfo(x, "float32", g), S = Kt({ inputs: { real: b, imag: C }, backend: n }), k = CI(p, u, a, o, n), _ = k.real, E = k.imag, R = [_.length], D = n.makeTensorInfo(R, "float32", _), P = n.makeTensorInfo(R, "float32", E), O = Kt({ inputs: { real: D, imag: P }, backend: n }), M = CI(h, g, a, o, n), L = M.real, B = M.imag, z = [L.length], U = n.makeTensorInfo(z, "float32", L), j = n.makeTensorInfo(z, "float32", B), q = Kt({ inputs: { real: U, imag: j }, backend: n }), Y = w.exponents(e, o), J = [Y.real.length], re = n.makeTensorInfo(J, "float32", Y.real), ne = n.makeTensorInfo(J, "float32", Y.imag), ee = Kt({ inputs: { real: re, imag: ne }, backend: n }), oe = dp({ inputs: { a: ee, b: q }, backend: n }), ie = Oa({ inputs: { a: O, b: oe }, backend: n }), le = Vl({ inputs: { a: O, b: oe }, backend: n }), be = Ro({ inputs: { input: ie }, backend: n }), _e = Ro({ inputs: { input: le }, backend: n }), ve = Ma({ inputs: { input: ie }, backend: n }), Fe = Ma({ inputs: { input: le }, backend: n }), Pe = yu({ inputs: [be, _e], backend: n, attrs: { axis: 0 } }), st = yu({ inputs: [ve, Fe], backend: n, attrs: { axis: 0 } }), lt = n.data.get(Pe.dataId).values, Ge = n.data.get(st.dataId).values;
  return n.disposeIntermediateTensorInfo(l), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(C), n.disposeIntermediateTensorInfo(S), n.disposeIntermediateTensorInfo(D), n.disposeIntermediateTensorInfo(P), n.disposeIntermediateTensorInfo(O), n.disposeIntermediateTensorInfo(U), n.disposeIntermediateTensorInfo(j), n.disposeIntermediateTensorInfo(q), n.disposeIntermediateTensorInfo(re), n.disposeIntermediateTensorInfo(ne), n.disposeIntermediateTensorInfo(ee), n.disposeIntermediateTensorInfo(oe), n.disposeIntermediateTensorInfo(ie), n.disposeIntermediateTensorInfo(le), n.disposeIntermediateTensorInfo(be), n.disposeIntermediateTensorInfo(ve), n.disposeIntermediateTensorInfo(_e), n.disposeIntermediateTensorInfo(Fe), n.disposeIntermediateTensorInfo(Pe), n.disposeIntermediateTensorInfo(st), { real: lt, imag: Ge };
}
function cQ(r, t8, e) {
  let o = new Float32Array(t8 * 2);
  for (let n = 0; n < t8; n++) {
    let s = 0, a = 0;
    for (let i = 0; i < t8; i++) {
      let p = w.exponent(n * i, t8, e), u = w.getComplexWithIndex(r, i);
      s += u.real * p.real - u.imag * p.imag, a += u.real * p.imag + u.imag * p.real;
    }
    e && (s /= t8, a /= t8), w.assignToTypedArray(o, s, a, n);
  }
  return o;
}
function lQ(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8, n = y.sizeFromShape(o.shape), s = o.shape[o.shape.length - 1], a = n / s, i = Ve({ inputs: { x: o }, backend: e, attrs: { shape: [a, s] } }), p = Vf(i, false, e), u = Ve({ inputs: { x: p }, backend: e, attrs: { shape: o.shape } });
  return e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(p), u;
}
var L$ = { kernelName: Wi, backendName: "cpu", kernelFunc: lQ };
function Hl(r) {
  let { backend: t8, attrs: e } = r, { shape: o, value: n, dtype: s } = e, a = s || y.inferDtype(n), i = y.getArrayFromDType(a, y.sizeFromShape(o));
  return mQ(i, n, a), t8.makeTensorInfo(o, a, i);
}
var B$ = { kernelName: sa, backendName: "cpu", kernelFunc: Hl };
function mQ(r, t8, e) {
  r.fill(t8);
}
var z$ = { kernelName: wn, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { image: o } = r, n = e, s = y.getTypedArrayFromDType(o.dtype, y.sizeFromShape(o.shape)), [a, i, p, u] = o.shape, c = n.data.get(o.dataId).values;
  for (let m = 0; m < a; m++) {
    let d = m * p * i * u;
    for (let f = 0; f < i; f++) {
      let h = f * (p * u);
      for (let g = 0; g < p; g++) {
        let x = g * u;
        for (let b = 0; b < u; b++) {
          let C = Math.round(p - g - 1), S = d + h + x + b, k = c[S];
          if (C >= 0 && C < p) {
            let _ = C * u, E = d + h + _ + b;
            k = c[E];
          }
          s[S] = k;
        }
      }
    }
  }
  return { dataId: n.write(s, o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
} };
function dQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = t8, { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = o, h = yI({ inputs: { x: n, filter: s }, backend: e, attrs: { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m } });
  if (a) {
    let g = h;
    if (c === "NCHW" && a.shape.length === 1 && a.shape[0] !== 1) {
      let x = Ve({ inputs: { x: a }, backend: e, attrs: { shape: [a.shape[0], 1, 1] } });
      h = Oa({ inputs: { a: h, b: x }, backend: e }), e.disposeIntermediateTensorInfo(x);
    } else
      h = Oa({ inputs: { a: h, b: a }, backend: e });
    e.disposeIntermediateTensorInfo(g);
  }
  if (d) {
    let g = h;
    if (c === "NCHW" && d === "prelu" && i.shape.length === 1 && i.shape[0] !== 1) {
      let x = Ve({ inputs: { x: i }, backend: e, attrs: { shape: [i.shape[0], 1, 1] } });
      h = Cp(e, h, d, x, f), e.disposeIntermediateTensorInfo(x);
    } else
      h = Cp(e, h, d, i, f);
    e.disposeIntermediateTensorInfo(g);
  }
  return h;
}
var V$ = { kernelName: vo, backendName: "cpu", kernelFunc: dQ };
function fQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = t8, { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = o, h = bI({ inputs: { x: n, filter: s }, backend: e, attrs: { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m } });
  if (a) {
    let g = h;
    h = Oa({ inputs: { a: h, b: a }, backend: e }), e.disposeIntermediateTensorInfo(g);
  }
  if (d) {
    let g = h;
    h = Cp(e, h, d, i, f), e.disposeIntermediateTensorInfo(g);
  }
  return h;
}
var W$ = { kernelName: ko, backendName: "cpu", kernelFunc: fQ };
function hQ(r) {
  let { inputs: t8, backend: e } = r, { params: o, indices: n } = t8, s = y.sizeFromShape(o.shape), a = n.shape, i = a[a.length - 1], [p, u, c, l] = w.prepareAndValidate(o, n);
  if (u === 0)
    return e.makeTensorInfo(p, o.dtype, []);
  let m = e.data.get(n.dataId).values, d = e.bufferSync(o), f = Tf(m, d, o.dtype, u, i, c, l, o.shape, s);
  return e.makeTensorInfo(p, o.dtype, f.values);
}
var U$ = { kernelName: kn, backendName: "cpu", kernelFunc: hQ };
function gQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, indices: s } = t8, { axis: a, batchDims: i } = o;
  Q([n, s], "gatherV2");
  let p = y.parseAxisParam(a, n.shape)[0], u = e.data.get(s.dataId).values, c = n.shape[p];
  for (let S = 0; S < u.length; ++S) {
    let k = u[S];
    y.assert(k <= c - 1 && k >= 0, () => `GatherV2: the index value ${k} is not in [0, ${c - 1}]`);
  }
  let l = i;
  i == null && (l = 0);
  let m = y.sizeFromShape(s.shape), d = w.segment_util.collectGatherOpShapeInfo(n, s, p, l), f = Ve({ inputs: { x: n }, backend: e, attrs: { shape: [d.batchSize, d.outerSize, d.dimSize, d.sliceSize] } }), h = Ve({ inputs: { x: s }, backend: e, attrs: { shape: [d.batchSize, m / d.batchSize] } }), g = [d.batchSize, d.outerSize, m / d.batchSize, d.sliceSize], x = e.bufferSync(h), b = e.bufferSync(f), C = _f(b, x, g);
  return e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(h), e.makeTensorInfo(d.outputShape, C.dtype, C.values);
}
var G$ = { kernelName: aa, backendName: "cpu", kernelFunc: gQ };
function xQ(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8, n = y.sizeFromShape(o.shape), s = o.shape[o.shape.length - 1], a = n / s, i = Ve({ inputs: { x: o }, backend: e, attrs: { shape: [a, s] } }), p = Vf(i, true, e), u = Ve({ inputs: { x: p }, backend: e, attrs: { shape: o.shape } });
  return e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(p), u;
}
var H$ = { kernelName: Ui, backendName: "cpu", kernelFunc: xQ };
var yQ = Ie(_n, (r) => Number.isFinite(r) ? 1 : 0, "bool");
var K$ = { kernelName: _n, backendName: "cpu", kernelFunc: yQ };
var bQ = Ie($n, (r) => Math.abs(r) === 1 / 0 ? 1 : 0, "bool");
var q$ = { kernelName: $n, backendName: "cpu", kernelFunc: bQ };
var CQ = Ie(En, (r) => Number.isNaN(r) ? 1 : 0, "bool");
var j$ = { kernelName: En, backendName: "cpu", kernelFunc: CQ };
function wQ(r) {
  let { backend: t8, attrs: e } = r, { start: o, stop: n, num: s } = e, a = $f(o, n, s);
  return t8.makeTensorInfo([a.length], "float32", a);
}
var X$ = { kernelName: Fn, backendName: "cpu", kernelFunc: wQ };
var SQ = Ie(On, (r) => Math.log1p(r));
var Y$ = { kernelName: On, backendName: "cpu", kernelFunc: SQ };
var IQ = ze((r, t8) => r && t8);
var vQ = Ye(Mn, IQ, null, "bool");
var Q$ = { kernelName: Mn, backendName: "cpu", kernelFunc: vQ };
var kQ = Ie(Ln, (r) => r ? 0 : 1, "bool");
var Z$ = { kernelName: Ln, backendName: "cpu", kernelFunc: kQ };
var NQ = ze((r, t8) => r || t8);
var TQ = Ye(Bn, NQ, null, "bool");
var J$ = { kernelName: Bn, backendName: "cpu", kernelFunc: TQ };
function _Q(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { depthRadius: s, bias: a, alpha: i, beta: p } = o;
  Q(n, "LRN");
  let u = n.shape[3], c = u - 1, l = e.data.get(n.dataId).values, m = y.sizeFromShape(n.shape), d = new Float32Array(m);
  function f(h) {
    let g = h % u, x = h - g + Math.max(0, g - s), b = h - g + Math.min(g + s, c), C = 0;
    for (; x <= b; x++) {
      let S = l[x];
      C += S * S;
    }
    return C;
  }
  for (let h = 0; h < m; h++) {
    let g = f(h), x = l[h] * Math.pow(a + i * g, -p);
    d[h] = x;
  }
  return e.makeTensorInfo(n.shape, n.dtype, d);
}
var eE = { kernelName: zn, backendName: "cpu", kernelFunc: _Q };
function $Q(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, y: s, dy: a } = t8, { depthRadius: i, bias: p, alpha: u, beta: c } = o;
  Q(a, "LRNGrad");
  let l = y.sizeFromShape(a.shape), m = a.shape[3], d = e.data.get(a.dataId).values, f = e.data.get(n.dataId).values, h = e.data.get(s.dataId).values, g = new Float32Array(l), x = l;
  for (let b = 0; b < x; b++) {
    let C = b % m, S = b - C + Math.max(0, C - i), k = b - C + Math.min(m, C + i + 1), _ = 0;
    for (let E = S; E < k; E++)
      _ += Math.pow(f[E], 2);
    _ = u * _ + p;
    for (let E = S; E < k; E++) {
      let R = -2 * u * c * f[E] * h[b] / _;
      b === E && (R += Math.pow(_, -c)), R *= d[b], g[E] += R;
    }
  }
  return e.makeTensorInfo(a.shape, n.dtype, g);
}
var tE = { kernelName: Qa, backendName: "cpu", kernelFunc: $Q };
function wI(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { reductionIndices: s, keepDims: a } = o, i = e, p = n.shape, u = p.length, c = y.parseAxisParam(s, p), l = c, m = w.getAxesPermutation(l, u), d = i.data.get(n.dataId).values;
  if (m != null) {
    let S = new Array(u);
    for (let k = 0; k < S.length; k++)
      S[k] = p[m[k]];
    d = vc(d, p, n.dtype, m, S), l = w.getInnerMostAxes(l.length, u), p = S;
  }
  Q(n, "max"), w.assertAxesAreInnerMostDims("max", l, u);
  let [f, h] = w.computeOutAndReduceShapes(p, l), g = y.sizeFromShape(h), x = Ef(d, g, f, n.dtype), b = i.write(x, f, n.dtype), C = f;
  return a && (C = w.expandShapeToKeepDim(f, c)), { dataId: b, shape: C, dtype: n.dtype };
}
var rE = { kernelName: Vn, backendName: "cpu", kernelFunc: wI };
function EQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8;
  Q(n, "maxPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1;
  y.assert(w.eitherStridesOrDilationsAreOne(a, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = w.computePool2DInfo(n.shape, s, a, u, i, p), l;
  if (c.filterWidth === 1 && c.filterHeight === 1 && y.arraysEqual(c.inShape, c.outShape))
    l = mr({ inputs: { x: n }, backend: e });
  else {
    let m = e.data.get(n.dataId).values, d = y.computeStrides(n.shape), f = _c(m, n.shape, n.dtype, d, c, "max");
    l = e.makeTensorInfo(c.outShape, n.dtype, f.values);
  }
  return l;
}
var oE = { kernelName: Un, backendName: "cpu", kernelFunc: EQ };
function RQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dimRoundingMode: p, dataFormat: u } = o;
  Q(n, "maxPool3d");
  let c = w.computePool3DInfo(n.shape, s, a, 1, i, p, u), l = e.data.get(n.dataId).values, m = zf(l, n.shape, n.dtype, y.computeStrides(n.shape), c, "max");
  return e.makeTensorInfo(m.shape, "float32", m.values);
}
var nE = { kernelName: ia, backendName: "cpu", kernelFunc: RQ };
function DQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = o;
  Q([n, s], "maxPool3DGrad");
  let c = w.computePool3DInfo(s.shape, a, i, 1, p, u), l = e.bufferSync(s), m = J_(l, c), d = c.strideDepth, f = c.strideHeight, h = c.strideWidth, g = c.dilationDepth, x = c.dilationHeight, b = c.dilationWidth, C = c.effectiveFilterDepth, S = c.effectiveFilterHeight, k = c.effectiveFilterWidth, _ = C - 1 - c.padInfo.front, E = k - 1 - c.padInfo.left, R = S - 1 - c.padInfo.top, D = me(s.shape, "float32"), P = e.bufferSync(n);
  for (let O = 0; O < c.batchSize; ++O)
    for (let M = 0; M < c.inChannels; ++M)
      for (let L = 0; L < c.inDepth; ++L)
        for (let B = 0; B < c.inHeight; ++B)
          for (let z = 0; z < c.inWidth; ++z) {
            let U = L - _, j = B - R, q = z - E, Y = 0;
            for (let J = 0; J < C; J += g) {
              let re = (U + J) / d;
              if (!(re < 0 || re >= c.outDepth || Math.floor(re) !== re))
                for (let ne = 0; ne < S; ne += x) {
                  let ee = (j + ne) / f;
                  if (!(ee < 0 || ee >= c.outHeight || Math.floor(ee) !== ee))
                    for (let oe = 0; oe < k; oe += b) {
                      let ie = (q + oe) / h;
                      if (ie < 0 || ie >= c.outWidth || Math.floor(ie) !== ie)
                        continue;
                      let le = C * S * k - 1 - m.get(O, re, ee, ie, M), be = J * S * k + ne * k + oe, _e = le === be ? 1 : 0;
                      if (_e === 0)
                        continue;
                      let ve = P.get(O, re, ee, ie, M);
                      Y += ve * _e;
                    }
                }
            }
            D.set(Y, O, L, B, z, M);
          }
  return e.makeTensorInfo(D.shape, D.dtype, D.values);
}
var sE = { kernelName: Ki, backendName: "cpu", kernelFunc: DQ };
function AQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s, output: a } = t8, i = s;
  Q([s, a], "maxPoolGrad");
  let { filterSize: p, strides: u, pad: c, dimRoundingMode: l } = o, m = w.computePool2DInfo(i.shape, p, u, 1, c, l), d = e.data.get(i.dataId).values, f = me(m.outShape, i.dtype, Bf(d, i.shape, i.dtype, m).values), h = m.strideHeight, g = m.strideWidth, x = m.dilationHeight, b = m.dilationWidth, C = m.effectiveFilterHeight, S = m.effectiveFilterWidth, k = S - 1 - m.padInfo.left, _ = C - 1 - m.padInfo.top, E = me(i.shape, "float32"), R = e.data.get(n.dataId).values, D = me(n.shape, "float32", R);
  for (let P = 0; P < m.batchSize; ++P)
    for (let O = 0; O < m.inChannels; ++O)
      for (let M = 0; M < m.inHeight; ++M)
        for (let L = 0; L < m.inWidth; ++L) {
          let B = M - _, z = L - k, U = 0;
          for (let j = 0; j < C; j += x) {
            let q = (B + j) / h;
            if (!(q < 0 || q >= m.outHeight || Math.floor(q) !== q))
              for (let Y = 0; Y < S; Y += b) {
                let J = (z + Y) / g;
                if (J < 0 || J >= m.outWidth || Math.floor(J) !== J)
                  continue;
                let re = C * S - 1 - f.get(P, q, J, O), ne = j * S + Y, ee = re === ne ? 1 : 0;
                if (ee === 0)
                  continue;
                let oe = D.get(P, q, J, O);
                U += oe * ee;
              }
          }
          E.set(U, P, M, L, O);
        }
  return e.makeTensorInfo(E.shape, E.dtype, E.values);
}
var aE = { kernelName: Hi, backendName: "cpu", kernelFunc: AQ };
function iE(r, t8, e, o, n) {
  let s = y.computeStrides(t8), a = _c(r, t8, e, s, n, "max"), i = Bf(r, t8, e, n, true, o);
  return [a.values, i.values];
}
var uE = { kernelName: ua, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { x: o } = r, { filterSize: n, strides: s, pad: a, includeBatchInIndex: i } = t8, p = e;
  Q(o, "MaxPoolWithArgmax");
  let u = p.data.get(o.dataId).values, c = w.computePool2DInfo(o.shape, n, s, [1, 1], a), [l, m] = iE(u, o.shape, o.dtype, i, c), d = p.write(l, c.outShape, o.dtype), f = p.write(m, c.outShape, o.dtype);
  return [{ dataId: d, shape: c.outShape, dtype: o.dtype }, { dataId: f, shape: c.outShape, dtype: "int32" }];
} };
function FQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o, i = y.parseAxisParam(s, n.shape), u = w.computeOutAndReduceShapes(n.shape, i)[1], c = y.sizeFromShape(u), l = [], m = e.makeTensorInfo([], "float32", new Float32Array([c]));
  l.push(m);
  let d = Do({ inputs: { x: n }, backend: e, attrs: { dtype: "float32" } });
  l.push(d);
  let f = Ul({ inputs: { a: d, b: m }, backend: e });
  l.push(f);
  let h = gi({ inputs: { x: f }, backend: e, attrs: { axis: s, keepDims: a } });
  return l.forEach((g) => e.disposeIntermediateTensorInfo(g)), h;
}
var pE = { kernelName: Gn, backendName: "cpu", kernelFunc: FQ };
function PQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  Q(n, "min");
  let i = y.parseAxisParam(s, n.shape), p = i, u = w.getAxesPermutation(p, n.shape.length), c = n;
  u != null && (c = It({ inputs: { x: n }, backend: e, attrs: { perm: u } }), p = w.getInnerMostAxes(p.length, n.shape.length)), w.assertAxesAreInnerMostDims("min", p, c.shape.length);
  let [l, m] = w.computeOutAndReduceShapes(c.shape, p), d = y.sizeFromShape(m), f = y.makeZerosTypedArray(y.sizeFromShape(l), c.dtype), h = e.data.get(c.dataId).values;
  for (let x = 0; x < f.length; ++x) {
    let b = x * d, C = h[b];
    for (let S = 0; S < d; ++S) {
      let k = h[b + S];
      (Number.isNaN(k) || k < C) && (C = k);
    }
    f[x] = C;
  }
  u != null && e.disposeIntermediateTensorInfo(c);
  let g = e.makeTensorInfo(l, c.dtype, f);
  if (a) {
    let x = w.expandShapeToKeepDim(l, i), b = Ve({ inputs: { x: g }, backend: e, attrs: { shape: x } });
    return e.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
var cE = { kernelName: Hn, backendName: "cpu", kernelFunc: PQ };
function OQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { paddings: s, mode: a } = o;
  Q(n, "mirrorPad");
  let i = s.map((C, S) => C[0] + n.shape[S] + C[1]), p = s.map((C) => C[0]), u = s.map((C, S) => C[0] + n.shape[S]), c = a === "reflect" ? 0 : 1, l = e.data.get(n.dataId).values, m = n.shape.length, d = y.computeStrides(n.shape), f = y.sizeFromShape(i), h = i.length, g = y.computeStrides(i), x = y.getTypedArrayFromDType(n.dtype, f);
  for (let C = 0; C < f; C++) {
    let S = y.indexToLoc(C, h, g);
    for (let _ = 0; _ < h; _++)
      S[_] < p[_] ? S[_] = p[_] * 2 - S[_] - c : S[_] >= u[_] && (S[_] = (u[_] - 1) * 2 - S[_] + c);
    S = S.map((_, E) => _ - p[E]);
    let k = y.locToIndex(S, m, d);
    x[C] = l[k];
  }
  return { dataId: e.write(x, i, n.dtype), shape: i, dtype: n.dtype };
}
var lE = { kernelName: qn, backendName: "cpu", kernelFunc: OQ };
var MQ = ze((r, t8) => {
  let e = r % t8;
  return r < 0 && t8 < 0 || r >= 0 && t8 >= 0 ? e : (e + t8) % t8;
});
var LQ = Ye(jn, MQ);
var mE = { kernelName: jn, backendName: "cpu", kernelFunc: LQ };
var fE = Kp(qw());
function SI(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { logits: n } = t8, { dim: s } = o, a = n.shape.length, i = s;
  if (i === -1 && (i = a - 1), i !== a - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);
  let p = y.parseAxisParam([i], n.shape), u = wI({ inputs: { x: n }, backend: e, attrs: { reductionIndices: p, keepDims: false } }), c = w.expandShapeToKeepDim(u.shape, p), l = Ve({ inputs: { x: u }, backend: e, attrs: { shape: c } }), m = Vl({ inputs: { a: n, b: l }, backend: e }), d = KS({ inputs: { x: m }, backend: e }), f = gi({ inputs: { x: d }, backend: e, attrs: { axis: p, keepDims: false } }), h = Ve({ inputs: { x: f }, backend: e, attrs: { shape: c } }), g = Ul({ inputs: { a: d, b: h }, backend: e });
  return e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(l), e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(h), g;
}
var dE = { kernelName: vs, backendName: "cpu", kernelFunc: SI };
function BQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { logits: n } = t8, { numSamples: s, seed: a, normalized: i } = o;
  Q(n, "multinomial");
  let p = i ? n : SI({ inputs: { logits: n }, backend: e, attrs: { dim: -1 } }), u = p.shape[0], c = p.shape[1], l = e.data.get(p.dataId).values, m = [u, s], d = y.makeZerosTypedArray(y.sizeFromShape(m), "int32");
  for (let f = 0; f < u; ++f) {
    let h = f * c, g = new Float32Array(c - 1);
    g[0] = l[h];
    for (let C = 1; C < g.length; ++C)
      g[C] = g[C - 1] + l[h + C];
    let x = fE.alea(a.toString()), b = f * s;
    for (let C = 0; C < s; ++C) {
      let S = x();
      d[b + C] = g.length;
      for (let k = 0; k < g.length; k++)
        if (S < g[k]) {
          d[b + C] = k;
          break;
        }
    }
  }
  return i || e.disposeIntermediateTensorInfo(p), e.makeTensorInfo(m, "int32", d);
}
var hE = { kernelName: Xn, backendName: "cpu", kernelFunc: BQ };
var zQ = Wt.nonMaxSuppressionV3Impl;
function VQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { boxes: n, scores: s } = t8, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p } = o;
  Q(n, "NonMaxSuppression");
  let u = e.data.get(n.dataId).values, c = e.data.get(s.dataId).values, { selectedIndices: l } = zQ(u, c, a, i, p);
  return e.makeTensorInfo([l.length], "int32", new Int32Array(l));
}
var gE = { kernelName: Zn, backendName: "cpu", kernelFunc: VQ };
var WQ = Wt.nonMaxSuppressionV4Impl;
function UQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { boxes: n, scores: s } = t8, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, padToMaxOutputSize: u } = o;
  Q(n, "NonMaxSuppressionPadded");
  let c = e.data.get(n.dataId).values, l = e.data.get(s.dataId).values, { selectedIndices: m, validOutputs: d } = WQ(c, l, a, i, p, u);
  return [e.makeTensorInfo([m.length], "int32", new Int32Array(m)), e.makeTensorInfo([], "int32", new Int32Array([d]))];
}
var xE = { kernelName: Za, backendName: "cpu", kernelFunc: UQ };
var GQ = Wt.nonMaxSuppressionV5Impl;
function HQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { boxes: n, scores: s } = t8, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, softNmsSigma: u } = o;
  Q(n, "NonMaxSuppressionWithScore");
  let c = e.data.get(n.dataId).values, l = e.data.get(s.dataId).values, m = a, d = i, f = p, h = u, { selectedIndices: g, selectedScores: x } = GQ(c, l, m, d, f, h);
  return [e.makeTensorInfo([g.length], "int32", new Int32Array(g)), e.makeTensorInfo([x.length], "float32", new Float32Array(x))];
}
var yE = { kernelName: Jn, backendName: "cpu", kernelFunc: HQ };
function KQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { indices: n } = t8, { dtype: s, depth: a, onValue: i, offValue: p } = o;
  Q(n, "oneHot");
  let u = y.sizeFromShape(n.shape), c = new Float32Array(u * a);
  c.fill(p);
  let l = e.data.get(n.dataId).values;
  for (let m = 0; m < u; ++m)
    l[m] >= 0 && l[m] < a && (c[m * a + l[m]] = i);
  return e.makeTensorInfo([...n.shape, a], s, c);
}
var bE = { kernelName: es, backendName: "cpu", kernelFunc: KQ };
function Kl(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (o.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (o.dtype === "complex64") {
    let n = Ro({ inputs: { input: o }, backend: e }), s = Kl({ inputs: { x: n }, backend: e }), a = Ma({ inputs: { input: o }, backend: e }), i = Kl({ inputs: { x: a }, backend: e }), p = Kt({ inputs: { real: s, imag: i }, backend: e });
    return e.disposeIntermediateTensorInfo(n), e.disposeIntermediateTensorInfo(s), e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(i), p;
  } else
    return Hl({ backend: e, attrs: { shape: o.shape, value: 0, dtype: o.dtype } });
}
var CE = { kernelName: Sa, backendName: "cpu", kernelFunc: Kl };
function wE(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (o.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (o.dtype === "complex64") {
    let n = Ro({ inputs: { input: o }, backend: e }), s = wE({ inputs: { x: n }, backend: e }), a = Ma({ inputs: { input: o }, backend: e }), i = Kl({ inputs: { x: a }, backend: e }), p = Kt({ inputs: { real: s, imag: i }, backend: e });
    return e.disposeIntermediateTensorInfo(n), e.disposeIntermediateTensorInfo(s), e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(i), p;
  } else
    return Hl({ backend: e, attrs: { shape: o.shape, value: 1, dtype: o.dtype } });
}
var SE = { kernelName: ca, backendName: "cpu", kernelFunc: wE };
function II(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { axis: n } = o;
  if (t8.length === 1)
    return $c({ inputs: { input: t8[0] }, backend: e, attrs: { dim: n } });
  let s = t8[0].shape, a = t8[0].dtype;
  t8.forEach((c) => {
    y.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), y.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], p = t8.map((c) => {
    let l = $c({ inputs: { input: c }, backend: e, attrs: { dim: n } });
    return i.push(l), l;
  }), u = yu({ inputs: p, backend: e, attrs: { axis: n } });
  return i.forEach((c) => e.disposeIntermediateTensorInfo(c)), u;
}
var IE = { kernelName: la, backendName: "cpu", kernelFunc: II };
function qQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { paddings: s, constantValue: a } = o;
  Q(n, "pad");
  let i = s.map((b, C) => b[0] + n.shape[C] + b[1]), p = s.map((b) => b[0]), u = e.data.get(n.dataId).values, c = y.sizeFromShape(n.shape), l = n.shape.length, m = y.computeStrides(n.shape), d = y.sizeFromShape(i), f = i.length, h = y.computeStrides(i), g = y.getTypedArrayFromDType(n.dtype, d);
  a !== 0 && g.fill(a);
  for (let b = 0; b < c; b++) {
    let S = y.indexToLoc(b, l, m).map((_, E) => _ + p[E]), k = y.locToIndex(S, f, h);
    g[k] = u[b];
  }
  return { dataId: e.write(g, i, n.dtype), shape: i, dtype: n.dtype };
}
var Wf = { kernelName: ts, backendName: "cpu", kernelFunc: qQ };
var jQ = ze((r, t8) => Math.pow(r, t8));
var XQ = Ye(rs, jQ);
var vE = { kernelName: rs, backendName: "cpu", kernelFunc: XQ };
function YQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { paramsNestedSplits: n, paramsDenseValues: s, indices: a } = t8, { outputRaggedRank: i } = o, p = n.map((x) => e.data.get(x.dataId).values), u = n.map((x) => x.shape), c = e.data.get(s.dataId).values, l = e.data.get(a.dataId).values, [m, d, f] = Rf(p, u, c, s.shape, s.dtype, l, a.shape, i), h = m.map((x) => e.makeTensorInfo([x.length], "int32", x)), g = e.makeTensorInfo(f, s.dtype, d);
  return h.concat([g]);
}
var kE = { kernelName: Qp, backendName: "cpu", kernelFunc: YQ };
function QQ(r) {
  let { inputs: t8, backend: e } = r, { starts: o, limits: n, deltas: s } = t8, a = e.data.get(o.dataId).values, i = e.data.get(n.dataId).values, p = e.data.get(s.dataId).values, [u, c] = Df(a, o.shape, o.dtype, i, n.shape, p, s.shape), l = e.makeTensorInfo([u.length], "int32", u), m = e.makeTensorInfo([c.length], o.dtype, c);
  return [l, m];
}
var NE = { kernelName: Zp, backendName: "cpu", kernelFunc: QQ };
function ZQ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { shape: n, values: s, defaultValue: a, rowPartitionTensors: i } = t8, { rowPartitionTypes: p } = o, u = e.data.get(n.dataId).values, c = e.data.get(s.dataId).values, l = e.data.get(a.dataId).values, m = i.map((g) => e.data.get(g.dataId).values), d = i.map((g) => g.shape), [f, h] = Af(u, n.shape, c, s.shape, s.dtype, l, a.shape, m, d, p);
  return e.makeTensorInfo(f, s.dtype, h);
}
var TE = { kernelName: Jp, backendName: "cpu", kernelFunc: ZQ };
function JQ(r) {
  let { backend: t8, attrs: e } = r, { start: o, stop: n, dtype: s, step: a } = e, i = fp(o, n, a, s);
  return t8.makeTensorInfo([i.length], s, i);
}
var _E = { kernelName: ma, backendName: "cpu", kernelFunc: JQ };
var e7 = Ie(ss, (r) => 1 / r);
var $E = { kernelName: ss, backendName: "cpu", kernelFunc: e7 };
function t7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n } = t8, { alignCorners: s, halfPixelCenters: a, size: i } = o;
  Q(n, "resizeBilinear");
  let p = y.computeStrides(n.shape), [u, c] = i, [l, m, d, f] = n.shape, h = e.data.get(n.dataId).values, g = new Float32Array(y.sizeFromShape([l, u, c, f])), x = [s && u > 1 ? m - 1 : m, s && c > 1 ? d - 1 : d], b = [s && u > 1 ? u - 1 : u, s && c > 1 ? c - 1 : c], C = 0, S = x[0] / b[0], k = x[1] / b[1];
  for (let _ = 0; _ < l; _++)
    for (let E = 0; E < u; E++) {
      let R;
      a ? R = S * (E + 0.5) - 0.5 : R = S * E;
      let D = Math.max(0, Math.floor(R)), P = R - D, O = Math.min(m - 1, Math.ceil(R)), M = _ * p[0] + D * p[1], L = _ * p[0] + O * p[1];
      for (let B = 0; B < c; B++) {
        let z;
        a ? z = k * (B + 0.5) - 0.5 : z = k * B;
        let U = Math.max(0, Math.floor(z)), j = z - U, q = Math.min(d - 1, Math.ceil(z)), Y = M + U * p[2], J = L + U * p[2], re = M + q * p[2], ne = L + q * p[2];
        for (let ee = 0; ee < f; ee++) {
          let oe = h[Y + ee], ie = h[J + ee], le = h[re + ee], be = h[ne + ee], _e = oe + (le - oe) * j, ve = ie + (be - ie) * j, Fe = _e + (ve - _e) * P;
          g[C++] = Fe;
        }
      }
    }
  return e.makeTensorInfo([l, u, c, f], "float32", g);
}
var EE = { kernelName: us, backendName: "cpu", kernelFunc: t7 };
function r7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n, dy: s } = t8, { alignCorners: a } = o;
  Q([s, n], "resizeBilinearGrad");
  let i = y.computeStrides(n.shape), [p, u, c, l] = n.shape, [, m, d] = s.shape, f = new Float32Array(p * u * c * l), h = [a && m > 1 ? u - 1 : u, a && d > 1 ? c - 1 : c], g = [a && m > 1 ? m - 1 : m, a && d > 1 ? d - 1 : d], x = h[0] / g[0], b = h[1] / g[1], C = e.data.get(s.dataId).values, S = 0;
  for (let k = 0; k < p; k++) {
    let _ = k * i[0];
    for (let E = 0; E < m; E++) {
      let R = E * x, D = Math.floor(R), P = Math.min(Math.ceil(R), u - 1), O = _ + D * i[1], M = _ + P * i[1], L = R - D, B = 1 - L;
      for (let z = 0; z < d; z++) {
        let U = z * b, j = Math.floor(U), q = Math.min(Math.ceil(U), c - 1), Y = U - j, J = 1 - Y, re = O + j * i[2], ne = O + q * i[2], ee = M + j * i[2], oe = M + q * i[2], ie = B * J, le = B * Y, be = L * J, _e = L * Y;
        for (let ve = 0; ve < l; ve++) {
          let Fe = C[S++];
          f[re + ve] += Fe * ie, f[ne + ve] += Fe * le, f[ee + ve] += Fe * be, f[oe + ve] += Fe * _e;
        }
      }
    }
  }
  return e.makeTensorInfo([p, c, u, l], "float32", f);
}
var RE = { kernelName: ei, backendName: "cpu", kernelFunc: r7 };
function o7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n } = t8, { alignCorners: s, halfPixelCenters: a, size: i } = o;
  Q(n, "resizeNearestNeighbor");
  let p = y.computeStrides(n.shape), [u, c] = i, [l, m, d, f] = n.shape, h = e.data.get(n.dataId).values, g = new Float32Array(l * u * c * f), x = [s && u > 1 ? m - 1 : m, s && c > 1 ? d - 1 : d], b = [s && u > 1 ? u - 1 : u, s && c > 1 ? c - 1 : c], C = x[0] / b[0], S = x[1] / b[1], k = 0;
  for (let _ = 0; _ < l; _++) {
    let E = _ * p[0];
    for (let R = 0; R < u; R++) {
      let D = a ? C * (R + 0.5) : C * R, P = Math.min(m - 1, s ? Math.round(D) : Math.floor(D));
      a && (P = Math.max(0, P));
      let O = E + P * p[1];
      for (let M = 0; M < c; M++) {
        let L = a ? S * (M + 0.5) : S * M, B = Math.min(d - 1, s ? Math.round(L) : Math.floor(L));
        a && (B = Math.max(0, B));
        let z = O + B * p[2];
        for (let U = 0; U < f; U++) {
          let j = h[z + U];
          g[k++] = j;
        }
      }
    }
  }
  return e.makeTensorInfo([l, u, c, f], n.dtype, g);
}
var DE = { kernelName: is, backendName: "cpu", kernelFunc: o7 };
function n7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n, dy: s } = t8, { alignCorners: a } = o;
  Q([s, n], "resizeNearestNeighborGrad");
  let i = y.computeStrides(n.shape), p = y.computeStrides(s.shape), [u, c, l, m] = n.shape, [, d, f] = s.shape, h = new Float32Array(u * c * l * m), g = e.data.get(s.dataId).values, x = [a && d > 1 ? c - 1 : c, a && f > 1 ? l - 1 : l], b = [a && d > 1 ? d - 1 : d, a && f > 1 ? f - 1 : f], C = x[0] / b[0], S = x[1] / b[1], k = 1 / C, _ = 1 / S, E = Math.ceil(k) * 2 + 2, R = Math.ceil(_) * 2 + 2;
  for (let D = 0; D < u; D++) {
    let P = D * i[0];
    for (let O = 0; O < c; O++) {
      let M = P + O * i[1], L = Math.floor(O * k), B = Math.floor(L - E / 2);
      for (let z = 0; z < l; z++) {
        let U = M + z * i[2], j = Math.floor(z * _), q = Math.floor(j - R / 2);
        for (let Y = 0; Y < m; Y++) {
          let J = 0;
          for (let re = 0; re < E; re++) {
            let ne = re + B;
            if (ne < 0 || ne >= d)
              continue;
            let ee = P + ne * p[1], oe = ne * C, ie = Math.min(c - 1, a ? Math.round(oe) : Math.floor(oe));
            if (O === ie)
              for (let le = 0; le < R; le++) {
                let be = le + q;
                if (be < 0 || be >= f)
                  continue;
                let _e = ee + be * p[2], ve = be * S, Fe = Math.min(l - 1, a ? Math.round(ve) : Math.floor(ve));
                z === Fe && (J += g[_e + Y]);
              }
          }
          h[U + Y] = J;
        }
      }
    }
  }
  return e.makeTensorInfo(n.shape, n.dtype, h);
}
var AE = { kernelName: Ja, backendName: "cpu", kernelFunc: n7 };
function s7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { dims: s } = o;
  Q(n, "reverse");
  let a = n.shape.length, i = y.parseAxisParam(s, n.shape);
  if (a === 0)
    return mr({ inputs: { x: n }, backend: e });
  let p = new tt(n.shape, n.dtype), u = e.bufferSync(n);
  for (let c = 0; c < p.size; c++) {
    let l = p.indexToLoc(c), m = l.slice();
    i.forEach((d) => m[d] = n.shape[d] - 1 - m[d]), p.set(u.get(...m), ...l);
  }
  return e.makeTensorInfo(p.shape, p.dtype, p.values);
}
var FE = { kernelName: cs, backendName: "cpu", kernelFunc: s7 };
var PE = { kernelName: As, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { image: o } = r, { radians: n, fillValue: s, center: a } = t8, i = e, p = y.getTypedArrayFromDType(o.dtype, y.sizeFromShape(o.shape)), [u, c, l, m] = o.shape, [d, f] = w.getImageCenter(a, c, l), h = 255, g = Math.sin(n), x = Math.cos(n), b = i.data.get(o.dataId).values;
  for (let S = 0; S < u; S++) {
    let k = S * l * c * m;
    for (let _ = 0; _ < c; _++) {
      let E = _ * (l * m);
      for (let R = 0; R < l; R++) {
        let D = R * m;
        for (let P = 0; P < m; P++) {
          let O = [u, _, R, P], M = O[2], L = O[1], B = (M - d) * x - (L - f) * g, z = (M - d) * g + (L - f) * x;
          B = Math.round(B + d), z = Math.round(z + f);
          let U = s;
          if (typeof s != "number" && (P === 3 ? U = h : U = s[P]), B >= 0 && B < l && z >= 0 && z < c) {
            let q = z * (l * m), Y = B * m, J = k + q + Y + P;
            U = b[J];
          }
          let j = k + E + D + P;
          p[j] = U;
        }
      }
    }
  }
  return { dataId: i.write(p, o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
} };
var a7 = Ie(ls, (r) => {
  let t8 = Math.floor(r);
  return r - t8 < 0.5 ? Math.floor(r) : r - t8 > 0.5 ? Math.ceil(r) : t8 % 2 === 0 ? t8 : t8 + 1;
});
var OE = { kernelName: ls, backendName: "cpu", kernelFunc: a7 };
function i7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { indices: n, updates: s } = t8, { shape: a } = o, { sliceRank: i, numUpdates: p, sliceSize: u, strides: c, outputSize: l } = w.calculateShapes(s, n, a), m = true, d = e.bufferSync(n), f = e.bufferSync(s), h = zs(d, f, a, l, u, p, i, c, 0, m);
  return e.makeTensorInfo(a, h.dtype, h.values);
}
var ME = { kernelName: ds, backendName: "cpu", kernelFunc: i7 };
function u7(r, t8) {
  let e = 0, o = r.length, n = 0;
  for (; e < o; )
    n = Math.floor((e + o) / 2), r[n] < t8 ? e = n + 1 : o = n;
  return o;
}
function p7(r, t8) {
  let e = 0, o = r.length, n = 0;
  for (; e < o; )
    n = Math.floor((e + o) / 2), r[n] <= t8 ? e = n + 1 : o = n;
  return o;
}
function LE(r, t8, e, o, n, s) {
  let a = y.getArrayFromDType("int32", e * n);
  for (let i = 0; i < e; ++i) {
    let p = r.slice(i * o, (i + 1) * o), u = i * n;
    for (let c = 0; c < n; ++c)
      a[u + c] = s === "left" ? u7(p, t8[c + u]) : p7(p, t8[c + u]);
  }
  return a;
}
function c7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { sortedSequence: n, values: s } = t8, { side: a } = o, i = e.data.get(n.dataId).values, p = e.data.get(s.dataId).values, u = LE(i, p, n.shape[0], n.shape[1], s.shape[1], a);
  return e.makeTensorInfo(s.shape, "int32", u);
}
var BE = { kernelName: hs, backendName: "cpu", kernelFunc: c7 };
function l7(r) {
  let { inputs: t8, backend: e } = r, { condition: o, t: n, e: s } = t8;
  Q([o, n, s], "select");
  let a = o.shape.length, i = e.data.get(o.dataId).values, p = e.data.get(n.dataId).values, u = e.data.get(s.dataId).values, c = dt(n.dtype, s.dtype), l = y.makeZerosTypedArray(y.sizeFromShape(n.shape), c), m = 0, d = a === 0 || a > 1 || n.shape.length === 1 ? 1 : y.sizeFromShape(n.shape.slice(1));
  for (let f = 0; f < i.length; f++)
    for (let h = 0; h < d; h++)
      i[f] === 1 ? l[m++] = p[f] : l[m++] = u[f];
  return e.makeTensorInfo(n.shape, c, l);
}
var zE = { kernelName: fa, backendName: "cpu", kernelFunc: l7 };
var m7 = w.SELU_SCALEALPHA;
var d7 = w.SELU_SCALE;
var f7 = Ie(gs, (r) => r >= 0 ? d7 * r : m7 * (Math.exp(r) - 1));
var VE = { kernelName: gs, backendName: "cpu", kernelFunc: f7 };
var h7 = Ie(bs, (r) => r < 0 ? -1 : r > 0 ? 1 : 0);
var WE = { kernelName: bs, backendName: "cpu", kernelFunc: h7 };
var g7 = Ie(xs, (r) => Math.sin(r));
var UE = { kernelName: xs, backendName: "cpu", kernelFunc: g7 };
var x7 = Ie(ys, (r) => Math.sinh(r));
var GE = { kernelName: ys, backendName: "cpu", kernelFunc: x7 };
var y7 = 11920928955078125e-23;
var HE = Math.log(y7) + 2;
var b7 = Ie(ws, (r) => {
  let t8 = r > -HE, e = r < HE, o = Math.exp(r), n;
  return e ? n = o : t8 ? n = r : n = Math.log(1 + o), n;
});
var KE = { kernelName: ws, backendName: "cpu", kernelFunc: b7 };
function C7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockShape: s, paddings: a } = o;
  Q([n], "spaceToBatchND");
  let i = y.sizeFromShape(s), p = [[0, 0]];
  p.push(...a);
  for (let _ = 1 + s.length; _ < n.shape.length; ++_)
    p.push([0, 0]);
  let u = Wf.kernelFunc({ inputs: { x: n }, backend: e, attrs: { paddings: p, constantValue: 0 } }), c = w.getReshaped(u.shape, s, i, false), l = w.getPermuted(c.length, s.length, false), m = w.getReshapedPermuted(u.shape, s, i, false), h = Ve({ inputs: { x: u }, backend: e, attrs: { shape: c } }), b = It({ inputs: { x: h }, backend: e, attrs: { perm: l } }), k = Ve({ inputs: { x: b }, backend: e, attrs: { shape: m } });
  return e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(b), k;
}
var qE = { kernelName: ga, backendName: "cpu", kernelFunc: C7 };
function w7(r) {
  let { inputs: t8, backend: e } = r, { indices: o, values: n, denseShape: s, defaultValue: a } = t8;
  if (s.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);
  if (o.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${n.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);
  let i = e.data.get(o.dataId).values, p = e.data.get(n.dataId).values, u = e.data.get(s.dataId).values, c = e.data.get(a.dataId).values[0], [l, m, d, f, h] = Ff(i, o.shape, o.dtype, p, n.dtype, u, c);
  return [e.makeTensorInfo(m, o.dtype, l), e.makeTensorInfo([m[0]], n.dtype, d), e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))), e.makeTensorInfo([h.length], o.dtype, new Int32Array(h))];
}
var jE = { kernelName: ji, backendName: "cpu", kernelFunc: w7 };
function S7(r) {
  let { inputs: t8, backend: e } = r, { inputIndices: o, inputShape: n, newShape: s } = t8;
  if (o.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let a = Array.from(e.data.get(n.dataId).values), i = e.data.get(o.dataId).values, p = Array.from(e.data.get(s.dataId).values), [u, c, l] = Pf(i, o.shape, o.dtype, a, p);
  return [e.makeTensorInfo(c, o.dtype, u), e.makeTensorInfo([l.length], s.dtype, new Int32Array(l))];
}
var XE = { kernelName: ti, backendName: "cpu", kernelFunc: S7 };
function I7(r) {
  let { inputs: t8, backend: e } = r, { data: o, indices: n, segmentIds: s } = t8;
  if (o.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);
  if (n.shape[0] !== s.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  let a = e.data.get(o.dataId).values, i = e.data.get(n.dataId).values, p = e.data.get(s.dataId).values, [u, c] = Nc(a, o.shape, o.dtype, i, p, true);
  return e.makeTensorInfo(c, o.dtype, u);
}
var YE = { kernelName: ya, backendName: "cpu", kernelFunc: I7 };
function v7(r) {
  let { inputs: t8, backend: e } = r, { data: o, indices: n, segmentIds: s } = t8;
  if (o.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);
  if (n.shape[0] !== s.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  let a = e.data.get(o.dataId).values, i = e.data.get(n.dataId).values, p = e.data.get(s.dataId).values, [u, c] = Nc(a, o.shape, o.dtype, i, p);
  return e.makeTensorInfo(c, o.dtype, u);
}
var QE = { kernelName: ba, backendName: "cpu", kernelFunc: v7 };
function k7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { sparseIndices: n, sparseValues: s, defaultValue: a } = t8, { outputShape: i } = o, { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = w.calculateShapes(s, n, i), d = false, f = e.bufferSync(n), h;
  switch (s.dtype) {
    case "bool": {
      let g = e.bufferSync(s), x = !!e.data.get(a.dataId).values[0];
      h = zs(f, g, i, m, c, u, p, l, x, d);
      break;
    }
    case "float32": {
      let g = e.bufferSync(s), x = e.data.get(a.dataId).values[0];
      h = zs(f, g, i, m, c, u, p, l, x, d);
      break;
    }
    case "int32": {
      let g = e.bufferSync(s), x = e.data.get(a.dataId).values[0];
      h = zs(f, g, i, m, c, u, p, l, x, d);
      break;
    }
    case "string": {
      let g = e.bufferSync(s), x = y.decodeString(e.data.get(a.dataId).values[0]);
      h = zs(f, g, i, m, c, u, p, l, x, d);
      break;
    }
    default:
      throw new Error(`Unsupported type ${s.dtype}`);
  }
  return e.makeTensorInfo(i, h.dtype, h.values);
}
var ZE = { kernelName: ks, backendName: "cpu", kernelFunc: k7 };
function N7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { numOrSizeSplits: s, axis: a } = o, i = y.parseAxisParam(a, n.shape)[0], p = w.prepareSplitSize(n, s, i), u = new Array(n.shape.length).fill(0), c = n.shape.slice();
  return p.map((l) => {
    let m = [...c];
    m[i] = l;
    let d = Fo({ inputs: { x: n }, backend: e, attrs: { begin: u, size: m } });
    return u[i] += l, d;
  });
}
var JE = { kernelName: xa, backendName: "cpu", kernelFunc: N7 };
var eR = { kernelName: Xi, backendName: "cpu", kernelFunc: ({ inputs: r, backend: t8 }) => {
  let { x: e } = r, o = t8;
  Q(e, "square");
  let n = o.data.get(e.dataId).values, s = new Float32Array(n.length);
  for (let i = 0; i < n.length; ++i) {
    let p = n[i];
    s[i] = p * p;
  }
  return { dataId: o.write(s, e.shape, e.dtype), shape: e.shape, dtype: e.dtype };
} };
var T7 = Ie(So, (r, t8) => {
  let e = t8;
  return isNaN(r) ? NaN : r > 0 ? 1 : e.alpha;
});
var tR = { kernelName: So, backendName: "cpu", kernelFunc: T7 };
function _7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { begin: s, end: a, strides: i, beginMask: p, endMask: u, ellipsisMask: c, newAxisMask: l, shrinkAxisMask: m } = o;
  Q(n, "stridedSlice");
  let { finalShapeSparse: d, finalShape: f, isIdentity: h, sliceDim0: g, isSimpleSlice: x, begin: b, end: C, strides: S } = ct.sliceInfo(n.shape, s, a, i, p, u, c, l, m), k;
  if (h)
    k = Ve({ inputs: { x: n }, backend: e, attrs: { shape: f } });
  else if (g || x) {
    y.assert(n.shape.length >= 1, () => `Input must have rank at least 1, got: ${n.shape.length}`);
    let _ = ct.computeOutShape(b, C, S), E = Fo({ inputs: { x: n }, backend: e, attrs: { begin: b, size: _ } });
    k = Ve({ inputs: { x: E }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(E);
  } else {
    let _ = e.bufferSync(n), E = Of(d, _, S, b);
    k = e.makeTensorInfo(f, E.dtype, E.values);
  }
  return k;
}
var rR = { kernelName: Ts, backendName: "cpu", kernelFunc: _7 };
function $7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { separator: n, nGramWidths: s, leftPad: a, rightPad: i, padWidth: p, preserveShortSequences: u } = o, { data: c, dataSplits: l } = t8, m = e.data.get(c.dataId).values, d = e.data.get(l.dataId).values, [f, h] = gp(m, d, n, s, a, i, p, u);
  return [e.makeTensorInfo([f.length], "string", f), e.makeTensorInfo(l.shape, "int32", h)];
}
var oR = { kernelName: Ca, backendName: "cpu", kernelFunc: $7 };
function E7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { skipEmpty: n } = o, { input: s, delimiter: a } = t8;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (s.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${s.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);
  let i = e.data.get(s.dataId).values, p = e.data.get(a.dataId).values[0], [u, c, l] = xp(i, p, n), m = c.length;
  return [e.makeTensorInfo([m, 2], "int32", u), e.makeTensorInfo([m], "string", c), e.makeTensorInfo([2], "int32", new Int32Array(l))];
}
var nR = { kernelName: Yi, backendName: "cpu", kernelFunc: E7 };
function R7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { numBuckets: n } = o, { input: s } = t8;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (n <= 0)
    throw new Error("Number of buckets must be at least 1");
  let a = e.data.get(s.dataId).values, i = yp(a, n);
  return e.makeTensorInfo(s.shape, "int32", i);
}
var sR = { kernelName: Qi, backendName: "cpu", kernelFunc: R7 };
var D7 = Ie($s, (r) => Math.tan(r));
var aR = { kernelName: $s, backendName: "cpu", kernelFunc: D7 };
var A7 = Ie(Es, (r) => Math.tanh(r));
var iR = { kernelName: Es, backendName: "cpu", kernelFunc: A7 };
function F7(r) {
  let { inputs: t8, backend: e } = r, { tensor: o, indices: n, updates: s } = t8, { sliceRank: a, numUpdates: i, sliceSize: p, strides: u, outputSize: c } = w.calculateShapes(s, n, o.shape), l = false, m = e.bufferSync(n), d = e.bufferSync(s), f = e.bufferSync(o), h = zs(m, d, o.shape, c, p, i, a, u, f, l);
  return e.makeTensorInfo(o.shape, h.dtype, h.values);
}
var uR = { kernelName: fs, backendName: "cpu", kernelFunc: F7 };
function P7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { reps: s } = o;
  Q(n, "tile");
  let a = Mf(e.bufferSync(n), s);
  return e.makeTensorInfo(a.shape, a.dtype, a.values);
}
var pR = { kernelName: po, backendName: "cpu", kernelFunc: P7 };
function O7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { k: s, sorted: a } = o;
  Q(n, "topk");
  let i = e.data.get(n.dataId).values, [p, u] = Lf(i, n.shape, n.dtype, s, a);
  return [e.makeTensorInfo(p.shape, p.dtype, p.values), e.makeTensorInfo(u.shape, u.dtype, u.values)];
}
var cR = { kernelName: Rs, backendName: "cpu", kernelFunc: O7 };
function M7(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { image: n, transforms: s } = t8, { interpolation: a, fillMode: i, fillValue: p, outputShape: u } = e, [c, l, m, d] = n.shape, [f, h] = u != null ? u : [l, m], g = [c, f, h, d], x = y.computeStrides(n.shape), b = x[0], C = x[1], S = x[2], k = y.computeStrides(g), _ = k[0], E = k[1], R = k[2], D = y.getTypedArrayFromDType(n.dtype, y.sizeFromShape(g));
  D.fill(p);
  let P = o.data.get(n.dataId).values, O = o.data.get(s.dataId).values;
  for (let L = 0; L < c; ++L) {
    let B = s.shape[0] === 1 ? O : O.subarray(L * 8, L * 8 + 8);
    for (let z = 0; z < f; ++z)
      for (let U = 0; U < h; ++U)
        for (let j = 0; j < d; ++j) {
          let q, Y = B[6] * U + B[7] * z + 1;
          if (Y === 0)
            continue;
          let J = (B[0] * U + B[1] * z + B[2]) / Y, re = (B[3] * U + B[4] * z + B[5]) / Y, ne = lR(J, m, i), ee = lR(re, l, i);
          switch (a) {
            case "nearest":
              q = W7(P, l, m, b, C, S, L, ee, ne, j, p);
              break;
            case "bilinear":
              q = U7(P, l, m, b, C, S, L, ee, ne, j, p);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`);
          }
          let oe = L * _ + z * E + U * R + j;
          D[oe] = q;
        }
    return o.makeTensorInfo(g, n.dtype, D);
  }
  return { dataId: o.write(D, g, n.dtype), shape: n.shape, dtype: n.dtype };
}
var mR = { kernelName: Ds, backendName: "cpu", kernelFunc: M7 };
function lR(r, t8, e) {
  switch (e) {
    case "reflect":
      return L7(r, t8);
    case "wrap":
      return B7(r, t8);
    case "nearest":
      return V7(r, t8);
    case "constant":
    default:
      return z7(r, t8);
  }
}
function L7(r, t8) {
  let e = r;
  if (e < 0)
    if (t8 <= 1)
      e = 0;
    else {
      let o = 2 * t8;
      e < o && (e = o * Math.trunc(-e / o) + e), e = e < -t8 ? e + o : -e - 1;
    }
  else if (e > t8 - 1)
    if (t8 <= 1)
      e = 0;
    else {
      let o = 2 * t8;
      e -= o * Math.trunc(e / o), e >= t8 && (e = o - e - 1);
    }
  return y.clamp(0, e, t8 - 1);
}
function B7(r, t8) {
  let e = r;
  if (e < 0)
    if (t8 <= 1)
      e = 0;
    else {
      let o = t8 - 1;
      e += t8 * (Math.trunc(-e / o) + 1);
    }
  else if (e > t8 - 1)
    if (t8 <= 1)
      e = 0;
    else {
      let o = t8 - 1;
      e -= t8 * Math.trunc(e / o);
    }
  return y.clamp(0, e, t8 - 1);
}
function z7(r, t8) {
  return r;
}
function V7(r, t8) {
  return y.clamp(0, r, t8 - 1);
}
function ql(r, t8, e, o, n, s, a, i, p, u, c) {
  let l = a * o + i * n + p * s + u;
  return 0 <= i && i < t8 && 0 <= p && p < e ? r[l] : c;
}
function W7(r, t8, e, o, n, s, a, i, p, u, c) {
  let l = Math.round(i), m = Math.round(p);
  return ql(r, t8, e, o, n, s, a, l, m, u, c);
}
function U7(r, t8, e, o, n, s, a, i, p, u, c) {
  let l = Math.floor(i), m = Math.floor(p), d = l + 1, f = m + 1, h = (f - p) * ql(r, t8, e, o, n, s, a, l, m, u, c) + (p - m) * ql(r, t8, e, o, n, s, a, l, f, u, c), g = (f - p) * ql(r, t8, e, o, n, s, a, d, m, u, c) + (p - m) * ql(r, t8, e, o, n, s, a, d, f, u, c);
  return (d - i) * h + (i - l) * g;
}
function G7(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { axis: n } = e, { x: s } = t8;
  Q(s, "unique");
  let a = o.data.get(s.dataId).values, { outputValues: i, outputShape: p, indices: u } = bp(a, n, s.shape, s.dtype);
  return [o.makeTensorInfo(p, s.dtype, i), o.makeTensorInfo([u.length], "int32", u)];
}
var dR = { kernelName: Zi, backendName: "cpu", kernelFunc: G7 };
function H7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { value: n } = t8, { axis: s } = o;
  s < 0 && (s += n.shape.length);
  let a = n.shape.length, i = n.shape[s], p = new Array(a - 1), u = 0;
  for (let d = 0; d < a; d++)
    d !== s && (p[u++] = n.shape[d]);
  let c = new Array(a).fill(0), l = n.shape.slice();
  l[s] = 1;
  let m = new Array(i);
  for (let d = 0; d < m.length; d++) {
    c[s] = d;
    let f = Fo({ inputs: { x: n }, backend: e, attrs: { begin: c, size: l } });
    m[d] = Ve({ inputs: { x: f }, backend: e, attrs: { shape: p } }), e.disposeIntermediateTensorInfo(f);
  }
  return m;
}
var fR = { kernelName: wa, backendName: "cpu", kernelFunc: H7 };
function K7(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, segmentIds: s } = t8, { numSegments: a } = o;
  Q(n, "unsortedSegmentSum");
  let i = n.shape.length, p = s.shape.length, u = [], c = [], l = i - p, m = s;
  for (let f = 0; f < l; ++f) {
    let h = $c({ inputs: { input: m }, backend: e, attrs: { dim: f + 1 } });
    m = h, c.push(h);
  }
  for (let f = 0; f < a; ++f) {
    let h = y.createScalarValue(f, "int32"), g = e.makeTensorInfo([], "int32", h), x = GS({ inputs: { a: g, b: m }, backend: e }), b = Do({ inputs: { x }, backend: e, attrs: { dtype: "float32" } }), C = dp({ inputs: { a: b, b: n }, backend: e }), S = gi({ inputs: { x: C }, backend: e, attrs: { axis: 0, keepDims: false } });
    u.push(S), c.push(g), c.push(x), c.push(b), c.push(C), c.push(S);
  }
  let d = II({ inputs: u, backend: e, attrs: { axis: 0 } });
  return c.forEach((f) => e.disposeIntermediateTensorInfo(f)), d;
}
var hR = { kernelName: Ji, backendName: "cpu", kernelFunc: K7 };
var q7 = [z_, jT, V_, W_, JT, U_, G_, H_, K_, q_, j_, X_, Y_, Q_, Z_, e$, t$, r$, o$, B_, n$, s$, a$, e_, i$, ZT, t_, u$, XT, p$, l$, m$, d$, f$, h$, g$, x$, y$, b$, C$, w$, S$, I$, v$, k$, N$, T$, _$, $$, E$, R$, D$, F$, A_, P$, r_, O$, o_, M$, n_, L$, B$, z$, s_, a_, V$, W$, U$, G$, i_, u_, YT, H$, c$, K$, q$, j$, F_, p_, c_, X$, l_, Y$, Q$, Z$, J$, eE, tE, rE, m_, oE, nE, sE, aE, uE, pE, cE, d_, lE, mE, hE, f_, h_, gE, xE, yE, g_, bE, SE, IE, Wf, vE, P_, y_, kE, NE, TE, _E, QT, Gl, $E, O_, M_, L_, EE, RE, DE, AE, FE, PE, OE, I_, ME, BE, zE, VE, k_, WE, UE, GE, N_, dE, KE, qE, jE, XE, YE, QE, ZE, JE, __, eR, $_, E_, tR, rR, oR, nR, sR, R_, A$, aR, iR, uR, pR, cR, mR, x_, dR, fR, hR, CE];
for (let r of q7)
  ri(r);
var Ac = {};
qe(Ac, { assertNotComplex: () => Vs, bindCanvasToFramebuffer: () => rZ, bindColorTextureToFramebuffer: () => Ql, bindTextureToProgramUniformSampler: () => BI, bindTextureUnit: () => bR, bindVertexBufferToProgramAttribute: () => jf, callAndCheck: () => ce, canBeRepresented: () => TI, createFragmentShader: () => $I, createFramebuffer: () => OI, createProgram: () => EI, createStaticIndexBuffer: () => AI, createStaticVertexBuffer: () => DI, createTexture: () => FI, createVertexShader: () => _I, getBatchDim: () => yi, getExtensionOrThrow: () => Ec, getFramebufferErrorMessage: () => CR, getMaxTexturesInShader: () => WI, getNumChannels: () => eZ, getProgramUniformLocation: () => LI, getProgramUniformLocationOrThrow: () => MI, getRowsCols: () => bi, getShapeAs3D: () => Dc, getTextureShapeFromLogicalShape: () => zI, getWebGLDisjointQueryTimerVersion: () => UI, getWebGLErrorMessage: () => yR, getWebGLMaxTextureSize: () => VI, hasExtension: () => qr, isCapableOfRenderingToFloatTexture: () => GI, isDownloadFloatTextureEnabled: () => HI, isReshapeFree: () => Cu, isWebGLFenceEnabled: () => KI, isWebGLVersionEnabled: () => Yf, linkProgram: () => RI, logShaderSourceAndInfoLog: () => qf, resetMaxTextureSize: () => oZ, resetMaxTexturesInShader: () => nZ, unbindColorTextureFromFramebuffer: () => Xf, unbindTextureUnit: () => tZ, validateFramebuffer: () => Rc, validateProgram: () => Yl, validateTextureSize: () => PI });
var wp = {};
var Uf = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
function vI(r, t8) {
  wp[r] = t8;
}
function Kr(r, t8) {
  if (!(r in wp) || t8 != null) {
    let o = X7(r, t8);
    if (o !== null)
      wp[r] = o;
    else
      return console.log("Could not get context for WebGL version", r), null;
  }
  let e = wp[r];
  return e == null || e.isContextLost() ? (delete wp[r], Kr(r)) : (e.disable(e.DEPTH_TEST), e.disable(e.STENCIL_TEST), e.disable(e.BLEND), e.disable(e.DITHER), e.disable(e.POLYGON_OFFSET_FILL), e.disable(e.SAMPLE_COVERAGE), e.enable(e.SCISSOR_TEST), e.enable(e.CULL_FACE), e.cullFace(e.BACK), wp[r]);
}
function j7(r) {
  if (!A().getBool("IS_SAFARI") && typeof OffscreenCanvas != "undefined" && r === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document != "undefined")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function X7(r, t8) {
  if (r !== 1 && r !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  let e = t8 == null ? j7(r) : t8;
  return e.addEventListener("webglcontextlost", (o) => {
    o.preventDefault(), delete wp[r];
  }, false), A().getBool("SOFTWARE_WEBGL_ENABLED") && (Uf.failIfMajorPerformanceCaveat = false), r === 1 ? e.getContext("webgl", Uf) || e.getContext("experimental-webgl", Uf) : e.getContext("webgl2", Uf);
}
var bu;
(function(r) {
  r[r.DENSE = 0] = "DENSE", r[r.SHARED_BATCH = 1] = "SHARED_BATCH";
})(bu || (bu = {}));
var dr;
(function(r) {
  r[r.RENDER = 0] = "RENDER", r[r.UPLOAD = 1] = "UPLOAD", r[r.PIXELS = 2] = "PIXELS", r[r.DOWNLOAD = 3] = "DOWNLOAD";
})(dr || (dr = {}));
var rr;
(function(r) {
  r[r.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", r[r.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", r[r.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", r[r.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", r[r.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(rr || (rr = {}));
function Sp(r, t8) {
  return [t8, r];
}
function gR(r, t8) {
  return r * t8;
}
function jl(r) {
  let t8 = y.sizeFromShape(r), e = Math.ceil(t8 / 4);
  return y.sizeToSquarishShape(e);
}
function La(r, t8) {
  return [Math.max(1, Math.ceil(t8 / 2)), Math.max(1, Math.ceil(r / 2))];
}
function xR(r, t8) {
  let [e, o] = La(r, t8);
  return e * o * 4;
}
function Xl(r, t8) {
  let e = r, o, n, s, a, i, p, u, c, l, m;
  return A().getNumber("WEBGL_VERSION") === 2 ? (o = e.R32F, n = e.R16F, s = e.RGBA16F, a = e.RGBA32F, i = e.RED, u = 4, c = 1, l = e.HALF_FLOAT, m = e.FLOAT, p = e.RGBA8) : (o = r.RGBA, n = r.RGBA, s = r.RGBA, a = e.RGBA, i = r.RGBA, u = 4, c = 4, l = t8 != null ? t8.HALF_FLOAT_OES : null, m = r.FLOAT, p = r.RGBA), { internalFormatFloat: o, internalFormatHalfFloat: n, internalFormatPackedHalfFloat: s, internalFormatPackedFloat: a, textureFormatFloat: i, downloadTextureFormat: p, downloadUnpackNumChannels: u, defaultNumChannels: c, textureTypeHalfFloat: l, textureTypeFloat: m };
}
function ce(r, t8) {
  let e = t8();
  return A().getBool("DEBUG") && Y7(r), e;
}
function Y7(r) {
  let t8 = r.getError();
  if (t8 !== r.NO_ERROR)
    throw new Error("WebGL Error: " + yR(r, t8));
}
var Q7 = 596e-10;
var Z7 = 65504;
function TI(r) {
  return !!(A().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || r === 0 || Q7 < Math.abs(r) && Math.abs(r) < Z7);
}
function yR(r, t8) {
  switch (t8) {
    case r.NO_ERROR:
      return "NO_ERROR";
    case r.INVALID_ENUM:
      return "INVALID_ENUM";
    case r.INVALID_VALUE:
      return "INVALID_VALUE";
    case r.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case r.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case r.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case r.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${t8}`;
  }
}
function Ec(r, t8) {
  return xi(r, () => r.getExtension(t8), 'Extension "' + t8 + '" not supported on this browser.');
}
function _I(r, t8) {
  let e = xi(r, () => r.createShader(r.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (ce(r, () => r.shaderSource(e, t8)), ce(r, () => r.compileShader(e)), r.getShaderParameter(e, r.COMPILE_STATUS) === false)
    throw console.log(r.getShaderInfoLog(e)), new Error("Failed to compile vertex shader.");
  return e;
}
function $I(r, t8) {
  let e = xi(r, () => r.createShader(r.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (ce(r, () => r.shaderSource(e, t8)), ce(r, () => r.compileShader(e)), A().get("ENGINE_COMPILE_ONLY"))
    return e;
  if (r.getShaderParameter(e, r.COMPILE_STATUS) === false)
    throw qf(t8, r.getShaderInfoLog(e)), new Error("Failed to compile fragment shader.");
  return e;
}
var J7 = /ERROR: [0-9]+:([0-9]+):/g;
function qf(r, t8) {
  let e = J7.exec(t8);
  if (e == null) {
    console.log(`Couldn't parse line number in error: ${t8}`), console.log(r);
    return;
  }
  let o = +e[1], n = r.split(`
`), s = n.length.toString().length + 2, a = n.map((l, m) => y.rightPad((m + 1).toString(), s) + l), i = 0;
  for (let l = 0; l < a.length; l++)
    i = Math.max(a[l].length, i);
  let p = a.slice(0, o - 1), u = a.slice(o - 1, o), c = a.slice(o);
  console.log(p.join(`
`)), console.log(t8.split(`
`)[0]), console.log(`%c ${y.rightPad(u[0], i)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(c.join(`
`));
}
function EI(r) {
  return xi(r, () => r.createProgram(), "Unable to create WebGLProgram.");
}
function RI(r, t8) {
  if (ce(r, () => r.linkProgram(t8)), !A().get("ENGINE_COMPILE_ONLY") && r.getProgramParameter(t8, r.LINK_STATUS) === false)
    throw console.log(r.getProgramInfoLog(t8)), new Error("Failed to link vertex and fragment shaders.");
}
function Yl(r, t8) {
  if (ce(r, () => r.validateProgram(t8)), r.getProgramParameter(t8, r.VALIDATE_STATUS) === false)
    throw console.log(r.getProgramInfoLog(t8)), new Error("Shader program validation failed.");
}
function DI(r, t8) {
  let e = xi(r, () => r.createBuffer(), "Unable to create WebGLBuffer");
  return ce(r, () => r.bindBuffer(r.ARRAY_BUFFER, e)), ce(r, () => r.bufferData(r.ARRAY_BUFFER, t8, r.STATIC_DRAW)), e;
}
function AI(r, t8) {
  let e = xi(r, () => r.createBuffer(), "Unable to create WebGLBuffer");
  return ce(r, () => r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, e)), ce(r, () => r.bufferData(r.ELEMENT_ARRAY_BUFFER, t8, r.STATIC_DRAW)), e;
}
function eZ() {
  return A().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
}
function FI(r) {
  return xi(r, () => r.createTexture(), "Unable to create WebGLTexture.");
}
function PI(r, t8) {
  let e = A().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (r <= 0 || t8 <= 0) {
    let o = `[${r}x${t8}]`;
    throw new Error("Requested texture size " + o + " is invalid.");
  }
  if (r > e || t8 > e) {
    let o = `[${r}x${t8}]`, n = `[${e}x${e}]`;
    throw new Error("Requested texture size " + o + " greater than WebGL maximum on this browser / GPU " + n + ".");
  }
}
function OI(r) {
  return xi(r, () => r.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function jf(r, t8, e, o, n, s, a) {
  let i = r.getAttribLocation(t8, e);
  return i === -1 ? false : (ce(r, () => r.bindBuffer(r.ARRAY_BUFFER, o)), ce(r, () => r.vertexAttribPointer(i, n, r.FLOAT, false, s, a)), ce(r, () => r.enableVertexAttribArray(i)), true);
}
function bR(r, t8, e) {
  wR(r, e), ce(r, () => r.activeTexture(r.TEXTURE0 + e)), ce(r, () => r.bindTexture(r.TEXTURE_2D, t8));
}
function tZ(r, t8) {
  wR(r, t8), ce(r, () => r.activeTexture(r.TEXTURE0 + t8)), ce(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function MI(r, t8, e) {
  return xi(r, () => r.getUniformLocation(t8, e), 'uniform "' + e + '" not present in program.');
}
function LI(r, t8, e) {
  return r.getUniformLocation(t8, e);
}
function BI(r, t8, e, o) {
  ce(r, () => bR(r, t8, o)), ce(r, () => r.uniform1i(e, o));
}
function rZ(r) {
  ce(r, () => r.bindFramebuffer(r.FRAMEBUFFER, null)), ce(r, () => r.viewport(0, 0, r.canvas.width, r.canvas.height)), ce(r, () => r.scissor(0, 0, r.canvas.width, r.canvas.height));
}
function Ql(r, t8, e) {
  ce(r, () => r.bindFramebuffer(r.FRAMEBUFFER, e)), ce(r, () => r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, t8, 0));
}
function Xf(r, t8) {
  ce(r, () => r.bindFramebuffer(r.FRAMEBUFFER, t8)), ce(r, () => r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, null, 0));
}
function Rc(r) {
  let t8 = r.checkFramebufferStatus(r.FRAMEBUFFER);
  if (t8 !== r.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + CR(r, t8));
}
function CR(r, t8) {
  switch (t8) {
    case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case r.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${t8}`;
  }
}
function xi(r, t8, e) {
  let o = ce(r, () => t8());
  if (o == null)
    throw new Error(e);
  return o;
}
function wR(r, t8) {
  let e = r.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, o = t8 + r.TEXTURE0;
  if (o < r.TEXTURE0 || o > e) {
    let n = `[gl.TEXTURE0, gl.TEXTURE${e}]`;
    throw new Error(`textureUnit must be in ${n}.`);
  }
}
function yi(r, t8 = 2) {
  return y.sizeFromShape(r.slice(0, r.length - t8));
}
function bi(r) {
  if (r.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [r.length > 1 ? r[r.length - 2] : 1, r[r.length - 1]];
}
function Dc(r) {
  let t8 = [1, 1, 1];
  return r.length === 0 || r.length === 1 && r[0] === 1 || (t8 = [yi(r), ...bi(r)]), t8;
}
function zI(r, t8 = false) {
  let e = A().getNumber("WEBGL_MAX_TEXTURE_SIZE"), o = A().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  o === 1 / 0 && A().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (o = e / 2), t8 && (e = e * 2, o = o * 2, r = r.map((i, p) => p >= r.length - 2 ? y.nearestLargerEven(r[p]) : r[p]), r.length === 1 && (r = [2, r[0]])), r.length !== 2 && (r = y.squeezeShape(r).newShape);
  let n = y.sizeFromShape(r), s = null;
  r.length <= 1 && n <= e ? s = [1, n] : r.length === 2 && r[0] <= e && r[1] <= e ? s = r : r.length === 3 && r[0] * r[1] <= e && r[2] <= e ? s = [r[0] * r[1], r[2]] : r.length === 3 && r[0] <= e && r[1] * r[2] <= e ? s = [r[0], r[1] * r[2]] : r.length === 4 && r[0] * r[1] * r[2] <= e && r[3] <= e ? s = [r[0] * r[1] * r[2], r[3]] : r.length === 4 && r[0] <= e && r[1] * r[2] * r[3] <= e && (s = [r[0], r[1] * r[2] * r[3]]);
  let a = s != null && Math.max(...s) > o && Math.min(...s) <= (t8 ? 2 : 1) && Math.min(...s) > 0;
  if (s == null || a)
    if (t8) {
      let i = yi(r), p = 2, u = 2;
      r.length && ([p, u] = bi(r)), n = i * (p / 2) * (u / 2), s = y.sizeToSquarishShape(n).map((c) => c * 2);
    } else
      s = y.sizeToSquarishShape(n);
  return s;
}
function Gf(r) {
  return r % 2 === 0;
}
function Cu(r, t8) {
  if (r = r.slice(-2), t8 = t8.slice(-2), y.arraysEqual(r, t8) || !r.length || !t8.length || r[0] === 0 || r[1] === 0 || t8[0] === 0 || t8[1] === 0)
    return true;
  if (r.length !== t8.length) {
    let e = r[r.length - 1], o = t8[t8.length - 1];
    if (e === o || Gf(e) && Gf(o) && (r[0] === 1 || t8[0] === 1))
      return true;
  }
  return r[1] === t8[1] && Gf(r[0]) && Gf(t8[0]);
}
var Hf;
var Kf;
function VI(r) {
  if (Hf == null) {
    let t8 = Kr(r);
    Hf = t8.getParameter(t8.MAX_TEXTURE_SIZE);
  }
  return Hf;
}
function oZ() {
  Hf = null;
}
function nZ() {
  Kf = null;
}
function WI(r) {
  if (Kf == null) {
    let t8 = Kr(r);
    Kf = t8.getParameter(t8.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, Kf);
}
function UI(r) {
  if (r === 0)
    return 0;
  let t8, e = Kr(r);
  return qr(e, "EXT_disjoint_timer_query_webgl2") && r === 2 ? t8 = 2 : qr(e, "EXT_disjoint_timer_query") ? t8 = 1 : t8 = 0, t8;
}
function qr(r, t8) {
  return r.getExtension(t8) != null;
}
function Yf(r) {
  try {
    if (Kr(r) != null)
      return true;
  } catch (t8) {
    return console.log("Error when getting WebGL context: ", t8), false;
  }
  return false;
}
function GI(r) {
  if (r === 0)
    return false;
  let t8 = Kr(r);
  if (r === 1) {
    if (!qr(t8, "OES_texture_float"))
      return false;
  } else if (!qr(t8, "EXT_color_buffer_float"))
    return false;
  return NI(t8);
}
function HI(r) {
  if (r === 0)
    return false;
  let t8 = Kr(r);
  if (r === 1) {
    if (!qr(t8, "OES_texture_float") || !qr(t8, "WEBGL_color_buffer_float"))
      return false;
  } else {
    if (qr(t8, "EXT_color_buffer_float"))
      return NI(t8);
    let o = "EXT_color_buffer_half_float";
    if (qr(t8, o)) {
      let n = t8.getExtension(o);
      return sZ(t8, n);
    }
    return false;
  }
  return NI(t8);
}
function NI(r) {
  let t8 = Xl(r), e = r.createTexture();
  r.bindTexture(r.TEXTURE_2D, e);
  let o = 1, n = 1;
  r.texImage2D(r.TEXTURE_2D, 0, t8.internalFormatFloat, o, n, 0, t8.textureFormatFloat, t8.textureTypeFloat, null);
  let s = r.createFramebuffer();
  r.bindFramebuffer(r.FRAMEBUFFER, s), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, e, 0);
  let a = r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE;
  return r.bindTexture(r.TEXTURE_2D, null), r.bindFramebuffer(r.FRAMEBUFFER, null), r.deleteTexture(e), r.deleteFramebuffer(s), a;
}
function sZ(r, t8) {
  let e = Xl(r, t8), o = r.createTexture();
  r.bindTexture(r.TEXTURE_2D, o);
  let n = 1, s = 1;
  r.texImage2D(r.TEXTURE_2D, 0, e.internalFormatHalfFloat, n, s, 0, e.textureFormatFloat, e.textureTypeHalfFloat, null);
  let a = r.createFramebuffer();
  r.bindFramebuffer(r.FRAMEBUFFER, a), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, o, 0);
  let i = r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE;
  return r.bindTexture(r.TEXTURE_2D, null), r.bindFramebuffer(r.FRAMEBUFFER, null), r.deleteTexture(o), r.deleteFramebuffer(a), i;
}
function KI(r) {
  return r !== 2 ? false : Kr(r).fenceSync != null;
}
function Vs(r, t8) {
  Array.isArray(r) || (r = [r]), r.forEach((e) => {
    e != null && y.assert(e.dtype !== "complex64", () => `${t8} does not support complex64 tensors in the WebGL backend.`);
  });
}
var Se = A();
Se.registerFlag("HAS_WEBGL", () => Se.getNumber("WEBGL_VERSION") > 0);
Se.registerFlag("WEBGL_VERSION", () => Yf(2) ? 2 : Yf(1) ? 1 : 0);
Se.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => false);
Se.registerFlag("WEBGL_BUFFER_SUPPORTED", () => Se.get("WEBGL_VERSION") === 2);
Se.registerFlag("WEBGL_CPU_FORWARD", () => true);
Se.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => false);
Se.registerFlag("WEBGL_PACK", () => Se.getBool("HAS_WEBGL"));
Se.registerFlag("WEBGL_PACK_NORMALIZATION", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_PACK_CLIP", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_PACK_REDUCE", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_LAZILY_UNPACK", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_CONV_IM2COL", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE", () => Se.getBool("WEBGL_PACK"));
Se.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => VI(Se.getNumber("WEBGL_VERSION")));
Se.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => WI(Se.getNumber("WEBGL_VERSION")));
Se.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  let r = Se.getNumber("WEBGL_VERSION");
  return r === 0 ? 0 : UI(r);
});
Se.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => Se.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !ou.isMobile());
Se.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => GI(Se.getNumber("WEBGL_VERSION")));
Se.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => Se.getBool("WEBGL_FORCE_F16_TEXTURES") ? false : Se.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
Se.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => HI(Se.getNumber("WEBGL_VERSION")));
Se.registerFlag("WEBGL_FENCE_API_ENABLED", () => KI(Se.getNumber("WEBGL_VERSION")));
Se.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => Se.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
Se.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (r) => {
  if (typeof r != "number")
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${r}.`);
  if (r < 0 && r !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`);
});
Se.registerFlag("WEBGL_FLUSH_THRESHOLD", () => ou.isMobile() ? 1 : -1, (r) => {
  if (typeof r != "number")
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${r}.`);
  if (r < 0 && r !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`);
});
Se.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
Se.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => false);
Se.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
Se.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
Se.registerFlag("WEBGL_EXP_CONV", () => false);
Se.registerFlag("SOFTWARE_WEBGL_ENABLED", () => Se.getBool("IS_TEST"));
Se.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
Se.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => false);
Se.registerFlag("WEBGL2_ISNAN_CUSTOM", () => false);
Se.registerFlag("ENGINE_COMPILE_ONLY", () => false);
function vt() {
  let r, t8, e, o, n, s, a, i, p, u;
  return A().getNumber("WEBGL_VERSION") === 2 ? (r = "#version 300 es", t8 = "in", e = "out", o = "in", n = "texture", s = "outputColor", a = "out vec4 outputColor;", i = A().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", p = "", u = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (r = "", t8 = "attribute", e = "varying", o = "varying", n = "texture2D", s = "gl_FragColor", a = "", i = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, p = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, u = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), { version: r, attribute: t8, varyingVs: e, varyingFs: o, texture2D: n, output: s, defineOutput: a, defineSpecialNaN: i, defineSpecialInf: p, defineRound: u };
}
function Ws(r, t8, e = "index") {
  let o = y.computeStrides(t8);
  return o.map((n, s) => {
    let a = `int ${r[s]} = ${e} / ${n}`, i = s === o.length - 1 ? `int ${r[s + 1]} = ${e} - ${r[s]} * ${n}` : `index -= ${r[s]} * ${n}`;
    return `${a}; ${i};`;
  }).join("");
}
function Ip(r, t8, e = "index") {
  let o = y.computeStrides(t8);
  return o.map((n, s) => {
    let a = `int ${r[s]} = ${e} / outShapeStrides[${s}]`, i = s === o.length - 1 ? `int ${r[s + 1]} = ${e} - ${r[s]} * outShapeStrides[${s}]` : `index -= ${r[s]} * outShapeStrides[${s}]`;
    return `${a}; ${i};`;
  }).join("");
}
function aZ(r, t8) {
  let e = r.length, o = r.map((s) => `${t8}[${s}]`), n = new Array(e - 1);
  n[e - 2] = o[e - 1];
  for (let s = e - 3; s >= 0; --s)
    n[s] = `(${n[s + 1]} * ${o[s + 1]})`;
  return n;
}
function SR(r, t8, e = "index") {
  let o = r.map((s, a) => a), n = aZ(o, t8);
  return n.map((s, a) => {
    let i = `int ${r[a]} = ${e} / ${n[a]}`, p = a === n.length - 1 ? `int ${r[a + 1]} = ${e} - ${r[a]} * ${n[a]}` : `index -= ${r[a]} * ${n[a]}`;
    return `${i}; ${p};`;
  }).join("");
}
function Fc(r) {
  let t8 = y.computeStrides(r).map((e) => e.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t8[0]} + coords.y * ${t8[1]} + coords.z;
  }
`;
}
function Pc() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
var Qf = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
var { getBroadcastDims: IR } = w;
function vR(r, t8, e) {
  let o = [];
  if (r.forEach((d) => {
    let f = y.sizeFromShape(d.shapeInfo.logicalShape);
    if (d.shapeInfo.isUniform ? o.push(`uniform float ${d.name}${f > 1 ? `[${f}]` : ""};`) : (o.push(`uniform sampler2D ${d.name};`), o.push(`uniform int offset${d.name};`)), e.enableShapeUniforms) {
      let { uniformShape: h } = Zf(e.packedInputs, d.shapeInfo.logicalShape, d.shapeInfo.texShape);
      switch (h.length) {
        case 1:
          o.push(`uniform int ${d.name}Shape;`);
          break;
        case 2:
          o.push(`uniform ivec2 ${d.name}Shape;`);
          break;
        case 3:
          o.push(`uniform ivec3 ${d.name}Shape;`);
          break;
        case 4:
          o.push(`uniform ivec4 ${d.name}Shape;`);
          break;
        default:
          break;
      }
      o.push(`uniform ivec2 ${d.name}TexShape;`);
    }
  }), e.enableShapeUniforms) {
    switch (t8.logicalShape.length) {
      case 1:
        o.push("uniform int outShape;");
        break;
      case 2:
        o.push("uniform ivec2 outShape;"), o.push("uniform int outShapeStrides;");
        break;
      case 3:
        o.push("uniform ivec3 outShape;"), o.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        o.push("uniform ivec4 outShape;"), o.push("uniform ivec3 outShapeStrides;");
        break;
      default:
        break;
    }
    o.push("uniform ivec2 outTexShape;");
  }
  e.customUniforms && e.customUniforms.forEach((d) => {
    o.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ""};`);
  });
  let n = o.join(`
`), s = r.map((d) => iZ(d, t8, e.packedInputs, e.enableShapeUniforms)).join(`
`), a = t8.texShape, i = vt(), p = cZ(i), u, c, l = dZ(i);
  return t8.isPacked ? (u = uZ(t8.logicalShape, a, e.enableShapeUniforms), c = mZ(i)) : (u = pZ(t8.logicalShape, a, e.enableShapeUniforms), c = lZ(i)), e.packedInputs && (l += xZ), [l, p, c, n, u, s, e.userCode].join(`
`);
}
function Mc(r, t8 = false) {
  let e = r.shapeInfo.logicalShape;
  switch (e.length) {
    case 0:
      return $Z(r, t8);
    case 1:
      return RZ(r, t8);
    case 2:
      return AZ(r, t8);
    case 3:
      return PZ(r, t8);
    case 4:
      return MZ(r, t8);
    case 5:
      return LZ(r);
    case 6:
      return BZ(r);
    default:
      throw new Error(`${e.length}-D input sampling is not yet supported`);
  }
}
function kR(r, t8) {
  switch (r.shapeInfo.logicalShape.length) {
    case 0:
      return _Z(r);
    case 1:
      return EZ(r, t8);
    case 2:
      return DZ(r, t8);
    case 3:
      return FZ(r, t8);
    default:
      return OZ(r, t8);
  }
}
function iZ(r, t8, e = false, o) {
  let n = "";
  e ? n += kR(r, o) : n += Mc(r, o);
  let s = r.shapeInfo.logicalShape, a = t8.logicalShape;
  return s.length <= a.length && (e ? n += zZ(r, t8) : n += VZ(r, t8)), n;
}
function uZ(r, t8, e) {
  switch (r.length) {
    case 0:
      return NR();
    case 1:
      return yZ(r, t8, e);
    case 2:
      return NZ(r, t8, e);
    case 3:
      return CZ(r, t8, e);
    default:
      return SZ(r, t8, e);
  }
}
function pZ(r, t8, e) {
  switch (r.length) {
    case 0:
      return NR();
    case 1:
      return bZ(r, t8, e);
    case 2:
      return TZ(r, t8, e);
    case 3:
      return wZ(r, t8, e);
    case 4:
      return IZ(r, t8, e);
    case 5:
      return vZ(r, t8);
    case 6:
      return kZ(r, t8);
    default:
      throw new Error(`${r.length}-D output sampling is not yet supported`);
  }
}
function cZ(r) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `;
}
function lZ(r) {
  return `
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function mZ(r) {
  return `
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `;
}
function dZ(r) {
  return `${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${fZ}
    ${hZ}
    ${gZ}
  `;
}
var fZ = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var hZ = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var gZ = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var xZ = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function NR() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function yZ(r, t8, e) {
  let o = [Math.ceil(t8[0] / 2), Math.ceil(t8[1] / 2)];
  return o[0] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    ` : o[1] === 1 ? e ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `;
}
function bZ(r, t8, e) {
  return t8[0] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${t8[1]}.0);
      }
    ` : t8[1] === 1 ? e ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${t8[0]}.0);
      }
    ` : e ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t8[0]}, ${t8[1]}));
      return resTexRC.x * ${t8[1]} + resTexRC.y;
    }
  `;
}
function CZ(r, t8, e) {
  if (e)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  let o = [Math.ceil(t8[0] / 2), Math.ceil(t8[1] / 2)], n = Math.ceil(r[2] / 2), s = n * Math.ceil(r[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function wZ(r, t8, e) {
  if (e)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Ip(["r", "c", "d"], r)}
    return ivec3(r, c, d);
  }
`;
  let o = Ws(["r", "c", "d"], r);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t8[0]}, ${t8[1]}));
      int index = resTexRC.x * ${t8[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `;
}
function SZ(r, t8, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  let o = [Math.ceil(t8[0] / 2), Math.ceil(t8[1] / 2)], n = Math.ceil(r[r.length - 1] / 2), s = n * Math.ceil(r[r.length - 2] / 2), a = s, i = "", p = "b, r, c";
  for (let u = 2; u < r.length - 1; u++)
    a *= r[r.length - u - 1], i = `
      int b${u} = index / ${a};
      index -= b${u} * ${a};
    ` + i, p = `b${u}, ` + p;
  return `
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${i}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${p});
    }
  `;
}
function IZ(r, t8, e) {
  if (e)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Ip(["r", "c", "d", "d2"], r)}
      return ivec4(r, c, d, d2);
    }
  `;
  let o = Ws(["r", "c", "d", "d2"], r);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t8[0]}, ${t8[1]}));
      int index = resTexRC.x * ${t8[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `;
}
function vZ(r, t8) {
  let e = Ws(["r", "c", "d", "d2", "d3"], r);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t8[0]},
                             ${t8[1]}));

      int index = resTexRC.x * ${t8[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function kZ(r, t8) {
  let e = Ws(["r", "c", "d", "d2", "d3", "d4"], r);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t8[0]}, ${t8[1]}));
      int index = resTexRC.x * ${t8[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function NZ(r, t8, e) {
  let o = [Math.ceil(t8[0] / 2), Math.ceil(t8[1] / 2)];
  if (y.arraysEqual(r, t8))
    return e ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;
  let n = Math.ceil(r[1] / 2);
  return e ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `;
}
function TZ(r, t8, e) {
  return y.arraysEqual(r, t8) ? e ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t8[0]}, ${t8[1]}));
      }
    ` : r[1] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t8[0]}, ${t8[1]}));
        int index = resTexRC.x * ${t8[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : r[0] === 1 ? e ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t8[0]}, ${t8[1]}));
        int index = resTexRC.x * ${t8[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : e ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t8[0]}, ${t8[1]}));
      int index = resTexRC.x * ${t8[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `;
}
function vp(r) {
  return `offset${r}`;
}
function _Z(r) {
  let t8 = r.name, e = "get" + t8.charAt(0).toUpperCase() + t8.slice(1), o = vt();
  return `
    vec4 ${e}() {
      return ${o.texture2D}(${t8}, halfCR);
    }
  `;
}
function $Z(r, t8) {
  let e = r.name, o = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (r.shapeInfo.isUniform)
    return `float ${o}() {return ${e};}`;
  let [n, s] = r.shapeInfo.texShape;
  if (n === 1 && s === 1)
    return `
      float ${o}() {
        return sampleTexture(${e}, halfCR);
      }
    `;
  let a = vp(e);
  if (t8)
    return `
    float ${o}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${a});
      return sampleTexture(${e}, uv);
    }
  `;
  let [i, p] = r.shapeInfo.texShape;
  return `
    float ${o}() {
      vec2 uv = uvFromFlat(${i}, ${p}, ${a});
      return sampleTexture(${e}, uv);
    }
  `;
}
function EZ(r, t8) {
  let e = r.name, o = "get" + e.charAt(0).toUpperCase() + e.slice(1), n = r.shapeInfo.texShape, s = vt();
  if (t8)
    return `
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${e}, uv);
    }
  `;
  let a = [Math.ceil(n[0] / 2), Math.ceil(n[1] / 2)];
  return `
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${a[0]}, ${a[1]}, index);
      return ${s.texture2D}(${e}, uv);
    }
  `;
}
function RZ(r, t8) {
  let e = r.name, o = "get" + e.charAt(0).toUpperCase() + e.slice(1);
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int index) {
        ${Lc(r)}
      }
    `;
  let n = r.shapeInfo.texShape, s = n[0], a = n[1];
  if (a === 1 && s === 1)
    return `
      float ${o}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;
  let i = vp(e);
  return a === 1 ? t8 ? `
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);
        return sampleTexture(${e}, uv);
      }
    ` : s === 1 ? t8 ? `
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : `
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    ` : t8 ? `
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});
      return sampleTexture(${e}, uv);
    }
  ` : `
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});
      return sampleTexture(${e}, uv);
    }
  `;
}
function DZ(r, t8) {
  let e = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = r.shapeInfo.texShape, a = s[0], i = s[1], p = vt();
  if (s != null && y.arraysEqual(e, s))
    return t8 ? `
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${p.texture2D}(${o}, uv);
      }
    ` : `
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);

        return ${p.texture2D}(${o}, uv);
      }
    `;
  if (t8)
    return `
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${p.texture2D}(${o}, uv);
    }
  `;
  let u = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)], c = Math.ceil(e[1] / 2);
  return `
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${p.texture2D}(${o}, uv);
    }
  `;
}
function AZ(r, t8) {
  let e = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = r.shapeInfo.texShape;
  if (s != null && y.arraysEqual(e, s)) {
    if (t8)
      return `
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;
    let m = s[0], d = s[1];
    return `
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${d}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `;
  }
  let { newShape: a, keptDims: i } = y.squeezeShape(e), p = a;
  if (p.length < e.length) {
    let m = Bc(r, p), d = ["row", "col"];
    return `
      ${Mc(m, t8)}
      float ${n}(int row, int col) {
        return ${n}(${zc(d, i)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${Lc(r)}
      }
    `;
  let u = s[0], c = s[1], l = vp(o);
  return c === 1 ? t8 ? `
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${l}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    ` : `
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  ` : u === 1 ? t8 ? `
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${l}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    ` : `
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  ` : t8 ? `
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${l};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    ` : `
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${l};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`;
}
function FZ(r, t8) {
  let e = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = r.shapeInfo.texShape, a = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)];
  if (e[0] === 1) {
    let m = e.slice(1), d = [1, 2], f = Bc(r, m), h = ["b", "row", "col"];
    return `
        ${kR(f, t8)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${zc(h, d)});
        }
      `;
  }
  let i = vt();
  if (t8)
    return `
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${i.texture2D}(${o}, uv);
    }
  `;
  let p = a[0], u = a[1], c = Math.ceil(e[2] / 2), l = c * Math.ceil(e[1] / 2);
  return `
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${p}, ${u}, ${l}, ${c}, b, row, col);
      return ${i.texture2D}(${o}, uv);
    }
  `;
}
function PZ(r, t8) {
  let e = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = e[1] * e[2], a = e[2], { newShape: i, keptDims: p } = y.squeezeShape(e), u = i;
  if (u.length < e.length) {
    let h = Bc(r, u), g = ["row", "col", "depth"];
    return `
        ${Mc(h, t8)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${zc(g, p)});
        }
      `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${a}, 1)));
        ${Lc(r)}
      }
    `;
  let c = r.shapeInfo.texShape, l = c[0], m = c[1], d = r.shapeInfo.flatOffset;
  if (m === s && d == null)
    return t8 ? `
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    ` : `
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${a}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${l}.0);
          return sampleTexture(${o}, uv);
        }
      `;
  if (m === a && d == null)
    return t8 ? `
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    ` : `
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${l}.0);
      return sampleTexture(${o}, uv);
    }
  `;
  let f = vp(o);
  return t8 ? `
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    ` : `
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${a} + depth + ${f};
        vec2 uv = uvFromFlat(${l}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `;
}
function OZ(r, t8) {
  let e = r.name, o = "get" + e.charAt(0).toUpperCase() + e.slice(1), n = vt();
  if (t8)
    return `
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${e}, uv);
    }
  `;
  let s = r.shapeInfo.logicalShape, a = s.length, i = r.shapeInfo.texShape, p = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)], u = p[0], c = p[1], l = Math.ceil(s[a - 1] / 2), m = l * Math.ceil(s[a - 2] / 2), d = "int b, int row, int col", f = `b * ${m} + (row / 2) * ${l} + (col / 2)`;
  for (let h = 2; h < a - 1; h++)
    d = `int b${h}, ` + d, m *= s[a - h - 1], f = `b${h} * ${m} + ` + f;
  return `
    vec4 ${o}(${d}) {
      int index = ${f};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${e}, uv);
    }
  `;
}
function MZ(r, t8) {
  let e = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = e[3], a = e[2] * s, i = e[1] * a, { newShape: p, keptDims: u } = y.squeezeShape(e);
  if (p.length < e.length) {
    let b = Bc(r, p), C = ["row", "col", "depth", "depth2"];
    return `
      ${Mc(b, t8)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${zc(C, u)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${i}, ${a}, ${s}, 1)));
        ${Lc(r)}
      }
    `;
  let c = r.shapeInfo.flatOffset, l = r.shapeInfo.texShape, m = l[0], d = l[1], f = `int stride2 = ${o}Shape[3];`, h = `int stride1 = ${o}Shape[2] * stride2;`, g = `int stride0 = ${o}Shape[1] * stride1;`;
  if (d === i && c == null)
    return t8 ? `
      float ${n}(int row, int col, int depth, int depth2) {
        ${f}
        ${h}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    ` : `
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${a}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;
  if (d === s && c == null)
    return t8 ? `
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    ` : `
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1] * e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;
  let x = vp(o);
  return t8 ? `
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${h}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  ` : `
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${d}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `;
}
function LZ(r) {
  let t8 = r.shapeInfo.logicalShape, e = r.name, o = "get" + e.charAt(0).toUpperCase() + e.slice(1), n = t8[4], s = t8[3] * n, a = t8[2] * s, i = t8[1] * a, { newShape: p, keptDims: u } = y.squeezeShape(t8);
  if (p.length < t8.length) {
    let h = Bc(r, p), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${Mc(h)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${zc(g, u)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${i}, ${a}, ${s}, ${n})) +
          depth3;
        ${Lc(r)}
      }
    `;
  let c = r.shapeInfo.flatOffset, l = r.shapeInfo.texShape, m = l[0], d = l[1];
  if (d === i && c == null)
    return `
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${a}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (d === n && c == null)
    return `
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t8[1] * t8[2] * t8[3]},
               ${t8[2] * t8[3]}, ${t8[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  let f = vp(e);
  return `
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} + depth * ${s} +
          depth2 * ${n} + depth3 + ${f};
      vec2 uv = uvFromFlat(${m}, ${d}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function BZ(r) {
  let t8 = r.shapeInfo.logicalShape, e = r.name, o = "get" + e.charAt(0).toUpperCase() + e.slice(1), { newShape: n, keptDims: s } = y.squeezeShape(t8);
  if (n.length < t8.length) {
    let g = Bc(r, n), x = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${Mc(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${zc(x, s)});
      }
    `;
  }
  let a = t8[5], i = t8[4] * a, p = t8[3] * i, u = t8[2] * p, c = t8[1] * u;
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${p}, ${i})) +
          dot(
            vec2(depth3, depth4),
            vec2(${a}, 1)));
        ${Lc(r)}
      }
    `;
  let l = r.shapeInfo.flatOffset, m = r.shapeInfo.texShape, d = m[0], f = m[1];
  if (f === c && l == null)
    return `
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${p}, ${i}, ${a})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  if (f === a && l == null)
    return `
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t8[1] * t8[2] * t8[3] * t8[4]},
               ${t8[2] * t8[3] * t8[4]},
               ${t8[3] * t8[4]},
               ${t8[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;
  let h = vp(e);
  return `
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${p} +
          depth2 * ${i} + depth3 * ${a} + depth4 + ${h};
      vec2 uv = uvFromFlat(${d}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `;
}
function Lc(r) {
  let t8 = r.name, e = y.sizeFromShape(r.shapeInfo.logicalShape);
  return e < 2 ? `return ${t8};` : `
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t8}[i];
      }
    }
  `;
}
function zZ(r, t8) {
  let e = r.name, o = e.charAt(0).toUpperCase() + e.slice(1), n = "get" + o + "AtOutCoords", s = r.shapeInfo.logicalShape.length, a = t8.logicalShape.length, i = IR(r.shapeInfo.logicalShape, t8.logicalShape), p = Re(a), u = a - s, c, l = ["x", "y", "z", "w", "u", "v"];
  s === 0 ? c = "" : a < 2 && i.length >= 1 ? c = "coords = 0;" : c = i.map((b) => `coords.${l[b + u]} = 0;`).join(`
`);
  let m = "";
  a < 2 && s > 0 ? m = "coords" : m = r.shapeInfo.logicalShape.map((b, C) => `coords.${l[C + u]}`).join(", ");
  let d = "return outputValue;", h = y.sizeFromShape(r.shapeInfo.logicalShape) === 1, x = y.sizeFromShape(t8.logicalShape) === 1;
  if (s === 1 && !h && !x)
    d = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (h && !x)
    a === 1 ? d = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : d = `
        return vec4(outputValue.x);
      `;
  else if (i.length) {
    let b = s - 2, C = s - 1;
    i.indexOf(b) > -1 && i.indexOf(C) > -1 ? d = "return vec4(outputValue.x);" : i.indexOf(b) > -1 ? d = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : i.indexOf(C) > -1 && (d = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${n}() {
      ${p} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${d}
    }
  `;
}
function VZ(r, t8) {
  let e = r.name, o = e.charAt(0).toUpperCase() + e.slice(1), n = "get" + o + "AtOutCoords", s = t8.texShape, a = r.shapeInfo.texShape, i = r.shapeInfo.logicalShape.length, p = t8.logicalShape.length;
  if (!r.shapeInfo.isUniform && i === p && r.shapeInfo.flatOffset == null && y.arraysEqual(a, s))
    return `
      float ${n}() {
        return sampleTexture(${e}, resultUV);
      }
    `;
  let u = Re(p), c = IR(r.shapeInfo.logicalShape, t8.logicalShape), l = p - i, m, d = ["x", "y", "z", "w", "u", "v"];
  i === 0 ? m = "" : p < 2 && c.length >= 1 ? m = "coords = 0;" : m = c.map((h) => `coords.${d[h + l]} = 0;`).join(`
`);
  let f = "";
  return p < 2 && i > 0 ? f = "coords" : f = r.shapeInfo.logicalShape.map((h, g) => `coords.${d[g + l]}`).join(", "), `
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${f});
    }
  `;
}
function Re(r) {
  if (r <= 1)
    return "int";
  if (r === 2)
    return "ivec2";
  if (r === 3)
    return "ivec3";
  if (r === 4)
    return "ivec4";
  if (r === 5)
    return "ivec5";
  if (r === 6)
    return "ivec6";
  throw Error(`GPU for rank ${r} is not yet supported`);
}
function Zf(r, t8, e) {
  let { newShape: o, keptDims: n } = y.squeezeShape(t8), s = t8.length, a = r && s === 3 && t8[0] === 1, i = a ? t8.slice(1) : o, p = !r && s > 1 && !y.arraysEqual(t8, e) && o.length < s || a;
  return { useSqueezeShape: p, uniformShape: p ? i : t8, keptDims: n };
}
function Bc(r, t8) {
  let e = JSON.parse(JSON.stringify(r));
  return e.shapeInfo.logicalShape = t8, e;
}
function zc(r, t8) {
  return t8.map((e) => r[e]).join(", ");
}
function _R(r, t8, e, o) {
  let n = e.map((c, l) => {
    let m = { logicalShape: c.shape, texShape: c.isUniform ? null : c.texData.texShape, isUniform: c.isUniform, isPacked: c.isUniform ? false : c.texData.isPacked, flatOffset: null };
    return c.texData != null && c.texData.slice != null && c.texData.slice.flatOffset > 0 && (m.flatOffset = c.texData.slice.flatOffset), { name: t8.variableNames[l], shapeInfo: m };
  }), s = n.map((c) => c.shapeInfo), a = { logicalShape: o.shape, texShape: o.texData.texShape, isUniform: false, isPacked: o.texData.isPacked, flatOffset: null }, i = vR(n, a, t8), p = $I(r.gl, i), u = r.createProgram(p);
  return A().get("ENGINE_COMPILE_ONLY") ? { program: t8, fragmentShader: p, source: i, webGLProgram: u, inShapeInfos: s, outShapeInfo: a, variablesLocations: null, customUniformLocations: null, infLoc: null, nanLoc: null, outShapeLocation: null, outShapeStridesLocation: null, outTexShapeLocation: null } : (r.buildVao(u), Object.assign({ program: t8, fragmentShader: p, source: i, webGLProgram: u, inShapeInfos: s, outShapeInfo: a }, qI(r, t8, u)));
}
function qI(r, t8, e) {
  let o = [], n = [], s, a, i, p = null, u = null;
  u = r.getUniformLocation(e, "NAN", false), A().getNumber("WEBGL_VERSION") === 1 && (p = r.getUniformLocation(e, "INFINITY", false));
  let c = false;
  for (let l of t8.variableNames) {
    let m = { name: l, uniform: r.getUniformLocation(e, l, c), offset: r.getUniformLocation(e, `offset${l}`, c) };
    t8.enableShapeUniforms && (m.shape = r.getUniformLocation(e, `${l}Shape`, c), m.texShape = r.getUniformLocation(e, `${l}TexShape`, c)), o.push(m);
  }
  if (t8.enableShapeUniforms && (s = r.getUniformLocation(e, "outShape", c), i = r.getUniformLocation(e, "outShapeStrides", c), a = r.getUniformLocation(e, "outTexShape", c)), t8.customUniforms)
    for (let l of t8.customUniforms)
      n.push(r.getUniformLocation(e, l.name, c));
  return { variablesLocations: o, customUniformLocations: n, infLoc: p, nanLoc: u, outShapeLocation: s, outShapeStridesLocation: i, outTexShapeLocation: a };
}
function TR(r, t8) {
  if (r.length !== t8.length)
    throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${t8.length} inputs`);
  r.forEach((e, o) => {
    let n = e.logicalShape, s = t8[o], a = s.shape;
    if (!y.arraysEqual(n, a))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${a} must match`);
    if (e.isUniform && s.isUniform)
      return;
    let i = e.texShape, p = s.isUniform ? null : s.texData.texShape;
    if (!y.arraysEqual(i, p))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${p} must match`);
  });
}
function $R(r, t8, e, o, n) {
  t8.program.enableShapeUniforms || (TR(t8.inShapeInfos, e), TR([t8.outShapeInfo], [o]));
  let s = o.texData.texture, a = o.texData.texShape;
  o.texData.isPacked ? r.setOutputPackedMatrixTexture(s.texture, a[0], a[1]) : r.setOutputMatrixTexture(s.texture, a[0], a[1]), r.setProgram(t8.webGLProgram), r.bindVertexArray(t8.webGLProgram.vao), A().getNumber("WEBGL_VERSION") === 1 && t8.infLoc !== null && r.gl.uniform1f(t8.infLoc, 1 / 0), t8.nanLoc !== null && r.gl.uniform1f(t8.nanLoc, NaN);
  for (let p = 0; p < e.length; ++p) {
    let u = e[p], { uniform: c, offset: l, shape: m, texShape: d } = t8.variablesLocations[p];
    if (m) {
      let { uniformShape: f } = Zf(t8.program.packedInputs, u.shape, u.texData.texShape);
      switch (f.length) {
        case 1:
          r.gl.uniform1iv(m, new Int32Array(f));
          break;
        case 2:
          r.gl.uniform2iv(m, new Int32Array(f));
          break;
        case 3:
          r.gl.uniform3iv(m, new Int32Array(f));
          break;
        case 4:
          r.gl.uniform4iv(m, new Int32Array(f));
          break;
        default:
          break;
      }
    }
    if (d && r.gl.uniform2i(d, u.texData.texShape[0], u.texData.texShape[1]), c != null) {
      if (u.isUniform) {
        if (y.sizeFromShape(u.shape) < 2)
          r.gl.uniform1f(c, u.uniformValues[0]);
        else {
          let f = u.uniformValues;
          f instanceof Float32Array || (f = new Float32Array(f)), r.gl.uniform1fv(c, f);
        }
        continue;
      }
      u.texData.slice != null && l != null && r.gl.uniform1i(l, u.texData.slice.flatOffset), r.setInputMatrixTexture(u.texData.texture.texture, c, p);
    }
  }
  let i = t8.outShapeLocation;
  if (i)
    switch (o.shape.length) {
      case 1:
        r.gl.uniform1iv(i, new Int32Array(o.shape));
        break;
      case 2:
        r.gl.uniform2iv(i, new Int32Array(o.shape));
        break;
      case 3:
        r.gl.uniform3iv(i, new Int32Array(o.shape));
        break;
      case 4:
        r.gl.uniform4iv(i, new Int32Array(o.shape));
        break;
      default:
        break;
    }
  if (t8.outShapeStridesLocation) {
    let p = y.computeStrides(o.shape);
    switch (o.shape.length) {
      case 2:
        r.gl.uniform1iv(t8.outShapeStridesLocation, new Int32Array(p));
        break;
      case 3:
        r.gl.uniform2iv(t8.outShapeStridesLocation, new Int32Array(p));
        break;
      case 4:
        r.gl.uniform3iv(t8.outShapeStridesLocation, new Int32Array(p));
        break;
      default:
        break;
    }
  }
  if (t8.outTexShapeLocation && r.gl.uniform2i(t8.outTexShapeLocation, o.texData.texShape[0], o.texData.texShape[1]), t8.program.customUniforms && n)
    for (let p = 0; p < t8.program.customUniforms.length; ++p) {
      let u = t8.program.customUniforms[p], c = t8.customUniformLocations[p], l = n[p];
      if (u.type === "float")
        r.gl.uniform1fv(c, l);
      else if (u.type === "vec2")
        r.gl.uniform2fv(c, l);
      else if (u.type === "vec3")
        r.gl.uniform3fv(c, l);
      else if (u.type === "vec4")
        r.gl.uniform4fv(c, l);
      else if (u.type === "int")
        r.gl.uniform1iv(c, l);
      else if (u.type === "ivec2")
        r.gl.uniform2iv(c, l);
      else if (u.type === "ivec3")
        r.gl.uniform3iv(c, l);
      else if (u.type === "ivec4")
        r.gl.uniform4iv(c, l);
      else
        throw Error(`uniform type ${u.type} is not supported yet.`);
    }
  r.executeProgram();
}
function ER(r, t8, e) {
  let o = "";
  t8.concat(e).forEach((a) => {
    let i = a.texData != null && a.texData.slice != null && a.texData.slice.flatOffset > 0;
    if (r.enableShapeUniforms && !a.isUniform) {
      let p = a.texData.texShape, { useSqueezeShape: u, uniformShape: c, keptDims: l } = Zf(r.packedInputs, a.shape, p), m = "", d = "", f = "";
      if (c.length === 1 && r.packedInputs) {
        let k = [Math.ceil(p[0] / 2), Math.ceil(p[1] / 2)];
        m = `${k[0] > 1}_${k[1] > 1}`;
      } else if (c.length === 2 && !r.packedInputs)
        d = `${c[0] > 1}_${c[1] > 1}`;
      else if (c.length > 2 && !r.packedInputs) {
        let k = y.computeStrides(c);
        f = `${k[0] === p[1]}_${k[k.length - 1] === p[1]}`;
      }
      let h = a.shape.length, g = c.length === 2 && y.arraysEqual(a.shape, p), x = y.sizeFromShape(a.shape) === 1, b = w.getBroadcastDims(a.shape, e.shape), C = !r.packedInputs && h === e.shape.length && y.arraysEqual(p, e.texData.texShape), S = r.packedInputs || c.length > 2 ? "" : `${p[0] > 1}_${p[1] > 1}`;
      o += `${h}_${C}_${u ? l : ""}_${c.length}_${x}_${b}_${g}_${m}_${d}_${f}_${S}_${i}`;
    } else {
      let p = a.isUniform ? "uniform" : a.texData.texShape;
      o += `${a.shape}_${p}_${i}`;
    }
  });
  let n = r.userCode, s = r.constructor.name;
  return s += "_" + o + "_" + n + `${A().getNumber("WEBGL_VERSION")}`, s;
}
function pt(r) {
  return A().getBool("WEBGL_USE_SHAPES_UNIFORMS") && r <= 4;
}
var Jf = class {
  constructor(t8) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = bu.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let e = vt();
    this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Ip(["r", "c", "d"], t8) : Ws(["r", "c", "d"], t8)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `;
  }
};
var eh = class {
  constructor(t8) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = bu.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let e = vt();
    this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Ip(["r", "c", "d"], t8) : Ws(["r", "c", "d"], t8)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `;
  }
};
var th = class {
  constructor(t8) {
    this.variableNames = ["A"], this.outTexUsage = dr.DOWNLOAD;
    let e = vt();
    this.outputShape = t8, this.userCode = `
      ${Qf}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `;
  }
};
var rh = class {
  constructor(t8) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = dr.DOWNLOAD;
    let e = vt();
    this.outputShape = t8, this.userCode = `
      ${Qf}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `;
  }
};
var GZ = { R: 0, G: 1, B: 2, A: 3 };
var Zl = class {
  constructor(t8, e = false, o = "RGBA") {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let n = vt();
    this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length);
    let s = "result";
    e && (s = "floor(result * 255. + 0.5)");
    let a = "";
    for (let i = 0; i < o.length; i++) {
      let p = o[i];
      a += `
          if(offset == ${i}) {
            result = values[${GZ[p]}];
          }`;
    }
    this.userCode = `
      ${this.enableShapeUniforms ? Pc() : Fc(t8)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${o.length});

        flatIndex = idiv(flatIndex, ${o.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${n.texture2D}(A, uv);
          ${a}
        }
        ${n.output} = vec4(${s}, 0., 0., 0.);
      }
    `;
  }
};
var oh = class {
  constructor(t8, e = false) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let o = vt();
    this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length);
    let n = "", s = "result";
    e && (s = "floor(result * 255. + 0.5)");
    for (let a = 0; a <= 1; a++)
      for (let i = 0; i <= 1; i++) {
        let p = a * 2 + i;
        n += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${t8[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${a} < ${this.enableShapeUniforms ? "outShape[1]" : `${t8[1]}`}) {
            localCoords[1] += ${a};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${p}] = values[0];
            } else if (offset == 1) {
              result[${p}] = values[1];
            } else if (offset == 2) {
              result[${p}] = values[2];
            } else {
              result[${p}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? Pc() : Fc(t8)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `;
  }
};
var cv = {};
qe(cv, { bindVertexProgramAttributeStreams: () => rv, createBufferFromOutputTexture: () => sv, createFloat16MatrixTexture: () => ZI, createFloat16PackedMatrixTexture: () => tv, createFloat32MatrixTexture: () => QI, createIndexBuffer: () => YI, createPackedMatrixTexture: () => ev, createUnsignedBytesMatrixTexture: () => JI, createVertexBuffer: () => XI, createVertexShader: () => jI, downloadByteEncodedFloatMatrixFromOutputTexture: () => iv, downloadFloat32MatrixFromBuffer: () => av, downloadMatrixFromPackedOutputTexture: () => pv, downloadPackedMatrixFromBuffer: () => uv, getInternalFormatForFloat16MatrixTexture: () => sh, getInternalFormatForFloat16PackedMatrixTexture: () => uh, getInternalFormatForFloat32MatrixTexture: () => nh, getInternalFormatForPackedMatrixTexture: () => ih, getInternalFormatForUnsignedBytesMatrixTexture: () => ah, uploadDenseMatrixToTexture: () => ov, uploadPixelDataToTexture: () => nv });
function jI(r) {
  let t8 = vt(), e = `${t8.version}
    precision highp float;
    ${t8.attribute} vec3 clipSpacePos;
    ${t8.attribute} vec2 uv;
    ${t8.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return _I(r, e);
}
function XI(r) {
  let t8 = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return DI(r, t8);
}
function YI(r) {
  let t8 = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return AI(r, t8);
}
function Jl(r, t8, e, o, n, s) {
  PI(t8, e);
  let a = FI(r), i = r.TEXTURE_2D;
  return ce(r, () => r.bindTexture(i, a)), ce(r, () => r.texParameteri(i, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE)), ce(r, () => r.texParameteri(i, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE)), ce(r, () => r.texParameteri(i, r.TEXTURE_MIN_FILTER, r.NEAREST)), ce(r, () => r.texParameteri(i, r.TEXTURE_MAG_FILTER, r.NEAREST)), A().getNumber("WEBGL_VERSION") === 1 ? ce(r, () => r.texImage2D(i, 0, o, t8, e, 0, n, s, null)) : ce(r, () => r.texStorage2D(i, 1, o, t8, e)), ce(r, () => r.bindTexture(r.TEXTURE_2D, null)), { texture: a, texShape: [e, t8] };
}
function nh(r) {
  return r.internalFormatFloat;
}
function QI(r, t8, e, o) {
  let [n, s] = Sp(t8, e);
  return Jl(r, n, s, nh(o), o.textureFormatFloat, r.FLOAT);
}
function sh(r) {
  return r.internalFormatHalfFloat;
}
function ZI(r, t8, e, o) {
  let [n, s] = Sp(t8, e);
  return Jl(r, n, s, sh(o), o.textureFormatFloat, o.textureTypeHalfFloat);
}
function ah(r) {
  return r.downloadTextureFormat;
}
function JI(r, t8, e, o) {
  let [n, s] = Sp(t8, e);
  return Jl(r, n, s, ah(o), r.RGBA, r.UNSIGNED_BYTE);
}
function ih(r) {
  return r.internalFormatPackedFloat;
}
function ev(r, t8, e, o) {
  let [n, s] = La(t8, e);
  return Jl(r, n, s, ih(o), r.RGBA, r.FLOAT);
}
function uh(r) {
  return r.internalFormatPackedHalfFloat;
}
function tv(r, t8, e, o) {
  let [n, s] = La(t8, e);
  return Jl(r, n, s, uh(o), r.RGBA, o.textureTypeHalfFloat);
}
function rv(r, t8, e) {
  return ce(r, () => r.bindBuffer(r.ARRAY_BUFFER, e)), jf(r, t8, "clipSpacePos", e, 3, 20, 0) && jf(r, t8, "uv", e, 2, 20, 12);
}
function ov(r, t8, e, o, n, s) {
  ce(r, () => r.bindTexture(r.TEXTURE_2D, t8));
  let a, i, p;
  n instanceof Uint8Array ? (a = new Uint8Array(e * o * 4), i = r.UNSIGNED_BYTE, p = r.RGBA) : (a = new Float32Array(e * o * 4), i = r.FLOAT, p = s.internalFormatPackedFloat), a.set(n), A().getNumber("WEBGL_VERSION") === 2 ? ce(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, e, o, r.RGBA, i, a)) : ce(r, () => r.texImage2D(r.TEXTURE_2D, 0, p, e, o, 0, r.RGBA, i, a)), ce(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function nv(r, t8, e) {
  ce(r, () => r.bindTexture(r.TEXTURE_2D, t8)), e.data instanceof Uint8Array ? A().getNumber("WEBGL_VERSION") === 2 ? ce(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, e.width, e.height, r.RGBA, r.UNSIGNED_BYTE, e.data)) : ce(r, () => r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, e.width, e.height, 0, r.RGBA, r.UNSIGNED_BYTE, e.data)) : A().getNumber("WEBGL_VERSION") === 2 ? ce(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, r.RGBA, r.UNSIGNED_BYTE, e)) : ce(r, () => r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, r.RGBA, r.UNSIGNED_BYTE, e)), ce(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function sv(r, t8, e, o) {
  let n = r.createBuffer();
  ce(r, () => r.bindBuffer(r.PIXEL_PACK_BUFFER, n));
  let i = 4 * 4 * t8 * e;
  return ce(r, () => r.bufferData(r.PIXEL_PACK_BUFFER, i, r.STREAM_READ)), ce(r, () => r.readPixels(0, 0, e, t8, r.RGBA, r.FLOAT, 0)), ce(r, () => r.bindBuffer(r.PIXEL_PACK_BUFFER, null)), n;
}
function av(r, t8, e) {
  let o = r, n = new Float32Array(e);
  return o.bindBuffer(o.PIXEL_PACK_BUFFER, t8), o.getBufferSubData(o.PIXEL_PACK_BUFFER, 0, n), o.bindBuffer(o.PIXEL_PACK_BUFFER, null), n;
}
function iv(r, t8, e, o) {
  let [n, s] = Sp(t8, e), a = 4, i = new Uint8Array(gR(t8 * e, a));
  return ce(r, () => r.readPixels(0, 0, n, s, o.downloadTextureFormat, r.UNSIGNED_BYTE, i)), new Float32Array(i.buffer);
}
function uv(r, t8, e, o, n, s, a, i) {
  let p = r, u = new Float32Array(xR(s, a));
  return p.bindBuffer(p.PIXEL_PACK_BUFFER, t8), p.getBufferSubData(p.PIXEL_PACK_BUFFER, 0, u), p.bindBuffer(p.PIXEL_PACK_BUFFER, null), u;
}
function pv(r, t8, e) {
  let o = new Float32Array(t8 * e * 4);
  return ce(r, () => r.readPixels(0, 0, e, t8, r.RGBA, r.FLOAT, o)), o;
}
var kp = class {
  constructor(t8) {
    this.outputTexture = null, this.program = null, this.disposed = false, this.itemsToPoll = [];
    let e = A().getNumber("WEBGL_VERSION");
    if (t8 != null ? (this.gl = t8, vI(e, t8)) : this.gl = Kr(e), t8 = this.gl, A().getNumber("WEBGL_VERSION") === 2) {
      let s = t8;
      this.createVertexArray = () => ce(s, () => s.createVertexArray()), this.bindVertexArray = (a) => ce(s, () => s.bindVertexArray(a)), this.deleteVertexArray = (a) => ce(s, () => s.deleteVertexArray(a)), this.getVertexArray = () => ce(s, () => s.getParameter(s.VERTEX_ARRAY_BINDING));
    } else if (t8 != null) {
      let s = t8.getExtension("OES_vertex_array_object");
      if (s == null)
        throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");
      this.createVertexArray = () => ce(t8, () => s.createVertexArrayOES()), this.bindVertexArray = (a) => ce(t8, () => s.bindVertexArrayOES(a)), this.deleteVertexArray = (a) => ce(t8, () => s.deleteVertexArrayOES(a)), this.getVertexArray = () => ce(t8, () => t8.getParameter(s.VERTEX_ARRAY_BINDING_OES));
    }
    let o = "WEBGL_color_buffer_float", n = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), A().getNumber("WEBGL_VERSION") === 1) {
      let s = "OES_texture_float", a = "OES_texture_half_float";
      if (this.textureFloatExtension = Ec(this.gl, s), qr(this.gl, a))
        this.textureHalfFloatExtension = Ec(this.gl, a);
      else if (A().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(o), qr(this.gl, n))
        this.colorBufferHalfFloatExtension = Ec(this.gl, n);
      else if (A().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (o = "EXT_color_buffer_float", qr(this.gl, o))
      this.colorBufferFloatExtension = this.gl.getExtension(o);
    else if (qr(this.gl, n))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(n);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = XI(this.gl), this.indexBuffer = YI(this.gl), this.framebuffer = OI(this.gl), this.textureConfig = Xl(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return A().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    let t8 = this.gl;
    ce(t8, () => t8.finish()), ce(t8, () => t8.bindFramebuffer(t8.FRAMEBUFFER, null)), ce(t8, () => t8.deleteFramebuffer(this.framebuffer)), ce(t8, () => t8.bindBuffer(t8.ARRAY_BUFFER, null)), ce(t8, () => t8.bindBuffer(t8.ELEMENT_ARRAY_BUFFER, null)), ce(t8, () => t8.deleteBuffer(this.indexBuffer)), this.disposed = true;
  }
  createFloat32MatrixTexture(t8, e) {
    return this.throwIfDisposed(), QI(this.gl, t8, e, this.textureConfig);
  }
  createFloat16MatrixTexture(t8, e) {
    return this.throwIfDisposed(), ZI(this.gl, t8, e, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(t8, e) {
    return this.throwIfDisposed(), JI(this.gl, t8, e, this.textureConfig);
  }
  uploadPixelDataToTexture(t8, e) {
    this.throwIfDisposed(), nv(this.gl, t8, e);
  }
  uploadDenseMatrixToTexture(t8, e, o, n) {
    this.throwIfDisposed(), ov(this.gl, t8, e, o, n, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(t8, e) {
    return this.throwIfDisposed(), tv(this.gl, t8, e, this.textureConfig);
  }
  createPackedMatrixTexture(t8, e) {
    return this.throwIfDisposed(), ev(this.gl, t8, e, this.textureConfig);
  }
  deleteMatrixTexture(t8) {
    this.throwIfDisposed(), this.outputTexture === t8 && (Xf(this.gl, this.framebuffer), this.outputTexture = null), ce(this.gl, () => this.gl.deleteTexture(t8));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(t8, e, o) {
    return this.downloadMatrixDriver(t8, () => iv(this.gl, e, o, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(t8, e, o, n, s, a) {
    return uv(this.gl, t8, e, o, n, s, a, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(t8, e) {
    return av(this.gl, t8, e);
  }
  createBufferFromTexture(t8, e, o) {
    this.bindTextureToFrameBuffer(t8);
    let n = sv(this.gl, e, o, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), n;
  }
  createAndWaitForFence() {
    let t8 = this.createFence(this.gl);
    return this.pollFence(t8);
  }
  createFence(t8) {
    let e, o;
    if (A().getBool("WEBGL_FENCE_API_ENABLED")) {
      let n = t8, s = n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE, 0);
      t8.flush(), o = () => {
        let a = n.clientWaitSync(s, 0, 0);
        return a === n.ALREADY_SIGNALED || a === n.CONDITION_SATISFIED;
      }, e = s;
    } else
      A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e = this.beginQuery(), this.endQuery(), o = () => this.isQueryAvailable(e, A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : o = () => true;
    return { query: e, isFencePassed: o };
  }
  downloadMatrixFromPackedTexture(t8, e, o) {
    return this.downloadMatrixDriver(t8, () => pv(this.gl, e, o));
  }
  createProgram(t8) {
    this.throwIfDisposed();
    let e = this.gl;
    this.vertexShader == null && (this.vertexShader = jI(e));
    let o = EI(e);
    ce(e, () => e.attachShader(o, this.vertexShader)), ce(e, () => e.attachShader(o, t8)), RI(e, o);
    let n = Object.assign(o, { vao: this.createVertexArray() });
    return this.debug && Yl(e, n), n;
  }
  buildVao(t8) {
    this.setProgram(t8), this.bindVertexArray(t8.vao);
    let e = this.gl;
    ce(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), rv(e, t8, this.vertexBuffer);
  }
  deleteProgram(t8) {
    this.throwIfDisposed(), t8 === this.program && (this.program = null), t8 != null && (ce(this.gl, () => this.gl.deleteProgram(t8)), this.deleteVertexArray(t8.vao));
  }
  setProgram(t8) {
    this.throwIfDisposed(), this.program = t8, this.program != null && this.debug && Yl(this.gl, this.program), ce(this.gl, () => this.gl.useProgram(t8));
  }
  getUniformLocation(t8, e, o = true) {
    return this.throwIfDisposed(), o ? MI(this.gl, t8, e) : LI(this.gl, t8, e);
  }
  getAttributeLocation(t8, e) {
    return this.throwIfDisposed(), ce(this.gl, () => this.gl.getAttribLocation(t8, e));
  }
  getUniformLocationNoThrow(t8, e) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(t8, e);
  }
  setInputMatrixTexture(t8, e, o) {
    this.throwIfDisposed(), this.throwIfNoProgram(), BI(this.gl, t8, e, o);
  }
  setOutputMatrixTexture(t8, e, o) {
    this.setOutputMatrixTextureDriver(t8, o, e);
  }
  setOutputPackedMatrixTexture(t8, e, o) {
    this.throwIfDisposed();
    let [n, s] = La(e, o);
    this.setOutputMatrixTextureDriver(t8, n, s);
  }
  setOutputMatrixWriteRegion(t8, e, o, n) {
    this.setOutputMatrixWriteRegionDriver(o, t8, n, e);
  }
  setOutputPackedMatrixWriteRegion(t8, e, o, n) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && Yl(this.gl, this.program), Rc(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    let t8 = this.gl;
    if (this.debug) {
      let e = this.getVertexArray();
      console.assert(e === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate();
    }
    ce(t8, () => t8.drawElements(t8.TRIANGLES, 6, t8.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), ce(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = Ec(this.gl, A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let o = this.gl, n = this.getQueryTimerExtensionWebGL2(), s = o.createQuery();
      return o.beginQuery(n.TIME_ELAPSED_EXT, s), s;
    }
    let t8 = this.getQueryTimerExtensionWebGL1(), e = t8.createQueryEXT();
    return t8.beginQueryEXT(t8.TIME_ELAPSED_EXT, e), e;
  }
  endQuery() {
    if (A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let e = this.gl, o = this.getQueryTimerExtensionWebGL2();
      e.endQuery(o.TIME_ELAPSED_EXT);
      return;
    }
    let t8 = this.getQueryTimerExtensionWebGL1();
    t8.endQueryEXT(t8.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(t8) {
    return await y.repeatedTry(() => this.disposed || this.isQueryAvailable(t8, A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(t8, A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(t8, e) {
    if (e === 0)
      return null;
    if (e === 2) {
      let o = this.gl;
      return o.getQueryParameter(t8, o.QUERY_RESULT) / 1e6;
    } else {
      let o = this.getQueryTimerExtensionWebGL1();
      return o.getQueryObjectEXT(t8, o.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(t8, e) {
    if (e === 0)
      return true;
    if (e === 2) {
      let o = this.gl, n = this.getQueryTimerExtensionWebGL2(), s = o.getQueryParameter(t8, o.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), s && !this.disjoint;
    } else {
      let o = this.getQueryTimerExtensionWebGL1(), n = o.getQueryObjectEXT(t8, o.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(o.GPU_DISJOINT_EXT)), n && !this.disjoint;
    }
  }
  pollFence(t8) {
    return new Promise((e) => {
      this.addItemToPoll(() => t8.isFencePassed(), () => e());
    });
  }
  pollItems() {
    let t8 = HZ(this.itemsToPoll.map((e) => e.isDoneFn));
    for (let e = 0; e <= t8; ++e) {
      let { resolveFn: o } = this.itemsToPoll[e];
      o();
    }
    this.itemsToPoll = this.itemsToPoll.slice(t8 + 1);
  }
  addItemToPoll(t8, e) {
    if (this.itemsToPoll.push({ isDoneFn: t8, resolveFn: e }), this.itemsToPoll.length > 1)
      return;
    let o;
    "setTimeoutCustom" in A().platform && (o = A().platform.setTimeoutCustom.bind(A().platform)), y.repeatedTry(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, o);
  }
  bindTextureToFrameBuffer(t8) {
    this.throwIfDisposed(), Ql(this.gl, t8, this.framebuffer), this.debug && Rc(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (Ql(this.gl, this.outputTexture, this.framebuffer), this.debug && Rc(this.gl)) : Xf(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(t8, e) {
    this.bindTextureToFrameBuffer(t8);
    let o = e();
    return this.unbindTextureToFrameBuffer(), o;
  }
  setOutputMatrixTextureDriver(t8, e, o) {
    this.throwIfDisposed();
    let n = this.gl;
    Ql(n, t8, this.framebuffer), this.debug && Rc(n), this.outputTexture = t8, ce(n, () => n.viewport(0, 0, e, o)), ce(n, () => n.scissor(0, 0, e, o));
  }
  setOutputMatrixWriteRegionDriver(t8, e, o, n) {
    this.throwIfDisposed(), ce(this.gl, () => this.gl.scissor(t8, e, o, n));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
};
function HZ(r) {
  let t8 = 0;
  for (; t8 < r.length && r[t8](); ++t8)
    ;
  return t8 - 1;
}
var { addImpl: RR, bincountImpl: ph, bincountReduceImpl: DR, bitwiseAndImpl: AR, castImpl: FR, ceilImpl: PR, concatImpl: OR, equalImpl: MR, expImpl: LR, expm1Impl: BR, floorImpl: zR, gatherNdImpl: VR, gatherV2Impl: WR, greaterImpl: UR, greaterEqualImpl: GR, lessImpl: HR, lessEqualImpl: KR, linSpaceImpl: qR, logImpl: jR, maxImpl: XR, maximumImpl: YR, minimumImpl: QR, multiplyImpl: ZR, negImpl: JR, notEqualImpl: eD, prodImpl: tD, raggedGatherImpl: rD, raggedRangeImpl: oD, raggedTensorToTensorImpl: nD, rangeImpl: sD, rsqrtImpl: aD, scatterImpl: iD, sigmoidImpl: uD, simpleAbsImpl: ch, sliceImpl: pD, sparseFillEmptyRowsImpl: cD, sparseReshapeImpl: lD, sparseSegmentReductionImpl: lh, sqrtImpl: mD, staticRegexReplaceImpl: dD, stridedSliceImpl: fD, stringNGramsImpl: hD, stringSplitImpl: gD, stringToHashBucketFastImpl: xD, subImpl: yD, tileImpl: bD, topKImpl: CD, transposeImpl: Np, uniqueImpl: wD } = Tc;
function lv(r, t8) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, t8).map((e) => `${r}.${e}`);
}
function Dt(r, t8) {
  return t8 === 1 ? [r] : lv(r, t8);
}
function SD(r, t8) {
  if (r === 1)
    return "rc";
  let e = "";
  for (let o = 0; o < r; o++)
    e += t8[o], o < r - 1 && (e += ",");
  return e;
}
var mh = class {
  constructor(t8) {
    if (this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outputShape = t8, this.rank = t8.length, this.enableShapeUniforms = pt(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      let e = Dt("rc", this.rank), o = Re(this.rank), n = this.getOutOfBoundsCondition(e), s = this.getSetup(e), a = this.getOutput(e);
      this.userCode = `
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${a}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(t8) {
    let e = [];
    for (let o = 0; o <= 1; o++)
      for (let n = 0; n <= 1; n++) {
        let s = `${o === 0 ? "r" : "rp1"}, ${n === 0 ? "c" : "cp1"}`;
        for (let a = 2; a < this.rank; a++)
          s = `${t8[t8.length - 1 - a]},` + s;
        e.push(s);
      }
    return e;
  }
  getOutOfBoundsCondition(t8) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let e = "";
    for (let o = this.rank - 2; o < this.rank; o++)
      e += `${t8[o]} >= ${this.enableShapeUniforms ? `outShape[${o}]` : this.outputShape[o]}`, o < this.rank - 1 && (e += "||");
    return e;
  }
  getSetup(t8) {
    if (this.rank === 1)
      return "";
    let e = t8.slice(-2), o = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], n = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `;
  }
  getOutput(t8) {
    let e = this.getSourceCoordsArr(t8);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`;
  }
};
var Vc = class {
  constructor(t8, e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length);
    let o = "";
    for (let n = 0; n < 4; n++) {
      let s = "thisRC = rc;";
      n % 2 === 1 && (s += "thisRC.z += 1;"), n > 1 && (s += "thisRC.y += 1;"), o += `
        ${s}
        ${n > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${KZ(e, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? Pc() : Fc(t8)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : t8[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : t8[2]};

        ${o}

        setOutput(result);
      }
    `;
  }
};
function KZ(r, t8) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t8 ? SR(["r", "c", "d"], "inputShape") : Ws(["r", "c", "d"], r)}
      return ivec3(r, c, d);
    }
  `;
}
var dh = class {
  constructor(t8) {
    this.gpgpu = t8, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.usedTextures = {}, this.logEnabled = false;
  }
  acquireTexture(t8, e, o) {
    let n = vD(e, o), s = kD(t8, n, o);
    s in this.freeTextures || (this.freeTextures[s] = []), s in this.usedTextures || (this.usedTextures[s] = []);
    let a = ID(t8, n, this.gpgpu.gl, this.gpgpu.textureConfig, o);
    if (this.freeTextures[s].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= a, this.log();
      let p = this.freeTextures[s].pop();
      return this.usedTextures[s].push(p), p;
    }
    let i;
    return n === rr.PACKED_2X2_FLOAT32 ? i = this.gpgpu.createPackedMatrixTexture(t8[0], t8[1]) : n === rr.PACKED_2X2_FLOAT16 ? i = this.gpgpu.createFloat16PackedMatrixTexture(t8[0], t8[1]) : n === rr.UNPACKED_FLOAT32 ? i = this.gpgpu.createFloat32MatrixTexture(t8[0], t8[1]) : n === rr.UNPACKED_FLOAT16 ? i = this.gpgpu.createFloat16MatrixTexture(t8[0], t8[1]) : n === rr.PACKED_4X1_UNSIGNED_BYTE && (i = this.gpgpu.createUnsignedBytesMatrixTexture(t8[0], t8[1])), this.usedTextures[s].push(i), this.numUsedTextures++, this._numBytesAllocated += a, this.log(), i;
  }
  releaseTexture(t8, e, o, n) {
    if (this.freeTextures == null)
      return;
    let s = vD(o, n), a = kD(e, s, n);
    a in this.freeTextures || (this.freeTextures[a] = []);
    let i = ID(e, s, this.gpgpu.gl, this.gpgpu.textureConfig, n), p = A().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");
    p !== -1 && this._numBytesAllocated > p ? (this.gpgpu.deleteMatrixTexture(t8.texture), this._numBytesAllocated -= i) : (this.freeTextures[a].push(t8), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--;
    let u = this.usedTextures[a], c = u && u.indexOf(t8);
    if (c == null || c < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    u[c] = u[u.length - 1], u.pop(), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    let t8 = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${t8})`);
    let e = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * e)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (let t8 in this.freeTextures)
        this.freeTextures[t8].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      for (let t8 in this.usedTextures)
        this.usedTextures[t8].forEach((e) => {
          this.gpgpu.deleteMatrixTexture(e.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
};
function qZ(r, t8) {
  let e = r;
  if (t8 === e.R32F)
    return 4;
  if (t8 === e.R16F)
    return 2;
  if (t8 === e.RGBA32F)
    return 16;
  if (t8 === r.RGBA)
    return 16;
  if (t8 === e.RGBA16F)
    return 8;
  if (t8 === e.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${t8}`);
}
function ID(r, t8, e, o, n) {
  let s = jZ(t8, o), a;
  if (n) {
    let [p, u] = La(r[0], r[1]);
    a = p * u;
  } else {
    let [p, u] = Sp(r[0], r[1]);
    a = p * u;
  }
  let i = qZ(e, s);
  return a * i;
}
function jZ(r, t8) {
  switch (r) {
    case rr.PACKED_2X2_FLOAT32:
      return ih(t8);
    case rr.PACKED_2X2_FLOAT16:
      return uh(t8);
    case rr.UNPACKED_FLOAT32:
      return nh(t8);
    case rr.UNPACKED_FLOAT16:
      return sh(t8);
    case rr.PACKED_4X1_UNSIGNED_BYTE:
      return ah(t8);
    default:
      throw new Error(`Unknown physical texture type ${r}`);
  }
}
function XZ(r) {
  return A().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? r ? rr.PACKED_2X2_FLOAT32 : rr.UNPACKED_FLOAT32 : r ? rr.PACKED_2X2_FLOAT16 : rr.UNPACKED_FLOAT16;
}
function vD(r, t8) {
  if (r === dr.UPLOAD)
    return rr.PACKED_2X2_FLOAT32;
  if (r === dr.RENDER || r == null)
    return XZ(t8);
  if (r === dr.DOWNLOAD || r === dr.PIXELS)
    return rr.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${r}`);
}
function kD(r, t8, e) {
  return `${r[0]}_${r[1]}_${t8}_${e}`;
}
var or = class {
  constructor(t8, e) {
    this.variableNames = ["A"], this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var Ut = "if (isnan(x)) return x;";
var ND = "return x;";
var mv = "return abs(x);";
var TD = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var _D = Ut + `
  return (x < 0.0) ? 0.0 : x;
`;
var $D = Ut + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var Ba = "return x;";
var ED = "return 1.0 / (1.0 + exp(-1.0 * x));";
var DD = "return x;";
var AD = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var FD = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var PD = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var OD = "return 1.0 / (1.0 + exp(-1.0 * x));";
var Fr = class {
  constructor(t8, e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var fh = class {
  constructor(t8) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length);
    let e = t8.length, o = Dt("rc", e), n = Re(e), s = SD(e, o), a = o.slice(-2), i = e <= 1 ? "rc" : `vec2(${a.join(",")})`;
    this.userCode = `
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${i}));
      }
    `;
  }
};
var QZ = Wt.whereImpl;
var ZZ = 1e-7;
var JZ = 1e-4;
var hh = {};
function e9(r) {
  return r in hh || (hh[r] = {}), hh[r];
}
var t9 = A().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");
var r9 = 600;
function o9() {
  return A().global.screen == null ? 1024 : A().global.screen.height * A().global.screen.width * window.devicePixelRatio * r9 / 1024 / 1024;
}
var wu = class extends ao {
  nextDataId() {
    return wu.nextDataId++;
  }
  constructor(t8) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = false, this.pendingDeletes = 0, this.disposed = false, !A().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let e;
    if (t8 != null) {
      if (t8 instanceof kp)
        e = t8;
      else {
        let o = Kr(A().getNumber("WEBGL_VERSION"), t8);
        e = new kp(o);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = false;
    } else {
      let o = Kr(A().getNumber("WEBGL_VERSION"));
      e = new kp(o), this.binaryCache = e9(A().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = true;
    }
    this.gpgpu = e, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new dh(this.gpgpu), this.numMBBeforeWarning = o9(), this.texData = new zo(this, pr());
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  writeTexture(t8, e, o, n, s, a) {
    let i = this.makeTensorInfo(e, o), p = this.texData.get(i.dataId);
    p.isPacked = false, p.texture = { texture: t8, texShape: [n, s] }, p.texShape = [n, s];
    let u = Dc(e), c = new Zl(u, false, a), l = this.runWebGLProgram(c, [i], o, [[n, s]]);
    return l.shape = e, p.texture = null, this.disposeIntermediateTensorInfo(i), l.dataId;
  }
  write(t8, e, o) {
    if ((A().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || A().getBool("DEBUG")) && this.checkNumericalProblems(t8), o === "complex64" && t8 != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let n = { id: this.nextDataId() };
    return this.texData.set(n, { shape: e, dtype: o, values: t8, usage: dr.UPLOAD, refCount: 1 }), n;
  }
  refCount(t8) {
    return this.texData.has(t8) ? this.texData.get(t8).refCount : 0;
  }
  incRef(t8) {
    let e = this.texData.get(t8);
    e.refCount++;
  }
  decRef(t8) {
    if (this.texData.has(t8)) {
      let e = this.texData.get(t8);
      e.refCount--;
    }
  }
  move(t8, e, o, n, s) {
    if (A().getBool("DEBUG") && this.checkNumericalProblems(e), n === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(t8, { shape: o, dtype: n, values: e, usage: dr.UPLOAD, refCount: s });
  }
  disposeIntermediateTensorInfo(t8) {
    this.disposeData(t8.dataId);
  }
  readSync(t8) {
    let e = this.texData.get(t8), { values: o, dtype: n, complexTensorInfos: s, slice: a, shape: i, isPacked: p } = e;
    if (a != null) {
      let m;
      p ? m = new Fr(i, Ba) : m = new or(i, Ba);
      let d = this.runWebGLProgram(m, [{ dataId: t8, shape: i, dtype: n }], n), f = this.readSync(d.dataId);
      return this.disposeIntermediateTensorInfo(d), f;
    }
    if (o != null)
      return this.convertAndCacheOnCPU(t8);
    if (n === "string")
      return o;
    let u = this.activeTimers != null, c;
    u && (c = y.now());
    let l;
    if (n === "complex64") {
      let m = this.readSync(s.real.dataId), d = this.readSync(s.imag.dataId);
      l = w.mergeRealAndImagArrays(m, d);
    } else
      l = this.getValuesFromTexture(t8);
    return u && (this.downloadWaitMs += y.now() - c), this.convertAndCacheOnCPU(t8, l);
  }
  async read(t8) {
    if (this.pendingRead.has(t8)) {
      let f = this.pendingRead.get(t8);
      return new Promise((h) => f.push(h));
    }
    let e = this.texData.get(t8), { values: o, shape: n, slice: s, dtype: a, complexTensorInfos: i, isPacked: p } = e;
    if (s != null) {
      let f;
      p ? f = new Fr(n, Ba) : f = new or(n, Ba);
      let h = this.runWebGLProgram(f, [{ dataId: t8, shape: n, dtype: a }], a), g = this.read(h.dataId);
      return this.disposeIntermediateTensorInfo(h), g;
    }
    if (o != null)
      return this.convertAndCacheOnCPU(t8);
    if (A().getBool("DEBUG") && !A().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && A().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let u = null, c;
    if (a !== "complex64" && A().get("WEBGL_BUFFER_SUPPORTED")) {
      c = this.decode(t8);
      let f = this.texData.get(c.dataId);
      u = this.gpgpu.createBufferFromTexture(f.texture.texture, ...jl(n));
    }
    this.pendingRead.set(t8, []), a !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let l;
    if (a === "complex64") {
      let f = await Promise.all([this.read(i.real.dataId), this.read(i.imag.dataId)]), h = f[0], g = f[1];
      l = w.mergeRealAndImagArrays(h, g);
    } else if (u == null)
      l = this.getValuesFromTexture(t8);
    else {
      let f = y.sizeFromShape(n);
      l = this.gpgpu.downloadFloat32MatrixFromBuffer(u, f);
    }
    if (c != null && this.disposeIntermediateTensorInfo(c), u != null) {
      let f = this.gpgpu.gl;
      ce(f, () => f.deleteBuffer(u));
    }
    let m = this.convertAndCacheOnCPU(t8, l), d = this.pendingRead.get(t8);
    return this.pendingRead.delete(t8), d.forEach((f) => f(m)), this.pendingDisposal.has(t8) && (this.pendingDisposal.delete(t8), this.disposeData(t8) && pr().removeDataId(t8, this), this.pendingDeletes--), m;
  }
  readToGPU(t8, e = {}) {
    let o = this.texData.get(t8), { values: n, shape: s, slice: a, dtype: i, isPacked: p, texture: u } = o;
    if (i === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (a != null) {
      let d;
      p ? d = new Fr(s, Ba) : d = new or(s, Ba);
      let f = this.runWebGLProgram(d, [{ dataId: t8, shape: s, dtype: i }], i), h = this.readToGPU(f, e);
      return this.disposeIntermediateTensorInfo(f), h;
    }
    if (u == null)
      throw n != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    let c = this.decode(t8, e.customTexShape), l = pr().makeTensorFromTensorInfo(c), m = this.texData.get(c.dataId);
    return Object.assign({ tensorRef: l }, m.texture);
  }
  bufferSync(t8) {
    let e = this.readSync(t8.dataId);
    if (t8.dtype === "string")
      try {
        let o = e.map((n) => y.decodeString(n));
        return me(t8.shape, t8.dtype, o);
      } catch (o) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return me(t8.shape, t8.dtype, e);
  }
  checkNumericalProblems(t8) {
    if (t8 != null)
      for (let e = 0; e < t8.length; e++) {
        let o = t8[e];
        if (!TI(o))
          throw A().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${o} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(t8) {
    let { shape: e, dtype: o, isPacked: n } = this.texData.get(t8), s = y.sizeFromShape(e);
    if (A().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      let m = this.decode(t8), d = this.texData.get(m.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(d.texture.texture, ...jl(e)).subarray(0, s);
      return this.disposeIntermediateTensorInfo(m), f;
    }
    let a = A().getBool("WEBGL_PACK") && n === true, i = a ? Dc(e) : e, p = a ? new rh(i) : new th(i), u = this.runWebGLProgram(p, [{ shape: i, dtype: o, dataId: t8 }], "float32"), c = this.texData.get(u.dataId), l = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture, c.texShape[0], c.texShape[1]).subarray(0, s);
    return this.disposeIntermediateTensorInfo(u), l;
  }
  timerAvailable() {
    return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(t8) {
    let e = this.activeTimers, o = [], n = false;
    this.programTimersStack == null ? (this.programTimersStack = o, n = true) : this.activeTimers.push(o), this.activeTimers = o, t8();
    let s = y.flatten(this.activeTimers.map((p) => p.query)).filter((p) => p != null), a = y.flatten(this.activeTimers.map((p) => p.name)).filter((p) => p != null);
    this.activeTimers = e, n && (this.programTimersStack = null);
    let i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null };
    return (async () => {
      if (A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        let p = await Promise.all(s);
        i.kernelMs = y.sum(p), i.getExtraProfileInfo = () => p.map((u, c) => ({ name: a[c], ms: u })).map((u) => `${u.name}: ${u.ms}`).join(", ");
      } else
        i.kernelMs = { error: "WebGL query timers are not supported in this environment." };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
    })();
  }
  memory() {
    return { unreliable: false, numBytesInGPU: this.numBytesInGPU, numBytesInGPUAllocated: this.textureManager.numBytesAllocated, numBytesInGPUFree: this.textureManager.numBytesFree };
  }
  startTimer() {
    return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: y.now(), endMs: null };
  }
  endTimer(t8) {
    return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t8) : (t8.endMs = y.now(), t8);
  }
  async getQueryTime(t8) {
    if (A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(t8);
    let e = t8;
    return e.endMs - e.startMs;
  }
  disposeData(t8, e = false) {
    if (this.pendingDisposal.has(t8))
      return false;
    if (!this.texData.has(t8))
      return true;
    if (e ? this.texData.get(t8).refCount = 0 : this.texData.get(t8).refCount--, !e && this.texData.get(t8).refCount > 0)
      return false;
    if (this.pendingRead.has(t8))
      return this.pendingDisposal.add(t8), this.pendingDeletes++, false;
    this.releaseGPUData(t8);
    let { complexTensorInfos: o } = this.texData.get(t8);
    return o != null && (this.disposeData(o.real.dataId, e), this.disposeData(o.imag.dataId, e)), this.texData.delete(t8), true;
  }
  releaseGPUData(t8) {
    let { texture: e, dtype: o, texShape: n, usage: s, isPacked: a, slice: i } = this.texData.get(t8), p = i && i.origDataId || t8, u = this.dataRefCount.get(p);
    u > 1 ? this.dataRefCount.set(p, u - 1) : (this.dataRefCount.delete(p), e != null && (this.numBytesInGPU -= this.computeBytes(n, o), this.textureManager.releaseTexture(e, n, s, a)));
    let c = this.texData.get(t8);
    c.texture = null, c.texShape = null, c.isPacked = false, c.slice = null;
  }
  getTexture(t8) {
    return this.uploadToGPU(t8), this.texData.get(t8).texture.texture;
  }
  getDataInfo(t8) {
    return this.texData.get(t8);
  }
  shouldExecuteOnCPU(t8, e = t9) {
    return A().getBool("WEBGL_CPU_FORWARD") && t8.every((o) => this.texData.get(o.dataId).texture == null && y.sizeFromShape(o.shape) < e);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(t8) {
    w.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    let e = t8.dataSync();
    return QZ(t8.shape, e);
  }
  packedUnaryOp(t8, e, o) {
    let n = new Fr(t8.shape, e), s = this.compileAndRun(n, [t8], o);
    return pr().makeTensorFromTensorInfo(s);
  }
  abs(t8) {
    if (this.shouldExecuteOnCPU([t8]) && t8.dtype !== "complex64") {
      let n = ch(this.texData.get(t8.dataId).values);
      return this.makeOutput(t8.shape, t8.dtype, n);
    }
    if (A().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(t8, mv, t8.dtype);
    let e = new or(t8.shape, mv), o = this.compileAndRun(e, [t8]);
    return pr().makeTensorFromTensorInfo(o);
  }
  makeTensorInfo(t8, e, o) {
    let n;
    if (e === "string" && o != null && o.length > 0 && y.isString(o[0])) {
      let s = o.map((a) => y.encodeString(a));
      n = this.write(s, t8, e);
    } else
      n = this.write(o, t8, e);
    return this.texData.get(n).usage = null, { dataId: n, shape: t8, dtype: e };
  }
  makeOutput(t8, e, o) {
    return pr().makeTensorFromTensorInfo(this.makeTensorInfo(t8, e, o), this);
  }
  unpackTensor(t8) {
    let e = new fh(t8.shape);
    return this.runWebGLProgram(e, [t8], t8.dtype);
  }
  packTensor(t8) {
    let e = new mh(t8.shape), o = true;
    return this.runWebGLProgram(e, [t8], t8.dtype, null, o);
  }
  packedReshape(t8, e) {
    let o = [yi(t8.shape), ...bi(t8.shape)], n = { dtype: t8.dtype, shape: o, dataId: t8.dataId }, s = [yi(e), ...bi(e)], a = new Vc(s, o), i = true, p = [o], u = this.runWebGLProgram(a, [n], t8.dtype, p, i);
    return { dataId: u.dataId, shape: e, dtype: u.dtype };
  }
  decode(t8, e) {
    let o = this.texData.get(t8), { isPacked: n, shape: s, dtype: a } = o;
    if (e != null) {
      let m = y.sizeFromShape(s), d = e[0] * e[1] * 4;
      y.assert(m <= d, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    let i = Dc(s), p;
    n ? p = new eh(i) : p = new Jf(i);
    let u = true, c = [e != null ? e : jl(i)], l = this.runWebGLProgram(p, [{ shape: i, dtype: a, dataId: t8 }], a, c, u, e);
    return { dtype: a, shape: s, dataId: l.dataId };
  }
  runWebGLProgram(t8, e, o, n, s = false, a) {
    let i = this.makeTensorInfo(t8.outputShape, o), p = this.texData.get(i.dataId);
    if (t8.packedOutput && (p.isPacked = true), t8.outPackingScheme === bu.DENSE) {
      let x = a != null ? a : jl(t8.outputShape);
      p.texShape = x.map((b) => b * 2);
    }
    if (t8.outTexUsage != null && (p.usage = t8.outTexUsage), y.sizeFromShape(i.shape) === 0)
      return p.values = y.getTypedArrayFromDType(i.dtype, 0), i;
    let u = [], c = e.map((x) => {
      if (x.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let b = this.texData.get(x.dataId);
      if (b.texture == null) {
        if (!t8.packedInputs && y.sizeFromShape(x.shape) <= A().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return { shape: x.shape, texData: null, isUniform: true, uniformValues: b.values };
        t8.packedInputs && (b.isPacked = true, b.shape = x.shape);
      }
      if (this.uploadToGPU(x.dataId), !!b.isPacked != !!t8.packedInputs)
        x = b.isPacked ? this.unpackTensor(x) : this.packTensor(x), u.push(x), b = this.texData.get(x.dataId);
      else if (b.isPacked && !Cu(b.shape, x.shape)) {
        let C = x, S = x.shape;
        x.shape = b.shape, x = this.packedReshape(x, S), u.push(x), b = this.texData.get(x.dataId), C.shape = S;
      }
      return { shape: x.shape, texData: b, isUniform: false };
    });
    this.uploadToGPU(i.dataId);
    let l = { shape: i.shape, texData: p, isUniform: false }, m = ER(t8, c, l), d = this.getAndSaveBinary(m, () => _R(this.gpgpu, t8, c, l)), f = this.activeTimers != null, h;
    f && (h = this.startTimer()), A().get("ENGINE_COMPILE_ONLY") || $R(this.gpgpu, d, c, l, n), u.forEach((x) => this.disposeIntermediateTensorInfo(x)), f && (h = this.endTimer(h), this.activeTimers.push({ name: t8.constructor.name, query: this.getQueryTime(h) }));
    let g = A().getNumber("WEBGL_FLUSH_THRESHOLD");
    if (g > 0) {
      let x = y.now();
      x - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = x);
    }
    if (!A().getBool("WEBGL_LAZILY_UNPACK") && p.isPacked && s === false) {
      let x = this.unpackTensor(i);
      return this.disposeIntermediateTensorInfo(i), x;
    }
    return i;
  }
  compileAndRun(t8, e, o, n, s = false) {
    return o = o || e[0].dtype, this.runWebGLProgram(t8, e, o, n, s);
  }
  getAndSaveBinary(t8, e) {
    return t8 in this.binaryCache || (this.binaryCache[t8] = e()), this.binaryCache[t8];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (A().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((e) => {
      this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram), delete this.binaryCache[e];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement != "undefined" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = De(() => {
      if (!A().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        let t8 = A().getBool("DEBUG");
        A().set("DEBUG", false);
        let e = this.abs(ke(1e-8)).dataSync()[0];
        if (A().set("DEBUG", t8), e > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? ZZ : JZ;
  }
  uploadToGPU(t8) {
    let e = this.texData.get(t8), { shape: o, dtype: n, values: s, texture: a, usage: i, isPacked: p } = e;
    if (a != null)
      return;
    let u = this.activeTimers != null, c;
    u && (c = y.now());
    let l = e.texShape;
    if (l == null && (l = zI(o, p), e.texShape = l), s != null) {
      let m = Dc(o), d, f = l[1], h = l[0], g = s instanceof Uint8Array || s instanceof Uint8ClampedArray;
      (p || !g) && ([f, h] = La(l[0], l[1])), p ? d = new oh(m, g) : d = new Zl(m, g);
      let x = g ? [h, f] : l, b = this.makeTensorInfo(x, n), C = this.texData.get(b.dataId);
      g ? C.usage = dr.PIXELS : C.usage = dr.UPLOAD, C.texShape = x, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId), f, h, s);
      let S = [[h, f]], k = true, _ = this.runWebGLProgram(d, [b], n, S, k), E = this.texData.get(_.dataId);
      e.texShape = E.texShape, e.isPacked = E.isPacked, e.usage = E.usage, A().get("ENGINE_COMPILE_ONLY") ? this.disposeData(_.dataId) : (e.texture = E.texture, e.values = null, this.texData.delete(_.dataId)), this.disposeIntermediateTensorInfo(b), u && (this.uploadWaitMs += y.now() - c);
    } else {
      let m = this.acquireTexture(l, i, n, p);
      e.texture = m;
    }
  }
  convertAndCacheOnCPU(t8, e) {
    let o = this.texData.get(t8), { dtype: n } = o;
    return e != null && (o.values = n9(e, n)), o.values;
  }
  acquireTexture(t8, e, o, n) {
    if (this.numBytesInGPU += this.computeBytes(t8, o), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      let s = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true, console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(t8, e, n);
  }
  computeBytes(t8, e) {
    return t8[0] * t8[1] * y.bytesPerElement(e);
  }
  checkCompileCompletion() {
    for (let [, t8] of Object.entries(this.binaryCache))
      this.checkCompletion_(t8);
  }
  async checkCompileCompletionAsync() {
    let t8 = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (let [, e] of Object.entries(this.binaryCache))
        t8.push(this.checkCompletionAsync_(e));
      return Promise.all(t8);
    } else {
      for (let [, e] of Object.entries(this.binaryCache)) {
        let o = new Promise((n) => {
          try {
            this.checkCompletion_(e), n(true);
          } catch (s) {
            throw s;
          }
        });
        t8.push(o);
      }
      return Promise.all(t8);
    }
  }
  async checkCompletionAsync_(t8) {
    return this.gpgpu.gl.getProgramParameter(t8.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(t8) : (await pS(), this.checkCompletionAsync_(t8));
  }
  checkCompletion_(t8) {
    if (this.gpgpu.gl.getProgramParameter(t8.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(t8.webGLProgram)), this.gpgpu.gl.getShaderParameter(t8.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false ? (qf(t8.source, this.gpgpu.gl.getShaderInfoLog(t8.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return true;
  }
  getUniformLocations() {
    for (let t8 of Object.values(this.binaryCache)) {
      this.gpgpu.buildVao(t8.webGLProgram);
      let { variablesLocations: e, customUniformLocations: o, infLoc: n, nanLoc: s, outShapeLocation: a, outShapeStridesLocation: i, outTexShapeLocation: p } = qI(this.gpgpu, t8.program, t8.webGLProgram);
      t8.variablesLocations = e, t8.customUniformLocations = o, t8.infLoc = n, t8.nanLoc = s, t8.outShapeLocation = a, t8.outShapeStridesLocation = i, t8.outTexShapeLocation = p;
    }
  }
  createTensorFromGPUData(t8, e, o) {
    t8.channels = t8.channels || "RGBA";
    let { texture: n, height: s, width: a, channels: i } = t8, p = pr().backend;
    if (!p.gpgpu.gl.isTexture(n))
      throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");
    let u = p.writeTexture(n, e, o, s, a, i);
    return pr().makeTensorFromDataId(u, e, o, p);
  }
};
wu.nextDataId = 0;
function n9(r, t8) {
  if (t8 === "float32" || t8 === "complex64")
    return r;
  if (t8 === "int32" || t8 === "bool") {
    let e = t8 === "int32" ? new Int32Array(r.length) : new Uint8Array(r.length);
    for (let o = 0; o < e.length; ++o)
      e[o] = Math.round(r[o]);
    return e;
  } else
    throw new Error(`Unknown dtype ${t8}`);
}
var s9 = "4.11.0";
function MD() {
  A().set("WEBGL_FORCE_F16_TEXTURES", true);
}
ou.isBrowser() && su("webgl", () => new wu(), 2);
var Cat = { forceHalfFloat: MD };
var Wc = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
var Pr = class {
  constructor(t8, e, o) {
    this.variableNames = ["A", "B"], this.outputShape = w.assertAndGetBroadcastShape(e, o), this.enableShapeUniforms = pt(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${t8}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
};
var Xr = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
var jr = class {
  constructor(t8, e, o, n = false) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = w.assertAndGetBroadcastShape(e, o);
    let s = this.outputShape.length;
    this.enableShapeUniforms = pt(s);
    let a = "";
    if (n)
      if (s === 0 || y.sizeFromShape(this.outputShape) === 1)
        a = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (a = `
          ${Re(s)} coords = getOutputCoords();
        `, s === 1)
        this.enableShapeUniforms ? a += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : a += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        let p = Dt("coords", s);
        this.enableShapeUniforms ? a += `
            bool nextRowOutOfBounds =
              (${p[s - 2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${p[s - 1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : a += `
            bool nextRowOutOfBounds =
              (${p[s - 2]} + 1) >= ${this.outputShape[s - 2]};
            bool nextColOutOfBounds =
              (${p[s - 1]} + 1) >= ${this.outputShape[s - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t8}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${a}

        setOutput(result);
      }
    `;
  }
};
function At(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  return e.incRef(o.dataId), { dataId: o.dataId, shape: o.shape, dtype: o.dtype };
}
var LD = { kernelName: wo, backendName: "webgl", kernelFunc: At };
function Or(r) {
  let { inputs: t8, backend: e } = r, { real: o, imag: n } = t8, s = e.makeTensorInfo(o.shape, "complex64"), a = e.texData.get(s.dataId), i = At({ inputs: { x: o }, backend: e }), p = At({ inputs: { x: n }, backend: e });
  return a.complexTensorInfos = { real: i, imag: p }, s;
}
var BD = { kernelName: Fi, backendName: "webgl", kernelFunc: Or };
var dv = "return (a < 0.) ? b * a : a;";
var fv = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function a9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { alpha: s } = o, a = e.makeTensorInfo([], "float32", y.createScalarValue(s, "float32")), i = A().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new jr(fv, n.shape, a.shape) : new Pr(dv, n.shape, a.shape), p = e.runWebGLProgram(i, [n, a], "float32");
  return e.disposeIntermediateTensorInfo(a), p;
}
var zD = { kernelName: Rn, backendName: "webgl", kernelFunc: a9 };
var hv = "return (a < 0.) ? b * a : a;";
var gv = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function i9(r) {
  let { inputs: t8, backend: e } = r, { x: o, alpha: n } = t8, s = A().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new jr(gv, o.shape, n.shape) : new Pr(hv, o.shape, n.shape);
  return e.runWebGLProgram(s, [o, n], "float32");
}
var VD = { kernelName: os, backendName: "webgl", kernelFunc: i9 };
var Po = "if (isnan(x)) return x;";
function xe({ opSnippet: r, packedOpSnippet: t8, cpuKernelImpl: e, dtype: o }) {
  return ({ inputs: n, backend: s }) => {
    let { x: a } = n, i = s, p = o || a.dtype;
    if (i.shouldExecuteOnCPU([a]) && e != null) {
      let l = i.texData.get(a.dataId), m = e(l.values, p);
      return i.makeTensorInfo(a.shape, p, m);
    }
    let u = A().getBool("WEBGL_PACK_UNARY_OPERATIONS") && t8 != null, c;
    return u ? c = new Fr(a.shape, t8) : c = new or(a.shape, r), i.runWebGLProgram(c, [a], p);
  };
}
function nt({ opSnippet: r, packedOpSnippet: t8, checkOutOfBounds: e = false, supportsComplex: o = false, cpuKernelImpl: n, dtype: s }) {
  return ({ inputs: a, backend: i }) => {
    let { a: p, b: u } = a, c = i;
    if (o && p.dtype === "complex64") {
      let f = c.texData.get(p.dataId), h = c.texData.get(u.dataId), [g, x] = [[f.complexTensorInfos.real, h.complexTensorInfos.real], [f.complexTensorInfos.imag, h.complexTensorInfos.imag]].map((C) => {
        let [S, k] = C, _ = { dataId: S.dataId, dtype: S.dtype, shape: p.shape }, E = { dataId: k.dataId, dtype: k.dtype, shape: u.shape }, R = new Pr(r, p.shape, u.shape);
        return c.runWebGLProgram(R, [_, E], dt(S.dtype, k.dtype));
      }), b = Or({ inputs: { real: g, imag: x }, backend: c });
      return c.disposeIntermediateTensorInfo(g), c.disposeIntermediateTensorInfo(x), b;
    }
    let l = s || dt(p.dtype, u.dtype);
    if ((p.dtype === "string" || u.dtype === "string" || c.shouldExecuteOnCPU([p, u])) && n != null) {
      let f = c.texData.get(p.dataId).values, h = c.texData.get(u.dataId).values, g = p.dtype === "string" ? w.fromUint8ToStringArray(f) : f, x = p.dtype === "string" ? w.fromUint8ToStringArray(h) : h, [b, C] = n(p.shape, u.shape, g, x, l), S = c.makeTensorInfo(C, l), k = c.texData.get(S.dataId);
      return k.values = b, S;
    }
    let m = A().getBool("WEBGL_PACK_BINARY_OPERATIONS") && t8 != null, d;
    return m ? d = new jr(t8, p.shape, u.shape, e) : d = new Pr(r, p.shape, u.shape), c.runWebGLProgram(d, [p, u], l);
  };
}
function Ci(r, t8 = false) {
  if (r === "linear")
    return t8 ? DD : ND;
  if (r === "relu")
    return t8 ? FD : _D;
  if (r === "elu")
    return t8 ? AD : TD;
  if (r === "relu6")
    return t8 ? PD : $D;
  if (r === "prelu")
    return t8 ? gv : hv;
  if (r === "leakyrelu")
    return t8 ? fv : dv;
  if (r === "sigmoid")
    return t8 ? OD : ED;
  throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`);
}
var Uc = class {
  constructor(t8, e, o, n = false, s = false, a = false, i = null, p = false, u = false) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = true, this.packedOutput = true, this.outputShape = o, this.enableShapeUniforms = pt(this.outputShape.length);
    let c = n ? t8[1] : t8[2], l = Math.ceil(c / 2), m = n ? "i * 2, rc.y" : "rc.y, i * 2", d = s ? "rc.z, i * 2" : "i * 2, rc.z", f = n ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], h = s ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], g = "", x = "";
    i && (p ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }` : u ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }` : g = `vec4 activation(vec4 x) {
          ${i}
        }`, x = "result = activation(result);");
    let b = a ? "result += getBiasAtOutCoords();" : "";
    a && this.variableNames.push("bias"), p && this.variableNames.push("preluActivationWeights"), u && this.variableNames.push("leakyreluAlpha");
    let C = "rc.x", S = "rc.x";
    t8[0] < e[0] ? C = `imod(rc.x, ${t8[0]})` : e[0] < t8[0] && (S = `imod(rc.x, ${e[0]})`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${l}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${C};
        int batchB = ${S};
        for (int i = 0; i < ${l}; i++) {
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${d});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${h[0]});
          result += (${f[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `;
  }
};
var xv = { REAL: "return areal * breal - aimag * bimag;", IMAG: "return areal * bimag + aimag * breal;" };
var em = class {
  constructor(t8, e, o) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = w.assertAndGetBroadcastShape(e, o), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t8}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
};
var WD = "return a * b;";
function tm(r) {
  let { inputs: t8, backend: e } = r, { a: o, b: n } = t8, s = w.upcastType(o.dtype, n.dtype);
  if (o.dtype === "complex64") {
    let i = e.texData.get(o.dataId), p = e.texData.get(n.dataId), u = new em(xv.REAL, o.shape, n.shape), c = new em(xv.IMAG, o.shape, n.shape), l = [{ dataId: i.complexTensorInfos.real.dataId, dtype: i.complexTensorInfos.real.dtype, shape: o.shape }, { dataId: i.complexTensorInfos.imag.dataId, dtype: i.complexTensorInfos.imag.dtype, shape: o.shape }, { dataId: p.complexTensorInfos.real.dataId, dtype: p.complexTensorInfos.real.dtype, shape: n.shape }, { dataId: p.complexTensorInfos.imag.dataId, dtype: p.complexTensorInfos.imag.dtype, shape: n.shape }], m = e.runWebGLProgram(u, l, "float32"), d = e.runWebGLProgram(c, l, "float32"), f = Or({ inputs: { real: m, imag: d }, backend: e });
    return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(d), f;
  }
  if (e.shouldExecuteOnCPU([o, n])) {
    let i = e.texData.get(o.dataId), p = e.texData.get(n.dataId), [u, c] = ZR(o.shape, n.shape, i.values, p.values, s), l = e.makeTensorInfo(c, s), m = e.texData.get(l.dataId);
    return m.values = u, l;
  }
  let a;
  return A().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? a = new jr(WD, o.shape, n.shape) : a = new Pr(WD, o.shape, n.shape), e.runWebGLProgram(a, [o, n], s);
}
var UD = { kernelName: Yn, backendName: "webgl", kernelFunc: tm };
function GD(r, t8, e) {
  let o = [yi(r.shape), ...bi(r.shape)], n = { dtype: r.dtype, shape: o, dataId: r.dataId }, s = [yi(t8), ...bi(t8)], a = new Vc(s, o), i = true, p = [o], u = e.runWebGLProgram(a, [n], r.dtype, p, i);
  return { dataId: u.dataId, shape: t8, dtype: u.dtype };
}
function te(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { shape: s } = o, a = e, i = y.sizeFromShape(n.shape), p = y.inferFromImplicitShape(s, i), u = y.sizeFromShape(p);
  y.assert(i === u, () => `The new shape (${p}) has ${u} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);
  let c = a.texData.get(n.dataId);
  return c.isPacked && !Cu(n.shape, p) && !(c.texture !== null && Cu(c.shape, p)) ? GD(n, p, a) : (a.incRef(n.dataId), { dataId: n.dataId, shape: p, dtype: n.dtype });
}
var HD = { kernelName: da, backendName: "webgl", kernelFunc: te };
var rm = class {
  constructor(t8, e) {
    this.variableNames = ["x"];
    let { windowSize: o, batchSize: n, inSize: s, outSize: a } = t8;
    this.outputShape = [n, a];
    let i = Math.floor(o / 4) * 4, p = o % 4, u = "sumValue += dot(values, ones);";
    if (e != null) {
      let l = 1 / e;
      u = `sumValue += dot(values * ${y.isInt(l) ? l.toPrecision(2) : l}, ones);`;
    }
    let c = "";
    s % o > 0 && (c = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${i};
        if (${p === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${p === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${p === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `;
  }
};
var gh = class {
  constructor(t8, e) {
    this.variableNames = ["x"];
    let { windowSize: o, batchSize: n, inSize: s, outSize: a } = t8;
    this.outputShape = [n, a];
    let i = "0.0", p = "";
    e === "prod" ? i = "1.0" : e === "min" ? (i = "1.0 / 1e-20", p = "min") : e === "max" && (i = "-1.0 / 1e-20", p = "max");
    let u = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "sum" ? u = "sumValue" : e === "prod" ? u = "prodValue" : e === "all" ? u = "allValue" : e === "any" && (u = "anyValue");
    let c = Math.floor(o / 4) * 4, l = o % 4, m = `
      if (${e === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${e === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${p}(values, minMaxValue);
        if (${e === "min"} || ${e === "max"}) {
          minMaxValue = ${p}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, d = "vec4";
    e === "all" ? (i = "1.0", m = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, d = "bvec4") : e === "any" && (i = "0.0", m = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, d = "bvec4");
    let f = "";
    s % o > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${l === 1}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${l === 2}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${l === 3}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `;
  }
};
function p9(r) {
  let t8 = [];
  for (; t8.length === 0 || t8[t8.length - 1].outSize !== 1; ) {
    let e = t8.length ? t8[t8.length - 1].outSize : r[1], o = w.computeOptimalWindowSize(e);
    t8.push({ inSize: e, windowSize: o, outSize: Math.ceil(e / o) });
  }
  return t8;
}
function Yr(r, t8, e, o) {
  let n = p9(r.shape), s = r;
  for (let a = 0; a < n.length; a++) {
    let { inSize: i, windowSize: p, outSize: u } = n[a], c, l;
    e === "mean" ? c = a === 0 ? new rm({ windowSize: p, inSize: i, batchSize: r.shape[0], outSize: u }, i) : new rm({ windowSize: p, inSize: i, batchSize: r.shape[0], outSize: u }) : c = new gh({ windowSize: p, inSize: i, batchSize: r.shape[0], outSize: u }, e), l = s, s = o.runWebGLProgram(c, [s], t8), l.dataId !== r.dataId && o.disposeIntermediateTensorInfo(l);
  }
  return s;
}
var xh = class {
  constructor(t8, e) {
    this.variableNames = ["A"];
    let o = new Array(t8.length);
    for (let a = 0; a < o.length; a++)
      o[a] = t8[e[a]];
    this.outputShape = o, this.rank = o.length;
    let n = Re(this.rank), s = c9(e);
    this.userCode = `
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `;
  }
};
function c9(r) {
  let t8 = r.length;
  if (t8 > 6)
    throw Error(`Transpose for rank ${t8} is not yet supported`);
  let e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], o = new Array(t8);
  for (let n = 0; n < r.length; n++)
    o[r[n]] = e[n];
  return o.join();
}
var yh = class {
  constructor(t8, e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true;
    let o = new Array(t8.length);
    for (let c = 0; c < o.length; c++)
      o[c] = t8[e[c]];
    if (this.outputShape = o, this.rank = o.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    let n = Re(this.rank), s = lv("rc", this.rank), a = new Array(this.rank);
    for (let c = 0; c < e.length; c++)
      a[e[c]] = s[c];
    let i = `vec2(${a.slice(-2).join()})`, p = `++${s[this.rank - 1]} < ${o[this.rank - 1]}`, u = `getChannel(getA(${a.join()}), ${i})`;
    this.userCode = `
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${p}) {
        result[1] = ${u};
      }
      --${s[this.rank - 1]};
      if(++${s[this.rank - 2]} < ${o[this.rank - 2]}) {
        result[2] = ${u};
        if(${p}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `;
  }
};
function Su(r, t8, e) {
  let o = A().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new yh(r.shape, t8) : new xh(r.shape, t8);
  return e.runWebGLProgram(o, [r], r.dtype);
}
function KD(r, t8, e, o) {
  let n = t8, s = r.shape.length, a = y.parseAxisParam(n, r.shape), i = a, p = w.getAxesPermutation(i, s), u = p != null, c = r;
  u && (c = Su(r, p, o), i = w.getInnerMostAxes(i.length, s)), w.assertAxesAreInnerMostDims("sum", i, s);
  let [l, m] = w.computeOutAndReduceShapes(c.shape, i), d = l;
  e && (d = w.expandShapeToKeepDim(l, a));
  let f = y.sizeFromShape(m), g = y.sizeFromShape(r.shape) / f, x = te({ inputs: { x: c }, attrs: { shape: [g, f] }, backend: o }), b = ni(r.dtype), C = Yr(x, b, "sum", o), S = te({ inputs: { x: C }, attrs: { shape: d }, backend: o });
  return o.disposeIntermediateTensorInfo(x), o.disposeIntermediateTensorInfo(C), u && o.disposeIntermediateTensorInfo(c), S;
}
function Tp(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  return KD(n, s, a, e);
}
var qD = { kernelName: Is, backendName: "webgl", kernelFunc: Tp };
function Ct(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { perm: s } = o, a = e, i = n.shape.length, p = new Array(i);
  for (let c = 0; c < p.length; c++)
    p[c] = n.shape[s[c]];
  let u;
  if (a.shouldExecuteOnCPU([n])) {
    let l = a.texData.get(n.dataId).values, m = Np(l, n.shape, n.dtype, s, p);
    u = a.makeTensorInfo(p, n.dtype);
    let d = a.texData.get(u.dataId);
    d.values = m;
  } else
    u = Su(n, s, a);
  return u;
}
var jD = { kernelName: co, backendName: "webgl", kernelFunc: Ct };
var yv = 1e3;
function _p({ a: r, b: t8, transposeA: e, transposeB: o, backend: n, bias: s = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: p = null }) {
  let u = r.shape.length, c = t8.shape.length, l = e ? r.shape[u - 2] : r.shape[u - 1], m = o ? t8.shape[c - 1] : t8.shape[c - 2], d = e ? r.shape[u - 1] : r.shape[u - 2], f = o ? t8.shape[c - 2] : t8.shape[c - 1], h = r.shape.slice(0, -2), g = t8.shape.slice(0, -2), x = y.sizeFromShape(h), b = y.sizeFromShape(g), S = Ir.assertAndGetBroadcastShape(r.shape.slice(0, -2), t8.shape.slice(0, -2)).concat([d, f]);
  y.assert(l === m, () => `Error in matMul: inner shapes (${l}) and (${m}) of Tensors with shapes ${r.shape} and ${t8.shape} and transposeA=${e} and transposeB=${o} must match.`);
  let k = e ? [x, l, d] : [x, d, l], _ = o ? [b, f, m] : [b, m, f], E = te({ inputs: { x: r }, backend: n, attrs: { shape: k } }), R = te({ inputs: { x: t8 }, backend: n, attrs: { shape: _ } }), D = [E, R], P = Math.max(x, b), O = e ? E.shape[1] : E.shape[2], M = s != null, L = a != null, B = p === "leakyrelu", z = p != null ? Ci(p, true) : null, U = M || L || B || z != null, j;
  if ((d === 1 || f === 1) && O > yv && U === false) {
    let Y = E, J = R;
    e && (Y = Ct({ inputs: { x: E }, backend: n, attrs: { perm: [0, 2, 1] } }), D.push(Y)), o && (J = Ct({ inputs: { x: R }, backend: n, attrs: { perm: [0, 2, 1] } }), D.push(J));
    let re = f !== 1, ne = f === 1, ee = Y;
    re && (ee = te({ inputs: { x: Y }, backend: n, attrs: { shape: [P, O, 1] } }), D.push(ee));
    let oe = f === 1 ? 2 : 1, ie = J;
    ne && (ie = te({ inputs: { x: J }, backend: n, attrs: { shape: [P, 1, O] } }), D.push(ie));
    let le = tm({ inputs: { a: ee, b: ie }, backend: n });
    j = Tp({ inputs: { x: le }, backend: n, attrs: { axis: oe, keepDims: true } }), D.push(le);
  } else {
    let Y = dt(r.dtype, t8.dtype), J = new Uc(k, _, [P, d, f], e, o, M, z, L, B), re = [E, R];
    if (s != null && re.push(s), L && re.push(a), B) {
      let ne = n.makeTensorInfo([], "float32", y.createScalarValue(i, "float32"));
      re.push(ne), D.push(ne);
    }
    j = n.runWebGLProgram(J, re, Y);
  }
  let q = te({ inputs: { x: j }, backend: n, attrs: { shape: S } });
  D.push(j);
  for (let Y of D)
    n.disposeIntermediateTensorInfo(Y);
  return q;
}
function l9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { a: n, b: s, bias: a, preluActivationWeights: i } = t8, { transposeA: p, transposeB: u, activation: c, leakyreluAlpha: l } = o;
  return _p({ a: n, b: s, transposeA: p, transposeB: u, backend: e, bias: a, preluActivationWeights: i, leakyreluAlpha: l, activation: c });
}
var XD = { kernelName: Io, backendName: "webgl", kernelFunc: l9 };
var YD = "return abs(x);";
function m9(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (e.shouldExecuteOnCPU([o]) && o.dtype !== "complex64") {
    let s = e.texData.get(o.dataId), a = ch(s.values);
    return e.makeTensorInfo(o.shape, o.dtype, a);
  }
  let n;
  return A().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? n = new Fr(o.shape, YD) : n = new or(o.shape, YD), e.runWebGLProgram(n, [o], o.dtype);
}
var QD = { kernelName: Xs, backendName: "webgl", kernelFunc: m9 };
var d9 = Ut + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
var f9 = xe({ opSnippet: d9 });
var ZD = { kernelName: Wo, backendName: "webgl", kernelFunc: f9 };
var h9 = Ut + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`;
var g9 = xe({ opSnippet: h9 });
var JD = { kernelName: Uo, backendName: "webgl", kernelFunc: g9 };
var eA = "return a + b;";
var x9 = nt({ opSnippet: eA, packedOpSnippet: eA, supportsComplex: true, cpuKernelImpl: RR });
var tA = { kernelName: uo, backendName: "webgl", kernelFunc: x9 };
var bh = class {
  constructor(t8, e) {
    this.outputShape = [], this.outputShape = t8, this.variableNames = e.map((s, a) => `T${a}`);
    let o = [];
    this.variableNames.forEach((s) => {
      o.push(`float v${s} = get${s}AtOutCoords();`);
    });
    let n = this.variableNames.map((s) => `v${s}`).join(" + ");
    this.userCode = `
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `;
  }
};
var Ch = class {
  constructor(t8, e) {
    this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = t8, this.variableNames = e.map((s, a) => `T${a}`);
    let o = [];
    this.variableNames.forEach((s) => {
      o.push(`vec4 v${s} = get${s}AtOutCoords();`);
    });
    let n = this.variableNames.map((s) => `v${s}`).join(" + ");
    this.userCode = `
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `;
  }
};
function wh(r) {
  let { inputs: t8, backend: e } = r, o = t8;
  if (o.length === 1)
    return At({ inputs: { x: o[0] }, backend: e });
  if (o.length > A().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    let p = Math.floor(o.length / 2), u = wh({ inputs: o.slice(0, p), backend: e }), c = wh({ inputs: o.slice(p), backend: e });
    return wh({ inputs: [u, c], backend: e });
  }
  let n = o.map((p) => p.dtype).reduce((p, u) => dt(p, u)), s = o.map((p) => p.shape), i = A().getBool("WEBGL_PACK") ? new Ch(o[0].shape, s) : new bh(o[0].shape, s);
  return e.runWebGLProgram(i, o, n);
}
var rA = { kernelName: Go, backendName: "webgl", kernelFunc: wh };
function y9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o, i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = p, c = w.getAxesPermutation(u, i), l = n;
  c != null && (l = Ct({ inputs: { x: n }, backend: e, attrs: { perm: c } }), u = w.getInnerMostAxes(u.length, i)), w.assertAxesAreInnerMostDims("all", u, i);
  let [m, d] = w.computeOutAndReduceShapes(l.shape, u), f = y.sizeFromShape(d), h = te({ inputs: { x: l }, backend: e, attrs: { shape: [-1, f] } }), g = Yr(h, h.dtype, "all", e), x;
  if (a) {
    let b = w.expandShapeToKeepDim(m, p);
    x = te({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    x = te({ inputs: { x: g }, backend: e, attrs: { shape: m } });
  return e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(g), c != null && e.disposeIntermediateTensorInfo(l), x;
}
var oA = { kernelName: Ho, backendName: "webgl", kernelFunc: y9 };
function b9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o, i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = p, c = w.getAxesPermutation(u, i), l = n;
  c != null && (l = Ct({ inputs: { x: n }, backend: e, attrs: { perm: c } }), u = w.getInnerMostAxes(u.length, i)), w.assertAxesAreInnerMostDims("any", u, i);
  let [m, d] = w.computeOutAndReduceShapes(l.shape, u), f = y.sizeFromShape(d), h = te({ inputs: { x: l }, backend: e, attrs: { shape: [-1, f] } }), g = Yr(h, h.dtype, "any", e), x;
  if (a) {
    let b = w.expandShapeToKeepDim(m, p);
    x = te({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    x = te({ inputs: { x: g }, backend: e, attrs: { shape: m } });
  return e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(g), c != null && e.disposeIntermediateTensorInfo(l), x;
}
var nA = { kernelName: Ko, backendName: "webgl", kernelFunc: b9 };
var Sh = class {
  constructor(t8, e, o) {
    this.variableNames = ["A"];
    let { windowSize: n, batchSize: s, outSize: a } = t8;
    o || this.variableNames.push("bestIndicesA"), this.outputShape = [s, a];
    let i = e === "max" ? ">" : "<", p = o ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${p};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
};
var Ih = class {
  constructor(t8, e, o, n) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, y.assert(t8.length > 2, () => `Packed arg${o.charAt(0).toUpperCase() + o.slice(1)} supports only inputs with rank above 2.`);
    let s = t8[t8.length - 1], a = Math.ceil(s / e);
    this.outputShape = t8.slice(0, -1), a > 1 && this.outputShape.push(a), n || this.variableNames.push("bestIndicesA");
    let i = this.outputShape, p = i.length, u = Re(p), c = Dt("coords", p), l, m;
    if (a === 1) {
      m = p + 1;
      let R = Re(m);
      l = `
        ${R} sourceLocR = ${R}(${c.join()}, 0);
        ++${c[p - 1]};
        ${R} sourceLocG = ${R}(${c.join()}, 0);
        ++${c[p - 2]};
        ${R} sourceLocA = ${R}(${c.join()}, 0);
        --${c[p - 1]};
        ${R} sourceLocB = ${R}(${c.join()}, 0);
        --${c[p - 2]};`;
    } else
      m = p, l = `
        ${u} sourceLocR = coords;
        ++${c[p - 1]};
        ${u} sourceLocG = coords;
        ++${c[p - 2]};
        ${u} sourceLocA = coords;
        --${c[p - 1]};
        ${u} sourceLocB = coords;
        --${c[p - 2]};`;
    let d = ["x", "y", "z", "w", "u", "v"].slice(0, m), f = "." + d[m - 1], h = d.map((R) => "int " + R), g = Dt("sourceLocR", m - 1).concat("inIdx.r"), x = Dt("sourceLocG", m - 1).concat("inIdx.g"), b = Dt("sourceLocB", m - 1).concat("inIdx.b"), C = Dt("sourceLocA", m - 1).concat("inIdx.a"), S = o === "max" ? "greaterThan" : "lessThan", k = n ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${C.join()})));`, _ = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${C.join()}) : 0.)`, E = n ? "" : `
      float getBestIndicesAChannel(${h.join()}) {
        return getChannel(getBestIndicesA(${d.join()}),
                                          vec2(${d.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${h.join()}) {
        return getChannel(getA(${d.join()}),
                               vec2(${d.slice(-2).join()}));
      }
      ${E}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[p - 1]} < ${i[p - 1] - 1};
        bool hasNextRow = ${c[p - 2]} < ${i[p - 2] - 1};
        ${l}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${_};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${k}
          vec4 candidate = ${_};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${S}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
};
function sA(r, t8, e, o = null) {
  let n = t8.shape[0], s = t8.shape[1];
  o != null && (n = o.shape[0], s = o.shape[1]);
  let a = w.computeOptimalWindowSize(s), i = { windowSize: a, inSize: s, batchSize: n, outSize: Math.ceil(s / a) }, p = new Sh(i, e, o == null), u = [t8];
  o != null && u.push(o);
  let c = r.runWebGLProgram(p, u, "int32");
  if (c.shape[1] === 1)
    return c;
  let l = sA(r, t8, e, c);
  return r.disposeIntermediateTensorInfo(c), l;
}
function aA(r, t8, e, o = null) {
  let n = o != null ? o.shape : t8.shape, s = n[n.length - 1], a = w.computeOptimalWindowSize(s), i = new Ih(n, a, e, o == null), p = o == null ? [t8] : [t8, o], u = r.runWebGLProgram(i, p, "int32");
  if (u.shape.length === t8.shape.length) {
    let c = aA(r, t8, e, u);
    return r.disposeIntermediateTensorInfo(u), c;
  }
  return u;
}
function vh(r, t8, e, o) {
  let n = [e];
  if (w.assertAxesAreInnerMostDims("arg" + o.charAt(0).toUpperCase() + o.slice(1), n, t8.shape.length), !A().getBool("WEBGL_PACK_REDUCE") || t8.shape.length <= 2) {
    let s = [], a = r.texData.get(t8.dataId), i = a !== null && a.isPacked, p = t8;
    i && (p = r.unpackTensor(t8), s.push(p));
    let [u, c] = w.computeOutAndReduceShapes(p.shape, n), l = y.sizeFromShape(c), m = te({ inputs: { x: p }, backend: r, attrs: { shape: [-1, l] } });
    s.push(m);
    let d = sA(r, m, o);
    s.push(d);
    let f = te({ inputs: { x: d }, backend: r, attrs: { shape: u } });
    return s.forEach((h) => r.disposeIntermediateTensorInfo(h)), f;
  }
  return aA(r, t8, o);
}
function C9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s } = o, a = y.parseAxisParam(s, n.shape), i = w.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = Ct({ inputs: { x: n }, backend: e, attrs: { perm: i } }), u.push(p), a = w.getInnerMostAxes(a.length, p.shape.length)), w.assertAxesAreInnerMostDims("argMax", [a[0]], p.shape.length);
  let c = vh(e, p, a[0], "max");
  return u.forEach((l) => e.disposeIntermediateTensorInfo(l)), c;
}
var iA = { kernelName: Ys, backendName: "webgl", kernelFunc: C9 };
function w9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s } = o, a = y.parseAxisParam(s, n.shape), i = w.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = Ct({ inputs: { x: n }, backend: e, attrs: { perm: i } }), u.push(p), a = w.getInnerMostAxes(a.length, p.shape.length)), w.assertAxesAreInnerMostDims("argMin", [a[0]], p.shape.length);
  let c = vh(e, p, a[0], "min");
  return u.forEach((l) => e.disposeIntermediateTensorInfo(l)), c;
}
var uA = { kernelName: Qs, backendName: "webgl", kernelFunc: w9 };
var S9 = Ut + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
var I9 = xe({ opSnippet: S9 });
var pA = { kernelName: qo, backendName: "webgl", kernelFunc: I9 };
var v9 = Ut + "return log(x + sqrt(x * x + 1.0));";
var k9 = xe({ opSnippet: v9 });
var cA = { kernelName: jo, backendName: "webgl", kernelFunc: k9 };
var N9 = Ut + `
  return atan(x);
`;
var T9 = xe({ opSnippet: N9 });
var lA = { kernelName: Xo, backendName: "webgl", kernelFunc: T9 };
var _9 = Wc + `
  return atan(a, b);
`;
var $9 = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xr + `
  return result;
`;
var E9 = nt({ opSnippet: _9, packedOpSnippet: $9 });
var mA = { kernelName: Qo, backendName: "webgl", kernelFunc: E9 };
var R9 = Ut + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
var D9 = xe({ opSnippet: R9 });
var dA = { kernelName: Yo, backendName: "webgl", kernelFunc: D9 };
var Us = class {
  constructor(t8, e, o, n = false, s = false) {
    if (this.variableNames = ["x"], e === "avg" && o)
      throw new Error("Cannot compute positions for average pool.");
    let a = t8.filterWidth, i = t8.strideHeight, p = t8.strideWidth, u = t8.dilationHeight, c = t8.dilationWidth, l = t8.effectiveFilterHeight, m = t8.effectiveFilterWidth, d = t8.padInfo.top, f = t8.padInfo.left;
    this.outputShape = t8.outShape;
    let h = e === "avg", g = `((batch  * ${t8.inHeight} + xR) * ${t8.inWidth} + xC) * ${t8.inChannels} + d`, x = `(xR * ${t8.inWidth} + xC) * ${t8.inChannels} + d`, b = "0.0";
    if (h || (b = "-1.0 / 1e-20"), o) {
      let R = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${i}, ${p});
        const ivec2 pads = ivec2(${d}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${l};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t8.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t8.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${R} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n ? s ? g : x : `wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let C = "max", S = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (S = "avgValue / max(count, 1.0)");
    let k = Math.floor(a / 4) * 4, _ = a % 4, E = `
      if (${h}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${C}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${i}, ${p});
      const ivec2 pads = ivec2(${d}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t8.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${l};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t8.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${k}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${E}
          }

          int xC = xCCorner + ${k};
          if (${_ === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${_ === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${_ === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${E}
          }
        }
        setOutput(${S});
      }
    `;
  }
};
var Iu = class {
  constructor(t8, e, o, n = false, s = false) {
    if (this.variableNames = ["x"], e === "avg" && o)
      throw new Error("Cannot compute positions for average pool.");
    let a = t8.filterWidth, i = t8.strideDepth, p = t8.strideHeight, u = t8.strideWidth, c = t8.dilationDepth, l = t8.dilationHeight, m = t8.dilationWidth, d = t8.effectiveFilterDepth, f = t8.effectiveFilterHeight, h = t8.effectiveFilterWidth, g = t8.padInfo.front, x = t8.padInfo.top, b = t8.padInfo.left;
    this.outputShape = t8.outShape;
    let C = e === "avg", S = "0.0";
    if (C || (S = "-1.0 / 1e-20"), o) {
      let P = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${p}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t8.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${l}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t8.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${h};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t8.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${P} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n ? s ? `(((batch * ${t8.inDepth} + xD) * ${t8.inHeight} + xR) * ${t8.inWidth} + xC) * ${t8.inChannels} + ch` : `((xD * ${t8.inHeight} + xR) * ${t8.inWidth} + xC) * ${t8.inChannels} + ch` : `wD * ${f} * ${h} +
                      wR * ${h} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let k = "max", _ = `${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    e === "avg" && (_ = "avgValue / max(count, 1.0)");
    let E = Math.floor(a / 4) * 4, R = a % 4, D = `
      if (${C}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${k}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${p}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${S};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t8.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${S});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t8.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t8.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${E}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${D}
            }

            int xC = xCCorner + ${E};
            if (${R === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${D}
            } else if (${R === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${D}
            } else if (${R === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${D}
            }
          }
        }
        setOutput(${_});
      }
    `;
  }
};
function A9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8;
  Vs(n, "avgPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1;
  y.assert(w.eitherStridesOrDilationsAreOne(a, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = w.computePool2DInfo(n.shape, s, a, u, i, p);
  if (c.filterWidth === 1 && c.filterHeight === 1 && y.arraysEqual(c.inShape, c.outShape))
    return At({ inputs: { x: n }, backend: e });
  let l = new Us(c, "avg", false);
  return e.runWebGLProgram(l, [n], "float32");
}
var fA = { kernelName: Zo, backendName: "webgl", kernelFunc: A9 };
function F9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dimRoundingMode: p, dataFormat: u } = o, c = [1, 1, 1], l = w.computePool3DInfo(n.shape, s, a, c, i, p, u), m = new Iu(l, "avg", false);
  return e.runWebGLProgram(m, [n], "float32");
}
var hA = { kernelName: Zs, backendName: "webgl", kernelFunc: F9 };
var kh = class {
  constructor(t8) {
    this.variableNames = ["dy"], this.outputShape = t8.inShape;
    let e = t8.filterHeight, o = t8.filterWidth, n = t8.strideHeight, s = t8.strideWidth, a = t8.dilationHeight, i = t8.dilationWidth, p = t8.effectiveFilterHeight, u = t8.effectiveFilterWidth, c = p - 1 - t8.padInfo.top, l = u - 1 - t8.padInfo.left, m = 1 / (e * o);
    this.userCode = `
      const ivec2 pads = ivec2(${c}, ${l});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${p};
            wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t8.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t8.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Nh = class {
  constructor(t8) {
    this.variableNames = ["dy"], this.outputShape = t8.inShape;
    let e = t8.filterDepth, o = t8.filterHeight, n = t8.filterWidth, s = t8.strideDepth, a = t8.strideHeight, i = t8.strideWidth, p = t8.dilationDepth, u = t8.dilationHeight, c = t8.dilationWidth, l = t8.effectiveFilterDepth, m = t8.effectiveFilterHeight, d = t8.effectiveFilterWidth, f = l - 1 - t8.padInfo.front, h = m - 1 - t8.padInfo.top, g = d - 1 - t8.padInfo.left, x = 1 / (e * o * n);
    this.userCode = `
      const ivec3 pads = ivec3(${f}, ${h}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
            wD += ${p}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${t8.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${t8.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${t8.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function P9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, a = s, { filterSize: i, strides: p, pad: u, dimRoundingMode: c } = o, l = [1, 1, 1], m = w.computePool3DInfo(a.shape, i, p, l, u, c), d = new Nh(m);
  return e.runWebGLProgram(d, [n], a.dtype);
}
var gA = { kernelName: Ai, backendName: "webgl", kernelFunc: P9 };
function O9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, a = s;
  Vs([n, s], "avgPoolGrad");
  let { filterSize: i, strides: p, pad: u } = o, c = w.computePool2DInfo(a.shape, i, p, 1, u), l = new kh(c);
  return e.runWebGLProgram(l, [n], a.dtype);
}
var xA = { kernelName: Di, backendName: "webgl", kernelFunc: O9 };
function M9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { a: n, b: s } = t8, { transposeA: a, transposeB: i } = o;
  return _p({ a: n, b: s, transposeA: a, transposeB: i, backend: e });
}
var yA = { kernelName: Jo, backendName: "webgl", kernelFunc: M9 };
var Th = class {
  constructor(t8, e, o, n, s, a) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], w.assertAndGetBroadcastShape(t8, e), w.assertAndGetBroadcastShape(t8, o);
    let i = "0.0";
    n != null && (w.assertAndGetBroadcastShape(t8, n), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let p = "1.0";
    s != null && (w.assertAndGetBroadcastShape(t8, s), this.variableNames.push("scale"), p = "getScaleAtOutCoords()"), this.outputShape = t8, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${p};
        float inv = scale * inversesqrt(variance + float(${a}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
};
var _h = class {
  constructor(t8, e, o, n, s, a) {
    this.packedInputs = true, this.packedOutput = true, this.variableNames = ["x", "mean", "variance"], w.assertAndGetBroadcastShape(t8, e), w.assertAndGetBroadcastShape(t8, o);
    let i = "vec4(0.0)";
    n != null && (w.assertAndGetBroadcastShape(t8, n), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let p = "vec4(1.0)";
    s != null && (w.assertAndGetBroadcastShape(t8, s), this.variableNames.push("scale"), p = "getScaleAtOutCoords()"), this.outputShape = t8, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${p};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${a}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
};
var L9 = ({ inputs: r, backend: t8, attrs: e }) => {
  let { x: o, mean: n, variance: s, offset: a, scale: i } = r;
  y.assert(n.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), y.assert(a == null || n.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), y.assert(i == null || n.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: p } = e;
  p == null && (p = 1e-3);
  let u = [o, n, s], c = null;
  a != null && (c = a.shape, u.push(a));
  let l = null;
  i != null && (l = i.shape, u.push(i));
  let m = A().getBool("WEBGL_PACK_NORMALIZATION") ? new _h(o.shape, n.shape, s.shape, c, l, p) : new Th(o.shape, n.shape, s.shape, c, l, p);
  return t8.runWebGLProgram(m, u, u[0].dtype);
};
var bA = { kernelName: vn, backendName: "webgl", kernelFunc: L9 };
var $h = class {
  constructor(t8) {
    this.variableNames = ["source"], this.outputShape = t8, this.rank = t8.length;
    let e = Re(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let o = B9(this.rank), n, s = t8.map((a, i) => `sourceLoc.${bv[i]} = start[${i}] + coords.${bv[i]};`);
    n = `
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${s.join(`
`)}
      `, this.userCode = `
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `;
  }
};
var bv = ["x", "y", "z", "w", "u", "v"];
function B9(r) {
  if (r === 1)
    return "sourceLoc";
  if (r <= 6)
    return bv.slice(0, r).map((t8) => "sourceLoc." + t8).join(",");
  throw Error(`Slicing for rank ${r} is not yet supported`);
}
var Eh = class {
  constructor(t8) {
    this.variableNames = ["source"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t8, this.rank = t8.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let e = Re(this.rank), o = Dt("coords", this.rank), n = Dt("sourceLoc", this.rank), s = this.rank === 1 ? "sourceLoc" : `vec2(${n.slice(-2).join()})`, a = `getChannel(getSource(${n.join()}), ${s})`, i = `
      result.x = ${a};
      if (++${o[this.rank - 1]} < ${t8[this.rank - 1]}) {
        ++${n[this.rank - 1]};
        result.y = ${a};
        --${n[this.rank - 1]};
      }
    `, p = this.rank === 1 ? "" : `
      --${o[this.rank - 1]};
      if (++${o[this.rank - 2]} < ${t8[this.rank - 2]}) {
        ++${n[this.rank - 2]};
        result.z = ${a};
        if (++${o[this.rank - 1]} < ${t8[this.rank - 1]}) {
          ++${n[this.rank - 1]};
          result.w = ${a};
        }
      }
    `, u = this.rank <= 4 ? `sourceLoc = coords +
            ${e}(${t8.map((c, l) => `start[${l}]`).join()});` : t8.map((c, l) => `${n[l]} = ${o[l]} + start[${l}];`).join(`
`);
    this.userCode = `
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${i}
        ${p}
        setOutput(result);
      }
    `;
  }
};
function z9(r, t8, e, o) {
  let n = o.texData.get(r.dataId), s = o.makeTensorInfo(e, r.dtype), a = o.texData.get(s.dataId);
  Object.assign(a, n), a.refCount = 1, a.shape = e, a.dtype = r.dtype;
  let i = ct.computeFlatOffset(t8, y.computeStrides(r.shape));
  n.slice && (i += n.slice.flatOffset), a.slice = { flatOffset: i, origDataId: n.slice && n.slice.origDataId || r.dataId };
  let p = o.dataRefCount.get(a.slice.origDataId) || 1;
  return o.dataRefCount.set(a.slice.origDataId, p + 1), s;
}
function Gs(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { begin: s, size: a } = o, [i, p] = ct.parseSliceParams(n, s, a);
  if (ct.assertParamsValid(n, i, p), y.sizeFromShape(p) === 0)
    return e.makeTensorInfo(p, n.dtype, []);
  if (e.shouldExecuteOnCPU([n]) || n.dtype === "string") {
    let l = e.texData.get(n.dataId), m = pD(l.values, i, p, n.shape, n.dtype);
    return e.makeTensorInfo(p, n.dtype, m);
  }
  let { isPacked: u } = e.texData.get(n.dataId), c = ct.isSliceContinous(n.shape, i, p);
  if (u || !c) {
    let l = A().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Eh(p) : new $h(p), m = [i];
    return e.runWebGLProgram(l, [n], n.dtype, m);
  }
  return e.uploadToGPU(n.dataId), z9(n, i, p, e);
}
var CA = { kernelName: ha, backendName: "webgl", kernelFunc: Gs };
var V9 = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockShape: s, crops: a } = o;
  y.assert(n.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  let i = s.reduce((b, C) => b * C), p = w.getReshaped(n.shape, s, i), u = w.getPermuted(p.length, s.length), c = w.getReshapedPermuted(n.shape, s, i), l = w.getSliceBeginCoords(a, s.length), m = w.getSliceSize(c, a, s.length), d = [], f = te({ inputs: { x: n }, backend: e, attrs: { shape: p } }), h = Ct({ inputs: { x: f }, backend: e, attrs: { perm: u } }), g = te({ inputs: { x: h }, backend: e, attrs: { shape: c } }), x = Gs({ inputs: { x: g }, backend: e, attrs: { begin: l, size: m } });
  return d.push(f), d.push(h), d.push(g), d.forEach((b) => e.disposeIntermediateTensorInfo(b)), x;
};
var wA = { kernelName: Js, backendName: "webgl", kernelFunc: V9 };
function W9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, weights: s } = t8, { size: a } = o, i = e.readSync(n.dataId), p = e.readSync(s.dataId), u = ph(i, p, s.dtype, s.shape, a);
  return e.makeTensorInfo([a], s.dtype, u);
}
var SA = { kernelName: en, backendName: "webgl", kernelFunc: W9 };
var U9 = `
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`;
var G9 = `
  return float(int(a.r) & int(b.r));
`;
function H9(r) {
  let { inputs: t8, backend: e } = r, { a: o, b: n } = t8, s = A().getBool("WEBGL_PACK_BINARY_OPERATIONS"), a = A().getNumber("WEBGL_VERSION");
  if (e.shouldExecuteOnCPU([o, n]) || a === 1) {
    let p = e.texData.get(o.dataId).values, u = e.texData.get(n.dataId).values, [c, l] = AR(o.shape, n.shape, p, u, o.dtype), m = e.makeTensorInfo(l, o.dtype), d = e.texData.get(m.dataId);
    return d.values = c, m;
  }
  let i;
  return s ? i = new jr(U9, o.shape, n.shape, false) : i = new Pr(G9, o.shape, n.shape), e.runWebGLProgram(i, [o, n], o.dtype);
}
var IA = { kernelName: ja, backendName: "webgl", kernelFunc: H9 };
function K9(r) {
  let { inputs: t8, backend: e } = r, { s0: o, s1: n } = t8, s = e.readSync(o.dataId), a = e.readSync(n.dataId), i = w.assertAndGetBroadcastShape(Array.from(s), Array.from(a));
  return e.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
var vA = { kernelName: ea, backendName: "webgl", kernelFunc: K9 };
var q9 = "return float(a != b);";
var Cv = nt({ opSnippet: q9, cpuKernelImpl: eD, dtype: "bool" });
var kA = { kernelName: Qn, backendName: "webgl", kernelFunc: Cv };
function wi(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8, n = e.texData.get(o.dataId);
  return At({ inputs: { x: n.complexTensorInfos.real }, backend: e });
}
var NA = { kernelName: qi, backendName: "webgl", kernelFunc: wi };
var j9 = "return float(int(x));";
function TA(r, t8) {
  let e = new or(r.shape, j9), o = t8.runWebGLProgram(e, [r], "int32");
  return { dataId: o.dataId, shape: o.shape, dtype: o.dtype };
}
function wv(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { dtype: s } = o;
  if (s === "complex64") {
    if (n.dtype === "complex64")
      return At({ inputs: { x: n }, backend: e });
    let a = Gr(n.shape), i = wv({ inputs: { x: n }, backend: e, attrs: { dtype: "float32" } }), p = Or({ inputs: { real: i, imag: a }, backend: e });
    return a.dispose(), e.disposeIntermediateTensorInfo(i), p;
  }
  if (n.dtype === "complex64") {
    let a = wi({ inputs: { input: n }, backend: e }), i = wv({ inputs: { x: a }, backend: e, attrs: { dtype: s } });
    return e.disposeIntermediateTensorInfo(a), i;
  }
  if (!y.hasEncodingLoss(n.dtype, s)) {
    let a = At({ inputs: { x: n }, backend: e });
    return { dataId: a.dataId, shape: a.shape, dtype: s };
  }
  if (e.shouldExecuteOnCPU([n])) {
    let a = e.texData.get(n.dataId).values, [i, p, u] = FR(a, n.shape, n.dtype, s);
    return e.makeTensorInfo(i, p, u);
  }
  if (s === "int32")
    return TA(n, e);
  if (s === "bool") {
    let a = e.makeTensorInfo([], "bool", y.getTypedArrayFromDType("bool", 1)), p = Cv({ inputs: { a: n, b: a }, backend: e });
    return e.disposeIntermediateTensorInfo(a), p;
  }
  throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`);
}
var _A = { kernelName: bo, backendName: "webgl", kernelFunc: wv };
var $A = "return ceil(x);";
var X9 = xe({ opSnippet: $A, packedOpSnippet: $A, cpuKernelImpl: PR });
var EA = { kernelName: tn, backendName: "webgl", kernelFunc: X9 };
var Rh = class {
  constructor(t8) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = t8, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
};
var Dh = class {
  constructor(t8) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = t8, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
};
function Y9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { clipValueMin: s, clipValueMax: a } = o, i;
  A().getBool("WEBGL_PACK_CLIP") ? i = new Dh(n.shape) : i = new Rh(n.shape);
  let p = [[s], [a]];
  return e.runWebGLProgram(i, [n], n.dtype, p);
}
var RA = { kernelName: Co, backendName: "webgl", kernelFunc: Y9 };
var Ah = class {
  constructor(t8) {
    this.variableNames = ["real", "imag"], this.outputShape = t8, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
};
function DA(r, t8) {
  return { dataId: t8.dataId, dtype: t8.dtype, shape: r.shape };
}
function Q9(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8, n = e.texData.get(o.dataId), s = new Ah(o.shape), a = [DA(o, n.complexTensorInfos.real), DA(o, n.complexTensorInfos.imag)];
  return e.runWebGLProgram(s, a, a[0].dtype);
}
var AA = { kernelName: Pi, backendName: "webgl", kernelFunc: Q9 };
var Fh = class {
  constructor(t8) {
    this.outputShape = [], this.outputShape = w.computeOutShape(t8, 1), this.variableNames = t8.map((a, i) => `T${i}`);
    let e = new Array(t8.length - 1);
    e[0] = t8[0][1];
    for (let a = 1; a < e.length; a++)
      e[a] = e[a - 1] + t8[a][1];
    let o = [`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];
    for (let a = 1; a < e.length; a++) {
      let i = e[a - 1];
      o.push(`else if (yC < ${e[a]}) setOutput(getT${a}(yR, yC-${i}));`);
    }
    let n = e.length, s = e[e.length - 1];
    o.push(`else setOutput(getT${n}(yR, yC-${s}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `;
  }
};
var Oh = class {
  constructor(t8, e) {
    this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = w.computeOutShape(t8, e);
    let o = this.outputShape, n = o.length, s = Re(n), a = Dt("coords", n), i = ["x", "y", "z", "w", "u", "v"].slice(0, n);
    this.variableNames = t8.map((h, g) => `T${g}`);
    let p = new Array(t8.length - 1);
    p[0] = t8[0][e];
    for (let h = 1; h < p.length; h++)
      p[h] = p[h - 1] + t8[h][e];
    let u = i[e], c = i.slice(-2), l = i.join(), m = `if (${u} < ${p[0]}) {
        return getChannel(
            getT0(${l}), vec2(${c.join()}));
        }`;
    for (let h = 1; h < p.length; h++) {
      let g = p[h - 1];
      m += `
        if (${u} < ${p[h]}  && ${u} >= ${p[h - 1]}) {
          return getChannel(
            getT${h}(${Ph(i, u, g)}),
            vec2(${Ph(c, u, g)}));
        }`;
    }
    let d = p.length, f = p[p.length - 1];
    m += `
        return getChannel(
          getT${d}(${Ph(i, u, f)}),
          vec2(${Ph(c, u, f)}));`, this.userCode = `
      float getValue(${i.map((h) => "int " + h)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${a}), 0., 0., 0.);

        ${a[n - 1]} = ${a[n - 1]} + 1;
        if (${a[n - 1]} < ${o[n - 1]}) {
          result.g = getValue(${a});
        }

        ${a[n - 2]} = ${a[n - 2]} + 1;
        if (${a[n - 2]} < ${o[n - 2]}) {
          result.a = getValue(${a});
        }

        ${a[n - 1]} = ${a[n - 1]} - 1;
        if (${a[n - 2]} < ${o[n - 2]} &&
            ${a[n - 1]} < ${o[n - 1]}) {
          result.b = getValue(${a});
        }
        setOutput(result);
      }
    `;
  }
};
function Ph(r, t8, e) {
  let o = r.indexOf(t8);
  return r.map((s, a) => a === o ? `${s} - ${e}` : s).join();
}
function $p(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8, n = e.texData.get(o.dataId);
  return At({ inputs: { x: n.complexTensorInfos.imag }, backend: e });
}
var FA = { kernelName: Gi, backendName: "webgl", kernelFunc: $p };
function Gc(r, t8, e) {
  let o = r[0].dtype;
  if (o === "complex64") {
    let d = r.map((b) => wi({ inputs: { input: b }, backend: e })), f = r.map((b) => $p({ inputs: { input: b }, backend: e })), h = Gc(d, t8, e), g = Gc(f, t8, e), x = Or({ inputs: { real: h, imag: g }, backend: e });
    return d.forEach((b) => e.disposeIntermediateTensorInfo(b)), f.forEach((b) => e.disposeIntermediateTensorInfo(b)), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(g), x;
  }
  let n = e.shouldExecuteOnCPU(r);
  if (o === "string" && (n = true), n) {
    let d = r.map((S) => {
      let _ = [-1, y.sizeFromShape(S.shape.slice(t8))];
      return te({ inputs: { x: S }, backend: e, attrs: { shape: _ } });
    }), f = d.map((S) => ({ vals: e.readSync(S.dataId), shape: S.shape })), h = w.computeOutShape(d.map((S) => S.shape), 1), g = d[0].shape[0] === 1, x = OR(f, h, o, g), b = w.computeOutShape(r.map((S) => S.shape), t8), C = e.makeTensorInfo(b, o, x);
    return d.forEach((S) => e.disposeIntermediateTensorInfo(S)), C;
  }
  let s = r.filter((d) => y.sizeFromShape(d.shape) > 0), a = A().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && s[0].shape.length > 1;
  if (s.length === 1) {
    let d = a ? new or(r[0].shape, Ba) : new Fr(r[0].shape, Ba);
    return e.runWebGLProgram(d, r, o);
  }
  let i = A().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (s.length > i) {
    let d = [];
    for (let h = 0; h < s.length; h += i) {
      let g = s.slice(h, h + i);
      d.push(Gc(g, t8, e));
    }
    let f = Gc(d, t8, e);
    for (let h of d)
      e.disposeIntermediateTensorInfo(h);
    return f;
  }
  if (a) {
    let d = new Oh(s.map((f) => f.shape), t8);
    return e.runWebGLProgram(d, s, o);
  }
  let { tensors2D: p, outShape: u } = Z9(s, t8, e), c = new Fh(p.map((d) => d.shape)), l = e.runWebGLProgram(c, p, o);
  p.forEach((d) => e.disposeIntermediateTensorInfo(d));
  let m = te({ inputs: { x: l }, attrs: { shape: u }, backend: e });
  return e.disposeIntermediateTensorInfo(l), m;
}
function Z9(r, t8, e) {
  let o = w.computeOutShape(r.map((s) => s.shape), t8);
  return { tensors2D: r.map((s) => te({ inputs: { x: s }, attrs: { shape: [-1, y.sizeFromShape(s.shape.slice(t8))] }, backend: e })), outShape: o };
}
function Sv(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { axis: n } = o, s = y.parseAxisParam(n, t8[0].shape)[0], a = t8.map((u) => u.shape);
  w.assertParamsConsistent(a, s);
  let i = w.computeOutShape(t8.map((u) => u.shape), s);
  if (y.sizeFromShape(i) === 0)
    return e.makeTensorInfo(i, t8[0].dtype, []);
  let p = t8.filter((u) => y.sizeFromShape(u.shape) > 0);
  return p.length === 1 ? At({ inputs: { x: p[0] }, backend: e }) : Gc(p, s, e);
}
var PA = { kernelName: ta, backendName: "webgl", kernelFunc: Sv };
var Hc = class {
  constructor(t8, e = false, o = null, n = false, s = false) {
    this.variableNames = ["x", "W"], this.outputShape = t8.outShape;
    let a = t8.padInfo.top, i = t8.padInfo.left, p = t8.strideHeight, u = t8.strideWidth, c = t8.dilationHeight, l = t8.dilationWidth, m = t8.filterHeight, d = t8.filterWidth, f = Math.floor(t8.inChannels / 4) * 4, h = t8.inChannels % 4, g = t8.dataFormat === "channelsLast", x = g ? 1 : 2, b = g ? 2 : 3, C = g ? 3 : 1, S = "", k = "";
    o && (n ? S = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }` : s ? S = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }` : S = `
          float activation(float x) {
            ${o}
          }
        `, k = "result = activation(result);");
    let _ = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${S}

      const ivec2 strides = ivec2(${p}, ${u});
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${C}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${t8.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${l};

            if (xC < 0 || xC >= ${t8.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${h === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${h === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${h === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${_}
        ${k}
        setOutput(result);
      }
    `;
  }
};
var Mh = class {
  constructor(t8) {
    this.variableNames = ["x", "W"], this.outputShape = t8.outShape;
    let e = t8.padInfo.front, o = t8.padInfo.top, n = t8.padInfo.left, s = t8.strideDepth, a = t8.strideHeight, i = t8.strideWidth, p = t8.dilationDepth, u = t8.dilationHeight, c = t8.dilationWidth, l = t8.filterDepth, m = t8.filterHeight, d = t8.filterWidth, f = Math.floor(t8.inChannels / 4) * 4, h = t8.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${s}, ${a}, ${i});
      const ivec3 pads = ivec3(${e}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${l}; wF++) {
          int xF = xFCorner + wF * ${p};

          if (xF < 0 || xF >= ${t8.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${t8.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${t8.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${h === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${h === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${h === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Kc = class {
  constructor(t8, e = false, o = null, n = false, s = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = t8.outShape, this.enableShapeUniforms = pt(this.outputShape.length);
    let a = t8.padInfo.left, i = t8.strideWidth, p = t8.dilationWidth, u = t8.filterHeight, c = t8.filterWidth, l = c, m = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < c; g++)
      m += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
    m += `
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${t8.inChannels}; d1 += 2) {
       `;
    for (let g = 0; g < c; g++)
      m += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
    m += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let g = 0; g < (l + 1) / 2; g++) {
      let x = g * 2;
      if (m += `
           xC = xCCorner + ${x * p};
           `, i === 1) {
        if (x < c && (a % 2 === 1 ? (m += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `, p === 1 && x > 0 ? m += `
                 xC${x} = vec4(xTexelC${x - 2}.zw, xTexelC${x}.xy);
                 ` : m += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `) : m += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `, x + 1 < c)) {
          let b = a % 2 === 0 ? y.nearestLargerEven(p) : p;
          p % 2 === 0 && a % 2 === 1 || p % 2 !== 0 && a % 2 !== 1 ? (m += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                     xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x + 1}.zw = vec2(0.0);
                     }
                     xTexelC${x + 1}Ready = 1;
                   }
                   `, p > 1 ? m += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x + 1} = vec4(previous.zw, xTexelC${x + 1}.xy);
                     } else {
                      xC${x + 1} = vec4(0.0, 0.0, xTexelC${x + 1}.xy);
                     }
                     ` : m += `
                     xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.xy);
                     `) : b === 1 ? m += `
                     xC${x + 1} = xTexelC${x};
                     ` : m += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                       xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x + 1}.zw = vec2(0.0);
                       }
                       xTexelC${x + 1}Ready = 1;
                     }

                     xC${x + 1} = xTexelC${x + 1};
                     `;
        }
      } else
        x < c && (a % 2 === 1 ? (m += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x + 1}Ready == 0) {
                   xTexelC${x + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x + 1}.zw = vec2(0.0);
                   }
                   xTexelC${x + 1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
               `, x + 1 < c && (m += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x + 1} = vec4(xTexelC${x + 1}.xy, final.xy);
                 `)) : (m += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                   xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x + 1}.zw = vec2(0.);
                   }
                   xTexelC${x + 1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x + 1}.xy);
               `, x + 1 < c && (m += `
                   xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
                 `)));
      x < c && (m += `
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t8.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, x + 1 < c && (m += `
               wTexel = getW(r, ${x + 1}, d1, d2);
               dotProd += xC${x + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t8.inChannels}) {
                 dotProd += xC${x + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    m += `
     }
   `, m += `
     }
   `, m += `
     }
   `;
    let d = "", f = "";
    o && (n ? d = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }` : s ? d = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }` : d = `vec4 activation(vec4 x) {
           ${o}
         }`, f = "result = activation(result);");
    let h = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${d}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${h}
         ${f}
         setOutput(result);
       }
     `;
  }
};
var Lh = class {
  constructor(t8, e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec4" }, { name: "pad", type: "ivec2" }, { name: "stride", type: "ivec2" }, { name: "dilation", type: "ivec2" }, { name: "inChannels", type: "int" }, { name: "itemsPerBlockRow", type: "int" }, { name: "outWidth", type: "int" }], this.outputShape = t8, this.enableShapeUniforms = pt(this.outputShape.length);
    let { dataFormat: o } = e, n = vt(), s = o === "channelsLast", a = s ? 1 : 2, i = s ? 2 : 3, p = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${t8[2]} && pos < ${t8[1]}) {`, u = "";
    for (let c = 0; c <= 1; c++)
      for (let l = 0; l <= 1; l++)
        u += `
          blockIndex = rc.z + ${l};
          pos = rc.y + ${c};

          ${p}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${a}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c * 2 + l}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c * 2 + l}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `;
  }
};
function Bh(r, t8) {
  let e = r.length;
  return e >= 3 ? t8 ? [...r.slice(0, -3), r[e - 3] * r[e - 2], r[e - 1]] : [...r.slice(0, -3), r[e - 3], r[e - 2] * r[e - 1]] : !t8 && e === 1 && r[0] > 1 ? [r[0], 1] : null;
}
function zh({ x: r, filter: t8, convInfo: e, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let p = r.shape, u = o.texData.get(r.dataId), c = e.inChannels, l = p[0] * p[1] * p[2], m = e.outChannels, d = e.dataFormat === "channelsLast", f = false, h = false, g, x = [];
  if (s != null) {
    let S = Bh(s.shape, d);
    S != null && (s = te({ inputs: { x: s }, backend: o, attrs: { shape: S } }), x.push(s));
  }
  if (n != null) {
    let S = Bh(n.shape, d);
    S != null && (n = te({ inputs: { x: n }, backend: o, attrs: { shape: S } }), x.push(n));
  }
  if (!((l === 1 || m === 1) && c > yv) && u.isPacked && d && u.texture != null && p[2] % 2 !== 0 && y.arraysEqual(u.shape.slice(-3), p.slice(-3))) {
    let S = p[0] * p[1] * (p[2] + 1), k = { dataId: r.dataId, shape: [1, S, e.inChannels], dtype: r.dtype }, _ = u.shape;
    u.shape = u.shape.slice(), u.shape[u.shape.length - 2]++, y.assert(Cu(u.shape, k.shape), () => `packed reshape ${u.shape} to ${k.shape} isn't free`);
    let E = te({ inputs: { x: t8 }, backend: o, attrs: { shape: [1, e.inChannels, e.outChannels] } });
    x.push(E);
    let R = _p({ a: k, b: E, backend: o, transposeA: f, transposeB: h, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a }), D = o.texData.get(R.dataId);
    y.assert(D.isPacked, () => "batchMatMul result is expected to be packed"), u.shape = _, D.shape = e.outShape, g = At({ inputs: { x: R }, backend: o }), g.shape = e.outShape, x.push(R);
  } else {
    let S = e.outHeight * e.outWidth, k = te({ inputs: { x: r }, backend: o, attrs: { shape: d ? [e.batchSize, S, e.inChannels] : [e.batchSize, e.inChannels, S] } }), _ = te({ inputs: { x: t8 }, backend: o, attrs: { shape: [1, e.inChannels, e.outChannels] } }), E = _p({ a: d ? k : _, b: d ? _ : k, transposeA: !d, transposeB: h, backend: o, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a });
    g = te({ inputs: { x: E }, backend: o, attrs: { shape: e.outShape } }), x.push(k), x.push(_), x.push(E);
  }
  for (let S of x)
    o.disposeIntermediateTensorInfo(S);
  return g;
}
function Vh({ x: r, filter: t8, convInfo: e, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let { filterWidth: p, filterHeight: u, inChannels: c, outWidth: l, outHeight: m, dataFormat: d } = e, f = d === "channelsLast", h = p * u * c, g = m * l, x = [e.batchSize, h, g], b = true, C = false, S = [];
  if (s != null) {
    let q = Bh(s.shape, f);
    q != null && (s = te({ inputs: { x: s }, backend: o, attrs: { shape: q } }), S.push(s));
  }
  if (n != null) {
    let q = Bh(n.shape, f);
    q != null && (n = te({ inputs: { x: n }, backend: o, attrs: { shape: q } }), S.push(n));
  }
  let k = te({ inputs: { x: t8 }, backend: o, attrs: { shape: [1, h, y.sizeFromShape(t8.shape) / h] } });
  S.push(k);
  let _ = new Lh(x, e), E = [r.shape, [e.padInfo.top, e.padInfo.left], [e.strideHeight, e.strideWidth], [e.dilationHeight, e.dilationWidth], [e.inChannels], [e.filterWidth * e.inChannels], [e.outWidth]], R = o.runWebGLProgram(_, [r], "float32", E), D = te({ inputs: { x: R }, backend: o, attrs: { shape: x } });
  S.push(R), S.push(D);
  let P = n != null, O = s != null, M = i === "leakyrelu", L = i ? Ci(i, true) : null, B = new Uc(f ? D.shape : k.shape, f ? k.shape : D.shape, f ? [e.batchSize, g, e.outChannels] : [e.batchSize, e.outChannels, g], b, C, P, L, O, M), z = f ? [D, k] : [k, D];
  if (n && z.push(n), O && z.push(s), M) {
    let q = o.makeTensorInfo([], "float32", y.createScalarValue(a, "float32"));
    z.push(q), S.push(q);
  }
  let U = o.runWebGLProgram(B, z, "float32"), j = te({ inputs: { x: U }, backend: o, attrs: { shape: e.outShape } });
  S.push(U);
  for (let q of S)
    o.disposeIntermediateTensorInfo(q);
  return j;
}
function J9(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dataFormat: p, dilations: u, dimRoundingMode: c } = o, l = w.convertConv2DDataFormat(p), m = w.computeConv2DInfo(n.shape, s.shape, a, u, i, c, false, l), d;
  if (m.filterHeight === 1 && m.filterWidth === 1 && m.dilationHeight === 1 && m.dilationWidth === 1 && m.strideHeight === 1 && m.strideWidth === 1 && (m.padInfo.type === "SAME" || m.padInfo.type === "VALID"))
    d = zh({ x: n, filter: s, convInfo: m, backend: e });
  else if (m.strideWidth <= 2 && l === "channelsLast" && A().getBool("WEBGL_EXP_CONV")) {
    let h = new Kc(m), g = [[m.padInfo.top, m.padInfo.left], [m.strideHeight, m.strideWidth], [m.dilationHeight, m.dilationWidth], [m.inHeight, m.inWidth]];
    d = e.runWebGLProgram(h, [n, s], "float32", g);
  } else if (A().getBool("WEBGL_CONV_IM2COL"))
    d = Vh({ x: n, filter: s, convInfo: m, backend: e });
  else {
    let h = new Hc(m);
    d = e.runWebGLProgram(h, [n, s], "float32");
  }
  let f = te({ inputs: { x: d }, backend: e, attrs: { shape: m.outShape } });
  return e.disposeIntermediateTensorInfo(d), f;
}
var OA = { kernelName: rn, backendName: "webgl", kernelFunc: J9 };
var Wh = class {
  constructor(t8) {
    this.variableNames = ["x", "dy"], this.outputShape = t8.filterShape;
    let e = t8.strideHeight, o = t8.strideWidth, n = t8.padInfo.top, s = t8.padInfo.left, a = t8.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t8.batchSize}; b++) {
          for (int yR = 0; yR < ${t8.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t8.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t8.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t8.inWidth}) {
                continue;
              }

              ${a ? `float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);` : `float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Uh = class {
  constructor(t8) {
    this.variableNames = ["dy", "W"], this.outputShape = t8.inShape;
    let e = t8.filterHeight, o = t8.filterWidth, n = t8.strideHeight, s = t8.strideWidth, a = t8.dataFormat === "channelsLast", i = e - 1 - t8.padInfo.top, p = o - 1 - t8.padInfo.left, u = a ? 1 : 2, c = a ? 2 : 3, l = a ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${l}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t8.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t8.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${t8.outChannels}; d2++) {

              if (${a}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Gh = class {
  constructor(t8) {
    this.variableNames = ["x", "dy"], this.outputShape = t8.filterShape;
    let e = t8.strideDepth, o = t8.strideHeight, n = t8.strideWidth, s = t8.padInfo.front, a = t8.padInfo.top, i = t8.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t8.batchSize}; b++) {
          for (int yF = 0; yF < ${t8.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${s};

            if (xF < 0 || xF >= ${t8.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t8.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${a};

              if (xR < 0 || xR >= ${t8.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t8.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${i};

                if (xC < 0 || xC >= ${t8.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Hh = class {
  constructor(t8) {
    this.variableNames = ["dy", "W"], this.outputShape = t8.inShape;
    let e = t8.filterDepth, o = t8.filterHeight, n = t8.filterWidth, s = t8.strideDepth, a = t8.strideHeight, i = t8.strideWidth, p = e - 1 - t8.padInfo.front, u = o - 1 - t8.padInfo.top, c = n - 1 - t8.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${p}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${t8.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${t8.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${t8.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${t8.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function eJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, pad: i, dataFormat: p, dimRoundingMode: u, filterShape: c } = o, l = w.convertConv2DDataFormat(p), m = w.computeConv2DInfo(n.shape, c, a, 1, i, u, false, l), d = new Wh(m);
  return e.runWebGLProgram(d, [n, s], "float32");
}
var MA = { kernelName: Oi, backendName: "webgl", kernelFunc: eJ };
var Kh = class {
  constructor(t8) {
    this.variableNames = ["dy", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "strides", type: "vec2" }], this.outputShape = t8.inShape, this.enableShapeUniforms = pt(this.outputShape.length);
    let e = t8.filterHeight, o = t8.filterWidth, n = e - 1 - t8.padInfo.top, s = o - 1 - t8.padInfo.left;
    this.userCode = `
      const ivec2 pads = ivec2(${n}, ${s});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${t8.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            int wCPerm = ${o} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${t8.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t8.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${t8.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${t8.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${t8.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `;
  }
};
function tJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { inputShape: a, strides: i, pad: p, dataFormat: u, dimRoundingMode: c } = o, l = w.convertConv2DDataFormat(u), m = w.computeConv2DInfo(a, s.shape, i, 1, p, c, false, l);
  if (A().getBool("WEBGL_PACK_CONV2DTRANSPOSE") && l === "channelsLast") {
    let d = [[m.strideHeight, m.strideWidth]], f = new Kh(m);
    return e.runWebGLProgram(f, [n, s], "float32", d);
  } else {
    let d = new Uh(m);
    return e.runWebGLProgram(d, [n, s], "float32");
  }
}
var LA = { kernelName: on, backendName: "webgl", kernelFunc: tJ };
function rJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p } = o, u = w.computeConv3DInfo(n.shape, s.shape, a, p, i), c = new Mh(u);
  return e.runWebGLProgram(c, [n, s], "float32");
}
var BA = { kernelName: nn, backendName: "webgl", kernelFunc: rJ };
function oJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, pad: i, filterShape: p } = o, u = w.computeConv3DInfo(n.shape, p, a, 1, i), c = new Gh(u);
  return e.runWebGLProgram(c, [n, s], "float32");
}
var zA = { kernelName: Xa, backendName: "webgl", kernelFunc: oJ };
function nJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { pad: a, strides: i, inputShape: p } = o, u = w.computeConv3DInfo(p, s.shape, i, 1, a), c = new Hh(u);
  return e.runWebGLProgram(c, [n, s], "float32");
}
var VA = { kernelName: sn, backendName: "webgl", kernelFunc: nJ };
var sJ = Po + `
  return cos(x);
`;
var aJ = `
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${Xr}
  return result;
`;
var iJ = xe({ opSnippet: sJ, packedOpSnippet: aJ });
var WA = { kernelName: an, backendName: "webgl", kernelFunc: iJ };
var uJ = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
var pJ = xe({ opSnippet: uJ });
var UA = { kernelName: un, backendName: "webgl", kernelFunc: pJ };
var qh = class {
  constructor(t8, e, o, n, s) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    let [a, i, p, u] = t8, [c] = e, [l, m] = o;
    this.outputShape = [c, l, m, u];
    let d = n === "bilinear" ? 1 : 0, [f, h] = [`${i - 1}.0`, `${p - 1}.0`], [g, x, b] = l > 1 ? [`${(i - 1) / (l - 1)}`, "(y2-y1) * height_ratio", `y1*${f} + float(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${f}`], [C, S, k] = m > 1 ? [`${(p - 1) / (m - 1)}`, "(x2-x1) * width_ratio", `x1*${h} + float(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${h}`];
    this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${C});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${a}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${S};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${k};
        if( in_x < 0.0 || in_x > ${h} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${d} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
};
var cJ = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { image: n, boxes: s, boxInd: a } = t8, { cropSize: i, method: p, extrapolationValue: u } = o, c = new qh(n.shape, s.shape, i, p, u);
  return e.runWebGLProgram(c, [n, s, a], "float32");
};
var GA = { kernelName: ln, backendName: "webgl", kernelFunc: cJ };
var Ep;
(function(r) {
  r.Prod = "*", r.Sum = "+";
})(Ep || (Ep = {}));
var om = class {
  constructor(t8, e, o, n) {
    this.op = t8, this.outputShape = e, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    let s = this.outputShape.length, a = this.op === Ep.Prod ? "1.0" : "0.0", i = o ? a : `getX(${HA(s, "coords", this.op)})`, p = this.outputShape[this.outputShape.length - 1], u = "", c = "";
    o ? (u = n ? `end != ${p - 1}` : "end != 0", c = n ? "end + 1" : "end - 1") : (u = n ? `end + pow2 < ${p}` : "end >= pow2", c = n ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${Re(s)} coords = getOutputCoords();
        int end = ${KA(s, "coords", this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${KA(s, "coords", this.op)} = idx;
          val ${this.op}= getX(${HA(s, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
};
function HA(r, t8, e) {
  if (r === 1)
    return `${t8}`;
  if (r === 2)
    return `${t8}.x, ${t8}.y`;
  if (r === 3)
    return `${t8}.x, ${t8}.y, ${t8}.z`;
  if (r === 4)
    return `${t8}.x, ${t8}.y, ${t8}.z, ${t8}.w`;
  throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`);
}
function KA(r, t8, e) {
  if (r === 1)
    return `${t8}`;
  if (r === 2)
    return `${t8}.y`;
  if (r === 3)
    return `${t8}.z`;
  if (r === 4)
    return `${t8}.w`;
  throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`);
}
function jh(r, t8, e, o, n, s) {
  let a = t8.shape.length, i = w.getAxesPermutation([o], a), p = t8;
  i != null && (p = Ct({ inputs: { x: t8 }, backend: e, attrs: { perm: i } }));
  let u = w.getInnerMostAxes(1, a)[0];
  if (u !== a - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${t8.shape.length - 1} but got axis=${o}`);
  let c = p.shape[u], l = At({ inputs: { x: p }, backend: e });
  for (let m = 0; m <= Math.ceil(Math.log2(c)) - 1; m++) {
    let d = new om(r, p.shape, false, s), f = [[m]], h = l;
    l = e.runWebGLProgram(d, [l], l.dtype, f), e.disposeIntermediateTensorInfo(h);
  }
  if (n) {
    let m = new om(r, p.shape, n, s), d = l;
    l = e.runWebGLProgram(m, [l], l.dtype), e.disposeIntermediateTensorInfo(d);
  }
  if (i != null) {
    let m = w.getUndoAxesPermutation(i), d = Ct({ inputs: { x: l }, backend: e, attrs: { perm: m } });
    return e.disposeIntermediateTensorInfo(l), e.disposeIntermediateTensorInfo(p), d;
  }
  return l;
}
function lJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, exclusive: a, reverse: i } = o;
  return jh(Ep.Prod, n, e, s, a, i);
}
var qA = { kernelName: pn, backendName: "webgl", kernelFunc: lJ };
function mJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, exclusive: a, reverse: i } = o;
  return jh(Ep.Sum, n, e, s, a, i);
}
var jA = { kernelName: cn, backendName: "webgl", kernelFunc: mJ };
function dJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, weights: s } = t8, { size: a, binaryOutput: i } = o;
  if (n.shape.length === 1) {
    let p = e.readSync(n.dataId), u = e.readSync(s.dataId), c = ph(p, u, s.dtype, s.shape, a);
    return e.makeTensorInfo([a], s.dtype, c);
  } else if (n.shape.length === 2) {
    let p = e.bufferSync(n), u = e.bufferSync(s), c = DR(p, u, a, i);
    return e.makeTensorInfo(c.shape, s.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`);
}
var XA = { kernelName: ra, backendName: "webgl", kernelFunc: dJ };
var Xh = class {
  constructor(t8, e, o) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = t8, this.blockSize = e, this.dataFormat = o, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
function fJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockSize: s, dataFormat: a } = o, i = n.shape[0], p = a === "NHWC" ? n.shape[1] : n.shape[2], u = a === "NHWC" ? n.shape[2] : n.shape[3], c = a === "NHWC" ? n.shape[3] : n.shape[1], l = p * s, m = u * s, d = c / (s * s), f = a === "NHWC" ? [i, l, m, d] : [i, d, l, m], h = new Xh(f, s, a);
  return e.runWebGLProgram(h, [n], n.dtype);
}
var YA = { kernelName: mn, backendName: "webgl", kernelFunc: fJ };
var qc = class {
  constructor(t8, e = false, o = null, n = false, s = false) {
    this.variableNames = ["x", "W"], this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = t8.outShape, this.enableShapeUniforms = pt(this.outputShape.length);
    let a = t8.filterHeight, i = t8.filterWidth, p = t8.outChannels / t8.inChannels, u = "", c = "";
    o && (n ? u = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }` : s ? u = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }` : u = `
          float activation(float x) {
            ${o}
          }
        `, c = "result = activation(result);");
    let l = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${p};
        int q = d2 - d1 * ${p};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${a}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${l}
        ${c}
        setOutput(result);
      }
    `;
  }
};
var jc = class {
  constructor(t8, e = false, o = null, n = false, s = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = t8.outShape, this.enableShapeUniforms = pt(this.outputShape.length);
    let a = t8.outChannels / t8.inChannels, i = t8.padInfo.left, p = t8.strideWidth, u = t8.dilationWidth, c = t8.filterHeight, l = t8.filterWidth, m = l, d = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let x = 0; x < l; x++)
      d += `
          vec4 xTexelC${x * 2};
          int xTexelC${x * 2}Ready;
          vec4 xTexelC${x * 2 + 1};
          int xTexelC${x * 2 + 1}Ready;
          vec4 xC${x};`;
    d += `
    for (int r = 0; r < ${c}; r++) {
      `;
    for (let x = 0; x < l; x++)
      d += `
          xTexelC${x * 2} = vec4(0.0);
          xTexelC${x * 2}Ready = 0;
          xTexelC${x * 2 + 1} = vec4(0.0);
          xTexelC${x * 2 + 1}Ready = 0;
          xC${x} = vec4(0.0);`;
    d += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let x = 0; x < (m + 1) / 2; x++) {
      let b = x * 2;
      if (d += `
          xC = xCCorner + ${b * u};
          `, p === 1) {
        if (b < l && (i % 2 === 1 ? (d += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, u === 1 && b > 0 ? d += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : d += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : d += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < l)) {
          let C = i % 2 === 0 ? y.nearestLargerEven(u) : u;
          u % 2 === 0 && i % 2 === 1 || u % 2 !== 0 && i % 2 !== 1 ? (d += `
                  xCOffset = xC + imod(pads[1], 2) + ${C};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, u > 1 ? d += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    ` : d += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : C === 1 ? d += `
                    xC${b + 1} = xTexelC${b};
                    ` : d += `
                    xCOffset = xC + ${C};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
        }
      } else
        b < l && (i % 2 === 1 ? (d += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < l && (d += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (d += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < l && (d += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
      b < l && (d += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < l && (d += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    d += `
    }
  `, d += `
      }
    `;
    let f = "", h = "";
    o && (n ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }` : s ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }` : f = `vec4 activation(vec4 x) {
          ${o}
        }`, h = "result = activation(result);");
    let g = e ? "result += getBiasAtOutCoords();" : "";
    e && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${a};
        int q = d2 - d1 * ${a};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${d}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${h}
        setOutput(result);
      }
    `;
  }
};
function hJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p, dimRoundingMode: u } = o, c = p;
  c == null && (c = [1, 1]), y.assert(w.eitherStridesOrDilationsAreOne(a, c), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  let l = w.computeConv2DInfo(n.shape, s.shape, a, c, i, u, true), m;
  A().getBool("WEBGL_PACK_DEPTHWISECONV") && l.strideWidth <= 2 && l.outChannels / l.inChannels === 1 ? m = new jc(l) : m = new qc(l);
  let d = [[l.padInfo.top, l.padInfo.left], [l.strideHeight, l.strideWidth], [l.dilationHeight, l.dilationWidth], [l.inHeight, l.inWidth]];
  return e.runWebGLProgram(m, [n, s], "float32", d);
}
var QA = { kernelName: dn, backendName: "webgl", kernelFunc: hJ };
var Yh = class {
  constructor(t8) {
    this.variableNames = ["x", "dy"], this.outputShape = t8.filterShape;
    let e = t8.strideHeight, o = t8.strideWidth, n = t8.padInfo.top, s = t8.padInfo.left, a = t8.outChannels / t8.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${a} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t8.batchSize}; b++) {
          for (int yR = 0; yR < ${t8.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t8.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t8.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t8.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Qh = class {
  constructor(t8) {
    this.variableNames = ["dy", "W"], this.outputShape = t8.inShape;
    let e = t8.filterHeight, o = t8.filterWidth, n = t8.strideHeight, s = t8.strideWidth, a = e - 1 - t8.padInfo.top, i = o - 1 - t8.padInfo.left, p = t8.outChannels / t8.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t8.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t8.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${p}; dm++) {
              int d2 = d1 * ${p} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function gJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, dilations: i, pad: p, dimRoundingMode: u, filterShape: c } = o, l = w.computeConv2DInfo(n.shape, c, a, i, p, u, true), m = new Yh(l);
  return e.runWebGLProgram(m, [n, s], "float32");
}
var ZA = { kernelName: Mi, backendName: "webgl", kernelFunc: gJ };
function xJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { strides: a, dilations: i, pad: p, dimRoundingMode: u, inputShape: c } = o, l = w.computeConv2DInfo(c, s.shape, a, i, p, u, true), m = new Qh(l);
  return e.runWebGLProgram(m, [n, s], "float32");
}
var JA = { kernelName: Li, backendName: "webgl", kernelFunc: xJ };
var Zh = class {
  constructor(t8) {
    this.variableNames = ["X"], this.outputShape = [t8, t8], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
};
function yJ(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8, n = [...o.shape, ...o.shape], s = y.sizeFromShape(o.shape), a = te({ inputs: { x: o }, backend: e, attrs: { shape: [s] } }), i = new Zh(s), p = e.runWebGLProgram(i, [a], a.dtype), u = te({ inputs: { x: p }, backend: e, attrs: { shape: n } });
  return e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(p), u;
}
var eF = { kernelName: oa, backendName: "webgl", kernelFunc: yJ };
var Jh = class {
  constructor(t8) {
    this.variableNames = ["x", "W"], this.outputShape = t8.outShape;
    let { inHeight: e, inWidth: o, padInfo: n, strideHeight: s, strideWidth: a, filterHeight: i, filterWidth: p, dilationHeight: u, dilationWidth: c } = t8, { top: l, left: m } = n;
    this.userCode = `
      const ivec2 strides = ivec2(${s}, ${a});
      const ivec2 pads = ivec2(${l}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${p}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
};
function bJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p } = o, u = w.computeDilation2DInfo(n.shape, s.shape, a, i, "NHWC", p), c, l = new Jh(u);
  c = e.runWebGLProgram(l, [n, s], "float32");
  let m = te({ inputs: { x: c }, backend: e, attrs: { shape: u.outShape } });
  return e.disposeIntermediateTensorInfo(c), m;
}
var tF = { kernelName: fn, backendName: "webgl", kernelFunc: bJ };
function CJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { equation: n } = o, s = t8, { allDims: a, summedDims: i, idDims: p } = w.decodeEinsumEquation(n, s.length);
  w.checkEinsumDimSizes(a.length, p, s);
  let { path: u, steps: c } = w.getEinsumComputePath(i, p), l = c.length, m = null, d = a.length, f = [];
  for (let h = 0; h < l; ++h) {
    for (let g of c[h]) {
      let { permutationIndices: x, expandDims: b } = w.getEinsumPermutation(d, p[g]), C;
      w.isIdentityPermutation(x) ? C = s[g] : (C = Ct({ inputs: { x: s[g] }, backend: e, attrs: { perm: x } }), f.push(C));
      let S = C.shape.slice();
      for (let k = 0; k < b.length; ++k)
        S.splice(b[k], 0, 1);
      y.arraysEqual(C.shape, S) || (C = te({ inputs: { x: C }, backend: e, attrs: { shape: S } }), f.push(C)), m === null ? m = C : (m = tm({ inputs: { a: C, b: m }, backend: e }), f.push(m));
    }
    h < l - 1 && (u[h] >= 0 && (m = Tp({ inputs: { x: m }, backend: e, attrs: { axis: u[h] - (a.length - d), keepDims: false } }), f.push(m)), d--);
  }
  for (let h of f)
    h !== m && e.disposeIntermediateTensorInfo(h);
  return m;
}
var rF = { kernelName: Vi, backendName: "webgl", kernelFunc: CJ };
var wJ = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var SJ = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var IJ = xe({ opSnippet: wJ, packedOpSnippet: SJ });
var oF = { kernelName: gn, backendName: "webgl", kernelFunc: IJ };
var vJ = "return (b >= 0.0) ? a : a * (b + 1.0);";
var kJ = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
var NJ = (r) => {
  let { inputs: t8, backend: e } = r, { dy: o, y: n } = t8, s = A().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new jr(kJ, o.shape, n.shape) : new Pr(vJ, o.shape, n.shape);
  return e.runWebGLProgram(s, [o, n], o.dtype);
};
var nF = { kernelName: Ya, backendName: "webgl", kernelFunc: NJ };
var TJ = `
  return vec4(equal(a, b));
`;
var _J = "return float(a == b);";
var $J = nt({ opSnippet: _J, packedOpSnippet: TJ, dtype: "bool", cpuKernelImpl: MR });
var sF = { kernelName: yn, backendName: "webgl", kernelFunc: $J };
var EJ = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${w.ERF_P};
  float a1 = ${w.ERF_A1};
  float a2 = ${w.ERF_A2};
  float a3 = ${w.ERF_A3};
  float a4 = ${w.ERF_A4};
  float a5 = ${w.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
var RJ = xe({ opSnippet: EJ });
var aF = { kernelName: xn, backendName: "webgl", kernelFunc: RJ };
var DJ = Po + `
  return exp(x);
`;
var AJ = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var Iv = xe({ opSnippet: DJ, packedOpSnippet: AJ, cpuKernelImpl: LR, dtype: "float32" });
var iF = { kernelName: bn, backendName: "webgl", kernelFunc: Iv };
function eg(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { dim: n } = e, { input: s } = t8, a = s.shape.length, i = s.shape.slice(), p = n;
  return n < 0 && (y.assert(-(a + 1) <= n, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), p = a + n + 1), i.splice(p, 0, 1), te({ inputs: { x: s }, backend: o, attrs: { shape: i } });
}
var uF = { kernelName: na, backendName: "webgl", kernelFunc: eg };
var pF = "return exp(x) - 1.0;";
var FJ = xe({ opSnippet: pF, packedOpSnippet: pF, cpuKernelImpl: BR });
var cF = { kernelName: Cn, backendName: "webgl", kernelFunc: FJ };
var nm = class {
  constructor(t8, e, o) {
    this.variableNames = ["real", "imag"];
    let n = e[1];
    this.outputShape = e;
    let s = o ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, a = o ? `${n}.0` : "1.0", i;
    if (t8 === "real")
      i = "return real * expR - imag * expI;";
    else if (t8 === "imag")
      i = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${t8}.`);
    this.userCode = `
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${a};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
};
function tg(r, t8, e) {
  let o = e.texData.get(r.dataId), n = y.sizeFromShape(r.shape), s = r.shape[r.shape.length - 1], a = n / s, i = te({ inputs: { x: r }, backend: e, attrs: { shape: [a, s] } }), p = i.shape, u = new nm("real", p, t8), c = new nm("imag", p, t8), l = [{ dataId: o.complexTensorInfos.real.dataId, dtype: o.complexTensorInfos.real.dtype, shape: p }, { dataId: o.complexTensorInfos.imag.dataId, dtype: o.complexTensorInfos.imag.dtype, shape: p }], m = e.runWebGLProgram(u, l, "float32"), d = e.runWebGLProgram(c, l, "float32"), f = Or({ inputs: { real: m, imag: d }, backend: e });
  e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(d);
  let h = te({ inputs: { x: f }, backend: e, attrs: { shape: r.shape } });
  return e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(f), h;
}
function PJ(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8;
  return tg(o, false, e);
}
var lF = { kernelName: Wi, backendName: "webgl", kernelFunc: PJ };
var rg = class {
  constructor(t8, e) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = t8, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
};
function Si(r) {
  let { backend: t8, attrs: e } = r, { shape: o, value: n } = e, { dtype: s } = e;
  if (s = s || y.inferDtype(n), s === "string") {
    let a = y.getArrayFromDType(s, y.sizeFromShape(o));
    return a.fill(n), t8.makeTensorInfo(o, s, a);
  } else {
    let a = new rg(o, n), i = [[n]];
    return t8.runWebGLProgram(a, [], s, i);
  }
}
var mF = { kernelName: sa, backendName: "webgl", kernelFunc: Si };
var og = class {
  constructor(t8) {
    this.variableNames = ["Image"], this.outputShape = [];
    let e = t8[2];
    this.outputShape = t8, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var dF = { kernelName: wn, backendName: "webgl", kernelFunc: ({ inputs: r, backend: t8 }) => {
  let { image: e } = r, o = t8, n = new og(e.shape);
  return o.runWebGLProgram(n, [e], e.dtype);
} };
var fF = "return floor(x);";
var OJ = xe({ opSnippet: fF, packedOpSnippet: fF, cpuKernelImpl: zR });
var hF = { kernelName: Sn, backendName: "webgl", kernelFunc: OJ };
var MJ = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
var LJ = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
var BJ = nt({ opSnippet: MJ, packedOpSnippet: LJ, dtype: "int32" });
var gF = { kernelName: In, backendName: "webgl", kernelFunc: BJ };
var ng = class {
  constructor(t8) {
    this.variableNames = ["A"];
    let e = vt(), [o, n] = t8;
    this.outputShape = t8, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
};
var sg = class {
  constructor(t8) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
    let e = vt(), [o, n] = t8;
    this.outputShape = t8, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `;
  }
};
var xF = { kernelName: Mu, backendName: "webgl", kernelFunc: zJ };
var Xc;
var vv = A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function zJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { pixels: n } = t8, { numChannels: s } = o, a = typeof HTMLVideoElement != "undefined" && n instanceof HTMLVideoElement, i = typeof HTMLImageElement != "undefined" && n instanceof HTMLImageElement, [p, u] = a ? [n.videoWidth, n.videoHeight] : [n.width, n.height], c = [u, p], l = [u, p, s];
  if (i || a) {
    let h = A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (Xc == null || h !== vv) && (vv = h, Xc = document.createElement("canvas").getContext("2d", { willReadFrequently: vv })), Xc.canvas.width = p, Xc.canvas.height = u, Xc.drawImage(n, 0, 0, p, u), n = Xc.canvas;
  }
  let m = e.makeTensorInfo(c, "int32");
  e.texData.get(m.dataId).usage = dr.PIXELS, e.gpgpu.uploadPixelDataToTexture(e.getTexture(m.dataId), n);
  let d = A().getBool("WEBGL_PACK") ? new sg(l) : new ng(l), f = e.runWebGLProgram(d, [m], "int32");
  return e.disposeData(m.dataId), f;
}
function VJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = t8, { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = o, h = w.convertConv2DDataFormat(c), g = w.computeConv2DInfo(n.shape, s.shape, p, l, u, m, false, h), x, b = [], C = a != null, S = i != null, k = d === "leakyrelu", _ = () => {
    let R = [n, s], D = (P, O) => {
      if (O === "NCHW" && P.shape.length === 1 && P.shape[0] !== 1) {
        let M = te({ inputs: { x: P }, backend: e, attrs: { shape: [P.shape[0], 1, 1] } });
        return b.push(M), M;
      }
      return P;
    };
    if (C && R.push(D(a, c)), S && R.push(D(i, c)), k) {
      let P = e.makeTensorInfo([], "float32", y.createScalarValue(f, "float32"));
      R.push(P), b.push(P);
    }
    return R;
  };
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID"))
    x = zh({ x: n, filter: s, convInfo: g, backend: e, bias: a, activation: d, preluActivationWeights: i, leakyreluAlpha: f });
  else if (g.strideWidth <= 2 && h === "channelsLast" && A().getBool("WEBGL_EXP_CONV")) {
    let R = d ? Ci(d, true) : null, D = new Kc(g, C, R, S, k), P = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], O = _();
    x = e.runWebGLProgram(D, O, "float32", P);
  } else if (A().getBool("WEBGL_CONV_IM2COL"))
    x = Vh({ x: n, filter: s, convInfo: g, backend: e, bias: a, activation: d, preluActivationWeights: i, leakyreluAlpha: f });
  else {
    let R = d ? Ci(d, false) : null, D = new Hc(g, C, R, S, k), P = _();
    x = e.runWebGLProgram(D, P, "float32");
  }
  let E = te({ inputs: { x }, backend: e, attrs: { shape: g.outShape } });
  return b.push(x), b.forEach((R) => e.disposeIntermediateTensorInfo(R)), E;
}
var yF = { kernelName: vo, backendName: "webgl", kernelFunc: VJ };
function WJ(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = t8, { strides: p, pad: u, dilations: c, dimRoundingMode: l, activation: m, leakyreluAlpha: d } = o, f = [], h = c;
  h == null && (h = [1, 1]), y.assert(w.eitherStridesOrDilationsAreOne(p, h), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${h}'`);
  let g = w.computeConv2DInfo(n.shape, s.shape, p, h, u, l, true), x = A().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, b = m ? Ci(m, x) : null, C = [n, s], S = a != null, k = i != null, _ = m === "leakyrelu";
  if (S && C.push(a), k && C.push(i), _) {
    let P = e.makeTensorInfo([], "float32", y.createScalarValue(d, "float32"));
    C.push(P), f.push(P);
  }
  let E;
  x ? E = new jc(g, S, b, k, _) : E = new qc(g, S, b, k, _);
  let R = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], D = e.runWebGLProgram(E, C, "float32", R);
  return f.forEach((P) => e.disposeIntermediateTensorInfo(P)), D;
}
var bF = { kernelName: ko, backendName: "webgl", kernelFunc: WJ };
var ag = class {
  constructor(t8, e, o, n) {
    this.sliceDim = t8, this.strides = e, this.paramsShape = n, this.variableNames = ["x", "indices"], this.outputShape = o;
    let s = Re(o.length), a = `
    int index;`;
    for (let i = 0; i < this.sliceDim; i++)
      a += `
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`;
    this.userCode = `
         void main() {
          ${s} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${a}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
};
function UJ(r) {
  let { inputs: t8, backend: e } = r, { params: o, indices: n } = t8, s = n.shape, a = s[s.length - 1], i = y.sizeFromShape(o.shape), [p, u, c, l] = w.prepareAndValidate(o, n), m = te({ inputs: { x: n }, backend: e, attrs: { shape: [u, a] } }), d = te({ inputs: { x: o }, backend: e, attrs: { shape: [y.sizeFromShape(o.shape) / c, c] } });
  if (e.shouldExecuteOnCPU([o, n]) || o.dtype === "string") {
    let x = e.readSync(n.dataId), b = e.bufferSync(o), C = VR(x, b, o.dtype, u, a, c, l, o.shape, i);
    return e.makeTensorInfo(p, o.dtype, C.values);
  }
  let f = new ag(a, l, [u, c], o.shape), h = e.runWebGLProgram(f, [d, m], d.dtype), g = te({ inputs: { x: h }, backend: e, attrs: { shape: p } });
  return e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(h), g;
}
var CF = { kernelName: kn, backendName: "webgl", kernelFunc: UJ };
var ig = class {
  constructor(t8, e) {
    this.variableNames = ["A", "indices"], this.outputShape = e, this.rank = e.length;
    let o = Re(this.rank), n = GJ(t8, 2);
    this.userCode = `
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t8[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `;
  }
};
function GJ(r, t8) {
  let e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [];
  for (let n = 0; n < r.length; n++)
    n === 2 ? o.push("index") : o.push(`${e[n]}`);
  return o.join();
}
function kv(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, indices: s } = t8, { axis: a, batchDims: i } = o, p = y.parseAxisParam(a, n.shape)[0];
  if (A().get("DEBUG")) {
    let b = e.readSync(s.dataId), C = n.shape[p];
    for (let S = 0; S < b.length; ++S) {
      let k = b[S];
      y.assert(k <= C - 1 && k >= 0, () => `GatherV2: the index value ${k} is not in [0, ${C - 1}]`);
    }
  }
  let u = w.segment_util.collectGatherOpShapeInfo(n, s, p, i), c = y.sizeFromShape(s.shape), l = [], m = te({ inputs: { x: n }, backend: e, attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] } }), d = te({ inputs: { x: s }, backend: e, attrs: { shape: [u.batchSize, c / u.batchSize] } });
  l.push(m), l.push(d);
  let f = [u.batchSize, u.outerSize, c / u.batchSize, u.sliceSize];
  if (e.shouldExecuteOnCPU([n, s]) || n.dtype === "string") {
    let b = e.bufferSync(d), C = e.bufferSync(m), S = WR(C, b, f);
    return l.forEach((k) => e.disposeIntermediateTensorInfo(k)), e.makeTensorInfo(u.outputShape, S.dtype, S.values);
  }
  let h = new ig(m.shape, f), g = e.runWebGLProgram(h, [m, d], m.dtype);
  l.push(g);
  let x = te({ inputs: { x: g }, backend: e, attrs: { shape: u.outputShape } });
  return l.forEach((b) => e.disposeIntermediateTensorInfo(b)), x;
}
var wF = { kernelName: aa, backendName: "webgl", kernelFunc: kv };
var HJ = "return float(a > b);";
var KJ = `
  return vec4(greaterThan(a, b));
`;
var qJ = nt({ opSnippet: HJ, packedOpSnippet: KJ, cpuKernelImpl: UR, dtype: "bool" });
var SF = { kernelName: Nn, backendName: "webgl", kernelFunc: qJ };
var jJ = "return float(a >= b);";
var XJ = `
  return vec4(greaterThanEqual(a, b));
`;
var YJ = nt({ opSnippet: jJ, packedOpSnippet: XJ, dtype: "bool", cpuKernelImpl: GR });
var IF = { kernelName: Tn, backendName: "webgl", kernelFunc: YJ };
function QJ(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8;
  return tg(o, true, e);
}
var vF = { kernelName: Ui, backendName: "webgl", kernelFunc: QJ };
var ZJ = "return float(!isnan(x) && !isinf(x));";
var JJ = xe({ opSnippet: ZJ, dtype: "bool" });
var kF = { kernelName: _n, backendName: "webgl", kernelFunc: JJ };
var eee = "return float(isinf(x));";
var tee = xe({ opSnippet: eee, dtype: "bool" });
var NF = { kernelName: $n, backendName: "webgl", kernelFunc: tee };
var ree = "return float(isnan(x));";
var oee = xe({ opSnippet: ree, dtype: "bool" });
var TF = { kernelName: En, backendName: "webgl", kernelFunc: oee };
var nee = "return float(a < b);";
var see = `
  return vec4(lessThan(a, b));
`;
var aee = nt({ opSnippet: nee, packedOpSnippet: see, cpuKernelImpl: HR, dtype: "bool" });
var _F = { kernelName: Dn, backendName: "webgl", kernelFunc: aee };
var iee = "return float(a <= b);";
var uee = `
  return vec4(lessThanEqual(a, b));
`;
var pee = nt({ opSnippet: iee, packedOpSnippet: uee, cpuKernelImpl: KR, dtype: "bool" });
var $F = { kernelName: An, backendName: "webgl", kernelFunc: pee };
function cee(r) {
  let { backend: t8, attrs: e } = r, { start: o, stop: n, num: s } = e, a = qR(o, n, s);
  return t8.makeTensorInfo([a.length], "float32", a);
}
var EF = { kernelName: Fn, backendName: "webgl", kernelFunc: cee };
var lee = Po + `
  return x < 0.0 ? 0./0. : log(x);
`;
var mee = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`;
var dee = xe({ opSnippet: lee, packedOpSnippet: mee, cpuKernelImpl: jR });
var RF = { kernelName: Pn, backendName: "webgl", kernelFunc: dee };
var fee = Po + `
  return log(1.0 + x);
`;
var hee = xe({ opSnippet: fee });
var DF = { kernelName: On, backendName: "webgl", kernelFunc: hee };
var gee = "return float(a >= 1.0 && b >= 1.0);";
var xee = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
var yee = nt({ opSnippet: gee, packedOpSnippet: xee, dtype: "bool" });
var AF = { kernelName: Mn, backendName: "webgl", kernelFunc: yee };
var bee = "return float(!(x >= 1.0));";
var Cee = xe({ opSnippet: bee });
var FF = { kernelName: Ln, backendName: "webgl", kernelFunc: Cee };
var wee = "return float(a >= 1.0 || b >= 1.0);";
var See = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
var Iee = nt({ opSnippet: wee, packedOpSnippet: See, dtype: "bool" });
var PF = { kernelName: Bn, backendName: "webgl", kernelFunc: Iee };
var ug = class {
  constructor(t8, e, o, n, s) {
    this.variableNames = ["x"], this.outputShape = [];
    let a = e, i = t8[3] - 1;
    this.outputShape = t8;
    let p, u = `float(${o}) + float(${n}) * sum`;
    s === 0.5 ? p = `inversesqrt(${u})` : s === 1 ? p = `1.0/(${u})` : p = `exp(log(${u}) * float(-${s}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${a}; j <= ${a}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${p};
        setOutput(val);
      }
    `;
  }
};
var pg = class {
  constructor(t8, e, o, n, s) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
    let a = e, i = t8[3] - 1;
    this.outputShape = t8;
    let p, u = `float(${o}) + float(${n}) * sum`;
    s === 0.5 ? p = `inversesqrt(${u})` : s === 1 ? p = `1.0/(${u})` : p = `exp(log(${u}) * float(-${s}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${a};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${a}; j <= ${a}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${p};
        setOutput(result);
      }
    `;
  }
};
var vee = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { depthRadius: s, bias: a, alpha: i, beta: p } = o, u = A().getBool("WEBGL_PACK_NORMALIZATION") ? new pg(n.shape, s, a, i, p) : new ug(n.shape, s, a, i, p);
  return e.runWebGLProgram(u, [n], n.dtype);
};
var OF = { kernelName: zn, backendName: "webgl", kernelFunc: vee };
var cg = class {
  constructor(t8, e, o, n, s) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = t8, this.depth = t8[3], this.depthRadius = e, this.bias = o, this.alpha = n, this.beta = s, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
};
var kee = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, y: s, dy: a } = t8, { depthRadius: i, bias: p, alpha: u, beta: c } = o, l = new cg(n.shape, i, p, u, c);
  return e.runWebGLProgram(l, [n, s, a], n.dtype);
};
var MF = { kernelName: Qa, backendName: "webgl", kernelFunc: kee };
function LF(r, t8, e, o) {
  let n = y.sizeFromShape(t8), a = y.sizeFromShape(r.shape) / n, i = te({ inputs: { x: r }, attrs: { shape: [a, n] }, backend: o }), p = Yr(i, r.dtype, "max", o), u = te({ inputs: { x: p }, attrs: { shape: e }, backend: o });
  return o.disposeIntermediateTensorInfo(i), o.disposeIntermediateTensorInfo(p), u;
}
function Nv(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { reductionIndices: s, keepDims: a } = o, i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = p, c = w.getAxesPermutation(u, i), l = c != null, m = e.shouldExecuteOnCPU([n]), d = n;
  if (l) {
    if (m) {
      let C = e.texData.get(d.dataId).values, S = new Array(i);
      for (let E = 0; E < S.length; E++)
        S[E] = n.shape[c[E]];
      let k = Np(C, n.shape, n.dtype, c, S);
      d = e.makeTensorInfo(S, n.dtype);
      let _ = e.texData.get(d.dataId);
      _.values = k;
    } else
      d = Su(n, c, e);
    u = w.getInnerMostAxes(u.length, i);
  }
  w.assertAxesAreInnerMostDims("max", u, i);
  let [f, h] = w.computeOutAndReduceShapes(d.shape, u), g = f;
  a && (g = w.expandShapeToKeepDim(f, p));
  let x;
  if (m) {
    let C = e.texData.get(d.dataId).values, S = XR(C, y.sizeFromShape(h), g, n.dtype);
    x = e.makeTensorInfo(g, n.dtype);
    let k = e.texData.get(x.dataId);
    k.values = S;
  } else
    x = LF(d, h, g, e);
  return l && e.disposeIntermediateTensorInfo(d), x;
}
var BF = { kernelName: Vn, backendName: "webgl", kernelFunc: Nv };
var Nee = Wc + `
  return max(a, b);
`;
var Tee = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xr + `
  return result;
`;
var _ee = nt({ opSnippet: Nee, packedOpSnippet: Tee, cpuKernelImpl: YR });
var zF = { kernelName: Wn, backendName: "webgl", kernelFunc: _ee };
function $ee(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8;
  Vs(n, "maxPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1;
  y.assert(w.eitherStridesOrDilationsAreOne(a, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = w.computePool2DInfo(n.shape, s, a, u, i, p);
  if (c.filterWidth === 1 && c.filterHeight === 1 && y.arraysEqual(c.inShape, c.outShape))
    return At({ inputs: { x: n }, backend: e });
  let l = new Us(c, "max", false);
  return e.runWebGLProgram(l, [n], n.dtype);
}
var VF = { kernelName: Un, backendName: "webgl", kernelFunc: $ee };
function Eee(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dataFormat: p, dimRoundingMode: u } = o, c = [1, 1, 1], l = w.computePool3DInfo(n.shape, s, a, c, i, u, p), m = new Iu(l, "max", false);
  return e.runWebGLProgram(m, [n], n.dtype);
}
var WF = { kernelName: ia, backendName: "webgl", kernelFunc: Eee };
var lg = class {
  constructor(t8) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t8.inShape;
    let e = t8.strideHeight, o = t8.strideWidth, n = t8.dilationHeight, s = t8.effectiveFilterHeight, a = t8.effectiveFilterWidth, i = s - 1 - t8.padInfo.top, p = a - 1 - t8.padInfo.left, u = s * a - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t8.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${a}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t8.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${a} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var mg = class {
  constructor(t8) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = t8.inShape;
    let e = t8.strideDepth, o = t8.strideHeight, n = t8.strideWidth, s = t8.dilationDepth, a = t8.dilationHeight, i = t8.dilationWidth, p = t8.effectiveFilterDepth, u = t8.effectiveFilterHeight, c = t8.effectiveFilterWidth, l = p - 1 - t8.padInfo.front, m = u - 1 - t8.padInfo.top, d = c - 1 - t8.padInfo.left, f = p * u * c - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${m}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t8.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${a}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${t8.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${t8.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function Ree(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, a = s, { filterSize: i, strides: p, pad: u, dimRoundingMode: c } = o, l = [1, 1, 1], m = w.computePool3DInfo(a.shape, i, p, l, u, c), d = new Iu(m, "max", true), f = e.runWebGLProgram(d, [a], a.dtype), h = new mg(m), g = e.runWebGLProgram(h, [n, f], a.dtype);
  return e.disposeIntermediateTensorInfo(f), g;
}
var UF = { kernelName: Ki, backendName: "webgl", kernelFunc: Ree };
function Dee(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s, output: a } = t8, i = s;
  Vs([s, a], "maxPoolGrad");
  let { filterSize: p, strides: u, pad: c, dimRoundingMode: l } = o, m = w.computePool2DInfo(i.shape, p, u, 1, c, l), d = true, f = new Us(m, "max", d), h = e.runWebGLProgram(f, [i], i.dtype), g = new lg(m), x = e.runWebGLProgram(g, [n, h], i.dtype);
  return e.disposeIntermediateTensorInfo(h), x;
}
var GF = { kernelName: Hi, backendName: "webgl", kernelFunc: Dee };
function HF(r, t8, e, o) {
  let n = new Us(e, "max", false), s = o.runWebGLProgram(n, [r], "float32");
  n = new Us(e, "max", true, true, t8);
  let a = o.runWebGLProgram(n, [r], "float32");
  return [s, a];
}
var KF = { kernelName: ua, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { x: o } = r, { filterSize: n, strides: s, pad: a, includeBatchInIndex: i } = t8, p = e;
  y.assert(o.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);
  let u = [1, 1];
  y.assert(w.eitherStridesOrDilationsAreOne(s, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);
  let c = w.computePool2DInfo(o.shape, n, s, u, a), [l, m] = HF(o, i, c, p);
  return [l, m];
} };
function qF(r, t8, e, o) {
  let n = y.sizeFromShape(t8), a = y.sizeFromShape(r.shape) / n, i = te({ inputs: { x: r }, attrs: { shape: [a, n] }, backend: o }), p = Yr(i, "float32", "mean", o), u = te({ inputs: { x: p }, attrs: { shape: e }, backend: o });
  return o.disposeIntermediateTensorInfo(i), o.disposeIntermediateTensorInfo(p), u;
}
var jF = { kernelName: Gn, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { x: o } = r, { keepDims: n, axis: s } = t8, a = e, i = o.shape.length, p = y.parseAxisParam(s, o.shape), u = p, c = w.getAxesPermutation(u, i), l = c != null, m = a.shouldExecuteOnCPU([o]), d = [], f = o;
  if (l) {
    if (m) {
      let S = a.texData.get(f.dataId).values, k = new Array(i);
      for (let R = 0; R < k.length; R++)
        k[R] = o.shape[c[R]];
      let _ = Np(S, o.shape, o.dtype, c, k);
      f = a.makeTensorInfo(k, o.dtype);
      let E = a.texData.get(f.dataId);
      E.values = _;
    } else
      f = Su(o, c, a);
    d.push(f), u = w.getInnerMostAxes(u.length, i);
  }
  w.assertAxesAreInnerMostDims("sum", u, i);
  let [h, g] = w.computeOutAndReduceShapes(f.shape, u), x = h;
  n && (x = w.expandShapeToKeepDim(h, p));
  let b = qF(f, g, x, a);
  for (let C of d)
    a.disposeIntermediateTensorInfo(C);
  return b;
} };
function Aee(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o, i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = p, c = w.getAxesPermutation(u, i), l = n;
  c != null && (l = Ct({ inputs: { x: n }, backend: e, attrs: { perm: c } }), u = w.getInnerMostAxes(u.length, n.shape.length)), w.assertAxesAreInnerMostDims("min", u, i);
  let [m, d] = w.computeOutAndReduceShapes(l.shape, u), f = y.sizeFromShape(d), h = te({ inputs: { x: l }, backend: e, attrs: { shape: [-1, f] } }), g = Yr(h, h.dtype, "min", e), x;
  if (a) {
    let b = w.expandShapeToKeepDim(m, p);
    x = te({ inputs: { x: g }, backend: e, attrs: { shape: b } });
  } else
    x = te({ inputs: { x: g }, backend: e, attrs: { shape: m } });
  return e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(g), c != null && e.disposeIntermediateTensorInfo(l), x;
}
var XF = { kernelName: Hn, backendName: "webgl", kernelFunc: Aee };
var Fee = Wc + `
  return min(a, b);
`;
var Pee = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Xr + `
  return result;
`;
var Oee = nt({ opSnippet: Fee, packedOpSnippet: Pee, cpuKernelImpl: QR });
var YF = { kernelName: Kn, backendName: "webgl", kernelFunc: Oee };
var dg = class {
  constructor(t8, e, o) {
    this.variableNames = ["x"], this.outputShape = e.map((c, l) => c[0] + t8[l] + c[1]);
    let n = t8.length, s = Re(n), a = e.map((c) => c[0]).join(","), i = e.map((c, l) => c[0] + t8[l]).join(","), p = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, n), u = o === "reflect" ? 0 : 1;
    if (n === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${p}));
      }
    `;
  }
};
var fg = class {
  constructor(t8, e, o) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e.map((f, h) => f[0] + t8[h] + f[1]);
    let n = t8.length, s = Re(n), a = e.map((f) => f[0]).join(","), i = e.map((f, h) => f[0] + t8[h]).join(","), p = Dt("rc", n), u = Dt("source", n), c = `${p[n - 1]} < ${this.outputShape[n - 1]}`, l = n === 1 ? "source" : `vec2(${u.slice(-2).join()})`, m = o === "reflect" ? 0 : 1, d = "";
    if (n === 1) {
      let f = `
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;
      d = `
        ${s} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${u.join()}), ${l});
        ${p[n - 1]} += 1;
        if(${c}) {
          ${f}
          result[1] = getChannel(getX(${u.join()}), ${l});
        }
      `;
    } else {
      let f = `
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;
      d = `
        ${s} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${u.join()}), ${l});
        ${p[n - 1]} += 1;
        if(${c}) {
          ${f}
          result[1] = getChannel(getX(${u.join()}), ${l});
        }
        rc = outputLoc;
        ${p[n - 2]} += 1;
        if(${p[n - 2]} < ${this.outputShape[n - 2]}) {
          ${f}
          result[2] = getChannel(getX(${u.join()}), ${l});
          ${p[n - 1]} += 1;
          if(${c}) {
            ${f}
            result[3] = getChannel(getX(${u.join()}), ${l});
          }
        }
      `;
    }
    this.userCode = `
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `;
  }
};
var Mee = ({ inputs: r, backend: t8, attrs: e }) => {
  let { x: o } = r, { paddings: n, mode: s } = e, a = A().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new fg(o.shape, n, s) : new dg(o.shape, n, s);
  return t8.runWebGLProgram(a, [o], o.dtype);
};
var QF = { kernelName: qn, backendName: "webgl", kernelFunc: Mee };
var Lee = `if (b == 0.0) return NAN;
  return mod(a, b);`;
var Bee = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + Xr + `
  return result;
`;
var zee = nt({ opSnippet: Lee, packedOpSnippet: Bee });
var ZF = { kernelName: jn, backendName: "webgl", kernelFunc: zee };
var hg = class {
  constructor(t8, e, o) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [t8, o], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e - 1}));
      }
    `;
  }
};
var Vee = `
if (a == b) {
  return 1.0;
};
return a / b;`;
var Wee = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
var Tv = nt({ opSnippet: Vee, packedOpSnippet: Wee, checkOutOfBounds: true });
var JF = { kernelName: hn, backendName: "webgl", kernelFunc: Tv };
var e3 = "return a - b;";
var _v = nt({ opSnippet: e3, packedOpSnippet: e3, supportsComplex: true, cpuKernelImpl: yD });
var t3 = { kernelName: _s, backendName: "webgl", kernelFunc: _v };
function $v(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { logits: n } = t8, { dim: s } = o, a = y.parseAxisParam([s], n.shape), i = Nv({ inputs: { x: n }, backend: e, attrs: { reductionIndices: a, keepDims: false } }), p = w.expandShapeToKeepDim(i.shape, a), u = te({ inputs: { x: i }, backend: e, attrs: { shape: p } }), c = _v({ inputs: { a: n, b: u }, backend: e }), l = Iv({ inputs: { x: c }, backend: e }), m = Tp({ inputs: { x: l }, backend: e, attrs: { axis: a, keepDims: false } }), d = te({ inputs: { x: m }, backend: e, attrs: { shape: p } }), f = Tv({ inputs: { a: l, b: d }, backend: e });
  return e.disposeIntermediateTensorInfo(i), e.disposeIntermediateTensorInfo(u), e.disposeIntermediateTensorInfo(c), e.disposeIntermediateTensorInfo(l), e.disposeIntermediateTensorInfo(m), e.disposeIntermediateTensorInfo(d), f;
}
var r3 = { kernelName: vs, backendName: "webgl", kernelFunc: $v };
function Uee(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { logits: n } = t8, { numSamples: s, seed: a, normalized: i } = o, p = i ? n : $v({ inputs: { logits: n }, backend: e, attrs: { dim: n.shape.length - 1 } }), u = p.shape[0], c = p.shape[1], l = new hg(u, c, s), m = [[a]], d = e.runWebGLProgram(l, [p], "int32", m);
  return i || e.disposeIntermediateTensorInfo(p), d;
}
var o3 = { kernelName: Xn, backendName: "webgl", kernelFunc: Uee };
var Gee = Ut + `
  return -x;
`;
var Hee = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function Kee(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (e.shouldExecuteOnCPU([o])) {
    let s = e.texData.get(o.dataId), [a, i] = JR(s.values, o.shape, o.dtype);
    return e.makeTensorInfo(i, o.dtype, a);
  }
  let n;
  return A().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? n = new Fr(o.shape, Hee) : n = new or(o.shape, Gee), e.runWebGLProgram(n, [o], o.dtype);
}
var n3 = { kernelName: pa, backendName: "webgl", kernelFunc: Kee };
var qee = Wt.nonMaxSuppressionV3Impl;
function jee(r) {
  w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t8, backend: e, attrs: o } = r, { boxes: n, scores: s } = t8, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p } = o, u = e.readSync(n.dataId), c = e.readSync(s.dataId), { selectedIndices: l } = qee(u, c, a, i, p);
  return e.makeTensorInfo([l.length], "int32", new Int32Array(l));
}
var s3 = { kernelName: Zn, backendName: "webgl", kernelFunc: jee };
var Xee = Wt.nonMaxSuppressionV4Impl;
function Yee(r) {
  w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t8, backend: e, attrs: o } = r, { boxes: n, scores: s } = t8, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, padToMaxOutputSize: u } = o, c = e.readSync(n.dataId), l = e.readSync(s.dataId), { selectedIndices: m, validOutputs: d } = Xee(c, l, a, i, p, u);
  return [e.makeTensorInfo([m.length], "int32", new Int32Array(m)), e.makeTensorInfo([], "int32", new Int32Array([d]))];
}
var a3 = { kernelName: Za, backendName: "webgl", kernelFunc: Yee };
var Qee = Wt.nonMaxSuppressionV5Impl;
function Zee(r) {
  w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t8, backend: e, attrs: o } = r, { boxes: n, scores: s } = t8, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, softNmsSigma: u } = o, c = e.readSync(n.dataId), l = e.readSync(s.dataId), m = a, d = i, f = p, h = u, { selectedIndices: g, selectedScores: x } = Qee(c, l, m, d, f, h);
  return [e.makeTensorInfo([g.length], "int32", new Int32Array(g)), e.makeTensorInfo([x.length], "float32", new Float32Array(x))];
}
var i3 = { kernelName: Jn, backendName: "webgl", kernelFunc: Zee };
var gg = class {
  constructor(t8, e, o, n) {
    this.variableNames = ["indices"], this.outputShape = [t8, e], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `;
  }
};
var Jee = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { indices: n } = t8, { dtype: s, depth: a, onValue: i, offValue: p } = o, u = y.sizeFromShape(n.shape), c = new gg(u, a, i, p), l = te({ inputs: { x: n }, backend: e, attrs: { shape: [u] } }), m = e.runWebGLProgram(c, [l], s);
  e.disposeIntermediateTensorInfo(l);
  let d = [...n.shape, a], f = te({ inputs: { x: m }, backend: e, attrs: { shape: d } });
  return e.disposeIntermediateTensorInfo(m), f;
};
var u3 = { kernelName: es, backendName: "webgl", kernelFunc: Jee };
function sm(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (o.dtype === "complex64") {
    let n = wi({ inputs: { input: o }, backend: e }), s = sm({ inputs: { x: n }, backend: e }), a = $p({ inputs: { input: o }, backend: e }), i = sm({ inputs: { x: a }, backend: e }), p = Or({ inputs: { real: s, imag: i }, backend: e });
    return e.disposeIntermediateTensorInfo(n), e.disposeIntermediateTensorInfo(s), e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(i), p;
  } else
    return Si({ attrs: { shape: o.shape, dtype: o.dtype, value: o.dtype === "string" ? "" : 0 }, backend: e });
}
var p3 = { kernelName: Sa, backendName: "webgl", kernelFunc: sm };
function c3(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (o.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (o.dtype === "complex64") {
    let n = wi({ inputs: { input: o }, backend: e }), s = c3({ inputs: { x: n }, backend: e }), a = $p({ inputs: { input: o }, backend: e }), i = sm({ inputs: { x: a }, backend: e }), p = Or({ inputs: { real: s, imag: i }, backend: e });
    return e.disposeIntermediateTensorInfo(n), e.disposeIntermediateTensorInfo(s), e.disposeIntermediateTensorInfo(a), e.disposeIntermediateTensorInfo(i), p;
  } else
    return Si({ attrs: { shape: o.shape, dtype: o.dtype, value: 1 }, backend: e });
}
var l3 = { kernelName: ca, backendName: "webgl", kernelFunc: c3 };
function ete(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { axis: n } = o;
  if (t8.length === 1)
    return eg({ inputs: { input: t8[0] }, backend: e, attrs: { dim: n } });
  let s = t8[0].shape, a = t8[0].dtype;
  t8.forEach((c) => {
    y.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), y.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], p = t8.map((c) => {
    let l = eg({ inputs: { input: c }, backend: e, attrs: { dim: n } });
    return i.push(l), l;
  }), u = Sv({ inputs: p, backend: e, attrs: { axis: n } });
  return i.forEach((c) => e.disposeIntermediateTensorInfo(c)), u;
}
var m3 = { kernelName: la, backendName: "webgl", kernelFunc: ete };
var xg = class {
  constructor(t8, e, o) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map((u, c) => u[0] + t8[c] + u[1]);
    let n = t8.length, s = Re(n), a = e.map((u) => u[0]).join(","), i = e.map((u, c) => u[0] + t8[c]).join(","), p = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, n);
    if (n === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${p}));
        }
      }
    `;
  }
};
var yg = class {
  constructor(t8, e, o) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = e.map((h, g) => h[0] + t8[g] + h[1]);
    let n = t8.length, s = Re(n), a = e.map((h) => h[0]).join(","), i = e.map((h, g) => h[0] + t8[g]).join(","), p = Dt("rc", n), u = Dt("source", n), c = `${p[n - 1]} < ${this.outputShape[n - 1]}`, l = n === 1 ? "source" : `vec2(${u.slice(-2).join()})`, m = [`${s} rc = outputLoc;`, `${p[n - 1]} += 1;
       if(${c}) {
      `, n === 1 ? "" : `}
       rc = outputLoc;
       ${p[n - 2]} += 1;
       if(${p[n - 2]} < ${this.outputShape[n - 2]}) {`, n === 1 ? "" : `  ${p[n - 1]} += 1;
         if(${c}) {`], d = n === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", f = "";
    for (let h = 0, g = n === 1 ? 2 : 4; h < g; h++)
      f += `
        ${m[h]}
        if (${d}) {
          result[${h}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${h}] = getChannel(getX(${u.join()}), ${l});
        }
      `;
    f += n === 1 ? "} " : "}}", this.userCode = `
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
};
var Ev = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { paddings: s, constantValue: a } = o;
  if (y.sizeFromShape(n.shape) === 0) {
    let u = s.map((c, l) => c[0] + n.shape[l] + c[1]);
    return Si({ backend: e, attrs: { shape: u, value: a, dtype: n.dtype } });
  }
  let i = A().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new yg(n.shape, s, a) : new xg(n.shape, s, a), p = [[a]];
  return e.runWebGLProgram(i, [n], n.dtype, p);
};
var d3 = { kernelName: ts, backendName: "webgl", kernelFunc: Ev };
var tte = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
var rte = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + Xr + `
  return result;
`;
var ote = nt({ opSnippet: tte, packedOpSnippet: rte });
var f3 = { kernelName: rs, backendName: "webgl", kernelFunc: ote };
function nte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o, i = n.shape.length, p = [], u = y.parseAxisParam(s, n.shape), c = u, l = w.getAxesPermutation(c, i), m = n;
  l != null && (m = Ct({ inputs: { x: n }, backend: e, attrs: { perm: l } }), c = w.getInnerMostAxes(c.length, i), p.push(m)), w.assertAxesAreInnerMostDims("prod", c, i);
  let d;
  if (e.shouldExecuteOnCPU([m])) {
    let f = e.texData.get(m.dataId).values, { outVals: h, outShape: g, outDtype: x } = tD(m.shape, m.dtype, f, c);
    d = e.makeTensorInfo(g, x, h);
  } else {
    let [f, h] = w.computeOutAndReduceShapes(m.shape, c), g = y.sizeFromShape(h), x = te({ inputs: { x: m }, backend: e, attrs: { shape: [-1, g] } }), b = ni(n.dtype), C = Yr(x, b, "prod", e);
    d = te({ inputs: { x: C }, backend: e, attrs: { shape: f } }), p.push(x), p.push(C);
  }
  if (a) {
    p.push(d);
    let f = w.expandShapeToKeepDim(d.shape, u);
    d = te({ inputs: { x: d }, backend: e, attrs: { shape: f } });
  }
  return p.forEach((f) => e.disposeIntermediateTensorInfo(f)), d;
}
var h3 = { kernelName: ns, backendName: "webgl", kernelFunc: nte };
function ste(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { paramsNestedSplits: n, paramsDenseValues: s, indices: a } = t8, { outputRaggedRank: i } = o, p = n.map((x) => e.readSync(x.dataId)), u = n.map((x) => x.shape), c = e.readSync(s.dataId), l = e.readSync(a.dataId), [m, d, f] = rD(p, u, c, s.shape, s.dtype, l, a.shape, i), h = m.map((x) => e.makeTensorInfo([x.length], "int32", x)), g = e.makeTensorInfo(f, s.dtype, d);
  return h.concat([g]);
}
var g3 = { kernelName: Qp, backendName: "webgl", kernelFunc: ste };
function ate(r) {
  let { inputs: t8, backend: e } = r, { starts: o, limits: n, deltas: s } = t8, a = e.readSync(o.dataId), i = e.readSync(n.dataId), p = e.readSync(s.dataId), [u, c] = oD(a, o.shape, o.dtype, i, n.shape, p, s.shape), l = e.makeTensorInfo([u.length], "int32", u), m = e.makeTensorInfo([c.length], o.dtype, c);
  return [l, m];
}
var x3 = { kernelName: Zp, backendName: "webgl", kernelFunc: ate };
function ite(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { shape: n, values: s, defaultValue: a, rowPartitionTensors: i } = t8, { rowPartitionTypes: p } = o, u = e.readSync(n.dataId), c = e.readSync(s.dataId), l = e.readSync(a.dataId), m = i.map((g) => e.readSync(g.dataId)), d = i.map((g) => g.shape), [f, h] = nD(u, n.shape, c, s.shape, s.dtype, l, a.shape, m, d, p);
  return e.makeTensorInfo(f, s.dtype, h);
}
var y3 = { kernelName: Jp, backendName: "webgl", kernelFunc: ite };
var Rv = (r) => {
  let { backend: t8, attrs: e } = r, { start: o, stop: n, step: s, dtype: a } = e, i = sD(o, n, s, a);
  return t8.makeTensorInfo([i.length], a, i);
};
var b3 = { kernelName: ma, backendName: "webgl", kernelFunc: Rv };
var ute = "return 1.0 / x;";
var pte = xe({ opSnippet: ute });
var C3 = { kernelName: ss, backendName: "webgl", kernelFunc: pte };
var cte = Ut + `
  return (x < 0.0) ? 0.0 : x;
`;
var lte = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var mte = xe({ opSnippet: cte, packedOpSnippet: lte });
var w3 = { kernelName: as, backendName: "webgl", kernelFunc: mte };
var dte = Ut + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var fte = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var hte = xe({ opSnippet: dte, packedOpSnippet: fte });
var S3 = { kernelName: ps, backendName: "webgl", kernelFunc: hte };
var bg = class {
  constructor(t8, e, o, n, s) {
    this.variableNames = ["A"], this.outputShape = [];
    let [a, i, p, u] = t8;
    this.outputShape = [a, e, o, u];
    let c = [n && e > 1 ? i - 1 : i, n && o > 1 ? p - 1 : p], l = [n && e > 1 ? e - 1 : e, n && o > 1 ? o - 1 : o], m;
    s ? m = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : m = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0] / l[0]},
          ${c[1] / l[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${p}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
};
var Cg = class {
  constructor(t8, e, o, n, s) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [a, i, p, u] = t8;
    this.outputShape = [a, e, o, u];
    let c = [n && e > 1 ? i - 1 : i, n && o > 1 ? p - 1 : p], l = [n && e > 1 ? e - 1 : e, n && o > 1 ? o - 1 : o], m;
    s ? m = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : m = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0] / l[0]},
          ${c[1] / l[1]},
          ${c[1] / l[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${p}.0,
                                     ${p}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u - 1};
        bool hasNextRow = coords.z < ${o - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
};
function gte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n } = t8, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, c = A().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Cg(n.shape, p, u, s, a) : new bg(n.shape, p, u, s, a);
  return e.runWebGLProgram(c, [n], "float32");
}
var I3 = { kernelName: us, backendName: "webgl", kernelFunc: gte };
var wg = class {
  constructor(t8, e, o) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    let [, n, s] = e, [, a, i] = t8, p = [o && a > 1 ? n - 1 : n, o && i > 1 ? s - 1 : s], u = [o && a > 1 ? a - 1 : a, o && i > 1 ? i - 1 : i], c = p[0] / u[0], l = p[1] / u[1], m = 1 / c, d = 1 / l, f = Math.ceil(m) * 2 + 2, h = Math.ceil(d) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${l});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${d});

        const int winHeight = int(${f});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function xte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n, dy: s } = t8, { alignCorners: a } = o, i = new wg(s.shape, n.shape, a);
  return e.runWebGLProgram(i, [s], s.dtype);
}
var v3 = { kernelName: ei, backendName: "webgl", kernelFunc: xte };
var Sg = class {
  constructor(t8, e, o, n, s) {
    this.variableNames = ["A"], this.outputShape = [];
    let [a, i, p, u] = t8;
    this.outputShape = [a, e, o, u];
    let c = [n && e > 1 ? i - 1 : i, n && o > 1 ? p - 1 : p], l = [n && e > 1 ? e - 1 : e, n && o > 1 ? o - 1 : o], m = n ? "0.5" : "0.0", d;
    s ? d = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0] / l[0]},
          ${c[1] / l[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${p}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
};
var Ig = class {
  constructor(t8, e, o, n, s) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [a, i, p, u] = t8;
    this.outputShape = [a, e, o, u];
    let c = [n && e > 1 ? i - 1 : i, n && o > 1 ? p - 1 : p], l = [n && e > 1 ? e - 1 : e, n && o > 1 ? o - 1 : o], m = n ? "0.5" : "0.0", d;
    s ? d = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0] / l[0]},
          ${c[1] / l[1]},
          ${c[1] / l[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${p}.0,
                                     ${p}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u - 1};
        bool hasNextRow = coords.z < ${o - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
};
function yte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n } = t8, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, c = A().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Ig(n.shape, p, u, s, a) : new Sg(n.shape, p, u, s, a);
  return e.runWebGLProgram(c, [n], n.dtype);
}
var k3 = { kernelName: is, backendName: "webgl", kernelFunc: yte };
var vg = class {
  constructor(t8, e, o) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = e;
    let [, n, s] = e, [, a, i] = t8, p = [o && a > 1 ? n - 1 : n, o && i > 1 ? s - 1 : s], u = [o && a > 1 ? a - 1 : a, o && i > 1 ? i - 1 : i], c = p[0] / u[0], l = p[1] / u[1], m = 1 / c, d = 1 / l, f = Math.ceil(m) * 2 + 2, h = Math.ceil(d) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${l});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${d});

        const int winHeight = int(${f});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${p[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${p[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function bte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n, dy: s } = t8, { alignCorners: a } = o, i = new vg(s.shape, n.shape, a);
  return e.runWebGLProgram(i, [s], s.dtype);
}
var N3 = { kernelName: Ja, backendName: "webgl", kernelFunc: bte };
var kg = class {
  constructor(t8, e) {
    this.variableNames = ["x"];
    let o = t8.length;
    if (o > 4)
      throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);
    if (this.outputShape = t8, o === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t8[0]} - coord - 1));
        }
      `;
      return;
    }
    let n = (i) => e.indexOf(i) !== -1 && t8[i] !== 1 ? `${t8[i]} - coords[${i}] - 1` : `coords[${i}]`, s = t8.map((i, p) => n(p)).join(","), a = Re(o);
    this.userCode = `
      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `;
  }
};
var Ng = class {
  constructor(t8, e) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true;
    let o = t8.length;
    if (o > 4)
      throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);
    this.outputShape = t8;
    let n = Dt("rc", o), s = `${n[o - 1]} + 1 < ${this.outputShape[o - 1]}`, a = `${n[o - 2]} + 1 < ${this.outputShape[o - 2]}`, i = Re(o);
    o === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t8[0]} - rc - 1),
            ${t8[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${t8[0]} - (rc  + 1) - 1),
                ${t8[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${p(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${a}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${l(n.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function p(f) {
      return m(f);
    }
    function u(f) {
      return f[o - 1] = "(" + f[o - 1] + " + 1)", m(f);
    }
    function c(f) {
      return f[o - 2] = "(" + f[o - 2] + " + 1)", m(f);
    }
    function l(f) {
      return f[o - 1] = "(" + f[o - 1] + " + 1)", f[o - 2] = "(" + f[o - 2] + " + 1)", m(f);
    }
    function m(f) {
      let h = t8.map((b, C) => d(C, f)), g = h.join(","), x = h.slice(-2).join(",");
      return `getChannel(getX(${g}), vec2(${x}))`;
    }
    function d(f, h) {
      return e.indexOf(f) !== -1 && t8[f] !== 1 ? `${t8[f]} - ${h[f]} - 1` : `${h[f]}`;
    }
  }
};
function Cte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { dims: s } = o, a = n.shape.length, i = y.parseAxisParam(s, n.shape);
  if (a === 0)
    return At({ inputs: { x: n }, backend: e });
  let p = A().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Ng(n.shape, i) : new kg(n.shape, i);
  return e.runWebGLProgram(p, [n], n.dtype);
}
var T3 = { kernelName: cs, backendName: "webgl", kernelFunc: Cte };
var Tg = class {
  constructor(t8, e) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    let o = t8[1], n = t8[2];
    this.outputShape = t8;
    let s = "";
    typeof e == "number" ? s = `float outputValue = ${e.toFixed(2)};` : s = `
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var _3 = { kernelName: As, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { image: o } = r, { radians: n, fillValue: s, center: a } = t8, i = e, p = new Tg(o.shape, s), [u, c] = w.getImageCenter(a, o.shape[1], o.shape[2]), l = [[u, c, Math.sin(n), Math.cos(n)]];
  return i.runWebGLProgram(p, [o], o.dtype, l);
} };
var wte = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
var Ste = xe({ opSnippet: wte });
var $3 = { kernelName: ls, backendName: "webgl", kernelFunc: Ste };
var Ite = "return inversesqrt(x);";
var vte = xe({ opSnippet: Ite, cpuKernelImpl: aD });
var E3 = { kernelName: ms, backendName: "webgl", kernelFunc: vte };
var vu = class {
  constructor(t8, e, o, n, s, a, i = true, p = false) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = a;
    let u = Re(s.length), c = Re(a.length), l = "";
    o === 1 ? l = "i" : o === 2 && (l = "i, j");
    let m = `getIndices(${l})`, d = "";
    n === 1 ? d = "i" : n === 2 && (d = "i, coords[1]");
    let f = `getUpdates(${d})`, h = "";
    p && (h = "coords[0], coords[1]");
    let g = `getDefaultValue(${h})`, x = e > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${u} strides = ${u}(${s});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t8}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${m});
              flattenedIndex += index * ${x};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(${g}, sum, float(found)));
        }
      `;
  }
};
var _g = class {
  constructor(t8, e, o, n, s, a, i = true, p = false) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.packedInputs = true, this.packedOutput = true, this.outputShape = a;
    let u = Re(s.length), c = Re(a.length), l = "";
    o === 1 ? l = "i" : o === 2 && (l = "i, j");
    let m = `getIndices(${l})`, d = "";
    n === 1 ? d = "i" : n === 2 && (d = "i, coords[1]");
    let f = `getUpdates(${d})`, h = "";
    p && (h = "coords[0], coords[1]");
    let g = `getDefaultValue(${h})`, x = e > 1 ? "strides[j]" : "strides", b = e > 1 ? "strides[j + 1]" : "strides";
    this.userCode = `
        ${u} strides = ${u}(${s});

        void main() {
          ${c} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${t8}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${e}; j+=2) {
              ivec4 index = round(${m});
              flattenedIndex += index.xz * ${x};
              if (j + 1 < ${e}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${f};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${g}, sum, found));
        }
      `;
  }
};
function kte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { indices: n, updates: s } = t8, { shape: a } = o, { sliceRank: i, numUpdates: p, sliceSize: u, strides: c, outputSize: l } = w.calculateShapes(s, n, a), m = [l / u, u];
  if (l === 0)
    return e.makeTensorInfo(a, n.dtype);
  let d = te({ inputs: { x: n }, backend: e, attrs: { shape: [p, i] } }), f = te({ inputs: { x: s }, backend: e, attrs: { shape: [p, u] } }), h = e.makeTensorInfo([], "float32", new Float32Array([0])), g;
  A().getBool("WEBGL_PACK") ? g = new _g(p, i, d.shape.length, f.shape.length, c, m) : g = new vu(p, i, d.shape.length, f.shape.length, c, m);
  let x = e.runWebGLProgram(g, [f, d, h], f.dtype), b = te({ inputs: { x }, backend: e, attrs: { shape: a } });
  return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(x), e.disposeIntermediateTensorInfo(h), b;
}
var R3 = { kernelName: ds, backendName: "webgl", kernelFunc: kte };
var $g = class {
  constructor(t8, e, o, n) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [t8, o];
    let s = "while (left < right) {", a = `for (int i = 0; i < ${Math.ceil(Math.log2(e + 1))}; ++i) { if (left >= right) break;`, i = A().getNumber("WEBGL_VERSION") === 2 ? s : a, p = n === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${p} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
};
function Nte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { sortedSequence: n, values: s } = t8, { side: a } = o, i = new $g(n.shape[0], n.shape[1], s.shape[1], a), p = [[n.shape[1]]];
  return e.runWebGLProgram(i, [n, s], "int32", p);
}
var D3 = { kernelName: hs, backendName: "webgl", kernelFunc: Nte };
var Eg = class {
  constructor(t8, e, o) {
    this.variableNames = ["c", "a", "b"], this.outputShape = e;
    let n, s;
    if (o > 4)
      throw Error(`Where for rank ${o} is not yet supported`);
    if (o === 1)
      s = "resRC", n = "resRC";
    else {
      let i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], p = [], u = [];
      for (let c = 0; c < e.length; c++)
        u.push(`${i[c]}`), c < t8 && p.push(`${i[c]}`);
      n = p.join(), s = u.join();
    }
    let a = Re(o);
    this.userCode = `
      void main() {
        ${a} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `;
  }
};
function Tte(r) {
  let { inputs: t8, backend: e } = r, { condition: o, t: n, e: s } = t8, a = new Eg(o.shape.length, n.shape, n.shape.length);
  return e.runWebGLProgram(a, [o, n, s], dt(n.dtype, s.dtype));
}
var A3 = { kernelName: fa, backendName: "webgl", kernelFunc: Tte };
var _te = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${w.SELU_SCALEALPHA};
  float scale = ${w.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
var $te = xe({ opSnippet: _te });
var F3 = { kernelName: gs, backendName: "webgl", kernelFunc: $te };
var Ete = Po + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`;
var Rte = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var Dte = xe({ opSnippet: Ete, packedOpSnippet: Rte, cpuKernelImpl: uD });
var P3 = { kernelName: Cs, backendName: "webgl", kernelFunc: Dte };
var Ate = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
var Fte = xe({ opSnippet: Ate });
var O3 = { kernelName: bs, backendName: "webgl", kernelFunc: Fte };
var Pte = Po + `
  return sin(x);
`;
var Ote = `
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${Xr}
  return result;
`;
var Mte = xe({ opSnippet: Pte, packedOpSnippet: Ote });
var M3 = { kernelName: xs, backendName: "webgl", kernelFunc: Mte };
var Lte = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
var Bte = xe({ opSnippet: Lte });
var L3 = { kernelName: ys, backendName: "webgl", kernelFunc: Bte };
var zte = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
var Vte = xe({ opSnippet: zte });
var B3 = { kernelName: ws, backendName: "webgl", kernelFunc: Vte };
var Wte = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockShape: s, paddings: a } = o;
  y.assert(n.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  let i = s.reduce((x, b) => x * b), p = [[0, 0]];
  p.push(...a);
  for (let x = 1 + s.length; x < n.shape.length; ++x)
    p.push([0, 0]);
  let u = [], c = Ev({ inputs: { x: n }, backend: e, attrs: { paddings: p, constantValue: 0 } }), l = w.getReshaped(c.shape, s, i, false), m = w.getPermuted(l.length, s.length, false), d = w.getReshapedPermuted(c.shape, s, i, false), f = te({ inputs: { x: c }, backend: e, attrs: { shape: l } }), h = Ct({ inputs: { x: f }, backend: e, attrs: { perm: m } }), g = te({ inputs: { x: h }, backend: e, attrs: { shape: d } });
  return u.push(c), u.push(f), u.push(h), u.forEach((x) => e.disposeIntermediateTensorInfo(x)), g;
};
var z3 = { kernelName: ga, backendName: "webgl", kernelFunc: Wte };
function Ute(r) {
  let { inputs: t8, backend: e } = r, { indices: o, values: n, denseShape: s, defaultValue: a } = t8;
  if (s.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);
  if (o.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${n.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);
  let i = e.readSync(o.dataId), p = e.readSync(n.dataId), u = e.readSync(s.dataId), c = e.readSync(a.dataId)[0], [l, m, d, f, h] = cD(i, o.shape, o.dtype, p, n.dtype, u, c);
  return [e.makeTensorInfo(m, o.dtype, l), e.makeTensorInfo([m[0]], n.dtype, d), e.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))), e.makeTensorInfo([h.length], o.dtype, new Int32Array(h))];
}
var V3 = { kernelName: ji, backendName: "webgl", kernelFunc: Ute };
function Gte(r) {
  let { inputs: t8, backend: e } = r, { inputIndices: o, inputShape: n, newShape: s } = t8;
  if (o.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let a = Array.from(e.readSync(n.dataId)), i = e.readSync(o.dataId), p = Array.from(e.readSync(s.dataId)), [u, c, l] = lD(i, o.shape, o.dtype, a, p);
  return [e.makeTensorInfo(c, o.dtype, u), e.makeTensorInfo([l.length], s.dtype, new Int32Array(l))];
}
var W3 = { kernelName: ti, backendName: "webgl", kernelFunc: Gte };
function Hte(r) {
  let { inputs: t8, backend: e } = r, { data: o, indices: n, segmentIds: s } = t8;
  if (o.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);
  let a = e.readSync(o.dataId), i = e.readSync(n.dataId), p = e.readSync(s.dataId), [u, c] = lh(a, o.shape, o.dtype, i, p, true);
  return e.makeTensorInfo(c, o.dtype, u);
}
var U3 = { kernelName: ya, backendName: "webgl", kernelFunc: Hte };
function Kte(r) {
  let { inputs: t8, backend: e } = r, { data: o, indices: n, segmentIds: s } = t8;
  if (o.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);
  let a = e.readSync(o.dataId), i = e.readSync(n.dataId), p = e.readSync(s.dataId), [u, c] = lh(a, o.shape, o.dtype, i, p);
  return e.makeTensorInfo(c, o.dtype, u);
}
var G3 = { kernelName: ba, backendName: "webgl", kernelFunc: Kte };
function qte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { sparseIndices: n, sparseValues: s, defaultValue: a } = t8, { outputShape: i } = o, { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = w.calculateShapes(s, n, i), d = false;
  if (s.dtype === "string") {
    let x = e.bufferSync(n), b = e.bufferSync(s), C = y.decodeString(e.readSync(a.dataId)[0]), S = iD(x, b, i, m, c, u, p, l, C, d);
    return e.makeTensorInfo(i, S.dtype, S.values);
  }
  let f = new vu(u, p, n.shape.length, s.shape.length, l, [m, 1], d), h = e.runWebGLProgram(f, [s, n, a], s.dtype), g = te({ inputs: { x: h }, backend: e, attrs: { shape: i } });
  return e.disposeIntermediateTensorInfo(h), g;
}
var H3 = { kernelName: ks, backendName: "webgl", kernelFunc: qte };
function jte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { numOrSizeSplits: s, axis: a } = o, i = y.parseAxisParam(a, n.shape)[0], p = w.prepareSplitSize(n, s, i), u = n.shape.length, c = new Array(u).fill(0), l = n.shape.slice();
  return p.map((m) => {
    let d = [...l];
    d[i] = m;
    let f = Gs({ inputs: { x: n }, backend: e, attrs: { begin: c, size: d } });
    return c[i] += m, f;
  });
}
var K3 = { kernelName: xa, backendName: "webgl", kernelFunc: jte };
var q3 = "return sqrt(x);";
var Xte = xe({ opSnippet: q3, packedOpSnippet: q3, cpuKernelImpl: mD });
var j3 = { kernelName: Ss, backendName: "webgl", kernelFunc: Xte };
var Yte = "return x * x;";
var Qte = xe({ opSnippet: Yte });
var X3 = { kernelName: Xi, backendName: "webgl", kernelFunc: Qte };
var Y3 = "return (a - b) * (a - b);";
var Zte = nt({ opSnippet: Y3, packedOpSnippet: Y3 });
var Q3 = { kernelName: Ns, backendName: "webgl", kernelFunc: Zte };
function Jte(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8;
  if (n.dtype !== "string")
    throw new Error("Input must be of datatype string");
  let s = e.readSync(n.dataId), a = w.fromUint8ToStringArray(s), i = dD(a, "string", o);
  return e.makeTensorInfo(n.shape, "string", i);
}
var Z3 = { kernelName: Ou, backendName: "webgl", kernelFunc: Jte };
function ere({ inputs: r, attrs: t8, backend: e }) {
  let { x: o } = r, n = Ut + `
    return x > 0.0 ? 1.0 : float(${t8.alpha});
  `, s = new or(o.shape, n);
  return e.runWebGLProgram(s, [o], o.dtype);
}
var J3 = { kernelName: So, backendName: "webgl", kernelFunc: ere };
var Rg = class {
  constructor(t8, e, o) {
    this.variableNames = ["x"], this.outputShape = o;
    let n = o.length, s = Re(o.length), a = Re(o.length), i = "";
    if (n === 1)
      i = "coords * strides + begin";
    else {
      let p = 0;
      i = o.map((u, c) => (p++, o.length === 1 ? `coords * strides[${c}] + begin[${c}]` : `coords[${p - 1}] * strides[${c}] + begin[${c}]`)).join(",");
    }
    this.userCode = `
      ${s} begin = ${s}(${t8});
      ${s} strides = ${s}(${e});

      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `;
  }
};
function tre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { begin: s, end: a, strides: i, beginMask: p, endMask: u, ellipsisMask: c, newAxisMask: l, shrinkAxisMask: m } = o, { finalShapeSparse: d, finalShape: f, isIdentity: h, sliceDim0: g, isSimpleSlice: x, begin: b, end: C, strides: S } = ct.sliceInfo(n.shape, s, a, i, p, u, c, l, m), k;
  if (h)
    k = te({ inputs: { x: n }, backend: e, attrs: { shape: f } });
  else if (g || x) {
    y.assert(n.shape.length >= 1, () => `Input must have rank at least 1, got: ${n.shape.length}`);
    let E = ct.computeOutShape(b, C, S), R = Gs({ inputs: { x: n }, backend: e, attrs: { begin: b, size: E } });
    k = te({ inputs: { x: R }, backend: e, attrs: { shape: f } }), e.disposeIntermediateTensorInfo(R);
  } else if (e.shouldExecuteOnCPU([n])) {
    let R = e.readSync(n.dataId), D = me(n.shape, n.dtype, R), P = fD(d, D, S, b);
    k = e.makeTensorInfo(f, n.dtype, P.values);
  } else {
    let R = new Rg(b, S, d);
    k = e.runWebGLProgram(R, [n], n.dtype);
  }
  let _ = te({ inputs: { x: k }, backend: e, attrs: { shape: f } });
  return e.disposeIntermediateTensorInfo(k), _;
}
var eP = { kernelName: Ts, backendName: "webgl", kernelFunc: tre };
function rre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { separator: n, nGramWidths: s, leftPad: a, rightPad: i, padWidth: p, preserveShortSequences: u } = o, { data: c, dataSplits: l } = t8, m = e.readSync(c.dataId), d = e.readSync(l.dataId), [f, h] = hD(m, d, n, s, a, i, p, u);
  return [e.makeTensorInfo([f.length], "string", f), e.makeTensorInfo(l.shape, "int32", h)];
}
var tP = { kernelName: Ca, backendName: "webgl", kernelFunc: rre };
function ore(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { skipEmpty: n } = o, { input: s, delimiter: a } = t8;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (s.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${s.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);
  let i = e.readSync(s.dataId), p = e.readSync(a.dataId)[0], [u, c, l] = gD(i, p, n), m = c.length;
  return [e.makeTensorInfo([m, 2], "int32", u), e.makeTensorInfo([m], "string", c), e.makeTensorInfo([2], "int32", new Int32Array(l))];
}
var rP = { kernelName: Yi, backendName: "webgl", kernelFunc: ore };
function nre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { numBuckets: n } = o, { input: s } = t8;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (n <= 0)
    throw new Error("Number of buckets must be at least 1");
  let a = e.readSync(s.dataId), i = xD(a, n);
  return e.makeTensorInfo(s.shape, "int32", i);
}
var oP = { kernelName: Qi, backendName: "webgl", kernelFunc: nre };
var sre = "return tan(x);";
var are = xe({ opSnippet: sre });
var nP = { kernelName: $s, backendName: "webgl", kernelFunc: are };
var ire = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
var ure = xe({ opSnippet: ire });
var sP = { kernelName: Es, backendName: "webgl", kernelFunc: ure };
function pre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { tensor: n, indices: s, updates: a } = t8, {} = o, { sliceRank: i, numUpdates: p, sliceSize: u, strides: c, outputSize: l } = w.calculateShapes(a, s, n.shape), m = [l / u, u];
  if (l === 0)
    return e.makeTensorInfo(n.shape, s.dtype);
  let d = te({ inputs: { x: s }, backend: e, attrs: { shape: [p, i] } }), f = te({ inputs: { x: a }, backend: e, attrs: { shape: [p, u] } }), h = te({ inputs: { x: n }, backend: e, attrs: { shape: m } }), g = new vu(p, i, d.shape.length, f.shape.length, c, m, false, true), x = e.runWebGLProgram(g, [f, d, h], h.dtype), b = te({ inputs: { x }, backend: e, attrs: { shape: n.shape } });
  return e.disposeIntermediateTensorInfo(d), e.disposeIntermediateTensorInfo(f), e.disposeIntermediateTensorInfo(h), e.disposeIntermediateTensorInfo(x), b;
}
var aP = { kernelName: fs, backendName: "webgl", kernelFunc: pre };
var Dg = class {
  constructor(t8, e) {
    this.variableNames = ["A"];
    let o = new Array(t8.length);
    for (let a = 0; a < o.length; a++)
      o[a] = t8[a] * e[a];
    this.outputShape = o, this.rank = o.length;
    let n = Re(this.rank), s = cre(t8);
    this.userCode = `
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `;
  }
};
function cre(r) {
  let t8 = r.length;
  if (t8 > 5)
    throw Error(`Tile for rank ${t8} is not yet supported`);
  if (t8 === 1)
    return `imod(resRC, ${r[0]})`;
  let e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], o = [];
  for (let n = 0; n < r.length; n++)
    o.push(`imod(${e[n]}, ${r[n]})`);
  return o.join();
}
function Dv(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { reps: s } = o;
  if (n.dtype === "string" || n.shape.length > 5) {
    let p = e.readSync(n.dataId), u = n.dtype === "string" ? p.map((m) => y.decodeString(m)) : p, c = me(n.shape, n.dtype, u), l = bD(c, s);
    return e.makeTensorInfo(l.shape, l.dtype, l.values);
  }
  let a = new Dg(n.shape, s);
  return e.runWebGLProgram(a, [n], n.dtype);
}
var iP = { kernelName: po, backendName: "webgl", kernelFunc: Dv };
var Ag = class {
  constructor(t8) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "negativeInf", type: "float" }, { name: "dir", type: "int" }, { name: "inc", type: "int" }], this.outputShape = t8, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
};
var Fg = class {
  constructor(t8) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "k", type: "int" }], this.outputShape = t8, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
};
function Rp(r, t8) {
  t8 !== null && r.disposeIntermediateTensorInfo(t8);
}
function uP(r) {
  let t8 = 1;
  for (; t8 < r; )
    t8 *= 2;
  return t8;
}
function lre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { k: s, sorted: a } = o, i = A().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), p = A().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), u = n.shape, c = u[u.length - 1];
  if (e.shouldExecuteOnCPU([n]) || c < i || s > p) {
    let P = e.readSync(n.dataId), [O, M] = CD(P, u, n.dtype, s, a);
    return [e.makeTensorInfo(O.shape, O.dtype, O.values), e.makeTensorInfo(M.shape, M.dtype, M.values)];
  }
  if (s === 0)
    return u[u.length - 1] = 0, [e.makeTensorInfo(u, n.dtype, []), e.makeTensorInfo(u, "int32", [])];
  if (c === 1)
    return [n, Si({ attrs: { shape: u, dtype: "int32", value: 0 }, backend: e })];
  let l = e.texData.get(n.dataId), m = l !== null && l.isPacked, d = m ? e.unpackTensor(n) : n, h = y.sizeFromShape(u) / c, g = te({ inputs: { x: d }, attrs: { shape: [h, c] }, backend: e });
  m && Rp(e, d);
  let x = uP(s), b = uP(c), C = null, S = () => C === null ? [g, g] : [g, C], k = (P, O, M) => {
    let L = S(), B = new Ag(M), U = [[c], [C === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [P], [O]], j = C;
    C = e.runWebGLProgram(B, L, "int32", U), Rp(e, j);
  };
  for (let P = 1; P < x; P *= 2) {
    let O = P * 2;
    for (let M = P; M >= 1; M /= 2)
      k(O, M, [h, b]);
  }
  for (let P = b; P > x; P /= 2) {
    let O = S(), M = new Fg([h, P / 2]), B = [[c], [C === null ? 1 : 0], [x]], z = C;
    C = e.runWebGLProgram(M, O, "int32", B), Rp(e, z);
    let U = x / 2, j = U * 2;
    for (let q = U; q >= 1; q /= 2)
      k(j, q, C.shape);
  }
  let _ = C;
  C = Gs({ inputs: { x: C }, backend: e, attrs: { begin: 0, size: [h, s] } }), Rp(e, _);
  let E = kv({ inputs: { x: g, indices: C }, backend: e, attrs: { axis: 1, batchDims: 1 } });
  Rp(e, g);
  let R = u.slice(0, -1);
  R.push(s), _ = C, C = te({ inputs: { x: C }, attrs: { shape: R }, backend: e }), Rp(e, _);
  let D = E;
  return E = te({ inputs: { x: E }, attrs: { shape: R }, backend: e }), Rp(e, D), [E, C];
}
var pP = { kernelName: Rs, backendName: "webgl", kernelFunc: lre };
var Pg = class {
  constructor(t8, e, o, n, s, a) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = a;
    let i = o === "nearest" ? 1 : 2, p;
    switch (n) {
      case "constant":
        p = 1;
        break;
      case "reflect":
        p = 2;
        break;
      case "wrap":
        p = 3;
        break;
      case "nearest":
        p = 4;
        break;
      default:
        p = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${p} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${p} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${p} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t8} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t8}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
};
function mre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { image: n, transforms: s } = t8, { interpolation: a, fillMode: i, fillValue: p, outputShape: u } = o, [c, l, m, d] = n.shape, [f, h] = u != null ? u : [l, m], g = [c, f, h, d], x = new Pg(l, m, a, i, p, g);
  return e.runWebGLProgram(x, [n, s], "float32");
}
var cP = { kernelName: Ds, backendName: "webgl", kernelFunc: mre };
function dre(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { axis: n } = e, { x: s } = t8;
  Vs(s, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  let a = o.readSync(s.dataId), { outputValues: i, outputShape: p, indices: u } = wD(a, n, s.shape, s.dtype);
  return [o.makeTensorInfo(p, s.dtype, i), o.makeTensorInfo([u.length], "int32", u)];
}
var lP = { kernelName: Zi, backendName: "webgl", kernelFunc: dre };
function fre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { value: n } = t8, { axis: s } = o;
  s < 0 && (s += n.shape.length);
  let a = n, i = a.shape.length, p = n.shape[s], u = new Array(i - 1), c = 0;
  for (let h = 0; h < i; h++)
    h !== s && (u[c++] = a.shape[h]);
  let l = [], m = new Array(i).fill(0), d = a.shape.slice();
  d[s] = 1;
  let f = new Array(p);
  for (let h = 0; h < f.length; h++) {
    m[s] = h;
    let g = Gs({ inputs: { x: a }, backend: e, attrs: { begin: m, size: d } }), x = te({ inputs: { x: g }, backend: e, attrs: { shape: u } });
    f[h] = x, l.push(g);
  }
  return l.forEach((h) => e.disposeIntermediateTensorInfo(h)), f;
}
var mP = { kernelName: wa, backendName: "webgl", kernelFunc: fre };
var Og = class {
  constructor(t8, e) {
    this.variableNames = ["x", "segmentIds"];
    let o = t8.windowSize, n = t8.batchSize, s = t8.inSize, a = t8.numSegments, i = a * Math.ceil(s / o);
    this.outputShape = [n, i];
    let p = "0.0", u = "sumValue", c = Math.floor(o / 4) * 4, l = o % 4, m = `
        sumValue += dot(values, segFilter);
    `, d = "";
    s % o > 0 && (d = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);
    let f = "";
    s % o > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${p};

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${a})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${a})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${l === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `;
  }
};
function hre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, segmentIds: s } = t8, { numSegments: a } = o, i = n.shape.length, p = [], u = 0, c = w.getAxesPermutation([u], i), l = n;
  c != null && (l = Ct({ inputs: { x: n }, backend: e, attrs: { perm: c } }), p.push(l), u = w.getInnerMostAxes(1, i)[0]);
  let m = w.segment_util.computeOutShape(l.shape, u, a), d = y.sizeFromShape([l.shape[u]]), f = te({ inputs: { x: l }, backend: e, attrs: { shape: [-1, d] } });
  p.push(f);
  let h = ni(n.dtype), g = (S, k, _, E, R) => {
    let D = S.shape[0], P = S.shape[1], O = w.segment_util.segOpComputeOptimalWindowSize(P, R), M = { windowSize: O, inSize: P, batchSize: D, numSegments: R }, L = new Og(M, k), B = e.compileAndRun(L, [S, _], E);
    if (p.push(B), B.shape[1] === R)
      return B;
    let z = Rv({ backend: e, attrs: { start: 0, stop: R, step: 1, dtype: "float32" } }), U = Dv({ inputs: { x: z }, backend: e, attrs: { reps: [P / O] } });
    return p.push(z), p.push(U), g(B, k, U, E, R);
  }, x = g(f, "unsortedSegmentSum", s, h, a), b = te({ inputs: { x }, backend: e, attrs: { shape: m } }), C = b;
  if (c != null) {
    p.push(b);
    let S = w.getUndoAxesPermutation(c);
    C = Ct({ inputs: { x: C }, backend: e, attrs: { perm: S } });
  }
  return p.forEach((S) => e.disposeIntermediateTensorInfo(S)), C;
}
var dP = { kernelName: Ji, backendName: "webgl", kernelFunc: hre };
var gre = [XD, QD, ZD, JD, tA, rA, oA, nA, iA, uA, pA, cA, lA, mA, dA, fA, hA, gA, xA, yA, bA, wA, SA, IA, vA, _A, EA, RA, BD, AA, PA, OA, MA, LA, BA, zA, VA, WA, UA, GA, qA, jA, XA, YA, QA, ZA, JA, eF, tF, rF, oF, nF, sF, aF, iF, uF, cF, lF, mF, dF, hF, gF, xF, yF, bF, CF, wF, SF, IF, LD, vF, FA, kF, NF, TF, zD, _F, $F, EF, RF, DF, AF, FF, PF, OF, MF, BF, zF, VF, WF, UF, GF, KF, jF, XF, YF, QF, ZF, o3, UD, n3, s3, a3, i3, kA, u3, l3, m3, d3, f3, VD, h3, g3, x3, y3, b3, NA, JF, C3, w3, S3, HD, I3, v3, k3, N3, T3, _3, $3, E3, R3, D3, A3, F3, P3, O3, M3, L3, CA, r3, B3, z3, V3, W3, U3, G3, H3, K3, j3, X3, Q3, Z3, J3, eP, tP, rP, oP, t3, qD, nP, sP, aP, iP, pP, cP, jD, lP, mP, dP, p3];
for (let r of gre)
  ri(r);
var we;
(function(r) {
  r[r.float32 = 0] = "float32", r[r.int32 = 1] = "int32", r[r.bool = 2] = "bool", r[r.string = 3] = "string", r[r.complex64 = 4] = "complex64";
})(we || (we = {}));
var ku;
(function(r) {
  r[r.linear = 0] = "linear", r[r.relu = 1] = "relu", r[r.relu6 = 2] = "relu6", r[r.prelu = 3] = "prelu", r[r.leakyrelu = 4] = "leakyrelu", r[r.sigmoid = 5] = "sigmoid", r[r.elu = 6] = "elu";
})(ku || (ku = {}));
var fP;
function xre(r) {
  fP = r.wasm.cwrap(Io, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function yre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { a: n, b: s, bias: a, preluActivationWeights: i } = t8;
  if (n.dtype !== "float32" || s.dtype !== "float32")
    throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");
  let { transposeA: p, transposeB: u, activation: c, leakyreluAlpha: l } = o, m = e.dataIdMap.get(n.dataId).id, d = e.dataIdMap.get(s.dataId).id, f = 0;
  if (a != null) {
    let R = e.dataIdMap.get(a.dataId);
    if (R.shape.length !== 1)
      throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${R.shape.length}.`);
    f = R.id;
  }
  let h = i == null ? 0 : e.dataIdMap.get(i.dataId).id, g = ku[c];
  if (g == null)
    throw new Error(`${c} activation not yet supported for FusedConv2D in the wasm backend.`);
  let x = p ? n.shape[2] : n.shape[1], b = u ? s.shape[1] : s.shape[2], C = Ir.assertAndGetBroadcastShape(n.shape.slice(0, -2), s.shape.slice(0, -2)), S = e.makeOutput([...C, x, b], n.dtype), k = e.dataIdMap.get(S.dataId).id, _ = new Uint8Array(new Int32Array(n.shape).buffer), E = new Uint8Array(new Int32Array(s.shape).buffer);
  return fP(m, _, n.shape.length, d, E, s.shape.length, p, u, g, f, h, l || 0, k), S;
}
var hP = { kernelName: Io, backendName: "wasm", setupFunc: xre, kernelFunc: yre };
function he(r, t8) {
  let e;
  function o(s) {
    e = s.wasm.cwrap(r, null, ["number", "number", "number"]);
  }
  function n(s) {
    let { backend: a, inputs: { x: i } } = s, p = a.dataIdMap.get(i.dataId).id, u = a.makeOutput(i.shape, t8 || i.dtype), c = a.dataIdMap.get(u.dataId).id;
    return y.sizeFromShape(u.shape) === 0 || e(p, we[i.dtype], c), u;
  }
  return { kernelName: r, backendName: "wasm", setupFunc: o, kernelFunc: n };
}
var gP = he(Xs);
var xP = he(Wo);
var yP = he(Uo);
function Ue(r, t8, e) {
  let o;
  function n(a) {
    o = a.wasm.cwrap(r, null, ["number", "array", "number", "number", "array", "number", "number", "number"]);
  }
  function s(a) {
    let { backend: i, inputs: p } = a, { a: u, b: c } = p, l = i.dataIdMap.get(u.dataId).id, m = i.dataIdMap.get(c.dataId).id, d = e != null ? e : u.dtype, f = w.assertAndGetBroadcastShape(u.shape, c.shape), h = i.makeOutput(f, d);
    if (y.sizeFromShape(f) === 0)
      return h;
    let g = new Uint8Array(new Int32Array(u.shape).buffer), x = new Uint8Array(new Int32Array(c.shape).buffer), b = i.dataIdMap.get(h.dataId).id;
    return (() => o(l, g, u.shape.length, m, x, c.shape.length, we[u.dtype], b))(), h;
  }
  return { kernelName: r, backendName: "wasm", setupFunc: n, kernelFunc: s };
}
var bre = true;
var bP = Ue(uo, bre);
var CP;
function Cre(r) {
  CP = r.wasm.cwrap(Go, null, ["array", "number", "number", "number"]);
}
function wre(r) {
  let { inputs: t8, backend: e } = r, o = e.makeOutput(t8[0].shape, t8[0].dtype);
  if (y.sizeFromShape(o.shape) === 0)
    return o;
  let n = t8.map((i) => e.dataIdMap.get(i.dataId).id), s = new Uint8Array(new Int32Array(n).buffer), a = e.dataIdMap.get(o.dataId).id;
  return CP(s, n.length, we[o.dtype], a), o;
}
var wP = { kernelName: Go, backendName: "wasm", setupFunc: Cre, kernelFunc: wre };
function Dp(r) {
  let { inputs: { x: t8 }, backend: e } = r;
  if (t8.dtype === "string")
    return ur(e.readSync(t8.dataId), t8.shape, t8.dtype);
  let o = e.makeOutput(t8.shape, t8.dtype), n = e.typedArrayFromHeap(t8);
  return e.typedArrayFromHeap(o).set(n), o;
}
var SP = { kernelName: wo, backendName: "wasm", kernelFunc: Dp };
var IP;
function Sre(r) {
  IP = r.wasm.cwrap(co, null, ["number", "array", "number", "number", "number", "array", "number"]);
}
function go(r) {
  let { inputs: t8, backend: e, attrs: o } = r, [n, s] = vre(t8.x.shape, o.perm), a = true;
  for (let f = 0; f < s.length; f++)
    s[f] !== f && (a = false);
  let i = Ire(t8.x.shape, o.perm), p = { dataId: t8.x.dataId, shape: n, dtype: t8.x.dtype };
  if (a) {
    let f = Dp({ inputs: t8, backend: e });
    return f.shape = i, f;
  }
  let u = e.makeOutput(i, p.dtype), c = e.dataIdMap.get(p.dataId).id, l = e.dataIdMap.get(u.dataId).id, m = new Uint8Array(new Int32Array(s).buffer), d = new Uint8Array(new Int32Array(p.shape).buffer);
  return IP(c, d, p.shape.length, we[p.dtype], l, m, s.length), u;
}
function Ire(r, t8) {
  let e = new Array(r.length);
  for (let o = 0; o < e.length; o++)
    e[o] = r[t8[o]];
  return e;
}
function vre(r, t8) {
  let e = [], o = [];
  for (let n = 0; n < r.length; ++n)
    r[n] !== 1 && e.push(r[n]), r[t8[n]] !== 1 && o.push(t8[n]);
  for (let n = 0; n < o.length; ++n) {
    let s = -1;
    for (let a = 0; a < o.length; ++a)
      o[a] >= n && (s === -1 || o[s] > o[a]) && (s = a);
    o[s] = n;
  }
  return [e, o];
}
var vP = { kernelName: co, backendName: "wasm", kernelFunc: go, setupFunc: Sre };
function _r(r, t8, e) {
  let o = r.shape, n = r.shape.length, s = y.parseAxisParam(t8, o), a = s, i = w.getAxesPermutation(a, n), p = null, u = false;
  if (i != null) {
    let c = new Array(n);
    for (let d = 0; d < c.length; d++)
      c[d] = o[i[d]];
    a = w.getInnerMostAxes(a.length, n), p = go({ inputs: { x: r }, attrs: { perm: i }, backend: e });
    let l = e.dataIdMap.get(r.dataId).id;
    e.dataIdMap.get(p.dataId).id !== l && (u = true);
  }
  return { transposed: p, originalAxes: s, axes: a, inputWasTransposed: u };
}
var kP;
function kre(r) {
  kP = r.wasm.cwrap(Ho, null, ["number, number, number"]);
}
function Nre(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = e, p = t8.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = _r(a, n, t8);
  if (d) {
    let C = t8.dataIdMap.get(c.dataId).id;
    u = c, p = C;
  }
  let f = u.shape.length;
  w.assertAxesAreInnerMostDims("all", l, f);
  let [h, g] = w.computeOutAndReduceShapes(u.shape, l), x = y.sizeFromShape(g), b = t8.makeOutput(h, a.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = t8.dataIdMap.get(b.dataId).id;
    kP(p, x, C);
  }
  if (d && t8.disposeData(c.dataId), s) {
    let C = w.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var NP = { kernelName: Ho, backendName: "wasm", setupFunc: kre, kernelFunc: Nre };
var TP;
function Tre(r) {
  TP = r.wasm.cwrap(Ko, null, ["number, number, number"]);
}
function _re(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = e, p = t8.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = _r(a, n, t8);
  if (d) {
    let C = t8.dataIdMap.get(c.dataId).id;
    u = c, p = C;
  }
  let f = u.shape.length;
  w.assertAxesAreInnerMostDims("any", l, f);
  let [h, g] = w.computeOutAndReduceShapes(u.shape, l), x = y.sizeFromShape(g), b = t8.makeOutput(h, a.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = t8.dataIdMap.get(b.dataId).id;
    TP(p, x, C);
  }
  if (d && t8.disposeData(c.dataId), s) {
    let C = w.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var _P = { kernelName: Ko, backendName: "wasm", setupFunc: Tre, kernelFunc: _re };
function Mg(r) {
  let t8;
  function e(n) {
    t8 = n.wasm.cwrap(r, null, ["number", "number", "number", "number", "number"]);
  }
  function o(n) {
    let { backend: s, inputs: a, attrs: i } = n, { axis: p } = i, { x: u } = a, c = s.dataIdMap.get(u.dataId).id, l = c, m = u, { transposed: d, axes: f, inputWasTransposed: h } = _r(u, p, s);
    if (h) {
      let k = s.dataIdMap.get(d.dataId).id;
      k !== c && (m = d, l = k);
    }
    let g = m.shape.slice(0, -1), x = s.makeOutput(g, "int32"), b = s.dataIdMap.get(x.dataId).id, C = y.sizeFromShape(x.shape), S = m.shape[f[0]];
    return t8(l, we[m.dtype], C, S, b), h && s.disposeData(d.dataId), x;
  }
  return { kernelName: r, backendName: "wasm", setupFunc: e, kernelFunc: o };
}
var $P = Mg(Ys);
var EP = Mg(Qs);
var RP = he(qo);
var DP = he(jo);
var AP = he(Xo);
var FP = Ue(Qo, false);
var PP = he(Yo);
var OP;
function $re(r) {
  OP = r.wasm.cwrap(Zo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ere(r) {
  let { inputs: t8, attrs: e, backend: o } = r, n = t8.x, s = o.dataIdMap.get(n.dataId).id, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = e, c = w.computePool2DInfo(n.shape, a, i, 1, p, u), l = c.filterHeight, m = c.filterWidth, d = c.padInfo.top, f = c.padInfo.right, h = c.padInfo.bottom, g = c.padInfo.left, x = c.strideHeight, b = c.strideWidth, C = c.inChannels;
  if (c.dataFormat !== "channelsLast")
    throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);
  if (c.dilationWidth !== 1 || c.dilationHeight !== 1)
    throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${c.dilationHeight}, ${c.dilationWidth}].`);
  let S = o.makeOutput(c.outShape, "float32"), k = o.dataIdMap.get(S.dataId).id;
  return OP(s, n.shape[0], n.shape[1], n.shape[2], l, m, d, f, h, g, x, b, C, k), S;
}
var MP = { kernelName: Zo, backendName: "wasm", setupFunc: $re, kernelFunc: Ere };
var LP;
function Rre(r) {
  LP = r.wasm.cwrap("AvgPool3D", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Dre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dimRoundingMode: p, dataFormat: u } = o, c = w.computePool3DInfo(n.shape, s, a, 1, i, p, u), l = e.makeOutput(c.outShape, n.dtype);
  return LP(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(l.dataId).id, c.batchSize, c.inChannels, c.inDepth, c.inHeight, c.inWidth, c.outDepth, c.outHeight, c.outWidth, c.strideDepth, c.strideHeight, c.strideWidth, c.dilationDepth, c.dilationHeight, c.dilationWidth, c.effectiveFilterDepth, c.effectiveFilterHeight, c.effectiveFilterWidth, c.padInfo.front, c.padInfo.top, c.padInfo.left), l;
}
var BP = { kernelName: Zs, backendName: "wasm", setupFunc: Rre, kernelFunc: Dre };
var zP;
function Are(r) {
  zP = r.wasm.cwrap("AvgPool3DGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Fre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = o, c = w.computePool3DInfo(s.shape, a, i, 1, p, u), l = e.makeOutput(s.shape, s.dtype);
  return zP(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(l.dataId).id, c.batchSize, c.inChannels, c.inDepth, c.inHeight, c.inWidth, c.outDepth, c.outHeight, c.outWidth, c.strideDepth, c.strideHeight, c.strideWidth, c.dilationDepth, c.dilationHeight, c.dilationWidth, c.effectiveFilterDepth, c.effectiveFilterHeight, c.effectiveFilterWidth, c.padInfo.front, c.padInfo.top, c.padInfo.left, c.filterDepth, c.filterHeight, c.filterWidth), l;
}
var VP = { kernelName: Ai, backendName: "wasm", setupFunc: Are, kernelFunc: Fre };
var WP;
function Pre(r) {
  WP = r.wasm.cwrap("AvgPoolGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ore(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, { filterSize: a, strides: i, pad: p } = o, u = w.computePool2DInfo(s.shape, a, i, 1, p), c = e.makeOutput(s.shape, s.dtype);
  return WP(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(c.dataId).id, u.batchSize, u.inChannels, u.inHeight, u.inWidth, u.outHeight, u.outWidth, u.strideHeight, u.strideWidth, u.dilationHeight, u.dilationWidth, u.effectiveFilterHeight, u.effectiveFilterWidth, u.padInfo.top, u.padInfo.left, u.filterHeight, u.filterWidth), c;
}
var UP = { kernelName: Di, backendName: "wasm", setupFunc: Pre, kernelFunc: Ore };
function Vt(r) {
  let { inputs: t8, attrs: e } = r, { x: o } = t8, { shape: n } = e, s = y.sizeFromShape(o.shape), a = y.inferFromImplicitShape(n, s);
  return y.assert(s === y.sizeFromShape(a), () => `new shape: ${a}, old shape: ${o.shape}. New shape and old shape must have the same number of elements.`), r.backend.incRef(o.dataId), { dataId: o.dataId, shape: a, dtype: o.dtype };
}
var GP = { kernelName: da, backendName: "wasm", kernelFunc: Vt };
var HP;
function Mre(r) {
  HP = r.wasm.cwrap(Jo, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number"]);
}
function Lre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { a: n, b: s } = t8, { transposeA: a, transposeB: i } = o;
  if (n.dtype !== "float32" || s.dtype !== "float32")
    throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");
  let p = n.shape.length, u = s.shape.length, c = a ? n.shape[p - 2] : n.shape[p - 1], l = i ? s.shape[u - 1] : s.shape[u - 2], m = a ? n.shape[p - 1] : n.shape[p - 2], d = i ? s.shape[u - 2] : s.shape[u - 1], f = n.shape.slice(0, -2), h = s.shape.slice(0, -2), g = y.sizeFromShape(f), x = y.sizeFromShape(h), C = Ir.assertAndGetBroadcastShape(n.shape.slice(0, -2), s.shape.slice(0, -2)).concat([m, d]);
  y.assert(c === l, () => `Error in matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);
  let S = a ? [g, c, m] : [g, m, c], k = i ? [x, d, l] : [x, l, d], _ = Vt({ inputs: { x: n }, backend: e, attrs: { shape: S } }), E = Vt({ inputs: { x: s }, backend: e, attrs: { shape: k } }), R = e.dataIdMap.get(_.dataId).id, D = e.dataIdMap.get(E.dataId).id, P = a ? _.shape[2] : _.shape[1], O = i ? E.shape[1] : E.shape[2], M = Math.max(g, x), L = e.makeOutput([M, P, O], _.dtype), B = e.dataIdMap.get(L.dataId).id, z = new Uint8Array(new Int32Array(_.shape).buffer), U = new Uint8Array(new Int32Array(E.shape).buffer);
  return HP(R, z, _.shape.length, D, U, E.shape.length, a, i, B), e.disposeData(_.dataId), e.disposeData(E.dataId), L.shape = C, L;
}
var KP = { kernelName: Jo, backendName: "wasm", setupFunc: Mre, kernelFunc: Lre };
function Oo(r) {
  let { inputs: { x: t8 }, attrs: { begin: e, size: o }, backend: n } = r, [s, a] = ct.parseSliceParams(t8, e, o), i = ct.isSliceContinous(t8.shape, s, a), p = n.readSync(t8.dataId), u = n.makeOutput(a, t8.dtype), c = y.computeStrides(t8.shape), l = n.dataIdMap.get(u.dataId);
  if (i) {
    let f = ct.computeFlatOffset(s, c);
    return t8.dtype === "string" ? l.stringBytes = p.slice(f, f + y.sizeFromShape(a)) : n.typedArrayFromHeap(u).set(p.subarray(f, f + y.sizeFromShape(a))), u;
  }
  if (t8.dtype === "string") {
    let f = hp(p, s, a, t8.shape, t8.dtype);
    return l.stringBytes = f, u;
  }
  let m = n.typedArrayFromHeap(u), d = t8.shape.length;
  if (d === 2)
    Bre(p, c[0], m, s, a);
  else if (d === 3)
    zre(p, c[0], c[1], m, s, a);
  else if (d === 4)
    Vre(p, c[0], c[1], c[2], m, s, a);
  else {
    let f = hp(p, s, a, t8.shape, t8.dtype);
    m.set(f);
  }
  return u;
}
function Bre(r, t8, e, o, n) {
  let s = 0, a = o[0], i = o[1], p = a + n[0];
  for (let u = a; u < p; u++) {
    let c = u * t8 + i;
    e.set(r.subarray(c, c + n[1]), s), s += n[1];
  }
}
function zre(r, t8, e, o, n, s) {
  let a = 0, i = n[0], p = n[1], u = n[2], c = i + s[0], l = p + s[1];
  for (let m = i; m < c; m++)
    for (let d = p; d < l; d++) {
      let f = m * t8 + d * e + u;
      o.set(r.subarray(f, f + s[2]), a), a += s[2];
    }
}
function Vre(r, t8, e, o, n, s, a) {
  let i = 0, p = s[0], u = s[1], c = s[2], l = p + a[0], m = u + a[1], d = c + a[2], f = s[3];
  for (let h = p; h < l; h++)
    for (let g = u; g < m; g++)
      for (let x = c; x < d; x++) {
        let b = h * t8 + g * e + x * o + f;
        n.set(r.subarray(b, b + a[3]), i), i += a[3];
      }
}
var qP = { kernelName: ha, backendName: "wasm", kernelFunc: Oo };
function Wre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockShape: s, crops: a } = o, i = s.reduce((x, b) => x * b), p = w.getReshaped(n.shape, s, i), u = w.getPermuted(p.length, s.length), c = w.getReshapedPermuted(n.shape, s, i), l = w.getSliceBeginCoords(a, s.length), m = w.getSliceSize(c, a, s.length), d = Vt({ inputs: { x: n }, backend: e, attrs: { shape: p } }), f = go({ inputs: { x: d }, backend: e, attrs: { perm: u } }), h = Vt({ inputs: { x: f }, backend: e, attrs: { shape: c } }), g = Oo({ inputs: { x: h }, backend: e, attrs: { begin: l, size: m } });
  return e.disposeData(d.dataId), e.disposeData(f.dataId), e.disposeData(h.dataId), g;
}
var jP = { kernelName: Js, backendName: "wasm", kernelFunc: Wre };
var XP;
function Ure(r) {
  XP = r.wasm.cwrap(en, null, ["number", "number", "boolean", "number", "number", "number"]);
}
function Gre(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { x: n, weights: s } = e, { size: a } = o, i = s.shape.reduce((l, m) => l * m, 1) !== 0, p = n.shape.length === 1 ? [a] : [n.shape[0], a], u = t8.makeOutput(p, s.dtype);
  function c(l) {
    return t8.dataIdMap.get(l.dataId).id;
  }
  return XP(c(n), a, i, c(s), we[s.dtype], c(u)), u;
}
var YP = { kernelName: en, backendName: "wasm", setupFunc: Ure, kernelFunc: Gre };
var Hre = true;
var QP = Ue(ja, Hre);
function Kre(r) {
  let { inputs: t8, backend: e } = r, { s0: o, s1: n } = t8, s = e.typedArrayFromHeap(o), a = e.typedArrayFromHeap(n), i = w.assertAndGetBroadcastShape(Array.from(s), Array.from(a));
  return e.makeOutput([i.length], "int32", void 0, new Int32Array(i));
}
var ZP = { kernelName: ea, backendName: "wasm", kernelFunc: Kre };
function Mr(r) {
  let { inputs: { x: t8 }, attrs: { dtype: e }, backend: o } = r, n = o.makeOutput(t8.shape, e), s = o.typedArrayFromHeap(t8);
  return o.typedArrayFromHeap(n).set(s), n;
}
var JP = { kernelName: bo, backendName: "wasm", kernelFunc: Mr };
var eO = he(tn);
var tO;
function qre(r) {
  tO = r.wasm.cwrap(Co, null, ["number", "number", "number", "number"]);
}
function jre(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { clipValueMin: s, clipValueMax: a } = o, i = e.dataIdMap.get(n.dataId).id, p = e.makeOutput(n.shape, n.dtype), u = e.dataIdMap.get(p.dataId).id;
  return tO(i, s, a, u), p;
}
var rO = { kernelName: Co, backendName: "wasm", setupFunc: qre, kernelFunc: jre };
function Av(r) {
  let { inputs: t8, backend: e } = r, o = y.parseAxisParam(r.attrs.axis, t8[0].shape)[0], n = t8.map((d) => d.shape);
  w.assertParamsConsistent(n, o);
  let s = w.computeOutShape(t8.map((d) => d.shape), o), a = t8.filter((d) => y.sizeFromShape(d.shape) > 0);
  if (a.length === 1)
    return Dp({ inputs: { x: a[0] }, backend: e });
  let i = e.makeOutput(s, t8[0].dtype);
  if (y.sizeFromShape(s) === 0)
    return i;
  if (a[0].dtype === "string") {
    let d = a.map((C) => {
      let k = [-1, y.sizeFromShape(C.shape.slice(o))];
      return Vt({ inputs: { x: C }, backend: e, attrs: { shape: k } });
    }), f = d.map((C) => ({ vals: e.readSync(C.dataId), shape: C.shape }));
    s = w.computeOutShape(d.map((C) => C.shape), 1);
    let h = d[0].shape[0] === 1, g = mp(f, s, t8[0].dtype, h), x = w.computeOutShape(a.map((C) => C.shape), o);
    i.shape = x;
    let b = e.dataIdMap.get(i.dataId);
    return b.stringBytes = w.fromStringArrayToUint8(g), d.forEach((C) => e.disposeData(C.dataId)), i;
  }
  let p = y.sizeFromShape(a[0].shape.slice(0, o)), u = 0, c = a.map((d) => {
    let f = y.sizeFromShape(d.shape.slice(o));
    return u += f, f;
  }), l = a.map((d) => e.typedArrayFromHeap(d)), m = e.typedArrayFromHeap(i);
  for (let d = 0; d < p; d++) {
    let f = d * u;
    for (let h = 0; h < l.length; h++) {
      let g = c[h], x = d * g, b = l[h].subarray(x, x + g);
      m.set(b, f), f += g;
    }
  }
  return i;
}
var oO = { kernelName: ta, backendName: "wasm", kernelFunc: Av };
var nO;
function Xre(r) {
  nO = r.wasm.cwrap(rn, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Yre(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { x: n, filter: s } = t8, a = o.dataIdMap.get(n.dataId).id, i = o.dataIdMap.get(s.dataId).id, { strides: p, dilations: u, pad: c, dimRoundingMode: l, dataFormat: m } = e, d = w.convertConv2DDataFormat(m), f = w.computeConv2DInfo(n.shape, s.shape, p, u, c, l, false, d), h = f.filterHeight, g = f.filterWidth, x = f.padInfo.top, b = f.padInfo.right, C = f.padInfo.bottom, S = f.padInfo.left, k = f.dilationHeight, _ = f.dilationWidth, E = f.strideHeight, R = f.strideWidth, D = f.inChannels, P = f.outChannels, O = f.padInfo.type === "SAME" ? 1 : 0;
  if (f.dataFormat !== "channelsLast")
    throw new Error(`wasm backend Conv2D does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);
  let M = o.makeOutput(f.outShape, "float32"), L = o.dataIdMap.get(M.dataId).id;
  return nO(a, n.shape[0], n.shape[1], n.shape[2], i, h, g, x, b, C, S, O, k, _, E, R, D, P, L), M;
}
var sO = { kernelName: rn, backendName: "wasm", setupFunc: Xre, kernelFunc: Yre };
var aO;
function Qre(r) {
  aO = r.wasm.cwrap(on, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Zre(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { dy: n, filter: s } = e, { strides: a, pad: i, dataFormat: p, dimRoundingMode: u, inputShape: c } = o, l = 1, m = w.convertConv2DDataFormat(p), d = w.computeConv2DInfo(c, s.shape, a, l, i, u, false, m), { batchSize: f, filterHeight: h, filterWidth: g, inChannels: x, inHeight: b, inWidth: C, outChannels: S, outHeight: k, outWidth: _, strideHeight: E, strideWidth: R } = d, D = h - 1 - d.padInfo.top, P = g - 1 - d.padInfo.left, O = d.dataFormat === "channelsLast", M = y.computeStrides(d.inShape), L = y.computeStrides(n.shape), [B, z, U] = y.computeStrides(s.shape), j = M[0], q = O ? M[1] : M[2], Y = O ? M[2] : 1, J = O ? 1 : M[1], re = L[0], ne = O ? L[1] : L[2], ee = O ? L[2] : 1, oe = O ? 1 : L[1], ie = t8.makeOutput(d.inShape, "float32"), le = t8.dataIdMap.get(ie.dataId).id, be = t8.dataIdMap.get(n.dataId).id, _e = t8.dataIdMap.get(s.dataId).id;
  return aO(be, _e, f, h, g, b, C, x, k, _, S, E, R, D, P, B, z, U, j, q, Y, J, re, ne, ee, oe, le), ie;
}
var iO = { kernelName: on, backendName: "wasm", setupFunc: Qre, kernelFunc: Zre };
var uO;
function Jre(r) {
  uO = r.wasm.cwrap(nn, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function eoe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p } = o;
  if (n.dtype !== "float32")
    throw new Error(`Tensor x must have dtype float32, got ${n.dtype}`);
  if (s.dtype !== "float32")
    throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);
  let u = w.computeConv3DInfo(n.shape, s.shape, a, p, i), c = e.makeOutput(u.outShape, n.dtype);
  return uO(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(c.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), c;
}
var pO = { kernelName: nn, backendName: "wasm", setupFunc: Jre, kernelFunc: eoe };
var cO;
function toe(r) {
  cO = r.wasm.cwrap(Xa, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function roe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, pad: i, filterShape: p } = o;
  if (n.dtype !== "float32")
    throw new Error(`Tensor dy must have dtype float32, got ${n.dtype}`);
  if (s.dtype !== "float32")
    throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);
  let u = w.computeConv3DInfo(n.shape, p, a, 1, i), c = e.makeOutput(u.filterShape, s.dtype);
  return cO(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(c.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), c;
}
var lO = { kernelName: Xa, backendName: "wasm", setupFunc: toe, kernelFunc: roe };
var mO;
function ooe(r) {
  mO = r.wasm.cwrap(sn, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function noe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { pad: a, strides: i, inputShape: p } = o;
  if (n.dtype !== "float32")
    throw new Error(`Tensor dy must have dtype float32, got ${n.dtype}`);
  if (s.dtype !== "float32")
    throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);
  let u = w.computeConv3DInfo(p, s.shape, i, 1, a), c = e.makeOutput(u.inShape, n.dtype);
  return mO(e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(c.dataId).id, u.batchSize, u.inDepth, u.inHeight, u.inWidth, u.inChannels, u.outDepth, u.outHeight, u.outWidth, u.outChannels, u.strideDepth, u.strideHeight, u.strideWidth, u.dilationDepth, u.dilationHeight, u.dilationWidth, u.filterDepth, u.filterHeight, u.filterWidth, u.padInfo.front, u.padInfo.top, u.padInfo.left), c;
}
var dO = { kernelName: sn, backendName: "wasm", setupFunc: ooe, kernelFunc: noe };
var fO = he(an);
var hO = he(un);
var Fv;
(function(r) {
  r[r.bilinear = 0] = "bilinear", r[r.nearest = 1] = "nearest";
})(Fv || (Fv = {}));
var gO;
function soe(r) {
  gO = r.wasm.cwrap(ln, null, ["number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
}
function aoe(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { method: n, extrapolationValue: s, cropSize: a } = o, { image: i, boxes: p, boxInd: u } = e, c = p.shape[0], [l, m] = a, d = [c, l, m, i.shape[3]], f = t8.dataIdMap.get(i.dataId), h;
  i.dtype !== "float32" && (h = Mr({ backend: t8, inputs: { x: i }, attrs: { dtype: "float32" } }), f = t8.dataIdMap.get(h.dataId));
  let g = f.id, x = t8.dataIdMap.get(p.dataId).id, b = t8.dataIdMap.get(u.dataId).id, C = t8.makeOutput(d, "float32"), S = t8.dataIdMap.get(C.dataId).id, k = new Uint8Array(new Int32Array(i.shape).buffer);
  return gO(g, x, b, c, k, l, m, Fv[n], s, S), h != null && t8.disposeData(h.dataId), C;
}
var xO = { kernelName: ln, backendName: "wasm", setupFunc: soe, kernelFunc: aoe };
var yO;
function ioe(r) {
  yO = r.wasm.cwrap(pn, null, ["number", "number", "number", "number", "number", "number"]);
}
function uoe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, exclusive: a, reverse: i } = o, p = n.shape.length;
  y.assert(n.dtype === "float32" || n.dtype === "int32", () => `cumprod does not support ${n.dtype} tensors in the WASM backend`);
  let u = w.getAxesPermutation([s], p), c = n;
  u !== null && (c = go({ inputs: { x: n }, attrs: { perm: u }, backend: e }));
  let l = w.getInnerMostAxes(1, p)[0];
  w.assertAxesAreInnerMostDims("cumprod", [l], p);
  let m = e.makeOutput(c.shape, c.dtype), d = c.shape[l], f = e.dataIdMap.get(c.dataId).id, h = e.dataIdMap.get(m.dataId).id;
  yO(f, a ? 1 : 0, i ? 1 : 0, d, h, we[n.dtype]);
  let g = m;
  if (u !== null) {
    let x = w.getUndoAxesPermutation(u);
    g = go({ inputs: { x: m }, attrs: { perm: x }, backend: e }), e.disposeData(c.dataId), e.disposeData(m.dataId);
  }
  return g;
}
var bO = { kernelName: pn, backendName: "wasm", setupFunc: ioe, kernelFunc: uoe };
var CO;
function poe(r) {
  CO = r.wasm.cwrap(cn, null, ["number", "number", "number", "number", "number", "number"]);
}
function coe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, exclusive: a, reverse: i } = o, p = n.shape.length;
  y.assert(n.dtype === "float32" || n.dtype === "int32", () => `cumsum does not support ${n.dtype} tensors in the WASM backend`);
  let u = w.getAxesPermutation([s], p), c = n;
  u !== null && (c = go({ inputs: { x: n }, attrs: { perm: u }, backend: e }));
  let l = w.getInnerMostAxes(1, p)[0];
  w.assertAxesAreInnerMostDims("cumsum", [l], p);
  let m = e.makeOutput(c.shape, c.dtype), d = c.shape[l], f = e.dataIdMap.get(c.dataId).id, h = e.dataIdMap.get(m.dataId).id;
  CO(f, a ? 1 : 0, i ? 1 : 0, d, h, we[n.dtype]);
  let g = m;
  if (u !== null) {
    let x = w.getUndoAxesPermutation(u);
    g = go({ inputs: { x: m }, attrs: { perm: x }, backend: e }), e.disposeData(c.dataId), e.disposeData(m.dataId);
  }
  return g;
}
var wO = { kernelName: cn, backendName: "wasm", setupFunc: poe, kernelFunc: coe };
var SO;
function loe(r) {
  SO = r.wasm.cwrap("DenseBincount", null, ["number", "array", "number", "number", "boolean", "number", "number", "boolean", "number"]);
}
function moe(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { x: n, weights: s } = e, { size: a, binaryOutput: i } = o, p = s.shape.reduce((m, d) => m * d, 1) !== 0, u = n.shape.length === 1 ? [a] : [n.shape[0], a], c = t8.makeOutput(u, s.dtype);
  function l(m) {
    return t8.dataIdMap.get(m.dataId).id;
  }
  return SO(l(n), new Uint8Array(new Int32Array(n.shape).buffer), n.shape.length, a, p, l(s), we[s.dtype], i, l(c)), c;
}
var IO = { kernelName: ra, backendName: "wasm", setupFunc: loe, kernelFunc: moe };
var vO;
function doe(r) {
  vO = r.wasm.cwrap(mn, null, ["number", "number", "number", "array", "number", "array", "array", "number", "number"]);
}
function foe(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { x: n } = e, { blockSize: s, dataFormat: a } = o, i = n.shape[0], p = a === "NHWC" ? n.shape[1] : n.shape[2], u = a === "NHWC" ? n.shape[2] : n.shape[3], c = a === "NHWC" ? n.shape[3] : n.shape[1], l = p * s, m = u * s, d = c / (s * s), f = a === "NHWC" ? [i, l, m, d] : [i, d, l, m], h = t8.makeOutput(f, "float32"), x = t8.dataIdMap.get(n.dataId).id, b = new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer), C = new Uint8Array(new Int32Array(f).buffer), S = new Uint8Array(new Int32Array(y.computeStrides(f)).buffer), k = t8.dataIdMap.get(h.dataId).id;
  return vO(x, s, a === "NHWC" ? 1 : 0, b, n.shape.length - 1, C, S, f.length, k), h;
}
var kO = { kernelName: mn, backendName: "wasm", setupFunc: doe, kernelFunc: foe };
var NO;
function hoe(r) {
  NO = r.wasm.cwrap(dn, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function goe(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { x: n, filter: s } = t8, a = o.dataIdMap.get(n.dataId).id, i = o.dataIdMap.get(s.dataId).id, { strides: p, dilations: u, pad: c, dimRoundingMode: l } = e, m = u == null ? [1, 1] : u, d = w.computeConv2DInfo(n.shape, s.shape, p, m, c, l, true), f = d.filterHeight, h = d.filterWidth, g = d.padInfo.top, x = d.padInfo.right, b = d.padInfo.bottom, C = d.padInfo.left, S = d.dilationHeight, k = d.dilationWidth, _ = d.strideHeight, E = d.strideWidth, R = d.inChannels, D = d.outChannels, P = d.padInfo.type === "SAME" ? 1 : 0;
  if (d.dataFormat !== "channelsLast")
    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${d.dataFormat}'. Please use 'channelsLast'.`);
  let O = o.makeOutput(d.outShape, "float32"), M = o.dataIdMap.get(O.dataId).id;
  return NO(a, n.shape[0], n.shape[1], n.shape[2], i, f, h, g, x, b, C, P, S, k, _, E, R, D, M), O;
}
var TO = { kernelName: dn, backendName: "wasm", setupFunc: hoe, kernelFunc: goe };
var _O;
function xoe(r) {
  _O = r.wasm.cwrap("Diag", null, ["number", "number", "number", "number"]);
}
function yoe(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8, n = y.sizeFromShape(o.shape), s = e.makeOutput([...o.shape, ...o.shape], o.dtype);
  return _O(e.dataIdMap.get(o.dataId).id, we[o.dtype], n, e.dataIdMap.get(s.dataId).id), s;
}
var $O = { kernelName: oa, backendName: "wasm", setupFunc: xoe, kernelFunc: yoe };
var EO;
function boe(r) {
  EO = r.wasm.cwrap(fn, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Coe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p } = o;
  if (n.dtype !== s.dtype)
    throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${n.dtype} and ${s.dtype}`);
  let u = w.computeDilation2DInfo(n.shape, s.shape, a, i, "NHWC", p), c = e.makeOutput(u.outShape, n.dtype);
  return EO(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(c.dataId).id, we[n.dtype], u.batchSize, u.inChannels, u.inHeight, u.inWidth, u.outHeight, u.outWidth, u.strideHeight, u.strideWidth, u.dilationHeight, u.dilationWidth, u.filterHeight, u.filterWidth, u.padInfo.top, u.padInfo.left), c;
}
var RO = { kernelName: fn, backendName: "wasm", setupFunc: boe, kernelFunc: Coe };
var DO;
function woe(r) {
  DO = r.wasm.cwrap(zi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Soe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, dy: a } = t8, { strides: i, pad: p, dilations: u } = o;
  if (n.dtype !== s.dtype || n.dtype !== a.dtype)
    throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${n.dtype}, ${s.dtype}, and ${a.dtype}`);
  let c = w.computeDilation2DInfo(n.shape, s.shape, i, p, "NHWC", u), l = e.makeOutput(s.shape, s.dtype);
  return DO(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(a.dataId).id, e.dataIdMap.get(l.dataId).id, we[n.dtype], c.batchSize, c.inChannels, c.inHeight, c.inWidth, c.outHeight, c.outWidth, c.strideHeight, c.strideWidth, c.dilationHeight, c.dilationWidth, c.filterHeight, c.filterWidth, c.padInfo.top, c.padInfo.left), l;
}
var AO = { kernelName: zi, backendName: "wasm", setupFunc: woe, kernelFunc: Soe };
var FO;
function Ioe(r) {
  FO = r.wasm.cwrap(Bi, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function voe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, dy: a } = t8, { strides: i, pad: p, dilations: u } = o;
  if (n.dtype !== s.dtype || n.dtype !== a.dtype)
    throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${n.dtype}, ${s.dtype}, and ${a.dtype}`);
  let c = w.computeDilation2DInfo(n.shape, s.shape, i, p, "NHWC", u), l = e.makeOutput(n.shape, n.dtype);
  return FO(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(a.dataId).id, e.dataIdMap.get(l.dataId).id, we[n.dtype], c.batchSize, c.inChannels, c.inHeight, c.inWidth, c.outHeight, c.outWidth, c.strideHeight, c.strideWidth, c.dilationHeight, c.dilationWidth, c.filterHeight, c.filterWidth, c.padInfo.top, c.padInfo.left), l;
}
var PO = { kernelName: Bi, backendName: "wasm", setupFunc: Ioe, kernelFunc: voe };
var OO = he(gn);
var MO;
function koe(r) {
  MO = r.wasm.cwrap(Ya, null, ["number", "number", "number"]);
}
function Noe(r) {
  let { inputs: t8, backend: e } = r, { dy: o, y: n } = t8, s = e.makeOutput(n.shape, "float32"), a = (i) => e.dataIdMap.get(i.dataId).id;
  return MO(a(n), a(o), a(s)), s;
}
var LO = { kernelName: Ya, backendName: "wasm", setupFunc: koe, kernelFunc: Noe };
var Toe = false;
var BO = Ue(yn, Toe, "bool");
var zO = he(xn);
var VO = he(bn, "float32");
function Lg(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { input: n } = t8, { dim: s } = e, a = n.shape.length, i = n.shape.slice(), p = s;
  return s < 0 && (y.assert(-(a + 1) <= s, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), p = a + s + 1), i.splice(p, 0, 1), Vt({ inputs: { x: n }, backend: o, attrs: { shape: i } });
}
var WO = { kernelName: na, backendName: "wasm", kernelFunc: Lg };
var UO = he(Cn, "float32");
function Pv(r) {
  let { attrs: { shape: t8, value: e, dtype: o }, backend: n } = r, s = n.makeOutput(t8, o);
  return n.typedArrayFromHeap(s).fill(e), s;
}
var GO = { kernelName: sa, backendName: "wasm", kernelFunc: Pv };
var HO;
function _oe(r) {
  HO = r.wasm.cwrap(wn, null, ["number", "number", "number", "number", "number", "number"]);
}
function $oe(r) {
  let { inputs: t8, backend: e } = r, { image: o } = t8, n = e.makeOutput(o.shape, o.dtype), s = e.dataIdMap.get(o.dataId).id, a = e.dataIdMap.get(n.dataId).id, [i, p, u, c] = o.shape;
  return HO(s, i, p, u, c, a), n;
}
var KO = { kernelName: wn, backendName: "wasm", kernelFunc: $oe, setupFunc: _oe };
var qO = he(Sn);
var Eoe = false;
var jO = Ue(In, Eoe);
var XO;
function Roe(r) {
  XO = r.wasm.cwrap(vn, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function Doe(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { varianceEpsilon: n } = o, { x: s, mean: a, variance: i, offset: p, scale: u } = e, c = t8.dataIdMap.get(s.dataId).id, l = t8.dataIdMap.get(a.dataId).id, m = t8.dataIdMap.get(i.dataId).id, d = p != null ? t8.dataIdMap.get(p.dataId).id : 0, f = u != null ? t8.dataIdMap.get(u.dataId).id : 0, h = t8.makeOutput(s.shape, s.dtype);
  if (y.sizeFromShape(s.shape) === 0)
    return h;
  let g = t8.dataIdMap.get(h.dataId).id;
  return XO(c, l, m, d, f, n, g), h;
}
var YO = { kernelName: vn, backendName: "wasm", setupFunc: Roe, kernelFunc: Doe };
var QO;
function Aoe(r) {
  QO = r.wasm.cwrap(vo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Foe(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = t8, { strides: p, pad: u, dilations: c, dataFormat: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = e, h = w.computeConv2DInfo(n.shape, s.shape, p, c, u, m), g = ku[d];
  if (g == null)
    throw new Error(`${d} activation not yet supported for FusedConv2D in the wasm backend.`);
  let x = o.dataIdMap.get(n.dataId).id, b = o.dataIdMap.get(s.dataId).id, C = h.outChannels, S = 0;
  if (a != null) {
    let ee = o.dataIdMap.get(a.dataId);
    if (ee.shape.length !== 1)
      throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${ee.shape.length}.`);
    if (ee.shape[0] !== C)
      throw new Error(`FusedConv2D bias shape (${ee.shape}) does not match the number of output channels (${C})`);
    S = ee.id;
  }
  let k = h.filterHeight, _ = h.filterWidth, E = h.padInfo.top, R = h.padInfo.right, D = h.padInfo.bottom, P = h.padInfo.left, O = h.dilationHeight, M = h.dilationWidth, L = h.strideHeight, B = h.strideWidth, z = h.inChannels, U = h.padInfo.type === "SAME" ? 1 : 0, j = h.batchSize, q = h.inHeight, Y = h.inWidth;
  if (l !== "NHWC")
    throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${l}'. Please use 'NHWC'.`);
  let J = o.makeOutput(h.outShape, "float32"), re = o.dataIdMap.get(J.dataId).id, ne = i == null ? 0 : o.dataIdMap.get(i.dataId).id;
  return QO(x, j, q, Y, b, k, _, S, E, R, D, P, U, O, M, L, B, z, C, g, ne, f || 0, re), J;
}
var ZO = { kernelName: vo, backendName: "wasm", setupFunc: Aoe, kernelFunc: Foe };
var JO;
function Poe(r) {
  JO = r.wasm.cwrap(ko, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Ooe(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = t8, { strides: p, pad: u, dilations: c, dataFormat: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = e, h = w.computeConv2DInfo(n.shape, s.shape, p, c, u, m, true), g = ku[d];
  if (g == null)
    throw new Error(`${d} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);
  let x = o.dataIdMap.get(n.dataId).id, b = o.dataIdMap.get(s.dataId).id, C = h.outChannels, S = 0;
  if (a != null) {
    let ee = o.dataIdMap.get(a.dataId);
    if (ee.shape.length !== 1)
      throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${ee.shape.length}.`);
    if (ee.shape[0] !== C)
      throw new Error(`FusedDepthwiseConv2D bias shape (${ee.shape}) does not match the number of output channels (${C})`);
    S = ee.id;
  }
  let k = h.filterHeight, _ = h.filterWidth, E = h.padInfo.top, R = h.padInfo.right, D = h.padInfo.bottom, P = h.padInfo.left, O = h.dilationHeight, M = h.dilationWidth, L = h.strideHeight, B = h.strideWidth, z = h.inChannels, U = h.padInfo.type === "SAME" ? 1 : 0, j = h.batchSize, q = h.inHeight, Y = h.inWidth;
  if (l !== "NHWC")
    throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${l}'. Please use 'NHWC'.`);
  let J = o.makeOutput(h.outShape, "float32"), re = o.dataIdMap.get(J.dataId).id, ne = i == null ? 0 : o.dataIdMap.get(i.dataId).id;
  return JO(x, j, q, Y, b, k, _, S, E, R, D, P, U, O, M, L, B, z, C, g, ne, f || 0, re), J;
}
var eM = { kernelName: ko, backendName: "wasm", setupFunc: Poe, kernelFunc: Ooe };
var tM;
function Moe(r) {
  tM = r.wasm.cwrap(kn, null, ["number", "number", "number", "number", "number", "number", "array", "number"]);
}
function Loe(r) {
  let { backend: t8, inputs: e } = r, { params: o, indices: n } = e, [s, a, i, p] = af.prepareAndValidate(o, n), u = t8.makeOutput(s, o.dtype);
  if (a === 0)
    return u;
  let c = n.shape, l = c[c.length - 1], d = t8.dataIdMap.get(o.dataId).id, h = t8.dataIdMap.get(n.dataId).id, g = new Uint8Array(new Int32Array(p).buffer), x = t8.dataIdMap.get(u.dataId).id;
  return tM(d, we[o.dtype], h, a, l, i, g, x), u;
}
var rM = { kernelName: kn, backendName: "wasm", setupFunc: Moe, kernelFunc: Loe };
var oM;
function Boe(r) {
  oM = r.wasm.cwrap("Gather", null, ["number", "number", "array", "number", "number", "number", "array", "number"]);
}
function zoe(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { x: n, indices: s } = e, { axis: a, batchDims: i } = o, p = y.parseAxisParam(a, n.shape)[0], u = t8.readSync(s.dataId), c = n.shape[p];
  for (let D = 0; D < u.length; ++D) {
    let P = u[D];
    y.assert(P <= c - 1 && P >= 0, () => `GatherV2: the index value ${P} is not in [0, ${c - 1}]`);
  }
  let l = w.segment_util.collectGatherOpShapeInfo(n, s, p, i), m = Vt({ inputs: { x: n }, attrs: { shape: [l.batchSize, l.outerSize, l.dimSize, l.sliceSize] }, backend: t8 }), d = y.sizeFromShape(s.shape), f = Vt({ inputs: { x: s }, attrs: { shape: [l.batchSize, d / l.batchSize] }, backend: t8 }), h = [l.batchSize, l.outerSize, d / l.batchSize, l.sliceSize], g = t8.makeOutput(h, n.dtype);
  if (y.sizeFromShape(n.shape) === 0)
    return g;
  let x = m.shape.length - 1, C = t8.dataIdMap.get(m.dataId).id, k = t8.dataIdMap.get(f.dataId).id, _ = t8.dataIdMap.get(g.dataId).id, E = new Uint8Array(new Int32Array(y.computeStrides(m.shape)).buffer), R = new Uint8Array(new Int32Array(y.computeStrides(h)).buffer);
  return oM(C, we[n.dtype], E, x, k, l.batchSize, R, _), t8.disposeData(m.dataId), t8.disposeData(f.dataId), g.shape = l.outputShape, g;
}
var nM = { kernelName: aa, backendName: "wasm", setupFunc: Boe, kernelFunc: zoe };
var Voe = false;
var sM = Ue(Nn, Voe, "bool");
var Woe = false;
var aM = Ue(Tn, Woe, "bool");
var iM = he(_n, "bool");
var uM = he($n, "bool");
var pM = he(En, "bool");
var cM;
function Uoe(r) {
  cM = r.wasm.cwrap(Rn, null, ["number", "number", "number", "number"]);
}
function Goe(r) {
  let { inputs: { x: t8 }, attrs: { alpha: e }, backend: o } = r, n = o.dataIdMap.get(t8.dataId).id, s = o.makeOutput(t8.shape, "float32");
  if (y.sizeFromShape(t8.shape) !== 0) {
    let a = o.dataIdMap.get(s.dataId).id;
    cM(n, we[t8.dtype], e, a);
  }
  return s;
}
var lM = { kernelName: Rn, backendName: "wasm", setupFunc: Uoe, kernelFunc: Goe };
var Hoe = false;
var mM = Ue(Dn, Hoe, "bool");
var Koe = false;
var dM = Ue(An, Koe, "bool");
var fM;
function qoe(r) {
  fM = r.wasm.cwrap(Fn, null, ["number", "number", "number", "number"]);
}
function joe(r) {
  let { attrs: t8, backend: e } = r, { start: o, stop: n, num: s } = t8, a = Math.floor(s), i = e.makeOutput([a], "float32");
  return fM(e.dataIdMap.get(i.dataId).id, o, n, a), i;
}
var hM = { kernelName: Fn, backendName: "wasm", setupFunc: qoe, kernelFunc: joe };
var gM = he(Pn);
var xM = he(On);
var Xoe = false;
var yM = Ue(Mn, Xoe, "bool");
var bM = he(Ln);
var Yoe = false;
var CM = Ue(Bn, Yoe, "bool");
var Qoe = false;
var wM = Ue($0, Qoe, "bool");
var SM;
function Zoe(r) {
  SM = r.wasm.cwrap(zn, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function Joe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { depthRadius: s, bias: a, alpha: i, beta: p } = o;
  if (n.dtype !== "float32")
    throw new Error("LRN error: x must have dtype float32");
  let u = e.makeOutput(n.shape, n.dtype);
  return SM(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(u.dataId).id, n.shape[3], s, a, i, p), u;
}
var IM = { kernelName: zn, backendName: "wasm", setupFunc: Zoe, kernelFunc: Joe };
var vM;
function ene(r) {
  vM = r.wasm.cwrap(Qa, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function tne(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, y: s, dy: a } = t8, { depthRadius: i, bias: p, alpha: u, beta: c } = o;
  if (n.dtype !== "float32" || s.dtype !== "float32" || a.dtype !== "float32")
    throw new Error("LRNGrad error: x, y, and dy must have dtype float32");
  let l = e.makeOutput(n.shape, n.dtype);
  return vM(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(a.dataId).id, e.dataIdMap.get(l.dataId).id, a.shape[3], i, p, u, c), l;
}
var kM = { kernelName: Qa, backendName: "wasm", setupFunc: ene, kernelFunc: tne };
var NM;
function rne(r) {
  NM = r.wasm.cwrap(Vn, null, ["number", "number", "number", "number"]);
}
function one(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { reductionIndices: n, keepDims: s } = o, { x: a } = e, p = t8.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = _r(a, n, t8);
  if (d) {
    let C = t8.dataIdMap.get(c.dataId).id;
    u = c, p = C;
  }
  let f = u.shape.length;
  w.assertAxesAreInnerMostDims("max", l, f);
  let [h, g] = w.computeOutAndReduceShapes(u.shape, l), x = y.sizeFromShape(g), b = t8.makeOutput(h, a.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = t8.dataIdMap.get(b.dataId).id;
    NM(p, we[a.dtype], x, C);
  }
  if (d && t8.disposeData(c.dataId), s) {
    let C = w.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var TM = { kernelName: Vn, backendName: "wasm", setupFunc: rne, kernelFunc: one };
var nne = false;
var _M = Ue(Wn, nne);
var $M;
function sne(r) {
  $M = r.wasm.cwrap(Un, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function ane(r) {
  let { inputs: t8, attrs: e, backend: o } = r, n = t8.x, s = o.dataIdMap.get(n.dataId).id;
  y.assert(n.dtype === "float32", () => `Error in MaxPool: only float32 input is supported. Got ${n.dtype}.`);
  let { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = e, c = w.computePool2DInfo(n.shape, a, i, 1, p, u), l = c.filterHeight, m = c.filterWidth, d = c.padInfo.top, f = c.padInfo.right, h = c.padInfo.bottom, g = c.padInfo.left, x = c.dilationHeight, b = c.dilationWidth, C = c.strideHeight, S = c.strideWidth, k = c.inChannels, _ = c.outChannels;
  if (c.dataFormat !== "channelsLast")
    throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);
  let E = o.makeOutput(c.outShape, "float32"), R = o.dataIdMap.get(E.dataId).id;
  return $M(s, n.shape[0], n.shape[1], n.shape[2], l, m, d, f, h, g, x, b, C, S, k, _, R), E;
}
var EM = { kernelName: Un, backendName: "wasm", setupFunc: sne, kernelFunc: ane };
var RM;
function ine(r) {
  RM = r.wasm.cwrap("MaxPool3D", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function une(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dimRoundingMode: p, dataFormat: u } = o, c = w.computePool3DInfo(n.shape, s, a, 1, i, p, u), l = e.makeOutput(c.outShape, n.dtype);
  return RM(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(l.dataId).id, c.batchSize, c.inChannels, c.inDepth, c.inHeight, c.inWidth, c.outDepth, c.outHeight, c.outWidth, c.strideDepth, c.strideHeight, c.strideWidth, c.dilationDepth, c.dilationHeight, c.dilationWidth, c.effectiveFilterDepth, c.effectiveFilterHeight, c.effectiveFilterWidth, c.padInfo.front, c.padInfo.top, c.padInfo.left), l;
}
var DM = { kernelName: ia, backendName: "wasm", setupFunc: ine, kernelFunc: une };
var AM;
function pne(r) {
  AM = r.wasm.cwrap("MaxPool3DGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function cne(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = o, c = w.computePool3DInfo(s.shape, a, i, 1, p, u), l = e.makeOutput(s.shape, s.dtype);
  return AM(e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(l.dataId).id, c.batchSize, c.inChannels, c.inDepth, c.inHeight, c.inWidth, c.outDepth, c.outHeight, c.outWidth, c.strideDepth, c.strideHeight, c.strideWidth, c.dilationDepth, c.dilationHeight, c.dilationWidth, c.effectiveFilterDepth, c.effectiveFilterHeight, c.effectiveFilterWidth, c.padInfo.front, c.padInfo.top, c.padInfo.left), l;
}
var FM = { kernelName: Ki, backendName: "wasm", setupFunc: pne, kernelFunc: cne };
var PM;
function lne(r) {
  PM = r.wasm.cwrap("MaxPoolGrad", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function mne(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = o, c = w.computePool2DInfo(s.shape, a, i, 1, p, u), l = e.makeOutput(s.shape, s.dtype);
  return PM(e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(l.dataId).id, c.batchSize, c.inChannels, c.inHeight, c.inWidth, c.outHeight, c.outWidth, c.strideHeight, c.strideWidth, c.dilationHeight, c.dilationWidth, c.effectiveFilterHeight, c.effectiveFilterWidth, c.padInfo.top, c.padInfo.left), l;
}
var OM = { kernelName: Hi, backendName: "wasm", setupFunc: lne, kernelFunc: mne };
var MM;
function dne(r) {
  MM = r.wasm.cwrap("MaxPoolWithArgmax", null, ["number", "number", "number", "number", "boolean", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function fne(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, includeBatchInIndex: p } = o;
  y.assert(n.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${n.shape.length}.`);
  let u = [1, 1];
  y.assert(w.eitherStridesOrDilationsAreOne(a, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = w.computePool2DInfo(n.shape, s, a, [1, 1], i), l = e.makeOutput(c.outShape, n.dtype), m = e.makeOutput(c.outShape, "int32");
  return MM(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(l.dataId).id, e.dataIdMap.get(m.dataId).id, we[n.dtype], p, c.batchSize, c.inChannels, c.inHeight, c.inWidth, c.outHeight, c.outWidth, c.strideHeight, c.strideWidth, c.dilationHeight, c.dilationWidth, c.effectiveFilterHeight, c.effectiveFilterWidth, c.padInfo.top, c.padInfo.left), [l, m];
}
var LM = { kernelName: ua, backendName: "wasm", setupFunc: dne, kernelFunc: fne };
var BM;
function hne(r) {
  BM = r.wasm.cwrap(Gn, null, ["number, number, number"]);
}
function gne(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = e, i = t8.dataIdMap.get(a.dataId).id, p = i, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = _r(a, n, t8), f = l;
  if (d) {
    let S = t8.dataIdMap.get(c.dataId).id;
    S !== i && (u = c, p = S, f = w.getInnerMostAxes(f.length, u.shape.length));
  }
  w.assertAxesAreInnerMostDims("mean", f, u.shape.length);
  let [h, g] = w.computeOutAndReduceShapes(u.shape, f), x = y.sizeFromShape(g), b = u;
  u.dtype !== "float32" && (b = Mr({ backend: t8, inputs: { x: u }, attrs: { dtype: "float32" } }), p = t8.dataIdMap.get(b.dataId).id);
  let C = t8.makeOutput(h, "float32");
  if (y.sizeFromShape(u.shape) !== 0) {
    let S = t8.dataIdMap.get(C.dataId).id;
    BM(p, x, S);
  }
  if (d && t8.disposeData(c.dataId), s) {
    let S = w.expandShapeToKeepDim(C.shape, m);
    C.shape = S;
  }
  return u.dtype !== "float32" && t8.disposeData(b.dataId), C;
}
var zM = { kernelName: Gn, backendName: "wasm", setupFunc: hne, kernelFunc: gne };
var VM;
function xne(r) {
  VM = r.wasm.cwrap(Hn, null, ["number", "number", "number", "number"]);
}
function yne(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = e, i = t8.dataIdMap.get(a.dataId).id, p = i, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = _r(a, n, t8);
  if (d) {
    let C = t8.dataIdMap.get(c.dataId).id;
    C !== i && (u = c, p = C);
  }
  let f = u.shape.length;
  w.assertAxesAreInnerMostDims("min", l, f);
  let [h, g] = w.computeOutAndReduceShapes(u.shape, l), x = y.sizeFromShape(g), b = t8.makeOutput(h, u.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = t8.dataIdMap.get(b.dataId).id;
    VM(p, we[a.dtype], x, C);
  }
  if (d && t8.disposeData(c.dataId), s) {
    let C = w.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var WM = { kernelName: Hn, backendName: "wasm", setupFunc: xne, kernelFunc: yne };
var bne = false;
var UM = Ue(Kn, bne);
var Ov;
(function(r) {
  r[r.reflect = 0] = "reflect", r[r.symmetric = 1] = "symmetric";
})(Ov || (Ov = {}));
var GM;
function Cne(r) {
  GM = r.wasm.cwrap(qn, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function wne(r) {
  let { inputs: { x: t8 }, backend: e, attrs: { paddings: o, mode: n } } = r, s = o.map((f, h) => f[0] + t8.shape[h] + f[1]), a = e.dataIdMap.get(t8.dataId).id, i = e.makeOutput(s, t8.dtype), p = e.dataIdMap.get(i.dataId).id, u = new Uint8Array(new Int32Array(t8.shape).buffer), c = o.map((f) => f[0]), l = o.map((f) => f[1]), m = new Uint8Array(new Int32Array(c).buffer), d = new Uint8Array(new Int32Array(l).buffer);
  return GM(a, u, t8.shape.length, we[t8.dtype], m, d, Ov[n], p), i;
}
var HM = { kernelName: qn, backendName: "wasm", kernelFunc: wne, setupFunc: Cne };
var KM;
function Sne(r) {
  KM = r.wasm.cwrap(vs, null, ["number", "number", "number", "number"]);
}
function Mv(r) {
  let { backend: t8, inputs: { logits: e }, attrs: { dim: o } } = r, n = t8.dataIdMap.get(e.dataId).id, s = t8.makeOutput(e.shape, e.dtype), a = t8.dataIdMap.get(s.dataId).id, i = e.shape[o], p = y.sizeFromShape(e.shape) / i;
  return y.sizeFromShape(s.shape) === 0 || KM(n, a, i, p), s;
}
var qM = { kernelName: vs, backendName: "wasm", setupFunc: Sne, kernelFunc: Mv };
var jM;
function Ine(r) {
  jM = r.wasm.cwrap(Xn, null, ["number", "number", "number", "number", "number", "number"]);
}
function vne(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { logits: n } = t8, { numSamples: s, seed: a, normalized: i } = o;
  if (n.dtype !== "float32")
    throw new Error(`Tensor logits must have dtype float32, got ${n.dtype}`);
  let p = i ? n : Mv({ inputs: { logits: n }, backend: e, attrs: { dim: n.shape.length - 1 } }), [u, c] = p.shape, l = e.makeOutput([u, s], "int32");
  return jM(e.dataIdMap.get(p.dataId).id, u, c, s, a, e.dataIdMap.get(l.dataId).id), i || e.disposeData(p.dataId), l;
}
var XM = { kernelName: Xn, backendName: "wasm", setupFunc: Ine, kernelFunc: vne };
var YM = Ue(jn, true);
var kne = true;
var QM = Ue(Yn, kne);
var ZM = he(pa);
function Yc(r, t8) {
  let e = new Int32Array(r.wasm.HEAPU8.buffer, t8, 4), o = e[0], n = e[1], s = e[2], a = e[3];
  return r.wasm._free(t8), { pSelectedIndices: o, selectedSize: n, pSelectedScores: s, pValidOutputs: a };
}
var JM;
function Nne(r) {
  JM = r.wasm.cwrap(Zn, "number", ["number", "number", "number", "number", "number"]);
}
function Tne(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { iouThreshold: n, maxOutputSize: s, scoreThreshold: a } = o, { boxes: i, scores: p } = e, u = t8.dataIdMap.get(i.dataId).id, c = t8.dataIdMap.get(p.dataId).id, l = JM(u, c, s, n, a), { pSelectedIndices: m, selectedSize: d, pSelectedScores: f, pValidOutputs: h } = Yc(t8, l);
  return t8.wasm._free(f), t8.wasm._free(h), t8.makeOutput([d], "int32", m);
}
var eL = { kernelName: Zn, backendName: "wasm", setupFunc: Nne, kernelFunc: Tne };
var tL;
function _ne(r) {
  tL = r.wasm.cwrap(Za, "number", ["number", "number", "number", "number", "number", "bool"]);
}
function $ne(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { iouThreshold: n, maxOutputSize: s, scoreThreshold: a, padToMaxOutputSize: i } = o, { boxes: p, scores: u } = e, c = t8.dataIdMap.get(p.dataId).id, l = t8.dataIdMap.get(u.dataId).id, m = tL(c, l, s, n, a, i), { pSelectedIndices: d, selectedSize: f, pSelectedScores: h, pValidOutputs: g } = Yc(t8, m);
  t8.wasm._free(h);
  let x = t8.makeOutput([f], "int32", d), b = t8.makeOutput([], "int32", g);
  return [x, b];
}
var rL = { kernelName: Za, backendName: "wasm", setupFunc: _ne, kernelFunc: $ne };
var oL;
function Ene(r) {
  oL = r.wasm.cwrap(Jn, "number", ["number", "number", "number", "number", "number", "number"]);
}
function Rne(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { iouThreshold: n, maxOutputSize: s, scoreThreshold: a, softNmsSigma: i } = o, { boxes: p, scores: u } = e, c = t8.dataIdMap.get(p.dataId).id, l = t8.dataIdMap.get(u.dataId).id, m = oL(c, l, s, n, a, i), { pSelectedIndices: d, selectedSize: f, pSelectedScores: h, pValidOutputs: g } = Yc(t8, m);
  t8.wasm._free(g);
  let x = t8.makeOutput([f], "int32", d), b = t8.makeOutput([f], "float32", h);
  return [x, b];
}
var nL = { kernelName: Jn, backendName: "wasm", setupFunc: Ene, kernelFunc: Rne };
var Dne = false;
var sL = Ue(Qn, Dne, "bool");
var aL;
function Ane(r) {
  aL = r.wasm.cwrap(es, null, ["number", "number", "number", "number", "number"]);
}
function Fne(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { indices: n } = t8, { dtype: s, depth: a, onValue: i, offValue: p } = o, u = e.makeOutput([...n.shape, a], s), c = e.dataIdMap.get(u.dataId).id, m = e.dataIdMap.get(n.dataId).id;
  return aL(m, a, i, p, c), u;
}
var iL = { kernelName: es, backendName: "wasm", setupFunc: Ane, kernelFunc: Fne };
function Pne(r) {
  let { inputs: { x: t8 }, backend: e } = r, o = e.makeOutput(t8.shape, t8.dtype);
  return e.typedArrayFromHeap(o).fill(1), o;
}
var uL = { kernelName: ca, backendName: "wasm", kernelFunc: Pne };
function One(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { axis: n } = o;
  if (t8.length === 1)
    return Lg({ inputs: { input: t8[0] }, backend: e, attrs: { dim: n } });
  let s = t8[0].shape, a = t8[0].dtype;
  t8.forEach((c) => {
    y.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), y.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], p = t8.map((c) => {
    let l = Lg({ inputs: { input: c }, backend: e, attrs: { dim: n } });
    return i.push(l), l;
  }), u = Av({ inputs: p, backend: e, attrs: { axis: n } });
  return i.forEach((c) => e.disposeData(c.dataId)), u;
}
var pL = { kernelName: la, backendName: "wasm", kernelFunc: One };
var cL;
function Mne(r) {
  cL = r.wasm.cwrap(ts, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function Lne(r) {
  let { inputs: { x: t8 }, backend: e, attrs: { paddings: o, constantValue: n } } = r, s = o.map((h, g) => h[0] + t8.shape[g] + h[1]);
  if (y.sizeFromShape(t8.shape) === 0)
    return Pv({ backend: e, attrs: { shape: s, value: n, dtype: t8.dtype } });
  let a = e.dataIdMap.get(t8.dataId).id, i = e.makeOutput(s, t8.dtype), u = e.dataIdMap.get(i.dataId).id, c = new Uint8Array(new Int32Array(t8.shape).buffer), l = o.map((h) => h[0]), m = o.map((h) => h[1]), d = new Uint8Array(new Int32Array(l).buffer), f = new Uint8Array(new Int32Array(m).buffer);
  return cL(a, c, t8.shape.length, we[t8.dtype], d, f, n, u), i;
}
var Bg = { kernelName: ts, backendName: "wasm", kernelFunc: Lne, setupFunc: Mne };
var Bne = false;
var lL = Ue(rs, Bne);
var mL;
function zne(r) {
  mL = r.wasm.cwrap(os, null, ["number", "number", "number"]);
}
function Vne(r) {
  let { inputs: t8, backend: e } = r, { x: o, alpha: n } = t8, s = e.dataIdMap.get(o.dataId).id, a = e.dataIdMap.get(n.dataId).id, i = s, p = o, u = p;
  p.dtype !== "float32" && (u = Mr({ backend: e, inputs: { x: o }, attrs: { dtype: "float32" } }), i = e.dataIdMap.get(u.dataId).id);
  let c = e.makeOutput(o.shape, "float32"), l = e.dataIdMap.get(c.dataId).id;
  return mL(i, a, l), p.dtype !== "float32" && e.disposeData(u.dataId), c;
}
var dL = { kernelName: os, backendName: "wasm", setupFunc: zne, kernelFunc: Vne };
var fL;
function Wne(r) {
  fL = r.wasm.cwrap(ns, null, ["number", "number", "number", "number"]);
}
function Une(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = e, i = t8.dataIdMap.get(a.dataId).id, p = i, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = _r(a, n, t8), f = l;
  if (d) {
    let C = t8.dataIdMap.get(c.dataId).id;
    C !== i && (u = c, p = C, f = w.getInnerMostAxes(f.length, u.shape.length));
  }
  w.assertAxesAreInnerMostDims("prod", f, u.shape.length);
  let [h, g] = w.computeOutAndReduceShapes(u.shape, f), x = y.sizeFromShape(g), b = t8.makeOutput(h, u.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = t8.dataIdMap.get(b.dataId).id;
    fL(p, x, we[b.dtype], C);
  }
  if (d && t8.disposeData(c.dataId), s) {
    let C = w.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var hL = { kernelName: ns, backendName: "wasm", setupFunc: Wne, kernelFunc: Une };
var Gne = (r) => {
  let { backend: t8, attrs: e } = r, { start: o, stop: n, step: s, dtype: a } = e, i = fp(o, n, s, a), p = t8.makeOutput([i.length], a);
  return t8.typedArrayFromHeap(p).set(i), p;
};
var gL = { kernelName: ma, backendName: "wasm", kernelFunc: Gne };
var Hne = true;
var xL = Ue(hn, Hne);
var yL = he(ss);
var bL = he(as);
var CL = he(ps);
var wL;
function Kne(r) {
  wL = r.wasm.cwrap(us, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function qne(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { images: n } = e, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, [c, l, m, d] = n.shape, f = [c, p, u, d], h = t8.dataIdMap.get(n.dataId), g;
  h.dtype !== "float32" && (g = Mr({ backend: t8, inputs: { x: n }, attrs: { dtype: "float32" } }), h = t8.dataIdMap.get(g.dataId));
  let x = h.id, b = t8.makeOutput(f, "float32");
  if (y.sizeFromShape(n.shape) === 0)
    return b;
  let C = t8.dataIdMap.get(b.dataId).id;
  return wL(x, c, l, m, d, p, u, s ? 1 : 0, a ? 1 : 0, C), g != null && t8.disposeData(g.dataId), b;
}
var SL = { kernelName: us, backendName: "wasm", setupFunc: Kne, kernelFunc: qne };
var IL;
function jne(r) {
  IL = r.wasm.cwrap(ei, null, ["number", "number", "number", "array", "array", "boolean"]);
}
function Xne(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n, dy: s } = t8, { alignCorners: a } = o, i = e.makeOutput(n.shape, "float32"), p = e.dataIdMap.get(n.dataId), u;
  return p.dtype !== "float32" && (u = Mr({ backend: e, inputs: { x: n }, attrs: { dtype: "float32" } }), p = e.dataIdMap.get(u.dataId)), IL(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(i.dataId).id, new Uint8Array(new Int32Array(n.shape).buffer), new Uint8Array(new Int32Array(s.shape).buffer), a), u != null && e.disposeData(u.dataId), i;
}
var vL = { kernelName: ei, backendName: "wasm", setupFunc: jne, kernelFunc: Xne };
var kL;
function Yne(r) {
  kL = r.wasm.cwrap(is, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Qne(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { images: n } = e, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, [c, l, m, d] = n.shape, f = [c, p, u, d], h = t8.makeOutput(f, "float32");
  if (y.sizeFromShape(n.shape) === 0)
    return h;
  let g = t8.dataIdMap.get(n.dataId), x;
  g.dtype !== "float32" && (x = Mr({ backend: t8, inputs: { x: n }, attrs: { dtype: "float32" } }), g = t8.dataIdMap.get(x.dataId));
  let b = g.id, C = t8.dataIdMap.get(h.dataId).id;
  return kL(b, c, l, m, d, p, u, s ? 1 : 0, a ? 1 : 0, C), x != null && t8.disposeData(x.dataId), h;
}
var NL = { kernelName: is, backendName: "wasm", setupFunc: Yne, kernelFunc: Qne };
var TL;
function Zne(r) {
  TL = r.wasm.cwrap(Ja, null, ["number", "number", "number", "array", "array", "boolean"]);
}
function Jne(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n, dy: s } = t8, { alignCorners: a } = o, i = e.makeOutput(n.shape, "float32"), p = e.dataIdMap.get(n.dataId), u;
  return p.dtype !== "float32" && (u = Mr({ backend: e, inputs: { x: n }, attrs: { dtype: "float32" } }), p = e.dataIdMap.get(u.dataId)), TL(e.dataIdMap.get(n.dataId).id, e.dataIdMap.get(s.dataId).id, e.dataIdMap.get(i.dataId).id, new Uint8Array(new Int32Array(n.shape).buffer), new Uint8Array(new Int32Array(s.shape).buffer), a), u != null && e.disposeData(u.dataId), i;
}
var _L = { kernelName: Ja, backendName: "wasm", setupFunc: Zne, kernelFunc: Jne };
var $L;
function ese(r) {
  $L = r.wasm.cwrap(cs, null, ["number", "array", "number", "array", "number", "number"]);
}
function tse(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { dims: s } = o, a = y.parseAxisParam(s, n.shape);
  if (n.shape.length === 0)
    return Dp({ inputs: { x: n }, backend: e });
  let i = e.makeOutput(n.shape, n.dtype), p = e.dataIdMap.get(n.dataId).id, u = e.dataIdMap.get(i.dataId).id, c = new Uint8Array(new Int32Array(a).buffer), l = new Uint8Array(new Int32Array(n.shape).buffer);
  $L(p, c, a.length, l, n.shape.length, u);
  let m = Vt({ inputs: { x: i }, attrs: { shape: n.shape }, backend: e });
  return e.disposeData(i.dataId), m;
}
var EL = { kernelName: cs, backendName: "wasm", kernelFunc: tse, setupFunc: ese };
var RL;
function rse(r) {
  RL = r.wasm.cwrap(As, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function ose(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { image: n } = t8, { radians: s, fillValue: a, center: i } = o, p = e.makeOutput(n.shape, n.dtype), u = e.dataIdMap.get(n.dataId).id, c = e.dataIdMap.get(p.dataId).id, [l, m, d, f] = n.shape, [h, g] = w.getImageCenter(i, m, d), x = a === 0, b = 255, C = typeof a == "number" ? [a, a, a, x ? 0 : b] : [...a, b], S = new Uint8Array(new Int32Array(C).buffer);
  return RL(u, l, m, d, f, s, h, g, S, C.length, c), p;
}
var DL = { kernelName: As, backendName: "wasm", kernelFunc: ose, setupFunc: rse };
var AL = he(ls);
var FL = he(ms);
var PL;
function nse(r) {
  PL = r.wasm.cwrap(ds, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function sse(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { indices: n, updates: s } = e, { shape: a } = o, i = t8.makeOutput(a, s.dtype);
  if (y.sizeFromShape(a) === 0)
    return i;
  let { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = hu.calculateShapes(s, n, a), f = t8.dataIdMap.get(n.dataId).id, g = t8.dataIdMap.get(s.dataId).id, x = new Uint8Array(new Int32Array(l).buffer), b = t8.dataIdMap.get(i.dataId).id;
  return PL(f, g, we[s.dtype], p, u, c, x, m, b), i;
}
var OL = { kernelName: ds, backendName: "wasm", setupFunc: nse, kernelFunc: sse };
var ML;
function ase(r) {
  ML = r.wasm.cwrap(hs, null, ["number", "number", "number", "number", "number", "number", "bool", "number"]);
}
function ise(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { sortedSequence: n, values: s } = t8, { side: a } = o;
  if (n.dtype !== s.dtype)
    throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${n.dtype} and ${s.dtype}`);
  let i = e.makeOutput(s.shape, "int32");
  function p(u) {
    return e.dataIdMap.get(u.dataId).id;
  }
  return ML(p(n), p(s), n.shape[0], n.shape[1], s.shape[1], we[n.dtype], a === "left", p(i)), i;
}
var LL = { kernelName: hs, backendName: "wasm", setupFunc: ase, kernelFunc: ise };
var BL;
function use(r) {
  BL = r.wasm.cwrap("SelectV2", null, ["number", "number", "number", "number", "number"]);
}
function pse(r) {
  let { inputs: t8, backend: e } = r, { condition: o, t: n, e: s } = t8, a = e.dataIdMap.get(o.dataId).id, i = e.dataIdMap.get(n.dataId).id, p = e.dataIdMap.get(s.dataId).id, u = e.makeOutput(n.shape, n.dtype), c = e.dataIdMap.get(u.dataId).id, l = o.shape.length, m = n.shape.length, d = l === 0 || l > 1 || m === 1 ? 1 : y.sizeFromShape(n.shape.slice(1));
  return BL(a, i, p, d, c), u;
}
var zL = { kernelName: fa, backendName: "wasm", kernelFunc: pse, setupFunc: use };
var VL = he(gs);
var WL;
function cse(r) {
  WL = r.wasm.cwrap(Cs, null, ["number", "number"]);
}
function lse(r) {
  let { backend: t8, inputs: { x: e } } = r, o = t8.dataIdMap.get(e.dataId).id, n = t8.makeOutput(e.shape, e.dtype), s = t8.dataIdMap.get(n.dataId).id;
  return y.sizeFromShape(n.shape) === 0 || WL(o, s), n;
}
var UL = { kernelName: "Sigmoid", backendName: "wasm", setupFunc: cse, kernelFunc: lse };
var GL = he(bs);
var HL = he(xs);
var KL = he(ys);
var qL = he(ws);
function mse(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockShape: s, paddings: a } = o, i = y.sizeFromShape(s), p = [[0, 0]];
  p.push(...a);
  for (let _ = 1 + s.length; _ < n.shape.length; ++_)
    p.push([0, 0]);
  let u = Bg.kernelFunc({ inputs: { x: n }, backend: e, attrs: { paddings: p, constantValue: 0 } }), c = w.getReshaped(u.shape, s, i, false), l = w.getPermuted(c.length, s.length, false), m = w.getReshapedPermuted(u.shape, s, i, false), h = Vt({ inputs: { x: u }, backend: e, attrs: { shape: c } }), b = go({ inputs: { x: h }, backend: e, attrs: { perm: l } }), k = Vt({ inputs: { x: b }, backend: e, attrs: { shape: m } });
  return e.disposeData(u.dataId), e.disposeData(h.dataId), e.disposeData(b.dataId), k;
}
var jL = { kernelName: ga, backendName: "wasm", kernelFunc: mse };
var XL;
function dse(r) {
  XL = r.wasm.cwrap("SparseFillEmptyRows", "number", ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function fse(r) {
  let { backend: t8, inputs: e } = r, { indices: o, values: n, denseShape: s, defaultValue: a } = e, i = o.shape[0], p = o.shape[1], u = t8.readSync(s.dataId)[0], c = [i + u, p], l = t8.dataIdMap.get(o.dataId).id, m = t8.dataIdMap.get(n.dataId).id, d = t8.dataIdMap.get(a.dataId).id, f = t8.makeOutput(c, o.dtype), h = t8.dataIdMap.get(f.dataId).id, g = t8.makeOutput(c.slice(0, 1), n.dtype), x = t8.dataIdMap.get(g.dataId).id, b = t8.makeOutput([u], "bool"), C = t8.dataIdMap.get(b.dataId).id, S = t8.makeOutput([i], o.dtype), k = t8.dataIdMap.get(S.dataId).id, _ = t8.makeOutput([4], "int32"), E = t8.dataIdMap.get(_.dataId).id, R = XL(l, m, we[n.dtype], i, u, p, d, h, x, C, k, E), D = t8.readSync(_.dataId), P;
  switch (D[0]) {
    case 1: {
      P = w.getSparseFillEmptyRowsIndicesDenseShapeMismatch(D[1]);
      break;
    }
    case 2: {
      P = w.getSparseFillEmptyRowsNegativeIndexErrorMessage(D[1], D[2]);
      break;
    }
    case 3:
      P = w.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(D[1], D[2], D[3]);
      break;
    default:
      P = "";
  }
  if (t8.disposeData(_.dataId), P)
    throw t8.disposeData(f.dataId), t8.disposeData(g.dataId), t8.disposeData(b.dataId), t8.disposeData(S.dataId), new Error(P);
  let O = f, M = g;
  return R !== c[0] && (O = Oo({ inputs: { x: f }, attrs: { begin: 0, size: [R, p] }, backend: t8 }), M = Oo({ inputs: { x: g }, attrs: { begin: 0, size: R }, backend: t8 }), t8.disposeData(f.dataId), t8.disposeData(g.dataId)), [O, M, b, S];
}
var YL = { kernelName: ji, backendName: "wasm", setupFunc: dse, kernelFunc: fse };
var QL;
function hse(r) {
  QL = r.wasm.cwrap(ti, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function gse(r) {
  let { backend: t8, inputs: e } = r, { inputIndices: o, inputShape: n, newShape: s } = e;
  if (o.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let a = t8.dataIdMap.get(o.dataId).id, i = t8.dataIdMap.get(n.dataId).id, p = t8.dataIdMap.get(s.dataId).id, u = o.shape[0], c = y.sizeFromShape(s.shape), l = t8.makeOutput([u, c], o.dtype), m = t8.dataIdMap.get(l.dataId).id, d = t8.makeOutput([c], s.dtype), f = t8.dataIdMap.get(d.dataId).id, h = t8.makeOutput([3], "int32"), g = t8.dataIdMap.get(h.dataId).id;
  QL(a, i, p, u, m, f, g);
  let x = t8.readSync(h.dataId), b;
  switch (x[0]) {
    case 0: {
      b = w.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(x[1], x[2]);
      break;
    }
    case 1: {
      b = w.getSparseReshapeNegativeOutputDimErrorMessage(x[1], x[2]);
      break;
    }
    case 2:
      b = w.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();
      break;
    case 3: {
      let C = Array.from(t8.readSync(n.dataId)), S = Array.from(t8.readSync(d.dataId));
      b = w.getSparseReshapeInputOutputMultipleErrorMessage(C, S);
      break;
    }
    case 4: {
      let C = Array.from(t8.readSync(n.dataId)), S = Array.from(t8.readSync(d.dataId));
      b = w.getSparseReshapeInputOutputMismatchErrorMessage(C, S);
      break;
    }
    default:
      b = "";
  }
  if (t8.disposeData(h.dataId), b)
    throw t8.disposeData(l.dataId), t8.disposeData(d.dataId), new Error(b);
  return [l, d];
}
var ZL = { kernelName: ti, backendName: "wasm", setupFunc: hse, kernelFunc: gse };
var JL;
function zg(r) {
  JL = r.wasm.cwrap("SparseSegmentReduction", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Vg(r, t8) {
  let { backend: e, inputs: o } = r, { data: n, indices: s, segmentIds: a } = o, i = s.shape[0], p = e.readSync(a.dataId, i - 1, i)[0], c = i > 0 ? p + 1 : 0;
  if (c < 0)
    throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let l = n.shape.slice();
  l[0] = c;
  let m = e.dataIdMap.get(n.dataId).id, d = e.dataIdMap.get(s.dataId).id, f = e.dataIdMap.get(a.dataId).id, h = e.makeOutput(l, n.dtype), g = e.dataIdMap.get(h.dataId).id, x = e.makeOutput([4], "int32"), b = e.dataIdMap.get(x.dataId).id;
  JL(m, we[n.dtype], n.shape[0], d, f, g, b, t8, 0);
  let C = e.readSync(x.dataId), S;
  switch (C[0]) {
    case 0: {
      S = w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();
      break;
    }
    case 1: {
      S = w.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();
      break;
    }
    case 2:
      S = w.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(C[1], C[2]);
      break;
    case 3:
      S = w.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C[1], C[2], C[3]);
      break;
    default:
      S = "";
  }
  if (e.disposeData(x.dataId), S)
    throw e.disposeData(h.dataId), new Error(S);
  return h;
}
function xse(r) {
  return Vg(r, true);
}
var eB = { kernelName: ya, backendName: "wasm", setupFunc: zg, kernelFunc: xse };
function yse(r) {
  return Vg(r, false);
}
var tB = { kernelName: ba, backendName: "wasm", setupFunc: zg, kernelFunc: yse };
var rB;
function bse(r) {
  rB = r.wasm.cwrap(ks, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function Cse(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { sparseIndices: n, sparseValues: s, defaultValue: a } = e, { outputShape: i } = o, p = t8.makeOutput(i, a.dtype);
  if (y.sizeFromShape(i) === 0)
    return p;
  let { sliceRank: u, numUpdates: c, sliceSize: l, strides: m, outputSize: d } = w.calculateShapes(s, n, i), f = t8.dataIdMap.get(n.dataId).id, h = t8.dataIdMap.get(s.dataId).id, g = t8.dataIdMap.get(a.dataId).id, x = new Uint8Array(new Int32Array(m).buffer), b = t8.dataIdMap.get(p.dataId).id;
  return rB(f, h, s.shape.length, g, we[a.dtype], u, c, l, x, d, b), p;
}
var oB = { kernelName: ks, backendName: "wasm", setupFunc: bse, kernelFunc: Cse };
function wse(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { x: n } = t8, { numOrSizeSplits: s, axis: a } = e, i = y.parseAxisParam(a, n.shape)[0], p = w.prepareSplitSize(n, s, i), u = new Array(n.shape.length).fill(0), c = n.shape.slice();
  return p.map((l) => {
    let m = [...c];
    m[i] = l;
    let d = Oo({ inputs: { x: n }, attrs: { begin: u, size: m }, backend: o });
    return u[i] += l, d;
  });
}
var nB = { kernelName: xa, backendName: "wasm", kernelFunc: wse };
var sB = he(Ss);
var aB = he(Xi);
var Sse = true;
var iB = Ue(Ns, Sse);
var uB;
function Ise(r) {
  uB = r.wasm.cwrap(So, null, ["number", "number", "number", "number"]);
}
function vse(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { alpha: n } = o, { x: s } = e, a = t8.dataIdMap.get(s.dataId).id, i = t8.makeOutput(s.shape, s.dtype), p = t8.dataIdMap.get(i.dataId).id;
  return uB(a, n, we[s.dtype], p), i;
}
var pB = { kernelName: So, backendName: "wasm", setupFunc: Ise, kernelFunc: vse };
var cB;
function kse(r) {
  cB = r.wasm.cwrap(Ts, null, ["number", "array", "number", "array", "array", "array", "array", "array", "number", "number"]);
}
function Nse(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { x: n } = e, { begin: s, end: a, strides: i, beginMask: p, endMask: u, ellipsisMask: c, newAxisMask: l, shrinkAxisMask: m } = o, { finalShapeSparse: d, finalShape: f, isIdentity: h, sliceDim0: g, isSimpleSlice: x, begin: b, end: C, strides: S } = ct.sliceInfo(n.shape, s, a, i, p, u, c, l, m), k;
  if (h)
    k = Vt({ inputs: { x: n }, backend: t8, attrs: { shape: f } });
  else if (g || x) {
    y.assert(n.shape.length >= 1, () => `Input must have rank at least 1, got: ${n.shape.length}`);
    let _ = ct.computeOutShape(b, C, S), E = Oo({ inputs: { x: n }, backend: t8, attrs: { begin: b, size: _ } });
    k = Vt({ inputs: { x: E }, backend: t8, attrs: { shape: f } }), t8.disposeData(E.dataId);
  } else {
    let _ = t8.makeOutput(d, "float32"), E = t8.dataIdMap.get(n.dataId).id, R = new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer), D = new Uint8Array(new Int32Array(b).buffer), P = new Uint8Array(new Int32Array(C).buffer), O = new Uint8Array(new Int32Array(S).buffer), M = new Uint8Array(new Int32Array(d).buffer), L = new Uint8Array(new Int32Array(y.computeStrides(d)).buffer), B = t8.dataIdMap.get(_.dataId).id;
    cB(E, R, n.shape.length, D, P, O, M, L, d.length, B), k = Vt({ inputs: { x: _ }, backend: t8, attrs: { shape: f } }), t8.disposeData(_.dataId);
  }
  return k;
}
var lB = { kernelName: Ts, backendName: "wasm", setupFunc: kse, kernelFunc: Nse };
function Tse(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { data: n, dataSplits: s } = e, { separator: a, nGramWidths: i, leftPad: p, rightPad: u, padWidth: c, preserveShortSequences: l } = o, m = t8.readSync(n.dataId), d = t8.readSync(s.dataId), [f, h] = gp(m, d, a, i, p, u, c, l), g = t8.makeOutput([f.length], "string"), x = t8.dataIdMap.get(g.dataId);
  x.stringBytes = f;
  let b = t8.makeOutput(s.shape, "int32");
  return t8.typedArrayFromHeap(b).set(h), [g, b];
}
var mB = { kernelName: Ca, backendName: "wasm", kernelFunc: Tse };
function _se(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { input: n, delimiter: s } = e, { skipEmpty: a } = o, i = t8.readSync(n.dataId), p = t8.readSync(s.dataId), [u, c, l] = xp(i, p[0], a), m = c.length, d = t8.makeOutput([m, 2], "int32");
  t8.typedArrayFromHeap(d).set(u);
  let h = t8.makeOutput([m], "string"), g = t8.dataIdMap.get(h.dataId);
  g.stringBytes = c;
  let x = t8.makeOutput([2], "int32");
  return t8.typedArrayFromHeap(x).set(l), [d, h, x];
}
var dB = { kernelName: Yi, backendName: "wasm", kernelFunc: _se };
function $se(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { input: n } = e, { numBuckets: s } = o, a = t8.readSync(n.dataId), i = yp(a, s), p = t8.makeOutput(n.shape, "int32");
  return t8.typedArrayFromHeap(p).set(i), p;
}
var fB = { kernelName: Qi, backendName: "wasm", kernelFunc: $se };
var Ese = true;
var hB = Ue(_s, Ese);
var gB;
function Rse(r) {
  gB = r.wasm.cwrap(Is, null, ["number", "number", "number", "number"]);
}
function Dse(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = e, i = t8.dataIdMap.get(a.dataId).id, p = i, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = _r(a, n, t8), f = l;
  if (d) {
    let C = t8.dataIdMap.get(c.dataId).id;
    C !== i && (u = c, p = C, f = w.getInnerMostAxes(f.length, u.shape.length));
  }
  w.assertAxesAreInnerMostDims("sum", f, u.shape.length);
  let [h, g] = w.computeOutAndReduceShapes(u.shape, f), x = y.sizeFromShape(g), b = t8.makeOutput(h, u.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = t8.dataIdMap.get(b.dataId).id;
    gB(p, x, we[b.dtype], C);
  }
  if (d && t8.disposeData(c.dataId), s) {
    let C = w.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var xB = { kernelName: Is, backendName: "wasm", setupFunc: Rse, kernelFunc: Dse };
var yB = he($s);
var bB = he(Es);
var CB;
function Ase(r) {
  CB = r.wasm.cwrap(fs, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number", "number"]);
}
function Fse(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { tensor: n, indices: s, updates: a } = e, {} = o, i = t8.makeOutput(n.shape, n.dtype);
  if (y.sizeFromShape(n.shape) === 0)
    return i;
  let { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = hu.calculateShapes(a, s, n.shape), f = t8.dataIdMap.get(s.dataId).id, g = t8.dataIdMap.get(a.dataId).id, b = t8.dataIdMap.get(n.dataId).id, C = new Uint8Array(new Int32Array(l).buffer), S = t8.dataIdMap.get(i.dataId).id;
  return CB(f, g, we[a.dtype], p, u, c, C, m, S, b), i;
}
var wB = { kernelName: fs, backendName: "wasm", setupFunc: Ase, kernelFunc: Fse };
var SB;
function Pse(r) {
  SB = r.wasm.cwrap(po, null, ["number", "array", "number", "array", "number", "number"]);
}
function Ose(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, s = e.dataIdMap.get(n.dataId).id, { reps: a } = o, i = new Array(n.shape.length);
  for (let m = 0; m < i.length; m++)
    i[m] = n.shape[m] * a[m];
  let p = new Uint8Array(new Int32Array(n.shape).buffer), u = new Uint8Array(new Int32Array(i).buffer), c = e.makeOutput(i, n.dtype), l = e.dataIdMap.get(c.dataId).id;
  return SB(s, p, n.shape.length, u, i.length, we[c.dtype], l), c;
}
var IB = { kernelName: po, backendName: "wasm", setupFunc: Pse, kernelFunc: Ose };
var vB;
function Mse(r) {
  vB = r.wasm.cwrap(Rs, null, ["number", "array", "number", "number", "number", "bool", "number", "number"]);
}
var Lse = ({ inputs: r, backend: t8, attrs: e }) => {
  let { x: o } = r, { k: n, sorted: s } = e, a = t8.dataIdMap.get(o.dataId).id, i = new Uint8Array(new Int32Array(o.shape).buffer), p = o.shape.slice();
  p[p.length - 1] = n;
  let u = t8.makeOutput(p, o.dtype), c = t8.dataIdMap.get(u.dataId).id, l = t8.makeOutput(p, "int32"), m = t8.dataIdMap.get(l.dataId).id;
  return vB(a, i, o.shape.length, we[o.dtype], n, s, c, m), [u, l];
};
var kB = { kernelName: Rs, backendName: "wasm", setupFunc: Mse, kernelFunc: Lse };
var NB;
function Bse(r) {
  NB = r.wasm.cwrap(Ds, null, ["number", "number", "bool", "number", "number", "number", "number", "number", "number", "array", "number", "array", "number", "number", "number", "number", "number"]);
}
function zse(r) {
  let { backend: t8, inputs: e, attrs: o } = r, { image: n, transforms: s } = e, { interpolation: a, fillMode: i, fillValue: p, outputShape: u } = o, [c, l, m, d] = n.shape, [f, h] = u != null ? u : [l, m], g = [c, f, h, d], x = new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer), b = new Uint8Array(new Int32Array(y.computeStrides(g)).buffer), C = t8.makeOutput(g, n.dtype), S = t8.dataIdMap.get(C.dataId).id, _ = t8.dataIdMap.get(n.dataId).id, R = t8.dataIdMap.get(s.dataId).id, D = a === "nearest" ? 1 : 2, P;
  switch (i) {
    case "constant":
      P = 1;
      break;
    case "reflect":
      P = 2;
      break;
    case "wrap":
      P = 3;
      break;
    case "nearest":
      P = 4;
      break;
    default:
      P = 1;
      break;
  }
  return NB(_, R, s.shape[0] > 1, c, f, h, d, m, l, x, n.shape.length - 1, b, g.length - 1, D, P, p, S), C;
}
var TB = { kernelName: Ds, backendName: "wasm", setupFunc: Bse, kernelFunc: zse };
function Vse(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { axis: n } = e, { x: s } = t8, { outputValues: a, outputShape: i, indices: p } = bp(o.readSync(s.dataId), n, s.shape, s.dtype);
  return [o.makeOutput(i, s.dtype, void 0, a), o.makeOutput([p.length], "int32", void 0, p)];
}
var _B = { kernelName: Zi, backendName: "wasm", kernelFunc: Vse };
function Wse(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { value: n } = t8, { axis: s } = o;
  s < 0 && (s += n.shape.length);
  let a = n.shape[s], i = n.shape.length, p = new Array(i - 1), u = 0;
  for (let d = 0; d < i; d++)
    d !== s && (p[u++] = n.shape[d]);
  let c = new Array(a), l = new Array(i).fill(0), m = n.shape.slice();
  m[s] = 1;
  for (let d = 0; d < c.length; d++)
    l[s] = d, c[d] = Oo({ inputs: { x: n }, attrs: { begin: l, size: m }, backend: e });
  return c.map(({ dataId: d, dtype: f }) => ({ dataId: d, dtype: f, shape: p }));
}
var $B = { kernelName: wa, backendName: "wasm", kernelFunc: Wse };
function Use(r) {
  let { inputs: { x: t8 }, backend: e } = r, o = e.makeOutput(t8.shape, t8.dtype);
  return e.typedArrayFromHeap(o).fill(0), o;
}
var EB = { kernelName: Sa, backendName: "wasm", kernelFunc: Use };
var Gse = [hP, gP, xP, yP, bP, wP, NP, _P, $P, EP, RP, DP, AP, FP, PP, MP, UP, BP, VP, KP, jP, YP, QP, ZP, JP, eO, rO, oO, sO, iO, pO, lO, dO, fO, hO, xO, bO, wO, IO, kO, TO, $O, RO, AO, PO, OO, LO, BO, zO, VO, WO, UO, GO, KO, qO, jO, YO, ZO, eM, rM, nM, sM, aM, SP, iM, uM, pM, lM, mM, dM, hM, xM, gM, yM, bM, CM, wM, IM, kM, TM, _M, EM, DM, FM, OM, LM, zM, WM, UM, HM, XM, YM, QM, ZM, eL, rL, nL, sL, iL, uL, pL, Bg, lL, dL, hL, gL, xL, yL, bL, CL, GP, SL, vL, NL, _L, EL, DL, AL, FL, OL, LL, zL, VL, UL, GL, HL, KL, qP, qM, qL, jL, YL, ZL, eB, tB, oB, nB, sB, aB, iB, pB, lB, mB, dB, fB, hB, xB, yB, bB, wB, IB, kB, TB, vP, _B, $B, EB];
for (let r of Gse)
  ri(r);
var Lv = A();
Lv.registerFlag("WASM_HAS_SIMD_SUPPORT", async () => {
  try {
    return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]));
  } catch (r) {
    return false;
  }
});
Lv.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT", async () => {
  if (Lv.get("IS_NODE"))
    return false;
  try {
    return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
  } catch (r) {
    return false;
  }
});
var Kv = Kp(FB());
var zB = Kp(OB());
var qv = Kp(MB());
var LB = Kv.default || Kv;
var Hse = qv.default || qv;
var pm = class extends ao {
  constructor(t8) {
    super(), this.wasm = t8, this.dataIdNextNumber = 1, this.wasm.tfjs.initWithThreadsCount(WB), Hv = this.wasm.tfjs.getThreadsCount(), this.dataIdMap = new zo(this, pr());
  }
  write(t8, e, o) {
    let n = { id: this.dataIdNextNumber++ };
    return this.move(n, t8, e, o, 1), n;
  }
  numDataIds() {
    return this.dataIdMap.numDataIds();
  }
  async time(t8) {
    let e = y.now();
    return t8(), { kernelMs: y.now() - e };
  }
  move(t8, e, o, n, s) {
    let a = this.dataIdNextNumber++;
    if (n === "string") {
      let c = e;
      this.dataIdMap.set(t8, { id: a, stringBytes: c, shape: o, dtype: n, memoryOffset: null, refCount: s });
      return;
    }
    let i = y.sizeFromShape(o), p = i * y.bytesPerElement(n), u = this.wasm._malloc(p) >>> 0;
    this.dataIdMap.set(t8, { id: a, memoryOffset: u, shape: o, dtype: n, refCount: s }), this.wasm.tfjs.registerTensor(a, i, u), e != null && this.wasm.HEAPU8.set(new Uint8Array(e.buffer, e.byteOffset, p), u);
  }
  async read(t8) {
    return this.readSync(t8);
  }
  readSync(t8, e, o) {
    let { memoryOffset: n, dtype: s, shape: a, stringBytes: i } = this.dataIdMap.get(t8);
    if (s === "string")
      return (e == null || e === 0) && (o == null || o >= i.length) ? i : i.slice(e, o);
    e = e || 0, o = o || y.sizeFromShape(a);
    let p = y.bytesPerElement(s), u = this.wasm.HEAPU8.slice(n + e * p, n + o * p);
    return qse(u.buffer, s);
  }
  disposeData(t8, e = false) {
    if (this.dataIdMap.has(t8)) {
      let o = this.dataIdMap.get(t8);
      if (o.refCount--, !e && o.refCount > 0)
        return false;
      this.wasm._free(o.memoryOffset), this.wasm.tfjs.disposeData(o.id), this.dataIdMap.delete(t8);
    }
    return true;
  }
  refCount(t8) {
    return this.dataIdMap.has(t8) ? this.dataIdMap.get(t8).refCount : 0;
  }
  incRef(t8) {
    let e = this.dataIdMap.get(t8);
    e != null && e.refCount++;
  }
  floatPrecision() {
    return 32;
  }
  getMemoryOffset(t8) {
    return this.dataIdMap.get(t8).memoryOffset;
  }
  dispose() {
    this.wasm.tfjs.dispose(), "PThread" in this.wasm && this.wasm.PThread.terminateAllThreads(), this.wasm = null;
  }
  memory() {
    return { unreliable: false };
  }
  makeOutput(t8, e, o, n) {
    let s;
    if (o == null)
      s = this.write(n != null ? n : null, t8, e);
    else {
      let a = this.dataIdNextNumber++;
      s = { id: a }, this.dataIdMap.set(s, { id: a, memoryOffset: o, shape: t8, dtype: e, refCount: 1 });
      let i = y.sizeFromShape(t8);
      this.wasm.tfjs.registerTensor(a, i, o);
    }
    return { dataId: s, shape: t8, dtype: e };
  }
  typedArrayFromHeap({ shape: t8, dtype: e, dataId: o }) {
    let n = this.wasm.HEAPU8.buffer, { memoryOffset: s } = this.dataIdMap.get(o), a = y.sizeFromShape(t8);
    switch (e) {
      case "float32":
        return new Float32Array(n, s, a);
      case "int32":
        return new Int32Array(n, s, a);
      case "bool":
        return new Uint8Array(n, s, a);
      default:
        throw new Error(`Unknown dtype ${e}`);
    }
  }
};
function Kse(r) {
  return (t8, e) => (y.fetch(r, { credentials: "same-origin" }).then((o) => {
    o.ok || t8.env.a(`failed to load wasm binary file at '${r}'`), o.arrayBuffer().then((n) => {
      WebAssembly.instantiate(n, t8).then((s) => {
        e(s.instance, s.module);
      });
    });
  }), {});
}
function BB(r, t8, e) {
  if (Gg != null)
    return Gg;
  let o = "tfjs-backend-wasm.wasm";
  return r && t8 ? o = "tfjs-backend-wasm-threaded-simd.wasm" : r && (o = "tfjs-backend-wasm-simd.wasm"), im != null && im[o] != null ? im[o] : e + o;
}
async function VB() {
  let [r, t8] = await Promise.all([A().getAsync("WASM_HAS_SIMD_SUPPORT"), A().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);
  return new Promise((e, o) => {
    let n = {};
    n.locateFile = (i, p) => {
      if (i.endsWith(".worker.js")) {
        let u = zB.wasmWorkerContents.replace(/\n/g, "\\n"), c = new Blob([u], { type: "application/javascript" });
        return URL.createObjectURL(c);
      }
      return i.endsWith(".wasm") ? BB(r, t8, am != null ? am : p) : p + i;
    }, jv && (n.instantiateWasm = Kse(BB(r, t8, am != null ? am : "")));
    let s = false;
    n.onAbort = () => {
      if (s || um)
        return;
      um = true, o({ message: "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers" });
    };
    let a;
    t8 && r && Gg == null ? (n.mainScriptUrlOrBlob = new Blob(["var WasmBackendModuleThreadedSimd = " + LB.toString()], { type: "text/javascript" }), a = LB(n)) : a = Hse(n), a.then((i) => {
      s = true, um = false;
      let p = null;
      i.tfjs = { init: i.cwrap("init", null, []), initWithThreadsCount: i.cwrap("init_with_threads_count", null, ["number"]), getThreadsCount: i.cwrap("get_threads_count", "number", []), registerTensor: i.cwrap("register_tensor", null, ["number", "number", "number"]), disposeData: i.cwrap("dispose_data", p, ["number"]), dispose: i.cwrap("dispose", p, []) }, e({ wasm: i });
    }).catch(o);
  });
}
function qse(r, t8) {
  switch (t8) {
    case "float32":
      return new Float32Array(r);
    case "int32":
      return new Int32Array(r);
    case "bool":
      return new Uint8Array(r);
    default:
      throw new Error(`Unknown dtype ${t8}`);
  }
}
var jse = ["tfjs-backend-wasm.wasm", "tfjs-backend-wasm-simd.wasm", "tfjs-backend-wasm-threaded-simd.wasm"];
var Gg = null;
var am = null;
var im = {};
var um = false;
var jv = false;
function Xse(r, t8 = false) {
  if (Pw("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."), um)
    throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");
  Gg = r, jv = t8;
}
function Yse(r, t8 = false) {
  if (um)
    throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");
  if (typeof r == "string")
    am = r;
  else {
    im = r;
    let e = jse.filter((o) => im[o] == null);
    if (e.length > 0)
      throw new Error(`There were no entries found for the following binaries: ${e.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`);
  }
  jv = t8;
}
var WB = -1;
var Hv = -1;
function Qse(r) {
  WB = r;
}
function Zse() {
  if (Hv === -1)
    throw new Error("WASM backend not initialized.");
  return Hv;
}
var Jse = "4.11.0";
var eae = 2;
su("wasm", async () => {
  let { wasm: r } = await VB();
  return new pm(r);
}, eae);
var xo = A();
xo.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE", () => 15);
xo.registerFlag("WEBGPU_CPU_FORWARD", () => true);
xo.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE", () => -1);
xo.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE", () => true);
xo.registerFlag("WEBGPU_USE_LOW_POWER_GPU", () => false);
xo.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e3);
xo.registerFlag("WEBGPU_USE_PROFILE_TOOL", () => false);
xo.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE", () => true);
xo.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG", () => false);
xo.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL", () => -1);
xo.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER", () => false);
xo.registerFlag("WEBGPU_PRINT_SHADER", () => "");
xo.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY", () => false);
var Hg = class {
  constructor(t8) {
    t8 && (this.vendor = t8.vendor, this.architecture = t8.architecture, this.intelGPUGeneration = this.getIntelGPUGeneration());
  }
  getIntelGPUGeneration() {
    if (this.isIntel()) {
      if (this.architecture.startsWith("gen"))
        return Number(this.architecture.match(/\d+/));
      if (this.architecture.startsWith("xe"))
        return 12;
    }
    return 0;
  }
  isIntel() {
    return this.vendor === "intel";
  }
};
var Kg = class {
  constructor(t8) {
    this.device = t8, this.numUsedBuffers = 0, this.numFreeBuffers = 0, this.freeBuffers = /* @__PURE__ */ new Map(), this.usedBuffers = /* @__PURE__ */ new Map(), this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
  acquireBuffer(t8, e, o = false, n = true) {
    let s, a = UB(t8, e);
    return n ? (this.freeBuffers.has(a) || this.freeBuffers.set(a, []), this.freeBuffers.get(a).length > 0 ? (s = this.freeBuffers.get(a).pop(), this.numFreeBuffers--) : (s = this.device.createBuffer({ size: t8, usage: e, mappedAtCreation: o }), this.numBytesAllocated += t8)) : (s = this.device.createBuffer({ size: t8, usage: e, mappedAtCreation: o }), this.numBytesAllocated += t8), this.usedBuffers.has(a) || this.usedBuffers.set(a, []), this.usedBuffers.get(a).push(s), this.numUsedBuffers++, this.numBytesUsed += t8, s;
  }
  releaseBuffer(t8, e = true) {
    if (this.freeBuffers.size === 0)
      return;
    let o = t8.size, n = t8.usage, s = UB(o, n), a = this.usedBuffers.get(s), i = a.indexOf(t8);
    if (i < 0)
      throw new Error("Cannot find the buffer in buffer manager");
    a[i] = a[a.length - 1], a.pop(), this.numUsedBuffers--, this.numBytesUsed -= o, e ? (this.freeBuffers.get(s).push(t8), this.numFreeBuffers++) : (t8.destroy(), this.numBytesAllocated -= o);
  }
  getNumUsedBuffers() {
    return this.numUsedBuffers;
  }
  getNumFreeBuffers() {
    return this.numFreeBuffers;
  }
  dispose() {
    this.freeBuffers.forEach((t8, e) => {
      t8.forEach((o) => {
        o.destroy();
      });
    }), this.usedBuffers.forEach((t8, e) => {
      t8.forEach((o) => {
        o.destroy();
      });
    }), this.freeBuffers = /* @__PURE__ */ new Map(), this.usedBuffers = /* @__PURE__ */ new Map(), this.numUsedBuffers = 0, this.numFreeBuffers = 0, this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
};
function UB(r, t8) {
  return `${r}_${t8}`;
}
var qg = class {
  constructor(t8) {
    this.device = t8, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = /* @__PURE__ */ new Map(), this.usedTextures = /* @__PURE__ */ new Map(), this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
  acquireTexture(t8, e, o, n) {
    let s = HB(o), a = t8 * e * s, i = GB(t8, e, o, n);
    if (this.freeTextures.has(i) || this.freeTextures.set(i, []), this.usedTextures.has(i) || this.usedTextures.set(i, []), this.numBytesUsed += a, this.numUsedTextures++, this.freeTextures.get(i).length > 0) {
      this.numFreeTextures--;
      let u = this.freeTextures.get(i).shift();
      return this.usedTextures.get(i).push(u), u;
    }
    this.numBytesAllocated += a;
    let p = this.device.createTexture({ size: [t8, e], format: o, usage: n });
    return this.usedTextures.get(i).push(p), p;
  }
  releaseTexture(t8) {
    if (this.freeTextures.size === 0)
      return;
    let e = t8.width, o = t8.height, n = t8.format, s = t8.usage, a = GB(e, o, n, s);
    this.freeTextures.has(a) || this.freeTextures.set(a, []), this.freeTextures.get(a).push(t8), this.numFreeTextures++, this.numUsedTextures--;
    let i = this.usedTextures.get(a), p = i.indexOf(t8);
    if (p < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    i.splice(p, 1);
    let u = HB(n), c = e * o * u;
    this.numBytesUsed -= c;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    this.freeTextures.forEach((t8, e) => {
      t8.forEach((o) => {
        o.destroy();
      });
    }), this.usedTextures.forEach((t8, e) => {
      t8.forEach((o) => {
        o.destroy();
      });
    }), this.freeTextures = /* @__PURE__ */ new Map(), this.usedTextures = /* @__PURE__ */ new Map(), this.numUsedTextures = 0, this.numFreeTextures = 0, this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
};
function GB(r, t8, e, o) {
  return `${r}_${t8}_${e}_${o}`;
}
function HB(r) {
  if (r === "rgba8unorm")
    return 16;
  throw new Error(`${r} is not supported!`);
}
function KB(r, t8) {
  if (Math.max(...r) > 5)
    throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");
  let e = r.length, o = "xyzwuv", n = r.map((a) => `${t8}.${o[a]}`), s = new Array(e - 1);
  s[e - 2] = n[e - 1];
  for (let a = e - 3; a >= 0; --a)
    s[a] = `(${s[a + 1]} * ${n[a + 1]})`;
  return s;
}
var Qr = (r, t8, e) => e === "int32" ? `atomicAdd(${r}, bitcast<i32>(${t8}));` : `
          {
            var oldValue = 0;
            loop {
              let newValueF32 = bitcast<f32>(oldValue) + (${t8});
              let newValue = bitcast<i32>(newValueF32);
              let res = atomicCompareExchangeWeak(${r}, oldValue, newValue);
              if res.exchanged {
                break;
              }
              oldValue = res.old_value;
            }
          }`;
var Ii;
(function(r) {
  r[r.FROM_PIXELS = 0] = "FROM_PIXELS", r[r.DRAW = 1] = "DRAW";
})(Ii || (Ii = {}));
var YB = (r, t8, e, o, n) => {
  let s = { dtype: o.dtype, shape: o.shape }, a = rae(e, s, t8), i = r.createShaderModule({ code: a, label: t8.constructor.name }), p = A().get("WEBGPU_PRINT_SHADER");
  if (p !== "") {
    p = p.toLowerCase();
    let u = p.split(",");
    (p === "all" || u.some((c) => t8.shaderKey.toLowerCase().includes(c))) && (console.group(t8.shaderKey), console.debug(a), console.groupEnd());
  }
  return n ? r.createComputePipelineAsync({ compute: { module: i, entryPoint: "_start" }, label: t8.constructor.name, layout: "auto" }) : r.createComputePipeline({ compute: { module: i, entryPoint: "_start" }, label: t8.constructor.name, layout: "auto" });
};
var Ae = (r, t8 = "f32") => {
  switch (r) {
    case 1:
      return `${t8}`;
    case 2:
      return `vec2<${t8}>`;
    case 3:
      return `vec3<${t8}>`;
    case 4:
      return `vec4<${t8}>`;
    default:
      throw new Error(`${r}-component ${t8} is not supported.`);
  }
};
function ht(r) {
  if (r <= 1)
    return "i32";
  if (r === 2)
    return "vec2<i32>";
  if (r === 3)
    return "vec3<i32>";
  if (r === 4)
    return "vec4<i32>";
  if (r === 5)
    return "vec5";
  if (r === 6)
    return "vec6";
  throw Error(`GPU for rank ${r} is not yet supported`);
}
function Mo(r) {
  if (r === 0)
    return "x";
  if (r === 1)
    return "y";
  if (r === 2)
    return "z";
  if (r === 3)
    return "w";
  if (r === 4)
    return "u";
  if (r === 5)
    return "v";
  throw Error(`Index ${r} is not yet supported`);
}
function G(...r) {
  let t8;
  switch (r.length) {
    case 0:
      t8 = `
        fn main()
      `;
      break;
    case 1:
      t8 = `
        fn main(${r[0]} : i32)
      `;
      break;
    default:
      throw Error("Unreachable");
  }
  return t8;
}
function qB(r, t8) {
  let e;
  return e = `
     ${tae(t8)}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(workgroup_id) WorkgroupId : vec3<u32>,
                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
        localId = LocalId;
        localIndex = LocalIndex;
        globalId = GlobalId;
        numWorkgroups = NumWorkgroups;
        workgroupId = WorkgroupId;
        ${r ? "main(getGlobalIndex());" : "main();"};
      }
    `, e;
}
function tae(r) {
  return `
  @compute @workgroup_size(${r.workgroupSize[0]}, ${r.workgroupSize[1]}, ${r.workgroupSize[2]})
`;
}
function rae(r, t8, e) {
  let o = [], n = e.workgroupSize[0] * e.workgroupSize[1] * e.workgroupSize[2];
  if (e.outputComponent = e.outputComponent ? e.outputComponent : 1, o.push(`

      var<private> localId: vec3<u32>;
      var<private> localIndex: u32;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;
      var<private> workgroupId: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${ZB(e) ? "  return i32(globalId.x);" : `  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +
                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${n}u +
                localIndex);
        `}
      }
    `), e.pixelsOpType != null) {
    let f = e.pixelsOpType === Ii.FROM_PIXELS ? `@group(0) @binding(0) var<storage, read_write> result: array<${Nu(t8.dtype, e.outputComponent)}>;` : `@group(0) @binding(1) var<storage, read> inBuf : array<${Nu(r[0].dtype, e.outputComponent)}>;`, h = t8.shape.length === 3 ? "vec2<i32>" : "i32";
    o.push(`
        struct Uniform {
          outShapeStrides : ${h},
          size            : i32,
          numChannels     : i32,
          alpha           : f32,
        };

        ${f}
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `);
    let g = XB(e);
    return [jB, o.join(`
`), cm(t8.shape), e.getUserCode(), qB(g, e)].join(`
`);
  }
  let s, a, i = "struct Uniforms { NAN : f32, INFINITY : f32, ";
  e.variableNames.forEach((f, h) => {
    let g = ht(r[h].shape.length);
    i += `${f.charAt(0).toLowerCase() + f.slice(1)}Shape : ${g}, `, s = r[h].shape.length - 1, a = ht(s), i += `${f.charAt(0).toLowerCase() + f.slice(1)}ShapeStrides: ${a}, `;
  });
  let p = ht(t8.shape.length);
  i += `outShape : ${p}, `, s = t8.shape.length - 1, a = ht(s), i += `
         outShapeStrides: ${a}, `, e.size && (i += "size : i32, "), e.uniforms && (i += e.uniforms), i += "};", i = cae(i), o.push(i), e.atomic ? o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `) : o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${Nu(t8.dtype, e.outputComponent)}>;
    `), e.variableNames.forEach((f, h) => {
    o.push(`
      @group(0) @binding(${1 + h}) var<storage, read> ${f}: array<${e.variableComponents ? Nu(r[h].dtype, e.variableComponents[h]) : Nu(r[h].dtype, e.outputComponent)}>;
        `);
  }), i !== "" && o.push(`
      @group(0) @binding(${1 + e.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);
  let u = iae(t8.shape, e.dispatchLayout), c = [jB, o.join(`
`) + oae, cm(t8.shape), u, uae(t8.shape.length)];
  e.atomic || c.push(pae(t8.shape, t8.dtype, e.outputComponent)), e.variableNames.forEach((f, h) => {
    c.push(`${cm(r[h].shape, f)}`);
  });
  let l = r.map((f, h) => aae(f, t8.shape, e.variableComponents ? e.variableComponents[h] : e.outputComponent, e.dispatchLayout.x.length === t8.shape.length)).join(`
`);
  c.push(l), c.push(e.getUserCode());
  let m = XB(e);
  return c.push(qB(m, e)), c.join(`
`);
}
function QB(r, t8, e) {
  let o = r.shaderKey;
  if (r.pixelsOpType != null)
    return o;
  let n = [], s = [];
  t8.forEach((c) => {
    n.push(c.shape), s.push(c.dtype);
  }), n.push(e.shape), s.push(e.dtype);
  let a = t8.map((c) => w.getBroadcastDims(c.shape, e.shape)), i = t8.map((c) => y.arraysEqual(c.shape, e.shape)).join("_"), p = a.map((c) => c.join("_")).join(";"), u = ZB(r) ? "flatDispatch" : "";
  return o += "_" + (r.workgroupSize ? r.workgroupSize.join(",") : "") + n.map((c) => c.length).join(",") + s.join(",") + r.variableNames.join(",") + p + i + u, o;
}
var jB = `
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);
    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);
  }
`;
var oae = `
  fn isinf(val: f32) -> bool {
    return abs(val) == uniforms.INFINITY;
  }
`;
function cm(r, t8 = "") {
  let e = r.length, o = t8 !== "" ? `get${t8.charAt(0).toUpperCase() + t8.slice(1)}CoordsFromIndex` : "getCoordsFromIndex", n = t8 !== "" ? `${t8.charAt(0).toLowerCase() + t8.slice(1)}ShapeStrides` : "outShapeStrides";
  if (e <= 1)
    return `fn ${o}(index : i32) -> i32 { return index; }`;
  let s = y.computeStrides(r), a = ht(e), i = [];
  for (let u = 0; u < e; u++)
    i.push(`d${u}`);
  if (s.length === 1)
    return `    fn ${o}(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.${n}; let d1 = index - d0 * uniforms.${n};
      return vec2<i32>(d0, d1);
    }`;
  let p;
  return p = "var index2 = index;" + s.map((u, c) => {
    let l = `let ${i[c]} = index2 / uniforms.${n}.${Mo(c)}`, m = c === s.length - 1 ? `let ${i[c + 1]} = index2 - ${i[c]} * uniforms.${n}.${Mo(c)}` : `index2 = index2 - ${i[c]} * uniforms.${n}.${Mo(c)}`;
    return `${l}; ${m};`;
  }).join(""), `
    fn ${o}(index : i32) -> ${a} {
      ${p}
      return ${a}(${i.join(",")});
    }
  `;
}
function nae(r, t8) {
  let e = r.name, o = r.shape.length, n = ht(o), s = "get" + e.charAt(0).toUpperCase() + e.slice(1), a = ["d0", "d1", "d2", "d3", "d4", "d5"].slice(0, o), i = a.map((c) => `${c} : i32`).join(", ");
  if (o < 1)
    return `
      fn ${s}() -> ${Ae(t8)} {
        return ${Ae(t8)}(${e}[0]);
      }
    `;
  let p = `uniforms.${e.charAt(0).toLowerCase() + e.slice(1)}Shape`, u = `${o}D`;
  return o === 0 && (u = "1D"), `
    fn ${s}(${i}) -> ${Ae(t8)} {
      return ${Ae(t8)}(${e}[getIndexFromCoords${u}(${n}(${a.join(",")}),
        ${p})${t8 === 1 ? "" : ` / ${t8}`}]);
    }
   `;
}
function sae(r, t8, e, o) {
  let n = r.name, s = n.charAt(0).toUpperCase() + n.slice(1), a = "get" + s + "ByOutput", i = r.shape.length, p = t8.length, u = ht(p);
  if (y.arraysEqual(r.shape, t8) && o)
    return `
    fn ${a}Index(globalIndex : i32) -> ${Ae(e)} {
      return ${Ae(e)}(${n}[globalIndex]);
    }

    fn ${a}Coords(coords : ${u}) -> ${Ae(e)} {
      return ${Ae(e)}(${n}[${p > 1 ? "getOutputIndexFromCoords(coords)" : "coords"}${e === 1 ? "" : ` / ${e}`}]);
    }
    `;
  let c = w.getBroadcastDims(r.shape, t8), l = p - i, m = "";
  if (i === 0)
    return `
    fn ${a}Index(globalIndex : i32) -> ${Ae(e)}{
      return get${s}();
    }

    fn ${a}Coords(coords : ${u}) -> ${Ae(e)}{
      return get${s}();
    }
  `;
  p < 2 && c.length >= 1 ? m = "coords = 0;" : m = c.map((g) => `coords.${Mo(g + l)} = 0;`).join(`
`);
  let d = "";
  if (p < 2 && i > 0)
    d = "coords";
  else if (p > 1) {
    let g = ht(i), x = r.shape.map((b, C) => `coords.${Mo(C + l)}`).join(", ");
    d = `${g}(${x})`;
  } else
    d = "coords";
  let f = `uniforms.${n.charAt(0).toLowerCase() + n.slice(1)}Shape`, h = `${i}D`;
  return `
  fn ${a}Index(globalIndex : i32) -> ${Ae(e)} {
    var coords = getCoordsFromIndex(globalIndex);
    ${m}
    return ${Ae(e)}(${n}[getIndexFromCoords${h}(${d}, ${f})${e === 1 ? "" : ` / ${e}`}]);
  }

  fn ${a}Coords(coordsIn : ${u}) -> ${Ae(e)} {
    var coords = coordsIn;
    ${m}
    return ${Ae(e)}(${n}[getIndexFromCoords${h}(${d}, ${f})${e === 1 ? "" : ` / ${e}`}]);
  }
`;
}
function aae(r, t8, e, o) {
  let n = nae(r, e);
  return r.shape.length <= t8.length && (n += sae(r, t8, e, o)), n;
}
function iae(r, t8) {
  let { x: e, y: o = [], z: n = [] } = t8, s = r.length, a = e.length + o.length + n.length;
  if (a !== s)
    return "";
  if (e.length === s)
    return `fn getOutputCoords() -> ${ht(s)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;
  let i = "", p = [e, o, n];
  for (let m = 0; m < p.length; m++) {
    let d = p[m];
    if (d.length !== 0)
      if (d.length === 1)
        i += `let d${d[0]} = i32(globalId[${m}]);`;
      else {
        let f = KB(d, "uniforms.outShape");
        i += `var index${m} = i32(globalId[${m}]);`;
        for (let h = 0; h < f.length; h++)
          i += `let d${d[h]} = index${m} / ${f[h]};`, h === f.length - 1 ? i += `let d${d[h + 1]} = index${m} - d${d[h]} * ${f[h]};` : i += `index${m} = index${m} - d${d[h]} * ${f[h]};`;
      }
  }
  let u = [];
  for (let m = 0; m < a; m++)
    u.push(`d${m}`);
  let c = ht(a), l = `fn getOutputCoords() -> ${c} {
  ${i}
`;
  return u.length === 0 ? l += `return ${c}(0); }` : l += `return ${c}(${u.join(",")}); }`, l;
}
function uae(r) {
  let t8 = "";
  switch (r) {
    case 0:
    case 1:
      t8 += `
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;
      break;
    case 2:
      t8 += `
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;
      break;
    case 3:
      t8 += `
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;
      break;
    case 4:
      t8 += `
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;
      break;
    case 5:
      t8 += `
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;
      break;
    case 6:
      t8 += `
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;
      break;
    default:
      y.assert(false, () => `Unsupported ${r}D shape`);
      break;
  }
  return t8;
}
function ZB(r) {
  return r.dispatch[1] === 1 && r.dispatch[2] === 1;
}
function Nu(r, t8 = 1) {
  if (r === "float32")
    return Ae(t8, "f32");
  if (r === "int32" || r === "bool")
    return Ae(t8, "i32");
  throw new Error(`type ${r} is not supported.`);
}
function pae(r, t8, e) {
  let o = r.length, n = Nu(t8, e), s = `fn setOutputAtIndex(flatIndex : i32, value : ${Ae(e)}) {
      result[flatIndex] = ${n}(value);
    }

    fn setOutputAtIndexI32(flatIndex : i32, value : ${Ae(e, "i32")}) {
      result[flatIndex] = ${n}(value);
    }
    `;
  if (o >= 2) {
    let a = ["d0", "d1", "d2", "d3", "d4", "d5"].slice(0, o), i = ht(o);
    s += `
      fn setOutputAtCoords(${a.map((p) => `${p} : i32`).join(", ")}, value : ${Ae(e)}) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndex(flatIndex${e === 1 ? "" : ` / ${e}`}, value);
      }
      fn setOutputAtCoordsI32(${a.map((p) => `${p} : i32`).join(", ")}, value : ${Ae(e, "i32")}) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndexI32(flatIndex${e === 1 ? "" : ` / ${e}`}, value);
      }
    `;
  }
  return s;
}
function cae(r) {
  let t8 = /(\w+)\s*:\s*vec(5|6)/g;
  r = r.replace(t8, (o) => "@align(16) " + o);
  let e = /vec(5|6)\s*,\s*(\w+)/g;
  return r = r.replace(e, (o, n, s) => `vec${n}, @align(16) ${s}`), r;
}
function XB(r) {
  return !(r.dispatchLayout.hasOwnProperty("y") && r.dispatchLayout.y.length !== 0 || r.dispatchLayout.hasOwnProperty("z") && r.dispatchLayout.z.length !== 0);
}
var Yv = {};
qe(Yv, { GPUBytesPerElement: () => jg, MatMulProgramType: () => Lo, assertNotComplex: () => fm, computeDispatch: () => H, computeWorkPerThreadForConv2d: () => mm, computeWorkgroupInfoForMatMul: () => Xv, computeWorkgroupSizeForConv2d: () => lm, flatDispatchLayout: () => X, isWebGPUSupported: () => dm, tilesFitEvenlyIntoShape: () => mae });
var Ap = (r) => {
  let t8 = 1;
  for (let e = 0; e < r.length; e++)
    t8 *= r[e];
  return t8;
};
function mae(r, t8) {
  if (r.length !== t8.length)
    throw new Error(`Cannot compute whether rank ${r.length} tiles fit evenly into rank ${t8.length} shape - ranks must match.`);
  return t8.every((e, o) => e % r[o] === 0);
}
function H(r, t8, e = [1, 1, 1], o = [1, 1, 1]) {
  let [n, s, a] = [Math.ceil(Ap(r.x.map((i) => t8[i])) / (e[0] * o[0])), r.y ? Math.ceil(Ap(r.y.map((i) => t8[i])) / (e[1] * o[1])) : 1, r.z ? Math.ceil(Ap(r.z.map((i) => t8[i])) / (e[2] * o[2])) : 1];
  return [n, s, a];
}
function Xv(r, t8, e, o = false) {
  let n = [8, 8, 1], s = [4, 4, 1];
  return o || (r <= 8 && (s[1] = 1), t8 <= 16 && e <= 16 && (n[0] = 4)), { workgroupSize: n, elementsPerThread: s };
}
function lm(r, t8, e = false) {
  if (e)
    return [8, 8, 1];
  let o = Ap(r.x.map((s) => t8[s])), n = Ap(r.y.map((s) => t8[s]));
  return o <= 4 ? [4, 16, 1] : n <= 4 ? [16, 4, 1] : [16, 16, 1];
}
function mm(r, t8, e = false) {
  if (e)
    return [4, 4, 1];
  let o = Ap(r.x.map((s) => t8[s])), n = Ap(r.y.map((s) => t8[s]));
  return o <= 4 ? [1, 2, 1] : n <= 4 ? [2, 1, 1] : [2, 2, 1];
}
function X(r) {
  return { x: r.map((t8, e) => e) };
}
function jg(r) {
  if (r === "float32" || r === "int32" || r === "bool" || r === "string")
    return 4;
  if (r === "complex64")
    return 8;
  throw new Error(`Unknown dtype ${r}`);
}
function dm() {
  return (typeof window != "undefined" || typeof WorkerGlobalScope != "undefined") && !!navigator.gpu;
}
function fm(r, t8) {
  Array.isArray(r) || (r = [r]), r.forEach((e) => {
    e != null && y.assert(e.dtype !== "complex64", () => `${t8} does not support complex64 tensors in the WebGPU backend.`);
  });
}
var Lo;
(function(r) {
  r[r.MatMulReduceProgram = 0] = "MatMulReduceProgram", r[r.MatMulSplitKProgram = 1] = "MatMulSplitKProgram", r[r.MatMulSmallOutputSizeProgram = 2] = "MatMulSmallOutputSizeProgram", r[r.MatMulPackedProgram = 3] = "MatMulPackedProgram", r[r.MatMulMax = 4] = "MatMulMax";
})(Lo || (Lo = {}));
var dae = A().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");
var fae = (r, t8) => {
  let e = r.limits.maxComputeWorkgroupsPerDimension, o = t8.dispatchLayout, n = t8.dispatch;
  if (n.every((a) => a <= e))
    return n;
  y.assert(n[0] > e && o.y === void 0 && o.z === void 0, () => "Dispatch size exceeds WebGPU limits in Y or Z dimension.");
  let s = Math.ceil(Math.sqrt(n[0]));
  return s > e ? (s = Math.ceil(Math.cbrt(n[0])), y.assert(s <= e, () => "Total dispatch size exceeds WebGPU maximum."), [s, s, s]) : [s, s, 1];
};
var Tu = class extends ao {
  nextDataId() {
    return Tu.nextDataId++;
  }
  constructor(t8, e) {
    if (super(), this.commandQueueOwnedIds = /* @__PURE__ */ new WeakSet(), this.dispatchCountInPass = 0, this.disposed = false, this.downloadWaitMs = 0, this.tensorDataPendingDisposal = [], this.queryResolveBuffer = null, this.querySet = null, this.querySetCount = 2, this.stagingPendingDisposal = [], this.uniformPendingDisposal = [], this.uploadWaitMs = 0, this.hasReadSyncWarned = false, this.hasTimestampQueryWarned = false, !dm())
      throw new Error("WebGPU is not supported on this device");
    this.pipelineCache = {}, this.device = t8, this.queue = t8.queue, this.commandEncoder = null, this.computePassEncoder = null, this.adapterInfo = new Hg(e), this.supportTimestampQuery = this.device.features.has("timestamp-query"), this.thresholdToIncreaseWorkgroups = this.adapterInfo.intelGPUGeneration >= 12 ? 16 : 8, this.bufferManager = new Kg(this.device), this.textureManager = new qg(this.device), this.tensorMap = new zo(this, pr()), A().getBool("WEBGPU_USE_PROFILE_TOOL") && (this.dummyCanvas = document.createElement("canvas"), this.dummyCanvas.width = 1, this.dummyCanvas.height = 1, this.dummyContext = this.dummyCanvas.getContext("webgpu"), this.dummyContext.configure({ device: t8, format: "bgra8unorm" }), document.body.appendChild(this.dummyCanvas));
  }
  floatPrecision() {
    return 32;
  }
  disposeData(t8, e = false) {
    if (!this.tensorMap.has(t8))
      return true;
    let o = this.tensorMap.get(t8);
    return e ? o.refCount = 0 : o.refCount--, o.refCount > 0 ? false : (o.complexTensorInfos != null && (this.disposeData(o.complexTensorInfos.real.dataId), this.disposeData(o.complexTensorInfos.imag.dataId)), this.commandQueueOwnedIds.has(t8) ? (this.tensorDataPendingDisposal.push(t8), true) : (this.releaseResource(t8), this.tensorMap.delete(t8), true));
  }
  memory() {
    return { numBytesInGPU: this.bufferManager.numBytesUsed, numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated, unreliable: false };
  }
  releaseResource(t8) {
    let e = this.tensorMap.get(t8);
    if (!(!e || !e.resource)) {
      if (e.external) {
        e.resource = null;
        return;
      }
      e.resource instanceof GPUBuffer ? this.bufferManager.releaseBuffer(e.resource) : e.resource instanceof GPUTexture && this.textureManager.releaseTexture(e.resource), e.resource = null;
    }
  }
  refCount(t8) {
    return this.tensorMap.has(t8) ? this.tensorMap.get(t8).refCount : 0;
  }
  incRef(t8) {
    let e = this.tensorMap.get(t8);
    e.refCount++;
  }
  decRef(t8) {
    if (this.tensorMap.has(t8)) {
      let e = this.tensorMap.get(t8);
      e.refCount--;
    }
  }
  write(t8, e, o) {
    if (o === "complex64" && t8 != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let n = { id: this.nextDataId() };
    return this.tensorMap.set(n, { dtype: o, shape: e, values: t8, refCount: 1 }), n;
  }
  move(t8, e, o, n, s) {
    if (n === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.tensorMap.set(t8, { dtype: n, shape: o, values: e, refCount: s });
  }
  submitQueue() {
    this.queue.submit([this.commandEncoder.finish()]), this.commandEncoder = null, this.dispatchCountInPass = 0, this.commandQueueOwnedIds = /* @__PURE__ */ new WeakSet(), this.tensorDataPendingDisposal.forEach((t8) => {
      this.releaseResource(t8), this.tensorMap.delete(t8);
    }), this.uniformPendingDisposal.forEach((t8) => this.bufferManager.releaseBuffer(t8)), this.stagingPendingDisposal.forEach((t8) => this.bufferManager.releaseBuffer(t8, false)), this.tensorDataPendingDisposal = [], this.uniformPendingDisposal = [], this.stagingPendingDisposal = [];
  }
  ensureCommandEncoderReady() {
    this.commandEncoder || (this.commandEncoder = this.device.createCommandEncoder());
  }
  endComputePassEncoder() {
    this.computePassEncoder && (this.computePassEncoder.end(), this.computePassEncoder = null);
  }
  async checkCompileCompletionAsync() {
    let t8;
    try {
      t8 = await Promise.all(Object.values(this.pipelineCache));
    } catch (e) {
      throw new Error(e.message);
    }
    Object.keys(this.pipelineCache).map((e, o) => {
      this.pipelineCache[e] = t8[o];
    });
  }
  async getBufferData(t8) {
    if (A().getBool("WEBGPU_ENGINE_COMPILE_ONLY"))
      return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"), null;
    let e = t8.size, o = this.bufferManager.acquireBuffer(e, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);
    this.ensureCommandEncoderReady(), this.endComputePassEncoder(), this.commandEncoder.copyBufferToBuffer(t8, 0, o, 0, e), this.submitQueue(), await o.mapAsync(GPUMapMode.READ);
    let n = o.getMappedRange().slice(0);
    return o.unmap(), o != null && this.bufferManager.releaseBuffer(o), A().getBool("WEBGPU_USE_PROFILE_TOOL") && (y.assert(this.dummyContext !== void 0, () => "Fail to get context for profiling tool"), this.dummyContext.getCurrentTexture()), n;
  }
  convertAndCacheOnCPU(t8, e) {
    let o = this.tensorMap.get(t8);
    return o.values = e, o.values;
  }
  readSync(t8) {
    let e = this.tensorMap.get(t8), { values: o, complexTensorInfos: n } = e;
    if (o != null || e.dtype === "string")
      return o;
    if (e.dtype === "complex64") {
      let h = this.readSync(n.real.dataId), g = this.readSync(n.imag.dataId), x = y.convertBackendValuesAndArrayBuffer(w.mergeRealAndImagArrays(h, g).buffer, "float32");
      return this.convertAndCacheOnCPU(t8, x), x;
    }
    this.hasReadSyncWarned || (this.hasReadSyncWarned = true, console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));
    let s = ["opaque", "premultiplied"], a = e.resource, i = a.size;
    y.assert(i % 4 === 0, () => "Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");
    let p = i / 4, u = new ArrayBuffer(i), c = 256, l = 256, m = s.map((h) => new OffscreenCanvas(c, l)), d = new OffscreenCanvas(c, l);
    this.endComputePassEncoder(), m.map((h, g) => {
      let x = h.getContext("webgpu");
      return x.configure({ device: this.device, format: "bgra8unorm", usage: GPUTextureUsage.COPY_DST, alphaMode: s[g] }), x.getCurrentTexture();
    }).map((h, g) => {
      let x = c * 4, b = (R, D, P) => {
        this.ensureCommandEncoderReady(), this.commandEncoder.copyBufferToTexture({ buffer: a, bytesPerRow: x, offset: P }, { texture: h }, { width: R, height: D }), this.submitQueue();
        let O = d.getContext("2d", { willReadFrequently: true });
        O.clearRect(0, 0, R, D), O.drawImage(m[g], 0, 0);
        let M = O.getImageData(0, 0, R, D).data, L = s[g], B = new Uint8ClampedArray(u, P, R * D * 4);
        for (let z = 0; z < B.length; z += 4)
          if (L === "premultiplied")
            B[z + 3] = M[z + 3];
          else {
            let U = M[z];
            B[z] = M[z + 2], B[z + 1] = M[z + 1], B[z + 2] = U;
          }
      }, C = Math.floor(p / (c * l)), S = c, k = l, _ = 0;
      for (let R = 0; R < C; R++)
        b(S, k, _), _ += c * l * 4;
      let E = p % (c * l);
      k = Math.floor(E / c), k > 0 && (b(S, k, _), _ += k * (c * 4)), S = E % c, S > 0 && b(S, 1, _);
    });
    let f = y.convertBackendValuesAndArrayBuffer(u, e.dtype);
    return this.convertAndCacheOnCPU(t8, f), f;
  }
  async read(t8) {
    if (!this.tensorMap.has(t8))
      throw new Error(`Tensor ${t8} was not registered!`);
    let e = this.tensorMap.get(t8), { values: o } = e;
    if (o != null)
      return o;
    let n;
    if (e.dtype === "complex64") {
      let s = await Promise.all([this.read(e.complexTensorInfos.real.dataId), this.read(e.complexTensorInfos.imag.dataId)]), a = s[0], i = s[1];
      n = w.mergeRealAndImagArrays(a, i);
    } else {
      let s = await this.getBufferData(e.resource);
      n = y.convertBackendValuesAndArrayBuffer(s, e.dtype);
    }
    return this.convertAndCacheOnCPU(t8, n), n;
  }
  copyBuffer(t8) {
    let e = t8.size, o = t8.usage, n = this.bufferManager.acquireBuffer(e, o);
    return this.ensureCommandEncoderReady(), this.endComputePassEncoder(), this.commandEncoder.copyBufferToBuffer(t8, 0, n, 0, e), this.submitQueue(), n;
  }
  createTensorFromGPUData(t8, e, o) {
    let n = t8.buffer;
    if (o === "complex64")
      throw new Error("Cannot write to a complex64 dtype. ");
    let s = { id: this.nextDataId() };
    this.tensorMap.set(s, { dtype: o, shape: e, values: null, refCount: 1, external: t8.zeroCopy });
    let a = this.tensorMap.get(s), i = jg(a.dtype) * y.sizeFromShape(a.shape);
    if (t8.buffer.size < i)
      throw new Error(`GPUBuffer size(${t8.buffer.size}) is smaller than tensor size(${i})!`);
    if ((t8.buffer.usage & (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) !== (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC))
      throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");
    return t8.zeroCopy !== true && (n = this.copyBuffer(n)), a.resource = n, pr().makeTensorFromDataId(s, e, o, this);
  }
  readToGPU(t8) {
    let e = this.tensorMap.get(t8), { values: o, dtype: n, shape: s, resource: a } = e;
    if (n === "complex64")
      throw new Error("Does not support reading buffer for complex64 dtype.");
    if (a == null)
      throw o != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    let i = a, p = i.size, u = i.usage, c = this.bufferManager.acquireBuffer(p, u);
    this.ensureCommandEncoderReady(), this.endComputePassEncoder(), this.commandEncoder.copyBufferToBuffer(a, 0, c, 0, p), this.submitQueue();
    let l = this.makeTensorInfo(s, n), m = pr().makeTensorFromTensorInfo(l), d = this.tensorMap.get(l.dataId);
    return d.resource = c, { tensorRef: m, buffer: c };
  }
  bufferSync(t8) {
    let e = this.readSync(t8.dataId);
    if (t8.dtype === "string")
      try {
        let o = e.map((n) => y.decodeString(n));
        return me(t8.shape, t8.dtype, o);
      } catch (o) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return me(t8.shape, t8.dtype, e);
  }
  async time(t8) {
    !this.supportTimestampQuery && !this.hasTimestampQueryWarned && (console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."), this.hasTimestampQueryWarned = true);
    let e = this.activeTimers, o = [], n = false;
    this.programTimersStack == null ? (this.programTimersStack = o, n = true) : this.activeTimers.push(o), this.activeTimers = o, t8();
    let s = y.flatten(this.activeTimers.map((u) => u.query)).filter((u) => u != null), a = y.flatten(this.activeTimers.map((u) => u.name)).filter((u) => u != null);
    this.activeTimers = e, n && (this.programTimersStack = null);
    let i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null }, p = await Promise.all(s);
    return i.kernelMs = y.sum(p), i.getExtraProfileInfo = () => p.map((u, c) => ({ name: a[c], ms: u })).map((u) => `${u.name}: ${u.ms}`).join(", "), this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
  }
  makeTensorInfo(t8, e, o) {
    return e === "string" && o != null && o.length > 0 && y.isString(o[0]) && (o = o.map((s) => y.encodeString(s))), { dataId: this.write(o, t8, e), shape: t8, dtype: e };
  }
  tensorToBinding(t8) {
    if (!t8)
      return null;
    let o = this.tensorMap.get(t8.dataId).resource;
    return o instanceof GPUBuffer ? { buffer: o } : o instanceof GPUTexture ? o.createView() : o;
  }
  uploadToGPU(t8) {
    let e = this.tensorMap.get(t8);
    if (e.resource != null)
      return;
    let o = jg(e.dtype) * y.sizeFromShape(e.shape), n, s = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST;
    if (e.values) {
      if (n = this.bufferManager.acquireBuffer(o, s, true), n.mapState === "unmapped") {
        let a = this.bufferManager.acquireBuffer(o, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, true, false), i = a.getMappedRange();
        e.dtype === "int32" || e.dtype === "bool" ? new Int32Array(i).set(e.values) : new Float32Array(i).set(e.values), a.unmap(), this.ensureCommandEncoderReady(), this.endComputePassEncoder(), this.commandEncoder.copyBufferToBuffer(a, 0, n, 0, o), this.stagingPendingDisposal.push(a);
      } else {
        let a = n.getMappedRange();
        e.dtype === "int32" || e.dtype === "bool" ? new Int32Array(a).set(e.values) : new Float32Array(a).set(e.values), n.unmap();
      }
      e.values = null;
    } else
      n = this.bufferManager.acquireBuffer(o, s);
    e.resource = n;
  }
  makeUniforms(t8) {
    let e = 0, o = 0, n = [], s = 1;
    t8.forEach((p) => {
      p.data.length === 0 && (p.data = [1]);
      let u;
      switch (p.data.length) {
        case 1:
          u = 4;
          break;
        case 2:
          u = 8;
          break;
        case 3:
          u = 16;
          break;
        case 4:
          u = 16;
          break;
        case 5:
          u = 16;
          break;
        case 6:
          u = 16;
          break;
        default:
          y.assert(false, () => `Unsupported ${p.data.length}D shape`);
      }
      (o === 5 || o === 6) && (u = 16), u > s && (s = u), e = Math.ceil(e / u) * u, o = p.data.length, n.push(e), e += p.data.length * 4;
    }), e = Math.ceil(e / s) * s;
    let a = new ArrayBuffer(e);
    t8.forEach((p, u) => {
      let c = n[u];
      p.type === "int32" ? new Int32Array(a, c, p.data.length).set(p.data) : p.type === "uint32" ? new Uint32Array(a, c, p.data.length).set(p.data) : new Float32Array(a, c, p.data.length).set(p.data);
    });
    let i = this.bufferManager.acquireBuffer(e, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);
    return this.queue.writeBuffer(i, 0, a, 0, e), this.uniformPendingDisposal.push(i), { offset: 0, size: e, buffer: i };
  }
  runWebGPUProgram(t8, e, o, n, s) {
    if (s || (s = this.makeTensorInfo(t8.outputShape, o)), y.sizeFromShape(s.shape) === 0)
      return this.tensorMap.get(s.dataId).values = y.getTypedArrayFromDType(s.dtype, 0), s;
    this.uploadToGPU(s.dataId), t8.dispatch = fae(this.device, t8);
    let a = e.map((p, u) => {
      if (p.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      return this.uploadToGPU(p.dataId), { dtype: this.tensorMap.get(p.dataId).dtype, shape: p.shape, name: t8.variableNames[u] };
    });
    t8.shaderKey = QB(t8, a, s);
    let i = A().getBool("WEBGPU_ENGINE_COMPILE_ONLY");
    return t8.shaderKey in this.pipelineCache || (this.pipelineCache[t8.shaderKey] = YB(this.device, t8, a, s, i)), t8.pipeline = this.pipelineCache[t8.shaderKey], i || this.recordAndSubmit(t8, s, e, n), s;
  }
  recordAndSubmit(t8, e, o, n) {
    if (t8.pipeline instanceof Promise)
      throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");
    let s = [], a = [], i = "int32";
    if (t8.pixelsOpType == null) {
      s.push({ type: "float32", data: [NaN] }, { type: "float32", data: [1 / 0] }), a = o.concat(e).map((d) => d.shape);
      let m = "int32";
      a.map((d) => {
        s.push({ type: m, data: d });
        let f = y.computeStrides(d);
        s.push({ type: m, data: f });
      });
    } else {
      let m = y.computeStrides(e.shape);
      s.push({ type: i, data: m });
    }
    if (t8.size) {
      let m = y.sizeFromShape(t8.outputShape);
      s.push({ type: i, data: [t8.outputComponent ? m / t8.outputComponent : m] });
    }
    n && (s = [...s, ...n]);
    let p = [this.tensorToBinding(e), ...o.map((m) => this.tensorToBinding(m)), this.makeUniforms(s)];
    o.forEach((m) => {
      this.commandQueueOwnedIds.add(m.dataId);
    }), this.commandQueueOwnedIds.add(e.dataId);
    let u = this.device.createBindGroup({ layout: t8.pipeline.getBindGroupLayout(0), entries: p.map((m, d) => ({ binding: d, resource: m })) }), c = this.activeTimers != null;
    this.ensureCommandEncoderReady();
    let l = {};
    c && this.supportTimestampQuery ? (this.endComputePassEncoder(), this.querySet == null && (this.querySet = this.device.createQuerySet({ type: "timestamp", count: this.querySetCount })), l.timestampWrites = [{ querySet: this.querySet, queryIndex: 0, location: "beginning" }, { querySet: this.querySet, queryIndex: 1, location: "end" }], this.computePassEncoder = this.commandEncoder.beginComputePass(l)) : this.computePassEncoder || (this.computePassEncoder = this.commandEncoder.beginComputePass(l)), this.computePassEncoder.setPipeline(t8.pipeline), this.computePassEncoder.setBindGroup(0, u), this.computePassEncoder.dispatchWorkgroups(t8.dispatch[0], t8.dispatch[1], t8.dispatch[2]), this.dispatchCountInPass++, (c || A().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE") <= this.dispatchCountInPass || t8.pixelsOpType === Ii.DRAW) && (this.endComputePassEncoder(), c ? this.activeTimers.push({ name: t8.constructor.name, query: this.getQueryTime() }) : this.submitQueue());
  }
  async getQueryTime() {
    if (!this.supportTimestampQuery)
      return 0;
    this.queryResolveBuffer == null && (this.queryResolveBuffer = this.bufferManager.acquireBuffer(this.querySetCount * 8, GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.QUERY_RESOLVE)), this.commandEncoder.resolveQuerySet(this.querySet, 0, this.querySetCount, this.queryResolveBuffer, 0);
    let t8 = this.bufferManager.acquireBuffer(this.querySetCount * 8, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);
    this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer, 0, t8, 0, this.querySetCount * 8), this.submitQueue(), await t8.mapAsync(GPUMapMode.READ);
    let e = new BigUint64Array(t8.getMappedRange()), o = Number(e[1] - e[0]) / 1e6;
    return t8.unmap(), this.bufferManager.releaseBuffer(t8), o;
  }
  shouldExecuteOnCPU(t8, e = dae) {
    return A().getBool("WEBGPU_CPU_FORWARD") && t8.every((o) => this.tensorMap.get(o.dataId).resource == null && y.sizeFromShape(o.shape) < e);
  }
  numDataIds() {
    return this.tensorMap.numDataIds() - this.tensorDataPendingDisposal.length;
  }
  dispose() {
    this.disposed || (this.querySet != null && this.querySet.destroy(), this.bufferManager.dispose(), this.textureManager.dispose(), this.disposed = true);
  }
};
Tu.nextDataId = 0;
dm() && su("webgpu", async () => {
  let r = { powerPreference: A().get("WEBGPU_USE_LOW_POWER_GPU") ? "low-power" : "high-performance" }, t8 = await navigator.gpu.requestAdapter(r), e = {}, o = [];
  t8.features.has("timestamp-query") && o.push("timestamp-query"), t8.features.has("bgra8unorm-storage") && o.push(["bgra8unorm-storage"]), e.requiredFeatures = o;
  let n = t8.limits;
  e.requiredLimits = { maxComputeWorkgroupStorageSize: n.maxComputeWorkgroupStorageSize, maxComputeWorkgroupsPerDimension: n.maxComputeWorkgroupsPerDimension, maxStorageBufferBindingSize: n.maxStorageBufferBindingSize, maxBufferSize: n.maxBufferSize, maxComputeWorkgroupSizeX: n.maxComputeWorkgroupSizeX, maxComputeInvocationsPerWorkgroup: n.maxComputeInvocationsPerWorkgroup };
  let s = await t8.requestDevice(e), a = await t8.requestAdapterInfo();
  return new Tu(s, a);
}, 3);
var fe;
(function(r) {
  r[r.ADD = 0] = "ADD", r[r.ATAN2 = 1] = "ATAN2", r[r.COMPLEX_MULTIPLY_IMAG = 2] = "COMPLEX_MULTIPLY_IMAG", r[r.COMPLEX_MULTIPLY_REAL = 3] = "COMPLEX_MULTIPLY_REAL", r[r.DIV = 4] = "DIV", r[r.ELU_DER = 5] = "ELU_DER", r[r.EQUAL = 6] = "EQUAL", r[r.FLOOR_DIV = 7] = "FLOOR_DIV", r[r.GREATER = 8] = "GREATER", r[r.GREATER_EQUAL = 9] = "GREATER_EQUAL", r[r.LESS = 10] = "LESS", r[r.LESS_EQUAL = 11] = "LESS_EQUAL", r[r.LOGICAL_AND = 12] = "LOGICAL_AND", r[r.LOGICAL_OR = 13] = "LOGICAL_OR", r[r.MAX = 14] = "MAX", r[r.MIN = 15] = "MIN", r[r.MOD = 16] = "MOD", r[r.MUL = 17] = "MUL", r[r.NOT_EQUAL = 18] = "NOT_EQUAL", r[r.POW = 19] = "POW", r[r.PRELU = 20] = "PRELU", r[r.SQUARED_DIFFERENCE = 21] = "SQUARED_DIFFERENCE", r[r.SUB = 22] = "SUB";
})(fe || (fe = {}));
var hae = "let resultTemp = a + b;";
var gae = "let resultTemp = atan2(a, b);";
var xae = "let resultTemp = areal * breal - aimag * bimag;";
var yae = "let resultTemp = areal * bimag + aimag * breal;";
var bae = "let resultTemp = a / b;";
var Cae = "let resultTemp = select(a * (b + 1.0), a, b >= b - b);";
var wae = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a == b);
`;
var Sae = `
  let remainder =
      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));
  let quotient = (a - remainder) / b;
  let resultTemp =
      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));
`;
var Iae = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a > b);
`;
var vae = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a >= b);
`;
var kae = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a < b);
`;
var Nae = `
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a <= b);
`;
var Tae = "return f32(a >= 1.0 && b >= 1.0);";
var _ae = `return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`;
var $ae = "return f32(a >= 1.0 || b >= 1.0);";
var Eae = `return min(vec4<f32>(a >= vec4<f32>(1.0)) +
  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`;
var Rae = "let resultTemp = max(a, b);";
var Dae = "let resultTemp = min(a, b);";
var Aae = `
  let isNaN = b == 0.;
  var resultTemp = a % b;
  resultTemp = select((resultTemp + b) % b, resultTemp,
      (a < 0. && b < 0.) || (a >= 0. && b > 0.));
`;
var Fae = `
  let isNaN = !vec4<bool>(b);
  var resultTemp = vec4<f32>(a % b);
  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {
    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];
  }
  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {
    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];
  }
  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {
    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];
  }
  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {
    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];
  }
`;
var Pae = "let resultTemp = a * b;";
var Oae = `
  var resultTemp = f32(a != b);
  let valueForNaN = 1.0;
`;
var Mae = `
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
`;
var Lae = `
  let isNaN = a < 0.0 && floor(b) < b;
  if (b == 0.0) {
    return 1.0;
  }
  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),
      round(abs(b) % 2.0) != 1.0);
`;
var Bae = `
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
`;
var zae = "if (a < 0.0) { return b * a; }  return a;";
var Vae = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`;
var Wae = "let resultTemp = (a - b) * (a - b);";
var Uae = "let resultTemp = a - b;";
function Qc(r, t8) {
  let e;
  do {
    switch (r) {
      case fe.ATAN2:
        e = gae;
        break;
      case fe.MAX:
        e = Rae;
        break;
      case fe.MIN:
        e = Dae;
        break;
      case fe.MOD:
        e = t8 ? Fae : Aae;
        break;
      case fe.NOT_EQUAL:
        e = t8 ? Mae : Oae;
        break;
      case fe.POW:
        e = t8 ? Bae : Lae;
        break;
      default:
        continue;
    }
    let o, n, s;
    return t8 ? (o = "isnanVec4", n = "vec4<f32>", s = "vec4<bool>") : (o = "isnan", n = "f32", s = "bool"), `
      let aIsNaN = ${o}(a);
      let aPostLegalization = select(a, ${n}(42), aIsNaN);
      let bIsNaN = ${o}(b);
      let bPostLegalization = select(b, ${n}(42), bIsNaN);
      let isNaN = false;
      let valueForNaN = uniforms.NAN;
      {
        let a = aPostLegalization;
        let b = bPostLegalization;
        ${e}
        return select(
            resultTemp, ${n}(valueForNaN),
            ${s}(isNaN) | aIsNaN | bIsNaN);
      }
    `;
  } while (false);
  switch (r) {
    case fe.ADD:
      e = hae;
      break;
    case fe.COMPLEX_MULTIPLY_IMAG:
      e = yae;
      break;
    case fe.COMPLEX_MULTIPLY_REAL:
      e = xae;
      break;
    case fe.DIV:
      e = bae;
      break;
    case fe.ELU_DER:
      e = Cae;
      break;
    case fe.EQUAL:
      e = wae;
      break;
    case fe.FLOOR_DIV:
      e = Sae;
      break;
    case fe.GREATER:
      e = Iae;
      break;
    case fe.GREATER_EQUAL:
      e = vae;
      break;
    case fe.LESS:
      e = kae;
      break;
    case fe.LESS_EQUAL:
      e = Nae;
      break;
    case fe.LOGICAL_AND:
      return t8 ? _ae : Tae;
    case fe.LOGICAL_OR:
      return t8 ? Eae : $ae;
    case fe.MUL:
      e = Pae;
      break;
    case fe.PRELU:
      return t8 ? Vae : zae;
    case fe.SQUARED_DIFFERENCE:
      e = Wae;
      break;
    case fe.SUB:
      e = Uae;
      break;
    default:
  }
  return `
    ${e}
    return resultTemp;
  `;
}
var Z;
(function(r) {
  r[r.ABS = 0] = "ABS", r[r.ACOS = 1] = "ACOS", r[r.ACOSH = 2] = "ACOSH", r[r.ASIN = 3] = "ASIN", r[r.ASINH = 4] = "ASINH", r[r.ATAN = 5] = "ATAN", r[r.ATANH = 6] = "ATANH", r[r.CEIL = 7] = "CEIL", r[r.COS = 8] = "COS", r[r.COSH = 9] = "COSH", r[r.ELU = 10] = "ELU", r[r.ERF = 11] = "ERF", r[r.EXP = 12] = "EXP", r[r.EXPM1 = 13] = "EXPM1", r[r.FLOOR = 14] = "FLOOR", r[r.IS_FINITE = 15] = "IS_FINITE", r[r.IS_INF = 16] = "IS_INF", r[r.IS_NAN = 17] = "IS_NAN", r[r.LINEAR = 18] = "LINEAR", r[r.LOG = 19] = "LOG", r[r.LOG1P = 20] = "LOG1P", r[r.LOGICAL_NOT = 21] = "LOGICAL_NOT", r[r.NEG = 22] = "NEG", r[r.RELU = 23] = "RELU", r[r.RELU6 = 24] = "RELU6", r[r.LEAKYRELU = 25] = "LEAKYRELU", r[r.RECIPROCAL = 26] = "RECIPROCAL", r[r.ROUND = 27] = "ROUND", r[r.RSQRT = 28] = "RSQRT", r[r.SELU = 29] = "SELU", r[r.SIGMOID = 30] = "SIGMOID", r[r.SIGN = 31] = "SIGN", r[r.SIN = 32] = "SIN", r[r.SINH = 33] = "SINH", r[r.SOFTPLUS = 34] = "SOFTPLUS", r[r.SQRT = 35] = "SQRT", r[r.SQUARE = 36] = "SQUARE", r[r.STEP = 37] = "STEP", r[r.TAN = 38] = "TAN", r[r.TANH = 39] = "TANH", r[r.TO_INT = 40] = "TO_INT";
})(Z || (Z = {}));
var Gae = "return abs(a);";
var Hae = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return acos(a);
`;
var Kae = `
  if (a < 1.) {
    return uniforms.NAN;
  }
  return acosh(a);
`;
var qae = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return asin(a);
`;
var jae = "return asinh(a);";
var Xae = `
  if (isnan(a)) {
    return uniforms.NAN;
  }
  return atan(a);
`;
var Yae = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  if (a == 1.) {
    return uniforms.INFINITY;
  }
  if (a == -1.) {
    return -uniforms.INFINITY;
  }
  return atanh(a);
`;
var Qae = "return ceil(a);";
var Zae = "return cos(a);";
var Jae = `
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`;
var eie = "return exp(a) - 1.0;";
var tie = "if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";
var rie = `
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`;
var oie = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  let p = ${w.ERF_P};
  let a1 = ${w.ERF_A1};
  let a2 = ${w.ERF_A2};
  let a3 = ${w.ERF_A3};
  let a4 = ${w.ERF_A4};
  let a5 = ${w.ERF_A5};

  let sign = sign(a);
  let absA = abs(a);
  let t = 1.0 / (1.0 + p * absA);
  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));
`;
var nie = "return exp(a);";
var sie = "return floor(a);";
var aie = "return f32(!isnan(a) && !isinf(a));";
var iie = "return f32(isinf(a));";
var uie = "return f32(isnan(a));";
var pie = "return a;";
var cie = `if (a < 0.0) { return uniforms.NAN; }
  return log(a);`;
var lie = `
  if (isnan(a)) { return a; }
  return log(1.0 + a);
`;
var mie = "return f32(!(a >= 1.0));";
var die = "return -a;";
var fie = "if (a < 0.0) { return uniforms.alpha * a; } return a;";
var hie = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`;
var gie = "return 1.0 / a;";
var xie = "return select(a, 0.0, a < 0.0);";
var yie = "return clamp(a, 0.0, 6.0);";
var bie = "return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));";
var Cie = `
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`;
var wie = "return round(a);";
var Sie = "return inverseSqrt(a);";
var Iie = `
  if (a >= 0.0) {
    return ${w.SELU_SCALE} * a;
  } else {
    return ${w.SELU_SCALEALPHA} * (exp(a) - 1.0);
  }
`;
var vie = "return 1.0 / (1.0 + exp(-1.0 * a));";
var kie = "return sign(a);";
var Nie = "return sin(a);";
var Tie = `
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`;
var _ie = `
  let epsilon = 1.1920928955078125e-7;
  let threshold = log(epsilon) + 2.0;

  let too_large = a > -threshold;
  let too_small = a < threshold;
  let exp_a = exp(a);

  if (too_large) {
    return a;
  } else if (too_small) {
    return exp_a;
  } else {
    return log(exp_a + 1.0);
  }
`;
var $ie = "return sqrt(a);";
var Eie = "return a * a;";
var Rie = `
  if (isnan(a)) {
    return a;
  }

  return select(uniforms.stepAlpha, 1.0, a > 0.0);
`;
var Die = "return tan(a);";
var Aie = `
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`;
var Fie = "return f32(i32((a)));";
function vi(r, t8) {
  switch (r) {
    case Z.ABS:
      return Gae;
    case Z.ACOS:
      return Hae;
    case Z.ACOSH:
      return Kae;
    case Z.ASIN:
      return qae;
    case Z.ASINH:
      return jae;
    case Z.ATAN:
      return Xae;
    case Z.ATANH:
      return Yae;
    case Z.COS:
      return Zae;
    case Z.COSH:
      return Jae;
    case Z.CEIL:
      return Qae;
    case Z.ELU:
      return t8 ? rie : tie;
    case Z.ERF:
      return oie;
    case Z.EXP:
      return nie;
    case Z.EXPM1:
      return eie;
    case Z.FLOOR:
      return sie;
    case Z.IS_FINITE:
      return aie;
    case Z.IS_INF:
      return iie;
    case Z.IS_NAN:
      return uie;
    case Z.LINEAR:
      return pie;
    case Z.LOG:
      return cie;
    case Z.LOG1P:
      return lie;
    case Z.LOGICAL_NOT:
      return mie;
    case Z.NEG:
      return die;
    case Z.LEAKYRELU:
      return t8 ? hie : fie;
    case Z.RECIPROCAL:
      return gie;
    case Z.RELU:
      return t8 ? Cie : xie;
    case Z.RELU6:
      return t8 ? bie : yie;
    case Z.ROUND:
      return wie;
    case Z.RSQRT:
      return Sie;
    case Z.SELU:
      return Iie;
    case Z.SIGMOID:
      return vie;
    case Z.SIGN:
      return kie;
    case Z.SIN:
      return Nie;
    case Z.SINH:
      return Tie;
    case Z.SOFTPLUS:
      return _ie;
    case Z.SQRT:
      return $ie;
    case Z.SQUARE:
      return Eie;
    case Z.STEP:
      return Rie;
    case Z.TAN:
      return Die;
    case Z.TANH:
      return Aie;
    case Z.TO_INT:
      return Fie;
    default:
      throw new Error(`BinaryType ${r} is not implemented!`);
  }
}
function fr(r, t8 = false, e = false, o = 3) {
  if (r === null)
    return "";
  let n = "";
  if (r === "linear")
    n = vi(Z.LINEAR);
  else if (r === "relu")
    n = vi(Z.RELU, e);
  else if (r === "elu")
    n = vi(Z.ELU, e);
  else if (r === "relu6")
    n = vi(Z.RELU6, e);
  else if (r === "prelu")
    n = Qc(fe.PRELU, e);
  else if (r === "sigmoid")
    n = vi(Z.SIGMOID, e);
  else if (r === "leakyrelu")
    n = vi(Z.LEAKYRELU, e);
  else
    throw new Error(`Activation ${r} has not been implemented for the WebGPU backend.`);
  let a = Ae(e ? 4 : 1), i = "";
  return t8 ? i = `
      fn activation(a : ${a}, coords : vec${o}<i32>) -> ${a} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${n}
      }` : i = `
      fn activation(a : ${a}, coords : vec${o}<i32>) -> ${a} {
        ${n}
      }`, i;
}
function Zr(r, t8) {
  return `
      ${r ? "value = value + getBiasByOutputCoords(coords);" : ""}
      ${t8 ? "value = activation(value, coords);" : ""}
      `;
}
function Qv(r, t8, e = false, o = false, n = false, s = 1) {
  y.assert(r && s === 1 || !r, () => `transposeA ${r} is not compatible with component size ${s}`);
  let a = `
      ${r ? "value = getA(batch, col, row);" : "value = getA(batch, row, col);"}

    `, i = t8 ? "value = getB(batch, col, row);" : "value = getB(batch, row, col);";
  return `
  fn mm_readA(batch: i32, row: i32, col: i32) -> ${Ae(s)} {
    var value = ${Ae(s)}(0.0);
    ${e && n ? a : `
    ${r ? "if(row < uniforms.dimAOuter && col < uniforms.dimInner)" : "if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${a}
    }
    `}
    return value;
  }

  fn mm_readB(batch: i32, row: i32, col: i32) -> ${Ae(s)} {
    var value = ${Ae(s)}(0.0);
    ${i}
    return value;
  }
  `;
}
function hm(r, t8, e, o, n = false, s = false, a = false, i = 1) {
  return `
  ${Qv(e, o, n, s, a, i)}
  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${Ae(i)}) {
    ${n && s ? "" : "if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${Zr(r, t8)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `;
}
var Pie = (r, t8) => r ? `
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol * ${t8});
        ` : `
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRow + innerRow,
          kStart + inputCol * ${t8});
        `;
var Oie = (r, t8, e, o) => {
  if (r)
    return `
      for (var k = 0; k < ${o}; k++) {
        let BCached0 = mm_Bsub[k][tileCol];
        let ACached0 = mm_Asub[k][localRow];
        for (var i = 0; i < ${e}; i++) {
          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);
        }
      }`;
  {
    let n = "", s = "";
    for (let a = 0; a < t8; a++)
      n += `let BCached${a} = mm_Bsub[k * ${t8} + ${a}][tileCol];`, s += `acc[i] = fma(BCached${a}, vec4<f32>(ACached[${a}]), acc[i]);`;
    return `
      for (var k = 0; k < ${o / t8}; k++) {
        ${n}
        for (var i = 0; i < ${e}; i++) {
          let ACached = mm_Asub[tileRow + i][k];
          ${s}
        }
      }`;
  }
};
function Fp(r, t8, e = false, o = 32, n = false, s = 32, a = false) {
  let i = t8[1] * r[1], p = t8[0] * r[0], u = e ? i : o, c = e ? o : i, l = u / t8[0], m = o / t8[1], d = r[1], f = r[0];
  return y.assert((e && l === 4 && r[1] === 4 || !e && (l === 3 || l === 4)) && u % t8[0] === 0 && o % t8[1] === 0 && r[0] === 4, () => `If transposeA ${e} is true, innerElementSize ${l} and workPerThread[1] ${r[1]} must be 4.
          Otherwise, innerElementSize ${l} must be 3 or 4.
      tileAWidth ${u} must be divisible by workgroupSize[0]${t8[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${t8[1]}. colPerThread ${r[0]} must be 4.`), `
  var<workgroup> mm_Asub : array<array<vec${l}<f32>, ${u / l}>, ${c}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${p / r[0]}>, ${o}>;

  ${G()} {
    let localRow = i32(localId.y);
    let tileRow = localRow * ${d};
    let tileCol = i32(localId.x);

    let globalRow = i32(globalId.y) * ${d};
    let globalCol = i32(globalId.x) * ${f};
    let batch = ${n ? "0" : "i32(globalId.z)"};
    let batchA = ${n || !a ? "batch" : "batch % uniforms.aShape[0]"};
    let batchB = ${n || !a ? "batch" : "batch % uniforms.bShape[0]"};
    let globalRowStart = i32(workgroupId.y) * ${i};

    let numTiles = ${n ? `${Math.ceil(s / o)}` : `(uniforms.dimInner - 1) / ${o} + 1`};
    var kStart = ${n ? `i32(globalId.z) * ${s}` : "0"};

    var acc: array<vec4<f32>, ${d}>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${m};
    for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${d}; innerRow++) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${Pie(e, l)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow++) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);
        }
        kStart = kStart + ${o};
        workgroupBarrier();

        // Compute acc values for a single thread.
        ${Oie(e, l, d, o)}
        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < ${d}; innerRow++) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`;
}
var JB = (r) => r ? `
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol);
        ` : `
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRowStart + inputRow,
          kStart + inputCol);
        `;
var Mie = (r) => r ? "let ACached = mm_Asub[k][tileRow + innerRow];" : "let ACached = mm_Asub[tileRow + innerRow][k];";
function Pp(r, t8, e = false, o = 32, n = false, s = 32, a = false, i = false) {
  let p = r[1] * t8[1], u = r[0] * t8[0], c = e ? p : o, l = e ? o : p;
  y.assert(l % t8[1] === 0 && c % t8[0] === 0 && o % t8[1] === 0, () => `tileAHight ${l} must be divisible by workgroupSize[1]${t8[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t8[0]}, tileInner ${o} must be divisible by workgroupSize[1]${t8[1]}`);
  let m = l / t8[1], d = c / t8[0], f = o / t8[1], h = r[1], g = r[0], x = a ? `
      let localRow = i32(localId.y);
      let localCol = i32(localId.x);
      let globalRowStart = i32(workgroupId.y) * ${p};
      let globalColStart = i32(workgroupId.x) * ${u};

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var inputRow = localRow; inputRow < ${l}; inputRow = inputRow + ${t8[1]}) {
          for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t8[0]}) {
            ${JB(e)}
          }
        }
        // Load one tile of B into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${t8[1]}) {
              for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${t8[0]}) {
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
              kStart + inputRow,
              globalColStart + inputCol);
          }
        }
        kStart = kStart + ${o};
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ${g}>;
        for (var k = 0; k < ${o}; k++) {
          for (var inner = 0; inner < ${g}; inner++) {
            BCached[inner] = mm_Bsub[k][localCol + inner * ${t8[0]}];
          }
          for (var innerRow = 0; innerRow < ${h}; innerRow++) {
            let ACached = ${e ? `mm_Asub[k][localRow + innerRow * ${t8[1]}];` : `mm_Asub[localRow + innerRow * ${t8[1]}][k];`}
            for (var innerCol = 0; innerCol < ${g}; innerCol++) {
              acc[innerRow][innerCol] =
                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
            }
          }
        }
        workgroupBarrier();
      }
      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        let gRow = globalRowStart + localRow + innerRow * ${t8[1]};
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          let gCol = globalColStart + localCol + innerCol * ${t8[0]};
          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
        }
      }
      ` : `
  let tileRow = i32(localId.y) * ${h};
  let tileCol = i32(localId.x) * ${g};

  let globalRow = i32(globalId.y) * ${h};
  let globalCol = i32(globalId.x) * ${g};
  let globalRowStart = i32(workgroupId.y) * ${p};

  let tileRowA = i32(localId.y) * ${m};
  let tileColA = i32(localId.x) * ${d};
  let tileRowB = i32(localId.y) * ${f};
  // Loop over shared dimension.
  for (var t = 0; t < numTiles; t++) {
    // Load one tile of A into local memory.
    for (var innerRow = 0; innerRow < ${m}; innerRow++) {
      for (var innerCol = 0; innerCol < ${d}; innerCol++) {
        let inputRow = tileRowA + innerRow;
        let inputCol = tileColA + innerCol;
        ${JB(e)}
      }
    }

    // Load one tile of B into local memory.
    for (var innerRow = 0; innerRow < ${f}; innerRow++) {
      for (var innerCol = 0; innerCol < ${g}; innerCol++) {
        let inputRow = tileRowB + innerRow;
        let inputCol = tileCol + innerCol;
        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
          kStart + inputRow,
          globalCol + innerCol);
      }
    }
    kStart = kStart + ${o};
    workgroupBarrier();

    // Compute acc values for a single thread.
    var BCached : array<f32, ${g}>;
    for (var k = 0; k < ${o}; k++) {
      for (var inner = 0; inner < ${g}; inner++) {
        BCached[inner] = mm_Bsub[k][tileCol + inner];
      }

      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        ${Mie(e)}
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] =
              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
        }
      }
    }

    workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < ${h}; innerRow++) {
    for (var innerCol = 0; innerCol < ${g}; innerCol++) {
      mm_write(batch, globalRow + innerRow, globalCol + innerCol,
          acc[innerRow][innerCol]);
    }
  }
  `;
  return `
    var<workgroup> mm_Asub : array<array<f32, ${c}>, ${l}>;
    var<workgroup> mm_Bsub : array<array<f32, ${u}>, ${o}>;

    ${G()} {
      let batch = ${n ? "0" : "i32(globalId.z)"};
      let batchA = ${n || !i ? "batch" : "batch % uniforms.aShape[0]"};
      let batchB = ${n || !i ? "batch" : "batch % uniforms.bShape[0]"};
      let numTiles = ${n ? `${Math.ceil(s / o)}` : `(uniforms.dimInner - 1) / ${o} + 1`};
      var kStart = ${n ? `i32(globalId.z) * ${s}` : "0"};

      var acc : array<array<f32, ${g}>, ${h}>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] = 0.0;
        }
      }
      ${x}
    }
  `;
}
var Lie = (r) => r ? `
      mm_readA(batchA, colA, globalRow),
      mm_readA(batchA, colA + 1, globalRow),
      mm_readA(batchA, colA + 2, globalRow),
      mm_readA(batchA, colA + 3, globalRow)
  ` : `
      mm_readA(batchA, globalRow, colA),
      mm_readA(batchA, globalRow, colA + 1),
      mm_readA(batchA, globalRow, colA + 2),
      mm_readA(batchA, globalRow, colA + 3)
  `;
function Bie(r, t8 = false) {
  y.assert(r[1] === 1 && r[2] === 1, () => `A linear work group size is required. But got ${r}.`);
  let e = r[0] * 4;
  return `
    var<workgroup> mm_Asub : array<vec4<f32>, ${r[0]}>;

    ${G()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / ${e} + 1;
      let batch = i32(globalId.z);
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        let colA = t * ${e} + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${Lie(t8)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < ${e / 4}; k++) {
          let rowB = t * ${e} + k * 4;
          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),
                              mm_readB(batchB, rowB + 1, globalCol),
                              mm_readB(batchB, rowB + 2, globalCol),
                              mm_readB(batchB, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `;
}
var Xg = class {
  constructor(t8, e, o = false, n = false, s = null, a = null, i = null, p = false) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = e, this.dispatchLayout = { x: [2], y: [1], z: [0] };
    let u = o ? t8[1] : t8[2];
    if (this.isVec4 = (u % 4 === 0 && !o || e[1] % 4 === 0 && o) && e[2] % 4 === 0 && !n, this.outputComponent = this.isVec4 ? 4 : 1, this.isVectorA = e[1] === 1 && !o, !this.isVec4 && this.isVectorA)
      this.elementsPerThread = [1, 1, 1], this.workgroupSize = [32, 1, 1];
    else {
      let m = Xv(e[1], u, e[2], o);
      this.workgroupSize = m.workgroupSize, this.elementsPerThread = m.elementsPerThread;
    }
    this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread);
    let c = s != null, l = i != null;
    c && this.variableNames.push("bias"), l && this.variableNames.push("preluActivationWeights"), this.sequentialAccessByThreads = p, this.transposeA = o, this.transposeB = n, this.addBias = c, this.activation = a, this.hasPreluActivationWeights = l, [this.fitAOuter, this.fitBOuter, this.fitInner] = this.getShapeFit(e[1], e[2], u), this.shaderKey = `matMulPacked_${this.elementsPerThread}_${o}_${n}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`;
  }
  getShapeFit(t8, e, o) {
    let n = this.workgroupSize[1] * this.elementsPerThread[1], s = this.workgroupSize[0] * this.elementsPerThread[0];
    !this.isVec4 && this.isVectorA ? this.tileInner = this.workgroupSize[0] * 4 : this.tileInner = s;
    let a = t8 % n === 0, i = e % s === 0, p = o % this.tileInner === 0;
    return [a, i, p];
  }
  getUserCode() {
    return `
      ${fr(this.activation, this.hasPreluActivationWeights, this.isVec4)}
      ${hm(this.addBias, this.activation, false, this.transposeB, this.fitAOuter, this.fitBOuter, this.fitInner, this.isVec4 ? 4 : 1)}
      ${this.isVec4 ? Fp(this.elementsPerThread, this.workgroupSize, this.transposeA, this.tileInner, false, null, true) : this.isVectorA ? Bie(this.workgroupSize, this.transposeA) : Pp(this.elementsPerThread, this.workgroupSize, this.transposeA, this.tileInner, false, null, this.sequentialAccessByThreads, true)}
    `;
  }
};
function zie(r) {
  return `
    var<workgroup> sumValues : array<f32, ${r}>;
    ${G()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + ${r}) {
        let dataA = mm_readA(batchA, row, k);
        let dataB = mm_readB(batchB, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = ${r / 2}u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `;
}
var Yg = class {
  constructor(t8, e = false, o = false, n = null, s = null, a = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [256, 1, 1], this.outputShape = t8, this.dispatchLayout = { x: [], y: [1, 2], z: [0] }, this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize);
    let i = n != null, p = a != null;
    i && this.variableNames.push("bias"), p && this.variableNames.push("preluActivationWeights"), this.transposeA = e, this.transposeB = o, this.addBias = i, this.activation = s, this.hasPreluActivationWeights = p, this.shaderKey = `matMulReduce_${this.activation}_${e}_${o}`;
  }
  getUserCode() {
    return `
      ${fr(this.activation, this.hasPreluActivationWeights)}
      ${hm(this.addBias, this.activation, this.transposeA, this.transposeB)}
      ${zie(this.workgroupSize[0])}
    `;
  }
};
function Vie(r) {
  let t8 = r[1], e = r[0], o = t8 > e ? t8 : e;
  return `
  var<workgroup> mm_Asub : array<array<f32, ${o}>, ${t8}>;
  var<workgroup> mm_Bsub : array<array<f32, ${e}>, ${o}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${G()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);
    let batchA = batch % uniforms.aShape[0];
    let batchB = batch % uniforms.bShape[0];

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${o} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batchA, globalRow, globalColA);
    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${o};
    globalRowB = globalRowB + ${o};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batchA, globalRow, globalColA);
      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${o};
      globalRowB = globalRowB + ${o};

      for (var k = 0; k < ${o}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `;
}
var Qg = class {
  constructor(t8, e, o, n = false, s = false, a = null, i = null, p = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [16, 8, 1], this.outputShape = o, this.dispatchLayout = { x: [2], y: [1], z: [0] }, this.dispatch = [Math.ceil(o[2] / this.workgroupSize[0]), Math.ceil(o[1] / this.workgroupSize[1]), o[0]];
    let u = a != null;
    u && this.variableNames.push("bias");
    let c = p != null;
    c && this.variableNames.push("preluActivationWeights"), this.transposeA = n, this.transposeB = s, this.addBias = u, this.activation = i, this.hasPreluActivationWeights = c, this.shaderKey = `matMulSmallOutputSize_${this.activation}_${n}_${s}`;
  }
  getUserCode() {
    return `
      ${fr(this.activation, this.hasPreluActivationWeights)}
      ${hm(this.addBias, this.activation, this.transposeA, this.transposeB)}
      ${Vie(this.workgroupSize)}
    `;
  }
};
var Zg = class {
  constructor(t8, e, o = false, n = false) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [8, 8, 1], this.atomic = true, this.splitedDimInner = 128, y.assert(t8[0] === 1, () => "MatMulSplitKProgram only supports batch = 1."), this.outputShape = t8, this.dispatchLayout = { x: [2], y: [1], z: [0, 3] };
    let s = (o && this.outputShape[1] % 4 === 0 || !o && e % 4 === 0) && this.outputShape[2] % 4 === 0;
    this.elementsPerThread = [4, 4, this.splitedDimInner], this.outputComponent = s ? 4 : 1, s || (this.outputShape[1] < 16 && (this.elementsPerThread[1] = 1), this.outputShape[2] < 16 && (this.elementsPerThread[0] = 1)), this.dispatch = H(this.dispatchLayout, [this.outputShape[0], this.outputShape[1], this.outputShape[2], e], this.workgroupSize, this.elementsPerThread), this.transposeA = o, this.transposeB = n, this.shaderKey = `matMulSplitK_${o}_${n}_${this.elementsPerThread}_${this.outputComponent}`;
  }
  getUserCode() {
    let t8 = this.outputComponent;
    return `
      ${Qv(false, this.transposeB, false, false, false, t8)}
      fn mm_write(batch: i32, row : i32, col : i32, value : ${Ae(t8)}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          for (var i = 0; i < ${t8}; i = i + 1) {
            ${Qr("&result[flatIndex + i]", `${t8 > 1 ? "value[i]" : "value"}`, "float32")}
          }
        }
      }
      ${t8 === 4 ? Fp(this.elementsPerThread, this.workgroupSize, this.transposeA, 32, true, this.splitedDimInner) : Pp(this.elementsPerThread, this.workgroupSize, this.transposeA, 32, true, this.splitedDimInner)}
    `;
  }
};
var Jg = class {
  constructor(t8, e = null, o = null, n = null) {
    this.uniforms = "", this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.addBias = e != null, this.hasPreluActivationWeights = n != null, this.activation = o, this.addBias && this.variableNames.push("bias"), this.hasPreluActivationWeights && this.variableNames.push("preluActivationWeights"), this.shaderKey = `biasActivation_${o}`;
  }
  getUserCode() {
    return `
    ${fr(this.activation, this.hasPreluActivationWeights)}
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${Zr(this.addBias, this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `;
  }
};
var ex = class {
  constructor(t8) {
    this.variableNames = [], this.outputShape = [], this.uniforms = "value : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "fill";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `;
  }
};
function kt(r) {
  let { backend: t8, attrs: e } = r, { shape: o, value: n } = e, { dtype: s } = e;
  if (s = s || y.inferDtype(n), s === "string") {
    let a = y.getArrayFromDType(s, y.sizeFromShape(o));
    return a.fill(n), t8.makeTensorInfo(o, s, a);
  } else {
    let a = new ex(o), i = [{ type: "float32", data: [n] }];
    return t8.runWebGPUProgram(a, [], s, i);
  }
}
var ez = { kernelName: sa, backendName: "webgpu", kernelFunc: kt };
function pe(r) {
  let { inputs: t8, attrs: e } = r, { x: o } = t8, { shape: n } = e, s = y.sizeFromShape(o.shape), a = y.inferFromImplicitShape(n, s), i = y.sizeFromShape(a);
  return y.assert(s === i, () => `The new shape (${a}) has ${i} elements and the old shape (${o.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`), r.backend.incRef(o.dataId), { dataId: o.dataId, shape: a, dtype: o.dtype };
}
var tz = { kernelName: da, backendName: "webgpu", kernelFunc: pe };
function Op({ a: r, b: t8, transposeA: e, transposeB: o, backend: n, bias: s = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: p = null }) {
  let u = r.shape.length, c = t8.shape.length, l = e ? r.shape[u - 2] : r.shape[u - 1], m = o ? t8.shape[c - 1] : t8.shape[c - 2], d = e ? r.shape[u - 1] : r.shape[u - 2], f = o ? t8.shape[c - 2] : t8.shape[c - 1], h = r.shape.slice(0, -2), g = t8.shape.slice(0, -2), x = y.sizeFromShape(h), b = y.sizeFromShape(g), S = Ir.assertAndGetBroadcastShape(r.shape.slice(0, -2), t8.shape.slice(0, -2)).concat([d, f]);
  y.assert(l === m, () => `Error in matMul: inner shapes (${l}) and (${m}) of Tensors with shapes ${r.shape} and ${t8.shape} and transposeA=${e} and transposeB=${o} must match.`);
  let k = e ? [x, l, d] : [x, d, l], _ = o ? [b, f, m] : [b, m, f], E = pe({ inputs: { x: r }, backend: n, attrs: { shape: k } }), R = pe({ inputs: { x: t8 }, backend: n, attrs: { shape: _ } }), D = [E, R], P = Math.max(x, b), O = [E, R], M = [{ type: "int32", data: [d] }, { type: "int32", data: [f] }, { type: "int32", data: [l] }], L, B, z = [P, d, f], U = A().get("WEBGPU_MATMUL_PROGRAM_TYPE");
  if (U < 0) {
    let q = A().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"), Y = q > 0 ? q : n.thresholdToIncreaseWorkgroups, J = P * Math.ceil(d / 32) * Math.ceil(f / 32);
    J <= Y || d <= 8 && J <= Y * 2 ? P * d * f <= 128 ? U = Lo.MatMulReduceProgram : P === 1 && m >= 2e3 ? U = Lo.MatMulSplitKProgram : U = Lo.MatMulSmallOutputSizeProgram : U = Lo.MatMulPackedProgram;
  }
  switch (U) {
    case Lo.MatMulReduceProgram:
      L = new Yg(z, e, o, s, p, a);
      break;
    case Lo.MatMulSplitKProgram: {
      if (B = kt({ backend: n, attrs: { shape: z, value: 0, dtype: r.dtype } }), L = new Zg(z, m, e, o), s || p) {
        B = n.runWebGPUProgram(L, O, r.dtype, M, B);
        let Y = new Jg(B.shape, s, p, a), J = null, re = [B];
        s && re.push(s), a && re.push(a), p === "leakyrelu" && (J = [{ type: "float32", data: [i] }], Y.uniforms += " alpha : f32,");
        let ne = n.runWebGPUProgram(Y, re, B.dtype, J);
        D.push(B);
        let ee = pe({ inputs: { x: ne }, backend: n, attrs: { shape: S } });
        D.push(ne);
        for (let oe of D)
          n.disposeData(oe.dataId);
        return ee;
      }
      break;
    }
    case Lo.MatMulSmallOutputSizeProgram:
      L = new Qg(k, _, z, e, o, s, p, a);
      break;
    case Lo.MatMulPackedProgram:
      let q = n.adapterInfo.isIntel();
      L = new Xg(k, z, e, o, s, p, a, q);
      break;
    default:
      throw new Error(`Unsupported MatMulProgramType ${U}.`);
  }
  s && O.push(s), a && O.push(a), p === "leakyrelu" && (M.push({ type: "float32", data: [i] }), L.uniforms += " alpha : f32,"), B = n.runWebGPUProgram(L, O, r.dtype, M, B);
  let j = pe({ inputs: { x: B }, backend: n, attrs: { shape: S } });
  D.push(B);
  for (let q of D)
    n.disposeData(q.dataId);
  return j;
}
function Wie(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { a: n, b: s, bias: a, preluActivationWeights: i } = t8, { transposeA: p, transposeB: u, activation: c, leakyreluAlpha: l } = o;
  return Op({ a: n, b: s, transposeA: p, transposeB: u, backend: e, bias: a, preluActivationWeights: i, leakyreluAlpha: l, activation: c });
}
var rz = { kernelName: Io, backendName: "webgpu", kernelFunc: Wie };
var gm = class {
  constructor(t8, e, o) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.workgroupSize = [128, 1, 1], this.size = true, this.outputShape = w.assertAndGetBroadcastShape(e, o), this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `binaryOpComplex_${t8}`, this.op = t8;
  }
  getUserCode() {
    return `
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${Qc(this.op, false)}
      }

      ${G("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `;
  }
};
var ki = class {
  constructor(t8, e, o) {
    if (this.size = true, this.variableNames = ["A", "B"], this.outputShape = w.assertAndGetBroadcastShape(e, o), this.dispatchLayout = X(this.outputShape), this.op = t8, this.useSharedMemoryWithA = e.length <= 1 && o.length > 1 && e[0] < 128, this.useSharedMemoryWithB = o.length <= 1 && e.length > 1 && o[0] < 128, this.useSharedMemoryWithA || this.useSharedMemoryWithB)
      this.outputComponent = 1, this.variableComponents = [1, 1], this.lastDimensionSize = this.useSharedMemoryWithB ? o[0] : e[0], this.shaderKey = `binary_${t8}_${this.lastDimensionSize}`, this.type = "shared", this.workgroupSize = [256, 1, 1];
    else {
      let n = e.length > 0 && e[e.length - 1] % 4 === 0, s = o.length > 0 && o[o.length - 1] % 4 === 0;
      n && s ? (this.outputComponent = 4, this.variableComponents = [4, 4]) : n && (y.isScalarShape(o) || o[o.length - 1] === 1) || s && (y.isScalarShape(e) || e[e.length - 1] === 1) ? (this.outputComponent = 4, this.variableComponents = n ? [4, 1] : [1, 4]) : (this.outputComponent = 1, this.variableComponents = [1, 1]), this.type = "nonshared", this.shaderKey = `binary_${t8}_${this.variableComponents}`, this.workgroupSize = [128, 1, 1];
    }
    this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.outputComponent, 1, 1]);
  }
  getUserCode() {
    let t8, e = this.outputComponent === 4 ? "vec4<f32>" : "f32", o = `
    fn binaryOperation(a : ${e}, b : ${e}) -> ${e} {
      ${Qc(this.op, this.outputComponent === 4)}
    };
    `;
    if (this.type === "shared") {
      let n = this.lastDimensionSize > 1 ? `coords[${this.outputShape.length - 1}]` : "0", s = this.useSharedMemoryWithB ? `let a = getAByOutputIndex(index);
          let b = sharedBuf[${n}];` : `let a = sharedBuf[${n}];
          let b = getBByOutputIndex(index);`;
      t8 = `
        ${o}
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${G("index")} {
          // Fill in the shared memory buffer.
          let localIndex = i32(localId.x);
          if(localIndex < ${this.lastDimensionSize}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB ? "B" : "A"}[localIndex]);
          }
          workgroupBarrier();

          if(index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            ${s}
            setOutputAtIndex(index, binaryOperation(a, b));
          }
        }
        `;
    } else
      t8 = `
       ${o}
       ${G("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index * ${this.outputComponent});
           let a = ${e}(getAByOutputCoords(coords));
           let b = ${e}(getBByOutputCoords(coords));
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `;
    return t8;
  }
};
function Ft(r) {
  let { inputs: t8 } = r, { x: e } = t8;
  return r.backend.incRef(e.dataId), { dataId: e.dataId, shape: e.shape, dtype: e.dtype };
}
var oz = { kernelName: wo, backendName: "webgpu", kernelFunc: Ft };
function yo(r) {
  let { inputs: t8, backend: e } = r, { real: o, imag: n } = t8, s = e.makeTensorInfo(o.shape, "complex64"), a = e.tensorMap.get(s.dataId), i = Ft({ inputs: { x: o }, backend: e }), p = Ft({ inputs: { x: n }, backend: e });
  return a.complexTensorInfos = { real: i, imag: p }, s;
}
var nz = { kernelName: Fi, backendName: "webgpu", kernelFunc: yo };
var Jr = class {
  constructor(t8, e, o = "") {
    this.variableNames = ["A"], this.size = true;
    let n = 128;
    this.workgroupSize = [n, 1, 1], this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.op = e, o !== "" && (this.uniforms = o), this.shaderKey = `unary_${e}`;
  }
  getUserCode() {
    return `
      fn unaryOperation(a : f32) -> f32 {
        ${vi(this.op, false)}
      }
      ${G("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `;
  }
};
function ye({ opType: r, cpuKernelImpl: t8, dtype: e }) {
  return ({ inputs: o, backend: n }) => {
    let { x: s } = o, a = n, i = e || s.dtype;
    if (a.shouldExecuteOnCPU([s]) && t8 != null) {
      let u = a.tensorMap.get(s.dataId), c = t8(u.values, i);
      return a.makeTensorInfo(s.shape, i, c);
    }
    let p = new Jr(s.shape, r);
    return a.runWebGPUProgram(p, [s], i);
  };
}
function et({ opType: r, cpuKernelImpl: t8, supportsComplex: e = false, dtype: o }) {
  return ({ inputs: n, backend: s }) => {
    let { a, b: i } = n, p = s;
    if (e && a.dtype === "complex64") {
      let l = p.tensorMap.get(a.dataId), m = p.tensorMap.get(i.dataId), d, f;
      if (r !== fe.MUL)
        [d, f] = [[l.complexTensorInfos.real, m.complexTensorInfos.real], [l.complexTensorInfos.imag, m.complexTensorInfos.imag]].map((g) => {
          let [x, b] = g, C = { dataId: x.dataId, dtype: x.dtype, shape: a.shape }, S = { dataId: b.dataId, dtype: b.dtype, shape: i.shape }, k = new ki(r, a.shape, i.shape);
          return p.runWebGPUProgram(k, [C, S], dt(x.dtype, b.dtype));
        });
      else {
        let g = new gm(fe.COMPLEX_MULTIPLY_REAL, a.shape, i.shape), x = new gm(fe.COMPLEX_MULTIPLY_IMAG, a.shape, i.shape), b = [{ dataId: l.complexTensorInfos.real.dataId, dtype: l.complexTensorInfos.real.dtype, shape: a.shape }, { dataId: l.complexTensorInfos.imag.dataId, dtype: l.complexTensorInfos.imag.dtype, shape: a.shape }, { dataId: m.complexTensorInfos.real.dataId, dtype: m.complexTensorInfos.real.dtype, shape: i.shape }, { dataId: m.complexTensorInfos.imag.dataId, dtype: m.complexTensorInfos.imag.dtype, shape: i.shape }];
        d = p.runWebGPUProgram(g, b, "float32"), f = p.runWebGPUProgram(x, b, "float32");
      }
      let h = yo({ inputs: { real: d, imag: f }, backend: p });
      return p.disposeData(d.dataId), p.disposeData(f.dataId), h;
    }
    let u = o || dt(a.dtype, i.dtype);
    if ((a.dtype === "string" || i.dtype === "string" || p.shouldExecuteOnCPU([a, i])) && t8 != null) {
      let l = p.tensorMap.get(a.dataId).values, m = p.tensorMap.get(i.dataId).values, d = a.dtype === "string" ? w.fromUint8ToStringArray(l) : l, f = a.dtype === "string" ? w.fromUint8ToStringArray(m) : m, [h, g] = t8(a.shape, i.shape, d, f, u);
      return p.makeTensorInfo(g, u, h);
    }
    let c = new ki(r, a.shape, i.shape);
    return p.runWebGPUProgram(c, [a, i], u);
  };
}
var { addImpl: sz, castImpl: az, ceilImpl: iz, concatImpl: uz, equalImpl: pz, expImpl: cz, expm1Impl: lz, floorImpl: mz, floorDivImpl: dz, gatherNdImpl: fz, gatherV2Impl: hz, greaterEqualImpl: gz, greaterImpl: xz, lessEqualImpl: yz, lessImpl: bz, logImpl: Cz, maxImpl: wz, maximumImpl: Sz, minimumImpl: Iz, multiplyImpl: vz, negImpl: kz, notEqualImpl: Nz, prodImpl: Tz, rangeImpl: _z, rsqrtImpl: $z, scatterImpl: Ez, simpleAbsImpl: Rz, sliceImpl: Dz, stridedSliceImpl: Az, stringNGramsImpl: Fz, subImpl: Pz, tileImpl: Oz, topKImpl: Mz, transposeImpl: Lz, uniqueImpl: HPt } = Tc;
var Uie = ye({ opType: Z.ABS, cpuKernelImpl: Rz });
var Bz = { kernelName: Xs, backendName: "webgpu", kernelFunc: Uie };
var Gie = ye({ opType: Z.ACOS });
var zz = { kernelName: Wo, backendName: "webgpu", kernelFunc: Gie };
var Hie = ye({ opType: Z.ACOSH });
var Vz = { kernelName: Uo, backendName: "webgpu", kernelFunc: Hie };
var Kie = et({ opType: fe.ADD, cpuKernelImpl: sz, supportsComplex: true });
var Wz = { kernelName: uo, backendName: "webgpu", kernelFunc: Kie };
var tx = class {
  constructor(t8) {
    this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8[0], this.variableNames = t8.map((e, o) => `T${o}`), this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.shaderKey = "addN";
  }
  getUserCode() {
    let t8 = [];
    this.variableNames.forEach((n) => {
      t8.push(`let v${n} = get${n}ByOutputCoords(coords);`);
    });
    let e = this.variableNames.map((n) => `v${n}`).join(" + ");
    return `
      ${G("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${t8.join(`
        `)}
            setOutputAtIndex(flatIndex, ${e});
          }
        }
      }
    `;
  }
};
function qie(r) {
  let { inputs: t8, backend: e } = r, o = t8;
  if (o.length === 1)
    return Ft({ inputs: { x: o[0] }, backend: e });
  let n = o.map((i) => i.dtype).reduce((i, p) => dt(i, p)), s = o.map((i) => i.shape), a = new tx(s);
  return e.runWebGPUProgram(a, o, n);
}
var Uz = { kernelName: Go, backendName: "webgpu", kernelFunc: qie };
var rx = class {
  constructor(t8, e) {
    this.variableNames = ["A"], this.workgroupSize = [16, 16, 1];
    let o = new Array(t8.length);
    for (let n = 0; n < o.length; n++)
      o[n] = t8[e[n]];
    this.outputShape = o, this.dispatchLayout = { x: [0], y: [1] }, this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]), this.shaderKey = "transposeShared";
  }
  getUserCode() {
    y.assert(this.workgroupSize[0] === this.workgroupSize[1], () => `Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);
    let t8 = this.workgroupSize[0];
    return `
      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${this.workgroupSize[0]}>;
      ${G()} {
        var x = i32(workgroupId.x) * ${t8} + i32(localId.x);
        var y = i32(workgroupId.y) * ${t8} + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = f32(A[y * width + x]);
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * ${t8} + i32(localId.x);
        y = i32(workgroupId.x) * ${t8} + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `;
  }
};
var ox = class {
  constructor(t8, e) {
    this.variableNames = ["A"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true;
    let o = new Array(t8.length);
    for (let n = 0; n < o.length; n++)
      o[n] = t8[e[n]];
    this.outputShape = o, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.newDim = e, this.shaderKey = `transpose_${e}`;
  }
  getUserCode() {
    let t8 = ht(this.outputShape.length), e = Zv(this.newDim);
    return `
      ${G("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${t8}(${e}), uniforms.aShape)]);
          }
        }
      }
    `;
  }
};
function Zv(r) {
  let t8 = r.length;
  if (t8 > 6)
    throw Error(`Transpose for rank ${t8} is not yet supported`);
  let e = new Array(t8);
  for (let o = 0; o < r.length; o++)
    e[r[o]] = `coords.${Mo(o)}`;
  return e.join();
}
function yr(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { perm: s } = o, a = e, i = n.shape.length, p = new Array(i);
  for (let c = 0; c < p.length; c++)
    p[c] = n.shape[s[c]];
  if (e.shouldExecuteOnCPU([n])) {
    let l = a.tensorMap.get(n.dataId).values, m = Lz(l, n.shape, n.dtype, s, p);
    return e.makeTensorInfo(p, n.dtype, m);
  }
  if (n.shape.length === 2 && y.arraysEqual(s, [1, 0])) {
    let c = new rx(n.shape, s);
    return a.runWebGPUProgram(c, [n], n.dtype);
  }
  let u = new ox(n.shape, s);
  return a.runWebGPUProgram(u, [n], n.dtype);
}
var Gz = { kernelName: co, backendName: "webgpu", kernelFunc: yr };
var nx = class {
  constructor(t8, e, o) {
    this.variableNames = ["x"], this.uniforms = "reduceSize : i32,", this.size = true, this.inputShape = [t8.batchSize, t8.inSize];
    let [n] = w.computeOutAndReduceShapes(this.inputShape, [1]);
    this.outputShape = n.length === 0 ? [1] : n, t8.inSize >= 32768 && o >= 512 ? this.workgroupSize = [512, 1, 1] : t8.inSize >= 4096 ? this.workgroupSize = [256, 1, 1] : this.workgroupSize = [64, 1, 1], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, [1, 1, 1]), this.reduceType = e, this.shaderKey = `reduce_${e}`;
  }
  getUserCode() {
    let t8 = "", e = "0.0", o = this.workgroupSize[0];
    this.reduceType === "min" || this.reduceType === "max" ? (t8 = `
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType === "min" ? "<" : ">"} bestValue)
           {  bestValue = candidate; }`, e = "f32(x[offset])") : this.reduceType === "sum" || this.reduceType === "mean" ? t8 = " bestValue = bestValue + candidate; " : this.reduceType === "prod" ? (t8 = " bestValue = bestValue * candidate; ", e = "1.0") : this.reduceType === "all" ? (t8 = " bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ", e = "1.0") : this.reduceType === "any" && (t8 = " bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ", e = "0.0");
    let n = this.reduceType === "mean" ? "setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));" : "setOutputAtIndex(outputIndex, bestValue);";
    return `
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${o}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length === 1 ? "outputCoords" : "outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${G("index")} {
         let outputIndex = index / ${o};
         let offset = getOffset(outputIndex);
         var bestValue = ${e};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), ${o}u);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + ${o}) {
           let candidate = f32(x[offset + k]);
           ${t8}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), ${o}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${t8}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${n}
        }
       }
     `;
  }
};
var jie = { mean: "float32", all: "bool", any: "bool" };
function eo(r, t8, e, o, n) {
  let s = r.shape.length, a = [], i = y.parseAxisParam(t8, r.shape), p = i, u = w.getAxesPermutation(p, s), c = r;
  u != null && (c = yr({ inputs: { x: r }, attrs: { perm: u }, backend: n }), p = w.getInnerMostAxes(p.length, s), a.push(c)), w.assertAxesAreInnerMostDims(o, p, s);
  let [l, m] = w.computeOutAndReduceShapes(c.shape, p), d = l;
  e && (d = w.expandShapeToKeepDim(l, i));
  let f;
  if ((o === "max" || o === "prod") && n.shouldExecuteOnCPU([c])) {
    let h = n.tensorMap.get(c.dataId).values;
    switch (o) {
      case "max":
        let g = wz(h, y.sizeFromShape(m), d, r.dtype);
        f = n.makeTensorInfo(d, r.dtype, g);
        break;
      case "prod":
        let { outVals: x, outShape: b, outDtype: C } = Tz(c.shape, c.dtype, h, p);
        f = n.makeTensorInfo(b, C, x);
        break;
      default:
        throw new Error(`${o} CPU implementation is not yet supported.`);
    }
  } else {
    let h = y.sizeFromShape(m), x = y.sizeFromShape(c.shape) / h, b = { windowSize: h, inSize: h, batchSize: x, outSize: 1 }, C = jie[o] || ni(r.dtype), S = [{ type: "int32", data: [h] }], k = new nx(b, o, n.device.limits.maxComputeWorkgroupSizeX), _ = n.runWebGPUProgram(k, [c], C, S);
    a.push(_), f = pe({ inputs: { x: _ }, attrs: { shape: d }, backend: n });
  }
  return a.forEach((h) => n.disposeData(h.dataId)), f;
}
function Xie(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { keepDims: s, axis: a } = o;
  return eo(n, a, s, "all", e);
}
var Hz = { kernelName: Ho, backendName: "webgpu", kernelFunc: Xie };
function Yie(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { keepDims: s, axis: a } = o;
  return eo(n, a, s, "any", e);
}
var Kz = { kernelName: Ko, backendName: "webgpu", kernelFunc: Yie };
var Zc = class {
  constructor(t8, e, o) {
    this.workgroupSize = [64, 1, 1], this.variableNames = ["x"], this.uniforms = "infinityValue : f32,", this.size = true;
    let n = [e];
    this.op = o === "min" ? "<" : ">";
    let [s, a] = w.computeOutAndReduceShapes(t8, n);
    this.outputShape = s.length === 0 ? [1] : s, this.dispatchLayout = X(this.outputShape), y.sizeFromShape(a) < 32 ? (this.type = "plain", this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize)) : (this.type = "shared", this.dispatch = H(this.dispatchLayout, this.outputShape, [1, 1, 1])), this.inputShape = t8, this.shaderKey = `argMinMax_${this.op}_${this.type}`;
  }
  getUserCode() {
    let t8 = this.workgroupSize[0], e = () => this.inputShape.length === 1 ? "uniforms.xShape" : `uniforms.xShape.${Mo(this.inputShape.length - 1)}`, o = () => {
      let n = "";
      if (this.outputShape.length === 1)
        this.inputShape.length !== 1 && (n += "outputCoords,");
      else
        for (let s = 0; s < this.outputShape.length; s++)
          n += `outputCoords.${Mo(s)},`;
      return n;
    };
    return this.type === "shared" ? `
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${t8}>;
      var<workgroup> xBestValues : array<f32, ${t8}>;
    `}

      ${G("index")} {
        let outputIndex = index / ${t8};
        let reduceLength = ${e()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + ${t8}) {
          let candidate = getX(${o()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), ${t8}u);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    ` : `
      ${G("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${o()} 0);
          let reduceLength = ${e()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${o()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `;
  }
};
function Qie(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s } = o, a = y.parseAxisParam(s, n.shape), i = w.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = yr({ inputs: { x: n }, backend: e, attrs: { perm: i } }), u.push(p), a = w.getInnerMostAxes(a.length, p.shape.length)), w.assertAxesAreInnerMostDims("argMax", [a[0]], p.shape.length);
  let c = new Zc(p.shape, a[0], "max"), l = [{ type: "float32", data: [Number.NEGATIVE_INFINITY] }], m = e.runWebGPUProgram(c, [p], "int32", l);
  return u.forEach((d) => e.disposeData(d.dataId)), m;
}
var qz = { kernelName: Ys, backendName: "webgpu", kernelFunc: Qie };
function Zie(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s } = o, a = y.parseAxisParam(s, n.shape), i = w.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = yr({ inputs: { x: n }, backend: e, attrs: { perm: i } }), u.push(p), a = w.getInnerMostAxes(a.length, p.shape.length)), w.assertAxesAreInnerMostDims("argMin", [a[0]], p.shape.length);
  let c = new Zc(p.shape, a[0], "min"), l = [{ type: "float32", data: [Number.POSITIVE_INFINITY] }], m = e.runWebGPUProgram(c, [p], "int32", l);
  return u.forEach((d) => e.disposeData(d.dataId)), m;
}
var jz = { kernelName: Qs, backendName: "webgpu", kernelFunc: Zie };
var Jie = ye({ opType: Z.ASIN });
var Xz = { kernelName: qo, backendName: "webgpu", kernelFunc: Jie };
var eue = ye({ opType: Z.ASINH });
var Yz = { kernelName: jo, backendName: "webgpu", kernelFunc: eue };
var tue = ye({ opType: Z.ATAN });
var Qz = { kernelName: Xo, backendName: "webgpu", kernelFunc: tue };
var rue = et({ opType: fe.ATAN2 });
var Zz = { kernelName: Qo, backendName: "webgpu", kernelFunc: rue };
var oue = ye({ opType: Z.ATANH });
var Jz = { kernelName: Yo, backendName: "webgpu", kernelFunc: oue };
var sx = class {
  constructor(t8) {
    this.variableNames = ["x"], this.uniforms = "strides : vec2<i32>,", this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = t8.outShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "poolWithFilterSizeEqualsOne";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.strides;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `;
  }
};
var za = class {
  constructor(t8, e, o = false, n = false, s = false) {
    if (this.variableNames = ["x"], this.uniforms = "strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,", this.workgroupSize = [128, 1, 1], this.size = true, e === "avg" && o)
      throw new Error("Cannot compute positions for average pool.");
    this.outputShape = t8.outShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.poolType = e, this.computePositions = o, this.flattenPositions = n, this.includeBatchIndex = s, this.shaderKey = `pool2D_${e}_${o}_${n}_${s}`;
  }
  getUserCode() {
    let t8;
    this.poolType === "avg" ? t8 = "resultValue = resultValue + value; count = count + 1.0;" : this.computePositions ? t8 = `let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions ? this.includeBatchIndex ? "((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d" : "(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d" : "wR * uniforms.filterDims.y + wC"};
      }` : t8 = "resultValue = max(value, resultValue);";
    let e = "resultValue";
    return this.poolType === "avg" && (e = "resultValue / max(count, 1.0)"), `
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          ${this.computePositions ? `var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;` : `var resultValue = ${this.poolType === "avg" ? "0.0" : "-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, d);
              ${t8}
            }
          }

          ${this.computePositions ? "setOutputAtIndexI32(index, maxPosition);" : `setOutputAtIndex(index, ${e});`}
        }
      }
    `;
  }
};
var _u = class {
  constructor(t8, e, o = false, n = false, s = false) {
    if (this.variableNames = ["x"], this.uniforms = "strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,", this.workgroupSize = [128, 1, 1], this.size = true, e === "avg" && o)
      throw new Error("Cannot compute positions for average pool.");
    this.outputShape = t8.outShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.poolType = e, this.computePositions = o, this.flattenPositions = n, this.includeBatchIndex = s, this.shaderKey = `pool3D_${e}_${o}_${n}_${s}`;
  }
  getUserCode() {
    let t8;
    this.poolType === "avg" ? t8 = "resultValue += value; count += 1.0;" : this.computePositions ? t8 = `let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions ? this.includeBatchIndex ? "(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch" : "((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch" : "wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};
      }` : t8 = "resultValue = max(value, resultValue);";
    let e = "resultValue";
    return this.poolType === "avg" && (e = "resultValue / max(count, 1.0)"), `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords.x;
          let ch = coords.u;

          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
          let xDCorner = xCorner.x;
          let xRCorner = xCorner.y;
          let xCCorner = xCorner.z;

          ${this.computePositions ? `var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;` : `var resultValue = ${this.poolType === "avg" ? "0.0" : "-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {
            let xD = xDCorner + wD;
            if (xD < 0 || xD >= uniforms.convDims.x) {
              continue;
            }

            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {
              let xR = xRCorner + wR;
              if (xR < 0 || xR >= uniforms.convDims.y) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {
                let xC = xCCorner + wC;
                if (xC < 0 || xC >= uniforms.convDims.z) {
                  continue;
                }

                let value = getX(batch, xD, xR, xC, ch);
                ${t8}
              }
            }
          }

          ${this.computePositions ? "setOutputAtIndexI32(index, maxPosition);" : `setOutputAtIndex(index, ${e});`}
        }
      }
    `;
  }
};
function Jv(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { reductionIndices: s, keepDims: a } = o;
  return eo(n, s, a, "max", e);
}
var eV = { kernelName: Vn, backendName: "webgpu", kernelFunc: Jv };
function e0(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { keepDims: s, axis: a } = o;
  return eo(n, a, s, "mean", e);
}
var tV = { kernelName: Gn, backendName: "webgpu", kernelFunc: e0 };
function ax(r, t8, e, o) {
  if (t8.filterWidth === 1 && t8.filterHeight === 1 && y.arraysEqual(t8.inShape, t8.outShape))
    return Ft({ inputs: { x: r }, backend: o });
  if (t8.filterWidth === t8.inWidth && t8.filterHeight === t8.inHeight && t8.batchSize === 1 && t8.padInfo.type === "VALID") {
    let a = r.shape.length, i = pe({ inputs: { x: r }, backend: o, attrs: { shape: [r.shape[a - 3] * r.shape[a - 2], r.shape[a - 1]] } }), p;
    e === "avg" ? p = e0({ inputs: { x: i }, backend: o, attrs: { axis: 0, keepDims: false } }) : (y.assert(e === "max", () => `Invalid pool type ${e}`), p = Jv({ inputs: { x: i }, backend: o, attrs: { reductionIndices: 0, keepDims: false } }));
    let u = pe({ inputs: { x: p }, backend: o, attrs: { shape: t8.outShape } });
    return o.disposeData(i.dataId), o.disposeData(p.dataId), u;
  }
  let n, s = [{ type: "int32", data: [t8.strideHeight, t8.strideWidth] }];
  return t8.filterHeight === 1 && t8.filterWidth === 1 ? n = new sx(t8) : (e === "avg" ? n = new za(t8, "avg") : (y.assert(e === "max", () => `Invalid pool type ${e}`), n = new za(t8, "max")), s.push({ type: "int32", data: [t8.padInfo.top, t8.padInfo.left] }, { type: "int32", data: [t8.dilationHeight, t8.dilationWidth] }, { type: "int32", data: [t8.inHeight, t8.inWidth] }, { type: "int32", data: [t8.effectiveFilterHeight, t8.effectiveFilterWidth] })), o.runWebGPUProgram(n, [r], r.dtype, s);
}
function nue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1, c = w.computePool2DInfo(n.shape, s, a, u, i, p);
  return ax(n, c, "avg", e);
}
var rV = { kernelName: Zo, backendName: "webgpu", kernelFunc: nue };
function sue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dataFormat: p, dimRoundingMode: u } = o, c = [1, 1, 1], l = w.computePool3DInfo(n.shape, s, a, c, i, u, p), m = new _u(l, "avg"), d = [{ type: "int32", data: [l.strideDepth, l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.padInfo.front, l.padInfo.top, l.padInfo.left] }, { type: "int32", data: [l.inDepth, l.inHeight, l.inWidth] }, { type: "int32", data: [l.effectiveFilterDepth, l.effectiveFilterHeight, l.effectiveFilterWidth] }];
  return e.runWebGPUProgram(m, [n], n.dtype, d);
}
var oV = { kernelName: Zs, backendName: "webgpu", kernelFunc: sue };
var ix = class {
  constructor(t8) {
    this.variableNames = ["dy"], this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, avgMultiplier : f32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.inShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "avgPool2DBackprop";
  }
  getUserCode() {
    return `
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);

            dotProd = dotProd + dyValue * uniforms.avgMultiplier;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
};
var ux = class {
  constructor(t8) {
    this.variableNames = ["dy"], this.uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.inShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "avgPool3DBackprop";
  }
  getUserCode() {
    return `
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              dotProd += dyValue * uniforms.avgMultiplier;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
};
function aue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, a = s, { filterSize: i, strides: p, pad: u, dimRoundingMode: c } = o, l = w.computePool3DInfo(a.shape, i, p, 1, u, c), m = new ux(l), d = 1 / (l.filterDepth * l.filterHeight * l.filterWidth), f = [{ type: "int32", data: [l.strideDepth, l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.effectiveFilterDepth - 1 - l.padInfo.front, l.effectiveFilterHeight - 1 - l.padInfo.top, l.effectiveFilterWidth - 1 - l.padInfo.left] }, { type: "int32", data: [l.effectiveFilterDepth, l.effectiveFilterHeight, l.effectiveFilterWidth] }, { type: "int32", data: [l.outDepth] }, { type: "int32", data: [l.outHeight] }, { type: "int32", data: [l.outWidth] }, { type: "float32", data: [d] }];
  return e.runWebGPUProgram(m, [n], a.dtype, f);
}
var nV = { kernelName: Ai, backendName: "webgpu", kernelFunc: aue };
function iue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, a = s;
  fm([n, s], "avgPoolGrad");
  let { filterSize: i, strides: p, pad: u } = o, c = w.computePool2DInfo(a.shape, i, p, 1, u), l = new ix(c), m = 1 / (c.filterHeight * c.filterWidth), d = [{ type: "int32", data: [c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.effectiveFilterHeight - 1 - c.padInfo.top, c.effectiveFilterWidth - 1 - c.padInfo.left] }, { type: "int32", data: [c.dilationHeight, c.dilationWidth] }, { type: "int32", data: [c.effectiveFilterHeight, c.effectiveFilterWidth] }, { type: "int32", data: [c.outHeight] }, { type: "int32", data: [c.outWidth] }, { type: "float32", data: [m] }];
  return e.runWebGPUProgram(l, [n], a.dtype, d);
}
var sV = { kernelName: Di, backendName: "webgpu", kernelFunc: iue };
function uue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { a: n, b: s } = t8, { transposeA: a, transposeB: i } = o;
  return Op({ a: n, b: s, transposeA: a, transposeB: i, backend: e });
}
var aV = { kernelName: Jo, backendName: "webgpu", kernelFunc: uue };
var px = class {
  constructor(t8, e) {
    this.variableNames = ["source"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.rank = e.length, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.start = t8, this.uniforms = `start : ${ht(t8.length)}, `, this.shaderKey = "slice";
  }
  getUserCode() {
    let t8 = ht(this.rank), e = pue(this.rank), o;
    return this.start.length === 1 ? o = this.outputShape.map((s, a) => "sourceLoc = uniforms.start + coords;") : o = this.outputShape.map((s, a) => `sourceLoc.${t0[a]} = uniforms.start.${Mo(a)} + coords.${t0[a]};`), `
      ${G("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${t8};
          let coords = getCoordsFromIndex(index);
          ${o.join(`
`)}
          setOutputAtIndex(index, getSource(${e}));
        }
      }
    `;
  }
};
var t0 = ["x", "y", "z", "w", "u", "v"];
function pue(r) {
  if (r === 1)
    return "sourceLoc";
  if (r <= 6)
    return t0.slice(0, r).map((t8) => `sourceLoc.${t8}`).join(",");
  throw Error(`Slicing for rank ${r} is not yet supported`);
}
function Hs(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { begin: s, size: a } = o, [i, p] = ct.parseSliceParams(n, s, a);
  if (ct.assertParamsValid(n, i, p), e.shouldExecuteOnCPU([n]) || n.dtype === "string") {
    let l = e.tensorMap.get(n.dataId), m = Dz(l.values, i, p, n.shape, n.dtype);
    return e.makeTensorInfo(p, n.dtype, m);
  }
  if (y.sizeFromShape(p) === 0)
    return e.makeTensorInfo(p, n.dtype, []);
  let u = new px(i, p), c = [{ type: "int32", data: i }];
  return e.runWebGPUProgram(u, [n], n.dtype, c);
}
var iV = { kernelName: ha, backendName: "webgpu", kernelFunc: Hs };
var cue = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockShape: s, crops: a } = o;
  y.assert(n.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");
  let i = s.reduce((b, C) => b * C), p = w.getReshaped(n.shape, s, i), u = w.getPermuted(p.length, s.length), c = w.getReshapedPermuted(n.shape, s, i), l = w.getSliceBeginCoords(a, s.length), m = w.getSliceSize(c, a, s.length), d = [], f = pe({ inputs: { x: n }, backend: e, attrs: { shape: p } }), h = yr({ inputs: { x: f }, backend: e, attrs: { perm: u } }), g = pe({ inputs: { x: h }, backend: e, attrs: { shape: c } }), x = Hs({ inputs: { x: g }, backend: e, attrs: { begin: l, size: m } });
  return d.push(f), d.push(h), d.push(g), d.forEach((b) => e.disposeData(b.dataId)), x;
};
var uV = { kernelName: Js, backendName: "webgpu", kernelFunc: cue };
var lue = `
  fn bincount_write(index: i32, value: f32) {
    ${Qr("&result[index]", "value", "float32")}
  }
`;
var mue = `
  fn bincount_write(index: i32, value: f32) {
    atomicStore(&result[index], bitcast<i32>(value));
  }
`;
var Jc = class {
  constructor(t8, e, o = false) {
    this.outputShape = [], this.variableNames = ["x"], this.uniforms = "binCountSize : i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.hasWeights = true, this.binaryOutput = false, this.outputShape = t8, this.rank = t8.length, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.binaryOutput = o, o && (this.atomic = false), this.hasWeights = e, this.hasWeights && this.variableNames.push("w"), this.shaderKey = `bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`;
  }
  getUserCode() {
    return `
    ${this.binaryOutput ? mue : lue}
  ${G("index")} {
    ${this.rank === 1 ? `if (index < uniforms.xShape) {
      let indexVal = i32(getX(index));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput ? 1 : this.hasWeights ? "getW(index)" : "1."};
        bincount_write(indexVal, value);
      }
    }` : `let coord = getCoordsFromIndex(index);
    if (coordsInBounds2D(coord, uniforms.xShape)) {
      let indexVal = i32(getX(coord[0], coord[1]));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput ? 1 : this.hasWeights ? "getW(coord[0], coord[1])" : "1."};
        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);
      }
    }`}
  }
  `;
  }
};
function due(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, weights: s } = t8, { size: a } = o, i = y.sizeFromShape(n.shape), u = y.sizeFromShape(s.shape) > 0, c = [a], l = s.dtype, m = kt({ backend: e, attrs: { shape: c, value: 0, dtype: l } }), d = new Jc([i], u), f = [{ type: "int32", data: [a] }], h = u ? [n, s] : [n];
  return e.runWebGPUProgram(d, h, l, f, m);
}
var pV = { kernelName: en, backendName: "webgpu", kernelFunc: due };
var cx = class {
  constructor(t8) {
    this.outputShape = [], this.variableNames = ["s0", "s1"], this.uniforms = "s0Size : i32, s1Size : i32, ", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [t8], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "broadcastArgs";
  }
  getUserCode() {
    return `
  ${G("index")} {
    if (index < uniforms.size) {
      var s0 = 1.0;
      var s1 = 1.0;
      let indexS0 = index - uniforms.size + uniforms.s0Size;
      let indexS1 = index - uniforms.size + uniforms.s1Size;
      if (indexS0 >= 0) {
        s0 = getS0(indexS0);
      }
      if (indexS1 >= 0) {
        s1 = getS1(indexS1);
      }

      if (s0 == 1.0) {
        setOutputAtIndex(index, s1);
      } else if (s1 == 1.0) {
        setOutputAtIndex(index, s0);
      } else if (s0 != s1) {
        setOutputAtIndex(index, uniforms.NAN);
      } else {
        setOutputAtIndex(index, s0);
      }
    }
  }
  `;
  }
};
function fue(r) {
  let { inputs: t8, backend: e } = r, { s0: o, s1: n } = t8;
  if (e.shouldExecuteOnCPU([o, n])) {
    let c = e.tensorMap.get(o.dataId), l = e.tensorMap.get(n.dataId), m = c.values, d = l.values, f = w.assertAndGetBroadcastShape(Array.from(m), Array.from(d));
    return e.makeTensorInfo([f.length], "int32", Int32Array.from(f));
  }
  let s = y.sizeFromShape(o.shape), a = y.sizeFromShape(n.shape), i = Math.max(s, a), p = new cx(i), u = [{ type: "int32", data: [s] }, { type: "int32", data: [a] }];
  return e.runWebGPUProgram(p, [o, n], "int32", u);
}
var cV = { kernelName: ea, backendName: "webgpu", kernelFunc: fue };
var r0 = et({ opType: fe.NOT_EQUAL, dtype: "bool", cpuKernelImpl: Nz });
var lV = { kernelName: Qn, backendName: "webgpu", kernelFunc: r0 };
function Ni(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8, n = e.tensorMap.get(o.dataId);
  return Ft({ inputs: { x: n.complexTensorInfos.real }, backend: e });
}
var mV = { kernelName: qi, backendName: "webgpu", kernelFunc: Ni };
function dV(r, t8) {
  let e = new Jr(r.shape, Z.TO_INT), o = t8.runWebGPUProgram(e, [r], "int32");
  return { dataId: o.dataId, shape: o.shape, dtype: o.dtype };
}
function o0(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { dtype: s } = o;
  if (s === "complex64") {
    if (n.dtype === "complex64")
      return Ft({ inputs: { x: n }, backend: e });
    let a = Gr(n.shape), i = o0({ inputs: { x: n }, backend: e, attrs: { dtype: "float32" } }), p = yo({ inputs: { real: i, imag: a }, backend: e });
    return a.dispose(), e.disposeData(i.dataId), p;
  }
  if (n.dtype === "complex64") {
    let a = Ni({ inputs: { input: n }, backend: e }), i = o0({ inputs: { x: a }, backend: e, attrs: { dtype: s } });
    return e.disposeData(a.dataId), i;
  }
  if (!y.hasEncodingLoss(n.dtype, s)) {
    let a = Ft({ inputs: { x: n }, backend: e });
    return { dataId: a.dataId, shape: a.shape, dtype: s };
  }
  if (e.shouldExecuteOnCPU([n])) {
    let a = e.tensorMap.get(n.dataId).values, [i, p, u] = az(a, n.shape, n.dtype, s);
    return e.makeTensorInfo(i, p, u);
  }
  if (s === "int32")
    return dV(n, e);
  if (s === "bool") {
    let a = e.makeTensorInfo([], "bool", y.getTypedArrayFromDType("bool", 1)), p = r0({ inputs: { a: n, b: a }, backend: e });
    return e.disposeData(a.dataId), p;
  }
  throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`);
}
var fV = { kernelName: bo, backendName: "webgpu", kernelFunc: o0 };
var hue = ye({ opType: Z.CEIL, cpuKernelImpl: iz });
var hV = { kernelName: tn, backendName: "webgpu", kernelFunc: hue };
var lx = class {
  constructor(t8) {
    this.variableNames = ["A"], this.uniforms = "minVal : f32, maxVal : f32,", this.workPerThread = 4, this.workgroupSize = [64, 1, 1], this.outputComponent = 4, this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.shaderKey = "clipVec4";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue = clamp(
              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));
          clampedValue = select(clampedValue, value, isnanVec4(value));
          setOutputAtIndex(index, clampedValue);
        }
      }
    `;
  }
};
var mx = class {
  constructor(t8) {
    this.variableNames = ["A"], this.uniforms = "minVal : f32, maxVal : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "clip";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `;
  }
};
function gue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { clipValueMin: s, clipValueMax: a } = o, i, p = [{ type: "float32", data: [s] }, { type: "float32", data: [a] }];
  return y.sizeFromShape(n.shape) % 4 === 0 ? i = new lx(n.shape) : i = new mx(n.shape), e.runWebGPUProgram(i, [n], n.dtype, p);
}
var gV = { kernelName: Co, backendName: "webgpu", kernelFunc: gue };
var dx = class {
  constructor(t8) {
    this.outputShape = [], this.variableNames = ["real", "imag"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "complexAbs";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.size) {
        let re = abs(getRealByOutputIndex(index));
        let im = abs(getImagByOutputIndex(index));
        let mx = max(re, im);

        // The length function in wgsl may be not underflow-safe on some GPUs.
        // So the safe solution is to ensure underflow-safety in all cases.
        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));
      }
    }
  `;
  }
};
function xV(r, t8) {
  return { dataId: t8.dataId, dtype: t8.dtype, shape: r.shape };
}
function xue(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8, n = e.tensorMap.get(o.dataId), s = new dx(o.shape), a = [xV(o, n.complexTensorInfos.real), xV(o, n.complexTensorInfos.imag)];
  return e.runWebGPUProgram(s, a, a[0].dtype);
}
var yV = { kernelName: Pi, backendName: "webgpu", kernelFunc: xue };
var fx = class {
  constructor(t8) {
    this.uniforms = "", this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = w.computeOutShape(t8, 1), this.variableNames = t8.map((e, o) => `T${o}`), this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.offsetLength = t8.length - 1;
    for (let e = 0; e < this.offsetLength; e++)
      this.uniforms += `offset${e} : i32,`;
    this.shaderKey = "concat";
  }
  getUserCode() {
    let t8 = [];
    if (this.offsetLength > 0) {
      t8.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");
      for (let s = 1; s < this.offsetLength; s++)
        t8.push(`else if (yC < uniforms.offset${[s]}){ setOutputAtCoords(coords.x, coords.y, getT${s}(yR, yC - uniforms.offset${s - 1})); }`);
      let o = this.offsetLength, n = this.offsetLength - 1;
      t8.push(`else { setOutputAtCoords(coords.x, coords.y, getT${o}(yR, yC - uniforms.offset${n})); }`);
    } else
      t8.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");
    return `
      ${G("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${t8.join(`
        `)}
          }
        }
      }
    `;
  }
};
function Mp(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8, n = e.tensorMap.get(o.dataId);
  return Ft({ inputs: { x: n.complexTensorInfos.imag }, backend: e });
}
var bV = { kernelName: Gi, backendName: "webgpu", kernelFunc: Mp };
function el(r, t8, e) {
  let o = r[0].dtype;
  if (o === "complex64") {
    let f = r.map((C) => Ni({ inputs: { input: C }, backend: e })), h = r.map((C) => Mp({ inputs: { input: C }, backend: e })), g = el(f, t8, e), x = el(h, t8, e), b = yo({ inputs: { real: g, imag: x }, backend: e });
    return f.forEach((C) => e.disposeData(C.dataId)), h.forEach((C) => e.disposeData(C.dataId)), e.disposeData(g.dataId), e.disposeData(x.dataId), b;
  }
  let n = e.shouldExecuteOnCPU(r);
  if (o === "string" && (n = true), n) {
    let f = r.map((k) => {
      let E = [-1, y.sizeFromShape(k.shape.slice(t8))];
      return pe({ inputs: { x: k }, backend: e, attrs: { shape: E } });
    }), h = f.map((k) => ({ vals: e.readSync(k.dataId), shape: k.shape })), g = w.computeOutShape(f.map((k) => k.shape), 1), x = f[0].shape[0] === 1, b = uz(h, g, o, x), C = w.computeOutShape(r.map((k) => k.shape), t8), S = e.makeTensorInfo(C, o, b);
    return f.forEach((k) => e.disposeData(k.dataId)), S;
  }
  let s = e.device.limits.maxStorageBuffersPerShaderStage - 1;
  if (r.length > s) {
    let f = [];
    for (let g = 0; g < r.length; g += s) {
      let x = r.slice(g, g + s);
      f.push(el(x, t8, e));
    }
    let h = el(f, t8, e);
    for (let g of f)
      e.disposeData(g.dataId);
    return h;
  }
  let { tensors2D: a, outShape: i } = yue(r, t8, e), p = a.map((f) => f.shape), u = new fx(p), c = [], l = new Array(p.length - 1);
  if (l.length > 0) {
    l[0] = p[0][1], c.push({ type: "int32", data: [l[0]] });
    for (let f = 1; f < l.length; f++)
      l[f] = l[f - 1] + p[f][1], c.push({ type: "int32", data: [l[f]] });
  }
  let m = e.runWebGPUProgram(u, a, a[0].dtype, c);
  a.forEach((f) => e.disposeData(f.dataId));
  let d = pe({ inputs: { x: m }, backend: e, attrs: { shape: i } });
  return e.disposeData(m.dataId), d;
}
function yue(r, t8, e) {
  let o = w.computeOutShape(r.map((s) => s.shape), t8);
  return { tensors2D: r.map((s) => pe({ inputs: { x: s }, backend: e, attrs: { shape: [y.sizeFromShape(s.shape.slice(0, t8)), y.sizeFromShape(s.shape.slice(t8))] } })), outShape: o };
}
function n0(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { axis: n } = o, s = y.parseAxisParam(n, t8[0].shape)[0], a = t8.map((u) => u.shape);
  w.assertParamsConsistent(a, s);
  let i = w.computeOutShape(t8.map((u) => u.shape), s);
  if (y.sizeFromShape(i) === 0)
    return e.makeTensorInfo(i, t8[0].dtype, []);
  let p = t8.filter((u) => y.sizeFromShape(u.shape) > 0);
  return p.length === 1 ? Ft({ inputs: { x: p[0] }, backend: e }) : el(p, s, e);
}
var CV = { kernelName: ta, backendName: "webgpu", kernelFunc: n0 };
function bue(r, t8, e, o, n = false, s = null, a = false, i = 4, p = 4, u = 4) {
  let c = (D) => {
    switch (D) {
      case 1:
        return "resData = f32(x[xIndex]);";
      case 3:
        return "resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";
      case 4:
        return "resData = vec4<f32>(x[xIndex / 4]);";
      default:
        throw new Error(`innerElementSize ${D} is not supported.`);
    }
  }, l = (D) => {
    switch (D) {
      case 1:
        return "return f32(W[row * uniforms.wShape[3] + col]);";
      case 4:
        return "return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";
      default:
        throw new Error(`innerElementSize ${D} is not supported.`);
    }
  }, m = r ? `
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      ` : `
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `, d = r ? `
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      ` : `
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `, f = r ? "uniforms.xShape[1]" : "uniforms.xShape[2]", h = r ? "uniforms.xShape[2]" : "uniforms.xShape[3]", g = r ? "row" : "col", x = r ? "col" : "row", b = `
      let inChannels = uniforms.wShape[2];
      let outWidth = ${r ? "uniforms.outShape[2]" : "uniforms.outShape[3]"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${x} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${x} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];
      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];
      let xCh = ${x} % inChannels;
      var resData = ${Ae(i)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${h}) {
        ${m}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${c(i)}
      }
      return resData;`, C = r ? t8 && o ? `
      ${b}` : `
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${Ae(i)}(0.0);` : o && e ? `
      ${b}` : `
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${Ae(i)}(0.0);`, S = `${l(p)}`, k = Ae(u), _ = r ? Ae(i) : Ae(p), E = r ? Ae(p) : Ae(i);
  return `
      ${fr(s, a, u === 4, 4)}
      fn mm_readA(batch: i32, row : i32, col : i32) -> ${_} {
        ${r ? C : S}
      }

      fn mm_readB(batch: i32, row : i32, col : i32) -> ${E} {
        ${r ? S : C}
      }

      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${k}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${r ? "uniforms.outShape[2]" : "uniforms.outShape[3]"};
        ${d}
        ${Zr(n, s)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`;
}
var hx = class {
  constructor(t8, e, o, n, s = false, a = null, i = false, p = false) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = t8.outShape, this.isChannelsLast = t8.dataFormat === "channelsLast", this.isVec4 = ((t8.inChannels % 4 === 0 || t8.inChannels % 3 === 0) && this.isChannelsLast || t8.outWidth % 4 === 0 && !this.isChannelsLast) && t8.outChannels % 4 === 0, this.dispatchLayout = this.isChannelsLast ? { x: [3], y: [1, 2], z: [0] } : { x: [2, 3], y: [1], z: [0] }, this.workgroupSize = lm(this.dispatchLayout, this.outputShape, this.isVec4), this.elementsPerThread = mm(this.dispatchLayout, this.outputShape, this.isVec4), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread), this.isVec4 ? (this.outputComponent = 4, this.isChannelsLast && t8.inChannels % 4 !== 0 ? (this.innerElementSize = 3, this.variableComponents = [1, 4]) : (this.innerElementSize = 4, this.variableComponents = [4, 4]), s && (this.variableNames.push("bias"), this.variableComponents.push(4)), i && (this.variableNames.push("preluActivationWeights"), this.variableComponents.push(4))) : (this.innerElementSize = this.elementsPerThread[0], s && this.variableNames.push("bias"), i && this.variableNames.push("preluActivationWeights")), this.sequentialAccessByThreads = p, this.addBias = s, this.activation = a, this.hasPreluActivationWeights = i, this.tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1], this.tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0], this.tileInner = Math.max(this.workgroupSize[0] * this.innerElementSize, this.workgroupSize[1]), this.fitAOuter = e % this.tileAOuter === 0, this.fitBOuter = o % this.tileBOuter === 0, this.fitInner = n % this.tileInner === 0, this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`;
  }
  getUserCode() {
    let t8 = this.isVec4 ? Fp(this.elementsPerThread, this.workgroupSize, !this.isChannelsLast, this.tileInner) : Pp(this.elementsPerThread, this.workgroupSize, !this.isChannelsLast, this.tileInner, false, null, this.sequentialAccessByThreads), e = this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];
    return `
    ${bue(this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner, this.addBias, this.activation, this.hasPreluActivationWeights, e[0], e[1], e[2])}
    ${t8}
  `;
  }
};
var gx = class {
  constructor(t8, e = false, o = null, n = false) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,", this.workgroupSize = [4, 4, 8], this.outputShape = t8.outShape, this.isChannelsLast = t8.dataFormat === "channelsLast", this.dispatchLayout = this.isChannelsLast ? { x: [2], y: [1], z: [0, 3] } : { x: [3], y: [2], z: [0, 1] }, this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.addBias = e, this.activation = o, this.hasPreluActivationWeights = n, e && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), this.shaderKey = `conv2dnaive_${this.activation}_${this.isChannelsLast}`;
  }
  getUserCode() {
    return `
       ${fr(this.activation, this.hasPreluActivationWeights, false, 4)}
       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{
         let coords = vec4<i32>(batch, row, col, chan);
         if (coordsInBounds4D(coords, uniforms.xShape)) {
           return  getX(batch, row, col, chan);
         } else {
          return 0.0;
         }
       }
       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
         let coords = vec4<i32>(row, col, xChannel, outChannel);
         if(coordsInBounds4D(coords, uniforms.wShape)) {
           return getW(row, col, xChannel, outChannel);
          } else {
            return 0.0;
          }
       }
       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {
         let coords = ${this.isChannelsLast ? "vec4<i32>(batch, row, col, chan);" : "vec4<i32>(batch, chan, row, col);"}
         if (coordsInBounds4D(coords, uniforms.outShape)) {
           var value = valueIn;
           ${Zr(this.addBias, this.activation)}
           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);
         }
       }
       ${G("index")} {
         let coords = getOutputCoords();
         let batch = coords[0];
         let outChannel = ${this.isChannelsLast ? "coords[3];" : "coords[1];"}
         let outRow = ${this.isChannelsLast ? "coords[1];" : "coords[2];"}
         let outCol = ${this.isChannelsLast ? "coords[2];" : "coords[3];"}
         var acc : f32 = 0.0;
         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];
             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];
             for (var xChannel = 0; xChannel < ${this.isChannelsLast ? "uniforms.xShape[3];" : "uniforms.xShape[1];"} xChannel = xChannel + 1) {
               ${this.isChannelsLast ? "let v = readInp(batch, xRow, xCol, xChannel);" : "let v = readInp(batch, xChannel, xRow, xCol);"}
               let f = readFilt(row, col, xChannel, outChannel);
               acc = acc + v * f;
             }
           }
         }
         writeResult(batch, outRow, outCol, outChannel, acc);
       }
     `;
  }
};
var xx = class {
  constructor(t8, e) {
    this.variableNames = ["x"], this.uniforms = `pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
       inChannels : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = e, this.shaderKey = `im2col_${this.isChannelsLast}`;
  }
  getUserCode() {
    let t8 = this.isChannelsLast ? 1 : 2, e = this.isChannelsLast ? 2 : 3, o = this.isChannelsLast ? "coords[1]" : "coords[2]", n = this.isChannelsLast ? "coords[2]" : "coords[1]", s = this.isChannelsLast ? "getX(batch, xRow, xCol, ch)" : "getX(batch, ch, xRow, xCol)";
    return `
    ${G("index")} {
      let coords = getCoordsFromIndex(index);
      if(index < uniforms.size) {
        let batch = coords[0];
        let row = ${o};
        let col = ${n};
        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];
        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);
        var value = 0.0;
        if(xRow < uniforms.xShape[${t8}] && xRow >= 0) {
          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -
              uniforms.pads[1];
          let xCol = offsetX + uniforms.dilations[1] * ((col %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
          let ch = col % uniforms.inChannels;
          if(xCol < uniforms.xShape[${e}] && xCol >= 0) {
            value = ${s};
          }
        }
        setOutputAtIndex(index, value);
      }
    }
   `;
  }
};
function yx(r, t8) {
  let e = r.length;
  return e >= 3 ? t8 ? [...r.slice(0, -3), r[e - 3] * r[e - 2], r[e - 1]] : [...r.slice(0, -3), r[e - 3], r[e - 2] * r[e - 1]] : !t8 && e === 1 && r[0] > 1 ? [r[0], 1] : null;
}
function Cue({ x: r, filter: t8, convInfo: e, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let p = e.dataFormat === "channelsLast", u = !p, c = false, l = p && e.filterHeight === e.inHeight && e.filterWidth === e.inWidth && e.padInfo.type === "VALID", m = [], d, f;
  if (l) {
    let x = e.inHeight * e.inWidth * e.inChannels;
    d = pe({ inputs: { x: r }, backend: o, attrs: { shape: [1, e.batchSize, x] } }), f = pe({ inputs: { x: t8 }, backend: o, attrs: { shape: [1, x, e.outChannels] } });
  } else
    d = pe({ inputs: { x: r }, backend: o, attrs: { shape: p ? [e.batchSize, e.inHeight * e.inWidth, e.inChannels] : [e.batchSize, e.inChannels, e.inHeight * e.inWidth] } }), f = pe({ inputs: { x: t8 }, backend: o, attrs: { shape: [1, e.inChannels, e.outChannels] } });
  if (m.push(d), m.push(f), s != null) {
    let x = yx(s.shape, p);
    x != null && (s = pe({ inputs: { x: s }, backend: o, attrs: { shape: x } }), m.push(s));
  }
  if (n != null) {
    let x = yx(n.shape, p);
    x != null && (n = pe({ inputs: { x: n }, backend: o, attrs: { shape: x } }), m.push(n));
  }
  let h = Op({ a: p ? d : f, b: p ? f : d, transposeA: u, transposeB: c, backend: o, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a }), g = pe({ inputs: { x: h }, backend: o, attrs: { shape: e.outShape } });
  m.push(h);
  for (let x of m)
    o.disposeData(x.dataId);
  return g;
}
function wue({ x: r, filter: t8, convInfo: e, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let { filterWidth: p, filterHeight: u, inChannels: c, strideWidth: l, strideHeight: m, padInfo: d, outWidth: f, outHeight: h, dilationWidth: g, dilationHeight: x, dataFormat: b } = e, C = b === "channelsLast", S = p * u * c, k = h * f, _ = C ? [e.batchSize, k, S] : [e.batchSize, S, k], E = new xx(_, C), R = [{ type: "int32", data: [d.top, d.left] }, { type: "int32", data: [m, l] }, { type: "int32", data: [x, g] }, { type: "int32", data: [f] }, { type: "int32", data: [c * p] }, { type: "int32", data: [c] }], D = o.runWebGPUProgram(E, [r], r.dtype, R), P = [];
  P.push(D);
  let O = pe({ inputs: { x: t8 }, backend: o, attrs: { shape: [1, S, -1] } });
  if (P.push(O), s != null) {
    let U = yx(s.shape, C);
    U != null && (s = pe({ inputs: { x: s }, backend: o, attrs: { shape: U } }), P.push(s));
  }
  if (n != null) {
    let U = yx(n.shape, C);
    U != null && (n = pe({ inputs: { x: n }, backend: o, attrs: { shape: U } }), P.push(n));
  }
  let B = Op({ a: C ? D : O, b: C ? O : D, transposeA: !C, transposeB: false, backend: o, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a }), z = pe({ inputs: { x: B }, backend: o, attrs: { shape: e.outShape } });
  P.push(B);
  for (let U of P)
    o.disposeData(U.dataId);
  return z;
}
function bx({ x: r, filter: t8, convInfo: e, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let p = n != null, u = s != null, c = e.dataFormat === "channelsLast", l = c && e.filterHeight === e.inHeight && e.filterWidth === e.inWidth && e.padInfo.type === "VALID", m = A().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");
  if (!m && (l || e.filterHeight === 1 && e.filterWidth === 1 && e.dilationHeight === 1 && e.dilationWidth === 1 && e.strideHeight === 1 && e.strideWidth === 1 && (e.padInfo.type === "SAME" || e.padInfo.type === "VALID")))
    return Cue({ x: r, filter: t8, convInfo: e, backend: o, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a });
  let d = A().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"), f = d > -1 ? d : o.thresholdToIncreaseWorkgroups, h = e.batchSize * Math.ceil(e.outHeight * e.outWidth / 32) * Math.ceil(e.outChannels / 32);
  if (A().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER") || h <= f)
    return wue({ x: r, filter: t8, convInfo: e, backend: o, bias: n, preluActivationWeights: s, leakyreluAlpha: a, activation: i });
  let g, x = [e.padInfo.top, e.padInfo.left], b = [{ type: "int32", data: [e.filterHeight, e.filterWidth] }, { type: "int32", data: [...x] }, { type: "int32", data: [e.strideHeight, e.strideWidth] }, { type: "int32", data: [e.dilationHeight, e.dilationWidth] }];
  if (m)
    g = new gx(e, p, i, u);
  else {
    let _ = c ? e.outHeight * e.outWidth : e.outChannels, E = c ? e.outChannels : e.outHeight * e.outWidth, R = e.filterHeight * e.filterWidth * e.inChannels;
    b.push({ type: "int32", data: [_] }, { type: "int32", data: [E] }, { type: "int32", data: [R] });
    let D = o.adapterInfo.isIntel();
    g = new hx(e, _, E, R, p, i, u, D);
  }
  let C = [], S = [r, t8];
  p && (!c && n.shape.length === 1 && (n = pe({ inputs: { x: n }, backend: o, attrs: { shape: [n.shape[0], 1, 1] } }), C.push(n)), S.push(n)), u && (!c && s.shape.length === 1 && (s = pe({ inputs: { x: s }, backend: o, attrs: { shape: [s.shape[0], 1, 1] } }), C.push(s)), S.push(s)), i === "leakyrelu" && (b.push({ type: "float32", data: [a] }), g.uniforms += " alpha : f32,");
  let k = o.runWebGPUProgram(g, S, r.dtype, b);
  for (let _ of C)
    o.disposeData(_.dataId);
  return k;
}
function Sue(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dataFormat: p, dilations: u, dimRoundingMode: c } = e, l = w.convertConv2DDataFormat(p), m = w.computeConv2DInfo(n.shape, s.shape, a, u, i, c, false, l);
  return bx({ x: n, filter: s, convInfo: m, backend: o });
}
var wV = { kernelName: rn, backendName: "webgpu", kernelFunc: Sue };
var Cx = class {
  constructor(t8) {
    this.variableNames = ["dy", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,", this.workgroupSize = [64, 1, 1], this.size = false, this.isVec4 = false, this.workPerThread = 1, this.outputShape = t8.inShape, this.isChannelsLast = t8.dataFormat === "channelsLast", this.isVec4 = this.isChannelsLast && t8.outChannels % 4 === 0 && t8.inChannels % 4 === 0, this.isVec4 ? (this.workPerThread = 2, this.outputComponent = 4, this.workgroupSize = [4, 4, 4], this.dispatchLayout = { x: [3], y: [2], z: [0, 1] }, this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [4, this.workPerThread, 1])) : (this.size = true, this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize)), this.shaderKey = `conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`;
  }
  getUserCode() {
    let t8 = this.isChannelsLast ? 1 : 2, e = this.isChannelsLast ? 2 : 3, o = this.isChannelsLast ? 3 : 1, n = `
    ${G()} {
      let batch = i32(globalId.z) / uniforms.outShape[1];
      let r = i32(globalId.z) % uniforms.outShape[1];
      let c = i32(globalId.y) * ${this.workPerThread};
      let d1 = i32(globalId.x) * 4;

      let dyCorner = vec2<i32>(r, c) - uniforms.pads;

      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
      // ? = to be determined. : = across all values in that axis.
      var dotProd: array<vec4<f32>, ${this.workPerThread}>;
      for (var i = 0; i < ${this.workPerThread}; i++) {
        dotProd[i] = vec4<f32>(0.0);
      }
      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);
        let wRPerm = uniforms.filterDims.x - 1 - wR;
        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||
            fract(dyR) > 0.0) {
          continue;
        }
        let idyR = i32(dyR);

        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);
          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);
          let wCPerm = uniforms.filterDims.y - 1 - wC;
          var bDyCVal = true;
          var bDyCVal2 = true;
          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
              fract(dyC) > 0.0) {
            bDyCVal = false;
          }
          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||
              fract(dyC2) > 0.0) {
            bDyCVal2 = false;
          }

          let idyC = i32(dyC);
          let idyC2 = i32(dyC2);
          if (bDyCVal && bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
              xValue = getDy(batch, idyR, idyC2, d2);
              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),
                                                  dot(xValue, wValue1),
                                                  dot(xValue, wValue2),
                                                  dot(xValue, wValue3));
            }
          } else if (bDyCVal) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
            }
          } else if (bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC2, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[1] = dotProd[1] + tmpval;
            }
          }
        }
      }

      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
        let coords = vec4<i32>(batch, r, c + i, d1);
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);
        }
      }
    }
    `;
    return this.isVec4 ? `
    ${n}
    ` : `
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${o}];

        let dyCorner = vec2<i32>(coords[${t8}], coords[${e}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = i32(dyC);

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              let xValue = ${this.isChannelsLast ? "getDy(batch, idyR, idyC, d2)" : "getDy(batch, d2, idyR, idyC)"};
              let wValue = getW(wRPerm, wCPerm, d1, d2);
              dotProd = dotProd + xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
};
var wx = class {
  constructor(t8) {
    this.variableNames = ["x", "dy"], this.uniforms = "pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.filterShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = t8.dataFormat === "channelsLast", this.shaderKey = `conv2DDerFilter_${this.isChannelsLast}`;
  }
  getUserCode() {
    return `
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let d2 = coords[3];

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b = b + 1) {
          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];
            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              if (${this.isChannelsLast}) {
                let dyValue = getDy(b, yR, yC, d2);
                let xValue = getX(b, xR, xC, d1);
                dotProd = dotProd + xValue * dyValue;
              } else {
                let dyValue = getDy(b, d2, yR, yC);
                let xValue = getX(b, d1, xR, xC);
                dotProd = dotProd + xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
};
var Sx = class {
  constructor(t8) {
    this.variableNames = ["x", "dy"], this.uniforms = `pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,
       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.filterShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "conv3DDerFilter";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wF = coords.x;
        let wR = coords.y;
        let wC = coords.z;
        let d1 = coords.w;
        let d2 = coords.u;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yF = 0; yF < uniforms.outDepth; yF++) {
            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];
            if (xF < 0 || xF >= uniforms.inDepth) {
              continue;
            }

            for (var yR = 0; yR < uniforms.outHeight; yR++) {
              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];
              if (xR < 0 || xR >= uniforms.inHeight) {
                continue;
              }

              for (var yC = 0; yC < uniforms.outWidth; yC++) {
                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];
                if (xC < 0 || xC >= uniforms.inWidth) {
                  continue;
                }

                let dyValue = getDy(b, yF, yR, yC, d2);
                let xValue = getX(b, xF, xR, xC, d1);
                dotProd += xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
};
var Ix = class {
  constructor(t8) {
    this.variableNames = ["dy", "W"], this.uniforms = `filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.inShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "conv3DDerInput";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let d1 = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyFCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);
          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {
            continue;
          }
          let idyF = i32(dyF);

          let wFPerm = uniforms.filterDims[0] - 1 - wF;

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            let wRPerm = uniforms.filterDims[1] - 1 - wR;

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let wCPerm = uniforms.filterDims[2] - 1 - wC;

              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {
                let xValue = getDy(batch, idyF, idyR, idyC, d2);
                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
};
function Iue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, pad: i, dataFormat: p, dimRoundingMode: u, filterShape: c } = o, l = w.convertConv2DDataFormat(p), m = w.computeConv2DInfo(n.shape, c, a, 1, i, u, false, l), d = new wx(m), f = [{ type: "int32", data: [m.padInfo.top, m.padInfo.left] }, { type: "int32", data: [m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.batchSize] }, { type: "int32", data: [m.outHeight] }, { type: "int32", data: [m.outWidth] }, { type: "int32", data: [m.inHeight] }, { type: "int32", data: [m.inWidth] }];
  return e.runWebGPUProgram(d, [n, s], n.dtype, f);
}
var SV = { kernelName: Oi, backendName: "webgpu", kernelFunc: Iue };
function vue(r = 4) {
  let t8 = (s) => {
    switch (s) {
      case 1:
        return "return W[getIndexFromCoords4D(coord, uniforms.wShape)];";
      case 4:
        return `
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;
      default:
        throw new Error(`innerElementSize ${s} is not supported.`);
    }
  }, o = `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${Ae(r)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${Ae(r)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${r}];`}
      }
      return ${Ae(r)}(0.0);`;
  return `
  fn mm_readA(batch: i32, row : i32, col : i32) -> ${Ae(r)} {
    ${o}
  }

  fn mm_readB(batch: i32, row : i32, col : i32) -> ${Ae(r)} {
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${t8(r)}
    }
    return ${Ae(r)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${Ae(r)}) {
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${r}] = value;
    }
  }`;
}
var vx = class {
  constructor(t8) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = t8.inShape, y.assert(t8.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), this.isVec4 = t8.inChannels % 4 === 0 && t8.outChannels % 4 === 0, this.dispatchLayout = { x: [3], y: [1, 2], z: [0] }, this.workgroupSize = lm(this.dispatchLayout, this.outputShape, this.isVec4), this.elementsPerThread = mm(this.dispatchLayout, this.outputShape, this.isVec4), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread), this.isVec4 && (this.outputComponent = 4, this.variableComponents = [4, 1]), this.shaderKey = `conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`;
  }
  getUserCode() {
    let t8 = this.isVec4 ? Fp(this.elementsPerThread, this.workgroupSize) : Pp(this.elementsPerThread, this.workgroupSize);
    return `
    ${vue(this.isVec4 ? 4 : 1)}
    ${t8}
    `;
  }
};
function kue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { inputShape: a, strides: i, pad: p, dataFormat: u, dimRoundingMode: c } = o, l = w.convertConv2DDataFormat(u), m = w.computeConv2DInfo(a, s.shape, i, 1, p, c, false, l), d = [{ type: "int32", data: [m.filterHeight, m.filterWidth] }, { type: "int32", data: [m.filterHeight - 1 - m.padInfo.top, m.filterWidth - 1 - m.padInfo.left] }, { type: "int32", data: [m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.batchSize, m.outHeight, m.outWidth, m.outChannels] }], f;
  if (A().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE") || m.dataFormat !== "channelsLast")
    f = new Cx(m);
  else {
    f = new vx(m);
    let h = m.inHeight * m.inWidth, g = m.inChannels, x = m.filterHeight * m.filterWidth * m.outChannels;
    d.push({ type: "uint32", data: [h] }, { type: "uint32", data: [g] }, { type: "uint32", data: [x] });
  }
  return e.runWebGPUProgram(f, [n, s], "float32", d);
}
var IV = { kernelName: on, backendName: "webgpu", kernelFunc: kue };
var kx = class {
  constructor(t8) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.outShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "conv3dnaive";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords.x;
        let d2 = coords.u;

        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
        let xFCorner = xFRCCorner.x;
        let xRCorner = xFRCCorner.y;
        let xCCorner = xFRCCorner.z;

        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;
        let inputDepthVec4Remainder = uniforms.xShape.u % 4;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let xF = xFCorner + wF * uniforms.dilations[0];
          if (xF < 0 || xF >= uniforms.xShape.y) {
            continue;
          }

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let xR = xRCorner + wR * uniforms.dilations[1];
            if (xR < 0 || xR >= uniforms.xShape.z) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let xC = xCCorner + wC * uniforms.dilations[2];
              if (xC < 0 || xC >= uniforms.xShape.w) {
                continue;
              }

              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {
                let xValues = vec4<f32>(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                let wValues = vec4<f32>(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (inputDepthVec4Remainder == 1) {
                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *
                  getW(wF, wR, wC, inputDepthNearestVec4, d2);
              } else if (inputDepthVec4Remainder == 2) {
                let xValues = vec2<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)
                );
                let wValues = vec2<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (inputDepthVec4Remainder == 3) {
                let xValues = vec3<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)
                );
                let wValues = vec3<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }`;
  }
};
function Nue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p } = o, u = w.computeConv3DInfo(n.shape, s.shape, a, p, i), c = [u.padInfo.front, u.padInfo.top, u.padInfo.left], l = [{ type: "int32", data: [u.filterDepth, u.filterHeight, u.filterWidth] }, { type: "int32", data: [...c] }, { type: "int32", data: [u.strideDepth, u.strideHeight, u.strideWidth] }, { type: "int32", data: [u.dilationDepth, u.dilationHeight, u.dilationWidth] }], m = new kx(u), d = dt(n.dtype, s.dtype);
  return e.runWebGPUProgram(m, [n, s], d, l);
}
var vV = { kernelName: nn, backendName: "webgpu", kernelFunc: Nue };
function Tue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, pad: i, filterShape: p } = o, u = w.computeConv3DInfo(n.shape, p, a, 1, i), c = new Sx(u), l = [{ type: "int32", data: [u.padInfo.front, u.padInfo.top, u.padInfo.left] }, { type: "int32", data: [u.strideDepth, u.strideHeight, u.strideWidth] }, { type: "int32", data: [u.batchSize] }, { type: "int32", data: [u.outDepth] }, { type: "int32", data: [u.outHeight] }, { type: "int32", data: [u.outWidth] }, { type: "int32", data: [u.inDepth] }, { type: "int32", data: [u.inHeight] }, { type: "int32", data: [u.inWidth] }];
  return e.runWebGPUProgram(c, [n, s], s.dtype, l);
}
var kV = { kernelName: Xa, backendName: "webgpu", kernelFunc: Tue };
function _ue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { strides: a, pad: i, inputShape: p } = o, u = w.computeConv3DInfo(p, s.shape, a, 1, i), c = new Ix(u), l = [{ type: "int32", data: [u.filterDepth, u.filterHeight, u.filterWidth] }, { type: "int32", data: [u.filterDepth - 1 - u.padInfo.front, u.filterHeight - 1 - u.padInfo.top, u.filterWidth - 1 - u.padInfo.left] }, { type: "int32", data: [u.strideDepth, u.strideHeight, u.strideWidth] }, { type: "int32", data: [u.outDepth] }, { type: "int32", data: [u.outHeight] }, { type: "int32", data: [u.outWidth] }, { type: "int32", data: [u.outChannels] }];
  return e.runWebGPUProgram(c, [n, s], n.dtype, l);
}
var NV = { kernelName: sn, backendName: "webgpu", kernelFunc: _ue };
var $ue = ye({ opType: Z.COS });
var TV = { kernelName: an, backendName: "webgpu", kernelFunc: $ue };
var Eue = ye({ opType: Z.COSH });
var _V = { kernelName: un, backendName: "webgpu", kernelFunc: Eue };
var Nx = class {
  constructor(t8, e, o, n) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.uniforms = "extrapolationValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true;
    let [s] = e;
    this.outputShape = [s, o[0], o[1], t8], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.methodId = n === "bilinear" ? 1 : 0, this.cropHeightBiggerThan1 = this.outputShape[1] > 1, this.cropWidthBiggerThan1 = this.outputShape[2] > 1, this.shaderKey = `cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;
  }
  getUserCode() {
    let [t8, e] = ["f32(uniforms.imageShape[1] - 1)", "f32(uniforms.imageShape[2] - 1)"], [o, n, s] = this.cropHeightBiggerThan1 ? [`(${t8} / f32(uniforms.outShape[1] - 1))`, "(y2-y1) * height_ratio", `y1*${t8} + f32(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${t8}`], [a, i, p] = this.cropWidthBiggerThan1 ? [`(${e} / f32(uniforms.outShape[2] - 1))`, "(x2-x1) * width_ratio", `x1*${e} + f32(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${e}`];
    return `
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${o});
        let width_ratio = f32(${a});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${i};
        let in_y = ${s};
        if( in_y < 0.0 || in_y > ${t8} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${p};
        if( in_x < 0.0 || in_x > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `;
  }
};
var Rue = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { image: n, boxes: s, boxInd: a } = t8, { cropSize: i, method: p, extrapolationValue: u } = o, c = new Nx(n.shape[3], s.shape, i, p), l = [{ type: "float32", data: [u] }];
  return e.runWebGPUProgram(c, [n, s, a], "float32", l);
};
var $V = { kernelName: ln, backendName: "webgpu", kernelFunc: Rue };
var Lp;
(function(r) {
  r.Prod = "*", r.Sum = "+";
})(Lp || (Lp = {}));
var xm = class {
  constructor(t8, e, o, n) {
    this.variableNames = ["x"], this.uniforms = "index : f32,", this.size = true, this.workgroupSize = [128, 1, 1], this.outputShape = e, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.exclusive = o, this.reverse = n, this.op = t8, this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;
  }
  getUserCode() {
    let t8 = this.outputShape.length, e = this.op === Lp.Prod ? "1.0" : "0.0", o = this.exclusive ? e : `getX(${EV(t8, "coords", this.op)})`, n = this.outputShape[this.outputShape.length - 1], s = "", a = "";
    return this.exclusive ? (s = this.reverse ? `end != ${n - 1}` : "end != 0", a = this.reverse ? "end + 1" : "end - 1") : (s = this.reverse ? `end + pow2 < ${n}` : "end >= pow2", a = this.reverse ? "end + pow2" : "end - pow2"), `
      ${G("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${RV(t8, "coords", this.op)};
         var val = ${o};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${s}) {
           let idx = ${a};
           ${RV(t8, "coords", this.op)} = idx;
           val ${this.op}= getX(${EV(t8, "coords", this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `;
  }
};
function EV(r, t8, e) {
  if (r === 1)
    return `${t8}`;
  if (r === 2)
    return `${t8}.x, ${t8}.y`;
  if (r === 3)
    return `${t8}.x, ${t8}.y, ${t8}.z`;
  if (r === 4)
    return `${t8}.x, ${t8}.y, ${t8}.z, ${t8}.w`;
  throw Error(`Cumulative ${e} for rank ${r} is not yet supported`);
}
function RV(r, t8, e) {
  if (r === 1)
    return `${t8}`;
  if (r === 2)
    return `${t8}.y`;
  if (r === 3)
    return `${t8}.z`;
  if (r === 4)
    return `${t8}.w`;
  throw Error(`Cumulative ${e} for rank ${r} is not yet supported`);
}
function Tx(r, t8, e, o, n, s) {
  let a = t8.shape.length, i = w.getAxesPermutation([o], a), p = t8;
  i != null && (p = yr({ inputs: { x: t8 }, backend: e, attrs: { perm: i } }));
  let u = w.getInnerMostAxes(1, a)[0];
  if (u !== a - 1)
    throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t8.shape.length - 1} but got axis=${o}`);
  let c = p.shape[u], l = Ft({ inputs: { x: p }, backend: e });
  for (let m = 0; m <= Math.ceil(Math.log2(c)) - 1; m++) {
    let d = new xm(r, p.shape, false, s), f = l, h = [{ type: "float32", data: [m] }];
    l = e.runWebGPUProgram(d, [l], l.dtype, h), e.disposeData(f.dataId);
  }
  if (n) {
    let m = new xm(r, p.shape, n, s), d = l, f = [{ type: "float32", data: [0] }];
    l = e.runWebGPUProgram(m, [l], l.dtype, f), e.disposeData(d.dataId);
  }
  if (i != null) {
    let m = w.getUndoAxesPermutation(i), d = yr({ inputs: { x: l }, backend: e, attrs: { perm: m } });
    return e.disposeData(l.dataId), e.disposeData(p.dataId), d;
  }
  return l;
}
function Due(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, exclusive: a, reverse: i } = o;
  return Tx(Lp.Prod, n, e, s, a, i);
}
var DV = { kernelName: pn, backendName: "webgpu", kernelFunc: Due };
function Aue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, exclusive: a, reverse: i } = o;
  return Tx(Lp.Sum, n, e, s, a, i);
}
var AV = { kernelName: cn, backendName: "webgpu", kernelFunc: Aue };
function Fue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, weights: s } = t8, { size: a, binaryOutput: i } = o, p = n.shape.length === 1, c = y.sizeFromShape(s.shape) > 0, l = s.dtype, m = p ? [n.shape[0]] : [n.shape[0], n.shape[1]], d = p ? [a] : [n.shape[0], a], f = kt({ backend: e, attrs: { shape: d, value: 0, dtype: l } }), h = new Jc(m, c, i), g = [{ type: "int32", data: [a] }], x = c ? [n, s] : [n];
  return e.runWebGPUProgram(h, x, l, g, f);
}
var FV = { kernelName: ra, backendName: "webgpu", kernelFunc: Fue };
var _x = class {
  constructor(t8, e) {
    this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.uniforms = "blockSize : i32,", this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `depthToSpace_${e}`, this.dataFormat = e;
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? "uniforms.outShape[3]" : "uniforms.outShape[1]";
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
function Pue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockSize: s, dataFormat: a } = o, i = n.shape[0], p = a === "NHWC" ? n.shape[1] : n.shape[2], u = a === "NHWC" ? n.shape[2] : n.shape[3], c = a === "NHWC" ? n.shape[3] : n.shape[1], l = p * s, m = u * s, d = c / (s * s), f = a === "NHWC" ? [i, l, m, d] : [i, d, l, m], h = [{ type: "int32", data: [s] }], g = new _x(f, a);
  return e.runWebGPUProgram(g, [n], n.dtype, h);
}
var PV = { kernelName: mn, backendName: "webgpu", kernelFunc: Pue };
var $x = class {
  constructor(t8, e, o, n = false, s = null, a = false) {
    this.variableNames = ["x", "W"], this.uniforms = "pads : vec2<i32>, inDims : vec2<i32>,", this.workgroupSize = [16, 16, 1], this.outputShape = t8, this.dispatchLayout = { x: [3], y: [2], z: [0, 1] }, this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), n && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), this.addBias = n, this.activation = s, this.hasPreluActivation = a, this.filterHeight = e, this.filterWidth = o, this.shaderKey = `depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`;
  }
  getUserCode() {
    let t8 = this.filterWidth * this.filterHeight, e = this.workgroupSize[0] * this.workgroupSize[1] * this.workgroupSize[2], o = this.workgroupSize[1] + this.filterHeight - 1, n = this.workgroupSize[0] + this.filterWidth - 1;
    return `
      ${fr(this.activation, this.hasPreluActivation, false, 4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${o}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${G()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${this.workgroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workgroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = i32(localIndex);
        ${t8 < e ? `if (wIndex < ${t8})` : `for(; wIndex < ${t8}; wIndex = wIndex + ${e})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${Zr(this.addBias, this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `;
  }
};
var tl = class {
  constructor(t8, e = false, o = null, n = false) {
    this.variableNames = ["x", "W"], this.uniforms = "pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,", this.workgroupSize = [64, 1, 1], this.workPerThread = 4, this.outputComponent = 4, this.outputShape = t8.outShape, this.virtualWidth = Math.ceil(this.outputShape[2] / this.workPerThread) * this.workPerThread;
    let s = [this.outputShape[0], this.outputShape[1], this.virtualWidth, this.outputShape[3]];
    this.dispatchLayout = X(s), this.dispatch = H(this.dispatchLayout, s, this.workgroupSize, [this.outputComponent * this.workPerThread, 1, 1]), y.assert(t8.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), e && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), this.convInfo = t8, this.addBias = e, this.activation = o, this.hasPreluActivation = n, this.shaderKey = `depthwiseVec4_${o}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`;
  }
  getUserCode() {
    let t8 = (this.workPerThread - 1) * this.convInfo.strideWidth + this.convInfo.filterWidth, e = this.convInfo.strideHeight, o = this.convInfo.strideWidth;
    return `
      ${fr(this.activation, this.hasPreluActivation, true, 4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (col >=0 && col < uniforms.inDims[1]) {
          value = getX(batch, row, col, channel);
        }
        return value;
      }

      ${G("index")} {
        let width0 = uniforms.outShape[3] / ${this.outputComponent};
        let d1 = (index % width0) * ${this.outputComponent};
        var index1 = index / width0;
        let width1 = uniforms.virtualWidth / ${this.workPerThread};
        let c = (index1 % width1) * ${this.workPerThread};
        index1 = index1 / width1;
        let r = index1 % uniforms.outShape[1];
        let batch = index1 / uniforms.outShape[1];

        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${e}, ${o}) - uniforms.pads;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${t8}>;
        var dotProd : array<vec4<f32>, ${this.workPerThread}>;
        for (var i = 0; i < ${this.workPerThread}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          if (xR >=0 && xR < uniforms.inDims[0]) {
            for (var i = 0; i < ${t8}; i++) {
              xVals[i] = readX(batch, xR, xCCorner + i, d1);
            }
            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
              let wValue = getW(wR, wC, d1, 0);
              for (var i = 0; i < ${this.workPerThread}; i++) {
                dotProd[i] = fma(xVals[i * ${o} + wC], wValue, dotProd[i]);
              }
            }
          }
        }

        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${Zr(this.addBias, this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `;
  }
};
var rl = class {
  constructor(t8, e = false, o = null, n = false) {
    this.variableNames = ["x", "W"], this.uniforms = `pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`, this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = t8.outShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = t8.dataFormat === "channelsLast", e && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), this.convInfo = t8, this.addBias = e, this.activation = o, this.hasPreluActivation = n, this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;
  }
  getUserCode() {
    let t8 = this.isChannelsLast ? "getX(batch, xR, xC, d1);" : "getX(batch, d1, xR, xC);";
    return `
      ${fr(this.activation, this.hasPreluActivation, false, 4)}

      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast ? "yz" : "zw"}) * uniforms.strides - uniforms.pads;
          let d2 = coords[${this.isChannelsLast ? 3 : 1}];
          let channelMul = uniforms.wShape[3];
          let d1 = d2 / channelMul;
          let q = d2 % channelMul;

          let inputRowStart = xRCCorner.x;
          let inputColStart = xRCCorner.y;
          let inputRowEnd = inputRowStart + uniforms.filterHeight *
              uniforms.dilations[0];
          let inputColEnd = inputColStart + uniforms.filterWidth *
              uniforms.dilations[1];

          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
          var value = 0.0;

          // Extract if checking out of for loop for performance.
          if (inputRowStart >= 0 && inputColStart >= 0 &&
            inputRowEnd < uniforms.inDims[0] &&
                inputColEnd < uniforms.inDims[1]) {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  let xVal = ${t8};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            } else {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                if (xR < 0 || xR >= uniforms.inDims[0]) {
                  continue;
                }

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  if (xC < 0 || xC >= uniforms.inDims[1]) {
                    continue;
                  }

                  let xVal = ${t8};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            }
            ${Zr(this.addBias, this.activation)}
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `;
  }
};
function Oue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dataFormat: p, dilations: u, dimRoundingMode: c } = o, l = w.convertConv2DDataFormat(p), m = u;
  m == null && (m = [1, 1]);
  let d = w.computeConv2DInfo(n.shape, s.shape, a, m, i, c, true, l), f = [{ type: "int32", data: [d.padInfo.top, d.padInfo.left] }, { type: "int32", data: [d.inHeight, d.inWidth] }], h = d.dataFormat === "channelsLast", g;
  return !h && d.inHeight > 16 && d.inWidth > 16 && d.strideHeight === 1 && d.strideWidth === 1 && d.dilationWidth === 1 && d.dilationHeight === 1 && d.inChannels === d.outChannels ? g = new $x(d.outShape, d.filterHeight, d.filterWidth) : h && d.outHeight > 4 && d.outWidth > 4 && d.strideWidth <= 2 && d.inChannels === d.outChannels && d.dilationHeight === 1 && d.dilationWidth === 1 && d.inChannels % 4 === 0 ? (g = new tl(d), f.push({ type: "int32", data: [g.virtualWidth] })) : (g = new rl(d), f.push({ type: "int32", data: [d.filterHeight] }, { type: "int32", data: [d.filterWidth] }, { type: "int32", data: [d.strideHeight, d.strideWidth] }, { type: "int32", data: [d.dilationHeight, d.dilationWidth] })), e.runWebGPUProgram(g, [n, s], n.dtype, f);
}
var OV = { kernelName: dn, backendName: "webgpu", kernelFunc: Oue };
var Ex = class {
  constructor(t8) {
    this.variableNames = ["x", "dy"], this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,
      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.filterShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "depthwise_conv2d_backprop_filter";
  }
  getUserCode() {
    return `
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let dm = coords[3];
        let d2 = d1 * uniforms.channelMul + dm;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yR = 0; yR < uniforms.outHeight; yR++) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];

            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC++) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              let dyValue = getDy(b, yR, yC, d2);
              let xValue = getX(b, xR, xC, d1);
              dotProd += xValue * dyValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
};
var Rx = class {
  constructor(t8) {
    this.variableNames = ["dy", "W"], this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, channelMul : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.inShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "depthwise_conv2d_backprop_input";
  }
  getUserCode() {
    return `
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[3];
        let dyCorner = coords.yz - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }

          let idyR = i32(dyR);
          let wRPerm = uniforms.filterDims[0] - 1 - wR;

          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }

            let idyC = i32(dyC);
            let wCPerm = uniforms.filterDims[1] - 1 - wC;

            for (var dm = 0; dm < uniforms.channelMul; dm++) {
              let d2 = d1 * uniforms.channelMul + dm;
              let xValue = getDy(batch, idyR, idyC, d2);
              let wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
};
function Mue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, dy: s } = t8, { strides: a, dilations: i, pad: p, dimRoundingMode: u, filterShape: c } = o, l = w.computeConv2DInfo(n.shape, c, a, i, p, u, true), m = new Ex(l), d = [{ type: "int32", data: [l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.padInfo.top, l.padInfo.left] }, { type: "int32", data: [l.filterHeight, l.filterWidth] }, { type: "int32", data: [l.outHeight] }, { type: "int32", data: [l.outWidth] }, { type: "int32", data: [l.inHeight] }, { type: "int32", data: [l.inWidth] }, { type: "int32", data: [l.batchSize] }, { type: "int32", data: [l.outChannels / l.inChannels] }];
  return e.runWebGPUProgram(m, [n, s], "float32", d);
}
var MV = { kernelName: Mi, backendName: "webgpu", kernelFunc: Mue };
function Lue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, filter: s } = t8, { strides: a, dilations: i, pad: p, dimRoundingMode: u, inputShape: c } = o, l = w.computeConv2DInfo(c, s.shape, a, i, p, u, true), m = new Rx(l), d = [{ type: "int32", data: [l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.filterHeight - 1 - l.padInfo.top, l.filterWidth - 1 - l.padInfo.left] }, { type: "int32", data: [l.filterHeight, l.filterWidth] }, { type: "int32", data: [l.outHeight] }, { type: "int32", data: [l.outWidth] }, { type: "int32", data: [l.outChannels / l.inChannels] }];
  return e.runWebGPUProgram(m, [n, s], n.dtype, d);
}
var LV = { kernelName: Li, backendName: "webgpu", kernelFunc: Lue };
var Dx = class {
  constructor(t8) {
    this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [t8, t8], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "diag";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);
          setOutputAtIndex(index, value);
        }
      }
    `;
  }
};
function Bue(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8, n = [...o.shape, ...o.shape], s = y.sizeFromShape(o.shape), a = pe({ inputs: { x: o }, backend: e, attrs: { shape: [s] } }), i = new Dx(s), p = e.runWebGPUProgram(i, [a], a.dtype), u = pe({ inputs: { x: p }, backend: e, attrs: { shape: n } });
  return e.disposeData(a.dataId), e.disposeData(p.dataId), u;
}
var BV = { kernelName: oa, backendName: "webgpu", kernelFunc: Bue };
var Ax = class {
  constructor(t8) {
    this.variableNames = ["x", "w"], this.uniforms = "filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.outShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "dilation2d";
  }
  getUserCode() {
    return `
       ${G("index")} {
         if (index < uniforms.size) {
           let neg_infinity = -3.4e38;
           let coords = getOutputCoords();
           let batch = coords.x;
           let d1 = coords.w;
           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;
           let hBeg = outTopLeftCorner.x;
           let wBeg = outTopLeftCorner.y;

           var curVal = neg_infinity;
           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {
             let hIn = hBeg + h * uniforms.dilations[0];

             if (hIn >= 0 && hIn < uniforms.xShape[1]) {
               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {
                 let wIn = wBeg + w * uniforms.dilations[1];

                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {
                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);
                   if (val > curVal) {
                     curVal = val;
                   }
                 }
               }
             }
           }

           setOutputAtIndex(index, curVal);
         }
       }
     `;
  }
};
function zue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s } = t8, { strides: a, pad: i, dilations: p } = o, u = w.computeDilation2DInfo(n.shape, s.shape, a, i, "NHWC", p), c = [u.padInfo.top, u.padInfo.left], l = [{ type: "int32", data: [u.filterHeight, u.filterWidth] }, { type: "int32", data: [...c] }, { type: "int32", data: [u.strideHeight, u.strideWidth] }, { type: "int32", data: [u.dilationHeight, u.dilationWidth] }], m = new Ax(u);
  return e.runWebGPUProgram(m, [n, s], n.dtype, l);
}
var zV = { kernelName: fn, backendName: "webgpu", kernelFunc: zue };
var Fx = class {
  constructor(t8, e) {
    if (this.variableNames = ["x", "w", "dy"], this.uniforms = "filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = t8.inShape, this.dispatchLayout = X(t8.outShape), this.dispatch = H(this.dispatchLayout, t8.outShape, this.workgroupSize), e !== "float32" && e !== "int32")
      throw new Error(`Dilation2DBackpropInput only supports float32 and int32
          types, does not support ${e} type.`);
    this.type = e, this.shaderKey = "dilation2DBackpropInput";
  }
  getUserCode() {
    return `
       ${G("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var xRMax = 0;
           var xCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     xRMax = xR;
                     xCMax = xC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.xShape[3] *
               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));
           let value = getDy(b, r, c, d);
           ${Qr("&result[flatIndexIn]", "value", this.type)}
         }
       }
     `;
  }
};
var Px = class {
  constructor(t8, e, o) {
    if (this.variableNames = ["x", "w", "dy"], this.uniforms = "filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = t8.filterShape, this.dispatchLayout = X(t8.outShape), this.dispatch = H(this.dispatchLayout, t8.outShape, this.workgroupSize), o !== "float32" && o !== "int32")
      throw new Error(`Dilation2DBackpropFilter only supports float32 and int32
          types, does not support ${o} type.`);
    this.type = o, this.shaderKey = "dilation2DBackpropFilter";
  }
  getUserCode() {
    return `
       ${G("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var wRMax = 0;
           var wCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     wRMax = wR;
                     wCMax = wC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);
           let value = getDy(b, r, c, d);
           ${Qr("&result[flatIndexIn]", "value", this.type)}
         }
       }
     `;
  }
};
function Vue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, dy: a } = t8, { strides: i, pad: p, dilations: u } = o, c = w.computeDilation2DInfo(n.shape, s.shape, i, p, "NHWC", u), l = s.dtype, m = new Px(c, s.shape, l), d = [{ type: "int32", data: [c.filterHeight, c.filterWidth] }, { type: "int32", data: [c.padInfo.top, c.padInfo.left] }, { type: "int32", data: [c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.dilationHeight, c.dilationWidth] }, { type: "int32", data: [y.sizeFromShape(c.outShape)] }], f = kt({ backend: e, attrs: { shape: s.shape, value: 0, dtype: l } });
  return e.runWebGPUProgram(m, [n, s, a], l, d, f);
}
var VV = { kernelName: zi, backendName: "webgpu", kernelFunc: Vue };
function Wue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, dy: a } = t8, { strides: i, pad: p, dilations: u } = o, c = w.computeDilation2DInfo(n.shape, s.shape, i, p, "NHWC", u), l = n.dtype, m = new Fx(c, l), d = [{ type: "int32", data: [c.filterHeight, c.filterWidth] }, { type: "int32", data: [c.padInfo.top, c.padInfo.left] }, { type: "int32", data: [c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.dilationHeight, c.dilationWidth] }, { type: "int32", data: [y.sizeFromShape(c.outShape)] }], f = kt({ backend: e, attrs: { shape: c.inShape, value: 0, dtype: l } });
  return e.runWebGPUProgram(m, [n, s, a], l, d, f);
}
var WV = { kernelName: Bi, backendName: "webgpu", kernelFunc: Wue };
var Ox = class {
  constructor(t8, e, o) {
    this.variableNames = ["Image"], this.uniforms = "alpha: f32,", this.workgroupSize = [64, 1, 1], this.pixelsOpType = Ii.DRAW, this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.type = e, this.textureFormat = o, this.shaderKey = `draw_${e}_${o}`;
  }
  getUserCode() {
    let t8, e = this.type === "float32" ? "value" : "value / 255.0";
    return t8 = `
      if (uniforms.numChannels == 1) {
        rgba[0] = ${e};
        rgba[1] = ${e};
        rgba[2] = ${e};
      } else {
        rgba[d] = ${e};
      }`, `
       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;
       ${G("index")} {
         if (index < uniforms.size) {
           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);
           for (var d = 0; d < uniforms.numChannels; d = d + 1) {
             let value = f32(inBuf[index * uniforms.numChannels + d]);
             ${t8}
           }
           rgba.x = rgba.x * rgba.w;
           rgba.y = rgba.y * rgba.w;
           rgba.z = rgba.z * rgba.w;
           let coords = getCoordsFromIndex(index);
           textureStore(outImage, vec2<i32>(coords.yx), rgba);
         }
       }
      `;
  }
};
function Uue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { image: n } = t8, { canvas: s, options: a } = o, [i, p] = n.shape.slice(0, 2), { imageOptions: u } = a || {}, c = (u == null ? void 0 : u.alpha) || 1, l = e.device.features.has("bgra8unorm-storage") ? "bgra8unorm" : "rgba8unorm", m = [i, p], d = new Ox(m, n.dtype, l);
  s.width = p, s.height = i;
  let f = "webgpu", h = s.getContext(f), g;
  h || (g = new OffscreenCanvas(p, i), h = g.getContext(f));
  let x = n.shape.length === 3 ? n.shape[2] : 1;
  h.configure({ device: e.device, format: l, usage: GPUTextureUsage.STORAGE_BINDING, alphaMode: "premultiplied" });
  let b = "int32", C = e.makeTensorInfo(m, b), S = e.tensorMap.get(C.dataId);
  S.resource = h.getCurrentTexture(), S.external = true;
  let k = [{ type: "uint32", data: [x] }, { type: "float32", data: [c] }];
  if (e.runWebGPUProgram(d, [n], b, k, C), g) {
    let _ = s.getContext("2d");
    if (!_)
      throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");
    _.drawImage(g, 0, 0);
  }
  return e.disposeData(C.dataId), n;
}
var UV = { kernelName: Pu, backendName: "webgpu", kernelFunc: Uue };
var s0 = et({ opType: fe.MUL, cpuKernelImpl: vz, supportsComplex: true });
var GV = { kernelName: Yn, backendName: "webgpu", kernelFunc: s0 };
function a0(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  return eo(n, s, a, "sum", e);
}
var HV = { kernelName: Is, backendName: "webgpu", kernelFunc: a0 };
function Gue(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { equation: n } = o, s = t8, { allDims: a, summedDims: i, idDims: p } = w.decodeEinsumEquation(n, s.length);
  w.checkEinsumDimSizes(a.length, p, s);
  let { path: u, steps: c } = w.getEinsumComputePath(i, p), l = c.length, m = null, d = a.length, f = [];
  for (let h = 0; h < l; ++h) {
    for (let g of c[h]) {
      let { permutationIndices: x, expandDims: b } = w.getEinsumPermutation(d, p[g]), C;
      w.isIdentityPermutation(x) ? C = s[g] : (C = yr({ inputs: { x: s[g] }, backend: e, attrs: { perm: x } }), f.push(C));
      let S = C.shape.slice();
      for (let k = 0; k < b.length; ++k)
        S.splice(b[k], 0, 1);
      y.arraysEqual(C.shape, S) || (C = pe({ inputs: { x: C }, backend: e, attrs: { shape: S } }), f.push(C)), m === null ? m = C : (m = s0({ inputs: { a: C, b: m }, backend: e }), f.push(m));
    }
    h < l - 1 && (u[h] >= 0 && (m = a0({ inputs: { x: m }, backend: e, attrs: { axis: u[h] - (a.length - d), keepDims: false } }), f.push(m)), d--);
  }
  for (let h of f)
    h !== m && e.disposeData(h.dataId);
  return m;
}
var KV = { kernelName: Vi, backendName: "webgpu", kernelFunc: Gue };
var Hue = ye({ opType: Z.ELU });
var qV = { kernelName: gn, backendName: "webgpu", kernelFunc: Hue };
var Kue = (r) => {
  let { inputs: t8, backend: e } = r, { dy: o, y: n } = t8, s = new ki(fe.ELU_DER, o.shape, n.shape);
  return e.runWebGPUProgram(s, [o, n], o.dtype);
};
var jV = { kernelName: Ya, backendName: "webgpu", kernelFunc: Kue };
var que = et({ opType: fe.EQUAL, dtype: "bool", cpuKernelImpl: pz });
var XV = { kernelName: yn, backendName: "webgpu", kernelFunc: que };
var jue = ye({ opType: Z.ERF });
var YV = { kernelName: xn, backendName: "webgpu", kernelFunc: jue };
var Xue = ye({ opType: Z.EXP, cpuKernelImpl: cz, dtype: "float32" });
var QV = { kernelName: bn, backendName: "webgpu", kernelFunc: Xue };
function Mx(r) {
  let { inputs: t8, attrs: e, backend: o } = r, { dim: n } = e, { input: s } = t8, a = s.shape.length, i = s.shape.slice(), p = n;
  return n < 0 && (y.assert(-(a + 1) <= n, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), p = a + n + 1), i.splice(p, 0, 1), pe({ inputs: { x: s }, backend: o, attrs: { shape: i } });
}
var ZV = { kernelName: na, backendName: "webgpu", kernelFunc: Mx };
var Yue = ye({ opType: Z.EXPM1, cpuKernelImpl: lz });
var JV = { kernelName: Cn, backendName: "webgpu", kernelFunc: Yue };
var ym = class {
  constructor(t8, e) {
    this.variableNames = ["real", "imag"], this.outputShape = [], this.uniforms = "exponentMultiplier : f32, denominator: f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.component = t8, this.shaderKey = `fft_${t8}`;
  }
  getUserCode() {
    return `
    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {
      ${this.component === "real" ? "return real * expR - imag * expI;" : "return real * expI + imag * expR;"}
    }

    fn mulMatDFT(batch: i32, index: i32) -> f32 {
      let indexRatio = f32(index) / f32(uniforms.realShape[1]);
      let exponentMultiplierTimesIndexRatio =
          uniforms.exponentMultiplier * indexRatio;

      var result = 0.0;

      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {
        // x = (-2|2 * PI / N) * index * i;
        let x = exponentMultiplierTimesIndexRatio * f32(i);
        let expR = cos(x);
        let expI = sin(x);
        let real = getReal(batch, i);
        let imag = getImag(batch, i);

        result = result +
            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;
      }

      return result;
    }

    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));
      }
    }
  `;
  }
};
function Lx(r, t8, e) {
  let o = e.tensorMap.get(r.dataId), n = y.sizeFromShape(r.shape), s = r.shape[r.shape.length - 1], a = n / s, i = [], p = pe({ inputs: { x: r }, backend: e, attrs: { shape: [a, s] } });
  i.push(p);
  let u = p.shape, c = new ym("real", u), l = new ym("imag", u), m = [{ dataId: o.complexTensorInfos.real.dataId, dtype: o.complexTensorInfos.real.dtype, shape: u }, { dataId: o.complexTensorInfos.imag.dataId, dtype: o.complexTensorInfos.imag.dtype, shape: u }], d = t8 ? 2 * Math.PI : -2 * Math.PI, f = t8 ? u[1] : 1, h = [{ type: "float32", data: [d] }, { type: "float32", data: [f] }], g = e.runWebGPUProgram(c, m, "float32", h);
  i.push(g);
  let x = e.runWebGPUProgram(l, m, "float32", h);
  i.push(x);
  let b = yo({ inputs: { real: g, imag: x }, backend: e });
  i.push(b);
  let C = pe({ inputs: { x: b }, backend: e, attrs: { shape: r.shape } });
  return i.forEach((S) => e.disposeData(S.dataId)), C;
}
function Que(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8;
  return Lx(o, false, e);
}
var eW = { kernelName: Wi, backendName: "webgpu", kernelFunc: Que };
var Bx = class {
  constructor(t8) {
    this.outputShape = [], this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "flipLeftRight";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `;
  }
};
var tW = { kernelName: wn, backendName: "webgpu", kernelFunc: ({ inputs: r, backend: t8 }) => {
  let { image: e } = r, o = t8, n = new Bx(e.shape);
  return o.runWebGPUProgram(n, [e], e.dtype);
} };
var Zue = ye({ opType: Z.FLOOR, cpuKernelImpl: mz });
var rW = { kernelName: Sn, backendName: "webgpu", kernelFunc: Zue };
var Jue = et({ opType: fe.FLOOR_DIV, cpuKernelImpl: dz, dtype: "int32" });
var oW = { kernelName: In, backendName: "webgpu", kernelFunc: Jue };
var zx = class {
  constructor(t8, e, o = false) {
    this.pixelsOpType = Ii.FROM_PIXELS, this.outputShape = [0], this.variableNames = [], this.workgroupSize = [256, 1, 1], this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [e, 1, 1]), this.importVideo = o, this.shaderKey = `fromPixels_${this.importVideo}`;
  }
  getUserCode() {
    let t8 = this.importVideo ? "textureLoad(src, vec2<i32>(coords.yx));" : "textureLoad(src, vec2<i32>(coords.yx), 0)";
    return `
      @binding(1) @group(0) var src: ${this.importVideo ? "texture_external" : "texture_2d<f32>"};
      ${G("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${t8};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `;
  }
};
var nW = { kernelName: Mu, backendName: "webgpu", kernelFunc: epe };
var ol;
var i0 = A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function epe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { pixels: n } = t8, { numChannels: s } = o;
  if (n == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let a = typeof HTMLVideoElement != "undefined" && n instanceof HTMLVideoElement, i = typeof HTMLImageElement != "undefined" && n instanceof HTMLImageElement, p = typeof HTMLCanvasElement != "undefined" && n instanceof HTMLCanvasElement || typeof OffscreenCanvas != "undefined" && n instanceof OffscreenCanvas, u = typeof ImageBitmap != "undefined" && n instanceof ImageBitmap, [c, l] = a ? [n.videoWidth, n.videoHeight] : [n.width, n.height], m = [l, c, s], d = false, f = a || i;
  if (u || p || f) {
    let b;
    if (d)
      b = e.device.importExternalTexture({ source: n });
    else {
      if (f) {
        let L = A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
        (ol == null || L !== i0) && (i0 = L, ol = document.createElement("canvas").getContext("2d", { willReadFrequently: i0 })), ol.canvas.width = c, ol.canvas.height = l, ol.drawImage(n, 0, 0, c, l), n = ol.canvas;
      }
      let P = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING, O = "rgba8unorm", M = e.textureManager.acquireTexture(m[1], m[0], O, P);
      e.queue.copyExternalImageToTexture({ source: n }, { texture: M }, [m[1], m[0]]), b = M;
    }
    let C = y.sizeFromShape(m), S = y.computeStrides(m), k = new zx(m, s, d), _ = [{ type: "uint32", data: [C] }, { type: "uint32", data: [s] }, { type: "uint32", data: [...S] }], E = e.makeTensorInfo([l, c], "int32"), R = e.tensorMap.get(E.dataId);
    R.resource = b;
    let D = e.runWebGPUProgram(k, [E], "int32", _);
    return e.disposeData(E.dataId), D;
  }
  let h = n.data, g = h;
  if (s != null && s !== 4) {
    g = new Uint8Array(n.width * n.height * s);
    let b = h.length, C = 0;
    for (let S = 0; S < b; S++)
      S % 4 < s && (g[C++] = h[S]);
  }
  let x = e.makeTensorInfo(m, "int32", new Int32Array(g));
  return e.uploadToGPU(x.dataId), x;
}
var Vx = class {
  constructor(t8, e, o, n, s) {
    this.uniforms = "varianceEpsilon : f32,", this.workgroupSize = [128, 1, 1], this.size = true, this.variableNames = ["x", "mean", "variance"], w.assertAndGetBroadcastShape(t8, e), w.assertAndGetBroadcastShape(t8, o), this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), n != null && (w.assertAndGetBroadcastShape(t8, n), this.variableNames.push("offset")), s != null && (w.assertAndGetBroadcastShape(t8, s), this.variableNames.push("scale")), this.offsetShape = n, this.scaleShape = s, this.shaderKey = "batchNorm";
  }
  getUserCode() {
    let t8 = "0.0";
    this.offsetShape != null && (t8 = "getOffsetByOutputIndex(index)");
    let e = "1.0";
    return this.scaleShape != null && (e = "getScaleByOutputIndex(index)"), `
      ${G("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${t8};
          let scaleValue = ${e};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `;
  }
};
var sW = { kernelName: vn, backendName: "webgpu", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { x: o, scale: n, offset: s, mean: a, variance: i } = r, { varianceEpsilon: p } = t8, u = e, c = [o, a, i], l = null;
  s != null && (l = s.shape, c.push(s));
  let m = null;
  n != null && (m = n.shape, c.push(n));
  let d = new Vx(o.shape, a.shape, i.shape, l, m), f = [{ type: "float32", data: [p] }];
  return u.runWebGPUProgram(d, c, o.dtype, f);
} };
function tpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = t8, { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = o, h = w.convertConv2DDataFormat(c), g = w.computeConv2DInfo(n.shape, s.shape, p, l, u, m, false, h);
  return bx({ x: n, filter: s, convInfo: g, backend: e, bias: a, preluActivationWeights: i, leakyreluAlpha: f, activation: d });
}
var aW = { kernelName: vo, backendName: "webgpu", kernelFunc: tpe };
function rpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = t8, { strides: p, pad: u, dilations: c, dimRoundingMode: l, activation: m, leakyreluAlpha: d } = o, f = c;
  f == null && (f = [1, 1]), y.assert(w.eitherStridesOrDilationsAreOne(p, f), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${f}'`);
  let h = w.computeConv2DInfo(n.shape, s.shape, p, f, u, l, true), g = [n, s], x = a != null, b = i != null;
  x && g.push(a), b && g.push(i);
  let C = [{ type: "int32", data: [h.padInfo.top, h.padInfo.left] }, { type: "int32", data: [h.inHeight, h.inWidth] }], S;
  return h.outHeight > 4 && h.outWidth > 4 && h.strideWidth <= 2 && h.inChannels === h.outChannels && h.dilationHeight === 1 && h.dilationWidth === 1 && h.inChannels % 4 === 0 ? (S = new tl(h, x, m, b), C.push({ type: "int32", data: [S.virtualWidth] })) : (S = new rl(h, x, m, b), C.push({ type: "int32", data: [h.filterHeight] }, { type: "int32", data: [h.filterWidth] }, { type: "int32", data: [h.strideHeight, h.strideWidth] }, { type: "int32", data: [h.dilationHeight, h.dilationWidth] })), m === "leakyrelu" && (C.push({ type: "float32", data: [d] }), S.uniforms += " alpha : f32,"), e.runWebGPUProgram(S, g, "float32", C);
}
var iW = { kernelName: ko, backendName: "webgpu", kernelFunc: rpe };
var Wx = class {
  constructor(t8, e) {
    this.variableNames = ["A", "indices"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `gathernd_${t8}`, this.sliceDim = t8, this.uniforms = `sliceDim : i32, strides : ${ht(t8)},`;
  }
  getUserCode() {
    let t8;
    return this.sliceDim > 1 ? t8 = "uniforms.strides[j]" : t8 = "uniforms.strides", `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${t8};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `;
  }
};
function ope(r) {
  let { inputs: t8, backend: e } = r, { params: o, indices: n } = t8, s = n.shape, a = s[s.length - 1], i = y.sizeFromShape(o.shape), [p, u, c, l] = w.prepareAndValidate(o, n), m = pe({ inputs: { x: n }, backend: e, attrs: { shape: [u, a] } }), d = pe({ inputs: { x: o }, backend: e, attrs: { shape: [y.sizeFromShape(o.shape) / c, c] } });
  if (e.shouldExecuteOnCPU([o, n]) || o.dtype === "string") {
    let b = e.readSync(n.dataId), C = e.bufferSync(o), S = fz(b, C, o.dtype, u, a, c, l, o.shape, i);
    return e.makeTensorInfo(p, o.dtype, S.values);
  }
  let f = new Wx(a, [u, c]), h = [{ type: "int32", data: [a] }, { type: "int32", data: l }], g = e.runWebGPUProgram(f, [d, m], d.dtype, h), x = pe({ inputs: { x: g }, backend: e, attrs: { shape: p } });
  return e.disposeData(m.dataId), e.disposeData(d.dataId), e.disposeData(g.dataId), x;
}
var uW = { kernelName: kn, backendName: "webgpu", kernelFunc: ope };
var Ux = class {
  constructor(t8, e) {
    this.variableNames = ["A", "indices"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.slice(), this.aShape = t8, this.outputShape = e, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "gather";
  }
  getUserCode() {
    let t8 = npe(this.aShape);
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${t8}));
        }
      }
    `;
  }
};
function npe(r) {
  let t8 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], e = [];
  for (let o = 0; o < r.length; o++)
    o === 2 ? e.push("indexZ") : e.push(`${t8[o]}`);
  return e.join();
}
function u0(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, indices: s } = t8, { axis: a, batchDims: i } = o, p = y.parseAxisParam(a, n.shape)[0], u = w.segment_util.collectGatherOpShapeInfo(n, s, p, i), c = y.sizeFromShape(s.shape), l = [], m = pe({ inputs: { x: n }, backend: e, attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] } }), d = pe({ inputs: { x: s }, backend: e, attrs: { shape: [u.batchSize, c / u.batchSize] } });
  l.push(m), l.push(d);
  let f = [u.batchSize, u.outerSize, c / u.batchSize, u.sliceSize];
  if (e.shouldExecuteOnCPU([n, s])) {
    let C = e.tensorMap.get(d.dataId).values, S = me(d.shape, d.dtype, C), _ = e.tensorMap.get(m.dataId).values, E = me(m.shape, m.dtype, _), R = hz(E, S, f);
    return l.forEach((D) => e.disposeData(D.dataId)), e.makeTensorInfo(u.outputShape, R.dtype, R.values);
  }
  let h = new Ux(m.shape, f), g = e.runWebGPUProgram(h, [m, d], m.dtype);
  l.push(g);
  let x = pe({ inputs: { x: g }, backend: e, attrs: { shape: u.outputShape } });
  return l.forEach((b) => e.disposeData(b.dataId)), x;
}
var pW = { kernelName: aa, backendName: "webgpu", kernelFunc: u0 };
var spe = et({ opType: fe.GREATER, cpuKernelImpl: xz, dtype: "bool" });
var cW = { kernelName: Nn, backendName: "webgpu", kernelFunc: spe };
var ape = et({ opType: fe.GREATER_EQUAL, dtype: "bool", cpuKernelImpl: gz });
var lW = { kernelName: Tn, backendName: "webgpu", kernelFunc: ape };
function ipe(r) {
  let { inputs: t8, backend: e } = r, { input: o } = t8;
  return Lx(o, true, e);
}
var mW = { kernelName: Ui, backendName: "webgpu", kernelFunc: ipe };
var upe = ye({ opType: Z.IS_FINITE, dtype: "bool" });
var dW = { kernelName: _n, backendName: "webgpu", kernelFunc: upe };
var ppe = ye({ opType: Z.IS_INF, dtype: "bool" });
var fW = { kernelName: $n, backendName: "webgpu", kernelFunc: ppe };
var cpe = ye({ opType: Z.IS_NAN, dtype: "bool" });
var hW = { kernelName: En, backendName: "webgpu", kernelFunc: cpe };
function lpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { alpha: s } = o, a = [{ type: "float32", data: [s] }], i = new Jr(n.shape, Z.LEAKYRELU, "alpha : f32,");
  return e.runWebGPUProgram(i, [n], "float32", a);
}
var gW = { kernelName: Rn, backendName: "webgpu", kernelFunc: lpe };
var mpe = et({ opType: fe.LESS, dtype: "bool", cpuKernelImpl: bz });
var xW = { kernelName: Dn, backendName: "webgpu", kernelFunc: mpe };
var dpe = et({ opType: fe.LESS_EQUAL, dtype: "bool", cpuKernelImpl: yz });
var yW = { kernelName: An, backendName: "webgpu", kernelFunc: dpe };
var Gx = class {
  constructor(t8) {
    this.variableNames = [], this.outputShape = [], this.uniforms = "start : f32, step : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [t8], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "linSpace";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);
        }
      }
    `;
  }
};
function fpe(r) {
  let { backend: t8, attrs: e } = r, { start: o, stop: n, num: s } = e, a = (n - o) / (s - 1), i = new Gx(s), p = [{ type: "float32", data: [o] }, { type: "float32", data: [a] }];
  return t8.runWebGPUProgram(i, [], "float32", p);
}
var bW = { kernelName: Fn, backendName: "webgpu", kernelFunc: fpe };
var hpe = ye({ opType: Z.LOG, cpuKernelImpl: Cz });
var CW = { kernelName: Pn, backendName: "webgpu", kernelFunc: hpe };
var gpe = ye({ opType: Z.LOG1P });
var wW = { kernelName: On, backendName: "webgpu", kernelFunc: gpe };
var xpe = et({ opType: fe.LOGICAL_AND, dtype: "bool" });
var SW = { kernelName: Mn, backendName: "webgpu", kernelFunc: xpe };
var ype = ye({ opType: Z.LOGICAL_NOT });
var IW = { kernelName: Ln, backendName: "webgpu", kernelFunc: ype };
var bpe = et({ opType: fe.LOGICAL_OR });
var vW = { kernelName: Bn, backendName: "webgpu", kernelFunc: bpe };
var kW = `
  var powValue = 0.0;
  let basis = uniforms.bias + uniforms.alpha * sum;
  if (uniforms.beta == 0.5) {
    powValue = inverseSqrt(basis);
  } else if (uniforms.beta == 1.0) {
    powValue = 1.0 / basis;
  } else {
    powValue = exp(log(basis) * (-uniforms.beta));
  }
`;
var Hx = class {
  constructor(t8) {
    this.outputShape = [], this.variableNames = ["x"], this.uniforms = "radius : i32, bias : f32, alpha : f32, beta : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "lrn";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];
        let d = coords[3];

        let x = getX(b, r, c, d);
        var sum = 0.0;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let idx = d + i;
          if (idx >= 0 && idx < uniforms.xShape[3]) {
            let z = getX(b, r, c, idx);
            sum = sum + z * z;
          }
        }
        ${kW}

        setOutputAtIndex(index, x * powValue);
      }
    }
  `;
  }
};
var Kx = class {
  constructor(t8, e) {
    this.outputShape = [], this.variableNames = ["x"], this.uniforms = "radius : i32, bias : f32, alpha : f32, beta : f32,", this.workgroupSize = [256, 1, 1], this.maxAllowRadius = 16, y.assert(e <= this.maxAllowRadius, () => `Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${e}`), this.outputShape = t8, this.elementsPerWorkgroup = this.workgroupSize[0] - 2 * this.maxAllowRadius, this.dispatchLayout = { x: [3], y: [2], z: [0, 1] }, this.dispatch = H(this.dispatchLayout, this.outputShape, [this.elementsPerWorkgroup, this.workgroupSize[1], this.workgroupSize[2]]), this.shaderKey = "lrn_shared";
  }
  getUserCode() {
    return `
    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;
    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};
    const maxAllowRadius = ${this.maxAllowRadius};

    ${G()} {
      let localDepth = i32(localId.x);
      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;
      let xDepth = workgroupDepth + localDepth - maxAllowRadius;
      let b = i32(globalId.z) / uniforms.xShape[1];
      let r = i32(globalId.z) - b * uniforms.xShape[1];
      let c = i32(globalId.y);
      let d = workgroupDepth + localDepth;

      var x = 0.0;
      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {
        x = getX(b, r, c, xDepth);
      }
      lrnSub[localDepth] = x;
      workgroupBarrier();

      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {
        var sum = 0.0;
        let index = localDepth + maxAllowRadius;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let z = lrnSub[index + i];
          sum = sum + z * z;
        }
        ${kW}

        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);
      }
    } `;
  }
};
function Cpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { depthRadius: s, bias: a, alpha: i, beta: p } = o, u;
  s > 16 ? u = new Hx(n.shape) : u = new Kx(n.shape, s);
  let c = [{ type: "int32", data: [s] }, { type: "float32", data: [a] }, { type: "float32", data: [i] }, { type: "float32", data: [p] }];
  return e.runWebGPUProgram(u, [n], n.dtype, c);
}
var NW = { kernelName: zn, backendName: "webgpu", kernelFunc: Cpe };
var qx = class {
  constructor(t8) {
    this.outputShape = [], this.variableNames = ["inputImage", "outputImage", "dy"], this.uniforms = "depthRadius : i32, bias : f32, alpha : f32, beta : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "lrn_grad";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];

        let MIN_DEPTH_BEGIN = 0;
        let MAX_DEPTH_END = uniforms.outShape[3];
        var result = 0.0;
        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {
          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);
          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);

          var norm = 0.0;
          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            } else {
              break;
            }
          }

          norm = uniforms.alpha * norm + uniforms.bias;

          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              var dyi = -2.0 * uniforms.alpha * uniforms.beta
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * uniforms.beta);
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            } else {
              break;
            }
          }
        }

        setOutputAtIndex(index, result);
      }
    }
  `;
  }
};
function wpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, y: s, dy: a } = t8, { depthRadius: i, bias: p, alpha: u, beta: c } = o, l = new qx(n.shape), m = [{ type: "int32", data: [i] }, { type: "float32", data: [p] }, { type: "float32", data: [u] }, { type: "float32", data: [c] }];
  return e.runWebGPUProgram(l, [n, s, a], n.dtype, m);
}
var TW = { kernelName: Qa, backendName: "webgpu", kernelFunc: wpe };
var Spe = et({ opType: fe.MAX, cpuKernelImpl: Sz });
var _W = { kernelName: Wn, backendName: "webgpu", kernelFunc: Spe };
function Ipe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1, c = w.computePool2DInfo(n.shape, s, a, u, i, p);
  return ax(n, c, "max", e);
}
var $W = { kernelName: Un, backendName: "webgpu", kernelFunc: Ipe };
function vpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { filterSize: s, strides: a, pad: i, dataFormat: p, dimRoundingMode: u } = o, c = [1, 1, 1], l = w.computePool3DInfo(n.shape, s, a, c, i, u, p), m = new _u(l, "max"), d = [{ type: "int32", data: [l.strideDepth, l.strideHeight, l.strideWidth] }, { type: "int32", data: [l.padInfo.front, l.padInfo.top, l.padInfo.left] }, { type: "int32", data: [l.inDepth, l.inHeight, l.inWidth] }, { type: "int32", data: [l.effectiveFilterDepth, l.effectiveFilterHeight, l.effectiveFilterWidth] }];
  return e.runWebGPUProgram(m, [n], n.dtype, d);
}
var EW = { kernelName: ia, backendName: "webgpu", kernelFunc: vpe };
var jx = class {
  constructor(t8) {
    this.variableNames = ["dy", "maxPos"], this.uniforms = `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.inShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "maxPool2DBackprop";
  }
  getUserCode() {
    return `
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);
            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            let curPosValue = wR * uniforms.filterDims[1] + wC;
            let mask = select(0.0, 1.0, maxPosValue == curPosValue);
            dotProd += dyValue * mask;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
};
var Xx = class {
  constructor(t8) {
    this.variableNames = ["dy", "maxPos"], this.uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8.inShape, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "maxPool3DBackprop";
  }
  getUserCode() {
    return `
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;

        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;
              let mask = select(0.0, 1.0, maxPosValue == curPosValue);
              dotProd += dyValue * mask;
            }
          }
        }

        setOutputAtIndex(index, dotProd);
      }
    }
    `;
  }
};
function kpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s } = t8, a = s, { filterSize: i, strides: p, pad: u, dimRoundingMode: c } = o, l = [1, 1, 1], m = w.computePool3DInfo(a.shape, i, p, l, u, c), d = new _u(m, "max", true), f = [{ type: "int32", data: [m.strideDepth, m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.padInfo.front, m.padInfo.top, m.padInfo.left] }, { type: "int32", data: [m.inDepth, m.inHeight, m.inWidth] }, { type: "int32", data: [m.effectiveFilterDepth, m.effectiveFilterHeight, m.effectiveFilterWidth] }], h = e.runWebGPUProgram(d, [a], "int32", f), g = new Xx(m);
  f = [{ type: "int32", data: [m.strideDepth, m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.effectiveFilterDepth - 1 - m.padInfo.front, m.effectiveFilterHeight - 1 - m.padInfo.top, m.effectiveFilterWidth - 1 - m.padInfo.left] }, { type: "int32", data: [m.effectiveFilterDepth, m.effectiveFilterHeight, m.effectiveFilterWidth] }, { type: "int32", data: [m.outDepth] }, { type: "int32", data: [m.outHeight] }, { type: "int32", data: [m.outWidth] }];
  let x = e.runWebGPUProgram(g, [n, h], a.dtype, f);
  return e.disposeData(h.dataId), x;
}
var RW = { kernelName: Ki, backendName: "webgpu", kernelFunc: kpe };
function Npe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { dy: n, input: s, output: a } = t8, i = s;
  fm([s, a], "maxPoolGrad");
  let { filterSize: p, strides: u, pad: c, dimRoundingMode: l } = o, m = w.computePool2DInfo(i.shape, p, u, 1, c, l), d = new za(m, "max", true), f = [{ type: "int32", data: [m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.padInfo.top, m.padInfo.left] }, { type: "int32", data: [m.dilationHeight, m.dilationWidth] }, { type: "int32", data: [m.inHeight, m.inWidth] }, { type: "int32", data: [m.effectiveFilterHeight, m.effectiveFilterWidth] }], h = e.runWebGPUProgram(d, [i], "int32", f), g = new jx(m);
  f = [{ type: "int32", data: [m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.effectiveFilterHeight - 1 - m.padInfo.top, m.effectiveFilterWidth - 1 - m.padInfo.left] }, { type: "int32", data: [m.dilationHeight, m.dilationWidth] }, { type: "int32", data: [m.effectiveFilterHeight, m.effectiveFilterWidth] }, { type: "int32", data: [m.outHeight] }, { type: "int32", data: [m.outWidth] }];
  let x = e.runWebGPUProgram(g, [n, h], i.dtype, f);
  return e.disposeData(h.dataId), x;
}
var DW = { kernelName: Hi, backendName: "webgpu", kernelFunc: Npe };
function Tpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { filterSize: n, strides: s, pad: a, includeBatchInIndex: i } = o, { x: p } = t8;
  y.assert(p.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${p.shape.length}.`);
  let u = [1, 1];
  y.assert(w.eitherStridesOrDilationsAreOne(s, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);
  let c = w.computePool2DInfo(p.shape, n, s, u, a), l = [{ type: "int32", data: [c.strideHeight, c.strideWidth] }, { type: "int32", data: [c.padInfo.top, c.padInfo.left] }, { type: "int32", data: [c.dilationHeight, c.dilationWidth] }, { type: "int32", data: [c.inHeight, c.inWidth] }, { type: "int32", data: [c.effectiveFilterHeight, c.effectiveFilterWidth] }], m = new za(c, "max", false), d = e.runWebGPUProgram(m, [p], p.dtype, l);
  m = new za(c, "max", true, true, i);
  let f = e.runWebGPUProgram(m, [p], "int32", l);
  return [d, f];
}
var AW = { kernelName: ua, backendName: "webgpu", kernelFunc: Tpe };
function _pe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  return eo(n, s, a, "min", e);
}
var FW = { kernelName: Hn, backendName: "webgpu", kernelFunc: _pe };
var $pe = et({ opType: fe.MIN, cpuKernelImpl: Iz });
var PW = { kernelName: Kn, backendName: "webgpu", kernelFunc: $pe };
var Yx = class {
  constructor(t8, e, o) {
    this.uniforms = "", this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.map((n, s) => n[0] + t8[s] + n[1]), this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.xShape = t8, e.map((n, s) => {
      this.uniforms += ` pad${s} : vec2<i32>,`;
    }), this.offset = o === "reflect" ? 0 : 1, this.shaderKey = `mirrorPad_${o}`;
  }
  getUserCode() {
    let t8 = this.xShape.length, e = this.xShape.map((u, c) => `uniforms.pad${c}[0]`).join(","), o = this.xShape.map((u, c) => `uniforms.pad${c}[0] + uniforms.xShape${t8 > 1 ? `[${c}]` : ""}`).join(","), n = t8 === 1 ? "start" : "start[i]", s = t8 === 1 ? "end" : "end[i]", a = t8 === 1 ? "outC" : "outC[i]", i = ht(t8), p = t8 > 1 ? ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, t8) : "coords";
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let start = ${i}(${e});
          let end = ${i}(${o});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${t8}; i = i + 1) {
            if (${a} < ${n}) {
              ${a} = ${n} * 2 - ${a} - ${this.offset};
            } else if(${a} >= ${s}) {
              ${a} = (${s} - 1) * 2 - ${a} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${p}));
        }
      }
    `;
  }
};
var OW = { kernelName: qn, backendName: "webgpu", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { x: o } = r, { paddings: n, mode: s } = t8, a = e, i = n.map((c) => ({ type: "int32", data: [c[0], c[1]] })), p = new Yx(o.shape, n, s);
  return a.runWebGPUProgram(p, [o], o.dtype, i);
} };
var Epe = et({ opType: fe.MOD });
var MW = { kernelName: jn, backendName: "webgpu", kernelFunc: Epe };
var Qx = class {
  constructor(t8, e) {
    this.variableNames = ["probs"], this.outputShape = [], this.uniforms = "seed : f32, numOutcomes: i32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [t8, e], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "multinomial";
  }
  getUserCode() {
    return `
    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {
      let HASHSCALE1 = 443.8975;
      let p = resultUV * seed;
      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);
      p3 = p3 + dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords[0];

        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),
            f32(coords[0]) / f32(uniforms.outShape[0]));
        let r = random(uniforms.seed, resUV);
        var cdf = 0.0;
        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {
          cdf = cdf + getProbs(batch, i);

          if (r < cdf) {
            setOutputAtIndexI32(index, i);
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);
      }
    }
  `;
  }
};
var Zx = class {
  constructor(t8) {
    this.variableNames = ["logits"], this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = [this.outputShape[0], 1, 1], this.outputShape[1] >= 4096 ? this.workgroupSize = [256, 1, 1] : this.workgroupSize = [64, 1, 1], this.shaderKey = "softmax";
  }
  getUserCode() {
    return `
    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;
    var<workgroup> rowMaxShared : f32;
    var<workgroup> rowSumShared : f32;
    const blockSize = ${this.workgroupSize[0]};
    ${G("index")} {
      let row = index / blockSize;
      let tid = i32(localId.x);
      let cols = uniforms.outShape[1];

      var threadMax = -3.402823e+38f;
      for (var col = tid; col < cols; col += blockSize) {
        let value = getLogits(row, col);
        threadMax = max(threadMax, value);
      }
      if (tid < cols) {
        buf[tid] = threadMax;
      }
      workgroupBarrier();

      var reduceSize = min(cols, blockSize);
      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
        reduceSize = currSize + (reduceSize & 1);
        if (tid < currSize) {
          buf[tid] = max(buf[tid], buf[tid + reduceSize]);
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowMaxShared = buf[0];
      }
      workgroupBarrier();

      var threadSum = 0.0;
      for (var col = tid; col < cols; col += blockSize) {
        let subExp = exp(getLogits(row, col) - rowMaxShared);
        threadSum += subExp;
      }
      buf[tid] = threadSum;
      workgroupBarrier();

      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {
        if (tid < currSize) {
          buf[tid] = buf[tid] + buf[tid + currSize];
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowSumShared = buf[0];
      }
      workgroupBarrier();

      for (var col = tid; col < cols; col += blockSize) {
        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;
        setOutputAtCoords(row, col, value);
      }
  }
    `;
  }
};
function p0(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { logits: n } = t8, { dim: s } = o, a = pe({ inputs: { x: n }, backend: e, attrs: { shape: [y.sizeFromShape(n.shape) / n.shape[s], n.shape[s]] } }), i = new Zx(a.shape), p = e.runWebGPUProgram(i, [a], n.dtype), u = pe({ inputs: { x: p }, backend: e, attrs: { shape: n.shape } });
  return e.disposeData(a.dataId), e.disposeData(p.dataId), u;
}
var LW = { kernelName: vs, backendName: "webgpu", kernelFunc: p0 };
function Rpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { logits: n } = t8, { numSamples: s, seed: a, normalized: i } = o, p = i ? n : p0({ inputs: { logits: n }, backend: e, attrs: { dim: n.shape.length - 1 } }), u = p.shape[0], c = p.shape[1], l = new Qx(u, s), m = [{ type: "float32", data: [a] }, { type: "int32", data: [c] }], d = e.runWebGPUProgram(l, [p], "int32", m);
  return i || e.disposeData(p.dataId), d;
}
var BW = { kernelName: Xn, backendName: "webgpu", kernelFunc: Rpe };
function Dpe(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (e.shouldExecuteOnCPU([o])) {
    let s = e.tensorMap.get(o.dataId), [a, i] = kz(s.values, o.shape, o.dtype);
    return e.makeTensorInfo(i, o.dtype, a);
  }
  let n = new Jr(o.shape, Z.NEG);
  return e.runWebGPUProgram(n, [o], o.dtype);
}
var zW = { kernelName: pa, backendName: "webgpu", kernelFunc: Dpe };
function Ape(r) {
  console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t8, backend: e, attrs: o } = r, { boxes: n, scores: s } = t8, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p } = o, u = e.readSync(n.dataId), c = e.readSync(s.dataId), { selectedIndices: l } = Wt.nonMaxSuppressionV3Impl(u, c, a, i, p);
  return e.makeTensorInfo([l.length], "int32", new Int32Array(l));
}
var VW = { kernelName: Zn, backendName: "webgpu", kernelFunc: Ape };
function Fpe(r) {
  console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: t8, backend: e, attrs: o } = r, { boxes: n, scores: s } = t8, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, softNmsSigma: u } = o, c = e.readSync(n.dataId), l = e.readSync(s.dataId), m = a, d = i, f = p, h = u, { selectedIndices: g, selectedScores: x } = Wt.nonMaxSuppressionV5Impl(c, l, m, d, f, h);
  return [e.makeTensorInfo([g.length], "int32", new Int32Array(g)), e.makeTensorInfo([x.length], "float32", new Float32Array(x))];
}
var WW = { kernelName: Jn, backendName: "webgpu", kernelFunc: Fpe };
var Jx = class {
  constructor(t8, e) {
    this.variableNames = ["x"], this.uniforms = "onValue : f32, offValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [t8, e], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "onehot";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,
                                      f32(i32(round(getX(coords.x))) == coords.y)));
        }
      }
    `;
  }
};
function Ppe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { indices: n } = t8, { dtype: s, depth: a, onValue: i, offValue: p } = o, u = y.sizeFromShape(n.shape), c = new Jx(u, a), l = pe({ inputs: { x: n }, backend: e, attrs: { shape: [u] } }), m = [{ type: "float32", data: [i] }, { type: "float32", data: [p] }], d = e.runWebGPUProgram(c, [l], s, m);
  e.disposeData(l.dataId);
  let f = [...n.shape, a], h = pe({ inputs: { x: d }, backend: e, attrs: { shape: f } });
  return e.disposeData(d.dataId), h;
}
var UW = { kernelName: es, backendName: "webgpu", kernelFunc: Ppe };
function bm(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (o.dtype === "complex64") {
    let n = Ni({ inputs: { input: o }, backend: e }), s = bm({ inputs: { x: n }, backend: e }), a = Mp({ inputs: { input: o }, backend: e }), i = bm({ inputs: { x: a }, backend: e }), p = yo({ inputs: { real: s, imag: i }, backend: e });
    return e.disposeData(n.dataId), e.disposeData(s.dataId), e.disposeData(a.dataId), e.disposeData(i.dataId), p;
  } else
    return kt({ attrs: { shape: o.shape, dtype: o.dtype, value: o.dtype === "string" ? "" : 0 }, backend: e });
}
var GW = { kernelName: Sa, backendName: "webgpu", kernelFunc: bm };
function HW(r) {
  let { inputs: t8, backend: e } = r, { x: o } = t8;
  if (o.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (o.dtype === "complex64") {
    let n = Ni({ inputs: { input: o }, backend: e }), s = HW({ inputs: { x: n }, backend: e }), a = Mp({ inputs: { input: o }, backend: e }), i = bm({ inputs: { x: a }, backend: e }), p = yo({ inputs: { real: s, imag: i }, backend: e });
    return e.disposeData(n.dataId), e.disposeData(s.dataId), e.disposeData(a.dataId), e.disposeData(i.dataId), p;
  } else
    return kt({ attrs: { shape: o.shape, dtype: o.dtype, value: 1 }, backend: e });
}
var KW = { kernelName: ca, backendName: "webgpu", kernelFunc: HW };
function Ope(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { axis: n } = o;
  if (t8.length === 1)
    return Mx({ inputs: { input: t8[0] }, backend: e, attrs: { dim: n } });
  let s = t8[0].shape, a = t8[0].dtype;
  t8.forEach((c) => {
    y.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), y.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], p = t8.map((c) => {
    let l = Mx({ inputs: { input: c }, backend: e, attrs: { dim: n } });
    return i.push(l), l;
  }), u = n0({ inputs: p, backend: e, attrs: { axis: n } });
  return i.forEach((c) => e.disposeData(c.dataId)), u;
}
var qW = { kernelName: la, backendName: "webgpu", kernelFunc: Ope };
function c0(r, t8 = false) {
  let e = r.length, o = ht(e), n = r.map((l, m) => `uniforms.pad${m}[0]`).join(","), s = r.map((l, m) => `uniforms.pad${m}[0] + uniforms.xShape${e > 1 ? `[${m}]` : ""}`).join(","), a = e > 1 ? `${o}(${n})` : `${n}`, i = e > 1 ? `${o}(${s})` : `${s}`, p = e > 1 ? "any(paddedCoords < start)" : "paddedCoords < start", u = e > 1 ? "any(paddedCoords >= end)" : "paddedCoords >= end", c = e > 1 ? ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, e) : "coords";
  return `
        let start = ${a};
        let end = ${i};
        if (${p} || ${u}) {
          setOutputAtIndex(index, ${t8 ? 0 : "uniforms.constantValue"});
        } else {
          let coords = paddedCoords - start;
          setOutputAtIndex(index, getX(${c}));
        }
  `;
}
var ey = class {
  constructor(t8, e) {
    this.variableNames = ["x"], this.uniforms = "constantValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.map((o, n) => o[0] + t8[n] + o[1]), this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), e.map((o, n) => {
      this.uniforms += ` pad${n} : vec2<i32>,`;
    }), this.xShape = t8, this.shaderKey = "pad";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let paddedCoords = getCoordsFromIndex(index);
          ${c0(this.xShape)}
        }
      }
    `;
  }
};
var Mpe = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { paddings: s, constantValue: a } = o;
  if (s.every((u) => y.arraysEqual(u, [0, 0])))
    return Ft({ inputs: { x: n }, backend: e });
  if (y.sizeFromShape(n.shape) === 0) {
    let u = s.map((c, l) => c[0] + n.shape[l] + c[1]);
    return kt({ backend: e, attrs: { shape: u, value: a, dtype: n.dtype } });
  }
  let i = [{ type: "float32", data: [a] }];
  s.map((u) => i.push({ type: "int32", data: [u[0], u[1]] }));
  let p = new ey(n.shape, s);
  return e.runWebGPUProgram(p, [n], n.dtype, i);
};
var jW = { kernelName: ts, backendName: "webgpu", kernelFunc: Mpe };
var Lpe = et({ opType: fe.POW });
var XW = { kernelName: rs, backendName: "webgpu", kernelFunc: Lpe };
function Bpe(r) {
  let { inputs: t8, backend: e } = r, { x: o, alpha: n } = t8, s = new ki(fe.PRELU, o.shape, n.shape);
  return e.runWebGPUProgram(s, [o, n], "float32");
}
var YW = { kernelName: os, backendName: "webgpu", kernelFunc: Bpe };
function zpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { axis: s, keepDims: a } = o;
  return eo(n, s, a, "prod", e);
}
var QW = { kernelName: ns, backendName: "webgpu", kernelFunc: zpe };
var Vpe = (r) => {
  let { backend: t8, attrs: e } = r, { start: o, stop: n, step: s, dtype: a } = e, i = _z(o, n, s, a);
  return t8.makeTensorInfo([i.length], a, i);
};
var ZW = { kernelName: ma, backendName: "webgpu", kernelFunc: Vpe };
var Wpe = et({ opType: fe.DIV });
var JW = { kernelName: hn, backendName: "webgpu", kernelFunc: Wpe };
var Upe = ye({ opType: Z.RECIPROCAL });
var eU = { kernelName: ss, backendName: "webgpu", kernelFunc: Upe };
var Gpe = ye({ opType: Z.RELU });
var tU = { kernelName: as, backendName: "webgpu", kernelFunc: Gpe };
var Hpe = ye({ opType: Z.RELU6 });
var rU = { kernelName: ps, backendName: "webgpu", kernelFunc: Hpe };
var ty = class {
  constructor(t8, e, o) {
    this.variableNames = ["x"], this.uniforms = "adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [t8[0], e, o, t8[3]], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "resizeBilinear";
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `;
  }
};
function Kpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n } = t8, { alignCorners: s, size: a, halfPixelCenters: i } = o, [p, u] = a, c = s && p > 1 ? 1 : 0, l = s && u > 1 ? 1 : 0, d = [{ type: "float32", data: [c, l] }, { type: "float32", data: [i ? 0.5 : 0] }], f = new ty(n.shape, p, u);
  return e.runWebGPUProgram(f, [n], "float32", d);
}
var oU = { kernelName: us, backendName: "webgpu", kernelFunc: Kpe };
var ry = class {
  constructor(t8, e) {
    this.variableNames = ["dy"], this.uniforms = `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,
       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.alignCorners = e, this.shaderKey = `resizeBilinearBackprop_${e}`;
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let dxR = f32(dyR) * uniforms.heightScale;
              let topDxRIndex = i32(floor(dxR));
              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));
              let dxRLerp = dxR - f32(topDxRIndex);
              let inverseDxRLerp = 1.0 - dxRLerp;

              let dxC = f32(dyC) * uniforms.widthScale;
              let leftDxCIndex = i32(floor(dxC));
              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));
              let dxCLerp = dxC - f32(leftDxCIndex);
              let inverseDxCLerp = 1.0 - dxCLerp;

              if (r == topDxRIndex && c == leftDxCIndex) {
                // topLeft
                accumulator +=
                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
              }

              if (r == topDxRIndex && c == rightDxCIndex) {
                // topRight
                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
              }

              if (r == bottomDxRIndex && c == leftDxCIndex) {
                // bottomLeft
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
              }

              if (r == bottomDxRIndex && c == rightDxCIndex) {
                // bottomRight
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `;
  }
};
function qpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n, dy: s } = t8, { alignCorners: a } = o, [, i, p] = n.shape, [, u, c] = s.shape, l = [a && u > 1 ? i - 1 : i, a && c > 1 ? p - 1 : p], m = [a && u > 1 ? u - 1 : u, a && c > 1 ? c - 1 : c], d = l[0] / m[0], f = l[1] / m[1], h = 1 / d, g = 1 / f, x = Math.ceil(h) * 2 + 2, b = Math.ceil(g) * 2 + 2, C = new ry(n.shape, a), S = [{ type: "int32", data: l }, { type: "int32", data: m }, { type: "float32", data: [d] }, { type: "float32", data: [f] }, { type: "float32", data: [h] }, { type: "float32", data: [g] }, { type: "int32", data: [x] }, { type: "int32", data: [b] }];
  return e.runWebGPUProgram(C, [s], s.dtype, S);
}
var nU = { kernelName: ei, backendName: "webgpu", kernelFunc: qpe };
var oy = class {
  constructor(t8, e, o, n) {
    this.variableNames = ["x"], this.uniforms = "adjustHeightWidth : vec2<f32>, roundBase : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [t8[0], e, o, t8[3]], this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.halfPixelCenters = n, this.shaderKey = `resizeNearest_${n}`;
  }
  getUserCode() {
    let t8;
    return this.halfPixelCenters ? t8 = "max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))" : t8 = "vec2<f32>(rc) * effectiveInputOverOutputRatioRC", `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${t8};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `;
  }
};
function jpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n } = t8, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, c = s && p > 1 ? 1 : 0, l = s && u > 1 ? 1 : 0, d = [{ type: "float32", data: [c, l] }, { type: "float32", data: [s ? 0.5 : 0] }], f = new oy(n.shape, p, u, a);
  return e.runWebGPUProgram(f, [n], n.dtype, d);
}
var sU = { kernelName: is, backendName: "webgpu", kernelFunc: jpe };
var ny = class {
  constructor(t8, e) {
    this.variableNames = ["dy"], this.uniforms = `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,
       winHeight : i32, winWidth : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.alignCorners = e, this.shaderKey = `resizeNearestNeigborBackprop_${e}`;
  }
  getUserCode() {
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *
                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));

              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *
                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));

              let sourceNearestRow =
                  i32(min(f32(uniforms.outShape[1] - 1),
                  ${this.alignCorners ? "floor(sourceFracRow + 0.5)" : "floor(sourceFracRow)"}));

              let sourceNearestCol =
                  i32(min(f32(uniforms.outShape[2] - 1),
                  ${this.alignCorners ? "floor(sourceFracCol + 0.5)" : "floor(sourceFracCol)"}));

              if (r == sourceNearestRow && c == sourceNearestCol) {
                accumulator += getDy(b, dyR, dyC, d);
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `;
  }
};
function Xpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { images: n, dy: s } = t8, { alignCorners: a } = o, [, i, p] = n.shape, [, u, c] = s.shape, l = [a && u > 1 ? i - 1 : i, a && c > 1 ? p - 1 : p], m = [a && u > 1 ? u - 1 : u, a && c > 1 ? c - 1 : c], d = l[0] / m[0], f = l[1] / m[1], h = 1 / d, g = 1 / f, x = Math.ceil(h) * 2 + 2, b = Math.ceil(g) * 2 + 2, C = new ny(n.shape, a), S = [{ type: "int32", data: l }, { type: "int32", data: m }, { type: "float32", data: [h] }, { type: "float32", data: [g] }, { type: "int32", data: [x] }, { type: "int32", data: [b] }];
  return e.runWebGPUProgram(C, [s], s.dtype, S);
}
var aU = { kernelName: Ja, backendName: "webgpu", kernelFunc: Xpe };
var sy = class {
  constructor(t8) {
    this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = " axis : vec4<i32>,", this.shaderKey = "reverse";
  }
  getUserCode() {
    return `
      
      // Using uniform variables as judging conditions, so the function has
      // coherent execution within all threads.
      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {
        var reverseCoords = coords;
        if (uniforms.axis[0] == 1) {
          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;
        }
        if (uniforms.axis[1] == 1) {
          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;
        }
        if (uniforms.axis[2] == 1) {
          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;
        }
        if (uniforms.axis[3] == 1) {
          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;
        }

        return reverseCoords;
      }
    
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let reverseCoords = getReverseCoords(coords);
          setOutputAtIndex(index, getX(reverseCoords[0],
              reverseCoords[1], reverseCoords[2], reverseCoords[3]));
        }
      }
    `;
  }
};
function Ype(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { dims: s } = o, a = n.shape.length;
  if (a === 0)
    return Ft({ inputs: { x: n }, backend: e });
  let i = n.shape, p = [1, 1, 1, 1];
  i.forEach((g, x) => {
    let b = x + 4 - a;
    p[b] = g;
  });
  let u = y.parseAxisParam(s, n.shape), c = [0, 0, 0, 0];
  u.forEach((g) => {
    let x = g + 4 - a;
    c[x] = 1;
  });
  let l = [{ type: "int32", data: c }], m = pe({ inputs: { x: n }, backend: e, attrs: { shape: p } }), d = new sy(p), f = e.runWebGPUProgram(d, [m], m.dtype, l);
  e.disposeData(m.dataId);
  let h = pe({ inputs: { x: f }, backend: e, attrs: { shape: i } });
  return e.disposeData(f.dataId), h;
}
var iU = { kernelName: cs, backendName: "webgpu", kernelFunc: Ype };
var ay = class {
  constructor(t8, e) {
    this.outputShape = [], this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`, this.shaderKey = "rotate", this.outputShape = t8, typeof e == "number" ? (this.uniforms += " fillValue : f32,", this.fillSnippet = "var outputValue = uniforms.fillValue;", this.shaderKey += "_float") : (this.uniforms += " fillValue : vec3<f32>,", this.fillSnippet = "var outputValue = uniforms.fillValue[coords[3]];", this.shaderKey += "_vec3");
  }
  getUserCode() {
    return `
        ${G("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `;
  }
};
var uU = { kernelName: As, backendName: "webgpu", kernelFunc: ({ inputs: r, attrs: t8, backend: e }) => {
  let { image: o } = r, { radians: n, fillValue: s, center: a } = t8, i = e, p = new ay(o.shape, s), [u, c] = w.getImageCenter(a, o.shape[1], o.shape[2]), l = [{ type: "float32", data: [u] }, { type: "float32", data: [c] }, { type: "float32", data: [Math.sin(n)] }, { type: "float32", data: [Math.cos(n)] }];
  return typeof s == "number" ? l.push({ type: "float32", data: [Number.parseFloat(s.toFixed(2))] }) : l.push({ type: "float32", data: s }), i.runWebGPUProgram(p, [o], o.dtype, l);
} };
var Qpe = ye({ opType: Z.ROUND });
var pU = { kernelName: ls, backendName: "webgpu", kernelFunc: Qpe };
var Zpe = ye({ opType: Z.RSQRT, cpuKernelImpl: $z });
var cU = { kernelName: ms, backendName: "webgpu", kernelFunc: Zpe };
var Va = class {
  constructor(t8, e, o, n, s, a, i, p = true) {
    this.variableNames = ["updates", "indices"], this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = a, this.type = i, this.sumDupeIndices = p, this.dispatchLayout = X(t8), this.dispatch = H(this.dispatchLayout, t8, this.workgroupSize), this.sliceDimGreaterThanOne = e > 1, this.shaderKey = `scatter_${o}_${n}_${this.sliceDimGreaterThanOne}_${i}_${p}`;
    let u = ht(s.length);
    this.uniforms = `sliceDim : i32, strides: ${u}, updatesSize: i32,`, this.updatesRank = n, this.indicesRank = o;
  }
  getUserCode() {
    let t8 = "";
    this.indicesRank === 1 ? t8 = "coords[0]" : this.indicesRank === 2 && (t8 = "coords[0], j");
    let e = `getIndices(${t8})`, o = this.sliceDimGreaterThanOne ? "uniforms.strides[j]" : "uniforms.strides", n = "", s = "";
    this.dispatchLayout.x.length === 1 ? (n = "flattenedIndex", s = `
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `) : this.dispatchLayout.x.length === 2 && (n = "vec2<i32>(flattenedIndex, coords[1])", s = `
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);
    let i = `getUpdates(${Array.from({ length: this.updatesRank }, (u, c) => `coords[${c}]`).join(", ")})`;
    return `
    ${s}
      ${G("index")} {
        if (index < uniforms.updatesSize) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${e}));
            flattenedIndex = flattenedIndex + indexInside * ${o};
          }
          let updateValue =
              ${Nu(this.type)}(${i});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${this.sumDupeIndices ? Qr("&result[flatIndex]", "updateValue", this.type) : "atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}
        }
      }`;
  }
};
function Jpe(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { indices: n, updates: s } = t8, { shape: a } = o, { sliceRank: i, numUpdates: p, sliceSize: u, strides: c, outputSize: l } = w.calculateShapes(s, n, a), m = [l / u, u];
  if (l === 0)
    return e.makeTensorInfo(a, n.dtype);
  let d = pe({ inputs: { x: n }, backend: e, attrs: { shape: [p, i] } }), f = pe({ inputs: { x: s }, backend: e, attrs: { shape: [p, u] } }), h = f.dtype, g = kt({ backend: e, attrs: { shape: m, value: 0, dtype: h } }), x = y.sizeFromShape(f.shape), b = [{ type: "int32", data: [i] }, { type: "int32", data: c }, { type: "int32", data: [x] }], C = new Va(f.shape, i, d.shape.length, f.shape.length, c, m, h), S = e.runWebGPUProgram(C, [f, d], h, b, g), k = pe({ inputs: { x: S }, backend: e, attrs: { shape: a } });
  return e.disposeData(d.dataId), e.disposeData(f.dataId), e.disposeData(S.dataId), k;
}
var lU = { kernelName: ds, backendName: "webgpu", kernelFunc: Jpe };
var iy = class {
  constructor(t8, e) {
    this.outputShape = [], this.variableNames = ["sortedSequence", "values"], this.uniforms = "numInputs : i32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.side = e, this.shaderKey = `search_sorted_${e}`;
  }
  getUserCode() {
    return `
      fn findBound(batch: i32, value: f32) -> i32 {
        var left = i32(0);
        var right = uniforms.numInputs;
        while (left < right) {
          var mid = (left + right) / 2;
          if (getSortedSequence(batch, mid) ${this.side === "left" ? "<" : "<="} value) {
            left = mid + 1;
          } else {
            right = mid;
          }
        }
        return right;
      }

      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let value = getValuesByOutputIndex(index);
          setOutputAtIndexI32(index, findBound(coords[0], value));
        }
      }
    `;
  }
};
function ece(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { sortedSequence: n, values: s } = t8, { side: a } = o, i = new iy([s.shape[0], s.shape[1]], a), p = [{ type: "int32", data: [n.shape[1]] }];
  return e.runWebGPUProgram(i, [n, s], "int32", p);
}
var mU = { kernelName: hs, backendName: "webgpu", kernelFunc: ece };
var uy = class {
  constructor(t8, e, o) {
    this.variableNames = ["c", "a", "b"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.cRank = t8, this.rank = o, this.shaderKey = "select";
  }
  getUserCode() {
    let t8, e;
    if (this.rank > 4)
      throw Error(`Where for rank ${this.rank} is not yet supported`);
    if (this.rank === 1)
      e = "resRC", t8 = "resRC";
    else {
      let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [], a = [];
      for (let i = 0; i < this.outputShape.length; i++)
        a.push(`${n[i]}`), i < this.cRank && s.push(`${n[i]}`);
      t8 = s.join(), e = a.join();
    }
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${t8});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${e}));
          } else {
            setOutputAtIndex(index, getB(${e}));
          }
        }
      }
    `;
  }
};
function tce(r) {
  let { inputs: t8, backend: e } = r, { condition: o, t: n, e: s } = t8, a = new uy(o.shape.length, n.shape, n.shape.length);
  return e.runWebGPUProgram(a, [o, n, s], dt(n.dtype, s.dtype));
}
var dU = { kernelName: fa, backendName: "webgpu", kernelFunc: tce };
var rce = ye({ opType: Z.SELU });
var fU = { kernelName: gs, backendName: "webgpu", kernelFunc: rce };
var oce = ye({ opType: Z.SIGMOID });
var hU = { kernelName: Cs, backendName: "webgpu", kernelFunc: oce };
var nce = ye({ opType: Z.SIGN });
var gU = { kernelName: bs, backendName: "webgpu", kernelFunc: nce };
var sce = ye({ opType: Z.SIN });
var xU = { kernelName: xs, backendName: "webgpu", kernelFunc: sce };
var ace = ye({ opType: Z.SINH });
var yU = { kernelName: ys, backendName: "webgpu", kernelFunc: ace };
var ice = ye({ opType: Z.SOFTPLUS });
var bU = { kernelName: ws, backendName: "webgpu", kernelFunc: ice };
var py = class {
  constructor(t8, e, o, n, s, a) {
    this.variableNames = ["x"], this.outputShape = [], this.uniforms = "", this.workgroupSize = [64, 1, 1], this.size = true;
    let i = new Array(n.length);
    for (let p = 0; p < i.length; p++)
      i[p] = n[s[p]];
    this.outputShape = i, this.newDim = s, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.xShape = t8, this.paddedXShape = e, this.uniforms += `reshapedPaddedXShape : ${ht(n.length)}, paddedXShapeStrides : ${ht(a)}, `, o.map((p, u) => {
      this.uniforms += ` pad${u} : vec2<i32>,`;
    }), this.shaderKey = `spaceToBatchND_${s}`;
  }
  getUserCode() {
    let t8 = ht(this.outputShape.length), e = Zv(this.newDim);
    return `
      ${cm(this.paddedXShape, "PaddedX")}
      ${G("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${t8}(${e}), uniforms.reshapedPaddedXShape);
          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);
          ${c0(this.xShape, true)}
        }
      }
    `;
  }
};
var uce = (r) => {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { blockShape: s, paddings: a } = o;
  y.assert(n.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");
  let i = s.reduce((b, C) => b * C), p = [[0, 0]];
  p.push(...a);
  for (let b = 1 + s.length; b < n.shape.length; ++b)
    p.push([0, 0]);
  let u = p.map((b, C) => b[0] + n.shape[C] + b[1]), c = w.getReshaped(u, s, i, false), l = w.getPermuted(c.length, s.length, false), m = w.getReshapedPermuted(u, s, i, false), d = y.computeStrides(u), f = new py(n.shape, u, p, c, l, d.length), h = [{ type: "int32", data: c }, { type: "int32", data: d }];
  p.map((b) => h.push({ type: "int32", data: [b[0], b[1]] }));
  let g = e.runWebGPUProgram(f, [n], n.dtype, h), x = pe({ inputs: { x: g }, backend: e, attrs: { shape: m } });
  return e.disposeData(g.dataId), x;
};
var CU = { kernelName: ga, backendName: "webgpu", kernelFunc: uce };
var cy = class {
  constructor(t8, e, o) {
    this.variableNames = ["input", "indices", "segmentIds"], this.outputShape = [], this.uniforms = "segmentSize : i32, sparseSize : i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = t8, this.type = o, this.dispatchLayout = X([e]), this.dispatch = H(this.dispatchLayout, [e], this.workgroupSize), this.shaderKey = "sparseSegmentSum";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.sparseSize) {
        let indexInSegmentIds = index / uniforms.segmentSize;
        let indexInSegment = index % uniforms.segmentSize;
        let indexInInput = indices[indexInSegmentIds];
        let segmentId = segmentIds[indexInSegmentIds];

        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];
        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;
        ${Qr("&result[outIndex]", "value", this.type)}
      }
    }
  `;
  }
};
var ly = class {
  constructor(t8, e) {
    this.variableNames = ["segmentIds"], this.outputShape = [], this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = [t8], this.dispatchLayout = X(e), this.dispatch = H(this.dispatchLayout, e, this.workgroupSize), this.shaderKey = "sparseSegmentIdCountProgram";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.segmentIdsShape) {
        let segmentId = segmentIds[index];
        ${Qr("&result[segmentId]", "1", "int32")}
      }
    }
  `;
  }
};
var my = class {
  constructor(t8, e) {
    this.variableNames = ["segmentSum", "sameSegmentIdCount"], this.outputShape = [], this.uniforms = "segmentSize : i32", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.type = e, this.dispatchLayout = X(t8), this.dispatch = H(this.dispatchLayout, t8, this.workgroupSize), this.shaderKey = "sparseSegmentMean";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.size) {
        let segmentId = index / uniforms.segmentSize;
        let count = sameSegmentIdCount[segmentId];
        if (count != 0) {
          ${this.type === "float32" ? "setOutputAtIndex(index, segmentSum[index] / f32(count));" : "setOutputAtIndexI32(index, segmentSum[index] / count);"}
        }
      }
    }
  `;
  }
};
function dy(r, t8, e, o = false, n) {
  let a = y.sizeFromShape(r.shape) / r.shape[0], i = r.dtype, p = y.sizeFromShape(t8.shape), u = n.readSync(e.dataId), l = p > 0 ? u[p - 1] + 1 : 0, m, d = r.shape.slice();
  d[0] = l;
  let f = p * a, h = kt({ backend: n, attrs: { shape: d, value: 0, dtype: i } });
  m = new cy(d, f, i);
  let g = [{ type: "int32", data: [a] }, { type: "int32", data: [f] }], x = n.runWebGPUProgram(m, [r, t8, e], i, g, h);
  if (o)
    return x;
  let b = kt({ backend: n, attrs: { shape: [l], value: 0, dtype: "int32" } });
  m = new ly(l, e.shape);
  let C = n.runWebGPUProgram(m, [e], "int32", null, b), S = kt({ backend: n, attrs: { shape: d, value: 0, dtype: i } });
  m = new my(d, i), g = [{ type: "int32", data: [a] }];
  let k = n.runWebGPUProgram(m, [x, C], i, g, S);
  return n.disposeData(x.dataId), n.disposeData(C.dataId), k;
}
function pce(r) {
  let { inputs: t8, backend: e } = r, { data: o, indices: n, segmentIds: s } = t8;
  return dy(o, n, s, false, e);
}
var wU = { kernelName: ya, backendName: "webgpu", kernelFunc: pce };
function cce(r) {
  let { inputs: t8, backend: e } = r, { data: o, indices: n, segmentIds: s } = t8;
  return dy(o, n, s, true, e);
}
var SU = { kernelName: ba, backendName: "webgpu", kernelFunc: cce };
var fy = class {
  constructor(t8, e) {
    this.variableNames = ["A"], this.workgroupSize = [64, 1, 1], this.size = true;
    let o = new Array(t8.length);
    for (let n = 0; n < o.length; n++)
      o[n] = t8[n] * e[n];
    this.outputShape = o, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.rank = this.outputShape.length, this.shaderKey = "tile";
  }
  getUserCode() {
    let t8 = lce(this.rank, "uniforms.");
    return `
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${t8}));
        }
      }
    `;
  }
};
function lce(r, t8 = "") {
  if (r >= 5)
    throw Error(`Tile for rank ${r} is not yet supported`);
  if (r === 1)
    return `(resRC % ${t8}aShape)`;
  let e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [];
  for (let n = 0; n < r; n++)
    o.push(`(${e[n]} % ${t8}aShape[${n}])`);
  return o.join();
}
function Cm(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { reps: s } = o;
  if (e.shouldExecuteOnCPU([n]) || n.dtype === "string" || n.shape.length >= 5) {
    let p = e.readSync(n.dataId), u = n.dtype === "string" ? p.map((m) => y.decodeString(m)) : p, c = me(n.shape, n.dtype, u), l = Oz(c, s);
    return e.makeTensorInfo(l.shape, l.dtype, l.values);
  }
  let a = new fy(n.shape, s);
  return e.runWebGPUProgram(a, [n], n.dtype);
}
var IU = { kernelName: po, backendName: "webgpu", kernelFunc: Cm };
function mce(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { sparseIndices: n, sparseValues: s, defaultValue: a } = t8, { outputShape: i } = o, { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = w.calculateShapes(s, n, i), d = false;
  if (s.dtype === "string") {
    let R = e.bufferSync(n), D = e.bufferSync(s), P = y.decodeString(e.readSync(a.dataId)[0]), O = Ez(R, D, i, m, c, u, p, l, P, d);
    return e.makeTensorInfo(i, O.dtype, O.values);
  }
  let f = [m / c, c], h = pe({ inputs: { x: n }, backend: e, attrs: { shape: [u, p] } }), g = s.shape.length ? pe({ inputs: { x: s }, backend: e, attrs: { shape: [u, c] } }) : Ft({ inputs: { x: s }, backend: e }), x = g.dtype, b = e.makeTensorInfo([], x, y.makeZerosTypedArray(1, x)), C = pe({ inputs: { x: a }, backend: e, attrs: { shape: Array(f.length).fill(1) } }), S = Cm({ inputs: { x: C }, backend: e, attrs: { reps: f } }), k = y.sizeFromShape([u, c]), _ = [{ type: "int32", data: [p] }, { type: "int32", data: l }, { type: "int32", data: [k] }];
  switch (u) {
    case 0:
      break;
    case 1:
      {
        let R = new Va([u, c], p, h.shape.length, g.shape.length, l, f, x, d);
        e.runWebGPUProgram(R, [g, h], x, _, S);
      }
      break;
    default:
      {
        let R = new Va([u, c], p, h.shape.length, b.shape.length, l, f, x, d);
        e.runWebGPUProgram(R, [b, h], x, _, S);
      }
      {
        let R = new Va([u, c], p, h.shape.length, g.shape.length, l, f, x);
        e.runWebGPUProgram(R, [g, h], x, _, S);
      }
  }
  let E = pe({ inputs: { x: S }, backend: e, attrs: { shape: i } });
  return e.disposeData(h.dataId), e.disposeData(g.dataId), e.disposeData(C.dataId), e.disposeData(b.dataId), e.disposeData(S.dataId), E;
}
var vU = { kernelName: ks, backendName: "webgpu", kernelFunc: mce };
function dce(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { numOrSizeSplits: s, axis: a } = o, i = y.parseAxisParam(a, n.shape)[0], p = w.prepareSplitSize(n, s, i), u = n.shape.length, c = new Array(u).fill(0), l = n.shape.slice();
  return p.map((m) => {
    let d = [...l];
    d[i] = m;
    let f = Hs({ inputs: { x: n }, backend: e, attrs: { begin: c, size: d } });
    return c[i] += m, f;
  });
}
var kU = { kernelName: xa, backendName: "webgpu", kernelFunc: dce };
var fce = ye({ opType: Z.SQRT });
var NU = { kernelName: Ss, backendName: "webgpu", kernelFunc: fce };
var TU = { kernelName: Xi, backendName: "webgpu", kernelFunc: ({ inputs: r, backend: t8 }) => {
  let { x: e } = r, o = t8, n = new Jr(e.shape, Z.SQUARE);
  return o.runWebGPUProgram(n, [e], e.dtype);
} };
var hce = et({ opType: fe.SQUARED_DIFFERENCE });
var _U = { kernelName: Ns, backendName: "webgpu", kernelFunc: hce };
function gce({ inputs: r, attrs: t8, backend: e }) {
  let { x: o } = r, n = new Jr(o.shape, Z.STEP, "stepAlpha : f32,"), s = [{ type: "float32", data: [t8.alpha] }];
  return e.runWebGPUProgram(n, [o], o.dtype, s);
}
var $U = { kernelName: So, backendName: "webgpu", kernelFunc: gce };
var hy = class {
  constructor(t8) {
    this.variableNames = ["x"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);
    let e = ht(this.outputShape.length);
    this.uniforms = `begin : ${e},  strides : ${e}, `, this.shaderKey = "stridedSlice";
  }
  getUserCode() {
    let t8 = this.outputShape.length, e = "";
    if (t8 === 1)
      e = "coords * uniforms.strides + uniforms.begin";
    else {
      let n = 0;
      e = this.outputShape.map((s, a) => (n++, this.outputShape.length === 1 ? `coords * uniforms.strides[${a}] + uniforms.begin[${a}]` : `coords[${n - 1}] * uniforms.strides[${a}] + uniforms.begin[${a}]`)).join(",");
    }
    return `
       ${G("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${e}));
         }
       }
     `;
  }
};
function xce(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { begin: s, end: a, strides: i, beginMask: p, endMask: u, ellipsisMask: c, newAxisMask: l, shrinkAxisMask: m } = o, { finalShapeSparse: d, finalShape: f, isIdentity: h, sliceDim0: g, isSimpleSlice: x, begin: b, end: C, strides: S } = ct.sliceInfo(n.shape, s, a, i, p, u, c, l, m), k;
  if (h)
    k = pe({ inputs: { x: n }, backend: e, attrs: { shape: f } });
  else if (g || x) {
    y.assert(n.shape.length >= 1, () => `Input must have rank at least 1, got: ${n.shape.length}`);
    let _ = ct.computeOutShape(b, C, S), E = Hs({ inputs: { x: n }, backend: e, attrs: { begin: b, size: _ } });
    k = pe({ inputs: { x: E }, backend: e, attrs: { shape: f } }), e.disposeData(E.dataId);
  } else if (e.shouldExecuteOnCPU([n])) {
    let E = e.readSync(n.dataId), R = me(n.shape, n.dtype, E), D = Az(d, R, S, b);
    k = e.makeTensorInfo(f, n.dtype, D.values);
  } else {
    let E = new hy(d), R = [{ type: "int32", data: b }, { type: "int32", data: S }], D = e.runWebGPUProgram(E, [n], n.dtype, R);
    k = pe({ inputs: { x: D }, backend: e, attrs: { shape: f } }), e.disposeData(D.dataId);
  }
  return k;
}
var EU = { kernelName: Ts, backendName: "webgpu", kernelFunc: xce };
function yce(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { separator: n, nGramWidths: s, leftPad: a, rightPad: i, padWidth: p, preserveShortSequences: u } = o, { data: c, dataSplits: l } = t8, m = e.readSync(c.dataId), d = e.readSync(l.dataId), [f, h] = Fz(m, d, n, s, a, i, p, u);
  return [e.makeTensorInfo([f.length], "string", f), e.makeTensorInfo(l.shape, "int32", h)];
}
var RU = { kernelName: Ca, backendName: "webgpu", kernelFunc: yce };
var bce = et({ opType: fe.SUB, cpuKernelImpl: Pz, supportsComplex: true });
var DU = { kernelName: _s, backendName: "webgpu", kernelFunc: bce };
var Cce = ye({ opType: Z.TAN });
var AU = { kernelName: $s, backendName: "webgpu", kernelFunc: Cce };
var wce = ye({ opType: Z.TANH });
var FU = { kernelName: Es, backendName: "webgpu", kernelFunc: wce };
function Sce(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { tensor: n, indices: s, updates: a } = t8, {} = o, { sliceRank: i, numUpdates: p, sliceSize: u, strides: c, outputSize: l } = w.calculateShapes(a, s, n.shape), m = [l / u, u];
  if (l === 0)
    return e.makeTensorInfo(n.shape, s.dtype);
  let d = [], f = pe({ inputs: { x: s }, backend: e, attrs: { shape: [p, i] } });
  d.push(f);
  let h = pe({ inputs: { x: a }, backend: e, attrs: { shape: [p, u] } });
  d.push(h);
  let g = pe({ inputs: { x: n }, backend: e, attrs: { shape: m } });
  d.push(g);
  let x = Cm({ inputs: { x: g }, backend: e, attrs: { reps: Array(m.length).fill(1) } }), b = new Va([p, u], i, f.shape.length, h.shape.length, c, m, n.dtype, false), C = y.sizeFromShape([p, u]), S = [{ type: "int32", data: [i] }, { type: "int32", data: c }, { type: "int32", data: [C] }], k = e.runWebGPUProgram(b, [h, f], g.dtype, S, x);
  d.push(k);
  let _ = pe({ inputs: { x: k }, backend: e, attrs: { shape: n.shape } });
  return d.forEach((E) => e.disposeData(E.dataId)), _;
}
var PU = { kernelName: fs, backendName: "webgpu", kernelFunc: Sce };
var gy = class {
  constructor(t8) {
    this.variableNames = ["x", "indices"], this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`, this.shaderKey = "swap";
  }
  getUserCode() {
    return `
        ${G("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `;
  }
};
var xy = class {
  constructor(t8) {
    this.variableNames = ["x", "indices"], this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = "inputSize : i32, firstPass : i32, k : i32,", this.shaderKey = "merge";
  }
  getUserCode() {
    return `
        ${G("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `;
  }
};
function nl(r, t8) {
  t8 !== null && r.disposeData(t8.dataId);
}
function OU(r) {
  let t8 = 1;
  for (; t8 < r; )
    t8 *= 2;
  return t8;
}
function Ice(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n } = t8, { k: s, sorted: a } = o, i = n.shape, p = i[i.length - 1];
  if (e.shouldExecuteOnCPU([n])) {
    let k = e.readSync(n.dataId), [_, E] = Mz(k, i, n.dtype, s, a);
    return [e.makeTensorInfo(_.shape, _.dtype, _.values), e.makeTensorInfo(E.shape, E.dtype, E.values)];
  }
  if (s === 0)
    return i[i.length - 1] = 0, [e.makeTensorInfo(i, n.dtype, []), e.makeTensorInfo(i, "int32", [])];
  if (p === 1)
    return [n, kt({ attrs: { shape: i, dtype: "int32", value: 0 }, backend: e })];
  let c = y.sizeFromShape(i) / p, l = pe({ inputs: { x: n }, attrs: { shape: [c, p] }, backend: e }), m = OU(s), d = OU(p), f = null, h = () => f === null ? [l, l] : [l, f], g = (k, _, E) => {
    let R = h(), D = new gy(E), O = [{ type: "int32", data: [p] }, { type: "int32", data: [f === null ? 1 : 0] }, { type: "float32", data: [Number.NEGATIVE_INFINITY] }, { type: "int32", data: [k] }, { type: "int32", data: [_] }], M = f;
    f = e.runWebGPUProgram(D, R, "int32", O), nl(e, M);
  };
  for (let k = 1; k < m; k *= 2) {
    let _ = k * 2;
    for (let E = k; E >= 1; E /= 2)
      g(_, E, [c, d]);
  }
  for (let k = d; k > m; k /= 2) {
    let _ = h(), E = new xy([c, k / 2]), D = [{ type: "int32", data: [p] }, { type: "int32", data: [f === null ? 1 : 0] }, { type: "int32", data: [m] }], P = f;
    f = e.runWebGPUProgram(E, _, "int32", D), nl(e, P);
    let O = m / 2, M = O * 2;
    for (let L = O; L >= 1; L /= 2)
      g(M, L, f.shape);
  }
  let x = f;
  f = Hs({ inputs: { x: f }, backend: e, attrs: { begin: 0, size: [c, s] } }), nl(e, x);
  let b = u0({ inputs: { x: l, indices: f }, backend: e, attrs: { axis: 1, batchDims: 1 } });
  nl(e, l);
  let C = i.slice(0, -1);
  C.push(s), x = f, f = pe({ inputs: { x: f }, attrs: { shape: C }, backend: e }), nl(e, x);
  let S = b;
  return b = pe({ inputs: { x: b }, attrs: { shape: C }, backend: e }), nl(e, S), [b, f];
}
var MU = { kernelName: Rs, backendName: "webgpu", kernelFunc: Ice };
var yy = class {
  constructor(t8) {
    this.variableNames = ["Image", "Transforms"], this.uniforms = "interpolationModeId : i32, fillModeId : i32, fillValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t8, this.dispatchLayout = X(this.outputShape), this.dispatch = H(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "transform";
  }
  getUserCode() {
    return `
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${G("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `;
  }
};
function vce(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { image: n, transforms: s } = t8, { interpolation: a, fillMode: i, fillValue: p, outputShape: u } = o, [c, l, m, d] = n.shape, [f, h] = u != null ? u : [l, m], g = [c, f, h, d], x = new yy(g), b = a === "nearest" ? 1 : 2, C;
  switch (i) {
    case "constant":
      C = 1;
      break;
    case "reflect":
      C = 2;
      break;
    case "wrap":
      C = 3;
      break;
    case "nearest":
      C = 4;
      break;
    default:
      C = 1;
      break;
  }
  let S = [{ type: "int32", data: [b] }, { type: "int32", data: [C] }, { type: "float32", data: [p] }];
  return e.runWebGPUProgram(x, [n, s], "float32", S);
}
var LU = { kernelName: Ds, backendName: "webgpu", kernelFunc: vce };
function kce(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { value: n } = t8, { axis: s } = o;
  s < 0 && (s += n.shape.length);
  let a = n, i = a.shape.length, p = n.shape[s], u = new Array(i - 1), c = 0;
  for (let h = 0; h < i; h++)
    h !== s && (u[c++] = a.shape[h]);
  let l = [], m = new Array(i).fill(0), d = a.shape.slice();
  d[s] = 1;
  let f = new Array(p);
  for (let h = 0; h < f.length; h++) {
    m[s] = h;
    let g = Hs({ inputs: { x: a }, backend: e, attrs: { begin: m, size: d } }), x = pe({ inputs: { x: g }, backend: e, attrs: { shape: u } });
    f[h] = x, l.push(g);
  }
  return l.forEach((h) => e.disposeData(h.dataId)), f;
}
var BU = { kernelName: wa, backendName: "webgpu", kernelFunc: kce };
var by = class {
  constructor(t8, e, o) {
    if (this.outputShape = [], this.variableNames = ["x", "segmentIds"], this.uniforms = "numSegments : i32, xSize: i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = e, this.dispatchLayout = X(t8), this.dispatch = H(this.dispatchLayout, t8, this.workgroupSize), o !== "float32" && o !== "int32")
      throw new Error(`UnsortedSegmentSum only supports float32 and int32
              types, does not support ${o} type.`);
    this.type = o, this.shaderKey = "unsortedSegmentSum";
  }
  getUserCode() {
    return `
    ${G("index")} {
      if (index < uniforms.xSize) {
        let coords = getXCoordsFromIndex(index);
        let b = coords[0];
        let inCol = coords[1];

        let segmentId = i32(getSegmentIds(inCol));
        if (segmentId >= 0) {
          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;
          let value = getX(b, inCol);

          ${Qr("&result[flatIndex]", "value", this.type)}
        }
      }
    }
  `;
  }
};
function Nce(r) {
  let { inputs: t8, backend: e, attrs: o } = r, { x: n, segmentIds: s } = t8, { numSegments: a } = o, i = n.shape.length, p = [], u = 0, c = w.getAxesPermutation([u], i), l = n;
  c != null && (l = yr({ inputs: { x: n }, backend: e, attrs: { perm: c } }), p.push(l), u = w.getInnerMostAxes(1, i)[0]);
  let m = w.segment_util.computeOutShape(l.shape, u, a), d = y.sizeFromShape([l.shape[u]]), f = pe({ inputs: { x: l }, backend: e, attrs: { shape: [-1, d] } });
  p.push(f);
  let h = n.dtype, g = [f.shape[0], a], x = kt({ backend: e, attrs: { shape: g, value: 0, dtype: h } }), b = new by(f.shape, g, h), C = [{ type: "int32", data: [a] }, { type: "int32", data: [y.sizeFromShape(f.shape)] }], S = e.runWebGPUProgram(b, [f, s], h, C, x), k = pe({ inputs: { x: S }, backend: e, attrs: { shape: m } });
  p.push(S);
  let _ = k;
  if (c != null) {
    p.push(k);
    let E = w.getUndoAxesPermutation(c);
    _ = yr({ inputs: { x: _ }, backend: e, attrs: { perm: E } });
  }
  return p.forEach((E) => e.disposeData(E.dataId)), _;
}
var zU = { kernelName: Ji, backendName: "webgpu", kernelFunc: Nce };
var Tce = [rz, Bz, zz, Vz, Wz, Uz, Hz, Kz, qz, jz, Xz, Yz, Qz, Zz, Jz, rV, oV, nV, sV, aV, uV, pV, cV, fV, hV, gV, nz, yV, CV, wV, SV, IV, vV, kV, NV, TV, _V, $V, DV, AV, FV, PV, MV, LV, OV, BV, zV, VV, WV, UV, KV, qV, jV, XV, YV, QV, ZV, JV, eW, ez, tW, nW, rW, oW, sW, aW, iW, uW, pW, cW, lW, oz, mW, bV, dW, fW, hW, gW, xW, yW, bW, wW, CW, SW, IW, vW, NW, TW, eV, _W, $W, DW, EW, RW, AW, tV, FW, PW, OW, MW, BW, GV, zW, VW, WW, lV, UW, KW, qW, jW, XW, YW, QW, ZW, mV, JW, eU, tU, rU, tz, oU, nU, sU, aU, iU, uU, pU, cU, lU, mU, dU, fU, hU, gU, xU, yU, iV, $U, EU, RU, LW, bU, CU, wU, SU, vU, kU, NU, TU, _U, DU, HV, AU, FU, PU, IU, MU, LU, Gz, BU, zU, GW];
for (let r of Tce)
  ri(r);
var VU = "4.11.0";
var _ce = "4.11.0";
var $ce = "4.11.0";
var Ece = "4.11.0";
var Rce = "4.11.0";
var Dce = "4.11.0";
var Ace = { tfjs: VU, "tfjs-core": VU, "tfjs-converter": _ce, "tfjs-backend-cpu": $ce, "tfjs-backend-webgl": Ece, "tfjs-backend-wasm": Rce, "tfjs-backend-webgpu": Dce };

// src/util/util.ts
function log(...msg) {
  const dt2 = /* @__PURE__ */ new Date();
  const ts2 = `${dt2.getHours().toString().padStart(2, "0")}:${dt2.getMinutes().toString().padStart(2, "0")}:${dt2.getSeconds().toString().padStart(2, "0")}.${dt2.getMilliseconds().toString().padStart(3, "0")}`;
  if (msg)
    console.log(ts2, "Human:", ...msg);
}
function join(folder, file) {
  const separator = folder.endsWith("/") ? "" : "/";
  const skipJoin = file.startsWith(".") || file.startsWith("/") || file.startsWith("http:") || file.startsWith("https:") || file.startsWith("file:");
  const path = skipJoin ? `${file}` : `${folder}${separator}${file}`;
  if (!path.toLocaleLowerCase().includes(".json"))
    throw new Error(`modelpath error: expecting json file: ${path}`);
  return path;
}
var now = () => {
  if (typeof performance !== "undefined")
    return performance.now();
  return parseInt((Number(process.hrtime.bigint()) / 1e3 / 1e3).toString());
};
function validate(defaults, config3, parent = "config", msgs = []) {
  for (const key of Object.keys(config3)) {
    if (typeof config3[key] === "object") {
      validate(defaults[key], config3[key], key, msgs);
    } else {
      const defined = defaults && typeof defaults[key] !== "undefined";
      if (!defined)
        msgs.push({ reason: "unknown property", where: `${parent}.${key} = ${config3[key]}` });
      const same = defaults && typeof defaults[key] === typeof config3[key];
      if (defined && !same)
        msgs.push({ reason: "property type mismatch", where: `${parent}.${key} = ${config3[key]}`, expected: typeof defaults[key] });
    }
  }
  if (config3.debug && parent === "config" && msgs.length > 0)
    log("invalid configuration", msgs);
  return msgs;
}
function mergeDeep(...objects) {
  const isObject = (obj) => obj && typeof obj === "object";
  return objects.reduce((prev, obj) => {
    Object.keys(obj || {}).forEach((key) => {
      const pVal = prev[key];
      const oVal = obj[key];
      if (Array.isArray(pVal) && Array.isArray(oVal))
        prev[key] = pVal.concat(...oVal);
      else if (isObject(pVal) && isObject(oVal))
        prev[key] = mergeDeep(pVal, oVal);
      else
        prev[key] = oVal;
    });
    return prev;
  }, {});
}

// src/config.ts
var config = {
  backend: "",
  modelBasePath: "",
  cacheModels: true,
  validateModels: true,
  wasmPath: "",
  wasmPlatformFetch: false,
  debug: false,
  async: true,
  warmup: "full",
  cacheSensitivity: 0.7,
  skipAllowed: false,
  deallocate: false,
  flags: {},
  softwareKernels: false,
  filter: {
    enabled: true,
    equalization: false,
    width: 0,
    height: 0,
    flip: false,
    return: true,
    autoBrightness: true,
    brightness: 0,
    contrast: 0,
    sharpness: 0,
    blur: 0,
    saturation: 0,
    hue: 0,
    negative: false,
    sepia: false,
    vintage: false,
    kodachrome: false,
    technicolor: false,
    polaroid: false,
    pixelate: 0
  },
  gesture: {
    enabled: true
  },
  face: {
    enabled: true,
    detector: {
      modelPath: "blazeface.json",
      rotation: false,
      maxDetected: 1,
      skipFrames: 99,
      skipTime: 2500,
      minConfidence: 0.2,
      minSize: 0,
      iouThreshold: 0.1,
      mask: false,
      return: false
    },
    mesh: {
      enabled: true,
      modelPath: "facemesh.json",
      keepInvalid: false
    },
    attention: {
      enabled: false,
      modelPath: "facemesh-attention.json"
    },
    iris: {
      enabled: true,
      modelPath: "iris.json"
    },
    emotion: {
      enabled: true,
      minConfidence: 0.1,
      skipFrames: 99,
      skipTime: 1500,
      modelPath: "emotion.json"
    },
    description: {
      enabled: true,
      modelPath: "faceres.json",
      skipFrames: 99,
      skipTime: 3e3,
      minConfidence: 0.1
    },
    antispoof: {
      enabled: false,
      skipFrames: 99,
      skipTime: 4e3,
      modelPath: "antispoof.json"
    },
    liveness: {
      enabled: false,
      skipFrames: 99,
      skipTime: 4e3,
      modelPath: "liveness.json"
    }
  },
  body: {
    enabled: true,
    modelPath: "movenet-lightning.json",
    maxDetected: -1,
    minConfidence: 0.3,
    skipFrames: 1,
    skipTime: 200
  },
  hand: {
    enabled: true,
    rotation: true,
    skipFrames: 99,
    skipTime: 1e3,
    minConfidence: 0.5,
    iouThreshold: 0.2,
    maxDetected: -1,
    landmarks: true,
    detector: {
      modelPath: "handtrack.json"
    },
    skeleton: {
      modelPath: "handlandmark-lite.json"
    }
  },
  object: {
    enabled: false,
    modelPath: "centernet.json",
    minConfidence: 0.2,
    iouThreshold: 0.4,
    maxDetected: 10,
    skipFrames: 99,
    skipTime: 2e3
  },
  segmentation: {
    enabled: false,
    modelPath: "rvm.json",
    ratio: 0.5,
    mode: "default"
  }
};

// src/image/imagefxshaders.ts
var vertexIdentity = `
  precision highp float;
  attribute vec2 pos;
  attribute vec2 uv;
  varying vec2 vUv;
  uniform float flipY;
  void main(void) {
    vUv = uv;
    gl_Position = vec4(pos.x, pos.y*flipY, 0.0, 1.);
  }
`;
var colorMatrixWithAlpha = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform float m[20];
  void main(void) {
    vec4 c = texture2D(texture, vUv);
    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];
    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];
    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];
    gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];
  }
`;
var colorMatrixWithoutAlpha = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform float m[20];
  void main(void) {
    vec4 c = texture2D(texture, vUv);
    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[4];
    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[9];
    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[14];
    gl_FragColor.a = c.a;
  }
`;
var pixelate = `
  precision highp float;
  varying vec2 vUv;
  uniform vec2 size;
  uniform sampler2D texture;
  vec2 pixelate(vec2 coord, vec2 size) {
    return floor( coord / size ) * size;
  }
  void main(void) {
    gl_FragColor = vec4(0.0);
    vec2 coord = pixelate(vUv, size);
    gl_FragColor += texture2D(texture, coord);
  }
`;
var blur = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform vec2 px;
  void main(void) {
    gl_FragColor = vec4(0.0);
    gl_FragColor += texture2D(texture, vUv + vec2(-7.0*px.x, -7.0*px.y))*0.0044299121055113265;
    gl_FragColor += texture2D(texture, vUv + vec2(-6.0*px.x, -6.0*px.y))*0.00895781211794;
    gl_FragColor += texture2D(texture, vUv + vec2(-5.0*px.x, -5.0*px.y))*0.0215963866053;
    gl_FragColor += texture2D(texture, vUv + vec2(-4.0*px.x, -4.0*px.y))*0.0443683338718;
    gl_FragColor += texture2D(texture, vUv + vec2(-3.0*px.x, -3.0*px.y))*0.0776744219933;
    gl_FragColor += texture2D(texture, vUv + vec2(-2.0*px.x, -2.0*px.y))*0.115876621105;
    gl_FragColor += texture2D(texture, vUv + vec2(-1.0*px.x, -1.0*px.y))*0.147308056121;
    gl_FragColor += texture2D(texture, vUv                             )*0.159576912161;
    gl_FragColor += texture2D(texture, vUv + vec2( 1.0*px.x,  1.0*px.y))*0.147308056121;
    gl_FragColor += texture2D(texture, vUv + vec2( 2.0*px.x,  2.0*px.y))*0.115876621105;
    gl_FragColor += texture2D(texture, vUv + vec2( 3.0*px.x,  3.0*px.y))*0.0776744219933;
    gl_FragColor += texture2D(texture, vUv + vec2( 4.0*px.x,  4.0*px.y))*0.0443683338718;
    gl_FragColor += texture2D(texture, vUv + vec2( 5.0*px.x,  5.0*px.y))*0.0215963866053;
    gl_FragColor += texture2D(texture, vUv + vec2( 6.0*px.x,  6.0*px.y))*0.00895781211794;
    gl_FragColor += texture2D(texture, vUv + vec2( 7.0*px.x,  7.0*px.y))*0.0044299121055113265;
  }
`;
var convolution = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform vec2 px;
  uniform float m[9];
  void main(void) {
    vec4 c11 = texture2D(texture, vUv - px); // top left
    vec4 c12 = texture2D(texture, vec2(vUv.x, vUv.y - px.y)); // top center
    vec4 c13 = texture2D(texture, vec2(vUv.x + px.x, vUv.y - px.y)); // top right
    vec4 c21 = texture2D(texture, vec2(vUv.x - px.x, vUv.y) ); // mid left
    vec4 c22 = texture2D(texture, vUv); // mid center
    vec4 c23 = texture2D(texture, vec2(vUv.x + px.x, vUv.y) ); // mid right
    vec4 c31 = texture2D(texture, vec2(vUv.x - px.x, vUv.y + px.y) ); // bottom left
    vec4 c32 = texture2D(texture, vec2(vUv.x, vUv.y + px.y) ); // bottom center
    vec4 c33 = texture2D(texture, vUv + px ); // bottom right
    gl_FragColor = 
    c11 * m[0] + c12 * m[1] + c22 * m[2] +
    c21 * m[3] + c22 * m[4] + c23 * m[5] +
    c31 * m[6] + c32 * m[7] + c33 * m[8];
    gl_FragColor.a = c22.a;
  }
`;

// src/image/imagefx.ts
var collect = (source, prefix, collection) => {
  const r = new RegExp("\\b" + prefix + " \\w+ (\\w+)", "ig");
  source.replace(r, (match2, name) => {
    collection[name] = 0;
    return match2;
  });
};
var GLProgram = class {
  constructor(gl2, vertexSource, fragmentSource) {
    __publicField(this, "uniform", {});
    __publicField(this, "attribute", {});
    __publicField(this, "gl");
    __publicField(this, "id");
    __publicField(this, "compile", (source, type) => {
      const shader = this.gl.createShader(type);
      if (!shader) {
        log("filter: could not create shader");
        return null;
      }
      this.gl.shaderSource(shader, source);
      this.gl.compileShader(shader);
      if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
        log(`filter: gl compile failed: ${this.gl.getShaderInfoLog(shader) || "unknown"}`);
        return null;
      }
      return shader;
    });
    this.gl = gl2;
    const vertexShader = this.compile(vertexSource, this.gl.VERTEX_SHADER);
    const fragmentShader = this.compile(fragmentSource, this.gl.FRAGMENT_SHADER);
    this.id = this.gl.createProgram();
    if (!vertexShader || !fragmentShader)
      return;
    if (!this.id) {
      log("filter: could not create webgl program");
      return;
    }
    this.gl.attachShader(this.id, vertexShader);
    this.gl.attachShader(this.id, fragmentShader);
    this.gl.linkProgram(this.id);
    if (!this.gl.getProgramParameter(this.id, this.gl.LINK_STATUS)) {
      log(`filter: gl link failed: ${this.gl.getProgramInfoLog(this.id) || "unknown"}`);
      return;
    }
    this.gl.useProgram(this.id);
    collect(vertexSource, "attribute", this.attribute);
    for (const a in this.attribute)
      this.attribute[a] = this.gl.getAttribLocation(this.id, a);
    collect(vertexSource, "uniform", this.uniform);
    collect(fragmentSource, "uniform", this.uniform);
    for (const u in this.uniform)
      this.uniform[u] = this.gl.getUniformLocation(this.id, u);
  }
};
function GLImageFilter() {
  let drawCount = 0;
  let sourceTexture = null;
  let lastInChain = false;
  let currentFramebufferIndex = -1;
  let tempFramebuffers = [null, null];
  let filterChain = [];
  let vertexBuffer = null;
  let currentProgram = null;
  const fxcanvas = canvas(100, 100);
  const shaderProgramCache = {};
  const DRAW = { INTERMEDIATE: 1 };
  const gl2 = fxcanvas.getContext("webgl");
  if (!gl2) {
    log("filter: cannot get webgl context");
    return;
  }
  this.gl = gl2;
  function resize(width, height) {
    if (width === fxcanvas.width && height === fxcanvas.height)
      return;
    fxcanvas.width = width;
    fxcanvas.height = height;
    if (!vertexBuffer) {
      const vertices = new Float32Array([-1, -1, 0, 1, 1, -1, 1, 1, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 1, 1, 1, 1, 1, 0]);
      vertexBuffer = gl2.createBuffer();
      gl2.bindBuffer(gl2.ARRAY_BUFFER, vertexBuffer);
      gl2.bufferData(gl2.ARRAY_BUFFER, vertices, gl2.STATIC_DRAW);
      gl2.pixelStorei(gl2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
    }
    gl2.viewport(0, 0, fxcanvas.width, fxcanvas.height);
    tempFramebuffers = [null, null];
  }
  function createFramebufferTexture(width, height) {
    const fbo = gl2.createFramebuffer();
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, fbo);
    const renderbuffer = gl2.createRenderbuffer();
    gl2.bindRenderbuffer(gl2.RENDERBUFFER, renderbuffer);
    const texture = gl2.createTexture();
    gl2.bindTexture(gl2.TEXTURE_2D, texture);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, width, height, 0, gl2.RGBA, gl2.UNSIGNED_BYTE, null);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.framebufferTexture2D(gl2.FRAMEBUFFER, gl2.COLOR_ATTACHMENT0, gl2.TEXTURE_2D, texture, 0);
    gl2.bindTexture(gl2.TEXTURE_2D, null);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, null);
    return { fbo, texture };
  }
  function getTempFramebuffer(index2) {
    tempFramebuffers[index2] = tempFramebuffers[index2] || createFramebufferTexture(fxcanvas.width, fxcanvas.height);
    return tempFramebuffers[index2];
  }
  function draw(flags = 0) {
    if (!currentProgram)
      return;
    let source = null;
    let target = null;
    let flipY = false;
    if (drawCount === 0)
      source = sourceTexture;
    else
      source = getTempFramebuffer(currentFramebufferIndex).texture || null;
    drawCount++;
    if (lastInChain && !(flags & DRAW.INTERMEDIATE)) {
      target = null;
      flipY = drawCount % 2 === 0;
    } else {
      currentFramebufferIndex = (currentFramebufferIndex + 1) % 2;
      target = getTempFramebuffer(currentFramebufferIndex).fbo || null;
    }
    gl2.bindTexture(gl2.TEXTURE_2D, source);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, target);
    gl2.uniform1f(currentProgram.uniform["flipY"], flipY ? -1 : 1);
    gl2.drawArrays(gl2.TRIANGLES, 0, 6);
  }
  function compileShader(fragmentSource) {
    if (shaderProgramCache[fragmentSource]) {
      currentProgram = shaderProgramCache[fragmentSource];
      gl2.useProgram((currentProgram ? currentProgram.id : null) || null);
      return currentProgram;
    }
    currentProgram = new GLProgram(gl2, vertexIdentity, fragmentSource);
    if (!currentProgram) {
      log("filter: could not get webgl program");
      return null;
    }
    const floatSize = Float32Array.BYTES_PER_ELEMENT;
    const vertSize = 4 * floatSize;
    gl2.enableVertexAttribArray(currentProgram.attribute["pos"]);
    gl2.vertexAttribPointer(currentProgram.attribute["pos"], 2, gl2.FLOAT, false, vertSize, 0 * floatSize);
    gl2.enableVertexAttribArray(currentProgram.attribute["uv"]);
    gl2.vertexAttribPointer(currentProgram.attribute["uv"], 2, gl2.FLOAT, false, vertSize, 2 * floatSize);
    shaderProgramCache[fragmentSource] = currentProgram;
    return currentProgram;
  }
  const filter = {
    colorMatrix: (matrix) => {
      const m = new Float32Array(matrix);
      m[4] /= 255;
      m[9] /= 255;
      m[14] /= 255;
      m[19] /= 255;
      const shader = m[18] === 1 && m[3] === 0 && m[8] === 0 && m[13] === 0 && m[15] === 0 && m[16] === 0 && m[17] === 0 && m[19] === 0 ? colorMatrixWithoutAlpha : colorMatrixWithAlpha;
      const program = compileShader(shader);
      if (!program)
        return;
      gl2.uniform1fv(program.uniform["m"], m);
      draw();
    },
    brightness: (brightness) => {
      const b = (brightness || 0) + 1;
      filter.colorMatrix([
        b,
        0,
        0,
        0,
        0,
        0,
        b,
        0,
        0,
        0,
        0,
        0,
        b,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    saturation: (amount) => {
      const x = (amount || 0) * 2 / 3 + 1;
      const y8 = (x - 1) * -0.5;
      filter.colorMatrix([
        x,
        y8,
        y8,
        0,
        0,
        y8,
        x,
        y8,
        0,
        0,
        y8,
        y8,
        x,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    desaturate: () => {
      filter.saturation(-1);
    },
    contrast: (amount) => {
      const v10 = (amount || 0) + 1;
      const o = -128 * (v10 - 1);
      filter.colorMatrix([
        v10,
        0,
        0,
        0,
        o,
        0,
        v10,
        0,
        0,
        o,
        0,
        0,
        v10,
        0,
        o,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    negative: () => {
      filter.contrast(-2);
    },
    hue: (rotation) => {
      rotation = (rotation || 0) / 180 * Math.PI;
      const cos = Math.cos(rotation);
      const sin = Math.sin(rotation);
      const lumR = 0.213;
      const lumG = 0.715;
      const lumB = 0.072;
      filter.colorMatrix([
        lumR + cos * (1 - lumR) + sin * -lumR,
        lumG + cos * -lumG + sin * -lumG,
        lumB + cos * -lumB + sin * (1 - lumB),
        0,
        0,
        lumR + cos * -lumR + sin * 0.143,
        lumG + cos * (1 - lumG) + sin * 0.14,
        lumB + cos * -lumB + sin * -0.283,
        0,
        0,
        lumR + cos * -lumR + sin * -(1 - lumR),
        lumG + cos * -lumG + sin * lumG,
        lumB + cos * (1 - lumB) + sin * lumB,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    desaturateLuminance: () => {
      filter.colorMatrix([
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    sepia: () => {
      filter.colorMatrix([
        0.393,
        0.7689999,
        0.18899999,
        0,
        0,
        0.349,
        0.6859999,
        0.16799999,
        0,
        0,
        0.272,
        0.5339999,
        0.13099999,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    brownie: () => {
      filter.colorMatrix([
        0.5997023498159715,
        0.34553243048391263,
        -0.2708298674538042,
        0,
        47.43192855600873,
        -0.037703249837783157,
        0.8609577587992641,
        0.15059552388459913,
        0,
        -36.96841498319127,
        0.24113635128153335,
        -0.07441037908422492,
        0.44972182064877153,
        0,
        -7.562075277591283,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    vintagePinhole: () => {
      filter.colorMatrix([
        0.6279345635605994,
        0.3202183420819367,
        -0.03965408211312453,
        0,
        9.651285835294123,
        0.02578397704808868,
        0.6441188644374771,
        0.03259127616149294,
        0,
        7.462829176470591,
        0.0466055556782719,
        -0.0851232987247891,
        0.5241648018700465,
        0,
        5.159190588235296,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    kodachrome: () => {
      filter.colorMatrix([
        1.1285582396593525,
        -0.3967382283601348,
        -0.03992559172921793,
        0,
        63.72958762196502,
        -0.16404339962244616,
        1.0835251566291304,
        -0.05498805115633132,
        0,
        24.732407896706203,
        -0.16786010706155763,
        -0.5603416277695248,
        1.6014850761964943,
        0,
        35.62982807460946,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    technicolor: () => {
      filter.colorMatrix([
        1.9125277891456083,
        -0.8545344976951645,
        -0.09155508482755585,
        0,
        11.793603434377337,
        -0.3087833385928097,
        1.7658908555458428,
        -0.10601743074722245,
        0,
        -70.35205161461398,
        -0.231103377548616,
        -0.7501899197440212,
        1.847597816108189,
        0,
        30.950940869491138,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    polaroid: () => {
      filter.colorMatrix([
        1.438,
        -0.062,
        -0.062,
        0,
        0,
        -0.122,
        1.378,
        -0.122,
        0,
        0,
        -0.016,
        -0.016,
        1.483,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    shiftToBGR: () => {
      filter.colorMatrix([
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    convolution: (matrix) => {
      const m = new Float32Array(matrix);
      const pixelSizeX = 1 / fxcanvas.width;
      const pixelSizeY = 1 / fxcanvas.height;
      const program = compileShader(convolution);
      if (!program)
        return;
      gl2.uniform1fv(program.uniform["m"], m);
      gl2.uniform2f(program.uniform["px"], pixelSizeX, pixelSizeY);
      draw();
    },
    detectEdges: () => {
      filter.convolution.call(this, [
        0,
        1,
        0,
        1,
        -4,
        1,
        0,
        1,
        0
      ]);
    },
    sobelX: () => {
      filter.convolution.call(this, [
        -1,
        0,
        1,
        -2,
        0,
        2,
        -1,
        0,
        1
      ]);
    },
    sobelY: () => {
      filter.convolution.call(this, [
        -1,
        -2,
        -1,
        0,
        0,
        0,
        1,
        2,
        1
      ]);
    },
    sharpen: (amount) => {
      const a = amount || 1;
      filter.convolution.call(this, [
        0,
        -1 * a,
        0,
        -1 * a,
        1 + 4 * a,
        -1 * a,
        0,
        -1 * a,
        0
      ]);
    },
    emboss: (size2) => {
      const s = size2 || 1;
      filter.convolution.call(this, [
        -2 * s,
        -1 * s,
        0,
        -1 * s,
        1,
        1 * s,
        0,
        1 * s,
        2 * s
      ]);
    },
    blur: (size2) => {
      const blurSizeX = size2 / 7 / fxcanvas.width;
      const blurSizeY = size2 / 7 / fxcanvas.height;
      const program = compileShader(blur);
      if (!program)
        return;
      gl2.uniform2f(program.uniform["px"], 0, blurSizeY);
      draw(DRAW.INTERMEDIATE);
      gl2.uniform2f(program.uniform["px"], blurSizeX, 0);
      draw();
    },
    pixelate: (size2) => {
      const blurSizeX = size2 / fxcanvas.width;
      const blurSizeY = size2 / fxcanvas.height;
      const program = compileShader(pixelate);
      if (!program)
        return;
      gl2.uniform2f(program.uniform["size"], blurSizeX, blurSizeY);
      draw();
    }
  };
  this.add = function(name) {
    const args = Array.prototype.slice.call(arguments, 1);
    const func = filter[name];
    filterChain.push({ func, args });
  };
  this.reset = function() {
    filterChain = [];
  };
  this.get = function() {
    return filterChain;
  };
  this.apply = function(image) {
    resize(image.width, image.height);
    drawCount = 0;
    if (!sourceTexture)
      sourceTexture = gl2.createTexture();
    gl2.bindTexture(gl2.TEXTURE_2D, sourceTexture);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.NEAREST);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.NEAREST);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, gl2.RGBA, gl2.UNSIGNED_BYTE, image);
    for (let i = 0; i < filterChain.length; i++) {
      lastInChain = i === filterChain.length - 1;
      const f = filterChain[i];
      f.func.apply(this, f.args || []);
    }
    return fxcanvas;
  };
  this.draw = function(image) {
    this.add("brightness", 0);
    return this.apply(image);
  };
}

// src/image/enhance.ts
async function histogramEqualization(inputImage) {
  const squeeze = inputImage.shape.length === 4 ? gc(inputImage) : inputImage;
  const rgb3 = li(squeeze, 3, 2);
  const min = [Tl(rgb3[0]), Tl(rgb3[1]), Tl(rgb3[2])];
  const max = [Ra(rgb3[0]), Ra(rgb3[1]), Ra(rgb3[2])];
  const absMax = await Promise.all(max.map((channel) => channel.data()));
  const maxValue = Math.max(absMax[0][0], absMax[1][0], absMax[2][0]);
  const maxRange = maxValue > 1 ? 255 : 1;
  const factor = maxRange / maxValue;
  let final;
  if (factor > 1) {
    const sub = [Te(rgb3[0], min[0]), Te(rgb3[1], min[1]), Te(rgb3[2], min[2])];
    const range = [Te(max[0], min[0]), Te(max[1], min[1]), Te(max[2], min[2])];
    const enh = [se(sub[0], factor), se(sub[1], factor), se(sub[2], factor)];
    const stack = kr([enh[0], enh[1], enh[2]], 2);
    final = W(stack, [1, squeeze.shape[0] || 0, squeeze.shape[1] || 0, 3]);
    Mt([...sub, ...range, ...enh, stack]);
  } else {
    final = Ms(squeeze, 0);
  }
  Mt([...rgb3, ...min, ...max, rgb3, squeeze, inputImage]);
  return final;
}

// src/image/image.ts
var maxSize = 3840;
var inCanvas = null;
var outCanvas = null;
var tmpCanvas = null;
var fx2;
var last = {
  inputSum: 0,
  cacheDiff: 1,
  sumMethod: 0,
  inputTensor: void 0
};
function reset() {
  last.inputSum = 0;
  last.cacheDiff = 1;
  last.sumMethod = 0;
  last.inputTensor = void 0;
}
function canvas(width, height) {
  let c;
  if (env.browser) {
    if (env.worker) {
      if (typeof OffscreenCanvas === "undefined")
        throw new Error("canvas error: attempted to run in web worker but OffscreenCanvas is not supported");
      c = new OffscreenCanvas(width, height);
    } else {
      if (typeof document !== "undefined") {
        c = document.createElement("canvas");
        c.width = width;
        c.height = height;
      } else if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
        if (typeof env.Canvas !== "undefined")
          c = new env.Canvas(width, height);
        else if (typeof globalThis.Canvas !== "undefined")
          c = new globalThis.Canvas(width, height);
        else
          throw new Error("canvas error: attempted to use canvas in react-native without canvas support installed");
      } else {
        throw new Error("canvas error: attempted to run in browser but DOM is not defined");
      }
    }
  } else {
    if (typeof env.Canvas !== "undefined")
      c = new env.Canvas(width, height);
    else if (typeof globalThis.Canvas !== "undefined")
      c = new globalThis.Canvas(width, height);
  }
  return c;
}
function copy(input, output) {
  const outputCanvas = output || canvas(input.width, input.height);
  const ctx = outputCanvas.getContext("2d");
  ctx.drawImage(input, 0, 0);
  return outputCanvas;
}
async function process2(input, config3, getTensor = true) {
  var _a, _b, _c2;
  if (!input) {
    if (config3.debug)
      log("input error: input is missing");
    return { tensor: null, canvas: null };
  }
  if (!(input instanceof ut) && !(typeof Image !== "undefined" && input instanceof Image) && !(typeof globalThis.Canvas !== "undefined" && input instanceof globalThis.Canvas) && !(typeof ImageData !== "undefined" && input instanceof ImageData) && !(typeof ImageBitmap !== "undefined" && input instanceof ImageBitmap) && !(typeof HTMLImageElement !== "undefined" && input instanceof HTMLImageElement) && !(typeof HTMLMediaElement !== "undefined" && input instanceof HTMLMediaElement) && !(typeof HTMLVideoElement !== "undefined" && input instanceof HTMLVideoElement) && !(typeof HTMLCanvasElement !== "undefined" && input instanceof HTMLCanvasElement) && !(typeof OffscreenCanvas !== "undefined" && input instanceof OffscreenCanvas)) {
    throw new Error("input error: type not recognized");
  }
  if (input instanceof ut) {
    let tensor2 = null;
    if (input["isDisposedInternal"])
      throw new Error("input error: attempted to use tensor but it is disposed");
    if (!input.shape)
      throw new Error("input error: attempted to use tensor without a shape");
    if (input.shape.length === 3) {
      if (input.shape[2] === 3) {
        tensor2 = Ms(input, 0);
      } else if (input.shape[2] === 4) {
        const rgb3 = A1(input, [0, 0, 0], [-1, -1, 3]);
        tensor2 = Ms(rgb3, 0);
        Mt(rgb3);
      }
    } else if (input.shape.length === 4) {
      if (input.shape[3] === 3) {
        tensor2 = Ur(input);
      } else if (input.shape[3] === 4) {
        tensor2 = F1(input, [0, 0, 0, 0], [-1, -1, -1, 3]);
      }
    }
    if (tensor2 == null || tensor2.shape.length !== 4 || tensor2.shape[0] !== 1 || tensor2.shape[3] !== 3)
      throw new Error(`input error: attempted to use tensor with unrecognized shape: ${input.shape.toString()}`);
    if (tensor2.dtype === "int32") {
      const cast = We(tensor2, "float32");
      Mt(tensor2);
      tensor2 = cast;
    }
    return { tensor: tensor2, canvas: config3.filter.return ? outCanvas : null };
  }
  if (typeof input["readyState"] !== "undefined" && input.readyState <= 2) {
    if (config3.debug)
      log("input stream is not ready");
    return { tensor: null, canvas: inCanvas };
  }
  const originalWidth = input["naturalWidth"] || input["videoWidth"] || input["width"] || input["shape"] && input["shape"][1] > 0;
  const originalHeight = input["naturalHeight"] || input["videoHeight"] || input["height"] || input["shape"] && input["shape"][2] > 0;
  if (!originalWidth || !originalHeight) {
    if (config3.debug)
      log("cannot determine input dimensions");
    return { tensor: null, canvas: inCanvas };
  }
  let targetWidth = originalWidth;
  let targetHeight = originalHeight;
  if (targetWidth > maxSize) {
    targetWidth = maxSize;
    targetHeight = Math.trunc(targetWidth * originalHeight / originalWidth);
  }
  if (targetHeight > maxSize) {
    targetHeight = maxSize;
    targetWidth = Math.trunc(targetHeight * originalWidth / originalHeight);
  }
  if ((((_a = config3.filter) == null ? void 0 : _a.width) || 0) > 0)
    targetWidth = config3.filter.width;
  else if ((((_b = config3.filter) == null ? void 0 : _b.height) || 0) > 0)
    targetWidth = originalWidth * ((config3.filter.height || 0) / originalHeight);
  if ((config3.filter.height || 0) > 0)
    targetHeight = config3.filter.height;
  else if ((config3.filter.width || 0) > 0)
    targetHeight = originalHeight * ((config3.filter.width || 0) / originalWidth);
  if (!targetWidth || !targetHeight)
    throw new Error("input error: cannot determine dimension");
  if (!inCanvas || inCanvas.width !== targetWidth || inCanvas.height !== targetHeight)
    inCanvas = canvas(targetWidth, targetHeight);
  const inCtx = inCanvas.getContext("2d");
  if (typeof ImageData !== "undefined" && input instanceof ImageData) {
    inCtx.putImageData(input, 0, 0);
  } else {
    if (config3.filter.flip && typeof inCtx.translate !== "undefined") {
      inCtx.translate(originalWidth, 0);
      inCtx.scale(-1, 1);
      inCtx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas.width, inCanvas.height);
      inCtx.setTransform(1, 0, 0, 1, 0, 0);
    } else {
      inCtx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas.width, inCanvas.height);
    }
  }
  if (!outCanvas || inCanvas.width !== outCanvas.width || inCanvas.height !== outCanvas.height)
    outCanvas = canvas(inCanvas.width, inCanvas.height);
  if (config3.filter.enabled && env.webgl.supported) {
    if (!fx2)
      fx2 = env.browser ? new GLImageFilter() : null;
    env.filter = !!fx2;
    if (!(fx2 == null ? void 0 : fx2.add)) {
      if (config3.debug)
        log("input process error: cannot initialize filters");
      env.webgl.supported = false;
      config3.filter.enabled = false;
      copy(inCanvas, outCanvas);
    } else {
      fx2.reset();
      if (config3.filter.brightness !== 0)
        fx2.add("brightness", config3.filter.brightness);
      if (config3.filter.contrast !== 0)
        fx2.add("contrast", config3.filter.contrast);
      if (config3.filter.sharpness !== 0)
        fx2.add("sharpen", config3.filter.sharpness);
      if (config3.filter.blur !== 0)
        fx2.add("blur", config3.filter.blur);
      if (config3.filter.saturation !== 0)
        fx2.add("saturation", config3.filter.saturation);
      if (config3.filter.hue !== 0)
        fx2.add("hue", config3.filter.hue);
      if (config3.filter.negative)
        fx2.add("negative");
      if (config3.filter.sepia)
        fx2.add("sepia");
      if (config3.filter.vintage)
        fx2.add("brownie");
      if (config3.filter.sepia)
        fx2.add("sepia");
      if (config3.filter.kodachrome)
        fx2.add("kodachrome");
      if (config3.filter.technicolor)
        fx2.add("technicolor");
      if (config3.filter.polaroid)
        fx2.add("polaroid");
      if (config3.filter.pixelate !== 0)
        fx2.add("pixelate", config3.filter.pixelate);
      if (((_c2 = fx2.get()) == null ? void 0 : _c2.length) > 1)
        outCanvas = fx2.apply(inCanvas);
      else
        outCanvas = fx2.draw(inCanvas);
    }
  } else {
    copy(inCanvas, outCanvas);
    if (fx2)
      fx2 = null;
    env.filter = !!fx2;
  }
  if (!getTensor)
    return { tensor: null, canvas: outCanvas };
  if (!outCanvas)
    throw new Error("canvas error: cannot create output");
  let pixels;
  let depth = 3;
  if (typeof ImageData !== "undefined" && input instanceof ImageData || input.data && input.width && input.height) {
    if (env.browser && oT) {
      pixels = oT ? oT.fromPixels(input) : null;
    } else {
      depth = input.data.length / input.height / input.width;
      const arr = new Uint8Array(input.data.buffer);
      pixels = ur(arr, [input.height, input.width, depth], "int32");
    }
  } else {
    if (!tmpCanvas || outCanvas.width !== tmpCanvas.width || outCanvas.height !== tmpCanvas.height)
      tmpCanvas = canvas(outCanvas.width, outCanvas.height);
    if (oT && env.browser) {
      if (config3.backend === "webgl" || config3.backend === "humangl" || config3.backend === "webgpu") {
        pixels = oT.fromPixels(outCanvas);
      } else {
        tmpCanvas = copy(outCanvas);
        pixels = oT.fromPixels(tmpCanvas);
      }
    } else {
      const tempCanvas = copy(outCanvas);
      const tempCtx = tempCanvas.getContext("2d");
      const tempData = tempCtx.getImageData(0, 0, targetWidth, targetHeight);
      depth = tempData.data.length / targetWidth / targetHeight;
      const arr = new Uint8Array(tempData.data.buffer);
      pixels = ur(arr, [targetWidth, targetHeight, depth]);
    }
  }
  if (depth === 4) {
    const rgb3 = A1(pixels, [0, 0, 0], [-1, -1, 3]);
    Mt(pixels);
    pixels = rgb3;
  }
  if (!pixels)
    throw new Error("input error: cannot create tensor");
  const casted = We(pixels, "float32");
  const tensor = config3.filter.equalization ? await histogramEqualization(casted) : Ms(casted, 0);
  Mt([pixels, casted]);
  if (config3.filter.autoBrightness) {
    const max = Ra(tensor);
    const maxVal = await max.data();
    config3.filter.brightness = maxVal[0] > 1 ? 1 - maxVal[0] / 255 : 1 - maxVal[0];
    Mt(max);
  }
  return { tensor, canvas: config3.filter.return ? outCanvas : null };
}
async function skip(config3, input) {
  let skipFrame = false;
  if (config3.cacheSensitivity === 0 || !input.shape || input.shape.length !== 4 || input.shape[1] > 3840 || input.shape[2] > 2160)
    return skipFrame;
  if (!last.inputTensor) {
    last.inputTensor = Ur(input);
  } else if (last.inputTensor.shape[1] !== input.shape[1] || last.inputTensor.shape[2] !== input.shape[2]) {
    Mt(last.inputTensor);
    last.inputTensor = Ur(input);
  } else {
    const t8 = {};
    t8.diff = Te(input, last.inputTensor);
    t8.squared = se(t8.diff, t8.diff);
    t8.sum = ot(t8.squared);
    const diffSum = await t8.sum.data();
    const diffRelative = diffSum[0] / (input.shape[1] || 1) / (input.shape[2] || 1) / 255 / 3;
    Mt([last.inputTensor, t8.diff, t8.squared, t8.sum]);
    last.inputTensor = Ur(input);
    skipFrame = diffRelative <= (config3.cacheSensitivity || 0);
  }
  return skipFrame;
}
async function compare(config3, input1, input2) {
  const t8 = {};
  if (!input1 || !input2 || input1.shape.length !== 4 || input1.shape.length !== input2.shape.length) {
    if (!config3.debug)
      log("invalid input tensor or tensor shapes do not match:", input1.shape, input2.shape);
    return 0;
  }
  if (input1.shape[0] !== 1 || input2.shape[0] !== 1 || input1.shape[3] !== 3 || input2.shape[3] !== 3) {
    if (!config3.debug)
      log("input tensors must be of shape [1, height, width, 3]:", input1.shape, input2.shape);
    return 0;
  }
  t8.input1 = Ur(input1);
  t8.input2 = input1.shape[1] !== input2.shape[1] || input1.shape[2] !== input2.shape[2] ? Kj.resizeBilinear(input2, [input1.shape[1], input1.shape[2]]) : Ur(input2);
  t8.diff = Te(t8.input1, t8.input2);
  t8.squared = se(t8.diff, t8.diff);
  t8.sum = ot(t8.squared);
  const diffSum = await t8.sum.data();
  const diffRelative = diffSum[0] / (input1.shape[1] || 1) / (input1.shape[2] || 1) / 255 / 3;
  Mt([t8.input1, t8.input2, t8.diff, t8.squared, t8.sum]);
  return diffRelative;
}

// src/util/env.ts
var _canvas, _image, _imageData;
var Env = class {
  constructor() {
    /** Running in Browser */
    __publicField(this, "browser");
    /** Running in NodeJS */
    __publicField(this, "node");
    /** Running in WebWorker thread */
    __publicField(this, "worker");
    /** Detected platform */
    __publicField(this, "platform", "");
    /** Detected agent */
    __publicField(this, "agent", "");
    /** List of supported backends */
    __publicField(this, "backends", []);
    /** Has any work been performed so far */
    __publicField(this, "initial");
    /** Are image filters supported? */
    __publicField(this, "filter");
    /** TFJS instance details */
    __publicField(this, "tfjs");
    /** Is offscreenCanvas supported? */
    __publicField(this, "offscreen");
    /** Are performance counter instant values or additive */
    __publicField(this, "perfadd", false);
    /** If using tfjs-node get version of underlying tensorflow shared library and if gpu acceleration is enabled */
    __publicField(this, "tensorflow", {
      version: void 0,
      gpu: void 0
    });
    /** WASM detected capabilities */
    __publicField(this, "wasm", {
      supported: void 0,
      backend: void 0,
      simd: void 0,
      multithread: void 0
    });
    /** WebGL detected capabilities */
    __publicField(this, "webgl", {
      supported: void 0,
      backend: void 0,
      version: void 0,
      renderer: void 0,
      shader: void 0,
      vendor: void 0
    });
    /** WebGPU detected capabilities */
    __publicField(this, "webgpu", {
      supported: void 0,
      backend: void 0,
      adapter: void 0
    });
    /** CPU info */
    __publicField(this, "cpu", {
      model: void 0,
      flags: []
    });
    /** List of supported kernels for current backend */
    __publicField(this, "kernels", []);
    /** MonkeyPatch for Canvas/Image/ImageData */
    __privateAdd(this, _canvas, void 0);
    __privateAdd(this, _image, void 0);
    __privateAdd(this, _imageData, void 0);
    this.browser = typeof navigator !== "undefined";
    this.node = typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    this.tfjs = { version: Ace["tfjs-core"] };
    this.offscreen = typeof OffscreenCanvas !== "undefined";
    this.initial = true;
    this.worker = this.browser && this.offscreen ? typeof WorkerGlobalScope !== "undefined" : void 0;
    if (typeof navigator !== "undefined" && typeof navigator.userAgent !== "undefined") {
      const agent = navigator.userAgent || "";
      const raw = agent.match(/\(([^()]+)\)/g);
      if (raw == null ? void 0 : raw[0]) {
        const platformMatch = raw[0].match(/\(([^()]+)\)/g);
        this.platform = (platformMatch == null ? void 0 : platformMatch[0]) ? platformMatch[0].replace(/\(|\)/g, "") : "";
        this.agent = agent.replace(raw[0], "");
        if (this.platform[1])
          this.agent = this.agent.replace(raw[1], "");
        this.agent = this.agent.replace(/  /g, " ");
      }
    } else if (typeof process !== "undefined") {
      this.platform = `${process.platform} ${process.arch}`;
      this.agent = `NodeJS ${process.version}`;
    }
  }
  get Canvas() {
    return __privateGet(this, _canvas);
  }
  set Canvas(val) {
    __privateSet(this, _canvas, val);
    globalThis.Canvas = val;
  }
  get Image() {
    return __privateGet(this, _image);
  }
  // @ts-ignore monkey-patch;
  set Image(val) {
    __privateSet(this, _image, val);
    globalThis.Image = val;
  }
  get ImageData() {
    return __privateGet(this, _imageData);
  }
  // @ts-ignore monkey-patch;
  set ImageData(val) {
    __privateSet(this, _imageData, val);
    globalThis.ImageData = val;
  }
  /** update backend information */
  async updateBackend() {
    this.backends = Object.keys(pr().registryFactory);
    try {
      this.tensorflow = {
        version: vde()["binding"] ? vde()["binding"].TF_Version : void 0,
        gpu: vde()["binding"] ? vde()["binding"].isUsingGpuDevice() : void 0
      };
    } catch (e) {
    }
    this.wasm.supported = typeof WebAssembly !== "undefined";
    this.wasm.backend = this.backends.includes("wasm");
    if (this.wasm.supported && this.wasm.backend) {
      this.wasm.simd = await A().getAsync("WASM_HAS_SIMD_SUPPORT");
      this.wasm.multithread = await A().getAsync("WASM_HAS_MULTITHREAD_SUPPORT");
    }
    const c = canvas(100, 100);
    const gl2 = c ? c.getContext("webgl2") : void 0;
    this.webgl.supported = typeof gl2 !== "undefined";
    this.webgl.backend = this.backends.includes("webgl");
    if (this.webgl.supported && this.webgl.backend && gl2) {
      this.webgl.version = gl2.getParameter(gl2.VERSION);
      this.webgl.vendor = gl2.getParameter(gl2.VENDOR);
      this.webgl.renderer = gl2.getParameter(gl2.RENDERER);
      this.webgl.shader = gl2.getParameter(gl2.SHADING_LANGUAGE_VERSION);
    }
    this.webgpu.supported = this.browser && typeof navigator !== "undefined" && typeof navigator.gpu !== "undefined";
    this.webgpu.backend = this.backends.includes("webgpu");
    try {
      if (this.webgpu.supported) {
        const adapter = await navigator.gpu.requestAdapter();
        this.webgpu.adapter = await (adapter == null ? void 0 : adapter.requestAdapterInfo());
      }
    } catch (e) {
      this.webgpu.supported = false;
    }
    try {
      this.kernels = Ym(Cde()).map((kernel) => kernel.kernelName.toLowerCase());
    } catch (e) {
    }
  }
  /** update cpu information */
  updateCPU() {
    const cpu = { model: "", flags: [] };
    if (this.node && this.platform.startsWith("linux")) {
    }
    if (!this.cpu)
      Object.defineProperty(this, "cpu", { value: cpu });
    else
      this.cpu = cpu;
  }
};
_canvas = new WeakMap();
_image = new WeakMap();
_imageData = new WeakMap();
var env = new Env();

// src/util/webcam.ts
var WebCam = class {
  constructor() {
    // eslint-disable-line @typescript-eslint/no-extraneous-class
    /** current webcam configuration */
    __publicField(this, "config");
    /** instance of dom element associated with webcam stream */
    __publicField(this, "element");
    /** active webcam stream */
    __publicField(this, "stream");
    /** enumerated video devices */
    __publicField(this, "devices", []);
    __publicField(this, "enumerate", async () => {
      try {
        const devices = await navigator.mediaDevices.enumerateDevices();
        this.devices = devices.filter((device) => device.kind === "videoinput");
      } catch (e) {
        this.devices = [];
      }
      return this.devices;
    });
    /** start method initializizes webcam stream and associates it with a dom video element */
    __publicField(this, "start", async (webcamConfig) => {
      var _a, _b;
      if (webcamConfig == null ? void 0 : webcamConfig.debug)
        this.config.debug = webcamConfig == null ? void 0 : webcamConfig.debug;
      if (webcamConfig == null ? void 0 : webcamConfig.crop)
        this.config.crop = webcamConfig == null ? void 0 : webcamConfig.crop;
      if (webcamConfig == null ? void 0 : webcamConfig.mode)
        this.config.mode = webcamConfig == null ? void 0 : webcamConfig.mode;
      if (webcamConfig == null ? void 0 : webcamConfig.width)
        this.config.width = webcamConfig == null ? void 0 : webcamConfig.width;
      if (webcamConfig == null ? void 0 : webcamConfig.height)
        this.config.height = webcamConfig == null ? void 0 : webcamConfig.height;
      if (webcamConfig == null ? void 0 : webcamConfig.id)
        this.config.id = webcamConfig == null ? void 0 : webcamConfig.id;
      if (webcamConfig == null ? void 0 : webcamConfig.element) {
        if (typeof webcamConfig.element === "string") {
          const el2 = document.getElementById(webcamConfig.element);
          if (el2 && el2 instanceof HTMLVideoElement) {
            this.element = el2;
          } else {
            if (this.config.debug)
              log("webcam", "cannot get dom element", webcamConfig.element);
            return `webcam error: cannot get dom element: ${webcamConfig.element}`;
          }
        } else if (webcamConfig.element instanceof HTMLVideoElement) {
          this.element = webcamConfig.element;
        } else {
          if (this.config.debug)
            log("webcam", "unknown dom element", webcamConfig.element);
          return `webcam error: unknown dom element: ${webcamConfig.element}`;
        }
      } else {
        this.element = document.createElement("video");
      }
      const requestedConstraints = {
        audio: false,
        video: {
          facingMode: this.config.mode === "front" ? "user" : "environment",
          // @ts-ignore // resizeMode is still not defined in tslib
          resizeMode: this.config.crop ? "crop-and-scale" : "none"
        }
      };
      if (((_a = this.config) == null ? void 0 : _a.width) > 0)
        requestedConstraints.video.width = { ideal: this.config.width };
      if (((_b = this.config) == null ? void 0 : _b.height) > 0)
        requestedConstraints.video.height = { ideal: this.config.height };
      if (this.config.id)
        requestedConstraints.video.deviceId = this.config.id;
      this.element.addEventListener("play", () => {
        if (this.config.debug)
          log("webcam", "play");
      });
      this.element.addEventListener("pause", () => {
        if (this.config.debug)
          log("webcam", "pause");
      });
      this.element.addEventListener("click", async () => {
        if (!this.element || !this.stream)
          return;
        if (this.element.paused)
          await this.element.play();
        else
          this.element.pause();
      });
      if (!(navigator == null ? void 0 : navigator.mediaDevices)) {
        if (this.config.debug)
          log("webcam error", "no devices");
        return "webcam error: no devices";
      }
      try {
        this.stream = await navigator.mediaDevices.getUserMedia(requestedConstraints);
      } catch (err) {
        log("webcam", err);
        return `webcam error: ${err}`;
      }
      if (!this.stream) {
        if (this.config.debug)
          log("webcam error", "no stream");
        return "webcam error no stream";
      }
      this.element.srcObject = this.stream;
      const ready = new Promise((resolve) => {
        if (!this.element)
          resolve(false);
        else
          this.element.onloadeddata = () => resolve(true);
      });
      await ready;
      await this.element.play();
      if (this.config.debug) {
        log("webcam", {
          width: this.width,
          height: this.height,
          label: this.label,
          stream: this.stream,
          track: this.track,
          settings: this.settings,
          constraints: this.constraints,
          capabilities: this.capabilities
        });
      }
      return `webcam: ${this.label}`;
    });
    /** pause webcam video method */
    __publicField(this, "pause", () => {
      if (this.element)
        this.element.pause();
    });
    /** play webcam video method */
    __publicField(this, "play", async () => {
      if (this.element)
        await this.element.play();
    });
    /** stop method stops active webcam stream track and disconnects webcam */
    __publicField(this, "stop", () => {
      if (this.config.debug)
        log("webcam", "stop");
      if (this.track)
        this.track.stop();
    });
    this.config = {
      element: void 0,
      debug: true,
      mode: "front",
      crop: false,
      width: 0,
      height: 0
    };
  }
  /** get active webcam stream track */
  get track() {
    if (!this.stream)
      return void 0;
    return this.stream.getVideoTracks()[0];
  }
  /** get webcam capabilities */
  get capabilities() {
    if (!this.track)
      return void 0;
    return this.track.getCapabilities ? this.track.getCapabilities() : void 0;
  }
  /** get webcam constraints */
  get constraints() {
    if (!this.track)
      return void 0;
    return this.track.getConstraints ? this.track.getConstraints() : void 0;
  }
  /** get webcam settings */
  get settings() {
    if (!this.stream)
      return void 0;
    const track = this.stream.getVideoTracks()[0];
    return track.getSettings ? track.getSettings() : void 0;
  }
  /** get webcam label */
  get label() {
    if (!this.track)
      return "";
    return this.track.label;
  }
  /** is webcam paused */
  get paused() {
    var _a;
    return ((_a = this.element) == null ? void 0 : _a.paused) || false;
  }
  /** webcam current width */
  get width() {
    var _a;
    return ((_a = this.element) == null ? void 0 : _a.videoWidth) || 0;
  }
  /** webcam current height */
  get height() {
    var _a;
    return ((_a = this.element) == null ? void 0 : _a.videoHeight) || 0;
  }
};

// models/models.json
var models_exports = {};
__export(models_exports, {
  "affectnet-mobilenet": () => affectnet_mobilenet,
  age: () => age,
  "anti-spoofing": () => anti_spoofing,
  antispoof: () => antispoof,
  blazeface: () => blazeface,
  "blazeface-back": () => blazeface_back,
  "blazeface-front": () => blazeface_front,
  "blazepose-detector": () => blazepose_detector,
  "blazepose-full": () => blazepose_full,
  "blazepose-heavy": () => blazepose_heavy,
  "blazepose-lite": () => blazepose_lite,
  centernet: () => centernet,
  default: () => models_default,
  efficientpose: () => efficientpose,
  "efficientpose-i-lite": () => efficientpose_i_lite,
  "efficientpose-ii-lite": () => efficientpose_ii_lite,
  "efficientpose-iv": () => efficientpose_iv,
  emotion: () => emotion,
  faceboxes: () => faceboxes,
  facemesh: () => facemesh,
  "facemesh-attention": () => facemesh_attention,
  "facemesh-attention-pinto": () => facemesh_attention_pinto,
  "facemesh-detection-full": () => facemesh_detection_full,
  "facemesh-detection-short": () => facemesh_detection_short,
  faceres: () => faceres,
  "faceres-deep": () => faceres_deep,
  gear: () => gear,
  "gear-e1": () => gear_e1,
  "gear-e2": () => gear_e2,
  gender: () => gender,
  "gender-ssrnet-imdb": () => gender_ssrnet_imdb,
  handdetect: () => handdetect,
  "handlandmark-full": () => handlandmark_full,
  "handlandmark-lite": () => handlandmark_lite,
  "handlandmark-sparse": () => handlandmark_sparse,
  handskeleton: () => handskeleton,
  handtrack: () => handtrack,
  "insightface-efficientnet-b0": () => insightface_efficientnet_b0,
  "insightface-ghostnet-strides1": () => insightface_ghostnet_strides1,
  "insightface-ghostnet-strides2": () => insightface_ghostnet_strides2,
  "insightface-mobilenet-emore": () => insightface_mobilenet_emore,
  "insightface-mobilenet-swish": () => insightface_mobilenet_swish,
  iris: () => iris,
  liveness: () => liveness,
  meet: () => meet,
  mobileface: () => mobileface,
  mobilefacenet: () => mobilefacenet,
  models: () => models,
  "movenet-lightning": () => movenet_lightning,
  "movenet-multipose": () => movenet_multipose,
  "movenet-thunder": () => movenet_thunder,
  nanodet: () => nanodet,
  "nanodet-e": () => nanodet_e,
  "nanodet-g": () => nanodet_g,
  "nanodet-m": () => nanodet_m,
  "nanodet-t": () => nanodet_t,
  posenet: () => posenet,
  rvm: () => rvm,
  selfie: () => selfie
});
var antispoof = 853098;
var blazeface = 538928;
var centernet = 4030290;
var emotion = 820516;
var facemesh = 1477958;
var faceres = 6978814;
var handlandmark_lite = 2023432;
var handtrack = 2964837;
var iris = 2599092;
var liveness = 592976;
var models = 0;
var movenet_lightning = 4650216;
var affectnet_mobilenet = 6920630;
var age = 161240;
var blazeface_back = 538928;
var blazeface_front = 402048;
var blazepose_detector = 5928856;
var blazepose_full = 6339202;
var blazepose_heavy = 27502466;
var blazepose_lite = 2726402;
var efficientpose = 5651240;
var faceboxes = 2013002;
var facemesh_attention_pinto = 2387598;
var facemesh_attention = 2382414;
var facemesh_detection_full = 1026192;
var facemesh_detection_short = 201268;
var faceres_deep = 13957620;
var gear_e1 = 112438;
var gear_e2 = 112438;
var gear = 1498916;
var gender_ssrnet_imdb = 161236;
var gender = 201808;
var handdetect = 3515612;
var handlandmark_full = 5431368;
var handlandmark_sparse = 5286322;
var handskeleton = 5502280;
var meet = 372228;
var mobileface = 2183192;
var mobilefacenet = 5171976;
var movenet_multipose = 9448838;
var movenet_thunder = 12477112;
var nanodet = 7574558;
var posenet = 5032780;
var rvm = 3739355;
var selfie = 212886;
var anti_spoofing = 853098;
var efficientpose_i_lite = 2269064;
var efficientpose_ii_lite = 5651240;
var efficientpose_iv = 25643252;
var insightface_efficientnet_b0 = 13013224;
var insightface_ghostnet_strides1 = 8093408;
var insightface_ghostnet_strides2 = 8049584;
var insightface_mobilenet_emore = 6938536;
var insightface_mobilenet_swish = 12168584;
var nanodet_e = 12319156;
var nanodet_g = 7574558;
var nanodet_m = 1887474;
var nanodet_t = 5294216;
var models_default = {
  antispoof,
  blazeface,
  centernet,
  emotion,
  facemesh,
  faceres,
  "handlandmark-lite": handlandmark_lite,
  handtrack,
  iris,
  liveness,
  models,
  "movenet-lightning": movenet_lightning,
  "affectnet-mobilenet": affectnet_mobilenet,
  age,
  "blazeface-back": blazeface_back,
  "blazeface-front": blazeface_front,
  "blazepose-detector": blazepose_detector,
  "blazepose-full": blazepose_full,
  "blazepose-heavy": blazepose_heavy,
  "blazepose-lite": blazepose_lite,
  efficientpose,
  faceboxes,
  "facemesh-attention-pinto": facemesh_attention_pinto,
  "facemesh-attention": facemesh_attention,
  "facemesh-detection-full": facemesh_detection_full,
  "facemesh-detection-short": facemesh_detection_short,
  "faceres-deep": faceres_deep,
  "gear-e1": gear_e1,
  "gear-e2": gear_e2,
  gear,
  "gender-ssrnet-imdb": gender_ssrnet_imdb,
  gender,
  handdetect,
  "handlandmark-full": handlandmark_full,
  "handlandmark-sparse": handlandmark_sparse,
  handskeleton,
  meet,
  mobileface,
  mobilefacenet,
  "movenet-multipose": movenet_multipose,
  "movenet-thunder": movenet_thunder,
  nanodet,
  posenet,
  rvm,
  selfie,
  "anti-spoofing": anti_spoofing,
  "efficientpose-i-lite": efficientpose_i_lite,
  "efficientpose-ii-lite": efficientpose_ii_lite,
  "efficientpose-iv": efficientpose_iv,
  "insightface-efficientnet-b0": insightface_efficientnet_b0,
  "insightface-ghostnet-strides1": insightface_ghostnet_strides1,
  "insightface-ghostnet-strides2": insightface_ghostnet_strides2,
  "insightface-mobilenet-emore": insightface_mobilenet_emore,
  "insightface-mobilenet-swish": insightface_mobilenet_swish,
  "nanodet-e": nanodet_e,
  "nanodet-g": nanodet_g,
  "nanodet-m": nanodet_m,
  "nanodet-t": nanodet_t
};

// src/tfjs/load.ts
var options = {
  cacheModels: true,
  cacheSupported: true,
  verbose: true,
  debug: false,
  modelBasePath: ""
};
var modelStats = {};
async function httpHandler(url, init4) {
  if (options.debug)
    log("load model fetch:", url, init4);
  return fetch(url, init4);
}
function setModelLoadOptions(config3) {
  options.cacheModels = config3.cacheModels;
  options.verbose = config3.debug;
  options.modelBasePath = config3.modelBasePath;
}
async function loadModel(modelPath) {
  var _a, _b, _c2, _d2;
  let modelUrl = join(options.modelBasePath, modelPath || "");
  if (!modelUrl.toLowerCase().endsWith(".json"))
    modelUrl += ".json";
  const modelPathSegments = modelUrl.includes("/") ? modelUrl.split("/") : modelUrl.split("\\");
  const shortModelName = modelPathSegments[modelPathSegments.length - 1].replace(".json", "");
  const cachedModelName = "indexeddb://" + shortModelName;
  modelStats[shortModelName] = {
    name: shortModelName,
    sizeFromManifest: 0,
    sizeLoadedWeights: 0,
    sizeDesired: models_exports[shortModelName],
    inCache: false,
    url: ""
  };
  options.cacheSupported = typeof indexedDB !== "undefined";
  let cachedModels = {};
  try {
    cachedModels = options.cacheSupported && options.cacheModels ? await fi.listModels() : {};
  } catch (e) {
    options.cacheSupported = false;
  }
  modelStats[shortModelName].inCache = options.cacheSupported && options.cacheModels && Object.keys(cachedModels).includes(cachedModelName);
  modelStats[shortModelName].url = modelStats[shortModelName].inCache ? cachedModelName : modelUrl;
  const tfLoadOptions = typeof fetch === "undefined" ? {} : { fetchFunc: (url, init4) => httpHandler(url, init4) };
  let model23 = new Bl(modelStats[shortModelName].url, tfLoadOptions);
  let loaded = false;
  try {
    model23.findIOHandler();
    if (options.debug)
      log("model load handler:", model23["handler"]);
  } catch (err) {
    log("error finding model i/o handler:", modelUrl, err);
  }
  try {
    const artifacts = await ((_a = model23.handler) == null ? void 0 : _a.load()) || null;
    modelStats[shortModelName].sizeFromManifest = ((_b = artifacts == null ? void 0 : artifacts.weightData) == null ? void 0 : _b.byteLength) || 0;
    if (artifacts)
      model23.loadSync(artifacts);
    else
      model23 = await $8(modelStats[shortModelName].inCache ? cachedModelName : modelUrl, tfLoadOptions);
    modelStats[shortModelName].sizeLoadedWeights = ((_d2 = (_c2 = model23.artifacts) == null ? void 0 : _c2.weightData) == null ? void 0 : _d2.byteLength) || 0;
    if (options.verbose)
      log("load:", { model: shortModelName, url: model23["modelUrl"], bytes: modelStats[shortModelName].sizeLoadedWeights });
    loaded = true;
  } catch (err) {
    log("error loading model:", modelUrl, err);
  }
  if (loaded && options.cacheModels && options.cacheSupported && !modelStats[shortModelName].inCache) {
    try {
      const saveResult = await model23.save(cachedModelName);
      if (options.debug)
        log("model saved:", cachedModelName, saveResult);
    } catch (err) {
      log("error saving model:", modelUrl, err);
    }
  }
  return model23;
}

// package.json
var version = "3.1.2";

// src/tfjs/humangl.ts
var config2 = {
  name: "humangl",
  priority: 999,
  canvas: null,
  gl: null,
  extensions: [],
  webGLattr: {
    // https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: false,
    // default=true
    desynchronized: true
    // default=undefined
  }
};
function extensions() {
  const gl2 = config2.gl;
  if (!gl2)
    return;
  config2.extensions = gl2.getSupportedExtensions();
}
function register(instance) {
  var _a;
  if (instance.config.backend !== "humangl")
    return;
  if (config2.name in pr().registry && !((_a = config2 == null ? void 0 : config2.gl) == null ? void 0 : _a.getParameter(config2.gl.VERSION))) {
    log("humangl error: backend invalid context");
    instance.models.reset();
  }
  if (!Sde(config2.name)) {
    try {
      config2.canvas = canvas(100, 100);
    } catch (err) {
      log("humangl error: cannot create canvas:", err);
      return;
    }
    try {
      config2.gl = config2.canvas.getContext("webgl2", config2.webGLattr);
      if (!config2.gl) {
        log("humangl error: cannot get webgl context");
        return;
      }
      const glv2 = config2.gl.getParameter(config2.gl.VERSION).includes("2.0");
      if (!glv2) {
        log("backend override: using fallback webgl backend as webgl 2.0 is not detected");
        instance.config.backend = "webgl";
        return;
      }
      if (config2.canvas) {
        config2.canvas.addEventListener("webglcontextlost", (e) => {
          log("humangl error:", e.type);
          log("possible browser memory leak using webgl or conflict with multiple backend registrations");
          instance.emit("error");
          throw new Error("backend error: webgl context lost");
        });
        config2.canvas.addEventListener("webglcontextrestored", (e) => {
          log("humangl error: context restored:", e);
        });
        config2.canvas.addEventListener("webglcontextcreationerror", (e) => {
          log("humangl error: context create:", e);
        });
      }
    } catch (err) {
      log("humangl error: cannot get webgl context:", err);
      return;
    }
    try {
      vI(2, config2.gl);
    } catch (err) {
      log("humangl error: cannot set webgl context:", err);
      return;
    }
    try {
      const ctx = new kp(config2.gl);
      su(config2.name, () => new wu(ctx), config2.priority);
    } catch (err) {
      log("humangl error: cannot register webgl backend:", err);
      return;
    }
    try {
      const kernels = Ym("webgl");
      kernels.forEach((kernelConfig) => {
        const newKernelConfig = { ...kernelConfig, backendName: config2.name };
        ri(newKernelConfig);
      });
    } catch (err) {
      log("humangl error: cannot update webgl backend registration:", err);
      return;
    }
    try {
      if (A().flagRegistry.WEBGL_VERSION)
        A().set("WEBGL_VERSION", 2);
    } catch (err) {
      log("humangl error: cannot set WebGL backend flags:", err);
      return;
    }
    extensions();
    const backend = vde();
    const current = typeof backend["gpgpu"] !== "undefined" ? backend["getGPGPUContext"]().gl : null;
    if (current) {
      if (instance.config.debug)
        log("humangl backend registered:", { webgl: current.getParameter(current.VERSION), renderer: current.getParameter(current.RENDERER) });
    } else {
      log("humangl error: no current gl context:", current, config2.gl);
    }
  }
}

// src/tfjs/constants.ts
var constants = {
  tf255: 255,
  tf1: 1,
  tf2: 2,
  tf05: 0.5,
  tf127: 127.5,
  rgb: [0.2989, 0.587, 0.114]
};
function init() {
  constants.tf255 = ke(255, "float32");
  constants.tf1 = ke(1, "float32");
  constants.tf2 = ke(2, "float32");
  constants.tf05 = ke(0.5, "float32");
  constants.tf127 = ke(127.5, "float32");
  constants.rgb = tr([0.2989, 0.587, 0.114], "float32");
}

// src/tfjs/backend.ts
async function getBestBackend() {
  var _a;
  await env.updateBackend();
  if ((_a = env.tensorflow) == null ? void 0 : _a.version)
    return "tensorflow";
  if (env.webgpu.supported && env.webgpu.backend)
    return "webgpu";
  if (env.webgl.supported && env.webgl.backend)
    return "webgl";
  if (env.wasm.supported && env.wasm.backend)
    return "wasm";
  return "cpu";
}
function registerCustomOps(config3) {
  const newKernels = [];
  if (!env.kernels.includes("mod")) {
    const kernelMod = {
      kernelName: "Mod",
      backendName: Cde(),
      kernelFunc: (op2) => De(() => Te(op2.inputs.a, se(je(op2.inputs.a, op2.inputs.b), op2.inputs.b)))
    };
    ri(kernelMod);
    env.kernels.push("mod");
    newKernels.push("mod");
  }
  if (!env.kernels.includes("floormod")) {
    const kernelFloorMod = {
      kernelName: "FloorMod",
      backendName: Cde(),
      kernelFunc: (op2) => De(() => Ce(se(dd(op2.inputs.a, op2.inputs.b), op2.inputs.b), F2(op2.inputs.a, op2.inputs.b)))
    };
    ri(kernelFloorMod);
    env.kernels.push("floormod");
    newKernels.push("floormod");
  }
  if (!env.kernels.includes("rotatewithoffset") && config3.softwareKernels) {
    const kernelRotateWithOffset = {
      kernelName: "RotateWithOffset",
      backendName: Cde(),
      kernelFunc: (op2) => De(() => {
        const backend = Cde();
        yde("cpu");
        const t8 = Kj.rotateWithOffset(op2.inputs.image, op2.attrs.radians, op2.attrs.fillValue, op2.attrs.center);
        yde(backend);
        return t8;
      })
    };
    ri(kernelRotateWithOffset);
    env.kernels.push("rotatewithoffset");
    newKernels.push("rotatewithoffset");
  }
  if (newKernels.length > 0 && config3.debug)
    log("registered kernels:", newKernels);
}
var defaultFlags = {};
async function check(instance, force = false) {
  var _a, _b;
  instance.state = "backend";
  if (((_a = instance.config.backend) == null ? void 0 : _a.length) === 0)
    instance.config.backend = await getBestBackend();
  if (force || env.initial || instance.config.backend && instance.config.backend.length > 0 && Cde() !== instance.config.backend) {
    const timeStamp = now();
    if (instance.config.backend && instance.config.backend.length > 0) {
      if (typeof window === "undefined" && typeof WorkerGlobalScope !== "undefined" && instance.config.debug) {
        if (instance.config.debug)
          log("running inside web worker");
      }
      if (typeof navigator !== "undefined" && ((_b = navigator == null ? void 0 : navigator.userAgent) == null ? void 0 : _b.toLowerCase().includes("electron"))) {
        if (instance.config.debug)
          log("running inside electron");
      }
      let available = Object.keys(pr().registryFactory);
      if (instance.config.backend === "humangl" && !available.includes("humangl")) {
        register(instance);
        available = Object.keys(pr().registryFactory);
      }
      if (instance.config.debug)
        log("available backends:", available);
      if (env.browser && !env.node && instance.config.backend === "tensorflow" && available.includes("webgl")) {
        if (instance.config.debug)
          log("override: backend set to tensorflow while running in browser");
        instance.config.backend = "webgl";
      }
      if (env.node && !env.browser && (instance.config.backend === "webgl" || instance.config.backend === "humangl") && available.includes("tensorflow")) {
        if (instance.config.debug)
          log(`override: backend set to ${instance.config.backend} while running in nodejs`);
        instance.config.backend = "tensorflow";
      }
      if (env.browser && instance.config.backend === "webgpu") {
        if (typeof navigator === "undefined" || typeof navigator.gpu === "undefined") {
          log("override: backend set to webgpu but browser does not support webgpu");
          instance.config.backend = "webgl";
        } else {
          const adapter = await navigator.gpu.requestAdapter();
          if (instance.config.debug)
            log("enumerated webgpu adapter:", adapter);
          if (!adapter) {
            log("override: backend set to webgpu but browser reports no available gpu");
            instance.config.backend = "webgl";
          } else {
            const adapterInfo = "requestAdapterInfo" in adapter ? await adapter.requestAdapterInfo() : void 0;
            log("webgpu adapter info:", adapterInfo);
          }
        }
      }
      if (!available.includes(instance.config.backend)) {
        log(`error: backend ${instance.config.backend} not found in registry`);
        instance.config.backend = env.node ? "tensorflow" : "webgl";
        if (instance.config.debug)
          log(`override: setting backend ${instance.config.backend}`);
      }
      if (instance.config.debug)
        log("setting backend:", [instance.config.backend]);
      if (instance.config.backend === "wasm") {
        if (A().flagRegistry.CANVAS2D_WILL_READ_FREQUENTLY)
          A().set("CANVAS2D_WILL_READ_FREQUENTLY", true);
        if (instance.config.debug)
          log("wasm path:", instance.config.wasmPath);
        if (typeof Yse !== "undefined")
          Yse(instance.config.wasmPath, instance.config.wasmPlatformFetch);
        else
          throw new Error("backend error: attempting to use wasm backend but wasm path is not set");
        let mt = false;
        let simd = false;
        try {
          mt = await A().getAsync("WASM_HAS_MULTITHREAD_SUPPORT");
          simd = await A().getAsync("WASM_HAS_SIMD_SUPPORT");
          if (instance.config.debug)
            log(`wasm execution: ${simd ? "simd" : "no simd"} ${mt ? "multithreaded" : "singlethreaded"}`);
          if (instance.config.debug && !simd)
            log("warning: wasm simd support is not enabled");
        } catch (e) {
          log("wasm detection failed");
        }
      }
      try {
        await yde(instance.config.backend);
        await bde();
      } catch (err) {
        log("error: cannot set backend:", instance.config.backend, err);
        return false;
      }
      if (instance.config.debug)
        defaultFlags = JSON.parse(JSON.stringify(A().flags));
    }
    if (Cde() === "humangl" || Cde() === "webgl") {
      if (A().flagRegistry.WEBGL_USE_SHAPES_UNIFORMS)
        A().set("WEBGL_USE_SHAPES_UNIFORMS", true);
      if (A().flagRegistry.WEBGL_EXP_CONV)
        A().set("WEBGL_EXP_CONV", true);
      if (instance.config.debug && typeof instance.config.deallocate !== "undefined" && instance.config.deallocate) {
        log("changing webgl: WEBGL_DELETE_TEXTURE_THRESHOLD:", true);
        A().set("WEBGL_DELETE_TEXTURE_THRESHOLD", 0);
      }
    }
    if (Cde() === "webgpu") {
    }
    if (instance.config.debug) {
      const newFlags = A().flags;
      const updatedFlags = {};
      for (const key of Object.keys(newFlags)) {
        if (defaultFlags[key] === newFlags[key])
          continue;
        updatedFlags[key] = newFlags[key];
      }
      if (instance.config.debug && Object.keys(updatedFlags).length > 0)
        log("backend:", Cde(), "flags:", updatedFlags);
    }
    if (instance.config.flags && Object.keys(instance.config.flags).length > 0) {
      if (instance.config.debug)
        log("flags:", instance.config["flags"]);
      for (const [key, val] of Object.entries(instance.config.flags)) {
        A().set(key, val);
      }
    }
    lde();
    init();
    instance.performance.initBackend = Math.trunc(now() - timeStamp);
    instance.config.backend = Cde();
    await env.updateBackend();
    registerCustomOps(instance.config);
  }
  return true;
}
function fakeOps(kernelNames, config3) {
  for (const kernelName of kernelNames) {
    const kernelConfig = {
      kernelName,
      backendName: config3.backend,
      kernelFunc: (param) => {
        var _a;
        if (config3.debug)
          log("kernelFunc", kernelName, config3.backend, param);
        return (_a = param == null ? void 0 : param.inputs) == null ? void 0 : _a.info;
      }
      // setupFunc: () => { if (config.debug) log('kernelFunc', kernelName, config.backend); },
      // disposeFunc: () => { if (config.debug) log('kernelFunc', kernelName, config.backend); },
    };
    ri(kernelConfig);
  }
  env.kernels = Ym(Cde()).map((kernel) => kernel.kernelName.toLowerCase());
}

// src/draw/draw.ts
var draw_exports = {};
__export(draw_exports, {
  all: () => all,
  body: () => body,
  canvas: () => canvas2,
  face: () => face,
  gesture: () => gesture,
  hand: () => hand,
  init: () => init2,
  object: () => object,
  options: () => options2,
  person: () => person
});

// src/draw/primitives.ts
var getCanvasContext = (input) => {
  if (!input)
    log("draw error: invalid canvas");
  else if (!input.getContext)
    log("draw error: canvas context not defined");
  else {
    const ctx = input.getContext("2d", { willReadFrequently: true });
    if (!ctx)
      log("draw error: cannot get canvas context");
    else
      return ctx;
  }
  return null;
};
var rad2deg = (theta) => Math.round(theta * 180 / Math.PI);
var replace = (str, source, target) => str.replace(source, typeof target === "number" ? target.toFixed(1) : target);
var colorDepth = (z, opt) => {
  if (!opt.useDepth || typeof z === "undefined")
    return opt.color;
  const rgb3 = Uint8ClampedArray.from([127 + 2 * z, 127 - 2 * z, 255]);
  return `rgba(${rgb3[0]}, ${rgb3[1]}, ${rgb3[2]}, ${opt.alpha})`;
};
function labels(ctx, str, startX, startY, localOptions2) {
  const line = str.replace(/\[.*\]/g, "").split("\n").map((l) => l.trim());
  const x = Math.max(0, startX);
  for (let i = line.length - 1; i >= 0; i--) {
    const y8 = i * localOptions2.lineHeight + startY;
    if (localOptions2.shadowColor && localOptions2.shadowColor !== "") {
      ctx.fillStyle = localOptions2.shadowColor;
      ctx.fillText(line[i], x + 5, y8 + 16);
    }
    ctx.fillStyle = localOptions2.labelColor;
    ctx.fillText(line[i], x + 4, y8 + 15);
  }
}
function point(ctx, x, y8, z, localOptions2) {
  ctx.fillStyle = colorDepth(z, localOptions2);
  ctx.beginPath();
  ctx.arc(x, y8, localOptions2.pointSize, 0, 2 * Math.PI);
  ctx.fill();
}
function rect(ctx, x, y8, width, height, localOptions2) {
  ctx.beginPath();
  ctx.lineWidth = localOptions2.lineWidth;
  if (localOptions2.useCurves) {
    const cx2 = (x + x + width) / 2;
    const cy2 = (y8 + y8 + height) / 2;
    ctx.ellipse(cx2, cy2, width / 2, height / 2, 0, 0, 2 * Math.PI);
  } else {
    ctx.moveTo(x + localOptions2.roundRect, y8);
    ctx.lineTo(x + width - localOptions2.roundRect, y8);
    ctx.quadraticCurveTo(x + width, y8, x + width, y8 + localOptions2.roundRect);
    ctx.lineTo(x + width, y8 + height - localOptions2.roundRect);
    ctx.quadraticCurveTo(x + width, y8 + height, x + width - localOptions2.roundRect, y8 + height);
    ctx.lineTo(x + localOptions2.roundRect, y8 + height);
    ctx.quadraticCurveTo(x, y8 + height, x, y8 + height - localOptions2.roundRect);
    ctx.lineTo(x, y8 + localOptions2.roundRect);
    ctx.quadraticCurveTo(x, y8, x + localOptions2.roundRect, y8);
    ctx.closePath();
  }
  ctx.stroke();
}
function lines(ctx, points, localOptions2) {
  if (points.length < 2)
    return;
  ctx.beginPath();
  ctx.moveTo(points[0][0], points[0][1]);
  for (const pt2 of points) {
    ctx.strokeStyle = colorDepth(pt2[2] || 0, localOptions2);
    ctx.lineTo(Math.trunc(pt2[0]), Math.trunc(pt2[1]));
  }
  ctx.stroke();
  if (localOptions2.fillPolygons) {
    ctx.closePath();
    ctx.fill();
  }
}
function curves(ctx, points, localOptions2) {
  if (points.length < 2)
    return;
  ctx.lineWidth = localOptions2.lineWidth;
  if (!localOptions2.useCurves || points.length <= 2) {
    lines(ctx, points, localOptions2);
    return;
  }
  ctx.moveTo(points[0][0], points[0][1]);
  for (let i = 0; i < points.length - 2; i++) {
    const xc2 = (points[i][0] + points[i + 1][0]) / 2;
    const yc2 = (points[i][1] + points[i + 1][1]) / 2;
    ctx.quadraticCurveTo(points[i][0], points[i][1], xc2, yc2);
  }
  ctx.quadraticCurveTo(points[points.length - 2][0], points[points.length - 2][1], points[points.length - 1][0], points[points.length - 1][1]);
  ctx.stroke();
  if (localOptions2.fillPolygons) {
    ctx.closePath();
    ctx.fill();
  }
}
function arrow(ctx, from, to, radius = 5) {
  let angle;
  let x;
  let y8;
  ctx.beginPath();
  ctx.moveTo(from[0], from[1]);
  ctx.lineTo(to[0], to[1]);
  angle = Math.atan2(to[1] - from[1], to[0] - from[0]);
  x = radius * Math.cos(angle) + to[0];
  y8 = radius * Math.sin(angle) + to[1];
  ctx.moveTo(x, y8);
  angle += 1 / 3 * (2 * Math.PI);
  x = radius * Math.cos(angle) + to[0];
  y8 = radius * Math.sin(angle) + to[1];
  ctx.lineTo(x, y8);
  angle += 1 / 3 * (2 * Math.PI);
  x = radius * Math.cos(angle) + to[0];
  y8 = radius * Math.sin(angle) + to[1];
  ctx.lineTo(x, y8);
  ctx.closePath();
  ctx.stroke();
  ctx.fill();
}

// src/draw/options.ts
var options2 = {
  color: "rgba(173, 216, 230, 0.6)",
  // 'lightblue' with light alpha channel
  labelColor: "rgba(173, 216, 230, 1)",
  // 'lightblue' with dark alpha channel
  shadowColor: "black",
  alpha: 0.5,
  font: 'small-caps 16px "Segoe UI"',
  lineHeight: 18,
  lineWidth: 4,
  pointSize: 2,
  roundRect: 8,
  drawPoints: false,
  drawLabels: true,
  drawBoxes: true,
  drawAttention: true,
  drawGestures: true,
  drawPolygons: true,
  drawGaze: true,
  fillPolygons: false,
  useDepth: true,
  useCurves: false,
  faceLabels: "",
  bodyLabels: "",
  bodyPartLabels: "",
  objectLabels: "",
  handLabels: "",
  fingerLabels: "",
  gestureLabels: ""
};

// src/face/facemeshcoords.ts
var meshAnnotations = {
  silhouette: [
    10,
    338,
    297,
    332,
    284,
    251,
    389,
    356,
    454,
    323,
    361,
    288,
    397,
    365,
    379,
    378,
    400,
    377,
    152,
    148,
    176,
    149,
    150,
    136,
    172,
    58,
    132,
    93,
    234,
    127,
    162,
    21,
    54,
    103,
    67,
    109
  ],
  // lipsUpperOuter: [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291], // 11
  // lipsLowerOuter: [146, 91, 181, 84, 17, 314, 405, 321, 375, 291], // 10
  // lipsUpperInner: [78, 191, 80, 81, 82, 13, 312, 311, 310, 415, 308], // 11
  // lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308], // 11
  lipsUpperOuter: [185, 40, 39, 37, 0, 267, 269, 270, 409],
  lipsLowerOuter: [61, 146, 91, 181, 84, 17, 314, 405, 321, 375, 291],
  lipsUpperInner: [191, 80, 81, 82, 13, 312, 311, 310, 415],
  lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308],
  lipsLowerSemiOuter: [76, 77, 90, 180, 85, 16, 315, 404, 320, 307, 306],
  lipsUpperSemiOuter: [184, 74, 73, 72, 11, 302, 303, 304, 408],
  lipsLowerSemiInner: [62, 96, 89, 179, 86, 15, 316, 403, 319, 325, 292],
  lipsUpperSemiInner: [183, 42, 41, 38, 12, 268, 271, 272, 407],
  rightEyeUpper0: [246, 161, 160, 159, 158, 157, 173],
  // 7
  rightEyeLower0: [33, 7, 163, 144, 145, 153, 154, 155, 133],
  // 9
  rightEyeUpper1: [247, 30, 29, 27, 28, 56, 190],
  // 7
  rightEyeLower1: [130, 25, 110, 24, 23, 22, 26, 112, 243],
  // 9
  rightEyeUpper2: [113, 225, 224, 223, 222, 221, 189],
  // 7
  rightEyeLower2: [226, 31, 228, 229, 230, 231, 232, 233, 244],
  // 9
  rightEyeLower3: [143, 111, 117, 118, 119, 120, 121, 128, 245],
  // 9
  rightEyebrowUpper: [156, 70, 63, 105, 66, 107, 55, 193],
  // 8
  rightEyebrowLower: [35, 124, 46, 53, 52, 65],
  // 6
  rightEyeIris: [473, 474, 475, 476, 477],
  // 5
  leftEyeUpper0: [466, 388, 387, 386, 385, 384, 398],
  leftEyeLower0: [263, 249, 390, 373, 374, 380, 381, 382, 362],
  leftEyeUpper1: [467, 260, 259, 257, 258, 286, 414],
  leftEyeLower1: [359, 255, 339, 254, 253, 252, 256, 341, 463],
  leftEyeUpper2: [342, 445, 444, 443, 442, 441, 413],
  leftEyeLower2: [446, 261, 448, 449, 450, 451, 452, 453, 464],
  leftEyeLower3: [372, 340, 346, 347, 348, 349, 350, 357, 465],
  leftEyebrowUpper: [383, 300, 293, 334, 296, 336, 285, 417],
  leftEyebrowLower: [265, 353, 276, 283, 282, 295],
  leftEyeIris: [468, 469, 470, 471, 472],
  midwayBetweenEyes: [168],
  noseTip: [1],
  noseBottom: [2],
  noseRightCorner: [98],
  noseLeftCorner: [327],
  rightCheek: [205],
  leftCheek: [425]
};
var meshLandmarks = {
  count: 468,
  mouth: 13,
  symmetryLine: [13, meshAnnotations.midwayBetweenEyes[0]]
};
var blazeFaceLandmarks = {
  leftEye: 0,
  rightEye: 1,
  nose: 2,
  mouth: 3,
  leftEar: 4,
  rightEar: 5,
  symmetryLine: [3, 2]
};
var irisIndices = [
  // A mapping from facemesh model keypoints to iris model keypoints.
  { key: "EyeUpper0", indices: [9, 10, 11, 12, 13, 14, 15] },
  // 7 x 3d
  { key: "EyeUpper1", indices: [25, 26, 27, 28, 29, 30, 31] },
  // 7 x 3d
  { key: "EyeUpper2", indices: [41, 42, 43, 44, 45, 46, 47] },
  // 7 x 3d
  { key: "EyeLower0", indices: [0, 1, 2, 3, 4, 5, 6, 7, 8] },
  // 7 x 3d
  { key: "EyeLower1", indices: [16, 17, 18, 19, 20, 21, 22, 23, 24] },
  // 9 x 3d
  { key: "EyeLower2", indices: [32, 33, 34, 35, 36, 37, 38, 39, 40] },
  // 9 x 3d
  { key: "EyeLower3", indices: [54, 55, 56, 57, 58, 59, 60, 61, 62] },
  // 9 x 3d
  { key: "EyebrowUpper", indices: [63, 64, 65, 66, 67, 68, 69, 70] },
  // 8 x 3d
  { key: "EyebrowLower", indices: [48, 49, 50, 51, 52, 53] }
  // 6 x 3d
];
var UV468 = [
  [0.499976992607117, 0.652534008026123],
  [0.500025987625122, 0.547487020492554],
  [0.499974012374878, 0.602371990680695],
  [0.482113003730774, 0.471979022026062],
  [0.500150978565216, 0.527155995368958],
  [0.499909996986389, 0.498252987861633],
  [0.499523013830185, 0.40106201171875],
  [0.289712011814117, 0.380764007568359],
  [0.499954998493195, 0.312398016452789],
  [0.499987006187439, 0.269918978214264],
  [0.500023007392883, 0.107050001621246],
  [0.500023007392883, 0.666234016418457],
  [0.5000159740448, 0.679224014282227],
  [0.500023007392883, 0.692348003387451],
  [0.499976992607117, 0.695277988910675],
  [0.499976992607117, 0.70593398809433],
  [0.499976992607117, 0.719385027885437],
  [0.499976992607117, 0.737019002437592],
  [0.499967992305756, 0.781370997428894],
  [0.499816000461578, 0.562981009483337],
  [0.473773002624512, 0.573909997940063],
  [0.104906998574734, 0.254140973091125],
  [0.365929991006851, 0.409575998783112],
  [0.338757991790771, 0.41302502155304],
  [0.311120003461838, 0.409460008144379],
  [0.274657994508743, 0.389131009578705],
  [0.393361985683441, 0.403706014156342],
  [0.345234006643295, 0.344011008739471],
  [0.370094001293182, 0.346076011657715],
  [0.319321990013123, 0.347265005111694],
  [0.297903001308441, 0.353591024875641],
  [0.24779200553894, 0.410809993743896],
  [0.396889001131058, 0.842755019664764],
  [0.280097991228104, 0.375599980354309],
  [0.106310002505779, 0.399955987930298],
  [0.2099249958992, 0.391353011131287],
  [0.355807989835739, 0.534406006336212],
  [0.471751004457474, 0.65040397644043],
  [0.474155008792877, 0.680191993713379],
  [0.439785003662109, 0.657229006290436],
  [0.414617002010345, 0.66654098033905],
  [0.450374007225037, 0.680860996246338],
  [0.428770989179611, 0.682690978050232],
  [0.374971002340317, 0.727805018424988],
  [0.486716985702515, 0.547628998756409],
  [0.485300987958908, 0.527395009994507],
  [0.257764995098114, 0.314490020275116],
  [0.401223003864288, 0.455172002315521],
  [0.429818987846375, 0.548614978790283],
  [0.421351999044418, 0.533740997314453],
  [0.276895999908447, 0.532056987285614],
  [0.483370006084442, 0.499586999416351],
  [0.33721199631691, 0.282882988452911],
  [0.296391993761063, 0.293242990970612],
  [0.169294998049736, 0.193813979625702],
  [0.447580009698868, 0.302609980106354],
  [0.392390012741089, 0.353887975215912],
  [0.354490011930466, 0.696784019470215],
  [0.067304998636246, 0.730105042457581],
  [0.442739009857178, 0.572826027870178],
  [0.457098007202148, 0.584792017936707],
  [0.381974011659622, 0.694710969924927],
  [0.392388999462128, 0.694203019142151],
  [0.277076005935669, 0.271932005882263],
  [0.422551989555359, 0.563233017921448],
  [0.385919004678726, 0.281364023685455],
  [0.383103013038635, 0.255840003490448],
  [0.331431001424789, 0.119714021682739],
  [0.229923993349075, 0.232002973556519],
  [0.364500999450684, 0.189113974571228],
  [0.229622006416321, 0.299540996551514],
  [0.173287004232407, 0.278747975826263],
  [0.472878992557526, 0.666198015213013],
  [0.446828007698059, 0.668527007102966],
  [0.422762006521225, 0.673889994621277],
  [0.445307999849319, 0.580065965652466],
  [0.388103008270264, 0.693961024284363],
  [0.403039008378983, 0.706539988517761],
  [0.403629004955292, 0.693953037261963],
  [0.460041999816895, 0.557139039039612],
  [0.431158006191254, 0.692366003990173],
  [0.452181994915009, 0.692366003990173],
  [0.475387006998062, 0.692366003990173],
  [0.465828001499176, 0.779190003871918],
  [0.472328990697861, 0.736225962638855],
  [0.473087012767792, 0.717857003211975],
  [0.473122000694275, 0.704625964164734],
  [0.473033010959625, 0.695277988910675],
  [0.427942007780075, 0.695277988910675],
  [0.426479011774063, 0.703539967536926],
  [0.423162013292313, 0.711845993995667],
  [0.4183090031147, 0.720062971115112],
  [0.390094995498657, 0.639572978019714],
  [0.013953999616206, 0.560034036636353],
  [0.499913990497589, 0.58014702796936],
  [0.413199990987778, 0.69539999961853],
  [0.409626007080078, 0.701822996139526],
  [0.468080013990402, 0.601534962654114],
  [0.422728985548019, 0.585985004901886],
  [0.463079988956451, 0.593783974647522],
  [0.37211999297142, 0.47341400384903],
  [0.334562003612518, 0.496073007583618],
  [0.411671012639999, 0.546965003013611],
  [0.242175996303558, 0.14767599105835],
  [0.290776997804642, 0.201445996761322],
  [0.327338010072708, 0.256527006626129],
  [0.399509996175766, 0.748921036720276],
  [0.441727995872498, 0.261676013469696],
  [0.429764986038208, 0.187834024429321],
  [0.412198007106781, 0.108901023864746],
  [0.288955003023148, 0.398952007293701],
  [0.218936994671822, 0.435410976409912],
  [0.41278201341629, 0.398970007896423],
  [0.257135003805161, 0.355440020561218],
  [0.427684992551804, 0.437960982322693],
  [0.448339998722076, 0.536936044692993],
  [0.178560003638268, 0.45755398273468],
  [0.247308000922203, 0.457193970680237],
  [0.286267012357712, 0.467674970626831],
  [0.332827985286713, 0.460712015628815],
  [0.368755996227264, 0.447206974029541],
  [0.398963987827301, 0.432654976844788],
  [0.476410001516342, 0.405806005001068],
  [0.189241006970406, 0.523923993110657],
  [0.228962004184723, 0.348950982093811],
  [0.490725994110107, 0.562400996685028],
  [0.404670000076294, 0.485132992267609],
  [0.019469000399113, 0.401564002037048],
  [0.426243007183075, 0.420431017875671],
  [0.396993011236191, 0.548797011375427],
  [0.266469985246658, 0.376977026462555],
  [0.439121007919312, 0.51895797252655],
  [0.032313998788595, 0.644356966018677],
  [0.419054001569748, 0.387154996395111],
  [0.462783008813858, 0.505746960639954],
  [0.238978996872902, 0.779744982719421],
  [0.198220998048782, 0.831938028335571],
  [0.107550002634525, 0.540755033493042],
  [0.183610007166862, 0.740257024765015],
  [0.134409993886948, 0.333683013916016],
  [0.385764002799988, 0.883153975009918],
  [0.490967005491257, 0.579378008842468],
  [0.382384985685349, 0.508572995662689],
  [0.174399003386497, 0.397670984268188],
  [0.318785011768341, 0.39623498916626],
  [0.343364000320435, 0.400596976280212],
  [0.396100014448166, 0.710216999053955],
  [0.187885001301765, 0.588537991046906],
  [0.430987000465393, 0.944064974784851],
  [0.318993002176285, 0.898285031318665],
  [0.266247987747192, 0.869701027870178],
  [0.500023007392883, 0.190576016902924],
  [0.499976992607117, 0.954452991485596],
  [0.366169989109039, 0.398822009563446],
  [0.393207013607025, 0.39553701877594],
  [0.410373002290726, 0.391080021858215],
  [0.194993004202843, 0.342101991176605],
  [0.388664990663528, 0.362284004688263],
  [0.365961998701096, 0.355970978736877],
  [0.343364000320435, 0.355356991291046],
  [0.318785011768341, 0.35834002494812],
  [0.301414996385574, 0.363156020641327],
  [0.058132998645306, 0.319076001644135],
  [0.301414996385574, 0.387449026107788],
  [0.499987989664078, 0.618434011936188],
  [0.415838003158569, 0.624195992946625],
  [0.445681989192963, 0.566076993942261],
  [0.465844005346298, 0.620640993118286],
  [0.49992299079895, 0.351523995399475],
  [0.288718998432159, 0.819945991039276],
  [0.335278987884521, 0.852819979190826],
  [0.440512001514435, 0.902418971061707],
  [0.128294005990028, 0.791940987110138],
  [0.408771991729736, 0.373893976211548],
  [0.455606997013092, 0.451801002025604],
  [0.499877005815506, 0.908990025520325],
  [0.375436991453171, 0.924192011356354],
  [0.11421000212431, 0.615022003650665],
  [0.448662012815475, 0.695277988910675],
  [0.4480200111866, 0.704632043838501],
  [0.447111994028091, 0.715808033943176],
  [0.444831997156143, 0.730794012546539],
  [0.430011987686157, 0.766808986663818],
  [0.406787008047104, 0.685672998428345],
  [0.400738000869751, 0.681069016456604],
  [0.392399996519089, 0.677703022956848],
  [0.367855995893478, 0.663918972015381],
  [0.247923001646996, 0.601333022117615],
  [0.452769994735718, 0.420849978923798],
  [0.43639200925827, 0.359887003898621],
  [0.416164010763168, 0.368713974952698],
  [0.413385987281799, 0.692366003990173],
  [0.228018000721931, 0.683571994304657],
  [0.468268007040024, 0.352671027183533],
  [0.411361992359161, 0.804327011108398],
  [0.499989002943039, 0.469825029373169],
  [0.479153990745544, 0.442654013633728],
  [0.499974012374878, 0.439637005329132],
  [0.432112008333206, 0.493588984012604],
  [0.499886006116867, 0.866917014122009],
  [0.49991300702095, 0.821729004383087],
  [0.456548988819122, 0.819200992584229],
  [0.344549000263214, 0.745438992977142],
  [0.37890899181366, 0.574010014533997],
  [0.374292999505997, 0.780184984207153],
  [0.319687992334366, 0.570737957954407],
  [0.357154995203018, 0.604269981384277],
  [0.295284003019333, 0.621580958366394],
  [0.447750002145767, 0.862477004528046],
  [0.410986006259918, 0.508723020553589],
  [0.31395098567009, 0.775308012962341],
  [0.354128003120422, 0.812552988529205],
  [0.324548006057739, 0.703992962837219],
  [0.189096003770828, 0.646299958229065],
  [0.279776990413666, 0.71465802192688],
  [0.1338230073452, 0.682700991630554],
  [0.336768001317978, 0.644733011722565],
  [0.429883986711502, 0.466521978378296],
  [0.455527991056442, 0.548622965812683],
  [0.437114000320435, 0.558896005153656],
  [0.467287987470627, 0.529924988746643],
  [0.414712011814117, 0.335219979286194],
  [0.37704598903656, 0.322777986526489],
  [0.344107985496521, 0.320150971412659],
  [0.312875986099243, 0.32233202457428],
  [0.283526003360748, 0.333190023899078],
  [0.241245999932289, 0.382785975933075],
  [0.102986000478268, 0.468762993812561],
  [0.267612010240555, 0.424560010433197],
  [0.297879010438919, 0.433175981044769],
  [0.333433985710144, 0.433878004550934],
  [0.366427004337311, 0.426115989685059],
  [0.396012008190155, 0.416696012020111],
  [0.420121014118195, 0.41022801399231],
  [0.007561000064015, 0.480777025222778],
  [0.432949006557465, 0.569517970085144],
  [0.458638995885849, 0.479089021682739],
  [0.473466008901596, 0.545744001865387],
  [0.476087987422943, 0.563830018043518],
  [0.468472003936768, 0.555056989192963],
  [0.433990985155106, 0.582361996173859],
  [0.483518004417419, 0.562983989715576],
  [0.482482999563217, 0.57784903049469],
  [0.42645001411438, 0.389798998832703],
  [0.438998997211456, 0.39649498462677],
  [0.450067013502121, 0.400434017181396],
  [0.289712011814117, 0.368252992630005],
  [0.276670008897781, 0.363372981548309],
  [0.517862021923065, 0.471948027610779],
  [0.710287988185883, 0.380764007568359],
  [0.526226997375488, 0.573909997940063],
  [0.895093023777008, 0.254140973091125],
  [0.634069979190826, 0.409575998783112],
  [0.661242008209229, 0.41302502155304],
  [0.688880026340485, 0.409460008144379],
  [0.725341975688934, 0.389131009578705],
  [0.606630027294159, 0.40370500087738],
  [0.654766023159027, 0.344011008739471],
  [0.629905998706818, 0.346076011657715],
  [0.680678009986877, 0.347265005111694],
  [0.702096998691559, 0.353591024875641],
  [0.75221198797226, 0.410804986953735],
  [0.602918028831482, 0.842862963676453],
  [0.719901978969574, 0.375599980354309],
  [0.893692970275879, 0.399959981441498],
  [0.790081977844238, 0.391354024410248],
  [0.643998026847839, 0.534487962722778],
  [0.528249025344849, 0.65040397644043],
  [0.525849997997284, 0.680191040039062],
  [0.560214996337891, 0.657229006290436],
  [0.585384011268616, 0.66654098033905],
  [0.549625992774963, 0.680860996246338],
  [0.57122802734375, 0.682691991329193],
  [0.624852001667023, 0.72809898853302],
  [0.513050019741058, 0.547281980514526],
  [0.51509702205658, 0.527251958847046],
  [0.742246985435486, 0.314507007598877],
  [0.598631024360657, 0.454979002475739],
  [0.570338010787964, 0.548575043678284],
  [0.578631997108459, 0.533622980117798],
  [0.723087012767792, 0.532054007053375],
  [0.516445994377136, 0.499638974666595],
  [0.662801027297974, 0.282917976379395],
  [0.70362401008606, 0.293271005153656],
  [0.830704987049103, 0.193813979625702],
  [0.552385985851288, 0.302568018436432],
  [0.607609987258911, 0.353887975215912],
  [0.645429015159607, 0.696707010269165],
  [0.932694971561432, 0.730105042457581],
  [0.557260990142822, 0.572826027870178],
  [0.542901992797852, 0.584792017936707],
  [0.6180260181427, 0.694710969924927],
  [0.607590973377228, 0.694203019142151],
  [0.722943007946014, 0.271963000297546],
  [0.577413976192474, 0.563166975975037],
  [0.614082992076874, 0.281386971473694],
  [0.616907000541687, 0.255886018276215],
  [0.668509006500244, 0.119913995265961],
  [0.770092010498047, 0.232020974159241],
  [0.635536015033722, 0.189248979091644],
  [0.77039098739624, 0.299556016921997],
  [0.826722025871277, 0.278755009174347],
  [0.527121007442474, 0.666198015213013],
  [0.553171992301941, 0.668527007102966],
  [0.577238023281097, 0.673889994621277],
  [0.554691970348358, 0.580065965652466],
  [0.611896991729736, 0.693961024284363],
  [0.59696102142334, 0.706539988517761],
  [0.596370995044708, 0.693953037261963],
  [0.539958000183105, 0.557139039039612],
  [0.568841993808746, 0.692366003990173],
  [0.547818005084991, 0.692366003990173],
  [0.52461302280426, 0.692366003990173],
  [0.534089982509613, 0.779141008853912],
  [0.527670979499817, 0.736225962638855],
  [0.526912987232208, 0.717857003211975],
  [0.526877999305725, 0.704625964164734],
  [0.526966989040375, 0.695277988910675],
  [0.572058022022247, 0.695277988910675],
  [0.573521018028259, 0.703539967536926],
  [0.57683801651001, 0.711845993995667],
  [0.581691026687622, 0.720062971115112],
  [0.609944999217987, 0.639909982681274],
  [0.986046016216278, 0.560034036636353],
  [0.5867999792099, 0.69539999961853],
  [0.590372025966644, 0.701822996139526],
  [0.531915009021759, 0.601536989212036],
  [0.577268004417419, 0.585934996604919],
  [0.536915004253387, 0.593786001205444],
  [0.627542972564697, 0.473352015018463],
  [0.665585994720459, 0.495950996875763],
  [0.588353991508484, 0.546862006187439],
  [0.757824003696442, 0.14767599105835],
  [0.709249973297119, 0.201507985591888],
  [0.672684013843536, 0.256581008434296],
  [0.600408971309662, 0.74900496006012],
  [0.55826598405838, 0.261672019958496],
  [0.570303976535797, 0.187870979309082],
  [0.588165998458862, 0.109044015407562],
  [0.711045026779175, 0.398952007293701],
  [0.781069993972778, 0.435405015945435],
  [0.587247014045715, 0.398931980133057],
  [0.742869973182678, 0.355445981025696],
  [0.572156012058258, 0.437651991844177],
  [0.55186802148819, 0.536570012569427],
  [0.821442008018494, 0.457556009292603],
  [0.752701997756958, 0.457181990146637],
  [0.71375697851181, 0.467626988887787],
  [0.66711300611496, 0.460672974586487],
  [0.631101012229919, 0.447153985500336],
  [0.6008620262146, 0.432473003864288],
  [0.523481011390686, 0.405627012252808],
  [0.810747981071472, 0.523926019668579],
  [0.771045982837677, 0.348959028720856],
  [0.509127020835876, 0.562718033790588],
  [0.595292985439301, 0.485023975372314],
  [0.980530977249146, 0.401564002037048],
  [0.573499977588654, 0.420000016689301],
  [0.602994978427887, 0.548687994480133],
  [0.733529984951019, 0.376977026462555],
  [0.560611009597778, 0.519016981124878],
  [0.967685997486115, 0.644356966018677],
  [0.580985009670258, 0.387160003185272],
  [0.537728011608124, 0.505385041236877],
  [0.760966002941132, 0.779752969741821],
  [0.801778972148895, 0.831938028335571],
  [0.892440974712372, 0.54076099395752],
  [0.816350996494293, 0.740260004997253],
  [0.865594983100891, 0.333687007427216],
  [0.614073991775513, 0.883246004581451],
  [0.508952975273132, 0.579437971115112],
  [0.617941975593567, 0.508316040039062],
  [0.825608015060425, 0.397674977779388],
  [0.681214988231659, 0.39623498916626],
  [0.656635999679565, 0.400596976280212],
  [0.603900015354156, 0.710216999053955],
  [0.81208598613739, 0.588539004325867],
  [0.56801301240921, 0.944564998149872],
  [0.681007981300354, 0.898285031318665],
  [0.733752012252808, 0.869701027870178],
  [0.633830010890961, 0.398822009563446],
  [0.606792986392975, 0.39553701877594],
  [0.589659988880157, 0.391062021255493],
  [0.805015981197357, 0.342108011245728],
  [0.611334979534149, 0.362284004688263],
  [0.634037971496582, 0.355970978736877],
  [0.656635999679565, 0.355356991291046],
  [0.681214988231659, 0.35834002494812],
  [0.698584973812103, 0.363156020641327],
  [0.941866993904114, 0.319076001644135],
  [0.698584973812103, 0.387449026107788],
  [0.584177017211914, 0.624107003211975],
  [0.554318010807037, 0.566076993942261],
  [0.534153997898102, 0.62064003944397],
  [0.711217999458313, 0.819975018501282],
  [0.664629995822906, 0.852871000766754],
  [0.559099972248077, 0.902631998062134],
  [0.871706008911133, 0.791940987110138],
  [0.591234028339386, 0.373893976211548],
  [0.544341027736664, 0.451583981513977],
  [0.624562978744507, 0.924192011356354],
  [0.88577002286911, 0.615028977394104],
  [0.551338016986847, 0.695277988910675],
  [0.551980018615723, 0.704632043838501],
  [0.552887976169586, 0.715808033943176],
  [0.555167973041534, 0.730794012546539],
  [0.569944024085999, 0.767035007476807],
  [0.593203008174896, 0.685675978660583],
  [0.599261999130249, 0.681069016456604],
  [0.607599973678589, 0.677703022956848],
  [0.631937980651855, 0.663500010967255],
  [0.752032995223999, 0.601315021514893],
  [0.547226011753082, 0.420395016670227],
  [0.563543975353241, 0.359827995300293],
  [0.583841025829315, 0.368713974952698],
  [0.586614012718201, 0.692366003990173],
  [0.771915018558502, 0.683578014373779],
  [0.531597018241882, 0.352482974529266],
  [0.588370978832245, 0.804440975189209],
  [0.52079701423645, 0.442565023899078],
  [0.567984998226166, 0.493479013442993],
  [0.543282985687256, 0.819254994392395],
  [0.655317008495331, 0.745514988899231],
  [0.621008992195129, 0.574018001556396],
  [0.625559985637665, 0.78031200170517],
  [0.680198013782501, 0.570719003677368],
  [0.64276397228241, 0.604337990283966],
  [0.704662978649139, 0.621529996395111],
  [0.552012026309967, 0.862591981887817],
  [0.589071989059448, 0.508637011051178],
  [0.685944974422455, 0.775357007980347],
  [0.645735025405884, 0.812640011310577],
  [0.675342977046967, 0.703978002071381],
  [0.810858011245728, 0.646304965019226],
  [0.72012197971344, 0.714666962623596],
  [0.866151988506317, 0.682704985141754],
  [0.663187026977539, 0.644596993923187],
  [0.570082008838654, 0.466325998306274],
  [0.544561982154846, 0.548375964164734],
  [0.562758982181549, 0.558784961700439],
  [0.531987011432648, 0.530140042304993],
  [0.585271000862122, 0.335177004337311],
  [0.622952997684479, 0.32277899980545],
  [0.655896008014679, 0.320163011550903],
  [0.687132000923157, 0.322345972061157],
  [0.716481983661652, 0.333200991153717],
  [0.758756995201111, 0.382786989212036],
  [0.897013008594513, 0.468769013881683],
  [0.732392013072968, 0.424547016620636],
  [0.70211398601532, 0.433162987232208],
  [0.66652500629425, 0.433866024017334],
  [0.633504986763, 0.426087975502014],
  [0.603875994682312, 0.416586995124817],
  [0.579657971858978, 0.409945011138916],
  [0.992439985275269, 0.480777025222778],
  [0.567192018032074, 0.569419980049133],
  [0.54136598110199, 0.478899002075195],
  [0.526564002037048, 0.546118021011353],
  [0.523913025856018, 0.563830018043518],
  [0.531529009342194, 0.555056989192963],
  [0.566035985946655, 0.582329034805298],
  [0.51631098985672, 0.563053965568542],
  [0.5174720287323, 0.577877044677734],
  [0.573594987392426, 0.389806985855103],
  [0.560697972774506, 0.395331978797913],
  [0.549755990505219, 0.399751007556915],
  [0.710287988185883, 0.368252992630005],
  [0.723330020904541, 0.363372981548309]
];
var TRI468 = [
  127,
  34,
  139,
  11,
  0,
  37,
  232,
  231,
  120,
  72,
  37,
  39,
  128,
  121,
  47,
  232,
  121,
  128,
  104,
  69,
  67,
  175,
  171,
  148,
  157,
  154,
  155,
  118,
  50,
  101,
  73,
  39,
  40,
  9,
  151,
  108,
  48,
  115,
  131,
  194,
  204,
  211,
  74,
  40,
  185,
  80,
  42,
  183,
  40,
  92,
  186,
  230,
  229,
  118,
  202,
  212,
  214,
  83,
  18,
  17,
  76,
  61,
  146,
  160,
  29,
  30,
  56,
  157,
  173,
  106,
  204,
  194,
  135,
  214,
  192,
  203,
  165,
  98,
  21,
  71,
  68,
  51,
  45,
  4,
  144,
  24,
  23,
  77,
  146,
  91,
  205,
  50,
  187,
  201,
  200,
  18,
  91,
  106,
  182,
  90,
  91,
  181,
  85,
  84,
  17,
  206,
  203,
  36,
  148,
  171,
  140,
  92,
  40,
  39,
  193,
  189,
  244,
  159,
  158,
  28,
  247,
  246,
  161,
  236,
  3,
  196,
  54,
  68,
  104,
  193,
  168,
  8,
  117,
  228,
  31,
  189,
  193,
  55,
  98,
  97,
  99,
  126,
  47,
  100,
  166,
  79,
  218,
  155,
  154,
  26,
  209,
  49,
  131,
  135,
  136,
  150,
  47,
  126,
  217,
  223,
  52,
  53,
  45,
  51,
  134,
  211,
  170,
  140,
  67,
  69,
  108,
  43,
  106,
  91,
  230,
  119,
  120,
  226,
  130,
  247,
  63,
  53,
  52,
  238,
  20,
  242,
  46,
  70,
  156,
  78,
  62,
  96,
  46,
  53,
  63,
  143,
  34,
  227,
  173,
  155,
  133,
  123,
  117,
  111,
  44,
  125,
  19,
  236,
  134,
  51,
  216,
  206,
  205,
  154,
  153,
  22,
  39,
  37,
  167,
  200,
  201,
  208,
  36,
  142,
  100,
  57,
  212,
  202,
  20,
  60,
  99,
  28,
  158,
  157,
  35,
  226,
  113,
  160,
  159,
  27,
  204,
  202,
  210,
  113,
  225,
  46,
  43,
  202,
  204,
  62,
  76,
  77,
  137,
  123,
  116,
  41,
  38,
  72,
  203,
  129,
  142,
  64,
  98,
  240,
  49,
  102,
  64,
  41,
  73,
  74,
  212,
  216,
  207,
  42,
  74,
  184,
  169,
  170,
  211,
  170,
  149,
  176,
  105,
  66,
  69,
  122,
  6,
  168,
  123,
  147,
  187,
  96,
  77,
  90,
  65,
  55,
  107,
  89,
  90,
  180,
  101,
  100,
  120,
  63,
  105,
  104,
  93,
  137,
  227,
  15,
  86,
  85,
  129,
  102,
  49,
  14,
  87,
  86,
  55,
  8,
  9,
  100,
  47,
  121,
  145,
  23,
  22,
  88,
  89,
  179,
  6,
  122,
  196,
  88,
  95,
  96,
  138,
  172,
  136,
  215,
  58,
  172,
  115,
  48,
  219,
  42,
  80,
  81,
  195,
  3,
  51,
  43,
  146,
  61,
  171,
  175,
  199,
  81,
  82,
  38,
  53,
  46,
  225,
  144,
  163,
  110,
  246,
  33,
  7,
  52,
  65,
  66,
  229,
  228,
  117,
  34,
  127,
  234,
  107,
  108,
  69,
  109,
  108,
  151,
  48,
  64,
  235,
  62,
  78,
  191,
  129,
  209,
  126,
  111,
  35,
  143,
  163,
  161,
  246,
  117,
  123,
  50,
  222,
  65,
  52,
  19,
  125,
  141,
  221,
  55,
  65,
  3,
  195,
  197,
  25,
  7,
  33,
  220,
  237,
  44,
  70,
  71,
  139,
  122,
  193,
  245,
  247,
  130,
  33,
  71,
  21,
  162,
  153,
  158,
  159,
  170,
  169,
  150,
  188,
  174,
  196,
  216,
  186,
  92,
  144,
  160,
  161,
  2,
  97,
  167,
  141,
  125,
  241,
  164,
  167,
  37,
  72,
  38,
  12,
  145,
  159,
  160,
  38,
  82,
  13,
  63,
  68,
  71,
  226,
  35,
  111,
  158,
  153,
  154,
  101,
  50,
  205,
  206,
  92,
  165,
  209,
  198,
  217,
  165,
  167,
  97,
  220,
  115,
  218,
  133,
  112,
  243,
  239,
  238,
  241,
  214,
  135,
  169,
  190,
  173,
  133,
  171,
  208,
  32,
  125,
  44,
  237,
  86,
  87,
  178,
  85,
  86,
  179,
  84,
  85,
  180,
  83,
  84,
  181,
  201,
  83,
  182,
  137,
  93,
  132,
  76,
  62,
  183,
  61,
  76,
  184,
  57,
  61,
  185,
  212,
  57,
  186,
  214,
  207,
  187,
  34,
  143,
  156,
  79,
  239,
  237,
  123,
  137,
  177,
  44,
  1,
  4,
  201,
  194,
  32,
  64,
  102,
  129,
  213,
  215,
  138,
  59,
  166,
  219,
  242,
  99,
  97,
  2,
  94,
  141,
  75,
  59,
  235,
  24,
  110,
  228,
  25,
  130,
  226,
  23,
  24,
  229,
  22,
  23,
  230,
  26,
  22,
  231,
  112,
  26,
  232,
  189,
  190,
  243,
  221,
  56,
  190,
  28,
  56,
  221,
  27,
  28,
  222,
  29,
  27,
  223,
  30,
  29,
  224,
  247,
  30,
  225,
  238,
  79,
  20,
  166,
  59,
  75,
  60,
  75,
  240,
  147,
  177,
  215,
  20,
  79,
  166,
  187,
  147,
  213,
  112,
  233,
  244,
  233,
  128,
  245,
  128,
  114,
  188,
  114,
  217,
  174,
  131,
  115,
  220,
  217,
  198,
  236,
  198,
  131,
  134,
  177,
  132,
  58,
  143,
  35,
  124,
  110,
  163,
  7,
  228,
  110,
  25,
  356,
  389,
  368,
  11,
  302,
  267,
  452,
  350,
  349,
  302,
  303,
  269,
  357,
  343,
  277,
  452,
  453,
  357,
  333,
  332,
  297,
  175,
  152,
  377,
  384,
  398,
  382,
  347,
  348,
  330,
  303,
  304,
  270,
  9,
  336,
  337,
  278,
  279,
  360,
  418,
  262,
  431,
  304,
  408,
  409,
  310,
  415,
  407,
  270,
  409,
  410,
  450,
  348,
  347,
  422,
  430,
  434,
  313,
  314,
  17,
  306,
  307,
  375,
  387,
  388,
  260,
  286,
  414,
  398,
  335,
  406,
  418,
  364,
  367,
  416,
  423,
  358,
  327,
  251,
  284,
  298,
  281,
  5,
  4,
  373,
  374,
  253,
  307,
  320,
  321,
  425,
  427,
  411,
  421,
  313,
  18,
  321,
  405,
  406,
  320,
  404,
  405,
  315,
  16,
  17,
  426,
  425,
  266,
  377,
  400,
  369,
  322,
  391,
  269,
  417,
  465,
  464,
  386,
  257,
  258,
  466,
  260,
  388,
  456,
  399,
  419,
  284,
  332,
  333,
  417,
  285,
  8,
  346,
  340,
  261,
  413,
  441,
  285,
  327,
  460,
  328,
  355,
  371,
  329,
  392,
  439,
  438,
  382,
  341,
  256,
  429,
  420,
  360,
  364,
  394,
  379,
  277,
  343,
  437,
  443,
  444,
  283,
  275,
  440,
  363,
  431,
  262,
  369,
  297,
  338,
  337,
  273,
  375,
  321,
  450,
  451,
  349,
  446,
  342,
  467,
  293,
  334,
  282,
  458,
  461,
  462,
  276,
  353,
  383,
  308,
  324,
  325,
  276,
  300,
  293,
  372,
  345,
  447,
  382,
  398,
  362,
  352,
  345,
  340,
  274,
  1,
  19,
  456,
  248,
  281,
  436,
  427,
  425,
  381,
  256,
  252,
  269,
  391,
  393,
  200,
  199,
  428,
  266,
  330,
  329,
  287,
  273,
  422,
  250,
  462,
  328,
  258,
  286,
  384,
  265,
  353,
  342,
  387,
  259,
  257,
  424,
  431,
  430,
  342,
  353,
  276,
  273,
  335,
  424,
  292,
  325,
  307,
  366,
  447,
  345,
  271,
  303,
  302,
  423,
  266,
  371,
  294,
  455,
  460,
  279,
  278,
  294,
  271,
  272,
  304,
  432,
  434,
  427,
  272,
  407,
  408,
  394,
  430,
  431,
  395,
  369,
  400,
  334,
  333,
  299,
  351,
  417,
  168,
  352,
  280,
  411,
  325,
  319,
  320,
  295,
  296,
  336,
  319,
  403,
  404,
  330,
  348,
  349,
  293,
  298,
  333,
  323,
  454,
  447,
  15,
  16,
  315,
  358,
  429,
  279,
  14,
  15,
  316,
  285,
  336,
  9,
  329,
  349,
  350,
  374,
  380,
  252,
  318,
  402,
  403,
  6,
  197,
  419,
  318,
  319,
  325,
  367,
  364,
  365,
  435,
  367,
  397,
  344,
  438,
  439,
  272,
  271,
  311,
  195,
  5,
  281,
  273,
  287,
  291,
  396,
  428,
  199,
  311,
  271,
  268,
  283,
  444,
  445,
  373,
  254,
  339,
  263,
  466,
  249,
  282,
  334,
  296,
  449,
  347,
  346,
  264,
  447,
  454,
  336,
  296,
  299,
  338,
  10,
  151,
  278,
  439,
  455,
  292,
  407,
  415,
  358,
  371,
  355,
  340,
  345,
  372,
  390,
  249,
  466,
  346,
  347,
  280,
  442,
  443,
  282,
  19,
  94,
  370,
  441,
  442,
  295,
  248,
  419,
  197,
  263,
  255,
  359,
  440,
  275,
  274,
  300,
  383,
  368,
  351,
  412,
  465,
  263,
  467,
  466,
  301,
  368,
  389,
  380,
  374,
  386,
  395,
  378,
  379,
  412,
  351,
  419,
  436,
  426,
  322,
  373,
  390,
  388,
  2,
  164,
  393,
  370,
  462,
  461,
  164,
  0,
  267,
  302,
  11,
  12,
  374,
  373,
  387,
  268,
  12,
  13,
  293,
  300,
  301,
  446,
  261,
  340,
  385,
  384,
  381,
  330,
  266,
  425,
  426,
  423,
  391,
  429,
  355,
  437,
  391,
  327,
  326,
  440,
  457,
  438,
  341,
  382,
  362,
  459,
  457,
  461,
  434,
  430,
  394,
  414,
  463,
  362,
  396,
  369,
  262,
  354,
  461,
  457,
  316,
  403,
  402,
  315,
  404,
  403,
  314,
  405,
  404,
  313,
  406,
  405,
  421,
  418,
  406,
  366,
  401,
  361,
  306,
  408,
  407,
  291,
  409,
  408,
  287,
  410,
  409,
  432,
  436,
  410,
  434,
  416,
  411,
  264,
  368,
  383,
  309,
  438,
  457,
  352,
  376,
  401,
  274,
  275,
  4,
  421,
  428,
  262,
  294,
  327,
  358,
  433,
  416,
  367,
  289,
  455,
  439,
  462,
  370,
  326,
  2,
  326,
  370,
  305,
  460,
  455,
  254,
  449,
  448,
  255,
  261,
  446,
  253,
  450,
  449,
  252,
  451,
  450,
  256,
  452,
  451,
  341,
  453,
  452,
  413,
  464,
  463,
  441,
  413,
  414,
  258,
  442,
  441,
  257,
  443,
  442,
  259,
  444,
  443,
  260,
  445,
  444,
  467,
  342,
  445,
  459,
  458,
  250,
  289,
  392,
  290,
  290,
  328,
  460,
  376,
  433,
  435,
  250,
  290,
  392,
  411,
  416,
  433,
  341,
  463,
  464,
  453,
  464,
  465,
  357,
  465,
  412,
  343,
  412,
  399,
  360,
  363,
  440,
  437,
  399,
  456,
  420,
  456,
  363,
  401,
  435,
  288,
  372,
  383,
  353,
  339,
  255,
  249,
  448,
  261,
  255,
  133,
  243,
  190,
  133,
  155,
  112,
  33,
  246,
  247,
  33,
  130,
  25,
  398,
  384,
  286,
  362,
  398,
  414,
  362,
  463,
  341,
  263,
  359,
  467,
  263,
  249,
  255,
  466,
  467,
  260,
  75,
  60,
  166,
  238,
  239,
  79,
  162,
  127,
  139,
  72,
  11,
  37,
  121,
  232,
  120,
  73,
  72,
  39,
  114,
  128,
  47,
  233,
  232,
  128,
  103,
  104,
  67,
  152,
  175,
  148,
  173,
  157,
  155,
  119,
  118,
  101,
  74,
  73,
  40,
  107,
  9,
  108,
  49,
  48,
  131,
  32,
  194,
  211,
  184,
  74,
  185,
  191,
  80,
  183,
  185,
  40,
  186,
  119,
  230,
  118,
  210,
  202,
  214,
  84,
  83,
  17,
  77,
  76,
  146,
  161,
  160,
  30,
  190,
  56,
  173,
  182,
  106,
  194,
  138,
  135,
  192,
  129,
  203,
  98,
  54,
  21,
  68,
  5,
  51,
  4,
  145,
  144,
  23,
  90,
  77,
  91,
  207,
  205,
  187,
  83,
  201,
  18,
  181,
  91,
  182,
  180,
  90,
  181,
  16,
  85,
  17,
  205,
  206,
  36,
  176,
  148,
  140,
  165,
  92,
  39,
  245,
  193,
  244,
  27,
  159,
  28,
  30,
  247,
  161,
  174,
  236,
  196,
  103,
  54,
  104,
  55,
  193,
  8,
  111,
  117,
  31,
  221,
  189,
  55,
  240,
  98,
  99,
  142,
  126,
  100,
  219,
  166,
  218,
  112,
  155,
  26,
  198,
  209,
  131,
  169,
  135,
  150,
  114,
  47,
  217,
  224,
  223,
  53,
  220,
  45,
  134,
  32,
  211,
  140,
  109,
  67,
  108,
  146,
  43,
  91,
  231,
  230,
  120,
  113,
  226,
  247,
  105,
  63,
  52,
  241,
  238,
  242,
  124,
  46,
  156,
  95,
  78,
  96,
  70,
  46,
  63,
  116,
  143,
  227,
  116,
  123,
  111,
  1,
  44,
  19,
  3,
  236,
  51,
  207,
  216,
  205,
  26,
  154,
  22,
  165,
  39,
  167,
  199,
  200,
  208,
  101,
  36,
  100,
  43,
  57,
  202,
  242,
  20,
  99,
  56,
  28,
  157,
  124,
  35,
  113,
  29,
  160,
  27,
  211,
  204,
  210,
  124,
  113,
  46,
  106,
  43,
  204,
  96,
  62,
  77,
  227,
  137,
  116,
  73,
  41,
  72,
  36,
  203,
  142,
  235,
  64,
  240,
  48,
  49,
  64,
  42,
  41,
  74,
  214,
  212,
  207,
  183,
  42,
  184,
  210,
  169,
  211,
  140,
  170,
  176,
  104,
  105,
  69,
  193,
  122,
  168,
  50,
  123,
  187,
  89,
  96,
  90,
  66,
  65,
  107,
  179,
  89,
  180,
  119,
  101,
  120,
  68,
  63,
  104,
  234,
  93,
  227,
  16,
  15,
  85,
  209,
  129,
  49,
  15,
  14,
  86,
  107,
  55,
  9,
  120,
  100,
  121,
  153,
  145,
  22,
  178,
  88,
  179,
  197,
  6,
  196,
  89,
  88,
  96,
  135,
  138,
  136,
  138,
  215,
  172,
  218,
  115,
  219,
  41,
  42,
  81,
  5,
  195,
  51,
  57,
  43,
  61,
  208,
  171,
  199,
  41,
  81,
  38,
  224,
  53,
  225,
  24,
  144,
  110,
  105,
  52,
  66,
  118,
  229,
  117,
  227,
  34,
  234,
  66,
  107,
  69,
  10,
  109,
  151,
  219,
  48,
  235,
  183,
  62,
  191,
  142,
  129,
  126,
  116,
  111,
  143,
  7,
  163,
  246,
  118,
  117,
  50,
  223,
  222,
  52,
  94,
  19,
  141,
  222,
  221,
  65,
  196,
  3,
  197,
  45,
  220,
  44,
  156,
  70,
  139,
  188,
  122,
  245,
  139,
  71,
  162,
  145,
  153,
  159,
  149,
  170,
  150,
  122,
  188,
  196,
  206,
  216,
  92,
  163,
  144,
  161,
  164,
  2,
  167,
  242,
  141,
  241,
  0,
  164,
  37,
  11,
  72,
  12,
  144,
  145,
  160,
  12,
  38,
  13,
  70,
  63,
  71,
  31,
  226,
  111,
  157,
  158,
  154,
  36,
  101,
  205,
  203,
  206,
  165,
  126,
  209,
  217,
  98,
  165,
  97,
  237,
  220,
  218,
  237,
  239,
  241,
  210,
  214,
  169,
  140,
  171,
  32,
  241,
  125,
  237,
  179,
  86,
  178,
  180,
  85,
  179,
  181,
  84,
  180,
  182,
  83,
  181,
  194,
  201,
  182,
  177,
  137,
  132,
  184,
  76,
  183,
  185,
  61,
  184,
  186,
  57,
  185,
  216,
  212,
  186,
  192,
  214,
  187,
  139,
  34,
  156,
  218,
  79,
  237,
  147,
  123,
  177,
  45,
  44,
  4,
  208,
  201,
  32,
  98,
  64,
  129,
  192,
  213,
  138,
  235,
  59,
  219,
  141,
  242,
  97,
  97,
  2,
  141,
  240,
  75,
  235,
  229,
  24,
  228,
  31,
  25,
  226,
  230,
  23,
  229,
  231,
  22,
  230,
  232,
  26,
  231,
  233,
  112,
  232,
  244,
  189,
  243,
  189,
  221,
  190,
  222,
  28,
  221,
  223,
  27,
  222,
  224,
  29,
  223,
  225,
  30,
  224,
  113,
  247,
  225,
  99,
  60,
  240,
  213,
  147,
  215,
  60,
  20,
  166,
  192,
  187,
  213,
  243,
  112,
  244,
  244,
  233,
  245,
  245,
  128,
  188,
  188,
  114,
  174,
  134,
  131,
  220,
  174,
  217,
  236,
  236,
  198,
  134,
  215,
  177,
  58,
  156,
  143,
  124,
  25,
  110,
  7,
  31,
  228,
  25,
  264,
  356,
  368,
  0,
  11,
  267,
  451,
  452,
  349,
  267,
  302,
  269,
  350,
  357,
  277,
  350,
  452,
  357,
  299,
  333,
  297,
  396,
  175,
  377,
  381,
  384,
  382,
  280,
  347,
  330,
  269,
  303,
  270,
  151,
  9,
  337,
  344,
  278,
  360,
  424,
  418,
  431,
  270,
  304,
  409,
  272,
  310,
  407,
  322,
  270,
  410,
  449,
  450,
  347,
  432,
  422,
  434,
  18,
  313,
  17,
  291,
  306,
  375,
  259,
  387,
  260,
  424,
  335,
  418,
  434,
  364,
  416,
  391,
  423,
  327,
  301,
  251,
  298,
  275,
  281,
  4,
  254,
  373,
  253,
  375,
  307,
  321,
  280,
  425,
  411,
  200,
  421,
  18,
  335,
  321,
  406,
  321,
  320,
  405,
  314,
  315,
  17,
  423,
  426,
  266,
  396,
  377,
  369,
  270,
  322,
  269,
  413,
  417,
  464,
  385,
  386,
  258,
  248,
  456,
  419,
  298,
  284,
  333,
  168,
  417,
  8,
  448,
  346,
  261,
  417,
  413,
  285,
  326,
  327,
  328,
  277,
  355,
  329,
  309,
  392,
  438,
  381,
  382,
  256,
  279,
  429,
  360,
  365,
  364,
  379,
  355,
  277,
  437,
  282,
  443,
  283,
  281,
  275,
  363,
  395,
  431,
  369,
  299,
  297,
  337,
  335,
  273,
  321,
  348,
  450,
  349,
  359,
  446,
  467,
  283,
  293,
  282,
  250,
  458,
  462,
  300,
  276,
  383,
  292,
  308,
  325,
  283,
  276,
  293,
  264,
  372,
  447,
  346,
  352,
  340,
  354,
  274,
  19,
  363,
  456,
  281,
  426,
  436,
  425,
  380,
  381,
  252,
  267,
  269,
  393,
  421,
  200,
  428,
  371,
  266,
  329,
  432,
  287,
  422,
  290,
  250,
  328,
  385,
  258,
  384,
  446,
  265,
  342,
  386,
  387,
  257,
  422,
  424,
  430,
  445,
  342,
  276,
  422,
  273,
  424,
  306,
  292,
  307,
  352,
  366,
  345,
  268,
  271,
  302,
  358,
  423,
  371,
  327,
  294,
  460,
  331,
  279,
  294,
  303,
  271,
  304,
  436,
  432,
  427,
  304,
  272,
  408,
  395,
  394,
  431,
  378,
  395,
  400,
  296,
  334,
  299,
  6,
  351,
  168,
  376,
  352,
  411,
  307,
  325,
  320,
  285,
  295,
  336,
  320,
  319,
  404,
  329,
  330,
  349,
  334,
  293,
  333,
  366,
  323,
  447,
  316,
  15,
  315,
  331,
  358,
  279,
  317,
  14,
  316,
  8,
  285,
  9,
  277,
  329,
  350,
  253,
  374,
  252,
  319,
  318,
  403,
  351,
  6,
  419,
  324,
  318,
  325,
  397,
  367,
  365,
  288,
  435,
  397,
  278,
  344,
  439,
  310,
  272,
  311,
  248,
  195,
  281,
  375,
  273,
  291,
  175,
  396,
  199,
  312,
  311,
  268,
  276,
  283,
  445,
  390,
  373,
  339,
  295,
  282,
  296,
  448,
  449,
  346,
  356,
  264,
  454,
  337,
  336,
  299,
  337,
  338,
  151,
  294,
  278,
  455,
  308,
  292,
  415,
  429,
  358,
  355,
  265,
  340,
  372,
  388,
  390,
  466,
  352,
  346,
  280,
  295,
  442,
  282,
  354,
  19,
  370,
  285,
  441,
  295,
  195,
  248,
  197,
  457,
  440,
  274,
  301,
  300,
  368,
  417,
  351,
  465,
  251,
  301,
  389,
  385,
  380,
  386,
  394,
  395,
  379,
  399,
  412,
  419,
  410,
  436,
  322,
  387,
  373,
  388,
  326,
  2,
  393,
  354,
  370,
  461,
  393,
  164,
  267,
  268,
  302,
  12,
  386,
  374,
  387,
  312,
  268,
  13,
  298,
  293,
  301,
  265,
  446,
  340,
  380,
  385,
  381,
  280,
  330,
  425,
  322,
  426,
  391,
  420,
  429,
  437,
  393,
  391,
  326,
  344,
  440,
  438,
  458,
  459,
  461,
  364,
  434,
  394,
  428,
  396,
  262,
  274,
  354,
  457,
  317,
  316,
  402,
  316,
  315,
  403,
  315,
  314,
  404,
  314,
  313,
  405,
  313,
  421,
  406,
  323,
  366,
  361,
  292,
  306,
  407,
  306,
  291,
  408,
  291,
  287,
  409,
  287,
  432,
  410,
  427,
  434,
  411,
  372,
  264,
  383,
  459,
  309,
  457,
  366,
  352,
  401,
  1,
  274,
  4,
  418,
  421,
  262,
  331,
  294,
  358,
  435,
  433,
  367,
  392,
  289,
  439,
  328,
  462,
  326,
  94,
  2,
  370,
  289,
  305,
  455,
  339,
  254,
  448,
  359,
  255,
  446,
  254,
  253,
  449,
  253,
  252,
  450,
  252,
  256,
  451,
  256,
  341,
  452,
  414,
  413,
  463,
  286,
  441,
  414,
  286,
  258,
  441,
  258,
  257,
  442,
  257,
  259,
  443,
  259,
  260,
  444,
  260,
  467,
  445,
  309,
  459,
  250,
  305,
  289,
  290,
  305,
  290,
  460,
  401,
  376,
  435,
  309,
  250,
  392,
  376,
  411,
  433,
  453,
  341,
  464,
  357,
  453,
  465,
  343,
  357,
  412,
  437,
  343,
  399,
  344,
  360,
  440,
  420,
  437,
  456,
  360,
  420,
  363,
  361,
  401,
  288,
  265,
  372,
  353,
  390,
  339,
  249,
  339,
  448,
  255
];
var VTX68 = [
  /* cont  */
  127,
  234,
  132,
  58,
  172,
  150,
  149,
  148,
  152,
  377,
  378,
  379,
  397,
  288,
  361,
  454,
  356,
  /* brows */
  70,
  63,
  105,
  66,
  107,
  336,
  296,
  334,
  293,
  300,
  /* nose  */
  168,
  6,
  195,
  4,
  98,
  97,
  2,
  326,
  327,
  /* eyes  */
  33,
  160,
  158,
  133,
  153,
  144,
  362,
  385,
  387,
  263,
  373,
  380,
  /* lip   */
  57,
  40,
  37,
  0,
  267,
  270,
  287,
  321,
  314,
  17,
  84,
  91,
  /* mouth */
  78,
  81,
  13,
  311,
  308,
  402,
  14,
  178
];
var VTX33 = [33, 133, 362, 263, 1, 62, 308, 159, 145, 386, 374, 6, 102, 331, 2, 13, 14, 70, 105, 107, 336, 334, 300, 54, 10, 284, 50, 280, 234, 454, 58, 288, 152];
var VTX7 = [33, 133, 362, 263, 1, 78, 308];
var UV68 = VTX68.map((x) => UV468[x]);
var UV33 = VTX33.map((x) => UV468[x]);
var UV7 = VTX7.map((x) => UV468[x]);
function connectionsToIndices(connections) {
  const indices = connections.map((connection) => connection[0]);
  indices.push(connections[connections.length - 1][1]);
  return indices;
}
var pairsLips = [
  [61, 146],
  [146, 91],
  [91, 181],
  [181, 84],
  [84, 17],
  [17, 314],
  [314, 405],
  [405, 321],
  [321, 375],
  [375, 291],
  [61, 185],
  [185, 40],
  [40, 39],
  [39, 37],
  [37, 0],
  [0, 267],
  [267, 269],
  [269, 270],
  [270, 409],
  [409, 291],
  [78, 95],
  [95, 88],
  [88, 178],
  [178, 87],
  [87, 14],
  [14, 317],
  [317, 402],
  [402, 318],
  [318, 324],
  [324, 308],
  [78, 191],
  [191, 80],
  [80, 81],
  [81, 82],
  [82, 13],
  [13, 312],
  [312, 311],
  [311, 310],
  [310, 415],
  [415, 308]
];
var pairsLeftEye = [[263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [386, 385], [385, 384], [384, 398], [398, 362]];
var pairsLeftEyebrow = [[276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]];
var pairsLeftIris = [[474, 475], [475, 476], [476, 477], [477, 474]];
var pairsRightEye = [[33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]];
var pairsRightEyebrow = [[46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]];
var pairsRightIris = [[469, 470], [470, 471], [471, 472], [472, 469]];
var pairsFaceContour = [
  [10, 338],
  [338, 297],
  [297, 332],
  [332, 284],
  [284, 251],
  [251, 389],
  [389, 356],
  [356, 454],
  [454, 323],
  [323, 361],
  [361, 288],
  [288, 397],
  [397, 365],
  [365, 379],
  [379, 378],
  [378, 400],
  [400, 377],
  [377, 152],
  [152, 148],
  [148, 176],
  [176, 149],
  [149, 150],
  [150, 136],
  [136, 172],
  [172, 58],
  [58, 132],
  [132, 93],
  [93, 234],
  [234, 127],
  [127, 162],
  [162, 21],
  [21, 54],
  [54, 103],
  [103, 67],
  [67, 109],
  [109, 10]
];
var contourKeypoints = {
  lips: connectionsToIndices(pairsLips),
  leftEye: connectionsToIndices(pairsLeftEye),
  leftEyebrow: connectionsToIndices(pairsLeftEyebrow),
  leftIris: connectionsToIndices(pairsLeftIris),
  rightEye: connectionsToIndices(pairsRightEye),
  rightEyebrow: connectionsToIndices(pairsRightEyebrow),
  rightIris: connectionsToIndices(pairsRightIris),
  faceOval: connectionsToIndices(pairsFaceContour)
};

// src/face/constants.ts
var LIPS_CONNECTIONS = [
  [61, 146],
  [146, 91],
  [91, 181],
  [181, 84],
  [84, 17],
  [17, 314],
  [314, 405],
  [405, 321],
  [321, 375],
  [375, 291],
  [61, 185],
  [185, 40],
  [40, 39],
  [39, 37],
  [37, 0],
  [0, 267],
  [267, 269],
  [269, 270],
  [270, 409],
  [409, 291],
  [78, 95],
  [95, 88],
  [88, 178],
  [178, 87],
  [87, 14],
  [14, 317],
  [317, 402],
  [402, 318],
  [318, 324],
  [324, 308],
  [78, 191],
  [191, 80],
  [80, 81],
  [81, 82],
  [82, 13],
  [13, 312],
  [312, 311],
  [311, 310],
  [310, 415],
  [415, 308]
];
var LEFT_EYE_CONNECTIONS = [[263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [386, 385], [385, 384], [384, 398], [398, 362]];
var LEFT_EYEBROW_CONNECTIONS = [[276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]];
var LEFT_IRIS_CONNECTIONS = [[474, 475], [475, 476], [476, 477], [477, 474]];
var RIGHT_EYE_CONNECTIONS = [[33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]];
var RIGHT_EYEBROW_CONNECTIONS = [[46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]];
var RIGHT_IRIS_CONNECTIONS = [[469, 470], [470, 471], [471, 472], [472, 469]];
var FACE_OVAL_CONNECTIONS = [
  [10, 338],
  [338, 297],
  [297, 332],
  [332, 284],
  [284, 251],
  [251, 389],
  [389, 356],
  [356, 454],
  [454, 323],
  [323, 361],
  [361, 288],
  [288, 397],
  [397, 365],
  [365, 379],
  [379, 378],
  [378, 400],
  [400, 377],
  [377, 152],
  [152, 148],
  [148, 176],
  [176, 149],
  [149, 150],
  [150, 136],
  [136, 172],
  [172, 58],
  [58, 132],
  [132, 93],
  [93, 234],
  [234, 127],
  [127, 162],
  [162, 21],
  [21, 54],
  [54, 103],
  [103, 67],
  [67, 109],
  [109, 10]
];
function connectionsToIndices2(connections) {
  const indices = connections.map((connection) => connection[0]);
  indices.push(connections[connections.length - 1][1]);
  return indices;
}
var MEDIAPIPE_FACE_MESH_KEYPOINTS_BY_CONTOUR = {
  lips: connectionsToIndices2(LIPS_CONNECTIONS),
  leftEye: connectionsToIndices2(LEFT_EYE_CONNECTIONS),
  leftEyebrow: connectionsToIndices2(LEFT_EYEBROW_CONNECTIONS),
  leftIris: connectionsToIndices2(LEFT_IRIS_CONNECTIONS),
  rightEye: connectionsToIndices2(RIGHT_EYE_CONNECTIONS),
  rightEyebrow: connectionsToIndices2(RIGHT_EYEBROW_CONNECTIONS),
  rightIris: connectionsToIndices2(RIGHT_IRIS_CONNECTIONS),
  faceOval: connectionsToIndices2(FACE_OVAL_CONNECTIONS)
};
var indexLabelPairs = Object.entries(MEDIAPIPE_FACE_MESH_KEYPOINTS_BY_CONTOUR).map(([label, indices]) => indices.map((index2) => [index2, label])).flat();
var MEDIAPIPE_FACE_MESH_KEYPOINTS = new Map(indexLabelPairs);
var LANDMARKS_REFINEMENT_LIPS_CONFIG = [
  61,
  146,
  91,
  181,
  84,
  17,
  314,
  405,
  321,
  375,
  291,
  // Lower outer.
  185,
  40,
  39,
  37,
  0,
  267,
  269,
  270,
  409,
  // Upper outer(excluding corners).
  78,
  95,
  88,
  178,
  87,
  14,
  317,
  402,
  318,
  324,
  308,
  // Lower inner.
  191,
  80,
  81,
  82,
  13,
  312,
  311,
  310,
  415,
  // Upper inner(excluding corners).
  76,
  77,
  90,
  180,
  85,
  16,
  315,
  404,
  320,
  307,
  306,
  // Lower semi - outer.
  184,
  74,
  73,
  72,
  11,
  302,
  303,
  304,
  408,
  // Upper semi - outer(excluding corners).
  62,
  96,
  89,
  179,
  86,
  15,
  316,
  403,
  319,
  325,
  292,
  // Lower semi - inner.
  183,
  42,
  41,
  38,
  12,
  268,
  271,
  272,
  407
  // Upper semi - inner(excluding corners).
];
var LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG = [
  33,
  7,
  163,
  144,
  145,
  153,
  154,
  155,
  133,
  // Lower contour.
  246,
  161,
  160,
  159,
  158,
  157,
  173,
  // upper contour (excluding corners).
  130,
  25,
  110,
  24,
  23,
  22,
  26,
  112,
  243,
  // Halo x2 lower contour.
  247,
  30,
  29,
  27,
  28,
  56,
  190,
  // Halo x2 upper contour (excluding corners).
  226,
  31,
  228,
  229,
  230,
  231,
  232,
  233,
  244,
  // Halo x3 lower contour.
  113,
  225,
  224,
  223,
  222,
  221,
  189,
  // Halo x3 upper contour (excluding corners).
  35,
  124,
  46,
  53,
  52,
  65,
  // Halo x4 upper contour (no lower because of mesh structure) or eyebrow inner contour.
  143,
  111,
  117,
  118,
  119,
  120,
  121,
  128,
  245,
  // Halo x5 lower contour.
  156,
  70,
  63,
  105,
  66,
  107,
  55,
  193
  // Halo x5 upper contour (excluding corners) or eyebrow outer contour.
];
var LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG = [
  263,
  249,
  390,
  373,
  374,
  380,
  381,
  382,
  362,
  // Lower contour.
  466,
  388,
  387,
  386,
  385,
  384,
  398,
  // Upper contour (excluding corners).
  359,
  255,
  339,
  254,
  253,
  252,
  256,
  341,
  463,
  // Halo x2 lower contour.
  467,
  260,
  259,
  257,
  258,
  286,
  414,
  // Halo x2 upper contour (excluding corners).
  446,
  261,
  448,
  449,
  450,
  451,
  452,
  453,
  464,
  // Halo x3 lower contour.
  342,
  445,
  444,
  443,
  442,
  441,
  413,
  // Halo x3 upper contour (excluding corners).
  265,
  353,
  276,
  283,
  282,
  295,
  // Halo x4 upper contour (no lower because of mesh structure) or/ eyebrow inner contour.
  372,
  340,
  346,
  347,
  348,
  349,
  350,
  357,
  465,
  // Halo x5 lower contour.
  383,
  300,
  293,
  334,
  296,
  336,
  285,
  417
  // Halo x5 upper contour (excluding corners) or eyebrow outer contour.
];

// src/draw/face.ts
var localOptions;
function drawLabels(f, ctx) {
  var _a, _b, _c2, _d2, _e, _f2, _g2, _h2, _i;
  if (!localOptions.drawLabels || ((_a = localOptions.faceLabels) == null ? void 0 : _a.length) === 0)
    return;
  let l = localOptions.faceLabels.slice();
  l = replace(l, "[id]", f.id.toFixed(0));
  if (f.score)
    l = replace(l, "[score]", 100 * f.score);
  if (f.gender)
    l = replace(l, "[gender]", f.gender);
  if (f.genderScore)
    l = replace(l, "[genderScore]", 100 * f.genderScore);
  if (f.age)
    l = replace(l, "[age]", f.age);
  if (f.distance)
    l = replace(l, "[distance]", 100 * f.distance);
  if (f.real)
    l = replace(l, "[real]", 100 * f.real);
  if (f.live)
    l = replace(l, "[live]", 100 * f.live);
  if (f.emotion && f.emotion.length > 0) {
    const emotion2 = f.emotion.map((a) => `${Math.trunc(100 * a.score)}% ${a.emotion}`);
    if (emotion2.length > 3)
      emotion2.length = 3;
    l = replace(l, "[emotions]", emotion2.join(" "));
  }
  if ((_c2 = (_b = f.rotation) == null ? void 0 : _b.angle) == null ? void 0 : _c2.roll)
    l = replace(l, "[roll]", rad2deg(f.rotation.angle.roll));
  if ((_e = (_d2 = f.rotation) == null ? void 0 : _d2.angle) == null ? void 0 : _e.yaw)
    l = replace(l, "[yaw]", rad2deg(f.rotation.angle.yaw));
  if ((_g2 = (_f2 = f.rotation) == null ? void 0 : _f2.angle) == null ? void 0 : _g2.pitch)
    l = replace(l, "[pitch]", rad2deg(f.rotation.angle.pitch));
  if ((_i = (_h2 = f.rotation) == null ? void 0 : _h2.gaze) == null ? void 0 : _i.bearing)
    l = replace(l, "[gaze]", rad2deg(f.rotation.gaze.bearing));
  labels(ctx, l, f.box[0], f.box[1], localOptions);
}
function drawIrisElipse(f, ctx) {
  var _a, _b, _c2, _d2;
  if (((_a = f.annotations) == null ? void 0 : _a.leftEyeIris) && ((_b = f.annotations) == null ? void 0 : _b.leftEyeIris[0])) {
    ctx.strokeStyle = localOptions.useDepth ? "rgba(255, 200, 255, 0.3)" : localOptions.color;
    ctx.beginPath();
    const sizeX = Math.abs(f.annotations.leftEyeIris[3][0] - f.annotations.leftEyeIris[1][0]) / 2;
    const sizeY = Math.abs(f.annotations.leftEyeIris[4][1] - f.annotations.leftEyeIris[2][1]) / 2;
    ctx.ellipse(f.annotations.leftEyeIris[0][0], f.annotations.leftEyeIris[0][1], sizeX, sizeY, 0, 0, 2 * Math.PI);
    ctx.stroke();
    if (localOptions.fillPolygons) {
      ctx.fillStyle = localOptions.useDepth ? "rgba(255, 255, 200, 0.3)" : localOptions.color;
      ctx.fill();
    }
  }
  if (((_c2 = f.annotations) == null ? void 0 : _c2.rightEyeIris) && ((_d2 = f.annotations) == null ? void 0 : _d2.rightEyeIris[0])) {
    ctx.strokeStyle = localOptions.useDepth ? "rgba(255, 200, 255, 0.3)" : localOptions.color;
    ctx.beginPath();
    const sizeX = Math.abs(f.annotations.rightEyeIris[3][0] - f.annotations.rightEyeIris[1][0]) / 2;
    const sizeY = Math.abs(f.annotations.rightEyeIris[4][1] - f.annotations.rightEyeIris[2][1]) / 2;
    ctx.ellipse(f.annotations.rightEyeIris[0][0], f.annotations.rightEyeIris[0][1], sizeX, sizeY, 0, 0, 2 * Math.PI);
    ctx.stroke();
    if (localOptions.fillPolygons) {
      ctx.fillStyle = localOptions.useDepth ? "rgba(255, 255, 200, 0.3)" : localOptions.color;
      ctx.fill();
    }
  }
}
function drawGazeSpheres(f, ctx) {
  var _a;
  if (localOptions.drawGaze && ((_a = f.rotation) == null ? void 0 : _a.angle) && typeof Path2D !== "undefined") {
    ctx.strokeStyle = "pink";
    const valX = f.box[0] + f.box[2] / 2 - f.box[3] * rad2deg(f.rotation.angle.yaw) / 90;
    const valY = f.box[1] + f.box[3] / 2 + f.box[2] * rad2deg(f.rotation.angle.pitch) / 90;
    const pathV = new Path2D(`
      M ${f.box[0] + f.box[2] / 2} ${f.box[1]}
      C
        ${valX} ${f.box[1]},
        ${valX} ${f.box[1] + f.box[3]},
        ${f.box[0] + f.box[2] / 2} ${f.box[1] + f.box[3]}
    `);
    const pathH = new Path2D(`
      M ${f.box[0]} ${f.box[1] + f.box[3] / 2}
      C 
        ${f.box[0]} ${valY},
        ${f.box[0] + f.box[2]} ${valY},
        ${f.box[0] + f.box[2]} ${f.box[1] + f.box[3] / 2}
    `);
    ctx.stroke(pathH);
    ctx.stroke(pathV);
  }
}
function drawGazeArrows(f, ctx) {
  var _a;
  if (localOptions.drawGaze && ((_a = f.rotation) == null ? void 0 : _a.gaze.strength) && f.rotation.gaze.bearing && f.annotations.leftEyeIris && f.annotations.rightEyeIris && f.annotations.leftEyeIris[0] && f.annotations.rightEyeIris[0]) {
    ctx.strokeStyle = "pink";
    ctx.fillStyle = "pink";
    const leftGaze = [
      f.annotations.leftEyeIris[0][0] + Math.sin(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[3],
      f.annotations.leftEyeIris[0][1] + Math.cos(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[2]
    ];
    arrow(ctx, [f.annotations.leftEyeIris[0][0], f.annotations.leftEyeIris[0][1]], [leftGaze[0], leftGaze[1]], 4);
    const rightGaze = [
      f.annotations.rightEyeIris[0][0] + Math.sin(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[3],
      f.annotations.rightEyeIris[0][1] + Math.cos(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[2]
    ];
    arrow(ctx, [f.annotations.rightEyeIris[0][0], f.annotations.rightEyeIris[0][1]], [rightGaze[0], rightGaze[1]], 4);
  }
}
function drawFacePolygons(f, ctx) {
  if (localOptions.drawPolygons && f.mesh.length >= 468) {
    ctx.lineWidth = 1;
    for (let i = 0; i < TRI468.length / 3; i++) {
      const points = [TRI468[i * 3 + 0], TRI468[i * 3 + 1], TRI468[i * 3 + 2]].map((index2) => f.mesh[index2]);
      lines(ctx, points, localOptions);
    }
    drawIrisElipse(f, ctx);
  }
}
function drawFacePoints(f, ctx) {
  if (localOptions.drawPoints) {
    if ((f == null ? void 0 : f.mesh.length) >= 468) {
      for (let i = 0; i < f.mesh.length; i++) {
        point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2], localOptions);
        if (localOptions.drawAttention) {
          if (LANDMARKS_REFINEMENT_LIPS_CONFIG.includes(i))
            point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] + 127, localOptions);
          if (LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG.includes(i))
            point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] - 127, localOptions);
          if (LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG.includes(i))
            point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] - 127, localOptions);
        }
      }
    } else {
      for (const [k, v10] of Object.entries((f == null ? void 0 : f.annotations) || {})) {
        if (!(v10 == null ? void 0 : v10[0]))
          continue;
        const pt2 = v10[0];
        point(ctx, pt2[0], pt2[1], 0, localOptions);
        if (localOptions.drawLabels)
          labels(ctx, k, pt2[0], pt2[1], localOptions);
      }
    }
  }
}
function drawFaceBoxes(f, ctx) {
  if (localOptions.drawBoxes) {
    rect(ctx, f.box[0], f.box[1], f.box[2], f.box[3], localOptions);
  }
}
function face(inCanvas2, result, drawOptions) {
  localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.font = localOptions.font;
  ctx.strokeStyle = localOptions.color;
  ctx.fillStyle = localOptions.color;
  for (const f of result) {
    drawFaceBoxes(f, ctx);
    drawLabels(f, ctx);
    if (f.mesh && f.mesh.length > 0) {
      drawFacePoints(f, ctx);
      drawFacePolygons(f, ctx);
      drawGazeSpheres(f, ctx);
      drawGazeArrows(f, ctx);
    }
  }
}

// src/draw/body.ts
function body(inCanvas2, result, drawOptions) {
  var _a, _b;
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  for (let i = 0; i < result.length; i++) {
    ctx.strokeStyle = localOptions2.color;
    ctx.fillStyle = localOptions2.color;
    ctx.lineWidth = localOptions2.lineWidth;
    ctx.font = localOptions2.font;
    if (localOptions2.drawBoxes && result[i].box && result[i].box.length === 4) {
      rect(ctx, result[i].box[0], result[i].box[1], result[i].box[2], result[i].box[3], localOptions2);
      if (localOptions2.drawLabels && ((_a = localOptions2.bodyLabels) == null ? void 0 : _a.length) > 0) {
        let l = localOptions2.bodyLabels.slice();
        l = replace(l, "[id]", result[i].id.toFixed(0));
        l = replace(l, "[score]", 100 * result[i].score);
        labels(ctx, l, result[i].box[0], result[i].box[1], localOptions2);
      }
    }
    if (localOptions2.drawPoints && result[i].keypoints) {
      for (let pt2 = 0; pt2 < result[i].keypoints.length; pt2++) {
        if (!result[i].keypoints[pt2].score || result[i].keypoints[pt2].score === 0)
          continue;
        ctx.fillStyle = colorDepth(result[i].keypoints[pt2].position[2], localOptions2);
        point(ctx, result[i].keypoints[pt2].position[0], result[i].keypoints[pt2].position[1], 0, localOptions2);
      }
    }
    if (localOptions2.drawLabels && ((_b = localOptions2.bodyPartLabels) == null ? void 0 : _b.length) > 0 && result[i].keypoints) {
      ctx.font = localOptions2.font;
      for (const pt2 of result[i].keypoints) {
        if (!pt2.score || pt2.score === 0)
          continue;
        let l = localOptions2.bodyPartLabels.slice();
        l = replace(l, "[label]", pt2.part);
        l = replace(l, "[score]", 100 * pt2.score);
        labels(ctx, l, pt2.position[0], pt2.position[1], localOptions2);
      }
    }
    if (localOptions2.drawPolygons && result[i].keypoints && result[i].annotations) {
      for (const part of Object.values(result[i].annotations)) {
        for (const connected4 of part)
          curves(ctx, connected4, localOptions2);
      }
    }
  }
}

// src/draw/hand.ts
function hand(inCanvas2, result, drawOptions) {
  var _a, _b;
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions2.font;
  for (const h of result) {
    if (localOptions2.drawBoxes) {
      ctx.strokeStyle = localOptions2.color;
      ctx.fillStyle = localOptions2.color;
      rect(ctx, h.box[0], h.box[1], h.box[2], h.box[3], localOptions2);
      if (localOptions2.drawLabels && ((_a = localOptions2.handLabels) == null ? void 0 : _a.length) > 0) {
        let l = localOptions2.handLabels.slice();
        l = replace(l, "[id]", h.id.toFixed(0));
        l = replace(l, "[label]", h.label);
        l = replace(l, "[score]", 100 * h.score);
        labels(ctx, l, h.box[0], h.box[1], localOptions2);
      }
      ctx.stroke();
    }
    if (localOptions2.drawPoints) {
      if (h.keypoints && h.keypoints.length > 0) {
        for (const pt2 of h.keypoints) {
          ctx.fillStyle = colorDepth(pt2[2], localOptions2);
          point(ctx, pt2[0], pt2[1], 0, localOptions2);
        }
      }
    }
    if (localOptions2.drawLabels && h.annotations && ((_b = localOptions2.fingerLabels) == null ? void 0 : _b.length) > 0) {
      for (const [part, pt2] of Object.entries(h.annotations)) {
        let l = localOptions2.fingerLabels.slice();
        l = replace(l, "[label]", part);
        labels(ctx, l, pt2[pt2.length - 1][0], pt2[pt2.length - 1][1], localOptions2);
      }
    }
    if (localOptions2.drawPolygons && h.annotations) {
      const addHandLine = (part) => {
        if (!part || part.length === 0 || !part[0])
          return;
        for (let i = 0; i < part.length; i++) {
          ctx.beginPath();
          const z = part[i][2] || 0;
          ctx.strokeStyle = colorDepth(i * z, localOptions2);
          ctx.moveTo(part[i > 0 ? i - 1 : 0][0], part[i > 0 ? i - 1 : 0][1]);
          ctx.lineTo(part[i][0], part[i][1]);
          ctx.stroke();
        }
      };
      ctx.lineWidth = localOptions2.lineWidth;
      addHandLine(h.annotations.index);
      addHandLine(h.annotations.middle);
      addHandLine(h.annotations.ring);
      addHandLine(h.annotations.pinky);
      addHandLine(h.annotations.thumb);
    }
  }
}

// src/draw/object.ts
function object(inCanvas2, result, drawOptions) {
  var _a;
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions2.font;
  for (const h of result) {
    if (localOptions2.drawBoxes) {
      ctx.strokeStyle = localOptions2.color;
      ctx.fillStyle = localOptions2.color;
      rect(ctx, h.box[0], h.box[1], h.box[2], h.box[3], localOptions2);
      if (localOptions2.drawLabels && ((_a = localOptions2.objectLabels) == null ? void 0 : _a.length) > 0) {
        let l = localOptions2.objectLabels.slice();
        l = replace(l, "[id]", h.id.toFixed(0));
        l = replace(l, "[label]", h.label);
        l = replace(l, "[score]", 100 * h.score);
        labels(ctx, l, h.box[0], h.box[1], localOptions2);
      }
      ctx.stroke();
    }
  }
}

// src/draw/gesture.ts
function gesture(inCanvas2, result, drawOptions) {
  var _a;
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  if (localOptions2.drawGestures && ((_a = localOptions2.gestureLabels) == null ? void 0 : _a.length) > 0) {
    const ctx = getCanvasContext(inCanvas2);
    if (!ctx)
      return;
    ctx.font = localOptions2.font;
    ctx.fillStyle = localOptions2.color;
    let i = 1;
    for (let j = 0; j < result.length; j++) {
      const [where, what] = Object.entries(result[j]);
      if (what.length > 1 && what[1].length > 0) {
        const who = where[1] > 0 ? `#${where[1]}` : "";
        let l = localOptions2.gestureLabels.slice();
        l = replace(l, "[where]", where[0]);
        l = replace(l, "[who]", who);
        l = replace(l, "[what]", what[1]);
        labels(ctx, l, 8, 2 + i * localOptions2.lineHeight, localOptions2);
        i += 1;
      }
    }
  }
}

// src/draw/labels.ts
var defaultLabels = {
  face: `face
    confidence: [score]%
    [gender] [genderScore]%
    age: [age] years
    distance: [distance]cm
    real: [real]%
    live: [live]%
    [emotions]
    roll: [roll]\xB0 yaw:[yaw]\xB0 pitch:[pitch]\xB0
    gaze: [gaze]\xB0`,
  body: "body [score]%",
  bodyPart: "[label] [score]%",
  object: "[label] [score]%",
  hand: "[label] [score]%",
  finger: "[label]",
  gesture: "[where] [who]: [what]"
};

// src/draw/draw.ts
var drawTime = 0;
function person(inCanvas2, result, drawOptions) {
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions2.font;
  for (let i = 0; i < result.length; i++) {
    if (localOptions2.drawBoxes) {
      ctx.strokeStyle = localOptions2.color;
      ctx.fillStyle = localOptions2.color;
      rect(ctx, result[i].box[0], result[i].box[1], result[i].box[2], result[i].box[3], localOptions2);
      if (localOptions2.drawLabels) {
        const label = `person #${i}`;
        if (localOptions2.shadowColor && localOptions2.shadowColor !== "") {
          ctx.fillStyle = localOptions2.shadowColor;
          ctx.fillText(label, result[i].box[0] + 3, 1 + result[i].box[1] + localOptions2.lineHeight, result[i].box[2]);
        }
        ctx.fillStyle = localOptions2.labelColor;
        ctx.fillText(label, result[i].box[0] + 2, 0 + result[i].box[1] + localOptions2.lineHeight, result[i].box[2]);
      }
      ctx.stroke();
    }
  }
}
function canvas2(input, output) {
  if (!input || !output)
    return;
  const ctx = getCanvasContext(output);
  if (!ctx)
    return;
  ctx.drawImage(input, 0, 0);
}
async function all(inCanvas2, result, drawOptions) {
  if (!(result == null ? void 0 : result.performance) || !inCanvas2)
    return null;
  const timeStamp = now();
  const localOptions2 = mergeDeep(options2, drawOptions);
  const promise = Promise.all([
    face(inCanvas2, result.face, localOptions2),
    body(inCanvas2, result.body, localOptions2),
    hand(inCanvas2, result.hand, localOptions2),
    object(inCanvas2, result.object, localOptions2),
    gesture(inCanvas2, result.gesture, localOptions2)
    // gestures do not have buffering
    // person(inCanvas, result.persons, localOptions); // already included above
  ]);
  drawTime = env.perfadd ? drawTime + Math.round(now() - timeStamp) : Math.round(now() - timeStamp);
  result.performance.draw = drawTime;
  return promise;
}
function init2() {
  options2.faceLabels = defaultLabels.face;
  options2.bodyLabels = defaultLabels.body;
  options2.bodyPartLabels = defaultLabels.bodyPart;
  options2.handLabels = defaultLabels.hand;
  options2.fingerLabels = defaultLabels.finger;
  options2.objectLabels = defaultLabels.object;
  options2.gestureLabels = defaultLabels.gesture;
}

// src/body/blazeposecoords.ts
var blazeposecoords_exports = {};
__export(blazeposecoords_exports, {
  connected: () => connected,
  kpt: () => kpt
});
var kpt = [
  "nose",
  //  0
  "leftEyeInside",
  //  1
  "leftEye",
  //  2
  "leftEyeOutside",
  //  3
  "rightEyeInside",
  //  4
  "rightEye",
  //  5
  "rightEyeOutside",
  //  6
  "leftEar",
  //  7
  "rightEar",
  //  8
  "leftMouth",
  //  9
  "rightMouth",
  // 10
  "leftShoulder",
  // 11
  "rightShoulder",
  // 12
  "leftElbow",
  // 13
  "rightElbow",
  // 14
  "leftWrist",
  // 15
  "rightWrist",
  // 16
  "leftPinky",
  // 17
  "rightPinky",
  // 18
  "leftIndex",
  // 19
  "rightIndex",
  // 20
  "leftThumb",
  // 21
  "rightThumb",
  // 22
  "leftHip",
  // 23
  "rightHip",
  // 24
  "leftKnee",
  // 25
  "rightKnee",
  // 26
  "leftAnkle",
  // 27
  "rightAnkle",
  // 28
  "leftHeel",
  // 29
  "rightHeel",
  // 30
  "leftFoot",
  // 31
  "rightFoot",
  // 32
  "bodyCenter",
  // 33
  "bodyTop",
  // 34
  "leftPalm",
  // 35 // z-coord not ok
  "leftHand",
  // 36 // similar to wrist but z-coord not ok
  "rightPalm",
  // 37 // z-coord not ok
  "rightHand"
  // 38 // similar to wrist but z-coord not ok
];
var connected = {
  shoulders: ["leftShoulder", "rightShoulder"],
  hips: ["rightHip", "leftHip"],
  mouth: ["leftMouth", "rightMouth"],
  leftLegUpper: ["leftHip", "leftKnee"],
  leftLegLower: ["leftKnee", "leftAnkle"],
  leftFoot: ["leftAnkle", "leftHeel", "leftFoot"],
  leftTorso: ["leftShoulder", "leftHip"],
  leftArmUpper: ["leftShoulder", "leftElbow"],
  leftArmLower: ["leftElbow", "leftWrist"],
  leftHand: ["leftWrist", "leftPalm"],
  leftHandPinky: ["leftPalm", "leftPinky"],
  leftHandIndex: ["leftPalm", "leftIndex"],
  leftHandThumb: ["leftPalm", "leftThumb"],
  leftEyeOutline: ["leftEyeInside", "leftEyeOutside"],
  rightLegUpper: ["rightHip", "rightKnee"],
  rightLegLower: ["rightKnee", "rightAnkle"],
  rightFoot: ["rightAnkle", "rightHeel", "rightFoot"],
  rightTorso: ["rightShoulder", "rightHip"],
  rightArmUpper: ["rightShoulder", "rightElbow"],
  rightArmLower: ["rightElbow", "rightWrist"],
  rightHand: ["rightWrist", "rightPalm"],
  rightHandPinky: ["rightPalm", "rightPinky"],
  rightHandIndex: ["rightPalm", "rightIndex"],
  rightHandThumb: ["rightPalm", "rightThumb"],
  rightEyeOutline: ["rightEyeInside", "rightEyeOutside"]
};

// src/body/blazeposedetector.ts
var model;
var inputSize = 224;
var anchorTensor;
var numLayers = 5;
var strides = [8, 16, 32, 32, 32];
function createAnchors() {
  const anchors3 = [];
  let layerId = 0;
  while (layerId < numLayers) {
    let anchorCount = 0;
    let lastSameStrideLayer = layerId;
    while (lastSameStrideLayer < strides.length && strides[lastSameStrideLayer] === strides[layerId]) {
      anchorCount += 2;
      lastSameStrideLayer++;
    }
    const stride = strides[layerId];
    const featureMapHeight = Math.ceil(inputSize / stride);
    const featureMapWidth = Math.ceil(inputSize / stride);
    for (let y8 = 0; y8 < featureMapHeight; ++y8) {
      for (let x = 0; x < featureMapWidth; ++x) {
        for (let anchorId = 0; anchorId < anchorCount; ++anchorId) {
          anchors3.push({ x: (x + 0.5) / featureMapWidth, y: (y8 + 0.5) / featureMapHeight });
        }
      }
    }
    layerId = lastSameStrideLayer;
  }
  anchorTensor = { x: tr(anchors3.map((a) => a.x)), y: tr(anchors3.map((a) => a.y)) };
}
async function loadDetector(config3) {
  if (env.initial)
    model = null;
  if (!model && config3.body["detector"] && config3.body["detector"].modelPath || "") {
    model = await loadModel(config3.body["detector"].modelPath);
    const inputs = (model == null ? void 0 : model["executor"]) ? Object.values(model.modelSignature["inputs"]) : void 0;
    inputSize = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
  } else if (config3.debug && model)
    log("cached model:", model["modelUrl"]);
  createAnchors();
  return model;
}
var cropFactor = [5, 5];
function decodeBoxes(boxesTensor, anchor) {
  return De(() => {
    const split = li(boxesTensor, 12, 1);
    let xCenter = gc(split[0]);
    let yCenter = gc(split[1]);
    let width = gc(split[2]);
    let height = gc(split[3]);
    xCenter = Ce(je(xCenter, inputSize), anchor.x);
    yCenter = Ce(je(yCenter, inputSize), anchor.y);
    width = se(je(width, inputSize), cropFactor[0]);
    height = se(je(height, inputSize), cropFactor[1]);
    const xMin = Te(xCenter, je(width, 2));
    const yMin = Te(yCenter, je(height, 2));
    const xMax = Ce(xMin, width);
    const yMax = Ce(yMin, height);
    const boxes = kr([xMin, yMin, xMax, yMax], 1);
    return boxes;
  });
}
async function decodeResults(boxesTensor, logitsTensor, config3, outputSize2) {
  var _a, _b;
  const detectedBoxes = [];
  const t8 = {};
  t8.boxes = decodeBoxes(boxesTensor, anchorTensor);
  t8.scores = $a(logitsTensor);
  t8.nms = await Kj.nonMaxSuppressionAsync(t8.boxes, t8.scores, 1, ((_a = config3.body["detector"]) == null ? void 0 : _a.minConfidence) || 0.1, ((_b = config3.body["detector"]) == null ? void 0 : _b.iouThreshold) || 0.1);
  const nms = await t8.nms.data();
  const scores = await t8.scores.data();
  const boxes = await t8.boxes.array();
  for (const i of Array.from(nms)) {
    const score = scores[i];
    const boxRaw = boxes[i];
    const box = [Math.round(boxRaw[0] * outputSize2[0]), Math.round(boxRaw[1] * outputSize2[1]), Math.round(boxRaw[2] * outputSize2[0]), Math.round(boxRaw[3] * outputSize2[1])];
    const detectedBox = { score, boxRaw, box };
    detectedBoxes.push(detectedBox);
  }
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return detectedBoxes;
}
async function detectBoxes(input, config3, outputSize2) {
  const t8 = {};
  t8.res = model == null ? void 0 : model.execute(input, ["Identity"]);
  t8.logitsRaw = Xe(t8.res, [0, 0, 0], [1, -1, 1]);
  t8.boxesRaw = Xe(t8.res, [0, 0, 1], [1, -1, -1]);
  t8.logits = gc(t8.logitsRaw);
  t8.boxes = gc(t8.boxesRaw);
  const boxes = await decodeResults(t8.boxes, t8.logits, config3, outputSize2);
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return boxes;
}

// src/util/box.ts
function calc(keypoints, outputSize2 = [1, 1]) {
  const coords = [keypoints.map((pt2) => pt2[0]), keypoints.map((pt2) => pt2[1])];
  const min = [Math.min(...coords[0]), Math.min(...coords[1])];
  const max = [Math.max(...coords[0]), Math.max(...coords[1])];
  const box = [min[0], min[1], max[0] - min[0], max[1] - min[1]];
  const boxRaw = [box[0] / outputSize2[0], box[1] / outputSize2[1], box[2] / outputSize2[0], box[3] / outputSize2[1]];
  return { box, boxRaw };
}
function square(keypoints, outputSize2 = [1, 1]) {
  const coords = [keypoints.map((pt2) => pt2[0]), keypoints.map((pt2) => pt2[1])];
  const min = [Math.min(...coords[0]), Math.min(...coords[1])];
  const max = [Math.max(...coords[0]), Math.max(...coords[1])];
  const center = [(min[0] + max[0]) / 2, (min[1] + max[1]) / 2];
  const dist = Math.max(center[0] - min[0], center[1] - min[1], -center[0] + max[0], -center[1] + max[1]);
  const box = [Math.trunc(center[0] - dist), Math.trunc(center[1] - dist), Math.trunc(2 * dist), Math.trunc(2 * dist)];
  const boxRaw = [box[0] / outputSize2[0], box[1] / outputSize2[1], box[2] / outputSize2[0], box[3] / outputSize2[1]];
  return { box, boxRaw };
}
function scale(box, scaleFact) {
  const dist = [box[2] * scaleFact, box[3] * scaleFact];
  const newBox = [
    box[0] - (dist[0] - box[2]) / 2,
    box[1] - (dist[1] - box[3]) / 2,
    dist[0],
    dist[1]
  ];
  return newBox;
}

// src/body/blazepose.ts
var model2;
var inputSize2 = 256;
var skipped = Number.MAX_SAFE_INTEGER;
var outputNodes = {
  landmarks: ["ld_3d", "activation_segmentation", "activation_heatmap", "world_3d", "output_poseflag"],
  detector: []
};
var cache = [];
var padding = [[0, 0], [0, 0], [0, 0], [0, 0]];
var lastTime = 0;
var sigmoid = (x) => 1 - 1 / (1 + Math.exp(x));
var loadDetect = (config3) => loadDetector(config3);
async function loadPose(config3) {
  if (env.initial)
    model2 = null;
  if (!model2) {
    model2 = await loadModel(config3.body.modelPath);
    const inputs = (model2 == null ? void 0 : model2["executor"]) ? Object.values(model2.modelSignature["inputs"]) : void 0;
    inputSize2 = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
  } else if (config3.debug)
    log("cached model:", model2["modelUrl"]);
  return model2;
}
function prepareImage(input, size2, cropBox) {
  var _a, _b;
  const t8 = {};
  if (!((_a = input == null ? void 0 : input.shape) == null ? void 0 : _a[1]) || !((_b = input == null ? void 0 : input.shape) == null ? void 0 : _b[2]))
    return input;
  let final;
  if (cropBox) {
    t8.cropped = Kj.cropAndResize(input, [cropBox], [0], [input.shape[1], input.shape[2]]);
  }
  if (input.shape[1] !== input.shape[2]) {
    const height = [
      input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0,
      input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0
    ];
    const width = [
      input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0,
      input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0
    ];
    padding = [
      [0, 0],
      // dont touch batch
      height,
      // height before&after
      width,
      // width before&after
      [0, 0]
      // dont touch rbg
    ];
    t8.pad = Aa(t8.cropped || input, padding);
    t8.resize = Kj.resizeBilinear(t8.pad, [size2, size2]);
    final = je(t8.resize, constants.tf255);
  } else if (input.shape[1] !== size2) {
    t8.resize = Kj.resizeBilinear(t8.cropped || input, [size2, size2]);
    final = je(t8.resize, constants.tf255);
  } else {
    final = je(t8.cropped || input, constants.tf255);
  }
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return final;
}
function rescaleKeypoints(keypoints, outputSize2, cropBox) {
  for (const kpt4 of keypoints) {
    kpt4.position = [
      Math.trunc(kpt4.position[0] * (outputSize2[0] + padding[2][0] + padding[2][1]) / outputSize2[0] - padding[2][0]),
      Math.trunc(kpt4.position[1] * (outputSize2[1] + padding[1][0] + padding[1][1]) / outputSize2[1] - padding[1][0]),
      kpt4.position[2]
    ];
    kpt4.positionRaw = [kpt4.position[0] / outputSize2[0], kpt4.position[1] / outputSize2[1], 2 * kpt4.position[2] / (outputSize2[0] + outputSize2[1])];
  }
  if (cropBox) {
    const width = cropBox[2] - cropBox[0];
    const height = cropBox[3] - cropBox[1];
    for (const kpt4 of keypoints) {
      kpt4.positionRaw = [
        kpt4.positionRaw[0] / height + cropBox[1],
        // correct offset due to crop
        kpt4.positionRaw[1] / width + cropBox[0],
        // correct offset due to crop
        kpt4.positionRaw[2]
      ];
      kpt4.position = [
        Math.trunc(kpt4.positionRaw[0] * outputSize2[0]),
        Math.trunc(kpt4.positionRaw[1] * outputSize2[1]),
        kpt4.positionRaw[2]
      ];
    }
  }
  return keypoints;
}
function fixKeypoints(keypoints) {
  const leftPalm = keypoints.find((k) => k.part === "leftPalm");
  const leftWrist = keypoints.find((k) => k.part === "leftWrist");
  const leftIndex = keypoints.find((k) => k.part === "leftIndex");
  leftPalm.position[2] = ((leftWrist.position[2] || 0) + (leftIndex.position[2] || 0)) / 2;
  const rightPalm = keypoints.find((k) => k.part === "rightPalm");
  const rightWrist = keypoints.find((k) => k.part === "rightWrist");
  const rightIndex = keypoints.find((k) => k.part === "rightIndex");
  rightPalm.position[2] = ((rightWrist.position[2] || 0) + (rightIndex.position[2] || 0)) / 2;
}
async function detectLandmarks(input, config3, outputSize2) {
  if (!(model2 == null ? void 0 : model2["executor"]))
    return null;
  const t8 = {};
  [
    t8.ld,
    t8.segmentation,
    t8.heatmap,
    t8.world,
    t8.poseflag
    /* 1,1 */
  ] = model2 == null ? void 0 : model2.execute(input, outputNodes.landmarks);
  const poseScore = (await t8.poseflag.data())[0];
  const points = await t8.ld.data();
  const distances = await t8.world.data();
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  const keypointsRelative = [];
  const depth = 5;
  for (let i = 0; i < points.length / depth; i++) {
    const score = sigmoid(points[depth * i + 3]);
    const presence = sigmoid(points[depth * i + 4]);
    const adjScore = Math.trunc(100 * score * presence * poseScore) / 100;
    const positionRaw = [points[depth * i + 0] / inputSize2, points[depth * i + 1] / inputSize2, points[depth * i + 2] + 0];
    const position = [Math.trunc(outputSize2[0] * positionRaw[0]), Math.trunc(outputSize2[1] * positionRaw[1]), positionRaw[2]];
    const distance2 = [distances[depth * i + 0], distances[depth * i + 1], distances[depth * i + 2] + 0];
    keypointsRelative.push({ part: kpt[i], positionRaw, position, distance: distance2, score: adjScore });
  }
  if (poseScore < (config3.body.minConfidence || 0))
    return null;
  fixKeypoints(keypointsRelative);
  const keypoints = rescaleKeypoints(keypointsRelative, outputSize2);
  const kpts = keypoints.map((k) => k.position);
  const boxes = calc(kpts, [outputSize2[0], outputSize2[1]]);
  const annotations2 = {};
  for (const [name, indexes] of Object.entries(connected)) {
    const pt2 = [];
    for (let i = 0; i < indexes.length - 1; i++) {
      const pt0 = keypoints.find((kpt4) => kpt4.part === indexes[i]);
      const pt1 = keypoints.find((kpt4) => kpt4.part === indexes[i + 1]);
      if (pt0 && pt1)
        pt2.push([pt0.position, pt1.position]);
    }
    annotations2[name] = pt2;
  }
  const body4 = { id: 0, score: Math.trunc(100 * poseScore) / 100, box: boxes.box, boxRaw: boxes.boxRaw, keypoints, annotations: annotations2 };
  return body4;
}
async function predict(input, config3) {
  var _a, _b, _c2;
  const outputSize2 = [input.shape[2] || 0, input.shape[1] || 0];
  const skipTime = (config3.body.skipTime || 0) > now() - lastTime;
  const skipFrame = skipped < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && cache !== null) {
    skipped++;
  } else {
    let boxes = [];
    if ((_b = (_a = config3.body) == null ? void 0 : _a["detector"]) == null ? void 0 : _b["enabled"]) {
      const preparedImage = prepareImage(input, 224);
      boxes = await detectBoxes(preparedImage, config3, outputSize2);
      Mt(preparedImage);
    } else {
      boxes = [{ box: [0, 0, 0, 0], boxRaw: [0, 0, 1, 1], score: 0 }];
    }
    for (let i = 0; i < boxes.length; i++) {
      const preparedBox = prepareImage(input, 256, (_c2 = boxes[i]) == null ? void 0 : _c2.boxRaw);
      cache.length = 0;
      const bodyResult = await detectLandmarks(preparedBox, config3, outputSize2);
      Mt(preparedBox);
      if (!bodyResult)
        continue;
      bodyResult.id = i;
      cache.push(bodyResult);
    }
    lastTime = now();
    skipped = 0;
  }
  return cache;
}

// src/object/labels.ts
var labels2 = [
  { class: 1, label: "person" },
  { class: 2, label: "bicycle" },
  { class: 3, label: "car" },
  { class: 4, label: "motorcycle" },
  { class: 5, label: "airplane" },
  { class: 6, label: "bus" },
  { class: 7, label: "train" },
  { class: 8, label: "truck" },
  { class: 9, label: "boat" },
  { class: 10, label: "traffic light" },
  { class: 11, label: "fire hydrant" },
  { class: 12, label: "stop sign" },
  { class: 13, label: "parking meter" },
  { class: 14, label: "bench" },
  { class: 15, label: "bird" },
  { class: 16, label: "cat" },
  { class: 17, label: "dog" },
  { class: 18, label: "horse" },
  { class: 19, label: "sheep" },
  { class: 20, label: "cow" },
  { class: 21, label: "elephant" },
  { class: 22, label: "bear" },
  { class: 23, label: "zebra" },
  { class: 24, label: "giraffe" },
  { class: 25, label: "backpack" },
  { class: 26, label: "umbrella" },
  { class: 27, label: "handbag" },
  { class: 28, label: "tie" },
  { class: 29, label: "suitcase" },
  { class: 30, label: "frisbee" },
  { class: 31, label: "skis" },
  { class: 32, label: "snowboard" },
  { class: 33, label: "sports ball" },
  { class: 34, label: "kite" },
  { class: 35, label: "baseball bat" },
  { class: 36, label: "baseball glove" },
  { class: 37, label: "skateboard" },
  { class: 38, label: "surfboard" },
  { class: 39, label: "tennis racket" },
  { class: 40, label: "bottle" },
  { class: 41, label: "wine glass" },
  { class: 42, label: "cup" },
  { class: 43, label: "fork" },
  { class: 44, label: "knife" },
  { class: 45, label: "spoon" },
  { class: 46, label: "bowl" },
  { class: 47, label: "banana" },
  { class: 48, label: "apple" },
  { class: 49, label: "sandwich" },
  { class: 50, label: "orange" },
  { class: 51, label: "broccoli" },
  { class: 52, label: "carrot" },
  { class: 53, label: "hot dog" },
  { class: 54, label: "pizza" },
  { class: 55, label: "donut" },
  { class: 56, label: "cake" },
  { class: 57, label: "chair" },
  { class: 58, label: "couch" },
  { class: 59, label: "potted plant" },
  { class: 60, label: "bed" },
  { class: 61, label: "dining table" },
  { class: 62, label: "toilet" },
  { class: 63, label: "tv" },
  { class: 64, label: "laptop" },
  { class: 65, label: "mouse" },
  { class: 66, label: "remote" },
  { class: 67, label: "keyboard" },
  { class: 68, label: "cell phone" },
  { class: 69, label: "microwave" },
  { class: 70, label: "oven" },
  { class: 71, label: "toaster" },
  { class: 72, label: "sink" },
  { class: 73, label: "refrigerator" },
  { class: 74, label: "book" },
  { class: 75, label: "clock" },
  { class: 76, label: "vase" },
  { class: 77, label: "scissors" },
  { class: 78, label: "teddy bear" },
  { class: 79, label: "hair drier" },
  { class: 80, label: "toothbrush" }
];

// src/object/centernet.ts
var model3;
var inputSize3 = 0;
var last2 = [];
var lastTime2 = 0;
var skipped2 = Number.MAX_SAFE_INTEGER;
async function load(config3) {
  if (env.initial)
    model3 = null;
  if (!model3) {
    model3 = await loadModel(config3.object.modelPath);
    const inputs = (model3 == null ? void 0 : model3["executor"]) ? Object.values(model3.modelSignature["inputs"]) : void 0;
    inputSize3 = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", model3["modelUrl"]);
  return model3;
}
async function process3(res, outputShape, config3) {
  if (!res)
    return [];
  const t8 = {};
  const results = [];
  const detections = await res.array();
  t8.squeeze = gc(res);
  const arr = li(t8.squeeze, 6, 1);
  t8.stack = kr([arr[1], arr[0], arr[3], arr[2]], 1);
  t8.boxes = gc(t8.stack);
  t8.scores = gc(arr[4]);
  t8.classes = gc(arr[5]);
  Mt([res, ...arr]);
  t8.nms = await Kj.nonMaxSuppressionAsync(t8.boxes, t8.scores, config3.object.maxDetected || 0, config3.object.iouThreshold, config3.object.minConfidence || 0);
  const nms = await t8.nms.data();
  let i = 0;
  for (const id2 of Array.from(nms)) {
    const score = Math.trunc(100 * detections[0][id2][4]) / 100;
    const classVal = detections[0][id2][5];
    if (Number.isNaN(classVal))
      continue;
    const label = labels2[classVal].label;
    const [x, y8] = [
      detections[0][id2][0] / inputSize3,
      detections[0][id2][1] / inputSize3
    ];
    const boxRaw = [
      x,
      y8,
      detections[0][id2][2] / inputSize3 - x,
      detections[0][id2][3] / inputSize3 - y8
    ];
    const box = [
      Math.trunc(boxRaw[0] * outputShape[0]),
      Math.trunc(boxRaw[1] * outputShape[1]),
      Math.trunc(boxRaw[2] * outputShape[0]),
      Math.trunc(boxRaw[3] * outputShape[1])
    ];
    results.push({ id: i++, score, class: classVal, label, box, boxRaw });
  }
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return results;
}
async function predict2(input, config3) {
  if (!(model3 == null ? void 0 : model3["executor"]))
    return [];
  const skipTime = (config3.object.skipTime || 0) > now() - lastTime2;
  const skipFrame = skipped2 < (config3.object.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && last2.length > 0) {
    skipped2++;
    return last2;
  }
  skipped2 = 0;
  return new Promise(async (resolve) => {
    const outputSize2 = [input.shape[2] || 0, input.shape[1] || 0];
    const resize = Kj.resizeBilinear(input, [inputSize3, inputSize3]);
    const objectT = config3.object.enabled ? model3 == null ? void 0 : model3.execute(resize, ["tower_0/detections"]) : null;
    lastTime2 = now();
    Mt(resize);
    const obj = await process3(objectT, outputSize2, config3);
    last2 = obj;
    resolve(obj);
  });
}

// src/body/efficientposecoords.ts
var efficientposecoords_exports = {};
__export(efficientposecoords_exports, {
  connected: () => connected2,
  kpt: () => kpt2
});
var kpt2 = [
  "head",
  "neck",
  "rightShoulder",
  "rightElbow",
  "rightWrist",
  "chest",
  "leftShoulder",
  "leftElbow",
  "leftWrist",
  "bodyCenter",
  "rightHip",
  "rightKnee",
  "rightAnkle",
  "leftHip",
  "leftKnee",
  "leftAnkle"
];
var connected2 = {
  leftLeg: ["leftHip", "leftKnee", "leftAnkle"],
  rightLeg: ["rightHip", "rightKnee", "rightAnkle"],
  torso: ["leftShoulder", "rightShoulder", "rightHip", "leftHip", "leftShoulder"],
  leftArm: ["leftShoulder", "leftElbow", "leftWrist"],
  rightArm: ["rightShoulder", "rightElbow", "rightWrist"],
  head: []
};

// src/body/efficientpose.ts
var model4;
var lastTime3 = 0;
var cache2 = { id: 0, keypoints: [], box: [0, 0, 0, 0], boxRaw: [0, 0, 0, 0], score: 0, annotations: {} };
var skipped3 = Number.MAX_SAFE_INTEGER;
async function load2(config3) {
  if (env.initial)
    model4 = null;
  if (!model4)
    model4 = await loadModel(config3.body.modelPath);
  else if (config3.debug)
    log("cached model:", model4["modelUrl"]);
  return model4;
}
async function max2d(inputs, minScore) {
  const [width, height] = inputs.shape;
  const reshaped = W(inputs, [height * width]);
  const max = Ra(reshaped, 0);
  const newScore = (await max.data())[0];
  if (newScore > minScore) {
    const coordinates = Ek(reshaped, 0);
    const mod = F2(coordinates, width);
    const x = (await mod.data())[0];
    const div = je(coordinates, width);
    const y8 = (await div.data())[0];
    Mt([reshaped, max, coordinates, mod, div]);
    return [x, y8, newScore];
  }
  Mt([reshaped, max]);
  return [0, 0, newScore];
}
async function predict3(image, config3) {
  if (!(model4 == null ? void 0 : model4["executor"]) || !(model4 == null ? void 0 : model4.inputs[0].shape))
    return [];
  const skipTime = (config3.body.skipTime || 0) > now() - lastTime3;
  const skipFrame = skipped3 < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && Object.keys(cache2.keypoints).length > 0) {
    skipped3++;
    return [cache2];
  }
  skipped3 = 0;
  return new Promise(async (resolve) => {
    const tensor = De(() => {
      var _a, _b;
      const resize = Kj.resizeBilinear(image, [((_a = model4 == null ? void 0 : model4.inputs[0].shape) == null ? void 0 : _a[2]) || 0, ((_b = model4 == null ? void 0 : model4.inputs[0].shape) == null ? void 0 : _b[1]) || 0], false);
      const enhance2 = se(resize, constants.tf2);
      const norm = Te(enhance2, constants.tf1);
      return norm;
    });
    let resT;
    if (config3.body.enabled)
      resT = model4 == null ? void 0 : model4.execute(tensor);
    lastTime3 = now();
    Mt(tensor);
    if (resT) {
      cache2.keypoints.length = 0;
      const squeeze = gc(resT);
      Mt(resT);
      const stack = fo(squeeze, 2);
      Mt(squeeze);
      for (let id2 = 0; id2 < stack.length; id2++) {
        const [x8, y10, partScore] = await max2d(stack[id2], config3.body.minConfidence);
        if (partScore > (config3.body.minConfidence || 0)) {
          cache2.keypoints.push({
            score: Math.round(100 * partScore) / 100,
            part: kpt2[id2],
            positionRaw: [
              // normalized to 0..1
              // @ts-ignore model is not undefined here
              x8 / model4.inputs[0].shape[2],
              y10 / model4.inputs[0].shape[1]
            ],
            position: [
              // normalized to input image size
              // @ts-ignore model is not undefined here
              Math.round(image.shape[2] * x8 / model4.inputs[0].shape[2]),
              Math.round(image.shape[1] * y10 / model4.inputs[0].shape[1])
            ]
          });
        }
      }
      stack.forEach((s) => Mt(s));
    }
    cache2.score = cache2.keypoints.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
    const x = cache2.keypoints.map((a) => a.position[0]);
    const y8 = cache2.keypoints.map((a) => a.position[1]);
    cache2.box = [
      Math.min(...x),
      Math.min(...y8),
      Math.max(...x) - Math.min(...x),
      Math.max(...y8) - Math.min(...y8)
    ];
    const xRaw = cache2.keypoints.map((a) => a.positionRaw[0]);
    const yRaw = cache2.keypoints.map((a) => a.positionRaw[1]);
    cache2.boxRaw = [
      Math.min(...xRaw),
      Math.min(...yRaw),
      Math.max(...xRaw) - Math.min(...xRaw),
      Math.max(...yRaw) - Math.min(...yRaw)
    ];
    for (const [name, indexes] of Object.entries(connected2)) {
      const pt2 = [];
      for (let i = 0; i < indexes.length - 1; i++) {
        const pt0 = cache2.keypoints.find((kpt4) => kpt4.part === indexes[i]);
        const pt1 = cache2.keypoints.find((kpt4) => kpt4.part === indexes[i + 1]);
        if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
          pt2.push([pt0.position, pt1.position]);
      }
      cache2.annotations[name] = pt2;
    }
    resolve([cache2]);
  });
}

// src/face/facemeshutil.ts
var getBoxSize = (box) => [Math.abs(box.endPoint[0] - box.startPoint[0]), Math.abs(box.endPoint[1] - box.startPoint[1])];
var getBoxCenter = (box) => [box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2, box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2, 1];
var clampBox = (box, input) => box ? [
  Math.trunc(Math.max(0, box.startPoint[0])),
  Math.trunc(Math.max(0, box.startPoint[1])),
  Math.trunc(Math.min(input.shape[2] || 0, box.endPoint[0]) - Math.max(0, box.startPoint[0])),
  Math.trunc(Math.min(input.shape[1] || 0, box.endPoint[1]) - Math.max(0, box.startPoint[1]))
] : [0, 0, 0, 0];
var getRawBox = (box, input) => box ? [
  box.startPoint[0] / (input.shape[2] || 0),
  box.startPoint[1] / (input.shape[1] || 0),
  (box.endPoint[0] - box.startPoint[0]) / (input.shape[2] || 0),
  (box.endPoint[1] - box.startPoint[1]) / (input.shape[1] || 0)
] : [0, 0, 0, 0];
var scaleBoxCoordinates = (box, factor, anchor) => {
  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];
  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];
  const landmarks = box.landmarks.map((pt2) => [(pt2[0] + anchor[0]) * factor[0], (pt2[1] + anchor[1]) * factor[1]]);
  return { startPoint, endPoint, landmarks, confidence: box.confidence };
};
var cutAndResize = (box, image, cropSize) => {
  const h = image.shape[1];
  const w10 = image.shape[2];
  const cutBox = [box.startPoint[1] / h, box.startPoint[0] / w10, box.endPoint[1] / h, box.endPoint[0] / w10];
  const crop = Kj.cropAndResize(image, [cutBox], [0], cropSize);
  const norm = je(crop, constants.tf255);
  Mt(crop);
  return norm;
};
var enlargeBox = (box, factor) => {
  const center = getBoxCenter(box);
  const size2 = getBoxSize(box);
  const halfSize = [factor * size2[0] / 2, factor * size2[1] / 2];
  return {
    startPoint: [center[0] - halfSize[0], center[1] - halfSize[1]],
    endPoint: [center[0] + halfSize[0], center[1] + halfSize[1]],
    landmarks: box.landmarks,
    confidence: box.confidence,
    size: size2
  };
};
var squarifyBox = (box) => {
  const centers = getBoxCenter(box);
  const size2 = getBoxSize(box);
  const halfSize = Math.max(...size2) / 2;
  return {
    startPoint: [Math.round(centers[0] - halfSize), Math.round(centers[1] - halfSize)],
    endPoint: [Math.round(centers[0] + halfSize), Math.round(centers[1] + halfSize)],
    landmarks: box.landmarks,
    confidence: box.confidence,
    size: [Math.round(size2[0]), Math.round(size2[1])]
  };
};
var calculateLandmarksBoundingBox = (landmarks) => {
  const x = landmarks.map((d) => d[0]);
  const y8 = landmarks.map((d) => d[1]);
  return {
    startPoint: [Math.min(...x), Math.min(...y8)],
    endPoint: [Math.max(...x), Math.max(...y8)],
    landmarks
  };
};
var fixedRotationMatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
var normalizeRadians = (angle) => angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
var computeRotation = (point1, point2) => normalizeRadians(Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]));
var buildTranslationMatrix = (x, y8) => [[1, 0, x], [0, 1, y8], [0, 0, 1]];
var dot = (v12, v22) => {
  let product = 0;
  for (let i = 0; i < v12.length; i++)
    product += v12[i] * v22[i];
  return product;
};
var getColumnFrom2DArr = (arr, columnIndex) => {
  const column = [];
  for (let i = 0; i < arr.length; i++)
    column.push(arr[i][columnIndex]);
  return column;
};
var multiplyTransformMatrices = (mat1, mat2) => {
  const product = [];
  const size2 = mat1.length;
  for (let row = 0; row < size2; row++) {
    product.push([]);
    for (let col = 0; col < size2; col++)
      product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));
  }
  return product;
};
var buildRotationMatrix = (rotation, center) => {
  const cosA = Math.cos(rotation);
  const sinA = Math.sin(rotation);
  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
  const translationMatrix = buildTranslationMatrix(center[0], center[1]);
  const translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);
  const negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);
  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);
};
var invertTransformMatrix = (matrix) => {
  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
  const translationComponent = [matrix[0][2], matrix[1][2]];
  const invertedTranslation = [-dot(rotationComponent[0], translationComponent), -dot(rotationComponent[1], translationComponent)];
  return [rotationComponent[0].concat(invertedTranslation[0]), rotationComponent[1].concat(invertedTranslation[1]), [0, 0, 1]];
};
var rotatePoint = (homogeneousCoordinate, rotationMatrix) => [dot(homogeneousCoordinate, rotationMatrix[0]), dot(homogeneousCoordinate, rotationMatrix[1])];
function generateAnchors(inputSize10) {
  const spec = inputSize10 === 192 ? { strides: [4], anchors: [1] } : { strides: [inputSize10 / 16, inputSize10 / 8], anchors: [2, 6] };
  const anchors3 = [];
  for (let i = 0; i < spec.strides.length; i++) {
    const stride = spec.strides[i];
    const gridRows = Math.floor((inputSize10 + stride - 1) / stride);
    const gridCols = Math.floor((inputSize10 + stride - 1) / stride);
    const anchorsNum = spec.anchors[i];
    for (let gridY = 0; gridY < gridRows; gridY++) {
      const anchorY = stride * (gridY + 0.5);
      for (let gridX = 0; gridX < gridCols; gridX++) {
        const anchorX = stride * (gridX + 0.5);
        for (let n = 0; n < anchorsNum; n++)
          anchors3.push([anchorX, anchorY]);
      }
    }
  }
  return anchors3;
}
function transformRawCoords(coordsRaw, box, angle, rotationMatrix, inputSize10) {
  const boxSize = getBoxSize(box);
  const coordsScaled = coordsRaw.map((coord) => [
    // scaled around zero-point
    boxSize[0] / inputSize10 * (coord[0] - inputSize10 / 2),
    boxSize[1] / inputSize10 * (coord[1] - inputSize10 / 2),
    coord[2] || 0
  ]);
  const largeAngle = angle && angle !== 0 && Math.abs(angle) > 0.2;
  const coordsRotationMatrix = largeAngle ? buildRotationMatrix(angle, [0, 0]) : fixedRotationMatrix;
  const coordsRotated = largeAngle ? coordsScaled.map((coord) => [...rotatePoint(coord, coordsRotationMatrix), coord[2]]) : coordsScaled;
  const inverseRotationMatrix = largeAngle ? invertTransformMatrix(rotationMatrix) : fixedRotationMatrix;
  const boxCenter = getBoxCenter(box);
  const offsets = [dot(boxCenter, inverseRotationMatrix[0]), dot(boxCenter, inverseRotationMatrix[1])];
  return coordsRotated.map((coord) => [
    Math.trunc(coord[0] + offsets[0]),
    Math.trunc(coord[1] + offsets[1]),
    Math.trunc(coord[2] || 0)
  ]);
}
function correctFaceRotation(rotate, box, input, inputSize10) {
  const symmetryLine = box.landmarks.length >= meshLandmarks.count ? meshLandmarks.symmetryLine : blazeFaceLandmarks.symmetryLine;
  let angle = 0;
  let rotationMatrix = fixedRotationMatrix;
  let face4;
  if (rotate && env.kernels.includes("rotatewithoffset")) {
    angle = computeRotation(box.landmarks[symmetryLine[0]], box.landmarks[symmetryLine[1]]);
    const largeAngle = angle && angle !== 0 && Math.abs(angle) > 0.2;
    if (largeAngle) {
      const center = getBoxCenter(box);
      const centerRaw = [center[0] / input.shape[2], center[1] / input.shape[1]];
      const rotated = Kj.rotateWithOffset(input, angle, 0, [centerRaw[0], centerRaw[1]]);
      rotationMatrix = buildRotationMatrix(-angle, center);
      face4 = cutAndResize(box, rotated, [inputSize10, inputSize10]);
      Mt(rotated);
    } else {
      face4 = cutAndResize(box, input, [inputSize10, inputSize10]);
    }
  } else {
    face4 = cutAndResize(box, input, [inputSize10, inputSize10]);
  }
  return [angle, rotationMatrix, face4];
}
var findFaceCenter = (mesh) => {
  const x = mesh.map((m) => m[0]);
  const y8 = mesh.map((m) => m[1]);
  return [Math.min(...x) + (Math.max(...x) - Math.min(...x)) / 2, Math.min(...y8) + (Math.max(...y8) - Math.min(...y8)) / 2];
};
var calculateFaceBox = (mesh, previousBox) => {
  const center = findFaceCenter(mesh);
  const boxSize = getBoxSize(previousBox);
  const calculatedBox = {
    startPoint: [center[0] - boxSize[0] / 2, center[1] - boxSize[1] / 2],
    endPoint: [center[0] + boxSize[0] / 2, center[1] + boxSize[1] / 2]
  };
  return calculatedBox;
};

// src/face/blazeface.ts
var keypointsCount = 6;
var faceBoxScaleFactor = 1.4;
var model5;
var anchors = null;
var inputSize4 = 0;
var inputSizeT = null;
var size = () => inputSize4;
async function load3(config3) {
  var _a;
  if (env.initial)
    model5 = null;
  if (!model5)
    model5 = await loadModel((_a = config3.face.detector) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", model5["modelUrl"]);
  inputSize4 = model5["executor"] && model5.inputs[0].shape ? model5.inputs[0].shape[2] : 256;
  inputSizeT = ke(inputSize4, "int32");
  anchors = fu(generateAnchors(inputSize4));
  return model5;
}
function decodeBoxes2(boxOutputs) {
  if (!anchors || !inputSizeT)
    return Gr([0, 0]);
  const t8 = {};
  t8.boxStarts = Xe(boxOutputs, [0, 1], [-1, 2]);
  t8.centers = Ce(t8.boxStarts, anchors);
  t8.boxSizes = Xe(boxOutputs, [0, 3], [-1, 2]);
  t8.boxSizesNormalized = je(t8.boxSizes, inputSizeT);
  t8.centersNormalized = je(t8.centers, inputSizeT);
  t8.halfBoxSize = je(t8.boxSizesNormalized, constants.tf2);
  t8.starts = Te(t8.centersNormalized, t8.halfBoxSize);
  t8.ends = Ce(t8.centersNormalized, t8.halfBoxSize);
  t8.startNormalized = se(t8.starts, inputSizeT);
  t8.endNormalized = se(t8.ends, inputSizeT);
  const boxes = Yk([t8.startNormalized, t8.endNormalized], 1);
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return boxes;
}
async function getBoxes(inputImage, config3) {
  var _a, _b, _c2, _d2, _e, _f2;
  if (!inputImage || inputImage["isDisposedInternal"] || inputImage.shape.length !== 4 || inputImage.shape[1] < 1 || inputImage.shape[2] < 1)
    return [];
  const t8 = {};
  t8.resized = Kj.resizeBilinear(inputImage, [inputSize4, inputSize4]);
  t8.div = je(t8.resized, constants.tf127);
  t8.normalized = Te(t8.div, constants.tf05);
  const res = model5 == null ? void 0 : model5.execute(t8.normalized);
  if (Array.isArray(res) && res.length > 2) {
    const sorted = res.sort((a, b) => a.size - b.size);
    t8.concat384 = bt([sorted[0], sorted[2]], 2);
    t8.concat512 = bt([sorted[1], sorted[3]], 2);
    t8.concat = bt([t8.concat512, t8.concat384], 1);
    t8.batch = gc(t8.concat, [0]);
  } else if (Array.isArray(res)) {
    t8.batch = gc(res[0]);
  } else {
    t8.batch = gc(res);
  }
  Mt(res);
  t8.boxes = decodeBoxes2(t8.batch);
  t8.logits = Xe(t8.batch, [0, 0], [-1, 1]);
  t8.sigmoid = $a(t8.logits);
  t8.scores = gc(t8.sigmoid);
  t8.nms = await Kj.nonMaxSuppressionAsync(t8.boxes, t8.scores, ((_a = config3.face.detector) == null ? void 0 : _a.maxDetected) || 0, ((_b = config3.face.detector) == null ? void 0 : _b.iouThreshold) || 0, ((_c2 = config3.face.detector) == null ? void 0 : _c2.minConfidence) || 0);
  const nms = await t8.nms.array();
  const boxes = [];
  const scores = await t8.scores.data();
  for (let i = 0; i < nms.length; i++) {
    const confidence = scores[nms[i]];
    if (confidence > (((_d2 = config3.face.detector) == null ? void 0 : _d2.minConfidence) || 0)) {
      const b = {};
      b.bbox = Xe(t8.boxes, [nms[i], 0], [1, -1]);
      b.slice = Xe(t8.batch, [nms[i], keypointsCount - 1], [1, -1]);
      b.squeeze = gc(b.slice);
      b.landmarks = W(b.squeeze, [keypointsCount, -1]);
      const points = await b.bbox.data();
      const rawBox = {
        startPoint: [points[0], points[1]],
        endPoint: [points[2], points[3]],
        landmarks: await b.landmarks.array(),
        confidence
      };
      b.anchor = Xe(anchors, [nms[i], 0], [1, 2]);
      const anchor = await b.anchor.data();
      const scaledBox = scaleBoxCoordinates(rawBox, [(inputImage.shape[2] || 0) / inputSize4, (inputImage.shape[1] || 0) / inputSize4], anchor);
      const enlargedBox = enlargeBox(scaledBox, config3.face["scale"] || faceBoxScaleFactor);
      const squaredBox = squarifyBox(enlargedBox);
      if (squaredBox.size[0] > (((_e = config3.face.detector) == null ? void 0 : _e["minSize"]) || 0) && squaredBox.size[1] > (((_f2 = config3.face.detector) == null ? void 0 : _f2["minSize"]) || 0))
        boxes.push(squaredBox);
      Object.keys(b).forEach((tensor) => Mt(b[tensor]));
    }
  }
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return boxes;
}

// src/face/iris.ts
var model6;
var inputSize5 = 0;
var irisEnlarge = 2.3;
var leftOutline = meshAnnotations.leftEyeLower0;
var rightOutline = meshAnnotations.rightEyeLower0;
var eyeLandmarks = {
  leftBounds: [leftOutline[0], leftOutline[leftOutline.length - 1]],
  rightBounds: [rightOutline[0], rightOutline[rightOutline.length - 1]]
};
var irisLandmarks = {
  upperCenter: 3,
  lowerCenter: 4,
  index: 71,
  numCoordinates: 76
};
async function load4(config3) {
  var _a, _b;
  if (env.initial)
    model6 = null;
  if (!model6)
    model6 = await loadModel((_a = config3.face.iris) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", model6["modelUrl"]);
  inputSize5 = (model6 == null ? void 0 : model6["executor"]) && ((_b = model6.inputs) == null ? void 0 : _b[0].shape) ? model6.inputs[0].shape[2] : 0;
  if (inputSize5 === -1)
    inputSize5 = 64;
  return model6;
}
function replaceIrisCoords(rawCoords, newCoords, prefix, keys) {
  for (let i = 0; i < irisIndices.length; i++) {
    const { key, indices } = irisIndices[i];
    const originalIndices = meshAnnotations[`${prefix}${key}`];
    if (!keys || keys.includes(key)) {
      for (let j = 0; j < indices.length; j++) {
        const index2 = indices[j];
        rawCoords[originalIndices[j]] = [
          newCoords[index2][0],
          newCoords[index2][1],
          (newCoords[index2][2] + rawCoords[originalIndices[j]][2]) / 2
        ];
      }
    }
  }
}
var getLeftToRightEyeDepthDifference = (rawCoords) => {
  const leftEyeZ = rawCoords[eyeLandmarks.leftBounds[0]][2];
  const rightEyeZ = rawCoords[eyeLandmarks.rightBounds[0]][2];
  return leftEyeZ - rightEyeZ;
};
var getEyeBox = (rawCoords, face4, eyeInnerCornerIndex, eyeOuterCornerIndex, meshSize, flip = false) => {
  const box = squarifyBox(enlargeBox(calculateLandmarksBoundingBox([rawCoords[eyeInnerCornerIndex], rawCoords[eyeOuterCornerIndex]]), irisEnlarge));
  const boxSize = getBoxSize(box);
  let crop = Kj.cropAndResize(face4, [[
    box.startPoint[1] / meshSize,
    box.startPoint[0] / meshSize,
    box.endPoint[1] / meshSize,
    box.endPoint[0] / meshSize
  ]], [0], [inputSize5, inputSize5]);
  if (flip && env.kernels.includes("flipleftright")) {
    const flipped = Kj.flipLeftRight(crop);
    Mt(crop);
    crop = flipped;
  }
  return { box, boxSize, crop };
};
var getEyeCoords = (eyeData, eyeBox, eyeBoxSize, flip = false) => {
  const eyeRawCoords = [];
  for (let i = 0; i < irisLandmarks.numCoordinates; i++) {
    const x = eyeData[i * 3];
    const y8 = eyeData[i * 3 + 1];
    const z = eyeData[i * 3 + 2];
    eyeRawCoords.push([
      (flip ? 1 - x / inputSize5 : x / inputSize5) * eyeBoxSize[0] + eyeBox.startPoint[0],
      y8 / inputSize5 * eyeBoxSize[1] + eyeBox.startPoint[1],
      z
    ]);
  }
  return { rawCoords: eyeRawCoords, iris: eyeRawCoords.slice(irisLandmarks.index) };
};
var getAdjustedIrisCoords = (rawCoords, irisCoords, direction) => {
  const upperCenterZ = rawCoords[meshAnnotations[`${direction}EyeUpper0`][irisLandmarks.upperCenter]][2];
  const lowerCenterZ = rawCoords[meshAnnotations[`${direction}EyeLower0`][irisLandmarks.lowerCenter]][2];
  const averageZ = (upperCenterZ + lowerCenterZ) / 2;
  return irisCoords.map((coord, i) => {
    let z = averageZ;
    if (i === 2) {
      z = upperCenterZ;
    } else if (i === 4) {
      z = lowerCenterZ;
    }
    return [coord[0], coord[1], z];
  });
};
async function augmentIris(rawCoords, face4, meshSize) {
  if (!(model6 == null ? void 0 : model6["executor"]))
    return rawCoords;
  const { box: leftEyeBox, boxSize: leftEyeBoxSize, crop: leftEyeCrop } = getEyeBox(rawCoords, face4, eyeLandmarks.leftBounds[0], eyeLandmarks.leftBounds[1], meshSize, true);
  const { box: rightEyeBox, boxSize: rightEyeBoxSize, crop: rightEyeCrop } = getEyeBox(rawCoords, face4, eyeLandmarks.rightBounds[0], eyeLandmarks.rightBounds[1], meshSize, true);
  const combined = bt([leftEyeCrop, rightEyeCrop]);
  Mt(leftEyeCrop);
  Mt(rightEyeCrop);
  const eyePredictions = model6.execute(combined);
  Mt(combined);
  const eyePredictionsData = await eyePredictions.data();
  Mt(eyePredictions);
  const leftEyeData = eyePredictionsData.slice(0, irisLandmarks.numCoordinates * 3);
  const { rawCoords: leftEyeRawCoords, iris: leftIrisRawCoords } = getEyeCoords(leftEyeData, leftEyeBox, leftEyeBoxSize, true);
  const rightEyeData = eyePredictionsData.slice(irisLandmarks.numCoordinates * 3);
  const { rawCoords: rightEyeRawCoords, iris: rightIrisRawCoords } = getEyeCoords(rightEyeData, rightEyeBox, rightEyeBoxSize, false);
  const leftToRightEyeDepthDifference = getLeftToRightEyeDepthDifference(rawCoords);
  if (Math.abs(leftToRightEyeDepthDifference) < 30) {
    replaceIrisCoords(rawCoords, leftEyeRawCoords, "left", null);
    replaceIrisCoords(rawCoords, rightEyeRawCoords, "right", null);
  } else if (leftToRightEyeDepthDifference < 1) {
    replaceIrisCoords(rawCoords, leftEyeRawCoords, "left", ["EyeUpper0", "EyeLower0"]);
  } else {
    replaceIrisCoords(rawCoords, rightEyeRawCoords, "right", ["EyeUpper0", "EyeLower0"]);
  }
  const adjustedLeftIrisCoords = getAdjustedIrisCoords(rawCoords, leftIrisRawCoords, "left");
  const adjustedRightIrisCoords = getAdjustedIrisCoords(rawCoords, rightIrisRawCoords, "right");
  const newCoords = rawCoords.concat(adjustedLeftIrisCoords).concat(adjustedRightIrisCoords);
  return newCoords;
}

// src/face/attention.ts
async function augment(rawCoords, results) {
  var _a, _b, _c2, _d2, _e, _f2, _g2, _h2, _i, _j2;
  const t8 = {
    // all attention models produce 2d results so it needs to be later augmented with correct z-coords
    // mesh: results[0], // already have it in rawCoords // output_mesh_identity
    // flag: results[1], // already processed in parent // conv_faceflag
    lips: await ((_b = (_a = results.filter((r) => r.size === 160)) == null ? void 0 : _a[0]) == null ? void 0 : _b.data()),
    // 80 x 2d = 160 // output_lips
    irisL: await ((_d2 = (_c2 = results.filter((r) => r.size === 10)) == null ? void 0 : _c2[0]) == null ? void 0 : _d2.data()),
    // 5 x 2d = 10 // output_right_iris
    eyeL: await ((_f2 = (_e = results.filter((r) => r.size === 142)) == null ? void 0 : _e[0]) == null ? void 0 : _f2.data()),
    // 71 x 2d = 142 // output_right_eye
    irisR: await ((_h2 = (_g2 = results.filter((r) => r.size === 10)) == null ? void 0 : _g2[1]) == null ? void 0 : _h2.data()),
    // 5 x 2d = 10 // output_left_iris
    eyeR: await ((_j2 = (_i = results.filter((r) => r.size === 142)) == null ? void 0 : _i[1]) == null ? void 0 : _j2.data())
    // 71 x 2d = 142// output_left_eye
  };
  for (const val of Object.values(t8)) {
    if (!val)
      return rawCoords;
  }
  const irisLDepth = LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG.reduce((prev, curr) => prev += rawCoords[curr][2], 0) / LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG.length;
  for (let i = 0; i < t8.irisL.length / 2; i++)
    rawCoords.push([t8.irisL[2 * i + 0], t8.irisL[2 * i + 1], irisLDepth]);
  const irisRDepth = LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG.reduce((prev, curr) => prev += rawCoords[curr][2], 0) / LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG.length;
  for (let i = 0; i < t8.irisR.length / 2; i++)
    rawCoords.push([t8.irisR[2 * i + 0], t8.irisR[2 * i + 1], irisRDepth]);
  for (let i = 0; i < t8.eyeL.length / 2; i++)
    rawCoords[LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG[i]] = [t8.eyeL[2 * i + 0], t8.eyeL[2 * i + 1], rawCoords[LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG[i]][2]];
  for (let i = 0; i < t8.eyeR.length / 2; i++)
    rawCoords[LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG[i]] = [t8.eyeR[2 * i + 0], t8.eyeR[2 * i + 1], rawCoords[LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG[i]][2]];
  for (let i = 0; i < t8.lips.length / 2; i++)
    rawCoords[LANDMARKS_REFINEMENT_LIPS_CONFIG[i]] = [t8.lips[2 * i + 0], t8.lips[2 * i + 1], rawCoords[LANDMARKS_REFINEMENT_LIPS_CONFIG[i]][2]];
  return rawCoords;
}

// src/face/facemesh.ts
var cache3 = {
  boxes: [],
  skipped: Number.MAX_SAFE_INTEGER,
  timestamp: 0
};
var model7 = null;
var inputSize6 = 0;
async function predict4(input, config3) {
  var _a, _b, _c2, _d2, _e, _f2, _g2, _h2, _i, _j2;
  const skipTime = (((_a = config3.face.detector) == null ? void 0 : _a.skipTime) || 0) > now() - cache3.timestamp;
  const skipFrame = cache3.skipped < (((_b = config3.face.detector) == null ? void 0 : _b.skipFrames) || 0);
  if (!config3.skipAllowed || !skipTime || !skipFrame || cache3.boxes.length === 0) {
    cache3.boxes = await getBoxes(input, config3);
    cache3.timestamp = now();
    cache3.skipped = 0;
  } else {
    cache3.skipped++;
  }
  const faces = [];
  const newCache = [];
  let id2 = 0;
  const size2 = inputSize6;
  for (let i = 0; i < cache3.boxes.length; i++) {
    const box = cache3.boxes[i];
    let angle = 0;
    let rotationMatrix;
    const face4 = {
      // init face result
      id: id2++,
      mesh: [],
      meshRaw: [],
      box: [0, 0, 0, 0],
      boxRaw: [0, 0, 0, 0],
      score: 0,
      boxScore: 0,
      faceScore: 0,
      size: [0, 0],
      // contoursRaw: [],
      // contours: [],
      annotations: {}
    };
    [angle, rotationMatrix, face4.tensor] = correctFaceRotation((_c2 = config3.face.detector) == null ? void 0 : _c2.rotation, box, input, ((_d2 = config3.face.mesh) == null ? void 0 : _d2.enabled) ? inputSize6 : size());
    if (config3.filter.equalization) {
      const equilized = face4.tensor ? await histogramEqualization(face4.tensor) : void 0;
      Mt(face4.tensor);
      if (equilized)
        face4.tensor = equilized;
    }
    face4.boxScore = Math.round(100 * box.confidence) / 100;
    if (!((_e = config3.face.mesh) == null ? void 0 : _e.enabled) || !(model7 == null ? void 0 : model7["executor"])) {
      face4.box = clampBox(box, input);
      face4.boxRaw = getRawBox(box, input);
      face4.score = face4.boxScore;
      face4.size = box.size;
      face4.mesh = box.landmarks;
      face4.meshRaw = face4.mesh.map((pt2) => [pt2[0] / (input.shape[2] || 0), pt2[1] / (input.shape[1] || 0), (pt2[2] || 0) / size2]);
      for (const key of Object.keys(blazeFaceLandmarks))
        face4.annotations[key] = [face4.mesh[blazeFaceLandmarks[key]]];
    } else if (!model7) {
      if (config3.debug)
        log("face mesh detection requested, but model is not loaded");
    } else {
      if (((_f2 = config3.face.attention) == null ? void 0 : _f2.enabled) && !env.kernels.includes("atan2")) {
        config3.face.attention.enabled = false;
        Mt(face4.tensor);
        return faces;
      }
      const results = model7.execute(face4.tensor);
      const confidenceT = results.find((t8) => t8.shape[t8.shape.length - 1] === 1);
      const faceConfidence = await confidenceT.data();
      face4.faceScore = Math.round(100 * faceConfidence[0]) / 100;
      if (face4.faceScore < (((_g2 = config3.face.detector) == null ? void 0 : _g2.minConfidence) || 1)) {
        box.confidence = face4.faceScore;
        if (config3.face.mesh["keepInvalid"]) {
          face4.box = clampBox(box, input);
          face4.boxRaw = getRawBox(box, input);
          face4.size = box.size;
          face4.score = face4.boxScore;
          face4.mesh = box.landmarks;
          face4.meshRaw = face4.mesh.map((pt2) => [pt2[0] / (input.shape[2] || 1), pt2[1] / (input.shape[1] || 1), (pt2[2] || 0) / size2]);
          for (const key of Object.keys(blazeFaceLandmarks)) {
            face4.annotations[key] = [face4.mesh[blazeFaceLandmarks[key]]];
          }
        }
      } else {
        const meshT = results.find((t8) => t8.shape[t8.shape.length - 1] === 1404);
        const coordsReshaped = W(meshT, [-1, 3]);
        let rawCoords = await coordsReshaped.array();
        Mt(coordsReshaped);
        if ((_h2 = config3.face.attention) == null ? void 0 : _h2.enabled) {
          rawCoords = await augment(rawCoords, results);
        } else if ((_i = config3.face.iris) == null ? void 0 : _i.enabled) {
          rawCoords = await augmentIris(rawCoords, face4.tensor, inputSize6);
        }
        face4.mesh = transformRawCoords(rawCoords, box, angle, rotationMatrix, inputSize6);
        face4.meshRaw = face4.mesh.map((pt2) => [pt2[0] / (input.shape[2] || 0), pt2[1] / (input.shape[1] || 0), (pt2[2] || 0) / size2]);
        for (const key of Object.keys(meshAnnotations))
          face4.annotations[key] = meshAnnotations[key].map((index2) => face4.mesh[index2]);
        face4.score = face4.faceScore;
        const calculatedBox = {
          ...calculateFaceBox(face4.mesh, box),
          confidence: box.confidence,
          landmarks: box.landmarks,
          size: box.size
        };
        face4.box = clampBox(calculatedBox, input);
        face4.boxRaw = getRawBox(calculatedBox, input);
        face4.size = calculatedBox.size;
        newCache.push(calculatedBox);
      }
      Mt(results);
    }
    if (face4.score > (((_j2 = config3.face.detector) == null ? void 0 : _j2.minConfidence) || 1))
      faces.push(face4);
    else
      Mt(face4.tensor);
  }
  cache3.boxes = newCache;
  return faces;
}
async function load5(config3) {
  var _a, _b, _c2, _d2, _e, _f2;
  if (env.initial)
    model7 = null;
  if (((_a = config3.face.attention) == null ? void 0 : _a.enabled) && (model7 == null ? void 0 : model7["signature"])) {
    if (Object.keys(((_b = model7 == null ? void 0 : model7["signature"]) == null ? void 0 : _b.outputs) || {}).length < 6)
      model7 = null;
  }
  if (!model7) {
    if ((_c2 = config3.face.attention) == null ? void 0 : _c2.enabled)
      model7 = await loadModel(config3.face.attention.modelPath);
    else
      model7 = await loadModel((_d2 = config3.face.mesh) == null ? void 0 : _d2.modelPath);
  } else if (config3.debug) {
    log("cached model:", model7["modelUrl"]);
  }
  inputSize6 = model7["executor"] && ((_e = model7 == null ? void 0 : model7.inputs) == null ? void 0 : _e[0].shape) ? (_f2 = model7 == null ? void 0 : model7.inputs) == null ? void 0 : _f2[0].shape[2] : 256;
  return model7;
}
var triangulation = TRI468;
var uvmap = UV468;

// src/gear/emotion.ts
var annotations = [];
var model8;
var last3 = [];
var lastCount = 0;
var lastTime4 = 0;
var skipped4 = Number.MAX_SAFE_INTEGER;
var rgb = false;
async function load6(config3) {
  var _a, _b, _c2;
  if (env.initial)
    model8 = null;
  if (!model8) {
    model8 = await loadModel((_a = config3.face.emotion) == null ? void 0 : _a.modelPath);
    rgb = ((_c2 = (_b = model8 == null ? void 0 : model8.inputs) == null ? void 0 : _b[0].shape) == null ? void 0 : _c2[3]) === 3;
    if (!rgb)
      annotations = ["angry", "disgust", "fear", "happy", "sad", "surprise", "neutral"];
    else
      annotations = ["angry", "disgust", "fear", "happy", "neutral", "sad", "surprise"];
  } else if (config3.debug) {
    log("cached model:", model8["modelUrl"]);
  }
  return model8;
}
async function predict5(image, config3, idx, count2) {
  var _a, _b;
  if (!model8)
    return [];
  const skipFrame = skipped4 < (((_a = config3.face.emotion) == null ? void 0 : _a.skipFrames) || 0);
  const skipTime = (((_b = config3.face.emotion) == null ? void 0 : _b.skipTime) || 0) > now() - lastTime4;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount === count2 && last3[idx] && last3[idx].length > 0) {
    skipped4++;
    return last3[idx];
  }
  skipped4 = 0;
  return new Promise(async (resolve) => {
    var _a2, _b2, _c2;
    const obj = [];
    if ((_a2 = config3.face.emotion) == null ? void 0 : _a2.enabled) {
      const t8 = {};
      const inputSize10 = (model8 == null ? void 0 : model8.inputs[0].shape) ? model8.inputs[0].shape[2] : 0;
      if (((_b2 = config3.face.emotion) == null ? void 0 : _b2["crop"]) > 0) {
        const crop = (_c2 = config3.face.emotion) == null ? void 0 : _c2["crop"];
        const box = [[crop, crop, 1 - crop, 1 - crop]];
        t8.resize = Kj.cropAndResize(image, box, [0], [inputSize10, inputSize10]);
      } else {
        t8.resize = Kj.resizeBilinear(image, [inputSize10, inputSize10], false);
      }
      if (rgb) {
        t8.mul = se(t8.resize, 255);
        t8.normalize = Te(t8.mul, [103.939, 116.779, 123.68]);
        t8.emotion = model8 == null ? void 0 : model8.execute(t8.normalize);
      } else {
        t8.channels = se(t8.resize, constants.rgb);
        t8.grayscale = ot(t8.channels, 3, true);
        t8.grayscaleSub = Te(t8.grayscale, constants.tf05);
        t8.grayscaleMul = se(t8.grayscaleSub, constants.tf2);
        t8.emotion = model8 == null ? void 0 : model8.execute(t8.grayscaleMul);
      }
      lastTime4 = now();
      const data = await t8.emotion.data();
      for (let i = 0; i < data.length; i++) {
        if (data[i] > (config3.face.emotion.minConfidence || 0))
          obj.push({ score: Math.min(0.99, Math.trunc(100 * data[i]) / 100), emotion: annotations[i] });
      }
      obj.sort((a, b) => b.score - a.score);
      Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    }
    last3[idx] = obj;
    lastCount = count2;
    resolve(obj);
  });
}

// src/face/faceres.ts
var model9;
var last4 = [];
var lastTime5 = 0;
var lastCount2 = 0;
var skipped5 = Number.MAX_SAFE_INTEGER;
async function load7(config3) {
  var _a;
  if (env.initial)
    model9 = null;
  if (!model9)
    model9 = await loadModel((_a = config3.face.description) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", model9["modelUrl"]);
  return model9;
}
function enhance(input, config3) {
  var _a, _b;
  const tensor = input.image || input.tensor || input;
  if (!(model9 == null ? void 0 : model9.inputs[0].shape))
    return tensor;
  let crop;
  if (((_a = config3.face.description) == null ? void 0 : _a["crop"]) > 0) {
    const cropval = (_b = config3.face.description) == null ? void 0 : _b["crop"];
    const box = [[cropval, cropval, 1 - cropval, 1 - cropval]];
    crop = Kj.cropAndResize(tensor, box, [0], [model9.inputs[0].shape[2], model9.inputs[0].shape[1]]);
  } else {
    crop = Kj.resizeBilinear(tensor, [model9.inputs[0].shape[2], model9.inputs[0].shape[1]], false);
  }
  const norm = se(crop, constants.tf255);
  Mt(crop);
  return norm;
}
async function predict6(image, config3, idx, count2) {
  var _a, _b, _c2, _d2;
  const obj = {
    age: 0,
    gender: "unknown",
    genderScore: 0,
    descriptor: []
  };
  if (!(model9 == null ? void 0 : model9["executor"]))
    return obj;
  const skipFrame = skipped5 < (((_a = config3.face.description) == null ? void 0 : _a.skipFrames) || 0);
  const skipTime = (((_b = config3.face.description) == null ? void 0 : _b.skipTime) || 0) > now() - lastTime5;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount2 === count2 && ((_c2 = last4 == null ? void 0 : last4[idx]) == null ? void 0 : _c2.age) > 0 && ((_d2 = last4 == null ? void 0 : last4[idx]) == null ? void 0 : _d2.genderScore) > 0) {
    skipped5++;
    return last4[idx];
  }
  skipped5 = 0;
  return new Promise(async (resolve) => {
    var _a2;
    if ((_a2 = config3.face.description) == null ? void 0 : _a2.enabled) {
      const enhanced = enhance(image, config3);
      const resT = model9 == null ? void 0 : model9.execute(enhanced);
      lastTime5 = now();
      Mt(enhanced);
      const genderT = resT.find((t8) => t8.shape[1] === 1);
      const gender2 = await genderT.data();
      const confidence = Math.trunc(200 * Math.abs(gender2[0] - 0.5)) / 100;
      if (confidence > (config3.face.description.minConfidence || 0)) {
        obj.gender = gender2[0] <= 0.5 ? "female" : "male";
        obj.genderScore = Math.min(0.99, confidence);
      }
      const argmax = Ek(resT.find((t8) => t8.shape[1] === 100), 1);
      const ageIdx = (await argmax.data())[0];
      Mt(argmax);
      const ageT = resT.find((t8) => t8.shape[1] === 100);
      const all2 = await ageT.data();
      obj.age = Math.round(all2[ageIdx - 1] > all2[ageIdx + 1] ? 10 * ageIdx - 100 * all2[ageIdx - 1] : 10 * ageIdx + 100 * all2[ageIdx + 1]) / 10;
      if (Number.isNaN(gender2[0]) || Number.isNaN(all2[0]))
        log("faceres error:", { model: model9, result: resT });
      const desc = resT.find((t8) => t8.shape[1] === 1024);
      const descriptor = desc ? await desc.data() : [];
      obj.descriptor = Array.from(descriptor);
      resT.forEach((t8) => Mt(t8));
    }
    last4[idx] = obj;
    lastCount2 = count2;
    resolve(obj);
  });
}

// src/face/mask.ts
var expandFact = 0.1;
var alpha = 0.5;
function insidePoly(x, y8, polygon) {
  let inside = false;
  let j = polygon.length - 1;
  for (let i = 0; i < polygon.length; j = i++) {
    if (polygon[i].y > y8 !== polygon[j].y > y8 && x < (polygon[j].x - polygon[i].x) * (y8 - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x)
      inside = !inside;
  }
  return inside;
}
async function mask(face4) {
  if (!face4.tensor)
    return face4.tensor;
  if (!face4.mesh || face4.mesh.length < 100)
    return face4.tensor;
  const width = face4.tensor.shape[2] || 0;
  const height = face4.tensor.shape[1] || 0;
  const buffer = await face4.tensor.buffer();
  let silhouette = [];
  for (const pt2 of meshAnnotations.silhouette)
    silhouette.push({ x: (face4.mesh[pt2][0] - face4.box[0]) / face4.box[2], y: (face4.mesh[pt2][1] - face4.box[1]) / face4.box[3] });
  if (expandFact && expandFact > 0)
    silhouette = silhouette.map((pt2) => ({ x: pt2.x > 0.5 ? pt2.x + expandFact : pt2.x - expandFact, y: pt2.y > 0.5 ? pt2.y + expandFact : pt2.y - expandFact }));
  for (let x = 0; x < width; x++) {
    for (let y8 = 0; y8 < height; y8++) {
      const inside = insidePoly(x / width, y8 / width, silhouette);
      if (!inside) {
        buffer.set(alpha * buffer.get(0, y8, x, 0), 0, y8, x, 0);
        buffer.set(alpha * buffer.get(0, y8, x, 1), 0, y8, x, 1);
        buffer.set(alpha * buffer.get(0, y8, x, 2), 0, y8, x, 2);
      }
    }
  }
  const output = buffer.toTensor();
  return output;
}

// src/face/antispoof.ts
var model10;
var cached = [];
var skipped6 = Number.MAX_SAFE_INTEGER;
var lastCount3 = 0;
var lastTime6 = 0;
async function load8(config3) {
  var _a;
  if (env.initial)
    model10 = null;
  if (!model10)
    model10 = await loadModel((_a = config3.face.antispoof) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", model10["modelUrl"]);
  return model10;
}
async function predict7(image, config3, idx, count2) {
  var _a, _b;
  if (!(model10 == null ? void 0 : model10["executor"]))
    return 0;
  const skipTime = (((_a = config3.face.antispoof) == null ? void 0 : _a.skipTime) || 0) > now() - lastTime6;
  const skipFrame = skipped6 < (((_b = config3.face.antispoof) == null ? void 0 : _b.skipFrames) || 0);
  if (config3.skipAllowed && skipTime && skipFrame && lastCount3 === count2 && cached[idx]) {
    skipped6++;
    return cached[idx];
  }
  skipped6 = 0;
  return new Promise(async (resolve) => {
    const resize = Kj.resizeBilinear(image, [(model10 == null ? void 0 : model10.inputs[0].shape) ? model10.inputs[0].shape[2] : 0, (model10 == null ? void 0 : model10.inputs[0].shape) ? model10.inputs[0].shape[1] : 0], false);
    const res = model10 == null ? void 0 : model10.execute(resize);
    const num = (await res.data())[0];
    cached[idx] = Math.round(100 * num) / 100;
    lastCount3 = count2;
    lastTime6 = now();
    Mt([resize, res]);
    resolve(cached[idx]);
  });
}

// src/face/liveness.ts
var model11;
var cached2 = [];
var skipped7 = Number.MAX_SAFE_INTEGER;
var lastCount4 = 0;
var lastTime7 = 0;
async function load9(config3) {
  var _a;
  if (env.initial)
    model11 = null;
  if (!model11)
    model11 = await loadModel((_a = config3.face.liveness) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", model11["modelUrl"]);
  return model11;
}
async function predict8(image, config3, idx, count2) {
  var _a, _b;
  if (!(model11 == null ? void 0 : model11["executor"]))
    return 0;
  const skipTime = (((_a = config3.face.liveness) == null ? void 0 : _a.skipTime) || 0) > now() - lastTime7;
  const skipFrame = skipped7 < (((_b = config3.face.liveness) == null ? void 0 : _b.skipFrames) || 0);
  if (config3.skipAllowed && skipTime && skipFrame && lastCount4 === count2 && cached2[idx]) {
    skipped7++;
    return cached2[idx];
  }
  skipped7 = 0;
  return new Promise(async (resolve) => {
    const resize = Kj.resizeBilinear(image, [(model11 == null ? void 0 : model11.inputs[0].shape) ? model11.inputs[0].shape[2] : 0, (model11 == null ? void 0 : model11.inputs[0].shape) ? model11.inputs[0].shape[1] : 0], false);
    const res = model11 == null ? void 0 : model11.execute(resize);
    const num = (await res.data())[0];
    cached2[idx] = Math.round(100 * num) / 100;
    lastCount4 = count2;
    lastTime7 = now();
    Mt([resize, res]);
    resolve(cached2[idx]);
  });
}

// src/gear/gear.ts
var model12;
var last5 = [];
var raceNames = ["white", "black", "asian", "indian", "other"];
var ageWeights = [15, 23, 28, 35.5, 45.5, 55.5, 65];
var lastCount5 = 0;
var lastTime8 = 0;
var skipped8 = Number.MAX_SAFE_INTEGER;
async function load10(config3) {
  var _a;
  if (env.initial)
    model12 = null;
  if (!model12)
    model12 = await loadModel((_a = config3.face.gear) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", model12["modelUrl"]);
  return model12;
}
async function predict9(image, config3, idx, count2) {
  var _a, _b;
  if (!model12)
    return { age: 0, gender: "unknown", genderScore: 0, race: [] };
  const skipFrame = skipped8 < (((_a = config3.face.gear) == null ? void 0 : _a.skipFrames) || 0);
  const skipTime = (((_b = config3.face.gear) == null ? void 0 : _b.skipTime) || 0) > now() - lastTime8;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount5 === count2 && last5[idx]) {
    skipped8++;
    return last5[idx];
  }
  skipped8 = 0;
  return new Promise(async (resolve) => {
    var _a2, _b2, _c2, _d2;
    if (!(model12 == null ? void 0 : model12.inputs[0].shape))
      return;
    const t8 = {};
    let box = [[0, 0.1, 0.9, 0.9]];
    if (((_a2 = config3.face.gear) == null ? void 0 : _a2["crop"]) > 0) {
      const crop = (_b2 = config3.face.gear) == null ? void 0 : _b2["crop"];
      box = [[crop, crop, 1 - crop, 1 - crop]];
    }
    t8.resize = Kj.cropAndResize(image, box, [0], [model12.inputs[0].shape[2], model12.inputs[0].shape[1]]);
    const obj = { age: 0, gender: "unknown", genderScore: 0, race: [] };
    if ((_c2 = config3.face.gear) == null ? void 0 : _c2.enabled)
      [t8.age, t8.gender, t8.race] = model12.execute(t8.resize, ["age_output", "gender_output", "race_output"]);
    const gender2 = await t8.gender.data();
    obj.gender = gender2[0] > gender2[1] ? "male" : "female";
    obj.genderScore = Math.round(100 * (gender2[0] > gender2[1] ? gender2[0] : gender2[1])) / 100;
    const race = await t8.race.data();
    for (let i = 0; i < race.length; i++) {
      if (race[i] > (((_d2 = config3.face.gear) == null ? void 0 : _d2.minConfidence) || 0.2))
        obj.race.push({ score: Math.round(100 * race[i]) / 100, race: raceNames[i] });
    }
    obj.race.sort((a, b) => b.score - a.score);
    const ageDistribution = Array.from(await t8.age.data());
    const ageSorted = ageDistribution.map((a, i) => [ageWeights[i], a]).sort((a, b) => b[1] - a[1]);
    let age2 = ageSorted[0][0];
    for (let i = 1; i < ageSorted.length; i++)
      age2 += ageSorted[i][1] * (ageSorted[i][0] - age2);
    obj.age = Math.round(10 * age2) / 10;
    Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    last5[idx] = obj;
    lastCount5 = count2;
    lastTime8 = now();
    resolve(obj);
  });
}

// src/gear/ssrnet-age.ts
var model13;
var last6 = [];
var lastCount6 = 0;
var lastTime9 = 0;
var skipped9 = Number.MAX_SAFE_INTEGER;
async function load11(config3) {
  if (env.initial)
    model13 = null;
  if (!model13)
    model13 = await loadModel(config3.face["ssrnet"].modelPathAge);
  else if (config3.debug)
    log("cached model:", model13["modelUrl"]);
  return model13;
}
async function predict10(image, config3, idx, count2) {
  var _a, _b, _c2, _d2;
  if (!model13)
    return { age: 0 };
  const skipFrame = skipped9 < (((_a = config3.face["ssrnet"]) == null ? void 0 : _a.skipFrames) || 0);
  const skipTime = (((_b = config3.face["ssrnet"]) == null ? void 0 : _b.skipTime) || 0) > now() - lastTime9;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount6 === count2 && ((_c2 = last6[idx]) == null ? void 0 : _c2.age) && ((_d2 = last6[idx]) == null ? void 0 : _d2.age) > 0) {
    skipped9++;
    return last6[idx];
  }
  skipped9 = 0;
  return new Promise(async (resolve) => {
    var _a2, _b2, _c3;
    if (!(model13 == null ? void 0 : model13.inputs) || !model13.inputs[0] || !model13.inputs[0].shape)
      return;
    const t8 = {};
    if (((_a2 = config3.face["ssrnet"]) == null ? void 0 : _a2["crop"]) > 0) {
      const crop = (_b2 = config3.face["ssrnet"]) == null ? void 0 : _b2["crop"];
      const box = [[crop, crop, 1 - crop, 1 - crop]];
      t8.resize = Kj.cropAndResize(image, box, [0], [model13.inputs[0].shape[2], model13.inputs[0].shape[1]]);
    } else {
      t8.resize = Kj.resizeBilinear(image, [model13.inputs[0].shape[2], model13.inputs[0].shape[1]], false);
    }
    t8.enhance = se(t8.resize, constants.tf255);
    const obj = { age: 0 };
    if ((_c3 = config3.face["ssrnet"]) == null ? void 0 : _c3.enabled)
      t8.age = model13.execute(t8.enhance);
    if (t8.age) {
      const data = await t8.age.data();
      obj.age = Math.trunc(10 * data[0]) / 10;
    }
    Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    last6[idx] = obj;
    lastCount6 = count2;
    lastTime9 = now();
    resolve(obj);
  });
}

// src/gear/ssrnet-gender.ts
var model14;
var last7 = [];
var lastCount7 = 0;
var lastTime10 = 0;
var skipped10 = Number.MAX_SAFE_INTEGER;
var rgb2 = [0.2989, 0.587, 0.114];
async function load12(config3) {
  var _a;
  if (env.initial)
    model14 = null;
  if (!model14)
    model14 = await loadModel((_a = config3.face["ssrnet"]) == null ? void 0 : _a.modelPathGender);
  else if (config3.debug)
    log("cached model:", model14["modelUrl"]);
  return model14;
}
async function predict11(image, config3, idx, count2) {
  var _a, _b, _c2, _d2;
  if (!model14)
    return { gender: "unknown", genderScore: 0 };
  const skipFrame = skipped10 < (((_a = config3.face["ssrnet"]) == null ? void 0 : _a.skipFrames) || 0);
  const skipTime = (((_b = config3.face["ssrnet"]) == null ? void 0 : _b.skipTime) || 0) > now() - lastTime10;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount7 === count2 && ((_c2 = last7[idx]) == null ? void 0 : _c2.gender) && ((_d2 = last7[idx]) == null ? void 0 : _d2.genderScore) > 0) {
    skipped10++;
    return last7[idx];
  }
  skipped10 = 0;
  return new Promise(async (resolve) => {
    var _a2, _b2, _c3;
    if (!(model14 == null ? void 0 : model14.inputs[0].shape))
      return;
    const t8 = {};
    if (((_a2 = config3.face["ssrnet"]) == null ? void 0 : _a2["crop"]) > 0) {
      const crop = (_b2 = config3.face["ssrnet"]) == null ? void 0 : _b2["crop"];
      const box = [[crop, crop, 1 - crop, 1 - crop]];
      t8.resize = Kj.cropAndResize(image, box, [0], [model14.inputs[0].shape[2], model14.inputs[0].shape[1]]);
    } else {
      t8.resize = Kj.resizeBilinear(image, [model14.inputs[0].shape[2], model14.inputs[0].shape[1]], false);
    }
    t8.enhance = De(() => {
      var _a3, _b3;
      let normalize2;
      if (((_b3 = (_a3 = model14 == null ? void 0 : model14.inputs) == null ? void 0 : _a3[0].shape) == null ? void 0 : _b3[3]) === 1) {
        const [red, green, blue] = li(t8.resize, 3, 3);
        const redNorm = se(red, rgb2[0]);
        const greenNorm = se(green, rgb2[1]);
        const blueNorm = se(blue, rgb2[2]);
        const grayscale = Tk([redNorm, greenNorm, blueNorm]);
        normalize2 = se(Te(grayscale, constants.tf05), 2);
      } else {
        normalize2 = se(Te(t8.resize, constants.tf05), 2);
      }
      return normalize2;
    });
    const obj = { gender: "unknown", genderScore: 0 };
    if ((_c3 = config3.face["ssrnet"]) == null ? void 0 : _c3.enabled)
      t8.gender = model14.execute(t8.enhance);
    const data = await t8.gender.data();
    obj.gender = data[0] > data[1] ? "female" : "male";
    obj.genderScore = data[0] > data[1] ? Math.trunc(100 * data[0]) / 100 : Math.trunc(100 * data[1]) / 100;
    Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    last7[idx] = obj;
    lastCount7 = count2;
    lastTime10 = now();
    resolve(obj);
  });
}

// src/face/mobilefacenet.ts
var model15;
var last8 = [];
var lastCount8 = 0;
var lastTime11 = 0;
var skipped11 = Number.MAX_SAFE_INTEGER;
async function load13(config3) {
  var _a;
  if (env.initial)
    model15 = null;
  if (!model15)
    model15 = await loadModel((_a = config3.face["mobilefacenet"]) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", model15["modelUrl"]);
  return model15;
}
async function predict12(input, config3, idx, count2) {
  var _a, _b;
  if (!(model15 == null ? void 0 : model15["executor"]))
    return [];
  const skipFrame = skipped11 < (((_a = config3.face["mobilefacenet"]) == null ? void 0 : _a.skipFrames) || 0);
  const skipTime = (((_b = config3.face["mobilefacenet"]) == null ? void 0 : _b.skipTime) || 0) > now() - lastTime11;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount8 === count2 && last8[idx]) {
    skipped11++;
    return last8[idx];
  }
  return new Promise(async (resolve) => {
    var _a2;
    let data = [];
    if (((_a2 = config3.face["mobilefacenet"]) == null ? void 0 : _a2.enabled) && (model15 == null ? void 0 : model15.inputs[0].shape)) {
      const t8 = {};
      t8.crop = Kj.resizeBilinear(input, [model15.inputs[0].shape[2], model15.inputs[0].shape[1]], false);
      t8.data = model15.execute(t8.crop);
      const output = await t8.data.data();
      data = Array.from(output);
      Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    }
    last8[idx] = data;
    lastCount8 = count2;
    lastTime11 = now();
    resolve(data);
  });
}

// src/face/insightface.ts
var model16;
var last9 = [];
var lastCount9 = 0;
var lastTime12 = 0;
var skipped12 = Number.MAX_SAFE_INTEGER;
async function load14(config3) {
  if (env.initial)
    model16 = null;
  if (!model16)
    model16 = await loadModel(config3.face["insightface"].modelPath);
  else if (config3.debug)
    log("cached model:", model16["modelUrl"]);
  return model16;
}
async function predict13(input, config3, idx, count2) {
  var _a, _b;
  if (!(model16 == null ? void 0 : model16["executor"]))
    return [];
  const skipFrame = skipped12 < (((_a = config3.face["insightface"]) == null ? void 0 : _a.skipFrames) || 0);
  const skipTime = (((_b = config3.face["insightface"]) == null ? void 0 : _b.skipTime) || 0) > now() - lastTime12;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount9 === count2 && last9[idx]) {
    skipped12++;
    return last9[idx];
  }
  return new Promise(async (resolve) => {
    var _a2;
    let data = [];
    if (((_a2 = config3.face["insightface"]) == null ? void 0 : _a2.enabled) && (model16 == null ? void 0 : model16.inputs[0].shape)) {
      const t8 = {};
      t8.crop = Kj.resizeBilinear(input, [model16.inputs[0].shape[2], model16.inputs[0].shape[1]], false);
      t8.data = model16.execute(t8.crop);
      const output = await t8.data.data();
      data = Array.from(output);
      Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    }
    last9[idx] = data;
    lastCount9 = count2;
    lastTime12 = now();
    resolve(data);
  });
}

// src/face/angles.ts
var calculateGaze = (face4) => {
  const radians = (pt1, pt2) => Math.atan2(pt1[1] - pt2[1], pt1[0] - pt2[0]);
  if (!face4.annotations.rightEyeIris || !face4.annotations.leftEyeIris)
    return { bearing: 0, strength: 0 };
  const offsetIris = [0, -0.1];
  const eyeRatio = 1;
  const left = (face4.mesh[33][2] || 0) > (face4.mesh[263][2] || 0);
  const irisCenter = left ? face4.mesh[473] : face4.mesh[468];
  const eyeCenter = left ? [(face4.mesh[133][0] + face4.mesh[33][0]) / 2, (face4.mesh[133][1] + face4.mesh[33][1]) / 2] : [(face4.mesh[263][0] + face4.mesh[362][0]) / 2, (face4.mesh[263][1] + face4.mesh[362][1]) / 2];
  const eyeSize = left ? [face4.mesh[133][0] - face4.mesh[33][0], face4.mesh[23][1] - face4.mesh[27][1]] : [face4.mesh[263][0] - face4.mesh[362][0], face4.mesh[253][1] - face4.mesh[257][1]];
  const eyeDiff = [
    // x distance between extreme point and center point normalized with eye size
    (eyeCenter[0] - irisCenter[0]) / eyeSize[0] - offsetIris[0],
    eyeRatio * (irisCenter[1] - eyeCenter[1]) / eyeSize[1] - offsetIris[1]
  ];
  let strength = Math.sqrt(eyeDiff[0] * eyeDiff[0] + eyeDiff[1] * eyeDiff[1]);
  strength = Math.min(strength, face4.boxRaw[2] / 2, face4.boxRaw[3] / 2);
  const bearing = (radians([0, 0], eyeDiff) + Math.PI / 2) % Math.PI;
  return { bearing, strength };
};
var calculateFaceAngle = (face4, imageSize) => {
  const normalize2 = (v10) => {
    const length = Math.sqrt(v10[0] * v10[0] + v10[1] * v10[1] + v10[2] * v10[2]);
    v10[0] /= length;
    v10[1] /= length;
    v10[2] /= length;
    return v10;
  };
  const subVectors = (a, b) => {
    const x = a[0] - b[0];
    const y8 = a[1] - b[1];
    const z = a[2] - b[2];
    return [x, y8, z];
  };
  const crossVectors = (a, b) => {
    const x = a[1] * b[2] - a[2] * b[1];
    const y8 = a[2] * b[0] - a[0] * b[2];
    const z = a[0] * b[1] - a[1] * b[0];
    return [x, y8, z];
  };
  const rotationMatrixToEulerAngle = (r) => {
    const [r00, _r01, _r02, r10, r11, r12, r20, r21, r22] = r;
    let thetaX;
    let thetaY;
    let thetaZ;
    if (r10 < 1) {
      if (r10 > -1) {
        thetaZ = Math.asin(r10);
        thetaY = Math.atan2(-r20, r00);
        thetaX = Math.atan2(-r12, r11);
      } else {
        thetaZ = -Math.PI / 2;
        thetaY = -Math.atan2(r21, r22);
        thetaX = 0;
      }
    } else {
      thetaZ = Math.PI / 2;
      thetaY = Math.atan2(r21, r22);
      thetaX = 0;
    }
    if (Number.isNaN(thetaX))
      thetaX = 0;
    if (Number.isNaN(thetaY))
      thetaY = 0;
    if (Number.isNaN(thetaZ))
      thetaZ = 0;
    return { pitch: 2 * -thetaX, yaw: 2 * -thetaY, roll: 2 * -thetaZ };
  };
  const mesh = face4.meshRaw;
  if (!mesh || mesh.length < 300)
    return { angle: { pitch: 0, yaw: 0, roll: 0 }, matrix: [1, 0, 0, 0, 1, 0, 0, 0, 1], gaze: { bearing: 0, strength: 0 } };
  const size2 = Math.max(face4.boxRaw[2] * imageSize[0], face4.boxRaw[3] * imageSize[1]) / 1.5;
  const pts = [mesh[10], mesh[152], mesh[234], mesh[454]].map((pt2) => [pt2[0] * imageSize[0] / size2, pt2[1] * imageSize[1] / size2, pt2[2]]);
  const yAxis = normalize2(subVectors(pts[1], pts[0]));
  let xAxis = normalize2(subVectors(pts[3], pts[2]));
  const zAxis = normalize2(crossVectors(xAxis, yAxis));
  xAxis = crossVectors(yAxis, zAxis);
  const matrix = [
    xAxis[0],
    xAxis[1],
    xAxis[2],
    yAxis[0],
    yAxis[1],
    yAxis[2],
    zAxis[0],
    zAxis[1],
    zAxis[2]
  ];
  const angle = rotationMatrixToEulerAngle(matrix);
  const gaze = mesh.length === 478 ? calculateGaze(face4) : { bearing: 0, strength: 0 };
  return { angle, matrix, gaze };
};

// src/face/anthropometry.ts
function calculateCameraDistance(face4, width) {
  const f = face4 == null ? void 0 : face4.annotations;
  if (!(f == null ? void 0 : f.leftEyeIris) || !(f == null ? void 0 : f.rightEyeIris))
    return 0;
  const irisSize = Math.max(Math.abs(f.leftEyeIris[3][0] - f.leftEyeIris[1][0]), Math.abs(f.rightEyeIris[3][0] - f.rightEyeIris[1][0])) / width;
  const cameraDistance = Math.round(1.17 / irisSize) / 100;
  return cameraDistance;
}

// src/face/face.ts
var detectFace = async (instance, input) => {
  var _a, _b, _c2, _d2, _e, _f2, _g2, _h2, _i, _j2, _k2, _l2, _m, _n2, _o, _p2, _q, _r2, _s2, _t, _u2, _v2, _w2;
  let timeStamp = now();
  let ageRes;
  let gearRes;
  let genderRes;
  let emotionRes;
  let mobilefacenetRes;
  let insightfaceRes;
  let antispoofRes;
  let livenessRes;
  let descRes;
  const faceRes = [];
  instance.state = "run:face";
  const faces = await predict4(input, instance.config);
  instance.performance.face = env.perfadd ? (instance.performance.face || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
  if (!input.shape || input.shape.length !== 4)
    return [];
  if (!faces)
    return [];
  for (let i = 0; i < faces.length; i++) {
    instance.analyze("Get Face");
    if (!faces[i].tensor || faces[i].tensor.isDisposedInternal) {
      log("Face object is disposed:", faces[i].tensor);
      continue;
    }
    if ((_a = instance.config.face.detector) == null ? void 0 : _a.mask) {
      const masked = await mask(faces[i]);
      Mt(faces[i].tensor);
      if (masked)
        faces[i].tensor = masked;
    }
    const rotation = faces[i].mesh && faces[i].mesh.length > 200 ? calculateFaceAngle(faces[i], [input.shape[2], input.shape[1]]) : null;
    instance.analyze("Start Emotion:");
    if (instance.config.async) {
      emotionRes = ((_b = instance.config.face.emotion) == null ? void 0 : _b.enabled) ? predict5(faces[i].tensor || ur([]), instance.config, i, faces.length) : [];
    } else {
      instance.state = "run:emotion";
      timeStamp = now();
      emotionRes = ((_c2 = instance.config.face.emotion) == null ? void 0 : _c2.enabled) ? await predict5(faces[i].tensor || ur([]), instance.config, i, faces.length) : [];
      instance.performance.emotion = env.perfadd ? (instance.performance.emotion || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Emotion:");
    instance.analyze("Start AntiSpoof:");
    if (instance.config.async) {
      antispoofRes = ((_d2 = instance.config.face.antispoof) == null ? void 0 : _d2.enabled) ? predict7(faces[i].tensor || ur([]), instance.config, i, faces.length) : 0;
    } else {
      instance.state = "run:antispoof";
      timeStamp = now();
      antispoofRes = ((_e = instance.config.face.antispoof) == null ? void 0 : _e.enabled) ? await predict7(faces[i].tensor || ur([]), instance.config, i, faces.length) : 0;
      instance.performance.antispoof = env.perfadd ? (instance.performance.antispoof || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End AntiSpoof:");
    instance.analyze("Start Liveness:");
    if (instance.config.async) {
      livenessRes = ((_f2 = instance.config.face.liveness) == null ? void 0 : _f2.enabled) ? predict8(faces[i].tensor || ur([]), instance.config, i, faces.length) : 0;
    } else {
      instance.state = "run:liveness";
      timeStamp = now();
      livenessRes = ((_g2 = instance.config.face.liveness) == null ? void 0 : _g2.enabled) ? await predict8(faces[i].tensor || ur([]), instance.config, i, faces.length) : 0;
      instance.performance.liveness = env.perfadd ? (instance.performance.antispoof || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Liveness:");
    instance.analyze("Start GEAR:");
    if (instance.config.async) {
      gearRes = ((_h2 = instance.config.face.gear) == null ? void 0 : _h2.enabled) ? predict9(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:gear";
      timeStamp = now();
      gearRes = ((_i = instance.config.face.gear) == null ? void 0 : _i.enabled) ? await predict9(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
      instance.performance.gear = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End GEAR:");
    instance.analyze("Start SSRNet:");
    if (instance.config.async) {
      ageRes = ((_j2 = instance.config.face["ssrnet"]) == null ? void 0 : _j2.enabled) ? predict10(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
      genderRes = ((_k2 = instance.config.face["ssrnet"]) == null ? void 0 : _k2.enabled) ? predict11(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:ssrnet";
      timeStamp = now();
      ageRes = ((_l2 = instance.config.face["ssrnet"]) == null ? void 0 : _l2.enabled) ? await predict10(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
      genderRes = ((_m = instance.config.face["ssrnet"]) == null ? void 0 : _m.enabled) ? await predict11(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
      instance.performance.ssrnet = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End SSRNet:");
    instance.analyze("Start MobileFaceNet:");
    if (instance.config.async) {
      mobilefacenetRes = ((_n2 = instance.config.face["mobilefacenet"]) == null ? void 0 : _n2.enabled) ? predict12(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:mobilefacenet";
      timeStamp = now();
      mobilefacenetRes = ((_o = instance.config.face["mobilefacenet"]) == null ? void 0 : _o.enabled) ? await predict12(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
      instance.performance.mobilefacenet = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End MobileFaceNet:");
    instance.analyze("Start InsightFace:");
    if (instance.config.async) {
      insightfaceRes = ((_p2 = instance.config.face["insightface"]) == null ? void 0 : _p2.enabled) ? predict13(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:mobilefacenet";
      timeStamp = now();
      insightfaceRes = ((_q = instance.config.face["insightface"]) == null ? void 0 : _q.enabled) ? await predict13(faces[i].tensor || ur([]), instance.config, i, faces.length) : null;
      instance.performance.mobilefacenet = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End InsightFace:");
    instance.analyze("Start Description:");
    if (instance.config.async) {
      descRes = predict6(faces[i].tensor || ur([]), instance.config, i, faces.length);
    } else {
      instance.state = "run:description";
      timeStamp = now();
      descRes = await predict6(faces[i].tensor || ur([]), instance.config, i, faces.length);
      instance.performance.description = env.perfadd ? (instance.performance.description || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Description:");
    if (instance.config.async) {
      [ageRes, genderRes, emotionRes, mobilefacenetRes, insightfaceRes, descRes, gearRes, antispoofRes, livenessRes] = await Promise.all([ageRes, genderRes, emotionRes, mobilefacenetRes, insightfaceRes, descRes, gearRes, antispoofRes, livenessRes]);
    }
    instance.analyze("Finish Face:");
    if (((_r2 = instance.config.face["ssrnet"]) == null ? void 0 : _r2.enabled) && ageRes && genderRes) {
      descRes = {
        ...descRes,
        age: ageRes.age,
        gender: genderRes.gender,
        genderScore: genderRes.genderScore
      };
    }
    if (((_s2 = instance.config.face.gear) == null ? void 0 : _s2.enabled) && gearRes) {
      descRes = {
        ...descRes,
        age: gearRes.age,
        gender: gearRes.gender,
        genderScore: gearRes.genderScore,
        race: gearRes.race
      };
    }
    if (((_t = instance.config.face["mobilefacenet"]) == null ? void 0 : _t.enabled) && mobilefacenetRes) {
      descRes.descriptor = mobilefacenetRes;
    }
    if (((_u2 = instance.config.face["insightface"]) == null ? void 0 : _u2.enabled) && insightfaceRes) {
      descRes.descriptor = insightfaceRes;
    }
    const irisSize = ((_v2 = instance.config.face.iris) == null ? void 0 : _v2.enabled) ? calculateCameraDistance(faces[i], input.shape[2]) : 0;
    const tensor = ((_w2 = instance.config.face.detector) == null ? void 0 : _w2.return) ? gc(faces[i].tensor) : null;
    Mt(faces[i].tensor);
    if (faces[i].tensor)
      delete faces[i].tensor;
    const res = {
      ...faces[i],
      id: i
    };
    if (descRes.age)
      res.age = descRes.age;
    if (descRes.gender)
      res.gender = descRes.gender;
    if (descRes.genderScore)
      res.genderScore = descRes.genderScore;
    if (descRes.descriptor)
      res.embedding = descRes.descriptor;
    if (descRes.race)
      res.race = descRes.race;
    if (emotionRes)
      res.emotion = emotionRes;
    if (antispoofRes)
      res.real = antispoofRes;
    if (livenessRes)
      res.live = livenessRes;
    if (irisSize > 0)
      res.distance = irisSize;
    if (rotation)
      res.rotation = rotation;
    if (tensor)
      res.tensor = tensor;
    faceRes.push(res);
    instance.analyze("End Face");
  }
  instance.analyze("End FaceMesh:");
  if (instance.config.async) {
    if (instance.performance.face)
      delete instance.performance.face;
    if (instance.performance.age)
      delete instance.performance.age;
    if (instance.performance.gender)
      delete instance.performance.gender;
    if (instance.performance.emotion)
      delete instance.performance.emotion;
  }
  return faceRes;
};

// src/hand/fingerdef.ts
var Finger = {
  thumb: 0,
  index: 1,
  middle: 2,
  ring: 3,
  pinky: 4,
  all: [0, 1, 2, 3, 4],
  // just for convenience
  nameMapping: { 0: "thumb", 1: "index", 2: "middle", 3: "ring", 4: "pinky" },
  // Describes mapping of joints based on the 21 points returned by handpose.
  // [0]     Palm
  // [1-4]   Thumb
  // [5-8]   Index
  // [9-12]  Middle
  // [13-16] Ring
  // [17-20] Pinky
  pointsMapping: {
    0: [[0, 1], [1, 2], [2, 3], [3, 4]],
    1: [[0, 5], [5, 6], [6, 7], [7, 8]],
    2: [[0, 9], [9, 10], [10, 11], [11, 12]],
    3: [[0, 13], [13, 14], [14, 15], [15, 16]],
    4: [[0, 17], [17, 18], [18, 19], [19, 20]]
  },
  getName: (value) => Finger.nameMapping[value],
  getPoints: (value) => Finger.pointsMapping[value]
};
var FingerCurl = {
  none: 0,
  half: 1,
  full: 2,
  nameMapping: { 0: "none", 1: "half", 2: "full" },
  getName: (value) => FingerCurl.nameMapping[value]
};
var FingerDirection = {
  verticalUp: 0,
  verticalDown: 1,
  horizontalLeft: 2,
  horizontalRight: 3,
  diagonalUpRight: 4,
  diagonalUpLeft: 5,
  diagonalDownRight: 6,
  diagonalDownLeft: 7,
  nameMapping: { 0: "verticalUp", 1: "verticalDown", 2: "horizontalLeft", 3: "horizontalRight", 4: "diagonalUpRight", 5: "diagonalUpLeft", 6: "diagonalDownRight", 7: "diagonalDownLeft" },
  getName: (value) => FingerDirection.nameMapping[value]
};
var FingerGesture = class {
  constructor(name) {
    __publicField(this, "name");
    __publicField(this, "curls");
    __publicField(this, "directions");
    __publicField(this, "weights");
    __publicField(this, "weightsRelative");
    this.name = name;
    this.curls = {};
    this.directions = {};
    this.weights = [1, 1, 1, 1, 1];
    this.weightsRelative = [1, 1, 1, 1, 1];
  }
  curl(finger, curl, confidence) {
    if (typeof this.curls[finger] === "undefined")
      this.curls[finger] = [];
    this.curls[finger].push([curl, confidence]);
  }
  direction(finger, position, confidence) {
    if (!this.directions[finger])
      this.directions[finger] = [];
    this.directions[finger].push([position, confidence]);
  }
  weight(finger, weight) {
    this.weights[finger] = weight;
    const total = this.weights.reduce((a, b) => a + b, 0);
    this.weightsRelative = this.weights.map((el2) => el2 * 5 / total);
  }
  matchAgainst(detectedCurls, detectedDirections) {
    let confidence = 0;
    for (const fingerIdx in detectedCurls) {
      const detectedCurl = detectedCurls[fingerIdx];
      const expectedCurls = this.curls[fingerIdx];
      if (typeof expectedCurls === "undefined") {
        confidence += this.weightsRelative[fingerIdx];
        continue;
      }
      for (const [expectedCurl, score] of expectedCurls) {
        if (detectedCurl === expectedCurl) {
          confidence += score * this.weightsRelative[fingerIdx];
          break;
        }
      }
    }
    for (const fingerIdx in detectedDirections) {
      const detectedDirection = detectedDirections[fingerIdx];
      const expectedDirections = this.directions[fingerIdx];
      if (typeof expectedDirections === "undefined") {
        confidence += this.weightsRelative[fingerIdx];
        continue;
      }
      for (const [expectedDirection, score] of expectedDirections) {
        if (detectedDirection === expectedDirection) {
          confidence += score * this.weightsRelative[fingerIdx];
          break;
        }
      }
    }
    return confidence / 10;
  }
};

// src/hand/fingergesture.ts
var { thumb, index, middle, ring, pinky } = Finger;
var { none, half, full } = FingerCurl;
var { verticalUp, verticalDown, horizontalLeft, horizontalRight, diagonalUpRight, diagonalUpLeft, diagonalDownRight, diagonalDownLeft } = FingerDirection;
var ThumbsUp = new FingerGesture("thumbs up");
ThumbsUp.curl(thumb, none, 1);
ThumbsUp.direction(thumb, verticalUp, 1);
ThumbsUp.direction(thumb, diagonalUpLeft, 0.25);
ThumbsUp.direction(thumb, diagonalUpRight, 0.25);
for (const finger of [Finger.index, Finger.middle, Finger.ring, Finger.pinky]) {
  ThumbsUp.curl(finger, full, 1);
  ThumbsUp.direction(finger, horizontalLeft, 1);
  ThumbsUp.direction(finger, horizontalRight, 1);
}
var Victory = new FingerGesture("victory");
Victory.curl(thumb, half, 0.5);
Victory.curl(thumb, none, 0.5);
Victory.direction(thumb, verticalUp, 1);
Victory.direction(thumb, diagonalUpLeft, 1);
Victory.curl(index, none, 1);
Victory.direction(index, verticalUp, 0.75);
Victory.direction(index, diagonalUpLeft, 1);
Victory.curl(middle, none, 1);
Victory.direction(middle, verticalUp, 1);
Victory.direction(middle, diagonalUpLeft, 0.75);
Victory.curl(ring, full, 1);
Victory.direction(ring, verticalUp, 0.2);
Victory.direction(ring, diagonalUpLeft, 1);
Victory.direction(ring, horizontalLeft, 0.2);
Victory.curl(pinky, full, 1);
Victory.direction(pinky, verticalUp, 0.2);
Victory.direction(pinky, diagonalUpLeft, 1);
Victory.direction(pinky, horizontalLeft, 0.2);
Victory.weight(index, 2);
Victory.weight(middle, 2);
var Point = new FingerGesture("point");
Point.curl(thumb, full, 1);
Point.curl(index, none, 0.5);
Point.curl(middle, full, 0.5);
Point.curl(ring, full, 0.5);
Point.curl(pinky, full, 0.5);
Point.weight(index, 2);
Point.weight(middle, 2);
var MiddleFinger = new FingerGesture("middle finger");
MiddleFinger.curl(thumb, none, 1);
MiddleFinger.curl(index, full, 0.5);
MiddleFinger.curl(middle, full, 0.5);
MiddleFinger.curl(ring, full, 0.5);
MiddleFinger.curl(pinky, full, 0.5);
MiddleFinger.weight(index, 2);
MiddleFinger.weight(middle, 2);
var OpenPalm = new FingerGesture("open palm");
OpenPalm.curl(thumb, none, 0.75);
OpenPalm.curl(index, none, 0.75);
OpenPalm.curl(middle, none, 0.75);
OpenPalm.curl(ring, none, 0.75);
OpenPalm.curl(pinky, none, 0.75);
var fingergesture_default = [ThumbsUp, Victory, Point, MiddleFinger, OpenPalm];

// src/hand/fingerpose.ts
var minConfidence = 0.7;
var options3 = {
  // curl estimation
  HALF_CURL_START_LIMIT: 60,
  NO_CURL_START_LIMIT: 130,
  // direction estimation
  DISTANCE_VOTE_POWER: 1.1,
  SINGLE_ANGLE_VOTE_POWER: 0.9,
  TOTAL_ANGLE_VOTE_POWER: 1.6
};
function calculateSlope(point1x, point1y, point2x, point2y) {
  const value = (point1y - point2y) / (point1x - point2x);
  let slope = Math.atan(value) * 180 / Math.PI;
  if (slope <= 0)
    slope = -slope;
  else if (slope > 0)
    slope = 180 - slope;
  return slope;
}
function getSlopes(point1, point2) {
  if (!point1 || !point2)
    return [0, 0];
  const slopeXY = calculateSlope(point1[0], point1[1], point2[0], point2[1]);
  if (point1.length === 2)
    return slopeXY;
  const slopeYZ = calculateSlope(point1[1], point1[2], point2[1], point2[2]);
  return [slopeXY, slopeYZ];
}
function angleOrientationAt(angle, weightageAt = 1) {
  let isVertical = 0;
  let isDiagonal = 0;
  let isHorizontal = 0;
  if (angle >= 75 && angle <= 105)
    isVertical = 1 * weightageAt;
  else if (angle >= 25 && angle <= 155)
    isDiagonal = 1 * weightageAt;
  else
    isHorizontal = 1 * weightageAt;
  return [isVertical, isDiagonal, isHorizontal];
}
function estimateFingerCurl(startPoint, midPoint, endPoint) {
  const start_mid_x_dist = startPoint[0] - midPoint[0];
  const start_end_x_dist = startPoint[0] - endPoint[0];
  const mid_end_x_dist = midPoint[0] - endPoint[0];
  const start_mid_y_dist = startPoint[1] - midPoint[1];
  const start_end_y_dist = startPoint[1] - endPoint[1];
  const mid_end_y_dist = midPoint[1] - endPoint[1];
  const start_mid_z_dist = startPoint[2] - midPoint[2];
  const start_end_z_dist = startPoint[2] - endPoint[2];
  const mid_end_z_dist = midPoint[2] - endPoint[2];
  const start_mid_dist = Math.sqrt(start_mid_x_dist * start_mid_x_dist + start_mid_y_dist * start_mid_y_dist + start_mid_z_dist * start_mid_z_dist);
  const start_end_dist = Math.sqrt(start_end_x_dist * start_end_x_dist + start_end_y_dist * start_end_y_dist + start_end_z_dist * start_end_z_dist);
  const mid_end_dist = Math.sqrt(mid_end_x_dist * mid_end_x_dist + mid_end_y_dist * mid_end_y_dist + mid_end_z_dist * mid_end_z_dist);
  let cos_in = (mid_end_dist * mid_end_dist + start_mid_dist * start_mid_dist - start_end_dist * start_end_dist) / (2 * mid_end_dist * start_mid_dist);
  if (cos_in > 1)
    cos_in = 1;
  else if (cos_in < -1)
    cos_in = -1;
  let angleOfCurve = Math.acos(cos_in);
  angleOfCurve = 57.2958 * angleOfCurve % 180;
  let fingerCurl;
  if (angleOfCurve > options3.NO_CURL_START_LIMIT)
    fingerCurl = FingerCurl.none;
  else if (angleOfCurve > options3.HALF_CURL_START_LIMIT)
    fingerCurl = FingerCurl.half;
  else
    fingerCurl = FingerCurl.full;
  return fingerCurl;
}
function estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x) {
  let estimatedDirection;
  if (max_dist_x === Math.abs(start_end_x_dist)) {
    if (start_end_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  } else if (max_dist_x === Math.abs(start_mid_x_dist)) {
    if (start_mid_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  } else {
    if (mid_end_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  }
  return estimatedDirection;
}
function estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y) {
  let estimatedDirection;
  if (max_dist_y === Math.abs(start_end_y_dist)) {
    if (start_end_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  } else if (max_dist_y === Math.abs(start_mid_y_dist)) {
    if (start_mid_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  } else {
    if (mid_end_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  }
  return estimatedDirection;
}
function estimateDiagonalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y, start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x) {
  let estimatedDirection;
  const reqd_vertical_direction = estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y);
  const reqd_horizontal_direction = estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  if (reqd_vertical_direction === FingerDirection.verticalUp) {
    if (reqd_horizontal_direction === FingerDirection.horizontalLeft)
      estimatedDirection = FingerDirection.diagonalUpLeft;
    else
      estimatedDirection = FingerDirection.diagonalUpRight;
  } else {
    if (reqd_horizontal_direction === FingerDirection.horizontalLeft)
      estimatedDirection = FingerDirection.diagonalDownLeft;
    else
      estimatedDirection = FingerDirection.diagonalDownRight;
  }
  return estimatedDirection;
}
function calculateFingerDirection(startPoint, midPoint, endPoint, fingerSlopes) {
  const start_mid_x_dist = startPoint[0] - midPoint[0];
  const start_end_x_dist = startPoint[0] - endPoint[0];
  const mid_end_x_dist = midPoint[0] - endPoint[0];
  const start_mid_y_dist = startPoint[1] - midPoint[1];
  const start_end_y_dist = startPoint[1] - endPoint[1];
  const mid_end_y_dist = midPoint[1] - endPoint[1];
  const max_dist_x = Math.max(Math.abs(start_mid_x_dist), Math.abs(start_end_x_dist), Math.abs(mid_end_x_dist));
  const max_dist_y = Math.max(Math.abs(start_mid_y_dist), Math.abs(start_end_y_dist), Math.abs(mid_end_y_dist));
  let voteVertical = 0;
  let voteDiagonal = 0;
  let voteHorizontal = 0;
  const start_end_x_y_dist_ratio = max_dist_y / (max_dist_x + 1e-5);
  if (start_end_x_y_dist_ratio > 1.5)
    voteVertical += options3.DISTANCE_VOTE_POWER;
  else if (start_end_x_y_dist_ratio > 0.66)
    voteDiagonal += options3.DISTANCE_VOTE_POWER;
  else
    voteHorizontal += options3.DISTANCE_VOTE_POWER;
  const start_mid_dist = Math.sqrt(start_mid_x_dist * start_mid_x_dist + start_mid_y_dist * start_mid_y_dist);
  const start_end_dist = Math.sqrt(start_end_x_dist * start_end_x_dist + start_end_y_dist * start_end_y_dist);
  const mid_end_dist = Math.sqrt(mid_end_x_dist * mid_end_x_dist + mid_end_y_dist * mid_end_y_dist);
  const max_dist = Math.max(start_mid_dist, start_end_dist, mid_end_dist);
  let calc_start_point_x = startPoint[0];
  let calc_start_point_y = startPoint[1];
  let calc_end_point_x = endPoint[0];
  let calc_end_point_y = endPoint[1];
  if (max_dist === start_mid_dist) {
    calc_end_point_x = endPoint[0];
    calc_end_point_y = endPoint[1];
  } else if (max_dist === mid_end_dist) {
    calc_start_point_x = midPoint[0];
    calc_start_point_y = midPoint[1];
  }
  const calcStartPoint = [calc_start_point_x, calc_start_point_y];
  const calcEndPoint = [calc_end_point_x, calc_end_point_y];
  const totalAngle = getSlopes(calcStartPoint, calcEndPoint);
  const votes = angleOrientationAt(totalAngle, options3.TOTAL_ANGLE_VOTE_POWER);
  voteVertical += votes[0];
  voteDiagonal += votes[1];
  voteHorizontal += votes[2];
  for (const fingerSlope of fingerSlopes) {
    const fingerVotes = angleOrientationAt(fingerSlope, options3.SINGLE_ANGLE_VOTE_POWER);
    voteVertical += fingerVotes[0];
    voteDiagonal += fingerVotes[1];
    voteHorizontal += fingerVotes[2];
  }
  let estimatedDirection;
  if (voteVertical === Math.max(voteVertical, voteDiagonal, voteHorizontal)) {
    estimatedDirection = estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y);
  } else if (voteHorizontal === Math.max(voteDiagonal, voteHorizontal)) {
    estimatedDirection = estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  } else {
    estimatedDirection = estimateDiagonalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y, start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  }
  return estimatedDirection;
}
function estimate(landmarks) {
  const slopesXY = [];
  const slopesYZ = [];
  const fingerCurls = [];
  const fingerDirections = [];
  if (!landmarks)
    return { curls: fingerCurls, directions: fingerDirections };
  for (const finger of Finger.all) {
    const points = Finger.getPoints(finger);
    const slopeAtXY = [];
    const slopeAtYZ = [];
    for (const point2 of points) {
      const point1 = landmarks[point2[0]];
      const point22 = landmarks[point2[1]];
      const slopes = getSlopes(point1, point22);
      const slopeXY = slopes[0];
      const slopeYZ = slopes[1];
      slopeAtXY.push(slopeXY);
      slopeAtYZ.push(slopeYZ);
    }
    slopesXY.push(slopeAtXY);
    slopesYZ.push(slopeAtYZ);
  }
  for (const finger of Finger.all) {
    const pointIndexAt = finger === Finger.thumb ? 1 : 0;
    const fingerPointsAt = Finger.getPoints(finger);
    const startPoint = landmarks[fingerPointsAt[pointIndexAt][0]];
    const midPoint = landmarks[fingerPointsAt[pointIndexAt + 1][1]];
    const endPoint = landmarks[fingerPointsAt[3][1]];
    const fingerCurled = estimateFingerCurl(startPoint, midPoint, endPoint);
    const fingerPosition = calculateFingerDirection(startPoint, midPoint, endPoint, slopesXY[finger].slice(pointIndexAt));
    fingerCurls[finger] = fingerCurled;
    fingerDirections[finger] = fingerPosition;
  }
  return { curls: fingerCurls, directions: fingerDirections };
}
function analyze(keypoints) {
  if (!keypoints || keypoints.length === 0)
    return null;
  const estimatorRes = estimate(keypoints);
  const landmarks = {};
  for (const fingerIdx of Finger.all) {
    landmarks[Finger.getName(fingerIdx)] = {
      curl: FingerCurl.getName(estimatorRes.curls[fingerIdx]),
      direction: FingerDirection.getName(estimatorRes.directions[fingerIdx])
    };
  }
  return landmarks;
}
function match(keypoints) {
  const poses = [];
  if (!keypoints || keypoints.length === 0)
    return poses;
  const estimatorRes = estimate(keypoints);
  for (const gesture2 of fingergesture_default) {
    const confidence = gesture2.matchAgainst(estimatorRes.curls, estimatorRes.directions);
    if (confidence >= minConfidence)
      poses.push({ name: gesture2.name, confidence });
  }
  return poses;
}

// src/gesture/gesture.ts
var body2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    const leftWrist = res[i].keypoints.find((a) => a.part === "leftWrist");
    const rightWrist = res[i].keypoints.find((a) => a.part === "rightWrist");
    const nose = res[i].keypoints.find((a) => a.part === "nose");
    if (nose && leftWrist && rightWrist && leftWrist.position[1] < nose.position[1] && rightWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "i give up" });
    else if (nose && leftWrist && leftWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "raise left hand" });
    else if (nose && rightWrist && rightWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "raise right hand" });
    const leftShoulder = res[i].keypoints.find((a) => a.part === "leftShoulder");
    const rightShoulder = res[i].keypoints.find((a) => a.part === "rightShoulder");
    if (leftShoulder && rightShoulder && Math.abs(leftShoulder.positionRaw[1] - rightShoulder.positionRaw[1]) > 0.1) {
      gestures.push({ body: i, gesture: `leaning ${leftShoulder.position[1] > rightShoulder.position[1] ? "left" : "right"}` });
    }
  }
  return gestures;
};
var face2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    if (res[i].mesh && res[i].mesh.length > 450) {
      const zDiff = (res[i].mesh[33][2] || 0) - (res[i].mesh[263][2] || 0);
      const xDiff = res[i].mesh[33][0] - res[i].mesh[263][0];
      if (Math.abs(zDiff / xDiff) <= 0.15)
        gestures.push({ face: i, gesture: "facing center" });
      else
        gestures.push({ face: i, gesture: `facing ${zDiff < 0 ? "left" : "right"}` });
      const openLeft = Math.abs(res[i].mesh[374][1] - res[i].mesh[386][1]) / Math.abs(res[i].mesh[443][1] - res[i].mesh[450][1]);
      if (openLeft < 0.2)
        gestures.push({ face: i, gesture: "blink left eye" });
      const openRight = Math.abs(res[i].mesh[145][1] - res[i].mesh[159][1]) / Math.abs(res[i].mesh[223][1] - res[i].mesh[230][1]);
      if (openRight < 0.2)
        gestures.push({ face: i, gesture: "blink right eye" });
      const mouthOpen = Math.min(100, 500 * Math.abs(res[i].mesh[13][1] - res[i].mesh[14][1]) / Math.abs(res[i].mesh[10][1] - res[i].mesh[152][1]));
      if (mouthOpen > 10)
        gestures.push({ face: i, gesture: `mouth ${Math.trunc(mouthOpen)}% open` });
      const chinDepth = res[i].mesh[152][2] || 0;
      if (Math.abs(chinDepth) > 10)
        gestures.push({ face: i, gesture: `head ${chinDepth < 0 ? "up" : "down"}` });
    }
  }
  return gestures;
};
var iris2 = (res) => {
  var _a, _b, _c2, _d2;
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    if (!((_b = (_a = res[i].annotations) == null ? void 0 : _a.leftEyeIris) == null ? void 0 : _b[0]) || !((_d2 = (_c2 = res[i].annotations) == null ? void 0 : _c2.rightEyeIris) == null ? void 0 : _d2[0]))
      continue;
    const sizeXLeft = res[i].annotations.leftEyeIris[3][0] - res[i].annotations.leftEyeIris[1][0];
    const sizeYLeft = res[i].annotations.leftEyeIris[4][1] - res[i].annotations.leftEyeIris[2][1];
    const areaLeft = Math.abs(sizeXLeft * sizeYLeft);
    const sizeXRight = res[i].annotations.rightEyeIris[3][0] - res[i].annotations.rightEyeIris[1][0];
    const sizeYRight = res[i].annotations.rightEyeIris[4][1] - res[i].annotations.rightEyeIris[2][1];
    const areaRight = Math.abs(sizeXRight * sizeYRight);
    let center = false;
    const difference = Math.abs(areaLeft - areaRight) / Math.max(areaLeft, areaRight);
    if (difference < 0.25) {
      center = true;
      gestures.push({ iris: i, gesture: "facing center" });
    }
    const leftIrisCenterX = Math.abs(res[i].mesh[263][0] - res[i].annotations.leftEyeIris[0][0]) / res[i].box[2];
    const rightIrisCenterX = Math.abs(res[i].mesh[33][0] - res[i].annotations.rightEyeIris[0][0]) / res[i].box[2];
    if (leftIrisCenterX > 0.06 || rightIrisCenterX > 0.06)
      center = false;
    if (leftIrisCenterX > rightIrisCenterX) {
      if (rightIrisCenterX > 0.04)
        gestures.push({ iris: i, gesture: "looking right" });
    } else {
      if (leftIrisCenterX > 0.04)
        gestures.push({ iris: i, gesture: "looking left" });
    }
    const rightIrisCenterY = Math.abs(res[i].mesh[145][1] - res[i].annotations.rightEyeIris[0][1]) / res[i].box[3];
    const leftIrisCenterY = Math.abs(res[i].mesh[374][1] - res[i].annotations.leftEyeIris[0][1]) / res[i].box[3];
    if (leftIrisCenterY < 0.01 || rightIrisCenterY < 0.01 || leftIrisCenterY > 0.022 || rightIrisCenterY > 0.022)
      center = false;
    if (leftIrisCenterY < 0.01 || rightIrisCenterY < 0.01)
      gestures.push({ iris: i, gesture: "looking down" });
    if (leftIrisCenterY > 0.022 || rightIrisCenterY > 0.022)
      gestures.push({ iris: i, gesture: "looking up" });
    if (center)
      gestures.push({ iris: i, gesture: "looking center" });
  }
  return gestures;
};
var hand2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    const fingers = [];
    if (res[i].annotations) {
      for (const [finger, pos] of Object.entries(res[i].annotations)) {
        if (finger !== "palmBase" && Array.isArray(pos) && pos[0])
          fingers.push({ name: finger.toLowerCase(), position: pos[0] });
      }
    }
    if (fingers && fingers.length > 0) {
      const closest = fingers.reduce((best, a) => (best.position[2] || 0) < (a.position[2] || 0) ? best : a);
      gestures.push({ hand: i, gesture: `${closest.name} forward` });
      const highest = fingers.reduce((best, a) => best.position[1] < a.position[1] ? best : a);
      gestures.push({ hand: i, gesture: `${highest.name} up` });
    }
    if (res[i].keypoints) {
      const poses = match(res[i].keypoints);
      for (const pose of poses)
        gestures.push({ hand: i, gesture: pose.name });
    }
  }
  return gestures;
};

// src/hand/handposeutil.ts
function getBoxSize2(box) {
  return [
    Math.abs(box.endPoint[0] - box.startPoint[0]),
    Math.abs(box.endPoint[1] - box.startPoint[1])
  ];
}
function getBoxCenter2(box) {
  return [
    box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2,
    box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2
  ];
}
function cutBoxFromImageAndResize(box, image, cropSize) {
  const h = image.shape[1];
  const w10 = image.shape[2];
  const boxes = [[
    box.startPoint[1] / h,
    box.startPoint[0] / w10,
    box.endPoint[1] / h,
    box.endPoint[0] / w10
  ]];
  return Kj.cropAndResize(image, boxes, [0], cropSize);
}
function scaleBoxCoordinates2(box, factor) {
  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];
  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];
  const palmLandmarks = box.palmLandmarks.map((coord) => {
    const scaledCoord = [coord[0] * factor[0], coord[1] * factor[1]];
    return scaledCoord;
  });
  return { startPoint, endPoint, palmLandmarks, confidence: box.confidence };
}
function enlargeBox2(box, factor = 1.5) {
  const center = getBoxCenter2(box);
  const size2 = getBoxSize2(box);
  const newHalfSize = [factor * size2[0] / 2, factor * size2[1] / 2];
  const startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]];
  const endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]];
  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };
}
function squarifyBox2(box) {
  const centers = getBoxCenter2(box);
  const size2 = getBoxSize2(box);
  const maxEdge = Math.max(...size2);
  const halfSize = maxEdge / 2;
  const startPoint = [centers[0] - halfSize, centers[1] - halfSize];
  const endPoint = [centers[0] + halfSize, centers[1] + halfSize];
  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };
}
function normalizeRadians2(angle) {
  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
}
function computeRotation2(point1, point2) {
  const radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);
  return normalizeRadians2(radians);
}
var buildTranslationMatrix2 = (x, y8) => [[1, 0, x], [0, 1, y8], [0, 0, 1]];
function dot2(v12, v22) {
  let product = 0;
  for (let i = 0; i < v12.length; i++) {
    product += v12[i] * v22[i];
  }
  return product;
}
function getColumnFrom2DArr2(arr, columnIndex) {
  const column = [];
  for (let i = 0; i < arr.length; i++) {
    column.push(arr[i][columnIndex]);
  }
  return column;
}
function multiplyTransformMatrices2(mat1, mat2) {
  const product = [];
  const size2 = mat1.length;
  for (let row = 0; row < size2; row++) {
    product.push([]);
    for (let col = 0; col < size2; col++) {
      product[row].push(dot2(mat1[row], getColumnFrom2DArr2(mat2, col)));
    }
  }
  return product;
}
function buildRotationMatrix2(rotation, center) {
  const cosA = Math.cos(rotation);
  const sinA = Math.sin(rotation);
  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
  const translationMatrix = buildTranslationMatrix2(center[0], center[1]);
  const translationTimesRotation = multiplyTransformMatrices2(translationMatrix, rotationMatrix);
  const negativeTranslationMatrix = buildTranslationMatrix2(-center[0], -center[1]);
  return multiplyTransformMatrices2(translationTimesRotation, negativeTranslationMatrix);
}
function invertTransformMatrix2(matrix) {
  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
  const translationComponent = [matrix[0][2], matrix[1][2]];
  const invertedTranslation = [
    -dot2(rotationComponent[0], translationComponent),
    -dot2(rotationComponent[1], translationComponent)
  ];
  return [
    rotationComponent[0].concat(invertedTranslation[0]),
    rotationComponent[1].concat(invertedTranslation[1]),
    [0, 0, 1]
  ];
}
function rotatePoint2(homogeneousCoordinate, rotationMatrix) {
  return [
    dot2(homogeneousCoordinate, rotationMatrix[0]),
    dot2(homogeneousCoordinate, rotationMatrix[1])
  ];
}

// src/hand/handposeanchors.ts
var anchors2 = [
  { x: 0.015625, y: 0.015625 },
  { x: 0.015625, y: 0.015625 },
  { x: 0.046875, y: 0.015625 },
  { x: 0.046875, y: 0.015625 },
  { x: 0.078125, y: 0.015625 },
  { x: 0.078125, y: 0.015625 },
  { x: 0.109375, y: 0.015625 },
  { x: 0.109375, y: 0.015625 },
  { x: 0.140625, y: 0.015625 },
  { x: 0.140625, y: 0.015625 },
  { x: 0.171875, y: 0.015625 },
  { x: 0.171875, y: 0.015625 },
  { x: 0.203125, y: 0.015625 },
  { x: 0.203125, y: 0.015625 },
  { x: 0.234375, y: 0.015625 },
  { x: 0.234375, y: 0.015625 },
  { x: 0.265625, y: 0.015625 },
  { x: 0.265625, y: 0.015625 },
  { x: 0.296875, y: 0.015625 },
  { x: 0.296875, y: 0.015625 },
  { x: 0.328125, y: 0.015625 },
  { x: 0.328125, y: 0.015625 },
  { x: 0.359375, y: 0.015625 },
  { x: 0.359375, y: 0.015625 },
  { x: 0.390625, y: 0.015625 },
  { x: 0.390625, y: 0.015625 },
  { x: 0.421875, y: 0.015625 },
  { x: 0.421875, y: 0.015625 },
  { x: 0.453125, y: 0.015625 },
  { x: 0.453125, y: 0.015625 },
  { x: 0.484375, y: 0.015625 },
  { x: 0.484375, y: 0.015625 },
  { x: 0.515625, y: 0.015625 },
  { x: 0.515625, y: 0.015625 },
  { x: 0.546875, y: 0.015625 },
  { x: 0.546875, y: 0.015625 },
  { x: 0.578125, y: 0.015625 },
  { x: 0.578125, y: 0.015625 },
  { x: 0.609375, y: 0.015625 },
  { x: 0.609375, y: 0.015625 },
  { x: 0.640625, y: 0.015625 },
  { x: 0.640625, y: 0.015625 },
  { x: 0.671875, y: 0.015625 },
  { x: 0.671875, y: 0.015625 },
  { x: 0.703125, y: 0.015625 },
  { x: 0.703125, y: 0.015625 },
  { x: 0.734375, y: 0.015625 },
  { x: 0.734375, y: 0.015625 },
  { x: 0.765625, y: 0.015625 },
  { x: 0.765625, y: 0.015625 },
  { x: 0.796875, y: 0.015625 },
  { x: 0.796875, y: 0.015625 },
  { x: 0.828125, y: 0.015625 },
  { x: 0.828125, y: 0.015625 },
  { x: 0.859375, y: 0.015625 },
  { x: 0.859375, y: 0.015625 },
  { x: 0.890625, y: 0.015625 },
  { x: 0.890625, y: 0.015625 },
  { x: 0.921875, y: 0.015625 },
  { x: 0.921875, y: 0.015625 },
  { x: 0.953125, y: 0.015625 },
  { x: 0.953125, y: 0.015625 },
  { x: 0.984375, y: 0.015625 },
  { x: 0.984375, y: 0.015625 },
  { x: 0.015625, y: 0.046875 },
  { x: 0.015625, y: 0.046875 },
  { x: 0.046875, y: 0.046875 },
  { x: 0.046875, y: 0.046875 },
  { x: 0.078125, y: 0.046875 },
  { x: 0.078125, y: 0.046875 },
  { x: 0.109375, y: 0.046875 },
  { x: 0.109375, y: 0.046875 },
  { x: 0.140625, y: 0.046875 },
  { x: 0.140625, y: 0.046875 },
  { x: 0.171875, y: 0.046875 },
  { x: 0.171875, y: 0.046875 },
  { x: 0.203125, y: 0.046875 },
  { x: 0.203125, y: 0.046875 },
  { x: 0.234375, y: 0.046875 },
  { x: 0.234375, y: 0.046875 },
  { x: 0.265625, y: 0.046875 },
  { x: 0.265625, y: 0.046875 },
  { x: 0.296875, y: 0.046875 },
  { x: 0.296875, y: 0.046875 },
  { x: 0.328125, y: 0.046875 },
  { x: 0.328125, y: 0.046875 },
  { x: 0.359375, y: 0.046875 },
  { x: 0.359375, y: 0.046875 },
  { x: 0.390625, y: 0.046875 },
  { x: 0.390625, y: 0.046875 },
  { x: 0.421875, y: 0.046875 },
  { x: 0.421875, y: 0.046875 },
  { x: 0.453125, y: 0.046875 },
  { x: 0.453125, y: 0.046875 },
  { x: 0.484375, y: 0.046875 },
  { x: 0.484375, y: 0.046875 },
  { x: 0.515625, y: 0.046875 },
  { x: 0.515625, y: 0.046875 },
  { x: 0.546875, y: 0.046875 },
  { x: 0.546875, y: 0.046875 },
  { x: 0.578125, y: 0.046875 },
  { x: 0.578125, y: 0.046875 },
  { x: 0.609375, y: 0.046875 },
  { x: 0.609375, y: 0.046875 },
  { x: 0.640625, y: 0.046875 },
  { x: 0.640625, y: 0.046875 },
  { x: 0.671875, y: 0.046875 },
  { x: 0.671875, y: 0.046875 },
  { x: 0.703125, y: 0.046875 },
  { x: 0.703125, y: 0.046875 },
  { x: 0.734375, y: 0.046875 },
  { x: 0.734375, y: 0.046875 },
  { x: 0.765625, y: 0.046875 },
  { x: 0.765625, y: 0.046875 },
  { x: 0.796875, y: 0.046875 },
  { x: 0.796875, y: 0.046875 },
  { x: 0.828125, y: 0.046875 },
  { x: 0.828125, y: 0.046875 },
  { x: 0.859375, y: 0.046875 },
  { x: 0.859375, y: 0.046875 },
  { x: 0.890625, y: 0.046875 },
  { x: 0.890625, y: 0.046875 },
  { x: 0.921875, y: 0.046875 },
  { x: 0.921875, y: 0.046875 },
  { x: 0.953125, y: 0.046875 },
  { x: 0.953125, y: 0.046875 },
  { x: 0.984375, y: 0.046875 },
  { x: 0.984375, y: 0.046875 },
  { x: 0.015625, y: 0.078125 },
  { x: 0.015625, y: 0.078125 },
  { x: 0.046875, y: 0.078125 },
  { x: 0.046875, y: 0.078125 },
  { x: 0.078125, y: 0.078125 },
  { x: 0.078125, y: 0.078125 },
  { x: 0.109375, y: 0.078125 },
  { x: 0.109375, y: 0.078125 },
  { x: 0.140625, y: 0.078125 },
  { x: 0.140625, y: 0.078125 },
  { x: 0.171875, y: 0.078125 },
  { x: 0.171875, y: 0.078125 },
  { x: 0.203125, y: 0.078125 },
  { x: 0.203125, y: 0.078125 },
  { x: 0.234375, y: 0.078125 },
  { x: 0.234375, y: 0.078125 },
  { x: 0.265625, y: 0.078125 },
  { x: 0.265625, y: 0.078125 },
  { x: 0.296875, y: 0.078125 },
  { x: 0.296875, y: 0.078125 },
  { x: 0.328125, y: 0.078125 },
  { x: 0.328125, y: 0.078125 },
  { x: 0.359375, y: 0.078125 },
  { x: 0.359375, y: 0.078125 },
  { x: 0.390625, y: 0.078125 },
  { x: 0.390625, y: 0.078125 },
  { x: 0.421875, y: 0.078125 },
  { x: 0.421875, y: 0.078125 },
  { x: 0.453125, y: 0.078125 },
  { x: 0.453125, y: 0.078125 },
  { x: 0.484375, y: 0.078125 },
  { x: 0.484375, y: 0.078125 },
  { x: 0.515625, y: 0.078125 },
  { x: 0.515625, y: 0.078125 },
  { x: 0.546875, y: 0.078125 },
  { x: 0.546875, y: 0.078125 },
  { x: 0.578125, y: 0.078125 },
  { x: 0.578125, y: 0.078125 },
  { x: 0.609375, y: 0.078125 },
  { x: 0.609375, y: 0.078125 },
  { x: 0.640625, y: 0.078125 },
  { x: 0.640625, y: 0.078125 },
  { x: 0.671875, y: 0.078125 },
  { x: 0.671875, y: 0.078125 },
  { x: 0.703125, y: 0.078125 },
  { x: 0.703125, y: 0.078125 },
  { x: 0.734375, y: 0.078125 },
  { x: 0.734375, y: 0.078125 },
  { x: 0.765625, y: 0.078125 },
  { x: 0.765625, y: 0.078125 },
  { x: 0.796875, y: 0.078125 },
  { x: 0.796875, y: 0.078125 },
  { x: 0.828125, y: 0.078125 },
  { x: 0.828125, y: 0.078125 },
  { x: 0.859375, y: 0.078125 },
  { x: 0.859375, y: 0.078125 },
  { x: 0.890625, y: 0.078125 },
  { x: 0.890625, y: 0.078125 },
  { x: 0.921875, y: 0.078125 },
  { x: 0.921875, y: 0.078125 },
  { x: 0.953125, y: 0.078125 },
  { x: 0.953125, y: 0.078125 },
  { x: 0.984375, y: 0.078125 },
  { x: 0.984375, y: 0.078125 },
  { x: 0.015625, y: 0.109375 },
  { x: 0.015625, y: 0.109375 },
  { x: 0.046875, y: 0.109375 },
  { x: 0.046875, y: 0.109375 },
  { x: 0.078125, y: 0.109375 },
  { x: 0.078125, y: 0.109375 },
  { x: 0.109375, y: 0.109375 },
  { x: 0.109375, y: 0.109375 },
  { x: 0.140625, y: 0.109375 },
  { x: 0.140625, y: 0.109375 },
  { x: 0.171875, y: 0.109375 },
  { x: 0.171875, y: 0.109375 },
  { x: 0.203125, y: 0.109375 },
  { x: 0.203125, y: 0.109375 },
  { x: 0.234375, y: 0.109375 },
  { x: 0.234375, y: 0.109375 },
  { x: 0.265625, y: 0.109375 },
  { x: 0.265625, y: 0.109375 },
  { x: 0.296875, y: 0.109375 },
  { x: 0.296875, y: 0.109375 },
  { x: 0.328125, y: 0.109375 },
  { x: 0.328125, y: 0.109375 },
  { x: 0.359375, y: 0.109375 },
  { x: 0.359375, y: 0.109375 },
  { x: 0.390625, y: 0.109375 },
  { x: 0.390625, y: 0.109375 },
  { x: 0.421875, y: 0.109375 },
  { x: 0.421875, y: 0.109375 },
  { x: 0.453125, y: 0.109375 },
  { x: 0.453125, y: 0.109375 },
  { x: 0.484375, y: 0.109375 },
  { x: 0.484375, y: 0.109375 },
  { x: 0.515625, y: 0.109375 },
  { x: 0.515625, y: 0.109375 },
  { x: 0.546875, y: 0.109375 },
  { x: 0.546875, y: 0.109375 },
  { x: 0.578125, y: 0.109375 },
  { x: 0.578125, y: 0.109375 },
  { x: 0.609375, y: 0.109375 },
  { x: 0.609375, y: 0.109375 },
  { x: 0.640625, y: 0.109375 },
  { x: 0.640625, y: 0.109375 },
  { x: 0.671875, y: 0.109375 },
  { x: 0.671875, y: 0.109375 },
  { x: 0.703125, y: 0.109375 },
  { x: 0.703125, y: 0.109375 },
  { x: 0.734375, y: 0.109375 },
  { x: 0.734375, y: 0.109375 },
  { x: 0.765625, y: 0.109375 },
  { x: 0.765625, y: 0.109375 },
  { x: 0.796875, y: 0.109375 },
  { x: 0.796875, y: 0.109375 },
  { x: 0.828125, y: 0.109375 },
  { x: 0.828125, y: 0.109375 },
  { x: 0.859375, y: 0.109375 },
  { x: 0.859375, y: 0.109375 },
  { x: 0.890625, y: 0.109375 },
  { x: 0.890625, y: 0.109375 },
  { x: 0.921875, y: 0.109375 },
  { x: 0.921875, y: 0.109375 },
  { x: 0.953125, y: 0.109375 },
  { x: 0.953125, y: 0.109375 },
  { x: 0.984375, y: 0.109375 },
  { x: 0.984375, y: 0.109375 },
  { x: 0.015625, y: 0.140625 },
  { x: 0.015625, y: 0.140625 },
  { x: 0.046875, y: 0.140625 },
  { x: 0.046875, y: 0.140625 },
  { x: 0.078125, y: 0.140625 },
  { x: 0.078125, y: 0.140625 },
  { x: 0.109375, y: 0.140625 },
  { x: 0.109375, y: 0.140625 },
  { x: 0.140625, y: 0.140625 },
  { x: 0.140625, y: 0.140625 },
  { x: 0.171875, y: 0.140625 },
  { x: 0.171875, y: 0.140625 },
  { x: 0.203125, y: 0.140625 },
  { x: 0.203125, y: 0.140625 },
  { x: 0.234375, y: 0.140625 },
  { x: 0.234375, y: 0.140625 },
  { x: 0.265625, y: 0.140625 },
  { x: 0.265625, y: 0.140625 },
  { x: 0.296875, y: 0.140625 },
  { x: 0.296875, y: 0.140625 },
  { x: 0.328125, y: 0.140625 },
  { x: 0.328125, y: 0.140625 },
  { x: 0.359375, y: 0.140625 },
  { x: 0.359375, y: 0.140625 },
  { x: 0.390625, y: 0.140625 },
  { x: 0.390625, y: 0.140625 },
  { x: 0.421875, y: 0.140625 },
  { x: 0.421875, y: 0.140625 },
  { x: 0.453125, y: 0.140625 },
  { x: 0.453125, y: 0.140625 },
  { x: 0.484375, y: 0.140625 },
  { x: 0.484375, y: 0.140625 },
  { x: 0.515625, y: 0.140625 },
  { x: 0.515625, y: 0.140625 },
  { x: 0.546875, y: 0.140625 },
  { x: 0.546875, y: 0.140625 },
  { x: 0.578125, y: 0.140625 },
  { x: 0.578125, y: 0.140625 },
  { x: 0.609375, y: 0.140625 },
  { x: 0.609375, y: 0.140625 },
  { x: 0.640625, y: 0.140625 },
  { x: 0.640625, y: 0.140625 },
  { x: 0.671875, y: 0.140625 },
  { x: 0.671875, y: 0.140625 },
  { x: 0.703125, y: 0.140625 },
  { x: 0.703125, y: 0.140625 },
  { x: 0.734375, y: 0.140625 },
  { x: 0.734375, y: 0.140625 },
  { x: 0.765625, y: 0.140625 },
  { x: 0.765625, y: 0.140625 },
  { x: 0.796875, y: 0.140625 },
  { x: 0.796875, y: 0.140625 },
  { x: 0.828125, y: 0.140625 },
  { x: 0.828125, y: 0.140625 },
  { x: 0.859375, y: 0.140625 },
  { x: 0.859375, y: 0.140625 },
  { x: 0.890625, y: 0.140625 },
  { x: 0.890625, y: 0.140625 },
  { x: 0.921875, y: 0.140625 },
  { x: 0.921875, y: 0.140625 },
  { x: 0.953125, y: 0.140625 },
  { x: 0.953125, y: 0.140625 },
  { x: 0.984375, y: 0.140625 },
  { x: 0.984375, y: 0.140625 },
  { x: 0.015625, y: 0.171875 },
  { x: 0.015625, y: 0.171875 },
  { x: 0.046875, y: 0.171875 },
  { x: 0.046875, y: 0.171875 },
  { x: 0.078125, y: 0.171875 },
  { x: 0.078125, y: 0.171875 },
  { x: 0.109375, y: 0.171875 },
  { x: 0.109375, y: 0.171875 },
  { x: 0.140625, y: 0.171875 },
  { x: 0.140625, y: 0.171875 },
  { x: 0.171875, y: 0.171875 },
  { x: 0.171875, y: 0.171875 },
  { x: 0.203125, y: 0.171875 },
  { x: 0.203125, y: 0.171875 },
  { x: 0.234375, y: 0.171875 },
  { x: 0.234375, y: 0.171875 },
  { x: 0.265625, y: 0.171875 },
  { x: 0.265625, y: 0.171875 },
  { x: 0.296875, y: 0.171875 },
  { x: 0.296875, y: 0.171875 },
  { x: 0.328125, y: 0.171875 },
  { x: 0.328125, y: 0.171875 },
  { x: 0.359375, y: 0.171875 },
  { x: 0.359375, y: 0.171875 },
  { x: 0.390625, y: 0.171875 },
  { x: 0.390625, y: 0.171875 },
  { x: 0.421875, y: 0.171875 },
  { x: 0.421875, y: 0.171875 },
  { x: 0.453125, y: 0.171875 },
  { x: 0.453125, y: 0.171875 },
  { x: 0.484375, y: 0.171875 },
  { x: 0.484375, y: 0.171875 },
  { x: 0.515625, y: 0.171875 },
  { x: 0.515625, y: 0.171875 },
  { x: 0.546875, y: 0.171875 },
  { x: 0.546875, y: 0.171875 },
  { x: 0.578125, y: 0.171875 },
  { x: 0.578125, y: 0.171875 },
  { x: 0.609375, y: 0.171875 },
  { x: 0.609375, y: 0.171875 },
  { x: 0.640625, y: 0.171875 },
  { x: 0.640625, y: 0.171875 },
  { x: 0.671875, y: 0.171875 },
  { x: 0.671875, y: 0.171875 },
  { x: 0.703125, y: 0.171875 },
  { x: 0.703125, y: 0.171875 },
  { x: 0.734375, y: 0.171875 },
  { x: 0.734375, y: 0.171875 },
  { x: 0.765625, y: 0.171875 },
  { x: 0.765625, y: 0.171875 },
  { x: 0.796875, y: 0.171875 },
  { x: 0.796875, y: 0.171875 },
  { x: 0.828125, y: 0.171875 },
  { x: 0.828125, y: 0.171875 },
  { x: 0.859375, y: 0.171875 },
  { x: 0.859375, y: 0.171875 },
  { x: 0.890625, y: 0.171875 },
  { x: 0.890625, y: 0.171875 },
  { x: 0.921875, y: 0.171875 },
  { x: 0.921875, y: 0.171875 },
  { x: 0.953125, y: 0.171875 },
  { x: 0.953125, y: 0.171875 },
  { x: 0.984375, y: 0.171875 },
  { x: 0.984375, y: 0.171875 },
  { x: 0.015625, y: 0.203125 },
  { x: 0.015625, y: 0.203125 },
  { x: 0.046875, y: 0.203125 },
  { x: 0.046875, y: 0.203125 },
  { x: 0.078125, y: 0.203125 },
  { x: 0.078125, y: 0.203125 },
  { x: 0.109375, y: 0.203125 },
  { x: 0.109375, y: 0.203125 },
  { x: 0.140625, y: 0.203125 },
  { x: 0.140625, y: 0.203125 },
  { x: 0.171875, y: 0.203125 },
  { x: 0.171875, y: 0.203125 },
  { x: 0.203125, y: 0.203125 },
  { x: 0.203125, y: 0.203125 },
  { x: 0.234375, y: 0.203125 },
  { x: 0.234375, y: 0.203125 },
  { x: 0.265625, y: 0.203125 },
  { x: 0.265625, y: 0.203125 },
  { x: 0.296875, y: 0.203125 },
  { x: 0.296875, y: 0.203125 },
  { x: 0.328125, y: 0.203125 },
  { x: 0.328125, y: 0.203125 },
  { x: 0.359375, y: 0.203125 },
  { x: 0.359375, y: 0.203125 },
  { x: 0.390625, y: 0.203125 },
  { x: 0.390625, y: 0.203125 },
  { x: 0.421875, y: 0.203125 },
  { x: 0.421875, y: 0.203125 },
  { x: 0.453125, y: 0.203125 },
  { x: 0.453125, y: 0.203125 },
  { x: 0.484375, y: 0.203125 },
  { x: 0.484375, y: 0.203125 },
  { x: 0.515625, y: 0.203125 },
  { x: 0.515625, y: 0.203125 },
  { x: 0.546875, y: 0.203125 },
  { x: 0.546875, y: 0.203125 },
  { x: 0.578125, y: 0.203125 },
  { x: 0.578125, y: 0.203125 },
  { x: 0.609375, y: 0.203125 },
  { x: 0.609375, y: 0.203125 },
  { x: 0.640625, y: 0.203125 },
  { x: 0.640625, y: 0.203125 },
  { x: 0.671875, y: 0.203125 },
  { x: 0.671875, y: 0.203125 },
  { x: 0.703125, y: 0.203125 },
  { x: 0.703125, y: 0.203125 },
  { x: 0.734375, y: 0.203125 },
  { x: 0.734375, y: 0.203125 },
  { x: 0.765625, y: 0.203125 },
  { x: 0.765625, y: 0.203125 },
  { x: 0.796875, y: 0.203125 },
  { x: 0.796875, y: 0.203125 },
  { x: 0.828125, y: 0.203125 },
  { x: 0.828125, y: 0.203125 },
  { x: 0.859375, y: 0.203125 },
  { x: 0.859375, y: 0.203125 },
  { x: 0.890625, y: 0.203125 },
  { x: 0.890625, y: 0.203125 },
  { x: 0.921875, y: 0.203125 },
  { x: 0.921875, y: 0.203125 },
  { x: 0.953125, y: 0.203125 },
  { x: 0.953125, y: 0.203125 },
  { x: 0.984375, y: 0.203125 },
  { x: 0.984375, y: 0.203125 },
  { x: 0.015625, y: 0.234375 },
  { x: 0.015625, y: 0.234375 },
  { x: 0.046875, y: 0.234375 },
  { x: 0.046875, y: 0.234375 },
  { x: 0.078125, y: 0.234375 },
  { x: 0.078125, y: 0.234375 },
  { x: 0.109375, y: 0.234375 },
  { x: 0.109375, y: 0.234375 },
  { x: 0.140625, y: 0.234375 },
  { x: 0.140625, y: 0.234375 },
  { x: 0.171875, y: 0.234375 },
  { x: 0.171875, y: 0.234375 },
  { x: 0.203125, y: 0.234375 },
  { x: 0.203125, y: 0.234375 },
  { x: 0.234375, y: 0.234375 },
  { x: 0.234375, y: 0.234375 },
  { x: 0.265625, y: 0.234375 },
  { x: 0.265625, y: 0.234375 },
  { x: 0.296875, y: 0.234375 },
  { x: 0.296875, y: 0.234375 },
  { x: 0.328125, y: 0.234375 },
  { x: 0.328125, y: 0.234375 },
  { x: 0.359375, y: 0.234375 },
  { x: 0.359375, y: 0.234375 },
  { x: 0.390625, y: 0.234375 },
  { x: 0.390625, y: 0.234375 },
  { x: 0.421875, y: 0.234375 },
  { x: 0.421875, y: 0.234375 },
  { x: 0.453125, y: 0.234375 },
  { x: 0.453125, y: 0.234375 },
  { x: 0.484375, y: 0.234375 },
  { x: 0.484375, y: 0.234375 },
  { x: 0.515625, y: 0.234375 },
  { x: 0.515625, y: 0.234375 },
  { x: 0.546875, y: 0.234375 },
  { x: 0.546875, y: 0.234375 },
  { x: 0.578125, y: 0.234375 },
  { x: 0.578125, y: 0.234375 },
  { x: 0.609375, y: 0.234375 },
  { x: 0.609375, y: 0.234375 },
  { x: 0.640625, y: 0.234375 },
  { x: 0.640625, y: 0.234375 },
  { x: 0.671875, y: 0.234375 },
  { x: 0.671875, y: 0.234375 },
  { x: 0.703125, y: 0.234375 },
  { x: 0.703125, y: 0.234375 },
  { x: 0.734375, y: 0.234375 },
  { x: 0.734375, y: 0.234375 },
  { x: 0.765625, y: 0.234375 },
  { x: 0.765625, y: 0.234375 },
  { x: 0.796875, y: 0.234375 },
  { x: 0.796875, y: 0.234375 },
  { x: 0.828125, y: 0.234375 },
  { x: 0.828125, y: 0.234375 },
  { x: 0.859375, y: 0.234375 },
  { x: 0.859375, y: 0.234375 },
  { x: 0.890625, y: 0.234375 },
  { x: 0.890625, y: 0.234375 },
  { x: 0.921875, y: 0.234375 },
  { x: 0.921875, y: 0.234375 },
  { x: 0.953125, y: 0.234375 },
  { x: 0.953125, y: 0.234375 },
  { x: 0.984375, y: 0.234375 },
  { x: 0.984375, y: 0.234375 },
  { x: 0.015625, y: 0.265625 },
  { x: 0.015625, y: 0.265625 },
  { x: 0.046875, y: 0.265625 },
  { x: 0.046875, y: 0.265625 },
  { x: 0.078125, y: 0.265625 },
  { x: 0.078125, y: 0.265625 },
  { x: 0.109375, y: 0.265625 },
  { x: 0.109375, y: 0.265625 },
  { x: 0.140625, y: 0.265625 },
  { x: 0.140625, y: 0.265625 },
  { x: 0.171875, y: 0.265625 },
  { x: 0.171875, y: 0.265625 },
  { x: 0.203125, y: 0.265625 },
  { x: 0.203125, y: 0.265625 },
  { x: 0.234375, y: 0.265625 },
  { x: 0.234375, y: 0.265625 },
  { x: 0.265625, y: 0.265625 },
  { x: 0.265625, y: 0.265625 },
  { x: 0.296875, y: 0.265625 },
  { x: 0.296875, y: 0.265625 },
  { x: 0.328125, y: 0.265625 },
  { x: 0.328125, y: 0.265625 },
  { x: 0.359375, y: 0.265625 },
  { x: 0.359375, y: 0.265625 },
  { x: 0.390625, y: 0.265625 },
  { x: 0.390625, y: 0.265625 },
  { x: 0.421875, y: 0.265625 },
  { x: 0.421875, y: 0.265625 },
  { x: 0.453125, y: 0.265625 },
  { x: 0.453125, y: 0.265625 },
  { x: 0.484375, y: 0.265625 },
  { x: 0.484375, y: 0.265625 },
  { x: 0.515625, y: 0.265625 },
  { x: 0.515625, y: 0.265625 },
  { x: 0.546875, y: 0.265625 },
  { x: 0.546875, y: 0.265625 },
  { x: 0.578125, y: 0.265625 },
  { x: 0.578125, y: 0.265625 },
  { x: 0.609375, y: 0.265625 },
  { x: 0.609375, y: 0.265625 },
  { x: 0.640625, y: 0.265625 },
  { x: 0.640625, y: 0.265625 },
  { x: 0.671875, y: 0.265625 },
  { x: 0.671875, y: 0.265625 },
  { x: 0.703125, y: 0.265625 },
  { x: 0.703125, y: 0.265625 },
  { x: 0.734375, y: 0.265625 },
  { x: 0.734375, y: 0.265625 },
  { x: 0.765625, y: 0.265625 },
  { x: 0.765625, y: 0.265625 },
  { x: 0.796875, y: 0.265625 },
  { x: 0.796875, y: 0.265625 },
  { x: 0.828125, y: 0.265625 },
  { x: 0.828125, y: 0.265625 },
  { x: 0.859375, y: 0.265625 },
  { x: 0.859375, y: 0.265625 },
  { x: 0.890625, y: 0.265625 },
  { x: 0.890625, y: 0.265625 },
  { x: 0.921875, y: 0.265625 },
  { x: 0.921875, y: 0.265625 },
  { x: 0.953125, y: 0.265625 },
  { x: 0.953125, y: 0.265625 },
  { x: 0.984375, y: 0.265625 },
  { x: 0.984375, y: 0.265625 },
  { x: 0.015625, y: 0.296875 },
  { x: 0.015625, y: 0.296875 },
  { x: 0.046875, y: 0.296875 },
  { x: 0.046875, y: 0.296875 },
  { x: 0.078125, y: 0.296875 },
  { x: 0.078125, y: 0.296875 },
  { x: 0.109375, y: 0.296875 },
  { x: 0.109375, y: 0.296875 },
  { x: 0.140625, y: 0.296875 },
  { x: 0.140625, y: 0.296875 },
  { x: 0.171875, y: 0.296875 },
  { x: 0.171875, y: 0.296875 },
  { x: 0.203125, y: 0.296875 },
  { x: 0.203125, y: 0.296875 },
  { x: 0.234375, y: 0.296875 },
  { x: 0.234375, y: 0.296875 },
  { x: 0.265625, y: 0.296875 },
  { x: 0.265625, y: 0.296875 },
  { x: 0.296875, y: 0.296875 },
  { x: 0.296875, y: 0.296875 },
  { x: 0.328125, y: 0.296875 },
  { x: 0.328125, y: 0.296875 },
  { x: 0.359375, y: 0.296875 },
  { x: 0.359375, y: 0.296875 },
  { x: 0.390625, y: 0.296875 },
  { x: 0.390625, y: 0.296875 },
  { x: 0.421875, y: 0.296875 },
  { x: 0.421875, y: 0.296875 },
  { x: 0.453125, y: 0.296875 },
  { x: 0.453125, y: 0.296875 },
  { x: 0.484375, y: 0.296875 },
  { x: 0.484375, y: 0.296875 },
  { x: 0.515625, y: 0.296875 },
  { x: 0.515625, y: 0.296875 },
  { x: 0.546875, y: 0.296875 },
  { x: 0.546875, y: 0.296875 },
  { x: 0.578125, y: 0.296875 },
  { x: 0.578125, y: 0.296875 },
  { x: 0.609375, y: 0.296875 },
  { x: 0.609375, y: 0.296875 },
  { x: 0.640625, y: 0.296875 },
  { x: 0.640625, y: 0.296875 },
  { x: 0.671875, y: 0.296875 },
  { x: 0.671875, y: 0.296875 },
  { x: 0.703125, y: 0.296875 },
  { x: 0.703125, y: 0.296875 },
  { x: 0.734375, y: 0.296875 },
  { x: 0.734375, y: 0.296875 },
  { x: 0.765625, y: 0.296875 },
  { x: 0.765625, y: 0.296875 },
  { x: 0.796875, y: 0.296875 },
  { x: 0.796875, y: 0.296875 },
  { x: 0.828125, y: 0.296875 },
  { x: 0.828125, y: 0.296875 },
  { x: 0.859375, y: 0.296875 },
  { x: 0.859375, y: 0.296875 },
  { x: 0.890625, y: 0.296875 },
  { x: 0.890625, y: 0.296875 },
  { x: 0.921875, y: 0.296875 },
  { x: 0.921875, y: 0.296875 },
  { x: 0.953125, y: 0.296875 },
  { x: 0.953125, y: 0.296875 },
  { x: 0.984375, y: 0.296875 },
  { x: 0.984375, y: 0.296875 },
  { x: 0.015625, y: 0.328125 },
  { x: 0.015625, y: 0.328125 },
  { x: 0.046875, y: 0.328125 },
  { x: 0.046875, y: 0.328125 },
  { x: 0.078125, y: 0.328125 },
  { x: 0.078125, y: 0.328125 },
  { x: 0.109375, y: 0.328125 },
  { x: 0.109375, y: 0.328125 },
  { x: 0.140625, y: 0.328125 },
  { x: 0.140625, y: 0.328125 },
  { x: 0.171875, y: 0.328125 },
  { x: 0.171875, y: 0.328125 },
  { x: 0.203125, y: 0.328125 },
  { x: 0.203125, y: 0.328125 },
  { x: 0.234375, y: 0.328125 },
  { x: 0.234375, y: 0.328125 },
  { x: 0.265625, y: 0.328125 },
  { x: 0.265625, y: 0.328125 },
  { x: 0.296875, y: 0.328125 },
  { x: 0.296875, y: 0.328125 },
  { x: 0.328125, y: 0.328125 },
  { x: 0.328125, y: 0.328125 },
  { x: 0.359375, y: 0.328125 },
  { x: 0.359375, y: 0.328125 },
  { x: 0.390625, y: 0.328125 },
  { x: 0.390625, y: 0.328125 },
  { x: 0.421875, y: 0.328125 },
  { x: 0.421875, y: 0.328125 },
  { x: 0.453125, y: 0.328125 },
  { x: 0.453125, y: 0.328125 },
  { x: 0.484375, y: 0.328125 },
  { x: 0.484375, y: 0.328125 },
  { x: 0.515625, y: 0.328125 },
  { x: 0.515625, y: 0.328125 },
  { x: 0.546875, y: 0.328125 },
  { x: 0.546875, y: 0.328125 },
  { x: 0.578125, y: 0.328125 },
  { x: 0.578125, y: 0.328125 },
  { x: 0.609375, y: 0.328125 },
  { x: 0.609375, y: 0.328125 },
  { x: 0.640625, y: 0.328125 },
  { x: 0.640625, y: 0.328125 },
  { x: 0.671875, y: 0.328125 },
  { x: 0.671875, y: 0.328125 },
  { x: 0.703125, y: 0.328125 },
  { x: 0.703125, y: 0.328125 },
  { x: 0.734375, y: 0.328125 },
  { x: 0.734375, y: 0.328125 },
  { x: 0.765625, y: 0.328125 },
  { x: 0.765625, y: 0.328125 },
  { x: 0.796875, y: 0.328125 },
  { x: 0.796875, y: 0.328125 },
  { x: 0.828125, y: 0.328125 },
  { x: 0.828125, y: 0.328125 },
  { x: 0.859375, y: 0.328125 },
  { x: 0.859375, y: 0.328125 },
  { x: 0.890625, y: 0.328125 },
  { x: 0.890625, y: 0.328125 },
  { x: 0.921875, y: 0.328125 },
  { x: 0.921875, y: 0.328125 },
  { x: 0.953125, y: 0.328125 },
  { x: 0.953125, y: 0.328125 },
  { x: 0.984375, y: 0.328125 },
  { x: 0.984375, y: 0.328125 },
  { x: 0.015625, y: 0.359375 },
  { x: 0.015625, y: 0.359375 },
  { x: 0.046875, y: 0.359375 },
  { x: 0.046875, y: 0.359375 },
  { x: 0.078125, y: 0.359375 },
  { x: 0.078125, y: 0.359375 },
  { x: 0.109375, y: 0.359375 },
  { x: 0.109375, y: 0.359375 },
  { x: 0.140625, y: 0.359375 },
  { x: 0.140625, y: 0.359375 },
  { x: 0.171875, y: 0.359375 },
  { x: 0.171875, y: 0.359375 },
  { x: 0.203125, y: 0.359375 },
  { x: 0.203125, y: 0.359375 },
  { x: 0.234375, y: 0.359375 },
  { x: 0.234375, y: 0.359375 },
  { x: 0.265625, y: 0.359375 },
  { x: 0.265625, y: 0.359375 },
  { x: 0.296875, y: 0.359375 },
  { x: 0.296875, y: 0.359375 },
  { x: 0.328125, y: 0.359375 },
  { x: 0.328125, y: 0.359375 },
  { x: 0.359375, y: 0.359375 },
  { x: 0.359375, y: 0.359375 },
  { x: 0.390625, y: 0.359375 },
  { x: 0.390625, y: 0.359375 },
  { x: 0.421875, y: 0.359375 },
  { x: 0.421875, y: 0.359375 },
  { x: 0.453125, y: 0.359375 },
  { x: 0.453125, y: 0.359375 },
  { x: 0.484375, y: 0.359375 },
  { x: 0.484375, y: 0.359375 },
  { x: 0.515625, y: 0.359375 },
  { x: 0.515625, y: 0.359375 },
  { x: 0.546875, y: 0.359375 },
  { x: 0.546875, y: 0.359375 },
  { x: 0.578125, y: 0.359375 },
  { x: 0.578125, y: 0.359375 },
  { x: 0.609375, y: 0.359375 },
  { x: 0.609375, y: 0.359375 },
  { x: 0.640625, y: 0.359375 },
  { x: 0.640625, y: 0.359375 },
  { x: 0.671875, y: 0.359375 },
  { x: 0.671875, y: 0.359375 },
  { x: 0.703125, y: 0.359375 },
  { x: 0.703125, y: 0.359375 },
  { x: 0.734375, y: 0.359375 },
  { x: 0.734375, y: 0.359375 },
  { x: 0.765625, y: 0.359375 },
  { x: 0.765625, y: 0.359375 },
  { x: 0.796875, y: 0.359375 },
  { x: 0.796875, y: 0.359375 },
  { x: 0.828125, y: 0.359375 },
  { x: 0.828125, y: 0.359375 },
  { x: 0.859375, y: 0.359375 },
  { x: 0.859375, y: 0.359375 },
  { x: 0.890625, y: 0.359375 },
  { x: 0.890625, y: 0.359375 },
  { x: 0.921875, y: 0.359375 },
  { x: 0.921875, y: 0.359375 },
  { x: 0.953125, y: 0.359375 },
  { x: 0.953125, y: 0.359375 },
  { x: 0.984375, y: 0.359375 },
  { x: 0.984375, y: 0.359375 },
  { x: 0.015625, y: 0.390625 },
  { x: 0.015625, y: 0.390625 },
  { x: 0.046875, y: 0.390625 },
  { x: 0.046875, y: 0.390625 },
  { x: 0.078125, y: 0.390625 },
  { x: 0.078125, y: 0.390625 },
  { x: 0.109375, y: 0.390625 },
  { x: 0.109375, y: 0.390625 },
  { x: 0.140625, y: 0.390625 },
  { x: 0.140625, y: 0.390625 },
  { x: 0.171875, y: 0.390625 },
  { x: 0.171875, y: 0.390625 },
  { x: 0.203125, y: 0.390625 },
  { x: 0.203125, y: 0.390625 },
  { x: 0.234375, y: 0.390625 },
  { x: 0.234375, y: 0.390625 },
  { x: 0.265625, y: 0.390625 },
  { x: 0.265625, y: 0.390625 },
  { x: 0.296875, y: 0.390625 },
  { x: 0.296875, y: 0.390625 },
  { x: 0.328125, y: 0.390625 },
  { x: 0.328125, y: 0.390625 },
  { x: 0.359375, y: 0.390625 },
  { x: 0.359375, y: 0.390625 },
  { x: 0.390625, y: 0.390625 },
  { x: 0.390625, y: 0.390625 },
  { x: 0.421875, y: 0.390625 },
  { x: 0.421875, y: 0.390625 },
  { x: 0.453125, y: 0.390625 },
  { x: 0.453125, y: 0.390625 },
  { x: 0.484375, y: 0.390625 },
  { x: 0.484375, y: 0.390625 },
  { x: 0.515625, y: 0.390625 },
  { x: 0.515625, y: 0.390625 },
  { x: 0.546875, y: 0.390625 },
  { x: 0.546875, y: 0.390625 },
  { x: 0.578125, y: 0.390625 },
  { x: 0.578125, y: 0.390625 },
  { x: 0.609375, y: 0.390625 },
  { x: 0.609375, y: 0.390625 },
  { x: 0.640625, y: 0.390625 },
  { x: 0.640625, y: 0.390625 },
  { x: 0.671875, y: 0.390625 },
  { x: 0.671875, y: 0.390625 },
  { x: 0.703125, y: 0.390625 },
  { x: 0.703125, y: 0.390625 },
  { x: 0.734375, y: 0.390625 },
  { x: 0.734375, y: 0.390625 },
  { x: 0.765625, y: 0.390625 },
  { x: 0.765625, y: 0.390625 },
  { x: 0.796875, y: 0.390625 },
  { x: 0.796875, y: 0.390625 },
  { x: 0.828125, y: 0.390625 },
  { x: 0.828125, y: 0.390625 },
  { x: 0.859375, y: 0.390625 },
  { x: 0.859375, y: 0.390625 },
  { x: 0.890625, y: 0.390625 },
  { x: 0.890625, y: 0.390625 },
  { x: 0.921875, y: 0.390625 },
  { x: 0.921875, y: 0.390625 },
  { x: 0.953125, y: 0.390625 },
  { x: 0.953125, y: 0.390625 },
  { x: 0.984375, y: 0.390625 },
  { x: 0.984375, y: 0.390625 },
  { x: 0.015625, y: 0.421875 },
  { x: 0.015625, y: 0.421875 },
  { x: 0.046875, y: 0.421875 },
  { x: 0.046875, y: 0.421875 },
  { x: 0.078125, y: 0.421875 },
  { x: 0.078125, y: 0.421875 },
  { x: 0.109375, y: 0.421875 },
  { x: 0.109375, y: 0.421875 },
  { x: 0.140625, y: 0.421875 },
  { x: 0.140625, y: 0.421875 },
  { x: 0.171875, y: 0.421875 },
  { x: 0.171875, y: 0.421875 },
  { x: 0.203125, y: 0.421875 },
  { x: 0.203125, y: 0.421875 },
  { x: 0.234375, y: 0.421875 },
  { x: 0.234375, y: 0.421875 },
  { x: 0.265625, y: 0.421875 },
  { x: 0.265625, y: 0.421875 },
  { x: 0.296875, y: 0.421875 },
  { x: 0.296875, y: 0.421875 },
  { x: 0.328125, y: 0.421875 },
  { x: 0.328125, y: 0.421875 },
  { x: 0.359375, y: 0.421875 },
  { x: 0.359375, y: 0.421875 },
  { x: 0.390625, y: 0.421875 },
  { x: 0.390625, y: 0.421875 },
  { x: 0.421875, y: 0.421875 },
  { x: 0.421875, y: 0.421875 },
  { x: 0.453125, y: 0.421875 },
  { x: 0.453125, y: 0.421875 },
  { x: 0.484375, y: 0.421875 },
  { x: 0.484375, y: 0.421875 },
  { x: 0.515625, y: 0.421875 },
  { x: 0.515625, y: 0.421875 },
  { x: 0.546875, y: 0.421875 },
  { x: 0.546875, y: 0.421875 },
  { x: 0.578125, y: 0.421875 },
  { x: 0.578125, y: 0.421875 },
  { x: 0.609375, y: 0.421875 },
  { x: 0.609375, y: 0.421875 },
  { x: 0.640625, y: 0.421875 },
  { x: 0.640625, y: 0.421875 },
  { x: 0.671875, y: 0.421875 },
  { x: 0.671875, y: 0.421875 },
  { x: 0.703125, y: 0.421875 },
  { x: 0.703125, y: 0.421875 },
  { x: 0.734375, y: 0.421875 },
  { x: 0.734375, y: 0.421875 },
  { x: 0.765625, y: 0.421875 },
  { x: 0.765625, y: 0.421875 },
  { x: 0.796875, y: 0.421875 },
  { x: 0.796875, y: 0.421875 },
  { x: 0.828125, y: 0.421875 },
  { x: 0.828125, y: 0.421875 },
  { x: 0.859375, y: 0.421875 },
  { x: 0.859375, y: 0.421875 },
  { x: 0.890625, y: 0.421875 },
  { x: 0.890625, y: 0.421875 },
  { x: 0.921875, y: 0.421875 },
  { x: 0.921875, y: 0.421875 },
  { x: 0.953125, y: 0.421875 },
  { x: 0.953125, y: 0.421875 },
  { x: 0.984375, y: 0.421875 },
  { x: 0.984375, y: 0.421875 },
  { x: 0.015625, y: 0.453125 },
  { x: 0.015625, y: 0.453125 },
  { x: 0.046875, y: 0.453125 },
  { x: 0.046875, y: 0.453125 },
  { x: 0.078125, y: 0.453125 },
  { x: 0.078125, y: 0.453125 },
  { x: 0.109375, y: 0.453125 },
  { x: 0.109375, y: 0.453125 },
  { x: 0.140625, y: 0.453125 },
  { x: 0.140625, y: 0.453125 },
  { x: 0.171875, y: 0.453125 },
  { x: 0.171875, y: 0.453125 },
  { x: 0.203125, y: 0.453125 },
  { x: 0.203125, y: 0.453125 },
  { x: 0.234375, y: 0.453125 },
  { x: 0.234375, y: 0.453125 },
  { x: 0.265625, y: 0.453125 },
  { x: 0.265625, y: 0.453125 },
  { x: 0.296875, y: 0.453125 },
  { x: 0.296875, y: 0.453125 },
  { x: 0.328125, y: 0.453125 },
  { x: 0.328125, y: 0.453125 },
  { x: 0.359375, y: 0.453125 },
  { x: 0.359375, y: 0.453125 },
  { x: 0.390625, y: 0.453125 },
  { x: 0.390625, y: 0.453125 },
  { x: 0.421875, y: 0.453125 },
  { x: 0.421875, y: 0.453125 },
  { x: 0.453125, y: 0.453125 },
  { x: 0.453125, y: 0.453125 },
  { x: 0.484375, y: 0.453125 },
  { x: 0.484375, y: 0.453125 },
  { x: 0.515625, y: 0.453125 },
  { x: 0.515625, y: 0.453125 },
  { x: 0.546875, y: 0.453125 },
  { x: 0.546875, y: 0.453125 },
  { x: 0.578125, y: 0.453125 },
  { x: 0.578125, y: 0.453125 },
  { x: 0.609375, y: 0.453125 },
  { x: 0.609375, y: 0.453125 },
  { x: 0.640625, y: 0.453125 },
  { x: 0.640625, y: 0.453125 },
  { x: 0.671875, y: 0.453125 },
  { x: 0.671875, y: 0.453125 },
  { x: 0.703125, y: 0.453125 },
  { x: 0.703125, y: 0.453125 },
  { x: 0.734375, y: 0.453125 },
  { x: 0.734375, y: 0.453125 },
  { x: 0.765625, y: 0.453125 },
  { x: 0.765625, y: 0.453125 },
  { x: 0.796875, y: 0.453125 },
  { x: 0.796875, y: 0.453125 },
  { x: 0.828125, y: 0.453125 },
  { x: 0.828125, y: 0.453125 },
  { x: 0.859375, y: 0.453125 },
  { x: 0.859375, y: 0.453125 },
  { x: 0.890625, y: 0.453125 },
  { x: 0.890625, y: 0.453125 },
  { x: 0.921875, y: 0.453125 },
  { x: 0.921875, y: 0.453125 },
  { x: 0.953125, y: 0.453125 },
  { x: 0.953125, y: 0.453125 },
  { x: 0.984375, y: 0.453125 },
  { x: 0.984375, y: 0.453125 },
  { x: 0.015625, y: 0.484375 },
  { x: 0.015625, y: 0.484375 },
  { x: 0.046875, y: 0.484375 },
  { x: 0.046875, y: 0.484375 },
  { x: 0.078125, y: 0.484375 },
  { x: 0.078125, y: 0.484375 },
  { x: 0.109375, y: 0.484375 },
  { x: 0.109375, y: 0.484375 },
  { x: 0.140625, y: 0.484375 },
  { x: 0.140625, y: 0.484375 },
  { x: 0.171875, y: 0.484375 },
  { x: 0.171875, y: 0.484375 },
  { x: 0.203125, y: 0.484375 },
  { x: 0.203125, y: 0.484375 },
  { x: 0.234375, y: 0.484375 },
  { x: 0.234375, y: 0.484375 },
  { x: 0.265625, y: 0.484375 },
  { x: 0.265625, y: 0.484375 },
  { x: 0.296875, y: 0.484375 },
  { x: 0.296875, y: 0.484375 },
  { x: 0.328125, y: 0.484375 },
  { x: 0.328125, y: 0.484375 },
  { x: 0.359375, y: 0.484375 },
  { x: 0.359375, y: 0.484375 },
  { x: 0.390625, y: 0.484375 },
  { x: 0.390625, y: 0.484375 },
  { x: 0.421875, y: 0.484375 },
  { x: 0.421875, y: 0.484375 },
  { x: 0.453125, y: 0.484375 },
  { x: 0.453125, y: 0.484375 },
  { x: 0.484375, y: 0.484375 },
  { x: 0.484375, y: 0.484375 },
  { x: 0.515625, y: 0.484375 },
  { x: 0.515625, y: 0.484375 },
  { x: 0.546875, y: 0.484375 },
  { x: 0.546875, y: 0.484375 },
  { x: 0.578125, y: 0.484375 },
  { x: 0.578125, y: 0.484375 },
  { x: 0.609375, y: 0.484375 },
  { x: 0.609375, y: 0.484375 },
  { x: 0.640625, y: 0.484375 },
  { x: 0.640625, y: 0.484375 },
  { x: 0.671875, y: 0.484375 },
  { x: 0.671875, y: 0.484375 },
  { x: 0.703125, y: 0.484375 },
  { x: 0.703125, y: 0.484375 },
  { x: 0.734375, y: 0.484375 },
  { x: 0.734375, y: 0.484375 },
  { x: 0.765625, y: 0.484375 },
  { x: 0.765625, y: 0.484375 },
  { x: 0.796875, y: 0.484375 },
  { x: 0.796875, y: 0.484375 },
  { x: 0.828125, y: 0.484375 },
  { x: 0.828125, y: 0.484375 },
  { x: 0.859375, y: 0.484375 },
  { x: 0.859375, y: 0.484375 },
  { x: 0.890625, y: 0.484375 },
  { x: 0.890625, y: 0.484375 },
  { x: 0.921875, y: 0.484375 },
  { x: 0.921875, y: 0.484375 },
  { x: 0.953125, y: 0.484375 },
  { x: 0.953125, y: 0.484375 },
  { x: 0.984375, y: 0.484375 },
  { x: 0.984375, y: 0.484375 },
  { x: 0.015625, y: 0.515625 },
  { x: 0.015625, y: 0.515625 },
  { x: 0.046875, y: 0.515625 },
  { x: 0.046875, y: 0.515625 },
  { x: 0.078125, y: 0.515625 },
  { x: 0.078125, y: 0.515625 },
  { x: 0.109375, y: 0.515625 },
  { x: 0.109375, y: 0.515625 },
  { x: 0.140625, y: 0.515625 },
  { x: 0.140625, y: 0.515625 },
  { x: 0.171875, y: 0.515625 },
  { x: 0.171875, y: 0.515625 },
  { x: 0.203125, y: 0.515625 },
  { x: 0.203125, y: 0.515625 },
  { x: 0.234375, y: 0.515625 },
  { x: 0.234375, y: 0.515625 },
  { x: 0.265625, y: 0.515625 },
  { x: 0.265625, y: 0.515625 },
  { x: 0.296875, y: 0.515625 },
  { x: 0.296875, y: 0.515625 },
  { x: 0.328125, y: 0.515625 },
  { x: 0.328125, y: 0.515625 },
  { x: 0.359375, y: 0.515625 },
  { x: 0.359375, y: 0.515625 },
  { x: 0.390625, y: 0.515625 },
  { x: 0.390625, y: 0.515625 },
  { x: 0.421875, y: 0.515625 },
  { x: 0.421875, y: 0.515625 },
  { x: 0.453125, y: 0.515625 },
  { x: 0.453125, y: 0.515625 },
  { x: 0.484375, y: 0.515625 },
  { x: 0.484375, y: 0.515625 },
  { x: 0.515625, y: 0.515625 },
  { x: 0.515625, y: 0.515625 },
  { x: 0.546875, y: 0.515625 },
  { x: 0.546875, y: 0.515625 },
  { x: 0.578125, y: 0.515625 },
  { x: 0.578125, y: 0.515625 },
  { x: 0.609375, y: 0.515625 },
  { x: 0.609375, y: 0.515625 },
  { x: 0.640625, y: 0.515625 },
  { x: 0.640625, y: 0.515625 },
  { x: 0.671875, y: 0.515625 },
  { x: 0.671875, y: 0.515625 },
  { x: 0.703125, y: 0.515625 },
  { x: 0.703125, y: 0.515625 },
  { x: 0.734375, y: 0.515625 },
  { x: 0.734375, y: 0.515625 },
  { x: 0.765625, y: 0.515625 },
  { x: 0.765625, y: 0.515625 },
  { x: 0.796875, y: 0.515625 },
  { x: 0.796875, y: 0.515625 },
  { x: 0.828125, y: 0.515625 },
  { x: 0.828125, y: 0.515625 },
  { x: 0.859375, y: 0.515625 },
  { x: 0.859375, y: 0.515625 },
  { x: 0.890625, y: 0.515625 },
  { x: 0.890625, y: 0.515625 },
  { x: 0.921875, y: 0.515625 },
  { x: 0.921875, y: 0.515625 },
  { x: 0.953125, y: 0.515625 },
  { x: 0.953125, y: 0.515625 },
  { x: 0.984375, y: 0.515625 },
  { x: 0.984375, y: 0.515625 },
  { x: 0.015625, y: 0.546875 },
  { x: 0.015625, y: 0.546875 },
  { x: 0.046875, y: 0.546875 },
  { x: 0.046875, y: 0.546875 },
  { x: 0.078125, y: 0.546875 },
  { x: 0.078125, y: 0.546875 },
  { x: 0.109375, y: 0.546875 },
  { x: 0.109375, y: 0.546875 },
  { x: 0.140625, y: 0.546875 },
  { x: 0.140625, y: 0.546875 },
  { x: 0.171875, y: 0.546875 },
  { x: 0.171875, y: 0.546875 },
  { x: 0.203125, y: 0.546875 },
  { x: 0.203125, y: 0.546875 },
  { x: 0.234375, y: 0.546875 },
  { x: 0.234375, y: 0.546875 },
  { x: 0.265625, y: 0.546875 },
  { x: 0.265625, y: 0.546875 },
  { x: 0.296875, y: 0.546875 },
  { x: 0.296875, y: 0.546875 },
  { x: 0.328125, y: 0.546875 },
  { x: 0.328125, y: 0.546875 },
  { x: 0.359375, y: 0.546875 },
  { x: 0.359375, y: 0.546875 },
  { x: 0.390625, y: 0.546875 },
  { x: 0.390625, y: 0.546875 },
  { x: 0.421875, y: 0.546875 },
  { x: 0.421875, y: 0.546875 },
  { x: 0.453125, y: 0.546875 },
  { x: 0.453125, y: 0.546875 },
  { x: 0.484375, y: 0.546875 },
  { x: 0.484375, y: 0.546875 },
  { x: 0.515625, y: 0.546875 },
  { x: 0.515625, y: 0.546875 },
  { x: 0.546875, y: 0.546875 },
  { x: 0.546875, y: 0.546875 },
  { x: 0.578125, y: 0.546875 },
  { x: 0.578125, y: 0.546875 },
  { x: 0.609375, y: 0.546875 },
  { x: 0.609375, y: 0.546875 },
  { x: 0.640625, y: 0.546875 },
  { x: 0.640625, y: 0.546875 },
  { x: 0.671875, y: 0.546875 },
  { x: 0.671875, y: 0.546875 },
  { x: 0.703125, y: 0.546875 },
  { x: 0.703125, y: 0.546875 },
  { x: 0.734375, y: 0.546875 },
  { x: 0.734375, y: 0.546875 },
  { x: 0.765625, y: 0.546875 },
  { x: 0.765625, y: 0.546875 },
  { x: 0.796875, y: 0.546875 },
  { x: 0.796875, y: 0.546875 },
  { x: 0.828125, y: 0.546875 },
  { x: 0.828125, y: 0.546875 },
  { x: 0.859375, y: 0.546875 },
  { x: 0.859375, y: 0.546875 },
  { x: 0.890625, y: 0.546875 },
  { x: 0.890625, y: 0.546875 },
  { x: 0.921875, y: 0.546875 },
  { x: 0.921875, y: 0.546875 },
  { x: 0.953125, y: 0.546875 },
  { x: 0.953125, y: 0.546875 },
  { x: 0.984375, y: 0.546875 },
  { x: 0.984375, y: 0.546875 },
  { x: 0.015625, y: 0.578125 },
  { x: 0.015625, y: 0.578125 },
  { x: 0.046875, y: 0.578125 },
  { x: 0.046875, y: 0.578125 },
  { x: 0.078125, y: 0.578125 },
  { x: 0.078125, y: 0.578125 },
  { x: 0.109375, y: 0.578125 },
  { x: 0.109375, y: 0.578125 },
  { x: 0.140625, y: 0.578125 },
  { x: 0.140625, y: 0.578125 },
  { x: 0.171875, y: 0.578125 },
  { x: 0.171875, y: 0.578125 },
  { x: 0.203125, y: 0.578125 },
  { x: 0.203125, y: 0.578125 },
  { x: 0.234375, y: 0.578125 },
  { x: 0.234375, y: 0.578125 },
  { x: 0.265625, y: 0.578125 },
  { x: 0.265625, y: 0.578125 },
  { x: 0.296875, y: 0.578125 },
  { x: 0.296875, y: 0.578125 },
  { x: 0.328125, y: 0.578125 },
  { x: 0.328125, y: 0.578125 },
  { x: 0.359375, y: 0.578125 },
  { x: 0.359375, y: 0.578125 },
  { x: 0.390625, y: 0.578125 },
  { x: 0.390625, y: 0.578125 },
  { x: 0.421875, y: 0.578125 },
  { x: 0.421875, y: 0.578125 },
  { x: 0.453125, y: 0.578125 },
  { x: 0.453125, y: 0.578125 },
  { x: 0.484375, y: 0.578125 },
  { x: 0.484375, y: 0.578125 },
  { x: 0.515625, y: 0.578125 },
  { x: 0.515625, y: 0.578125 },
  { x: 0.546875, y: 0.578125 },
  { x: 0.546875, y: 0.578125 },
  { x: 0.578125, y: 0.578125 },
  { x: 0.578125, y: 0.578125 },
  { x: 0.609375, y: 0.578125 },
  { x: 0.609375, y: 0.578125 },
  { x: 0.640625, y: 0.578125 },
  { x: 0.640625, y: 0.578125 },
  { x: 0.671875, y: 0.578125 },
  { x: 0.671875, y: 0.578125 },
  { x: 0.703125, y: 0.578125 },
  { x: 0.703125, y: 0.578125 },
  { x: 0.734375, y: 0.578125 },
  { x: 0.734375, y: 0.578125 },
  { x: 0.765625, y: 0.578125 },
  { x: 0.765625, y: 0.578125 },
  { x: 0.796875, y: 0.578125 },
  { x: 0.796875, y: 0.578125 },
  { x: 0.828125, y: 0.578125 },
  { x: 0.828125, y: 0.578125 },
  { x: 0.859375, y: 0.578125 },
  { x: 0.859375, y: 0.578125 },
  { x: 0.890625, y: 0.578125 },
  { x: 0.890625, y: 0.578125 },
  { x: 0.921875, y: 0.578125 },
  { x: 0.921875, y: 0.578125 },
  { x: 0.953125, y: 0.578125 },
  { x: 0.953125, y: 0.578125 },
  { x: 0.984375, y: 0.578125 },
  { x: 0.984375, y: 0.578125 },
  { x: 0.015625, y: 0.609375 },
  { x: 0.015625, y: 0.609375 },
  { x: 0.046875, y: 0.609375 },
  { x: 0.046875, y: 0.609375 },
  { x: 0.078125, y: 0.609375 },
  { x: 0.078125, y: 0.609375 },
  { x: 0.109375, y: 0.609375 },
  { x: 0.109375, y: 0.609375 },
  { x: 0.140625, y: 0.609375 },
  { x: 0.140625, y: 0.609375 },
  { x: 0.171875, y: 0.609375 },
  { x: 0.171875, y: 0.609375 },
  { x: 0.203125, y: 0.609375 },
  { x: 0.203125, y: 0.609375 },
  { x: 0.234375, y: 0.609375 },
  { x: 0.234375, y: 0.609375 },
  { x: 0.265625, y: 0.609375 },
  { x: 0.265625, y: 0.609375 },
  { x: 0.296875, y: 0.609375 },
  { x: 0.296875, y: 0.609375 },
  { x: 0.328125, y: 0.609375 },
  { x: 0.328125, y: 0.609375 },
  { x: 0.359375, y: 0.609375 },
  { x: 0.359375, y: 0.609375 },
  { x: 0.390625, y: 0.609375 },
  { x: 0.390625, y: 0.609375 },
  { x: 0.421875, y: 0.609375 },
  { x: 0.421875, y: 0.609375 },
  { x: 0.453125, y: 0.609375 },
  { x: 0.453125, y: 0.609375 },
  { x: 0.484375, y: 0.609375 },
  { x: 0.484375, y: 0.609375 },
  { x: 0.515625, y: 0.609375 },
  { x: 0.515625, y: 0.609375 },
  { x: 0.546875, y: 0.609375 },
  { x: 0.546875, y: 0.609375 },
  { x: 0.578125, y: 0.609375 },
  { x: 0.578125, y: 0.609375 },
  { x: 0.609375, y: 0.609375 },
  { x: 0.609375, y: 0.609375 },
  { x: 0.640625, y: 0.609375 },
  { x: 0.640625, y: 0.609375 },
  { x: 0.671875, y: 0.609375 },
  { x: 0.671875, y: 0.609375 },
  { x: 0.703125, y: 0.609375 },
  { x: 0.703125, y: 0.609375 },
  { x: 0.734375, y: 0.609375 },
  { x: 0.734375, y: 0.609375 },
  { x: 0.765625, y: 0.609375 },
  { x: 0.765625, y: 0.609375 },
  { x: 0.796875, y: 0.609375 },
  { x: 0.796875, y: 0.609375 },
  { x: 0.828125, y: 0.609375 },
  { x: 0.828125, y: 0.609375 },
  { x: 0.859375, y: 0.609375 },
  { x: 0.859375, y: 0.609375 },
  { x: 0.890625, y: 0.609375 },
  { x: 0.890625, y: 0.609375 },
  { x: 0.921875, y: 0.609375 },
  { x: 0.921875, y: 0.609375 },
  { x: 0.953125, y: 0.609375 },
  { x: 0.953125, y: 0.609375 },
  { x: 0.984375, y: 0.609375 },
  { x: 0.984375, y: 0.609375 },
  { x: 0.015625, y: 0.640625 },
  { x: 0.015625, y: 0.640625 },
  { x: 0.046875, y: 0.640625 },
  { x: 0.046875, y: 0.640625 },
  { x: 0.078125, y: 0.640625 },
  { x: 0.078125, y: 0.640625 },
  { x: 0.109375, y: 0.640625 },
  { x: 0.109375, y: 0.640625 },
  { x: 0.140625, y: 0.640625 },
  { x: 0.140625, y: 0.640625 },
  { x: 0.171875, y: 0.640625 },
  { x: 0.171875, y: 0.640625 },
  { x: 0.203125, y: 0.640625 },
  { x: 0.203125, y: 0.640625 },
  { x: 0.234375, y: 0.640625 },
  { x: 0.234375, y: 0.640625 },
  { x: 0.265625, y: 0.640625 },
  { x: 0.265625, y: 0.640625 },
  { x: 0.296875, y: 0.640625 },
  { x: 0.296875, y: 0.640625 },
  { x: 0.328125, y: 0.640625 },
  { x: 0.328125, y: 0.640625 },
  { x: 0.359375, y: 0.640625 },
  { x: 0.359375, y: 0.640625 },
  { x: 0.390625, y: 0.640625 },
  { x: 0.390625, y: 0.640625 },
  { x: 0.421875, y: 0.640625 },
  { x: 0.421875, y: 0.640625 },
  { x: 0.453125, y: 0.640625 },
  { x: 0.453125, y: 0.640625 },
  { x: 0.484375, y: 0.640625 },
  { x: 0.484375, y: 0.640625 },
  { x: 0.515625, y: 0.640625 },
  { x: 0.515625, y: 0.640625 },
  { x: 0.546875, y: 0.640625 },
  { x: 0.546875, y: 0.640625 },
  { x: 0.578125, y: 0.640625 },
  { x: 0.578125, y: 0.640625 },
  { x: 0.609375, y: 0.640625 },
  { x: 0.609375, y: 0.640625 },
  { x: 0.640625, y: 0.640625 },
  { x: 0.640625, y: 0.640625 },
  { x: 0.671875, y: 0.640625 },
  { x: 0.671875, y: 0.640625 },
  { x: 0.703125, y: 0.640625 },
  { x: 0.703125, y: 0.640625 },
  { x: 0.734375, y: 0.640625 },
  { x: 0.734375, y: 0.640625 },
  { x: 0.765625, y: 0.640625 },
  { x: 0.765625, y: 0.640625 },
  { x: 0.796875, y: 0.640625 },
  { x: 0.796875, y: 0.640625 },
  { x: 0.828125, y: 0.640625 },
  { x: 0.828125, y: 0.640625 },
  { x: 0.859375, y: 0.640625 },
  { x: 0.859375, y: 0.640625 },
  { x: 0.890625, y: 0.640625 },
  { x: 0.890625, y: 0.640625 },
  { x: 0.921875, y: 0.640625 },
  { x: 0.921875, y: 0.640625 },
  { x: 0.953125, y: 0.640625 },
  { x: 0.953125, y: 0.640625 },
  { x: 0.984375, y: 0.640625 },
  { x: 0.984375, y: 0.640625 },
  { x: 0.015625, y: 0.671875 },
  { x: 0.015625, y: 0.671875 },
  { x: 0.046875, y: 0.671875 },
  { x: 0.046875, y: 0.671875 },
  { x: 0.078125, y: 0.671875 },
  { x: 0.078125, y: 0.671875 },
  { x: 0.109375, y: 0.671875 },
  { x: 0.109375, y: 0.671875 },
  { x: 0.140625, y: 0.671875 },
  { x: 0.140625, y: 0.671875 },
  { x: 0.171875, y: 0.671875 },
  { x: 0.171875, y: 0.671875 },
  { x: 0.203125, y: 0.671875 },
  { x: 0.203125, y: 0.671875 },
  { x: 0.234375, y: 0.671875 },
  { x: 0.234375, y: 0.671875 },
  { x: 0.265625, y: 0.671875 },
  { x: 0.265625, y: 0.671875 },
  { x: 0.296875, y: 0.671875 },
  { x: 0.296875, y: 0.671875 },
  { x: 0.328125, y: 0.671875 },
  { x: 0.328125, y: 0.671875 },
  { x: 0.359375, y: 0.671875 },
  { x: 0.359375, y: 0.671875 },
  { x: 0.390625, y: 0.671875 },
  { x: 0.390625, y: 0.671875 },
  { x: 0.421875, y: 0.671875 },
  { x: 0.421875, y: 0.671875 },
  { x: 0.453125, y: 0.671875 },
  { x: 0.453125, y: 0.671875 },
  { x: 0.484375, y: 0.671875 },
  { x: 0.484375, y: 0.671875 },
  { x: 0.515625, y: 0.671875 },
  { x: 0.515625, y: 0.671875 },
  { x: 0.546875, y: 0.671875 },
  { x: 0.546875, y: 0.671875 },
  { x: 0.578125, y: 0.671875 },
  { x: 0.578125, y: 0.671875 },
  { x: 0.609375, y: 0.671875 },
  { x: 0.609375, y: 0.671875 },
  { x: 0.640625, y: 0.671875 },
  { x: 0.640625, y: 0.671875 },
  { x: 0.671875, y: 0.671875 },
  { x: 0.671875, y: 0.671875 },
  { x: 0.703125, y: 0.671875 },
  { x: 0.703125, y: 0.671875 },
  { x: 0.734375, y: 0.671875 },
  { x: 0.734375, y: 0.671875 },
  { x: 0.765625, y: 0.671875 },
  { x: 0.765625, y: 0.671875 },
  { x: 0.796875, y: 0.671875 },
  { x: 0.796875, y: 0.671875 },
  { x: 0.828125, y: 0.671875 },
  { x: 0.828125, y: 0.671875 },
  { x: 0.859375, y: 0.671875 },
  { x: 0.859375, y: 0.671875 },
  { x: 0.890625, y: 0.671875 },
  { x: 0.890625, y: 0.671875 },
  { x: 0.921875, y: 0.671875 },
  { x: 0.921875, y: 0.671875 },
  { x: 0.953125, y: 0.671875 },
  { x: 0.953125, y: 0.671875 },
  { x: 0.984375, y: 0.671875 },
  { x: 0.984375, y: 0.671875 },
  { x: 0.015625, y: 0.703125 },
  { x: 0.015625, y: 0.703125 },
  { x: 0.046875, y: 0.703125 },
  { x: 0.046875, y: 0.703125 },
  { x: 0.078125, y: 0.703125 },
  { x: 0.078125, y: 0.703125 },
  { x: 0.109375, y: 0.703125 },
  { x: 0.109375, y: 0.703125 },
  { x: 0.140625, y: 0.703125 },
  { x: 0.140625, y: 0.703125 },
  { x: 0.171875, y: 0.703125 },
  { x: 0.171875, y: 0.703125 },
  { x: 0.203125, y: 0.703125 },
  { x: 0.203125, y: 0.703125 },
  { x: 0.234375, y: 0.703125 },
  { x: 0.234375, y: 0.703125 },
  { x: 0.265625, y: 0.703125 },
  { x: 0.265625, y: 0.703125 },
  { x: 0.296875, y: 0.703125 },
  { x: 0.296875, y: 0.703125 },
  { x: 0.328125, y: 0.703125 },
  { x: 0.328125, y: 0.703125 },
  { x: 0.359375, y: 0.703125 },
  { x: 0.359375, y: 0.703125 },
  { x: 0.390625, y: 0.703125 },
  { x: 0.390625, y: 0.703125 },
  { x: 0.421875, y: 0.703125 },
  { x: 0.421875, y: 0.703125 },
  { x: 0.453125, y: 0.703125 },
  { x: 0.453125, y: 0.703125 },
  { x: 0.484375, y: 0.703125 },
  { x: 0.484375, y: 0.703125 },
  { x: 0.515625, y: 0.703125 },
  { x: 0.515625, y: 0.703125 },
  { x: 0.546875, y: 0.703125 },
  { x: 0.546875, y: 0.703125 },
  { x: 0.578125, y: 0.703125 },
  { x: 0.578125, y: 0.703125 },
  { x: 0.609375, y: 0.703125 },
  { x: 0.609375, y: 0.703125 },
  { x: 0.640625, y: 0.703125 },
  { x: 0.640625, y: 0.703125 },
  { x: 0.671875, y: 0.703125 },
  { x: 0.671875, y: 0.703125 },
  { x: 0.703125, y: 0.703125 },
  { x: 0.703125, y: 0.703125 },
  { x: 0.734375, y: 0.703125 },
  { x: 0.734375, y: 0.703125 },
  { x: 0.765625, y: 0.703125 },
  { x: 0.765625, y: 0.703125 },
  { x: 0.796875, y: 0.703125 },
  { x: 0.796875, y: 0.703125 },
  { x: 0.828125, y: 0.703125 },
  { x: 0.828125, y: 0.703125 },
  { x: 0.859375, y: 0.703125 },
  { x: 0.859375, y: 0.703125 },
  { x: 0.890625, y: 0.703125 },
  { x: 0.890625, y: 0.703125 },
  { x: 0.921875, y: 0.703125 },
  { x: 0.921875, y: 0.703125 },
  { x: 0.953125, y: 0.703125 },
  { x: 0.953125, y: 0.703125 },
  { x: 0.984375, y: 0.703125 },
  { x: 0.984375, y: 0.703125 },
  { x: 0.015625, y: 0.734375 },
  { x: 0.015625, y: 0.734375 },
  { x: 0.046875, y: 0.734375 },
  { x: 0.046875, y: 0.734375 },
  { x: 0.078125, y: 0.734375 },
  { x: 0.078125, y: 0.734375 },
  { x: 0.109375, y: 0.734375 },
  { x: 0.109375, y: 0.734375 },
  { x: 0.140625, y: 0.734375 },
  { x: 0.140625, y: 0.734375 },
  { x: 0.171875, y: 0.734375 },
  { x: 0.171875, y: 0.734375 },
  { x: 0.203125, y: 0.734375 },
  { x: 0.203125, y: 0.734375 },
  { x: 0.234375, y: 0.734375 },
  { x: 0.234375, y: 0.734375 },
  { x: 0.265625, y: 0.734375 },
  { x: 0.265625, y: 0.734375 },
  { x: 0.296875, y: 0.734375 },
  { x: 0.296875, y: 0.734375 },
  { x: 0.328125, y: 0.734375 },
  { x: 0.328125, y: 0.734375 },
  { x: 0.359375, y: 0.734375 },
  { x: 0.359375, y: 0.734375 },
  { x: 0.390625, y: 0.734375 },
  { x: 0.390625, y: 0.734375 },
  { x: 0.421875, y: 0.734375 },
  { x: 0.421875, y: 0.734375 },
  { x: 0.453125, y: 0.734375 },
  { x: 0.453125, y: 0.734375 },
  { x: 0.484375, y: 0.734375 },
  { x: 0.484375, y: 0.734375 },
  { x: 0.515625, y: 0.734375 },
  { x: 0.515625, y: 0.734375 },
  { x: 0.546875, y: 0.734375 },
  { x: 0.546875, y: 0.734375 },
  { x: 0.578125, y: 0.734375 },
  { x: 0.578125, y: 0.734375 },
  { x: 0.609375, y: 0.734375 },
  { x: 0.609375, y: 0.734375 },
  { x: 0.640625, y: 0.734375 },
  { x: 0.640625, y: 0.734375 },
  { x: 0.671875, y: 0.734375 },
  { x: 0.671875, y: 0.734375 },
  { x: 0.703125, y: 0.734375 },
  { x: 0.703125, y: 0.734375 },
  { x: 0.734375, y: 0.734375 },
  { x: 0.734375, y: 0.734375 },
  { x: 0.765625, y: 0.734375 },
  { x: 0.765625, y: 0.734375 },
  { x: 0.796875, y: 0.734375 },
  { x: 0.796875, y: 0.734375 },
  { x: 0.828125, y: 0.734375 },
  { x: 0.828125, y: 0.734375 },
  { x: 0.859375, y: 0.734375 },
  { x: 0.859375, y: 0.734375 },
  { x: 0.890625, y: 0.734375 },
  { x: 0.890625, y: 0.734375 },
  { x: 0.921875, y: 0.734375 },
  { x: 0.921875, y: 0.734375 },
  { x: 0.953125, y: 0.734375 },
  { x: 0.953125, y: 0.734375 },
  { x: 0.984375, y: 0.734375 },
  { x: 0.984375, y: 0.734375 },
  { x: 0.015625, y: 0.765625 },
  { x: 0.015625, y: 0.765625 },
  { x: 0.046875, y: 0.765625 },
  { x: 0.046875, y: 0.765625 },
  { x: 0.078125, y: 0.765625 },
  { x: 0.078125, y: 0.765625 },
  { x: 0.109375, y: 0.765625 },
  { x: 0.109375, y: 0.765625 },
  { x: 0.140625, y: 0.765625 },
  { x: 0.140625, y: 0.765625 },
  { x: 0.171875, y: 0.765625 },
  { x: 0.171875, y: 0.765625 },
  { x: 0.203125, y: 0.765625 },
  { x: 0.203125, y: 0.765625 },
  { x: 0.234375, y: 0.765625 },
  { x: 0.234375, y: 0.765625 },
  { x: 0.265625, y: 0.765625 },
  { x: 0.265625, y: 0.765625 },
  { x: 0.296875, y: 0.765625 },
  { x: 0.296875, y: 0.765625 },
  { x: 0.328125, y: 0.765625 },
  { x: 0.328125, y: 0.765625 },
  { x: 0.359375, y: 0.765625 },
  { x: 0.359375, y: 0.765625 },
  { x: 0.390625, y: 0.765625 },
  { x: 0.390625, y: 0.765625 },
  { x: 0.421875, y: 0.765625 },
  { x: 0.421875, y: 0.765625 },
  { x: 0.453125, y: 0.765625 },
  { x: 0.453125, y: 0.765625 },
  { x: 0.484375, y: 0.765625 },
  { x: 0.484375, y: 0.765625 },
  { x: 0.515625, y: 0.765625 },
  { x: 0.515625, y: 0.765625 },
  { x: 0.546875, y: 0.765625 },
  { x: 0.546875, y: 0.765625 },
  { x: 0.578125, y: 0.765625 },
  { x: 0.578125, y: 0.765625 },
  { x: 0.609375, y: 0.765625 },
  { x: 0.609375, y: 0.765625 },
  { x: 0.640625, y: 0.765625 },
  { x: 0.640625, y: 0.765625 },
  { x: 0.671875, y: 0.765625 },
  { x: 0.671875, y: 0.765625 },
  { x: 0.703125, y: 0.765625 },
  { x: 0.703125, y: 0.765625 },
  { x: 0.734375, y: 0.765625 },
  { x: 0.734375, y: 0.765625 },
  { x: 0.765625, y: 0.765625 },
  { x: 0.765625, y: 0.765625 },
  { x: 0.796875, y: 0.765625 },
  { x: 0.796875, y: 0.765625 },
  { x: 0.828125, y: 0.765625 },
  { x: 0.828125, y: 0.765625 },
  { x: 0.859375, y: 0.765625 },
  { x: 0.859375, y: 0.765625 },
  { x: 0.890625, y: 0.765625 },
  { x: 0.890625, y: 0.765625 },
  { x: 0.921875, y: 0.765625 },
  { x: 0.921875, y: 0.765625 },
  { x: 0.953125, y: 0.765625 },
  { x: 0.953125, y: 0.765625 },
  { x: 0.984375, y: 0.765625 },
  { x: 0.984375, y: 0.765625 },
  { x: 0.015625, y: 0.796875 },
  { x: 0.015625, y: 0.796875 },
  { x: 0.046875, y: 0.796875 },
  { x: 0.046875, y: 0.796875 },
  { x: 0.078125, y: 0.796875 },
  { x: 0.078125, y: 0.796875 },
  { x: 0.109375, y: 0.796875 },
  { x: 0.109375, y: 0.796875 },
  { x: 0.140625, y: 0.796875 },
  { x: 0.140625, y: 0.796875 },
  { x: 0.171875, y: 0.796875 },
  { x: 0.171875, y: 0.796875 },
  { x: 0.203125, y: 0.796875 },
  { x: 0.203125, y: 0.796875 },
  { x: 0.234375, y: 0.796875 },
  { x: 0.234375, y: 0.796875 },
  { x: 0.265625, y: 0.796875 },
  { x: 0.265625, y: 0.796875 },
  { x: 0.296875, y: 0.796875 },
  { x: 0.296875, y: 0.796875 },
  { x: 0.328125, y: 0.796875 },
  { x: 0.328125, y: 0.796875 },
  { x: 0.359375, y: 0.796875 },
  { x: 0.359375, y: 0.796875 },
  { x: 0.390625, y: 0.796875 },
  { x: 0.390625, y: 0.796875 },
  { x: 0.421875, y: 0.796875 },
  { x: 0.421875, y: 0.796875 },
  { x: 0.453125, y: 0.796875 },
  { x: 0.453125, y: 0.796875 },
  { x: 0.484375, y: 0.796875 },
  { x: 0.484375, y: 0.796875 },
  { x: 0.515625, y: 0.796875 },
  { x: 0.515625, y: 0.796875 },
  { x: 0.546875, y: 0.796875 },
  { x: 0.546875, y: 0.796875 },
  { x: 0.578125, y: 0.796875 },
  { x: 0.578125, y: 0.796875 },
  { x: 0.609375, y: 0.796875 },
  { x: 0.609375, y: 0.796875 },
  { x: 0.640625, y: 0.796875 },
  { x: 0.640625, y: 0.796875 },
  { x: 0.671875, y: 0.796875 },
  { x: 0.671875, y: 0.796875 },
  { x: 0.703125, y: 0.796875 },
  { x: 0.703125, y: 0.796875 },
  { x: 0.734375, y: 0.796875 },
  { x: 0.734375, y: 0.796875 },
  { x: 0.765625, y: 0.796875 },
  { x: 0.765625, y: 0.796875 },
  { x: 0.796875, y: 0.796875 },
  { x: 0.796875, y: 0.796875 },
  { x: 0.828125, y: 0.796875 },
  { x: 0.828125, y: 0.796875 },
  { x: 0.859375, y: 0.796875 },
  { x: 0.859375, y: 0.796875 },
  { x: 0.890625, y: 0.796875 },
  { x: 0.890625, y: 0.796875 },
  { x: 0.921875, y: 0.796875 },
  { x: 0.921875, y: 0.796875 },
  { x: 0.953125, y: 0.796875 },
  { x: 0.953125, y: 0.796875 },
  { x: 0.984375, y: 0.796875 },
  { x: 0.984375, y: 0.796875 },
  { x: 0.015625, y: 0.828125 },
  { x: 0.015625, y: 0.828125 },
  { x: 0.046875, y: 0.828125 },
  { x: 0.046875, y: 0.828125 },
  { x: 0.078125, y: 0.828125 },
  { x: 0.078125, y: 0.828125 },
  { x: 0.109375, y: 0.828125 },
  { x: 0.109375, y: 0.828125 },
  { x: 0.140625, y: 0.828125 },
  { x: 0.140625, y: 0.828125 },
  { x: 0.171875, y: 0.828125 },
  { x: 0.171875, y: 0.828125 },
  { x: 0.203125, y: 0.828125 },
  { x: 0.203125, y: 0.828125 },
  { x: 0.234375, y: 0.828125 },
  { x: 0.234375, y: 0.828125 },
  { x: 0.265625, y: 0.828125 },
  { x: 0.265625, y: 0.828125 },
  { x: 0.296875, y: 0.828125 },
  { x: 0.296875, y: 0.828125 },
  { x: 0.328125, y: 0.828125 },
  { x: 0.328125, y: 0.828125 },
  { x: 0.359375, y: 0.828125 },
  { x: 0.359375, y: 0.828125 },
  { x: 0.390625, y: 0.828125 },
  { x: 0.390625, y: 0.828125 },
  { x: 0.421875, y: 0.828125 },
  { x: 0.421875, y: 0.828125 },
  { x: 0.453125, y: 0.828125 },
  { x: 0.453125, y: 0.828125 },
  { x: 0.484375, y: 0.828125 },
  { x: 0.484375, y: 0.828125 },
  { x: 0.515625, y: 0.828125 },
  { x: 0.515625, y: 0.828125 },
  { x: 0.546875, y: 0.828125 },
  { x: 0.546875, y: 0.828125 },
  { x: 0.578125, y: 0.828125 },
  { x: 0.578125, y: 0.828125 },
  { x: 0.609375, y: 0.828125 },
  { x: 0.609375, y: 0.828125 },
  { x: 0.640625, y: 0.828125 },
  { x: 0.640625, y: 0.828125 },
  { x: 0.671875, y: 0.828125 },
  { x: 0.671875, y: 0.828125 },
  { x: 0.703125, y: 0.828125 },
  { x: 0.703125, y: 0.828125 },
  { x: 0.734375, y: 0.828125 },
  { x: 0.734375, y: 0.828125 },
  { x: 0.765625, y: 0.828125 },
  { x: 0.765625, y: 0.828125 },
  { x: 0.796875, y: 0.828125 },
  { x: 0.796875, y: 0.828125 },
  { x: 0.828125, y: 0.828125 },
  { x: 0.828125, y: 0.828125 },
  { x: 0.859375, y: 0.828125 },
  { x: 0.859375, y: 0.828125 },
  { x: 0.890625, y: 0.828125 },
  { x: 0.890625, y: 0.828125 },
  { x: 0.921875, y: 0.828125 },
  { x: 0.921875, y: 0.828125 },
  { x: 0.953125, y: 0.828125 },
  { x: 0.953125, y: 0.828125 },
  { x: 0.984375, y: 0.828125 },
  { x: 0.984375, y: 0.828125 },
  { x: 0.015625, y: 0.859375 },
  { x: 0.015625, y: 0.859375 },
  { x: 0.046875, y: 0.859375 },
  { x: 0.046875, y: 0.859375 },
  { x: 0.078125, y: 0.859375 },
  { x: 0.078125, y: 0.859375 },
  { x: 0.109375, y: 0.859375 },
  { x: 0.109375, y: 0.859375 },
  { x: 0.140625, y: 0.859375 },
  { x: 0.140625, y: 0.859375 },
  { x: 0.171875, y: 0.859375 },
  { x: 0.171875, y: 0.859375 },
  { x: 0.203125, y: 0.859375 },
  { x: 0.203125, y: 0.859375 },
  { x: 0.234375, y: 0.859375 },
  { x: 0.234375, y: 0.859375 },
  { x: 0.265625, y: 0.859375 },
  { x: 0.265625, y: 0.859375 },
  { x: 0.296875, y: 0.859375 },
  { x: 0.296875, y: 0.859375 },
  { x: 0.328125, y: 0.859375 },
  { x: 0.328125, y: 0.859375 },
  { x: 0.359375, y: 0.859375 },
  { x: 0.359375, y: 0.859375 },
  { x: 0.390625, y: 0.859375 },
  { x: 0.390625, y: 0.859375 },
  { x: 0.421875, y: 0.859375 },
  { x: 0.421875, y: 0.859375 },
  { x: 0.453125, y: 0.859375 },
  { x: 0.453125, y: 0.859375 },
  { x: 0.484375, y: 0.859375 },
  { x: 0.484375, y: 0.859375 },
  { x: 0.515625, y: 0.859375 },
  { x: 0.515625, y: 0.859375 },
  { x: 0.546875, y: 0.859375 },
  { x: 0.546875, y: 0.859375 },
  { x: 0.578125, y: 0.859375 },
  { x: 0.578125, y: 0.859375 },
  { x: 0.609375, y: 0.859375 },
  { x: 0.609375, y: 0.859375 },
  { x: 0.640625, y: 0.859375 },
  { x: 0.640625, y: 0.859375 },
  { x: 0.671875, y: 0.859375 },
  { x: 0.671875, y: 0.859375 },
  { x: 0.703125, y: 0.859375 },
  { x: 0.703125, y: 0.859375 },
  { x: 0.734375, y: 0.859375 },
  { x: 0.734375, y: 0.859375 },
  { x: 0.765625, y: 0.859375 },
  { x: 0.765625, y: 0.859375 },
  { x: 0.796875, y: 0.859375 },
  { x: 0.796875, y: 0.859375 },
  { x: 0.828125, y: 0.859375 },
  { x: 0.828125, y: 0.859375 },
  { x: 0.859375, y: 0.859375 },
  { x: 0.859375, y: 0.859375 },
  { x: 0.890625, y: 0.859375 },
  { x: 0.890625, y: 0.859375 },
  { x: 0.921875, y: 0.859375 },
  { x: 0.921875, y: 0.859375 },
  { x: 0.953125, y: 0.859375 },
  { x: 0.953125, y: 0.859375 },
  { x: 0.984375, y: 0.859375 },
  { x: 0.984375, y: 0.859375 },
  { x: 0.015625, y: 0.890625 },
  { x: 0.015625, y: 0.890625 },
  { x: 0.046875, y: 0.890625 },
  { x: 0.046875, y: 0.890625 },
  { x: 0.078125, y: 0.890625 },
  { x: 0.078125, y: 0.890625 },
  { x: 0.109375, y: 0.890625 },
  { x: 0.109375, y: 0.890625 },
  { x: 0.140625, y: 0.890625 },
  { x: 0.140625, y: 0.890625 },
  { x: 0.171875, y: 0.890625 },
  { x: 0.171875, y: 0.890625 },
  { x: 0.203125, y: 0.890625 },
  { x: 0.203125, y: 0.890625 },
  { x: 0.234375, y: 0.890625 },
  { x: 0.234375, y: 0.890625 },
  { x: 0.265625, y: 0.890625 },
  { x: 0.265625, y: 0.890625 },
  { x: 0.296875, y: 0.890625 },
  { x: 0.296875, y: 0.890625 },
  { x: 0.328125, y: 0.890625 },
  { x: 0.328125, y: 0.890625 },
  { x: 0.359375, y: 0.890625 },
  { x: 0.359375, y: 0.890625 },
  { x: 0.390625, y: 0.890625 },
  { x: 0.390625, y: 0.890625 },
  { x: 0.421875, y: 0.890625 },
  { x: 0.421875, y: 0.890625 },
  { x: 0.453125, y: 0.890625 },
  { x: 0.453125, y: 0.890625 },
  { x: 0.484375, y: 0.890625 },
  { x: 0.484375, y: 0.890625 },
  { x: 0.515625, y: 0.890625 },
  { x: 0.515625, y: 0.890625 },
  { x: 0.546875, y: 0.890625 },
  { x: 0.546875, y: 0.890625 },
  { x: 0.578125, y: 0.890625 },
  { x: 0.578125, y: 0.890625 },
  { x: 0.609375, y: 0.890625 },
  { x: 0.609375, y: 0.890625 },
  { x: 0.640625, y: 0.890625 },
  { x: 0.640625, y: 0.890625 },
  { x: 0.671875, y: 0.890625 },
  { x: 0.671875, y: 0.890625 },
  { x: 0.703125, y: 0.890625 },
  { x: 0.703125, y: 0.890625 },
  { x: 0.734375, y: 0.890625 },
  { x: 0.734375, y: 0.890625 },
  { x: 0.765625, y: 0.890625 },
  { x: 0.765625, y: 0.890625 },
  { x: 0.796875, y: 0.890625 },
  { x: 0.796875, y: 0.890625 },
  { x: 0.828125, y: 0.890625 },
  { x: 0.828125, y: 0.890625 },
  { x: 0.859375, y: 0.890625 },
  { x: 0.859375, y: 0.890625 },
  { x: 0.890625, y: 0.890625 },
  { x: 0.890625, y: 0.890625 },
  { x: 0.921875, y: 0.890625 },
  { x: 0.921875, y: 0.890625 },
  { x: 0.953125, y: 0.890625 },
  { x: 0.953125, y: 0.890625 },
  { x: 0.984375, y: 0.890625 },
  { x: 0.984375, y: 0.890625 },
  { x: 0.015625, y: 0.921875 },
  { x: 0.015625, y: 0.921875 },
  { x: 0.046875, y: 0.921875 },
  { x: 0.046875, y: 0.921875 },
  { x: 0.078125, y: 0.921875 },
  { x: 0.078125, y: 0.921875 },
  { x: 0.109375, y: 0.921875 },
  { x: 0.109375, y: 0.921875 },
  { x: 0.140625, y: 0.921875 },
  { x: 0.140625, y: 0.921875 },
  { x: 0.171875, y: 0.921875 },
  { x: 0.171875, y: 0.921875 },
  { x: 0.203125, y: 0.921875 },
  { x: 0.203125, y: 0.921875 },
  { x: 0.234375, y: 0.921875 },
  { x: 0.234375, y: 0.921875 },
  { x: 0.265625, y: 0.921875 },
  { x: 0.265625, y: 0.921875 },
  { x: 0.296875, y: 0.921875 },
  { x: 0.296875, y: 0.921875 },
  { x: 0.328125, y: 0.921875 },
  { x: 0.328125, y: 0.921875 },
  { x: 0.359375, y: 0.921875 },
  { x: 0.359375, y: 0.921875 },
  { x: 0.390625, y: 0.921875 },
  { x: 0.390625, y: 0.921875 },
  { x: 0.421875, y: 0.921875 },
  { x: 0.421875, y: 0.921875 },
  { x: 0.453125, y: 0.921875 },
  { x: 0.453125, y: 0.921875 },
  { x: 0.484375, y: 0.921875 },
  { x: 0.484375, y: 0.921875 },
  { x: 0.515625, y: 0.921875 },
  { x: 0.515625, y: 0.921875 },
  { x: 0.546875, y: 0.921875 },
  { x: 0.546875, y: 0.921875 },
  { x: 0.578125, y: 0.921875 },
  { x: 0.578125, y: 0.921875 },
  { x: 0.609375, y: 0.921875 },
  { x: 0.609375, y: 0.921875 },
  { x: 0.640625, y: 0.921875 },
  { x: 0.640625, y: 0.921875 },
  { x: 0.671875, y: 0.921875 },
  { x: 0.671875, y: 0.921875 },
  { x: 0.703125, y: 0.921875 },
  { x: 0.703125, y: 0.921875 },
  { x: 0.734375, y: 0.921875 },
  { x: 0.734375, y: 0.921875 },
  { x: 0.765625, y: 0.921875 },
  { x: 0.765625, y: 0.921875 },
  { x: 0.796875, y: 0.921875 },
  { x: 0.796875, y: 0.921875 },
  { x: 0.828125, y: 0.921875 },
  { x: 0.828125, y: 0.921875 },
  { x: 0.859375, y: 0.921875 },
  { x: 0.859375, y: 0.921875 },
  { x: 0.890625, y: 0.921875 },
  { x: 0.890625, y: 0.921875 },
  { x: 0.921875, y: 0.921875 },
  { x: 0.921875, y: 0.921875 },
  { x: 0.953125, y: 0.921875 },
  { x: 0.953125, y: 0.921875 },
  { x: 0.984375, y: 0.921875 },
  { x: 0.984375, y: 0.921875 },
  { x: 0.015625, y: 0.953125 },
  { x: 0.015625, y: 0.953125 },
  { x: 0.046875, y: 0.953125 },
  { x: 0.046875, y: 0.953125 },
  { x: 0.078125, y: 0.953125 },
  { x: 0.078125, y: 0.953125 },
  { x: 0.109375, y: 0.953125 },
  { x: 0.109375, y: 0.953125 },
  { x: 0.140625, y: 0.953125 },
  { x: 0.140625, y: 0.953125 },
  { x: 0.171875, y: 0.953125 },
  { x: 0.171875, y: 0.953125 },
  { x: 0.203125, y: 0.953125 },
  { x: 0.203125, y: 0.953125 },
  { x: 0.234375, y: 0.953125 },
  { x: 0.234375, y: 0.953125 },
  { x: 0.265625, y: 0.953125 },
  { x: 0.265625, y: 0.953125 },
  { x: 0.296875, y: 0.953125 },
  { x: 0.296875, y: 0.953125 },
  { x: 0.328125, y: 0.953125 },
  { x: 0.328125, y: 0.953125 },
  { x: 0.359375, y: 0.953125 },
  { x: 0.359375, y: 0.953125 },
  { x: 0.390625, y: 0.953125 },
  { x: 0.390625, y: 0.953125 },
  { x: 0.421875, y: 0.953125 },
  { x: 0.421875, y: 0.953125 },
  { x: 0.453125, y: 0.953125 },
  { x: 0.453125, y: 0.953125 },
  { x: 0.484375, y: 0.953125 },
  { x: 0.484375, y: 0.953125 },
  { x: 0.515625, y: 0.953125 },
  { x: 0.515625, y: 0.953125 },
  { x: 0.546875, y: 0.953125 },
  { x: 0.546875, y: 0.953125 },
  { x: 0.578125, y: 0.953125 },
  { x: 0.578125, y: 0.953125 },
  { x: 0.609375, y: 0.953125 },
  { x: 0.609375, y: 0.953125 },
  { x: 0.640625, y: 0.953125 },
  { x: 0.640625, y: 0.953125 },
  { x: 0.671875, y: 0.953125 },
  { x: 0.671875, y: 0.953125 },
  { x: 0.703125, y: 0.953125 },
  { x: 0.703125, y: 0.953125 },
  { x: 0.734375, y: 0.953125 },
  { x: 0.734375, y: 0.953125 },
  { x: 0.765625, y: 0.953125 },
  { x: 0.765625, y: 0.953125 },
  { x: 0.796875, y: 0.953125 },
  { x: 0.796875, y: 0.953125 },
  { x: 0.828125, y: 0.953125 },
  { x: 0.828125, y: 0.953125 },
  { x: 0.859375, y: 0.953125 },
  { x: 0.859375, y: 0.953125 },
  { x: 0.890625, y: 0.953125 },
  { x: 0.890625, y: 0.953125 },
  { x: 0.921875, y: 0.953125 },
  { x: 0.921875, y: 0.953125 },
  { x: 0.953125, y: 0.953125 },
  { x: 0.953125, y: 0.953125 },
  { x: 0.984375, y: 0.953125 },
  { x: 0.984375, y: 0.953125 },
  { x: 0.015625, y: 0.984375 },
  { x: 0.015625, y: 0.984375 },
  { x: 0.046875, y: 0.984375 },
  { x: 0.046875, y: 0.984375 },
  { x: 0.078125, y: 0.984375 },
  { x: 0.078125, y: 0.984375 },
  { x: 0.109375, y: 0.984375 },
  { x: 0.109375, y: 0.984375 },
  { x: 0.140625, y: 0.984375 },
  { x: 0.140625, y: 0.984375 },
  { x: 0.171875, y: 0.984375 },
  { x: 0.171875, y: 0.984375 },
  { x: 0.203125, y: 0.984375 },
  { x: 0.203125, y: 0.984375 },
  { x: 0.234375, y: 0.984375 },
  { x: 0.234375, y: 0.984375 },
  { x: 0.265625, y: 0.984375 },
  { x: 0.265625, y: 0.984375 },
  { x: 0.296875, y: 0.984375 },
  { x: 0.296875, y: 0.984375 },
  { x: 0.328125, y: 0.984375 },
  { x: 0.328125, y: 0.984375 },
  { x: 0.359375, y: 0.984375 },
  { x: 0.359375, y: 0.984375 },
  { x: 0.390625, y: 0.984375 },
  { x: 0.390625, y: 0.984375 },
  { x: 0.421875, y: 0.984375 },
  { x: 0.421875, y: 0.984375 },
  { x: 0.453125, y: 0.984375 },
  { x: 0.453125, y: 0.984375 },
  { x: 0.484375, y: 0.984375 },
  { x: 0.484375, y: 0.984375 },
  { x: 0.515625, y: 0.984375 },
  { x: 0.515625, y: 0.984375 },
  { x: 0.546875, y: 0.984375 },
  { x: 0.546875, y: 0.984375 },
  { x: 0.578125, y: 0.984375 },
  { x: 0.578125, y: 0.984375 },
  { x: 0.609375, y: 0.984375 },
  { x: 0.609375, y: 0.984375 },
  { x: 0.640625, y: 0.984375 },
  { x: 0.640625, y: 0.984375 },
  { x: 0.671875, y: 0.984375 },
  { x: 0.671875, y: 0.984375 },
  { x: 0.703125, y: 0.984375 },
  { x: 0.703125, y: 0.984375 },
  { x: 0.734375, y: 0.984375 },
  { x: 0.734375, y: 0.984375 },
  { x: 0.765625, y: 0.984375 },
  { x: 0.765625, y: 0.984375 },
  { x: 0.796875, y: 0.984375 },
  { x: 0.796875, y: 0.984375 },
  { x: 0.828125, y: 0.984375 },
  { x: 0.828125, y: 0.984375 },
  { x: 0.859375, y: 0.984375 },
  { x: 0.859375, y: 0.984375 },
  { x: 0.890625, y: 0.984375 },
  { x: 0.890625, y: 0.984375 },
  { x: 0.921875, y: 0.984375 },
  { x: 0.921875, y: 0.984375 },
  { x: 0.953125, y: 0.984375 },
  { x: 0.953125, y: 0.984375 },
  { x: 0.984375, y: 0.984375 },
  { x: 0.984375, y: 0.984375 },
  { x: 0.03125, y: 0.03125 },
  { x: 0.03125, y: 0.03125 },
  { x: 0.09375, y: 0.03125 },
  { x: 0.09375, y: 0.03125 },
  { x: 0.15625, y: 0.03125 },
  { x: 0.15625, y: 0.03125 },
  { x: 0.21875, y: 0.03125 },
  { x: 0.21875, y: 0.03125 },
  { x: 0.28125, y: 0.03125 },
  { x: 0.28125, y: 0.03125 },
  { x: 0.34375, y: 0.03125 },
  { x: 0.34375, y: 0.03125 },
  { x: 0.40625, y: 0.03125 },
  { x: 0.40625, y: 0.03125 },
  { x: 0.46875, y: 0.03125 },
  { x: 0.46875, y: 0.03125 },
  { x: 0.53125, y: 0.03125 },
  { x: 0.53125, y: 0.03125 },
  { x: 0.59375, y: 0.03125 },
  { x: 0.59375, y: 0.03125 },
  { x: 0.65625, y: 0.03125 },
  { x: 0.65625, y: 0.03125 },
  { x: 0.71875, y: 0.03125 },
  { x: 0.71875, y: 0.03125 },
  { x: 0.78125, y: 0.03125 },
  { x: 0.78125, y: 0.03125 },
  { x: 0.84375, y: 0.03125 },
  { x: 0.84375, y: 0.03125 },
  { x: 0.90625, y: 0.03125 },
  { x: 0.90625, y: 0.03125 },
  { x: 0.96875, y: 0.03125 },
  { x: 0.96875, y: 0.03125 },
  { x: 0.03125, y: 0.09375 },
  { x: 0.03125, y: 0.09375 },
  { x: 0.09375, y: 0.09375 },
  { x: 0.09375, y: 0.09375 },
  { x: 0.15625, y: 0.09375 },
  { x: 0.15625, y: 0.09375 },
  { x: 0.21875, y: 0.09375 },
  { x: 0.21875, y: 0.09375 },
  { x: 0.28125, y: 0.09375 },
  { x: 0.28125, y: 0.09375 },
  { x: 0.34375, y: 0.09375 },
  { x: 0.34375, y: 0.09375 },
  { x: 0.40625, y: 0.09375 },
  { x: 0.40625, y: 0.09375 },
  { x: 0.46875, y: 0.09375 },
  { x: 0.46875, y: 0.09375 },
  { x: 0.53125, y: 0.09375 },
  { x: 0.53125, y: 0.09375 },
  { x: 0.59375, y: 0.09375 },
  { x: 0.59375, y: 0.09375 },
  { x: 0.65625, y: 0.09375 },
  { x: 0.65625, y: 0.09375 },
  { x: 0.71875, y: 0.09375 },
  { x: 0.71875, y: 0.09375 },
  { x: 0.78125, y: 0.09375 },
  { x: 0.78125, y: 0.09375 },
  { x: 0.84375, y: 0.09375 },
  { x: 0.84375, y: 0.09375 },
  { x: 0.90625, y: 0.09375 },
  { x: 0.90625, y: 0.09375 },
  { x: 0.96875, y: 0.09375 },
  { x: 0.96875, y: 0.09375 },
  { x: 0.03125, y: 0.15625 },
  { x: 0.03125, y: 0.15625 },
  { x: 0.09375, y: 0.15625 },
  { x: 0.09375, y: 0.15625 },
  { x: 0.15625, y: 0.15625 },
  { x: 0.15625, y: 0.15625 },
  { x: 0.21875, y: 0.15625 },
  { x: 0.21875, y: 0.15625 },
  { x: 0.28125, y: 0.15625 },
  { x: 0.28125, y: 0.15625 },
  { x: 0.34375, y: 0.15625 },
  { x: 0.34375, y: 0.15625 },
  { x: 0.40625, y: 0.15625 },
  { x: 0.40625, y: 0.15625 },
  { x: 0.46875, y: 0.15625 },
  { x: 0.46875, y: 0.15625 },
  { x: 0.53125, y: 0.15625 },
  { x: 0.53125, y: 0.15625 },
  { x: 0.59375, y: 0.15625 },
  { x: 0.59375, y: 0.15625 },
  { x: 0.65625, y: 0.15625 },
  { x: 0.65625, y: 0.15625 },
  { x: 0.71875, y: 0.15625 },
  { x: 0.71875, y: 0.15625 },
  { x: 0.78125, y: 0.15625 },
  { x: 0.78125, y: 0.15625 },
  { x: 0.84375, y: 0.15625 },
  { x: 0.84375, y: 0.15625 },
  { x: 0.90625, y: 0.15625 },
  { x: 0.90625, y: 0.15625 },
  { x: 0.96875, y: 0.15625 },
  { x: 0.96875, y: 0.15625 },
  { x: 0.03125, y: 0.21875 },
  { x: 0.03125, y: 0.21875 },
  { x: 0.09375, y: 0.21875 },
  { x: 0.09375, y: 0.21875 },
  { x: 0.15625, y: 0.21875 },
  { x: 0.15625, y: 0.21875 },
  { x: 0.21875, y: 0.21875 },
  { x: 0.21875, y: 0.21875 },
  { x: 0.28125, y: 0.21875 },
  { x: 0.28125, y: 0.21875 },
  { x: 0.34375, y: 0.21875 },
  { x: 0.34375, y: 0.21875 },
  { x: 0.40625, y: 0.21875 },
  { x: 0.40625, y: 0.21875 },
  { x: 0.46875, y: 0.21875 },
  { x: 0.46875, y: 0.21875 },
  { x: 0.53125, y: 0.21875 },
  { x: 0.53125, y: 0.21875 },
  { x: 0.59375, y: 0.21875 },
  { x: 0.59375, y: 0.21875 },
  { x: 0.65625, y: 0.21875 },
  { x: 0.65625, y: 0.21875 },
  { x: 0.71875, y: 0.21875 },
  { x: 0.71875, y: 0.21875 },
  { x: 0.78125, y: 0.21875 },
  { x: 0.78125, y: 0.21875 },
  { x: 0.84375, y: 0.21875 },
  { x: 0.84375, y: 0.21875 },
  { x: 0.90625, y: 0.21875 },
  { x: 0.90625, y: 0.21875 },
  { x: 0.96875, y: 0.21875 },
  { x: 0.96875, y: 0.21875 },
  { x: 0.03125, y: 0.28125 },
  { x: 0.03125, y: 0.28125 },
  { x: 0.09375, y: 0.28125 },
  { x: 0.09375, y: 0.28125 },
  { x: 0.15625, y: 0.28125 },
  { x: 0.15625, y: 0.28125 },
  { x: 0.21875, y: 0.28125 },
  { x: 0.21875, y: 0.28125 },
  { x: 0.28125, y: 0.28125 },
  { x: 0.28125, y: 0.28125 },
  { x: 0.34375, y: 0.28125 },
  { x: 0.34375, y: 0.28125 },
  { x: 0.40625, y: 0.28125 },
  { x: 0.40625, y: 0.28125 },
  { x: 0.46875, y: 0.28125 },
  { x: 0.46875, y: 0.28125 },
  { x: 0.53125, y: 0.28125 },
  { x: 0.53125, y: 0.28125 },
  { x: 0.59375, y: 0.28125 },
  { x: 0.59375, y: 0.28125 },
  { x: 0.65625, y: 0.28125 },
  { x: 0.65625, y: 0.28125 },
  { x: 0.71875, y: 0.28125 },
  { x: 0.71875, y: 0.28125 },
  { x: 0.78125, y: 0.28125 },
  { x: 0.78125, y: 0.28125 },
  { x: 0.84375, y: 0.28125 },
  { x: 0.84375, y: 0.28125 },
  { x: 0.90625, y: 0.28125 },
  { x: 0.90625, y: 0.28125 },
  { x: 0.96875, y: 0.28125 },
  { x: 0.96875, y: 0.28125 },
  { x: 0.03125, y: 0.34375 },
  { x: 0.03125, y: 0.34375 },
  { x: 0.09375, y: 0.34375 },
  { x: 0.09375, y: 0.34375 },
  { x: 0.15625, y: 0.34375 },
  { x: 0.15625, y: 0.34375 },
  { x: 0.21875, y: 0.34375 },
  { x: 0.21875, y: 0.34375 },
  { x: 0.28125, y: 0.34375 },
  { x: 0.28125, y: 0.34375 },
  { x: 0.34375, y: 0.34375 },
  { x: 0.34375, y: 0.34375 },
  { x: 0.40625, y: 0.34375 },
  { x: 0.40625, y: 0.34375 },
  { x: 0.46875, y: 0.34375 },
  { x: 0.46875, y: 0.34375 },
  { x: 0.53125, y: 0.34375 },
  { x: 0.53125, y: 0.34375 },
  { x: 0.59375, y: 0.34375 },
  { x: 0.59375, y: 0.34375 },
  { x: 0.65625, y: 0.34375 },
  { x: 0.65625, y: 0.34375 },
  { x: 0.71875, y: 0.34375 },
  { x: 0.71875, y: 0.34375 },
  { x: 0.78125, y: 0.34375 },
  { x: 0.78125, y: 0.34375 },
  { x: 0.84375, y: 0.34375 },
  { x: 0.84375, y: 0.34375 },
  { x: 0.90625, y: 0.34375 },
  { x: 0.90625, y: 0.34375 },
  { x: 0.96875, y: 0.34375 },
  { x: 0.96875, y: 0.34375 },
  { x: 0.03125, y: 0.40625 },
  { x: 0.03125, y: 0.40625 },
  { x: 0.09375, y: 0.40625 },
  { x: 0.09375, y: 0.40625 },
  { x: 0.15625, y: 0.40625 },
  { x: 0.15625, y: 0.40625 },
  { x: 0.21875, y: 0.40625 },
  { x: 0.21875, y: 0.40625 },
  { x: 0.28125, y: 0.40625 },
  { x: 0.28125, y: 0.40625 },
  { x: 0.34375, y: 0.40625 },
  { x: 0.34375, y: 0.40625 },
  { x: 0.40625, y: 0.40625 },
  { x: 0.40625, y: 0.40625 },
  { x: 0.46875, y: 0.40625 },
  { x: 0.46875, y: 0.40625 },
  { x: 0.53125, y: 0.40625 },
  { x: 0.53125, y: 0.40625 },
  { x: 0.59375, y: 0.40625 },
  { x: 0.59375, y: 0.40625 },
  { x: 0.65625, y: 0.40625 },
  { x: 0.65625, y: 0.40625 },
  { x: 0.71875, y: 0.40625 },
  { x: 0.71875, y: 0.40625 },
  { x: 0.78125, y: 0.40625 },
  { x: 0.78125, y: 0.40625 },
  { x: 0.84375, y: 0.40625 },
  { x: 0.84375, y: 0.40625 },
  { x: 0.90625, y: 0.40625 },
  { x: 0.90625, y: 0.40625 },
  { x: 0.96875, y: 0.40625 },
  { x: 0.96875, y: 0.40625 },
  { x: 0.03125, y: 0.46875 },
  { x: 0.03125, y: 0.46875 },
  { x: 0.09375, y: 0.46875 },
  { x: 0.09375, y: 0.46875 },
  { x: 0.15625, y: 0.46875 },
  { x: 0.15625, y: 0.46875 },
  { x: 0.21875, y: 0.46875 },
  { x: 0.21875, y: 0.46875 },
  { x: 0.28125, y: 0.46875 },
  { x: 0.28125, y: 0.46875 },
  { x: 0.34375, y: 0.46875 },
  { x: 0.34375, y: 0.46875 },
  { x: 0.40625, y: 0.46875 },
  { x: 0.40625, y: 0.46875 },
  { x: 0.46875, y: 0.46875 },
  { x: 0.46875, y: 0.46875 },
  { x: 0.53125, y: 0.46875 },
  { x: 0.53125, y: 0.46875 },
  { x: 0.59375, y: 0.46875 },
  { x: 0.59375, y: 0.46875 },
  { x: 0.65625, y: 0.46875 },
  { x: 0.65625, y: 0.46875 },
  { x: 0.71875, y: 0.46875 },
  { x: 0.71875, y: 0.46875 },
  { x: 0.78125, y: 0.46875 },
  { x: 0.78125, y: 0.46875 },
  { x: 0.84375, y: 0.46875 },
  { x: 0.84375, y: 0.46875 },
  { x: 0.90625, y: 0.46875 },
  { x: 0.90625, y: 0.46875 },
  { x: 0.96875, y: 0.46875 },
  { x: 0.96875, y: 0.46875 },
  { x: 0.03125, y: 0.53125 },
  { x: 0.03125, y: 0.53125 },
  { x: 0.09375, y: 0.53125 },
  { x: 0.09375, y: 0.53125 },
  { x: 0.15625, y: 0.53125 },
  { x: 0.15625, y: 0.53125 },
  { x: 0.21875, y: 0.53125 },
  { x: 0.21875, y: 0.53125 },
  { x: 0.28125, y: 0.53125 },
  { x: 0.28125, y: 0.53125 },
  { x: 0.34375, y: 0.53125 },
  { x: 0.34375, y: 0.53125 },
  { x: 0.40625, y: 0.53125 },
  { x: 0.40625, y: 0.53125 },
  { x: 0.46875, y: 0.53125 },
  { x: 0.46875, y: 0.53125 },
  { x: 0.53125, y: 0.53125 },
  { x: 0.53125, y: 0.53125 },
  { x: 0.59375, y: 0.53125 },
  { x: 0.59375, y: 0.53125 },
  { x: 0.65625, y: 0.53125 },
  { x: 0.65625, y: 0.53125 },
  { x: 0.71875, y: 0.53125 },
  { x: 0.71875, y: 0.53125 },
  { x: 0.78125, y: 0.53125 },
  { x: 0.78125, y: 0.53125 },
  { x: 0.84375, y: 0.53125 },
  { x: 0.84375, y: 0.53125 },
  { x: 0.90625, y: 0.53125 },
  { x: 0.90625, y: 0.53125 },
  { x: 0.96875, y: 0.53125 },
  { x: 0.96875, y: 0.53125 },
  { x: 0.03125, y: 0.59375 },
  { x: 0.03125, y: 0.59375 },
  { x: 0.09375, y: 0.59375 },
  { x: 0.09375, y: 0.59375 },
  { x: 0.15625, y: 0.59375 },
  { x: 0.15625, y: 0.59375 },
  { x: 0.21875, y: 0.59375 },
  { x: 0.21875, y: 0.59375 },
  { x: 0.28125, y: 0.59375 },
  { x: 0.28125, y: 0.59375 },
  { x: 0.34375, y: 0.59375 },
  { x: 0.34375, y: 0.59375 },
  { x: 0.40625, y: 0.59375 },
  { x: 0.40625, y: 0.59375 },
  { x: 0.46875, y: 0.59375 },
  { x: 0.46875, y: 0.59375 },
  { x: 0.53125, y: 0.59375 },
  { x: 0.53125, y: 0.59375 },
  { x: 0.59375, y: 0.59375 },
  { x: 0.59375, y: 0.59375 },
  { x: 0.65625, y: 0.59375 },
  { x: 0.65625, y: 0.59375 },
  { x: 0.71875, y: 0.59375 },
  { x: 0.71875, y: 0.59375 },
  { x: 0.78125, y: 0.59375 },
  { x: 0.78125, y: 0.59375 },
  { x: 0.84375, y: 0.59375 },
  { x: 0.84375, y: 0.59375 },
  { x: 0.90625, y: 0.59375 },
  { x: 0.90625, y: 0.59375 },
  { x: 0.96875, y: 0.59375 },
  { x: 0.96875, y: 0.59375 },
  { x: 0.03125, y: 0.65625 },
  { x: 0.03125, y: 0.65625 },
  { x: 0.09375, y: 0.65625 },
  { x: 0.09375, y: 0.65625 },
  { x: 0.15625, y: 0.65625 },
  { x: 0.15625, y: 0.65625 },
  { x: 0.21875, y: 0.65625 },
  { x: 0.21875, y: 0.65625 },
  { x: 0.28125, y: 0.65625 },
  { x: 0.28125, y: 0.65625 },
  { x: 0.34375, y: 0.65625 },
  { x: 0.34375, y: 0.65625 },
  { x: 0.40625, y: 0.65625 },
  { x: 0.40625, y: 0.65625 },
  { x: 0.46875, y: 0.65625 },
  { x: 0.46875, y: 0.65625 },
  { x: 0.53125, y: 0.65625 },
  { x: 0.53125, y: 0.65625 },
  { x: 0.59375, y: 0.65625 },
  { x: 0.59375, y: 0.65625 },
  { x: 0.65625, y: 0.65625 },
  { x: 0.65625, y: 0.65625 },
  { x: 0.71875, y: 0.65625 },
  { x: 0.71875, y: 0.65625 },
  { x: 0.78125, y: 0.65625 },
  { x: 0.78125, y: 0.65625 },
  { x: 0.84375, y: 0.65625 },
  { x: 0.84375, y: 0.65625 },
  { x: 0.90625, y: 0.65625 },
  { x: 0.90625, y: 0.65625 },
  { x: 0.96875, y: 0.65625 },
  { x: 0.96875, y: 0.65625 },
  { x: 0.03125, y: 0.71875 },
  { x: 0.03125, y: 0.71875 },
  { x: 0.09375, y: 0.71875 },
  { x: 0.09375, y: 0.71875 },
  { x: 0.15625, y: 0.71875 },
  { x: 0.15625, y: 0.71875 },
  { x: 0.21875, y: 0.71875 },
  { x: 0.21875, y: 0.71875 },
  { x: 0.28125, y: 0.71875 },
  { x: 0.28125, y: 0.71875 },
  { x: 0.34375, y: 0.71875 },
  { x: 0.34375, y: 0.71875 },
  { x: 0.40625, y: 0.71875 },
  { x: 0.40625, y: 0.71875 },
  { x: 0.46875, y: 0.71875 },
  { x: 0.46875, y: 0.71875 },
  { x: 0.53125, y: 0.71875 },
  { x: 0.53125, y: 0.71875 },
  { x: 0.59375, y: 0.71875 },
  { x: 0.59375, y: 0.71875 },
  { x: 0.65625, y: 0.71875 },
  { x: 0.65625, y: 0.71875 },
  { x: 0.71875, y: 0.71875 },
  { x: 0.71875, y: 0.71875 },
  { x: 0.78125, y: 0.71875 },
  { x: 0.78125, y: 0.71875 },
  { x: 0.84375, y: 0.71875 },
  { x: 0.84375, y: 0.71875 },
  { x: 0.90625, y: 0.71875 },
  { x: 0.90625, y: 0.71875 },
  { x: 0.96875, y: 0.71875 },
  { x: 0.96875, y: 0.71875 },
  { x: 0.03125, y: 0.78125 },
  { x: 0.03125, y: 0.78125 },
  { x: 0.09375, y: 0.78125 },
  { x: 0.09375, y: 0.78125 },
  { x: 0.15625, y: 0.78125 },
  { x: 0.15625, y: 0.78125 },
  { x: 0.21875, y: 0.78125 },
  { x: 0.21875, y: 0.78125 },
  { x: 0.28125, y: 0.78125 },
  { x: 0.28125, y: 0.78125 },
  { x: 0.34375, y: 0.78125 },
  { x: 0.34375, y: 0.78125 },
  { x: 0.40625, y: 0.78125 },
  { x: 0.40625, y: 0.78125 },
  { x: 0.46875, y: 0.78125 },
  { x: 0.46875, y: 0.78125 },
  { x: 0.53125, y: 0.78125 },
  { x: 0.53125, y: 0.78125 },
  { x: 0.59375, y: 0.78125 },
  { x: 0.59375, y: 0.78125 },
  { x: 0.65625, y: 0.78125 },
  { x: 0.65625, y: 0.78125 },
  { x: 0.71875, y: 0.78125 },
  { x: 0.71875, y: 0.78125 },
  { x: 0.78125, y: 0.78125 },
  { x: 0.78125, y: 0.78125 },
  { x: 0.84375, y: 0.78125 },
  { x: 0.84375, y: 0.78125 },
  { x: 0.90625, y: 0.78125 },
  { x: 0.90625, y: 0.78125 },
  { x: 0.96875, y: 0.78125 },
  { x: 0.96875, y: 0.78125 },
  { x: 0.03125, y: 0.84375 },
  { x: 0.03125, y: 0.84375 },
  { x: 0.09375, y: 0.84375 },
  { x: 0.09375, y: 0.84375 },
  { x: 0.15625, y: 0.84375 },
  { x: 0.15625, y: 0.84375 },
  { x: 0.21875, y: 0.84375 },
  { x: 0.21875, y: 0.84375 },
  { x: 0.28125, y: 0.84375 },
  { x: 0.28125, y: 0.84375 },
  { x: 0.34375, y: 0.84375 },
  { x: 0.34375, y: 0.84375 },
  { x: 0.40625, y: 0.84375 },
  { x: 0.40625, y: 0.84375 },
  { x: 0.46875, y: 0.84375 },
  { x: 0.46875, y: 0.84375 },
  { x: 0.53125, y: 0.84375 },
  { x: 0.53125, y: 0.84375 },
  { x: 0.59375, y: 0.84375 },
  { x: 0.59375, y: 0.84375 },
  { x: 0.65625, y: 0.84375 },
  { x: 0.65625, y: 0.84375 },
  { x: 0.71875, y: 0.84375 },
  { x: 0.71875, y: 0.84375 },
  { x: 0.78125, y: 0.84375 },
  { x: 0.78125, y: 0.84375 },
  { x: 0.84375, y: 0.84375 },
  { x: 0.84375, y: 0.84375 },
  { x: 0.90625, y: 0.84375 },
  { x: 0.90625, y: 0.84375 },
  { x: 0.96875, y: 0.84375 },
  { x: 0.96875, y: 0.84375 },
  { x: 0.03125, y: 0.90625 },
  { x: 0.03125, y: 0.90625 },
  { x: 0.09375, y: 0.90625 },
  { x: 0.09375, y: 0.90625 },
  { x: 0.15625, y: 0.90625 },
  { x: 0.15625, y: 0.90625 },
  { x: 0.21875, y: 0.90625 },
  { x: 0.21875, y: 0.90625 },
  { x: 0.28125, y: 0.90625 },
  { x: 0.28125, y: 0.90625 },
  { x: 0.34375, y: 0.90625 },
  { x: 0.34375, y: 0.90625 },
  { x: 0.40625, y: 0.90625 },
  { x: 0.40625, y: 0.90625 },
  { x: 0.46875, y: 0.90625 },
  { x: 0.46875, y: 0.90625 },
  { x: 0.53125, y: 0.90625 },
  { x: 0.53125, y: 0.90625 },
  { x: 0.59375, y: 0.90625 },
  { x: 0.59375, y: 0.90625 },
  { x: 0.65625, y: 0.90625 },
  { x: 0.65625, y: 0.90625 },
  { x: 0.71875, y: 0.90625 },
  { x: 0.71875, y: 0.90625 },
  { x: 0.78125, y: 0.90625 },
  { x: 0.78125, y: 0.90625 },
  { x: 0.84375, y: 0.90625 },
  { x: 0.84375, y: 0.90625 },
  { x: 0.90625, y: 0.90625 },
  { x: 0.90625, y: 0.90625 },
  { x: 0.96875, y: 0.90625 },
  { x: 0.96875, y: 0.90625 },
  { x: 0.03125, y: 0.96875 },
  { x: 0.03125, y: 0.96875 },
  { x: 0.09375, y: 0.96875 },
  { x: 0.09375, y: 0.96875 },
  { x: 0.15625, y: 0.96875 },
  { x: 0.15625, y: 0.96875 },
  { x: 0.21875, y: 0.96875 },
  { x: 0.21875, y: 0.96875 },
  { x: 0.28125, y: 0.96875 },
  { x: 0.28125, y: 0.96875 },
  { x: 0.34375, y: 0.96875 },
  { x: 0.34375, y: 0.96875 },
  { x: 0.40625, y: 0.96875 },
  { x: 0.40625, y: 0.96875 },
  { x: 0.46875, y: 0.96875 },
  { x: 0.46875, y: 0.96875 },
  { x: 0.53125, y: 0.96875 },
  { x: 0.53125, y: 0.96875 },
  { x: 0.59375, y: 0.96875 },
  { x: 0.59375, y: 0.96875 },
  { x: 0.65625, y: 0.96875 },
  { x: 0.65625, y: 0.96875 },
  { x: 0.71875, y: 0.96875 },
  { x: 0.71875, y: 0.96875 },
  { x: 0.78125, y: 0.96875 },
  { x: 0.78125, y: 0.96875 },
  { x: 0.84375, y: 0.96875 },
  { x: 0.84375, y: 0.96875 },
  { x: 0.90625, y: 0.96875 },
  { x: 0.90625, y: 0.96875 },
  { x: 0.96875, y: 0.96875 },
  { x: 0.96875, y: 0.96875 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 }
];

// src/hand/handposedetector.ts
var HandDetector = class {
  constructor(model23) {
    __publicField(this, "model");
    __publicField(this, "anchors");
    __publicField(this, "anchorsTensor");
    __publicField(this, "inputSize");
    __publicField(this, "inputSizeTensor");
    __publicField(this, "doubleInputSizeTensor");
    var _a, _b, _c2, _d2;
    this.model = model23;
    this.anchors = anchors2.map((anchor) => [anchor.x, anchor.y]);
    this.anchorsTensor = fu(this.anchors);
    this.inputSize = ((_d2 = (_c2 = (_b = (_a = this == null ? void 0 : this.model) == null ? void 0 : _a.inputs) == null ? void 0 : _b[0]) == null ? void 0 : _c2.shape) == null ? void 0 : _d2[2]) || 0;
    this.inputSizeTensor = tr([this.inputSize, this.inputSize]);
    this.doubleInputSizeTensor = tr([this.inputSize * 2, this.inputSize * 2]);
  }
  normalizeBoxes(boxes) {
    const t8 = {};
    t8.boxOffsets = Xe(boxes, [0, 0], [-1, 2]);
    t8.boxSizes = Xe(boxes, [0, 2], [-1, 2]);
    t8.div = je(t8.boxOffsets, this.inputSizeTensor);
    t8.boxCenterPoints = Ce(t8.div, this.anchorsTensor);
    t8.halfBoxSizes = je(t8.boxSizes, this.doubleInputSizeTensor);
    t8.sub = Te(t8.boxCenterPoints, t8.halfBoxSizes);
    t8.startPoints = se(t8.sub, this.inputSizeTensor);
    t8.add = Ce(t8.boxCenterPoints, t8.halfBoxSizes);
    t8.endPoints = se(t8.add, this.inputSizeTensor);
    const res = Yk([t8.startPoints, t8.endPoints], 1);
    Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    return res;
  }
  normalizeLandmarks(rawPalmLandmarks, index2) {
    const t8 = {};
    t8.reshape = W(rawPalmLandmarks, [-1, 7, 2]);
    t8.div = je(t8.reshape, this.inputSizeTensor);
    t8.landmarks = Ce(t8.div, this.anchors[index2] ? this.anchors[index2] : 0);
    const res = se(t8.landmarks, this.inputSizeTensor);
    Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    return res;
  }
  async predict(input, config3) {
    var _a;
    const t8 = {};
    t8.resize = Kj.resizeBilinear(input, [this.inputSize, this.inputSize]);
    t8.div = je(t8.resize, constants.tf127);
    t8.image = Te(t8.div, constants.tf1);
    t8.batched = this.model.execute(t8.image);
    t8.predictions = gc(t8.batched);
    t8.slice = Xe(t8.predictions, [0, 0], [-1, 1]);
    t8.sigmoid = $a(t8.slice);
    t8.scores = gc(t8.sigmoid);
    const scores = await t8.scores.data();
    t8.boxes = Xe(t8.predictions, [0, 1], [-1, 4]);
    t8.norm = this.normalizeBoxes(t8.boxes);
    t8.nms = await Kj.nonMaxSuppressionAsync(t8.norm, t8.scores, 3 * (((_a = config3.hand) == null ? void 0 : _a.maxDetected) || 1), config3.hand.iouThreshold, config3.hand.minConfidence);
    const nms = await t8.nms.array();
    const hands = [];
    for (const index2 of nms) {
      const p = {};
      p.box = Xe(t8.norm, [index2, 0], [1, -1]);
      p.slice = Xe(t8.predictions, [index2, 5], [1, 14]);
      p.norm = this.normalizeLandmarks(p.slice, index2);
      p.palmLandmarks = W(p.norm, [-1, 2]);
      const box = await p.box.data();
      const startPoint = box.slice(0, 2);
      const endPoint = box.slice(2, 4);
      const palmLandmarks = await p.palmLandmarks.array();
      const hand3 = { startPoint, endPoint, palmLandmarks, confidence: scores[index2] };
      const scaled = scaleBoxCoordinates2(hand3, [(input.shape[2] || 1) / this.inputSize, (input.shape[1] || 0) / this.inputSize]);
      hands.push(scaled);
      Object.keys(p).forEach((tensor) => Mt(p[tensor]));
    }
    Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    return hands;
  }
};

// src/hand/handposepipeline.ts
var palmBoxEnlargeFactor = 5;
var handBoxEnlargeFactor = 1.65;
var palmLandmarkIds = [0, 5, 9, 13, 17, 1, 2];
var palmLandmarksPalmBase = 0;
var palmLandmarksMiddleFingerBase = 2;
var lastTime13 = 0;
var HandPipeline = class {
  constructor(handDetector, handPoseModel2) {
    __publicField(this, "handDetector");
    __publicField(this, "handPoseModel");
    __publicField(this, "inputSize");
    __publicField(this, "storedBoxes");
    __publicField(this, "skipped");
    __publicField(this, "detectedHands");
    var _a, _b, _c2;
    this.handDetector = handDetector;
    this.handPoseModel = handPoseModel2;
    this.inputSize = ((_c2 = (_b = (_a = this.handPoseModel) == null ? void 0 : _a.inputs) == null ? void 0 : _b[0].shape) == null ? void 0 : _c2[2]) || 0;
    this.storedBoxes = [];
    this.skipped = Number.MAX_SAFE_INTEGER;
    this.detectedHands = 0;
  }
  calculateLandmarksBoundingBox(landmarks) {
    const xs2 = landmarks.map((d) => d[0]);
    const ys2 = landmarks.map((d) => d[1]);
    const startPoint = [Math.min(...xs2), Math.min(...ys2)];
    const endPoint = [Math.max(...xs2), Math.max(...ys2)];
    return { startPoint, endPoint };
  }
  getBoxForPalmLandmarks(palmLandmarks, rotationMatrix) {
    const rotatedPalmLandmarks = palmLandmarks.map((coord) => rotatePoint2([...coord, 1], rotationMatrix));
    const boxAroundPalm = this.calculateLandmarksBoundingBox(rotatedPalmLandmarks);
    return enlargeBox2(squarifyBox2(boxAroundPalm), palmBoxEnlargeFactor);
  }
  getBoxForHandLandmarks(landmarks) {
    const boundingBox = this.calculateLandmarksBoundingBox(landmarks);
    const boxAroundHand = enlargeBox2(squarifyBox2(boundingBox), handBoxEnlargeFactor);
    boxAroundHand.palmLandmarks = [];
    for (let i = 0; i < palmLandmarkIds.length; i++) {
      boxAroundHand.palmLandmarks.push(landmarks[palmLandmarkIds[i]].slice(0, 2));
    }
    return boxAroundHand;
  }
  transformRawCoords(rawCoords, box2, angle, rotationMatrix) {
    const boxSize = getBoxSize2(box2);
    const scaleFactor = [boxSize[0] / this.inputSize, boxSize[1] / this.inputSize, (boxSize[0] + boxSize[1]) / this.inputSize / 2];
    const coordsScaled = rawCoords.map((coord) => [
      scaleFactor[0] * (coord[0] - this.inputSize / 2),
      scaleFactor[1] * (coord[1] - this.inputSize / 2),
      scaleFactor[2] * coord[2]
    ]);
    const coordsRotationMatrix = buildRotationMatrix2(angle, [0, 0]);
    const coordsRotated = coordsScaled.map((coord) => {
      const rotated = rotatePoint2(coord, coordsRotationMatrix);
      return [...rotated, coord[2]];
    });
    const inverseRotationMatrix = invertTransformMatrix2(rotationMatrix);
    const boxCenter = [...getBoxCenter2(box2), 1];
    const originalBoxCenter = [
      dot2(boxCenter, inverseRotationMatrix[0]),
      dot2(boxCenter, inverseRotationMatrix[1])
    ];
    return coordsRotated.map((coord) => [
      Math.trunc(coord[0] + originalBoxCenter[0]),
      Math.trunc(coord[1] + originalBoxCenter[1]),
      Math.trunc(coord[2])
    ]);
  }
  async estimateHands(image, config3) {
    let useFreshBox = false;
    let boxes;
    const skipTime = (config3.hand.skipTime || 0) > now() - lastTime13;
    const skipFrame = this.skipped < (config3.hand.skipFrames || 0);
    if (config3.skipAllowed && skipTime && skipFrame) {
      this.skipped++;
    } else {
      boxes = await this.handDetector.predict(image, config3);
      this.skipped = 0;
    }
    if (boxes && boxes.length > 0 && (boxes.length !== this.detectedHands && this.detectedHands !== config3.hand.maxDetected || !config3.hand.landmarks)) {
      this.detectedHands = 0;
      this.storedBoxes = [...boxes];
      if (this.storedBoxes.length > 0)
        useFreshBox = true;
    }
    const hands = [];
    for (let i = 0; i < this.storedBoxes.length; i++) {
      const currentBox = this.storedBoxes[i];
      if (!currentBox)
        continue;
      if (config3.hand.landmarks) {
        const angle = config3.hand.rotation ? computeRotation2(currentBox.palmLandmarks[palmLandmarksPalmBase], currentBox.palmLandmarks[palmLandmarksMiddleFingerBase]) : 0;
        const palmCenter = getBoxCenter2(currentBox);
        const palmCenterNormalized = [palmCenter[0] / image.shape[2], palmCenter[1] / image.shape[1]];
        const rotatedImage = config3.hand.rotation && env.kernels.includes("rotatewithoffset") ? Kj.rotateWithOffset(image, angle, 0, palmCenterNormalized) : image.clone();
        const rotationMatrix = buildRotationMatrix2(-angle, palmCenter);
        const newBox = useFreshBox ? this.getBoxForPalmLandmarks(currentBox.palmLandmarks, rotationMatrix) : currentBox;
        const croppedInput = cutBoxFromImageAndResize(newBox, rotatedImage, [this.inputSize, this.inputSize]);
        const handImage = je(croppedInput, constants.tf255);
        Mt(croppedInput);
        Mt(rotatedImage);
        const [confidenceT, keypoints] = this.handPoseModel.execute(handImage);
        lastTime13 = now();
        Mt(handImage);
        const confidence = (await confidenceT.data())[0];
        Mt(confidenceT);
        if (confidence >= config3.hand.minConfidence / 4) {
          const keypointsReshaped = W(keypoints, [-1, 3]);
          const rawCoords = await keypointsReshaped.array();
          Mt(keypoints);
          Mt(keypointsReshaped);
          const coords = this.transformRawCoords(rawCoords, newBox, angle, rotationMatrix);
          const nextBoundingBox = this.getBoxForHandLandmarks(coords);
          this.storedBoxes[i] = { ...nextBoundingBox, confidence };
          const result = {
            landmarks: coords,
            confidence,
            boxConfidence: currentBox.confidence,
            fingerConfidence: confidence,
            box: { topLeft: nextBoundingBox.startPoint, bottomRight: nextBoundingBox.endPoint }
          };
          hands.push(result);
        } else {
          this.storedBoxes[i] = null;
        }
        Mt(keypoints);
      } else {
        const enlarged = enlargeBox2(squarifyBox2(currentBox), handBoxEnlargeFactor);
        const result = {
          confidence: currentBox.confidence,
          boxConfidence: currentBox.confidence,
          fingerConfidence: 0,
          box: { topLeft: enlarged.startPoint, bottomRight: enlarged.endPoint },
          landmarks: []
        };
        hands.push(result);
      }
    }
    this.storedBoxes = this.storedBoxes.filter((a) => a !== null);
    this.detectedHands = hands.length;
    if (hands.length > config3.hand.maxDetected)
      hands.length = config3.hand.maxDetected;
    return hands;
  }
};

// src/hand/handpose.ts
var meshAnnotations2 = {
  thumb: [1, 2, 3, 4],
  index: [5, 6, 7, 8],
  middle: [9, 10, 11, 12],
  ring: [13, 14, 15, 16],
  pinky: [17, 18, 19, 20],
  palm: [0]
};
var handDetectorModel;
var handPoseModel;
var handPipeline;
function initPipeline() {
  const handDetector = handDetectorModel ? new HandDetector(handDetectorModel) : void 0;
  if (handDetector && handPoseModel)
    handPipeline = new HandPipeline(handDetector, handPoseModel);
}
async function predict14(input, config3) {
  if (!handPipeline)
    initPipeline();
  const predictions = await handPipeline.estimateHands(input, config3);
  if (!predictions)
    return [];
  const hands = [];
  for (let i = 0; i < predictions.length; i++) {
    const annotations2 = {};
    if (predictions[i].landmarks) {
      for (const key of Object.keys(meshAnnotations2)) {
        annotations2[key] = meshAnnotations2[key].map((index2) => predictions[i].landmarks[index2]);
      }
    }
    const keypoints = predictions[i].landmarks;
    let box = [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, 0, 0];
    let boxRaw = [0, 0, 0, 0];
    if (keypoints && keypoints.length > 0) {
      for (const pt2 of keypoints) {
        if (pt2[0] < box[0])
          box[0] = pt2[0];
        if (pt2[1] < box[1])
          box[1] = pt2[1];
        if (pt2[0] > box[2])
          box[2] = pt2[0];
        if (pt2[1] > box[3])
          box[3] = pt2[1];
      }
      box[2] -= box[0];
      box[3] -= box[1];
      boxRaw = [box[0] / (input.shape[2] || 0), box[1] / (input.shape[1] || 0), box[2] / (input.shape[2] || 0), box[3] / (input.shape[1] || 0)];
    } else {
      box = predictions[i].box ? [
        Math.trunc(Math.max(0, predictions[i].box.topLeft[0])),
        Math.trunc(Math.max(0, predictions[i].box.topLeft[1])),
        Math.trunc(Math.min(input.shape[2] || 0, predictions[i].box.bottomRight[0]) - Math.max(0, predictions[i].box.topLeft[0])),
        Math.trunc(Math.min(input.shape[1] || 0, predictions[i].box.bottomRight[1]) - Math.max(0, predictions[i].box.topLeft[1]))
      ] : [0, 0, 0, 0];
      boxRaw = [
        predictions[i].box.topLeft[0] / (input.shape[2] || 0),
        predictions[i].box.topLeft[1] / (input.shape[1] || 0),
        (predictions[i].box.bottomRight[0] - predictions[i].box.topLeft[0]) / (input.shape[2] || 0),
        (predictions[i].box.bottomRight[1] - predictions[i].box.topLeft[1]) / (input.shape[1] || 0)
      ];
    }
    const landmarks = analyze(keypoints);
    hands.push({
      id: i,
      score: Math.round(100 * predictions[i].confidence) / 100,
      boxScore: Math.round(100 * predictions[i].boxConfidence) / 100,
      fingerScore: Math.round(100 * predictions[i].fingerConfidence) / 100,
      label: "hand",
      box,
      boxRaw,
      keypoints,
      annotations: annotations2,
      landmarks
    });
  }
  return hands;
}
async function loadDetect2(config3) {
  var _a;
  if (env.initial)
    handDetectorModel = null;
  if (!handDetectorModel)
    handDetectorModel = await loadModel((_a = config3.hand.detector) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", handDetectorModel["modelUrl"]);
  return handDetectorModel;
}
async function loadSkeleton(config3) {
  var _a;
  if (env.initial)
    handPoseModel = null;
  if (!handPoseModel)
    handPoseModel = await loadModel((_a = config3.hand.skeleton) == null ? void 0 : _a.modelPath);
  else if (config3.debug)
    log("cached model:", handPoseModel["modelUrl"]);
  return handPoseModel;
}

// src/hand/handtrack.ts
var models2 = [null, null];
var modelOutputNodes = ["StatefulPartitionedCall/Postprocessor/Slice", "StatefulPartitionedCall/Postprocessor/ExpandDims_1"];
var inputSize7 = [[0, 0], [0, 0]];
var classes = ["hand", "fist", "pinch", "point", "face", "tip", "pinchtip"];
var faceIndex = 4;
var boxExpandFact = 1.6;
var maxDetectorResolution = 512;
var detectorExpandFact = 1.4;
var skipped13 = Number.MAX_SAFE_INTEGER;
var lastTime14 = 0;
var outputSize = [0, 0];
var cache4 = {
  boxes: [],
  hands: []
};
var fingerMap = {
  /*
  thumb: [0, 1, 2, 3, 4],
  index: [0, 5, 6, 7, 8],
  middle: [0, 9, 10, 11, 12],
  ring: [0, 13, 14, 15, 16],
  pinky: [0, 17, 18, 19, 20],
  palm: [0],
  */
  thumb: [1, 2, 3, 4],
  index: [5, 6, 7, 8],
  middle: [9, 10, 11, 12],
  ring: [13, 14, 15, 16],
  pinky: [17, 18, 19, 20],
  base: [0],
  palm: [0, 17, 13, 9, 5, 1, 0]
};
async function loadDetect3(config3) {
  var _a;
  if (env.initial)
    models2[0] = null;
  if (!models2[0]) {
    fakeOps(["tensorlistreserve", "enter", "tensorlistfromtensor", "merge", "loopcond", "switch", "exit", "tensorliststack", "nextiteration", "tensorlistsetitem", "tensorlistgetitem", "reciprocal", "shape", "split", "where"], config3);
    models2[0] = await loadModel((_a = config3.hand.detector) == null ? void 0 : _a.modelPath);
    const inputs = models2[0]["executor"] ? Object.values(models2[0].modelSignature["inputs"]) : void 0;
    inputSize7[0][0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
    inputSize7[0][1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", models2[0]["modelUrl"]);
  return models2[0];
}
async function loadSkeleton2(config3) {
  var _a;
  if (env.initial)
    models2[1] = null;
  if (!models2[1]) {
    models2[1] = await loadModel((_a = config3.hand.skeleton) == null ? void 0 : _a.modelPath);
    const inputs = models2[1]["executor"] ? Object.values(models2[1].modelSignature["inputs"]) : void 0;
    inputSize7[1][0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
    inputSize7[1][1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", models2[1]["modelUrl"]);
  return models2[1];
}
async function detectHands(input, config3) {
  const hands = [];
  if (!input || !models2[0])
    return hands;
  const t8 = {};
  const ratio2 = (input.shape[2] || 1) / (input.shape[1] || 1);
  const height = Math.min(Math.round((input.shape[1] || 0) / 8) * 8, maxDetectorResolution);
  const width = Math.round(height * ratio2 / 8) * 8;
  t8.resize = Kj.resizeBilinear(input, [height, width]);
  t8.cast = We(t8.resize, "int32");
  [t8.rawScores, t8.rawBoxes] = await models2[0].executeAsync(t8.cast, modelOutputNodes);
  t8.boxes = gc(t8.rawBoxes, [0, 2]);
  t8.scores = gc(t8.rawScores, [0]);
  const classScores = fo(t8.scores, 1);
  Mt(classScores[faceIndex]);
  classScores.splice(faceIndex, 1);
  t8.filtered = kr(classScores, 1);
  Mt(classScores);
  t8.max = Ra(t8.filtered, 1);
  t8.argmax = Ek(t8.filtered, 1);
  let id2 = 0;
  t8.nms = await Kj.nonMaxSuppressionAsync(t8.boxes, t8.max, (config3.hand.maxDetected || 0) + 1, config3.hand.iouThreshold || 0, config3.hand.minConfidence || 1);
  const nms = await t8.nms.data();
  const scores = await t8.max.data();
  const classNum = await t8.argmax.data();
  for (const nmsIndex of Array.from(nms)) {
    const boxSlice = Xe(t8.boxes, nmsIndex, 1);
    const boxYX = await boxSlice.data();
    Mt(boxSlice);
    const boxData = [boxYX[1], boxYX[0], boxYX[3] - boxYX[1], boxYX[2] - boxYX[0]];
    const boxRaw = scale(boxData, detectorExpandFact);
    const boxFull = [Math.trunc(boxData[0] * outputSize[0]), Math.trunc(boxData[1] * outputSize[1]), Math.trunc(boxData[2] * outputSize[0]), Math.trunc(boxData[3] * outputSize[1])];
    const score = scores[nmsIndex];
    const label = classes[classNum[nmsIndex]];
    const hand3 = { id: id2++, score, box: boxFull, boxRaw, label };
    hands.push(hand3);
  }
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  hands.sort((a, b) => b.score - a.score);
  if (hands.length > (config3.hand.maxDetected || 1))
    hands.length = config3.hand.maxDetected || 1;
  return hands;
}
async function detectFingers(input, h, config3) {
  const hand3 = {
    // initial values inherited from hand detect
    id: h.id,
    score: Math.round(100 * h.score) / 100,
    boxScore: Math.round(100 * h.score) / 100,
    fingerScore: 0,
    box: h.box,
    boxRaw: h.boxRaw,
    label: h.label,
    keypoints: [],
    landmarks: {},
    annotations: {}
  };
  if (input && models2[1] && config3.hand.landmarks && h.score > (config3.hand.minConfidence || 0)) {
    const t8 = {};
    const boxCrop = [h.boxRaw[1], h.boxRaw[0], h.boxRaw[3] + h.boxRaw[1], h.boxRaw[2] + h.boxRaw[0]];
    t8.crop = Kj.cropAndResize(input, [boxCrop], [0], [inputSize7[1][0], inputSize7[1][1]], "bilinear");
    t8.div = je(t8.crop, constants.tf255);
    [t8.score, t8.keypoints] = models2[1].execute(t8.div, ["Identity_1", "Identity"]);
    const rawScore = (await t8.score.data())[0];
    const score = (100 - Math.trunc(100 / (1 + Math.exp(rawScore)))) / 100;
    if (score >= (config3.hand.minConfidence || 0)) {
      hand3.fingerScore = score;
      t8.reshaped = W(t8.keypoints, [-1, 3]);
      const coordsData = await t8.reshaped.array();
      const coordsRaw = coordsData.map((kpt4) => [kpt4[0] / inputSize7[1][1], kpt4[1] / inputSize7[1][0], kpt4[2] || 0]);
      const coordsNorm = coordsRaw.map((kpt4) => [kpt4[0] * h.boxRaw[2], kpt4[1] * h.boxRaw[3], kpt4[2] || 0]);
      hand3.keypoints = coordsNorm.map((kpt4) => [outputSize[0] * (kpt4[0] + h.boxRaw[0]), outputSize[1] * (kpt4[1] + h.boxRaw[1]), kpt4[2] || 0]);
      hand3.landmarks = analyze(hand3.keypoints);
      for (const key of Object.keys(fingerMap)) {
        hand3.annotations[key] = fingerMap[key].map((index2) => hand3.landmarks && hand3.keypoints[index2] ? hand3.keypoints[index2] : null);
      }
    }
    Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  }
  return hand3;
}
async function predict15(input, config3) {
  var _a, _b;
  if (!((_a = models2[0]) == null ? void 0 : _a["executor"]) || !((_b = models2[1]) == null ? void 0 : _b["executor"]) || !models2[0].inputs[0].shape || !models2[1].inputs[0].shape)
    return [];
  outputSize = [input.shape[2] || 0, input.shape[1] || 0];
  skipped13++;
  const skipTime = (config3.hand.skipTime || 0) > now() - lastTime14;
  const skipFrame = skipped13 < (config3.hand.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame) {
    return cache4.hands;
  }
  return new Promise(async (resolve) => {
    const skipTimeExtended = 3 * (config3.hand.skipTime || 0) > now() - lastTime14;
    const skipFrameExtended = skipped13 < 3 * (config3.hand.skipFrames || 0);
    if (config3.skipAllowed && cache4.hands.length === config3.hand.maxDetected) {
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
    } else if (config3.skipAllowed && skipTimeExtended && skipFrameExtended && cache4.hands.length > 0) {
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
    } else {
      cache4.boxes = await detectHands(input, config3);
      lastTime14 = now();
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
      skipped13 = 0;
    }
    const oldCache = [...cache4.boxes];
    cache4.boxes.length = 0;
    if (config3.cacheSensitivity > 0) {
      for (let i = 0; i < cache4.hands.length; i++) {
        const boxKpt = square(cache4.hands[i].keypoints, outputSize);
        if (boxKpt.box[2] / (input.shape[2] || 1) > 0.05 && boxKpt.box[3] / (input.shape[1] || 1) > 0.05 && cache4.hands[i].fingerScore && cache4.hands[i].fingerScore > (config3.hand.minConfidence || 0)) {
          const boxScale = scale(boxKpt.box, boxExpandFact);
          const boxScaleRaw = scale(boxKpt.boxRaw, boxExpandFact);
          cache4.boxes.push({ ...oldCache[i], box: boxScale, boxRaw: boxScaleRaw });
        }
      }
    }
    for (let i = 0; i < cache4.hands.length; i++) {
      const bbox = calc(cache4.hands[i].keypoints, outputSize);
      cache4.hands[i].box = bbox.box;
      cache4.hands[i].boxRaw = bbox.boxRaw;
    }
    resolve(cache4.hands);
  });
}

// src/result.ts
var empty = (error = null) => ({ face: [], body: [], hand: [], gesture: [], object: [], persons: [], performance: {}, timestamp: 0, width: 0, height: 0, error });

// src/body/movenetcoords.ts
var movenetcoords_exports = {};
__export(movenetcoords_exports, {
  connected: () => connected3,
  horizontal: () => horizontal,
  kpt: () => kpt3,
  relative: () => relative,
  vertical: () => vertical
});
var kpt3 = [
  // used to create part labels
  "nose",
  "leftEye",
  "rightEye",
  "leftEar",
  "rightEar",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle"
];
var horizontal = [
  // used to fix left vs right
  ["leftEye", "rightEye"],
  ["leftEar", "rightEar"],
  ["leftShoulder", "rightShoulder"],
  ["leftElbow", "rightElbow"],
  ["leftWrist", "rightWrist"],
  ["leftHip", "rightHip"],
  ["leftKnee", "rightKnee"],
  ["leftAnkle", "rightAnkle"]
];
var vertical = [
  // used to remove unlikely keypoint positions
  ["leftKnee", "leftShoulder"],
  ["rightKnee", "rightShoulder"],
  ["leftAnkle", "leftKnee"],
  ["rightAnkle", "rightKnee"]
];
var relative = [
  // used to match relative body parts
  [["leftHip", "rightHip"], ["leftShoulder", "rightShoulder"]],
  [["leftElbow", "rightElbow"], ["leftShoulder", "rightShoulder"]]
];
var connected3 = {
  // used to create body outline in annotations
  leftLeg: ["leftHip", "leftKnee", "leftAnkle"],
  rightLeg: ["rightHip", "rightKnee", "rightAnkle"],
  torso: ["leftShoulder", "rightShoulder", "rightHip", "leftHip", "leftShoulder"],
  leftArm: ["leftShoulder", "leftElbow", "leftWrist"],
  rightArm: ["rightShoulder", "rightElbow", "rightWrist"],
  head: []
};

// src/util/interpolate.ts
var bufferedResult = empty();
var interpolateTime = 0;
function calc2(newResult, config3) {
  var _a, _b, _c2, _d2, _e, _f2, _g2, _h2, _i, _j2, _k2, _l2, _m, _n2, _o, _p2, _q, _r2, _s2, _t, _u2, _v2, _w2, _x2, _y, _z2;
  const t02 = now();
  if (!newResult)
    return empty();
  const elapsed = Date.now() - newResult.timestamp;
  const bufferedFactor = elapsed < 1e3 ? 8 - Math.log(elapsed + 1) : 1;
  if (newResult.canvas)
    bufferedResult.canvas = newResult.canvas;
  if (newResult.error)
    bufferedResult.error = newResult.error;
  if (!bufferedResult.body || newResult.body.length !== bufferedResult.body.length) {
    bufferedResult.body = JSON.parse(JSON.stringify(newResult.body));
  } else {
    for (let i = 0; i < newResult.body.length; i++) {
      const box = newResult.body[i].box.map((newBoxCoord, j) => ((bufferedFactor - 1) * bufferedResult.body[i].box[j] + newBoxCoord) / bufferedFactor);
      const boxRaw = newResult.body[i].boxRaw.map((newBoxCoord, j) => ((bufferedFactor - 1) * bufferedResult.body[i].boxRaw[j] + newBoxCoord) / bufferedFactor);
      const keypoints = newResult.body[i].keypoints.map((newKpt, j) => {
        var _a2, _b2, _c3, _d3, _e2, _f3, _g3, _h3, _i2;
        return {
          score: newKpt.score,
          part: newKpt.part,
          position: [
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[0] || 0) + (newKpt.position[0] || 0)) / bufferedFactor : newKpt.position[0],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[1] || 0) + (newKpt.position[1] || 0)) / bufferedFactor : newKpt.position[1],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[2] || 0) + (newKpt.position[2] || 0)) / bufferedFactor : newKpt.position[2]
          ],
          positionRaw: [
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[0] || 0) + (newKpt.positionRaw[0] || 0)) / bufferedFactor : newKpt.positionRaw[0],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[1] || 0) + (newKpt.positionRaw[1] || 0)) / bufferedFactor : newKpt.positionRaw[1],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[2] || 0) + (newKpt.positionRaw[2] || 0)) / bufferedFactor : newKpt.positionRaw[2]
          ],
          distance: [
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (((_a2 = bufferedResult.body[i].keypoints[j].distance) == null ? void 0 : _a2[0]) || 0) + (((_b2 = newKpt.distance) == null ? void 0 : _b2[0]) || 0)) / bufferedFactor : (_c3 = newKpt.distance) == null ? void 0 : _c3[0],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (((_d3 = bufferedResult.body[i].keypoints[j].distance) == null ? void 0 : _d3[1]) || 0) + (((_e2 = newKpt.distance) == null ? void 0 : _e2[1]) || 0)) / bufferedFactor : (_f3 = newKpt.distance) == null ? void 0 : _f3[1],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (((_g3 = bufferedResult.body[i].keypoints[j].distance) == null ? void 0 : _g3[2]) || 0) + (((_h3 = newKpt.distance) == null ? void 0 : _h3[2]) || 0)) / bufferedFactor : (_i2 = newKpt.distance) == null ? void 0 : _i2[2]
          ]
        };
      });
      const annotations2 = {};
      let coords = { connected: {} };
      if ((_a = config3.body.modelPath) == null ? void 0 : _a.includes("efficientpose"))
        coords = efficientposecoords_exports;
      else if ((_b = config3.body.modelPath) == null ? void 0 : _b.includes("blazepose"))
        coords = blazeposecoords_exports;
      else if ((_c2 = config3.body.modelPath) == null ? void 0 : _c2.includes("movenet"))
        coords = movenetcoords_exports;
      for (const [name, indexes] of Object.entries(coords.connected)) {
        const pt2 = [];
        for (let j = 0; j < indexes.length - 1; j++) {
          const pt0 = keypoints.find((kp2) => kp2.part === indexes[j]);
          const pt1 = keypoints.find((kp2) => kp2.part === indexes[j + 1]);
          if (pt0 && pt1)
            pt2.push([pt0.position, pt1.position]);
        }
        annotations2[name] = pt2;
      }
      bufferedResult.body[i] = { ...newResult.body[i], box, boxRaw, keypoints, annotations: annotations2 };
    }
  }
  if (!bufferedResult.hand || newResult.hand.length !== bufferedResult.hand.length) {
    bufferedResult.hand = JSON.parse(JSON.stringify(newResult.hand));
  } else {
    for (let i = 0; i < newResult.hand.length; i++) {
      const box = newResult.hand[i].box.map((b, j) => ((bufferedFactor - 1) * bufferedResult.hand[i].box[j] + b) / bufferedFactor);
      const boxRaw = newResult.hand[i].boxRaw.map((b, j) => ((bufferedFactor - 1) * bufferedResult.hand[i].boxRaw[j] + b) / bufferedFactor);
      if (bufferedResult.hand[i].keypoints.length !== newResult.hand[i].keypoints.length)
        bufferedResult.hand[i].keypoints = newResult.hand[i].keypoints;
      const keypoints = newResult.hand[i].keypoints && newResult.hand[i].keypoints.length > 0 ? newResult.hand[i].keypoints.map((landmark, j) => landmark.map((coord, k) => ((bufferedFactor - 1) * (bufferedResult.hand[i].keypoints[j][k] || 1) + (coord || 0)) / bufferedFactor)) : [];
      let annotations2 = {};
      if (Object.keys(bufferedResult.hand[i].annotations).length !== Object.keys(newResult.hand[i].annotations).length) {
        bufferedResult.hand[i].annotations = newResult.hand[i].annotations;
        annotations2 = bufferedResult.hand[i].annotations;
      } else if (newResult.hand[i].annotations) {
        for (const key of Object.keys(newResult.hand[i].annotations)) {
          annotations2[key] = ((_f2 = (_e = (_d2 = newResult.hand[i]) == null ? void 0 : _d2.annotations) == null ? void 0 : _e[key]) == null ? void 0 : _f2[0]) ? newResult.hand[i].annotations[key].map((val, j) => val.map((coord, k) => ((bufferedFactor - 1) * bufferedResult.hand[i].annotations[key][j][k] + coord) / bufferedFactor)) : null;
        }
      }
      bufferedResult.hand[i] = { ...newResult.hand[i], box, boxRaw, keypoints, annotations: annotations2 };
    }
  }
  if (!bufferedResult.face || newResult.face.length !== bufferedResult.face.length) {
    bufferedResult.face = JSON.parse(JSON.stringify(newResult.face));
  } else {
    for (let i = 0; i < newResult.face.length; i++) {
      const box = newResult.face[i].box.map((b, j) => ((bufferedFactor - 1) * bufferedResult.face[i].box[j] + b) / bufferedFactor);
      const boxRaw = newResult.face[i].boxRaw.map((b, j) => ((bufferedFactor - 1) * bufferedResult.face[i].boxRaw[j] + b) / bufferedFactor);
      let annotations2 = newResult.face[i].annotations;
      if (Object.keys(bufferedResult.face[i].annotations).length !== Object.keys(newResult.face[i].annotations).length) {
        bufferedResult.face[i].annotations = newResult.face[i].annotations;
        annotations2 = bufferedResult.face[i].annotations;
      } else if (newResult.face[i].annotations) {
        for (const key of Object.keys(newResult.face[i].annotations)) {
          annotations2[key] = ((_i = (_h2 = (_g2 = newResult.face[i]) == null ? void 0 : _g2.annotations) == null ? void 0 : _h2[key]) == null ? void 0 : _i[0]) ? newResult.face[i].annotations[key].map((val, j) => val.map((coord, k) => ((bufferedFactor - 1) * bufferedResult.face[i].annotations[key][j][k] + coord) / bufferedFactor)) : null;
        }
      }
      if (newResult.face[i].rotation) {
        const rotation = { matrix: [0, 0, 0, 0, 0, 0, 0, 0, 0], angle: { roll: 0, yaw: 0, pitch: 0 }, gaze: { bearing: 0, strength: 0 } };
        rotation.matrix = (_j2 = newResult.face[i].rotation) == null ? void 0 : _j2.matrix;
        rotation.angle = {
          roll: ((bufferedFactor - 1) * (((_l2 = (_k2 = bufferedResult.face[i].rotation) == null ? void 0 : _k2.angle) == null ? void 0 : _l2.roll) || 0) + (((_n2 = (_m = newResult.face[i].rotation) == null ? void 0 : _m.angle) == null ? void 0 : _n2.roll) || 0)) / bufferedFactor,
          yaw: ((bufferedFactor - 1) * (((_p2 = (_o = bufferedResult.face[i].rotation) == null ? void 0 : _o.angle) == null ? void 0 : _p2.yaw) || 0) + (((_r2 = (_q = newResult.face[i].rotation) == null ? void 0 : _q.angle) == null ? void 0 : _r2.yaw) || 0)) / bufferedFactor,
          pitch: ((bufferedFactor - 1) * (((_t = (_s2 = bufferedResult.face[i].rotation) == null ? void 0 : _s2.angle) == null ? void 0 : _t.pitch) || 0) + (((_v2 = (_u2 = newResult.face[i].rotation) == null ? void 0 : _u2.angle) == null ? void 0 : _v2.pitch) || 0)) / bufferedFactor
        };
        rotation.gaze = {
          // not fully correct due projection on circle, also causes wrap-around draw on jump from negative to positive
          bearing: ((bufferedFactor - 1) * (((_w2 = bufferedResult.face[i].rotation) == null ? void 0 : _w2.gaze.bearing) || 0) + (((_x2 = newResult.face[i].rotation) == null ? void 0 : _x2.gaze.bearing) || 0)) / bufferedFactor,
          strength: ((bufferedFactor - 1) * (((_y = bufferedResult.face[i].rotation) == null ? void 0 : _y.gaze.strength) || 0) + (((_z2 = newResult.face[i].rotation) == null ? void 0 : _z2.gaze.strength) || 0)) / bufferedFactor
        };
        bufferedResult.face[i] = { ...newResult.face[i], rotation, box, boxRaw, annotations: annotations2 };
      } else {
        bufferedResult.face[i] = { ...newResult.face[i], box, boxRaw, annotations: annotations2 };
      }
    }
  }
  if (!bufferedResult.object || newResult.object.length !== bufferedResult.object.length) {
    bufferedResult.object = JSON.parse(JSON.stringify(newResult.object));
  } else {
    for (let i = 0; i < newResult.object.length; i++) {
      const box = newResult.object[i].box.map((b, j) => ((bufferedFactor - 1) * bufferedResult.object[i].box[j] + b) / bufferedFactor);
      const boxRaw = newResult.object[i].boxRaw.map((b, j) => ((bufferedFactor - 1) * bufferedResult.object[i].boxRaw[j] + b) / bufferedFactor);
      bufferedResult.object[i] = { ...newResult.object[i], box, boxRaw };
    }
  }
  if (newResult.persons) {
    const newPersons = newResult.persons;
    if (!bufferedResult.persons || newPersons.length !== bufferedResult.persons.length) {
      bufferedResult.persons = JSON.parse(JSON.stringify(newPersons));
    } else {
      for (let i = 0; i < newPersons.length; i++) {
        bufferedResult.persons[i].box = newPersons[i].box.map((box, j) => ((bufferedFactor - 1) * bufferedResult.persons[i].box[j] + box) / bufferedFactor);
      }
    }
  }
  if (newResult.gesture)
    bufferedResult.gesture = newResult.gesture;
  bufferedResult.width = newResult.width;
  bufferedResult.height = newResult.height;
  const t12 = now();
  interpolateTime = env.perfadd ? interpolateTime + Math.round(t12 - t02) : Math.round(t12 - t02);
  if (newResult.performance)
    bufferedResult.performance = { ...newResult.performance, interpolate: interpolateTime };
  return bufferedResult;
}

// src/segmentation/meet.ts
var model17;
async function load15(config3) {
  if (!model17 || env.initial)
    model17 = await loadModel(config3.segmentation.modelPath);
  else if (config3.debug)
    log("cached model:", model17["modelUrl"]);
  return model17;
}
async function predict16(input, config3) {
  var _a;
  if (!model17)
    model17 = await load15(config3);
  if (!(model17 == null ? void 0 : model17["executor"]) || !((_a = model17 == null ? void 0 : model17.inputs) == null ? void 0 : _a[0].shape))
    return null;
  const t8 = {};
  t8.resize = Kj.resizeBilinear(input, [model17.inputs[0].shape ? model17.inputs[0].shape[1] : 0, model17.inputs[0].shape ? model17.inputs[0].shape[2] : 0], false);
  t8.norm = je(t8.resize, constants.tf255);
  t8.res = model17.execute(t8.norm);
  t8.squeeze = gc(t8.res, [0]);
  [t8.bgRaw, t8.fgRaw] = fo(t8.squeeze, 2);
  t8.fg = P1(t8.fgRaw);
  t8.mul = se(t8.fg, constants.tf255);
  t8.expand = Ms(t8.mul, 2);
  t8.output = Kj.resizeBilinear(t8.expand, [input.shape[1] || 0, input.shape[2] || 0]);
  let rgba;
  switch (config3.segmentation.mode || "default") {
    case "default":
      t8.input = gc(input);
      t8.concat = bt([t8.input, t8.output], -1);
      rgba = We(t8.concat, "int32");
      break;
    case "alpha":
      rgba = We(t8.output, "int32");
      break;
    default:
      rgba = ur(0);
  }
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return rgba;
}

// src/face/match.ts
var match_exports = {};
__export(match_exports, {
  distance: () => distance,
  find: () => find,
  similarity: () => similarity
});
function distance(descriptor1, descriptor2, options4 = { order: 2, multiplier: 25 }) {
  if (!descriptor1 || !descriptor1)
    return Number.MAX_SAFE_INTEGER;
  let sum = 0;
  for (let i = 0; i < descriptor1.length; i++) {
    const diff = !options4.order || options4.order === 2 ? descriptor1[i] - descriptor2[i] : Math.abs(descriptor1[i] - descriptor2[i]);
    sum += !options4.order || options4.order === 2 ? diff * diff : diff ** options4.order;
  }
  return (options4.multiplier || 20) * sum;
}
var normalizeDistance = (dist, order, min, max) => {
  if (dist === 0)
    return 1;
  const root = order === 2 ? Math.sqrt(dist) : dist ** (1 / order);
  const norm = (1 - root / 100 - min) / (max - min);
  const clamp2 = Math.max(Math.min(norm, 1), 0);
  return clamp2;
};
function similarity(descriptor1, descriptor2, options4 = { order: 2, multiplier: 25, min: 0.2, max: 0.8 }) {
  const dist = distance(descriptor1, descriptor2, options4);
  return normalizeDistance(dist, options4.order || 2, options4.min || 0, options4.max || 1);
}
function find(descriptor, descriptors, options4 = { order: 2, multiplier: 25, threshold: 0, min: 0.2, max: 0.8 }) {
  if (!Array.isArray(descriptor) || !Array.isArray(descriptors) || descriptor.length < 64 || descriptors.length === 0) {
    return { index: -1, distance: Number.POSITIVE_INFINITY, similarity: 0 };
  }
  let lowestDistance = Number.MAX_SAFE_INTEGER;
  let index2 = -1;
  for (let i = 0; i < descriptors.length; i++) {
    const res = descriptors[i].length === descriptor.length ? distance(descriptor, descriptors[i], options4) : Number.MAX_SAFE_INTEGER;
    if (res < lowestDistance) {
      lowestDistance = res;
      index2 = i;
    }
    if (lowestDistance < (options4.threshold || 0))
      break;
  }
  const normalizedSimilarity = normalizeDistance(lowestDistance, options4.order || 2, options4.min || 0, options4.max || 1);
  return { index: index2, distance: lowestDistance, similarity: normalizedSimilarity };
}

// src/models.ts
var models_exports2 = {};
__export(models_exports2, {
  Models: () => Models,
  validateModel: () => validateModel
});

// src/body/movenetfix.ts
var maxJitter = 5e-3;
var cache5 = {
  keypoints: [],
  padding: [[0, 0], [0, 0], [0, 0], [0, 0]]
};
function bodyParts(body4) {
  for (const pair of horizontal) {
    const left = body4.keypoints.findIndex((kp2) => kp2.part === pair[0]);
    const right = body4.keypoints.findIndex((kp2) => kp2.part === pair[1]);
    if (body4.keypoints[left] && body4.keypoints[right]) {
      if (body4.keypoints[left].position[0] < body4.keypoints[right].position[0]) {
        const tmp = body4.keypoints[left];
        body4.keypoints[left] = body4.keypoints[right];
        body4.keypoints[right] = tmp;
      }
    }
  }
  for (const pair of vertical) {
    const lower = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[0]);
    const higher = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[1]);
    if (body4.keypoints[lower] && body4.keypoints[higher]) {
      if (body4.keypoints[lower].position[1] < body4.keypoints[higher].position[1]) {
        body4.keypoints.splice(lower, 1);
      }
    }
  }
  for (const [pair, compare2] of relative) {
    const left = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[0]);
    const right = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[1]);
    const leftTo = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === compare2[0]);
    const rightTo = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === compare2[1]);
    if (!body4.keypoints[leftTo] || !body4.keypoints[rightTo])
      continue;
    const distanceLeft = body4.keypoints[left] ? [
      Math.abs(body4.keypoints[leftTo].position[0] - body4.keypoints[left].position[0]),
      Math.abs(body4.keypoints[rightTo].position[0] - body4.keypoints[left].position[0])
    ] : [0, 0];
    const distanceRight = body4.keypoints[right] ? [
      Math.abs(body4.keypoints[rightTo].position[0] - body4.keypoints[right].position[0]),
      Math.abs(body4.keypoints[leftTo].position[0] - body4.keypoints[right].position[0])
    ] : [0, 0];
    if (distanceLeft[0] > distanceLeft[1] || distanceRight[0] > distanceRight[1]) {
      const tmp = body4.keypoints[left];
      body4.keypoints[left] = body4.keypoints[right];
      body4.keypoints[right] = tmp;
    }
  }
}
function jitter(keypoints) {
  for (let i = 0; i < keypoints.length; i++) {
    if (keypoints[i] && cache5.keypoints[i]) {
      const diff = [Math.abs(keypoints[i].positionRaw[0] - cache5.keypoints[i].positionRaw[0]), Math.abs(keypoints[i].positionRaw[1] - cache5.keypoints[i].positionRaw[1])];
      if (diff[0] < maxJitter && diff[1] < maxJitter) {
        keypoints[i] = cache5.keypoints[i];
      } else {
        cache5.keypoints[i] = keypoints[i];
      }
    } else {
      cache5.keypoints[i] = keypoints[i];
    }
  }
  return keypoints;
}
function padInput(input, inputSize10) {
  var _a, _b;
  const t8 = {};
  if (!((_a = input == null ? void 0 : input.shape) == null ? void 0 : _a[1]) || !((_b = input == null ? void 0 : input.shape) == null ? void 0 : _b[2]))
    return input;
  cache5.padding = [
    [0, 0],
    // dont touch batch
    [input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0, input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0],
    // height before&after
    [input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0, input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0],
    // width before&after
    [0, 0]
    // dont touch rbg
  ];
  t8.pad = Aa(input, cache5.padding);
  t8.resize = Kj.resizeBilinear(t8.pad, [inputSize10, inputSize10]);
  const final = We(t8.resize, "int32");
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return final;
}
function rescaleBody(body4, outputSize2) {
  body4.keypoints = body4.keypoints.filter((kpt4) => kpt4 == null ? void 0 : kpt4.position);
  for (const kpt4 of body4.keypoints) {
    kpt4.position = [
      kpt4.position[0] * (outputSize2[0] + cache5.padding[2][0] + cache5.padding[2][1]) / outputSize2[0] - cache5.padding[2][0],
      kpt4.position[1] * (outputSize2[1] + cache5.padding[1][0] + cache5.padding[1][1]) / outputSize2[1] - cache5.padding[1][0]
    ];
    kpt4.positionRaw = [
      kpt4.position[0] / outputSize2[0],
      kpt4.position[1] / outputSize2[1]
    ];
  }
  const rescaledBoxes = calc(body4.keypoints.map((pt2) => pt2.position), outputSize2);
  body4.box = rescaledBoxes.box;
  body4.boxRaw = rescaledBoxes.boxRaw;
  return body4;
}

// src/body/movenet.ts
var model18;
var inputSize8 = 0;
var skipped14 = Number.MAX_SAFE_INTEGER;
var cache6 = {
  boxes: [],
  bodies: [],
  last: 0
};
async function load16(config3) {
  var _a;
  if (env.initial)
    model18 = null;
  if (!model18) {
    fakeOps(["size"], config3);
    model18 = await loadModel(config3.body.modelPath);
  } else if (config3.debug)
    log("cached model:", model18["modelUrl"]);
  inputSize8 = (model18 == null ? void 0 : model18["executor"]) && ((_a = model18 == null ? void 0 : model18.inputs) == null ? void 0 : _a[0].shape) ? model18.inputs[0].shape[2] : 0;
  if (inputSize8 < 64)
    inputSize8 = 256;
  if (A().flagRegistry.WEBGL_USE_SHAPES_UNIFORMS)
    A().set("WEBGL_USE_SHAPES_UNIFORMS", false);
  return model18;
}
function parseSinglePose(res, config3, image) {
  const kpt4 = res[0][0];
  const keypoints = [];
  let score = 0;
  for (let id2 = 0; id2 < kpt4.length; id2++) {
    score = kpt4[id2][2];
    if (score > config3.body.minConfidence) {
      const positionRaw = [kpt4[id2][1], kpt4[id2][0]];
      keypoints.push({
        score: Math.round(100 * score) / 100,
        part: kpt3[id2],
        positionRaw,
        position: [
          // normalized to input image size
          Math.round((image.shape[2] || 0) * positionRaw[0]),
          Math.round((image.shape[1] || 0) * positionRaw[1])
        ]
      });
    }
  }
  score = keypoints.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
  const bodies = [];
  const newBox = calc(keypoints.map((pt2) => pt2.position), [image.shape[2], image.shape[1]]);
  const annotations2 = {};
  for (const [name, indexes] of Object.entries(connected3)) {
    const pt2 = [];
    for (let i = 0; i < indexes.length - 1; i++) {
      const pt0 = keypoints.find((kp2) => kp2.part === indexes[i]);
      const pt1 = keypoints.find((kp2) => kp2.part === indexes[i + 1]);
      if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
        pt2.push([pt0.position, pt1.position]);
    }
    annotations2[name] = pt2;
  }
  const body4 = { id: 0, score, box: newBox.box, boxRaw: newBox.boxRaw, keypoints, annotations: annotations2 };
  bodyParts(body4);
  bodies.push(body4);
  return bodies;
}
function parseMultiPose(res, config3, image) {
  const bodies = [];
  for (let id2 = 0; id2 < res[0].length; id2++) {
    const kpt4 = res[0][id2];
    const boxScore = Math.round(100 * kpt4[51 + 4]) / 100;
    if (boxScore > config3.body.minConfidence) {
      const keypoints = [];
      for (let i = 0; i < 17; i++) {
        const score = kpt4[3 * i + 2];
        if (score > config3.body.minConfidence) {
          const positionRaw = [kpt4[3 * i + 1], kpt4[3 * i + 0]];
          keypoints.push({
            part: kpt3[i],
            score: Math.round(100 * score) / 100,
            positionRaw,
            position: [Math.round((image.shape[2] || 0) * positionRaw[0]), Math.round((image.shape[1] || 0) * positionRaw[1])]
          });
        }
      }
      const boxRaw = [kpt4[51 + 1], kpt4[51 + 0], kpt4[51 + 3] - kpt4[51 + 1], kpt4[51 + 2] - kpt4[51 + 0]];
      const boxNorm = [Math.trunc(boxRaw[0] * (image.shape[2] || 0)), Math.trunc(boxRaw[1] * (image.shape[1] || 0)), Math.trunc(boxRaw[2] * (image.shape[2] || 0)), Math.trunc(boxRaw[3] * (image.shape[1] || 0))];
      const annotations2 = {};
      for (const [name, indexes] of Object.entries(connected3)) {
        const pt2 = [];
        for (let i = 0; i < indexes.length - 1; i++) {
          const pt0 = keypoints.find((kp2) => kp2.part === indexes[i]);
          const pt1 = keypoints.find((kp2) => kp2.part === indexes[i + 1]);
          if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
            pt2.push([pt0.position, pt1.position]);
        }
        annotations2[name] = pt2;
      }
      const body4 = { id: id2, score: boxScore, box: boxNorm, boxRaw, keypoints: [...keypoints], annotations: annotations2 };
      bodyParts(body4);
      bodies.push(body4);
    }
  }
  bodies.sort((a, b) => b.score - a.score);
  if (bodies.length > config3.body.maxDetected)
    bodies.length = config3.body.maxDetected;
  return bodies;
}
async function predict17(input, config3) {
  var _a;
  if (!(model18 == null ? void 0 : model18["executor"]) || !((_a = model18 == null ? void 0 : model18.inputs) == null ? void 0 : _a[0].shape))
    return [];
  if (!config3.skipAllowed)
    cache6.boxes.length = 0;
  skipped14++;
  const skipTime = (config3.body.skipTime || 0) > now() - cache6.last;
  const skipFrame = skipped14 < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame) {
    return cache6.bodies;
  }
  return new Promise(async (resolve) => {
    const t8 = {};
    skipped14 = 0;
    t8.input = padInput(input, inputSize8);
    t8.res = model18 == null ? void 0 : model18.execute(t8.input);
    cache6.last = now();
    const res = await t8.res.array();
    cache6.bodies = t8.res.shape[2] === 17 ? parseSinglePose(res, config3, input) : parseMultiPose(res, config3, input);
    for (const body4 of cache6.bodies) {
      rescaleBody(body4, [input.shape[2] || 1, input.shape[1] || 1]);
      jitter(body4.keypoints);
    }
    Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
    resolve(cache6.bodies);
  });
}

// src/object/nanodet.ts
var model19;
var last10 = [];
var lastTime15 = 0;
var skipped15 = Number.MAX_SAFE_INTEGER;
var inputSize9 = 0;
var scaleBox = 2.5;
async function load17(config3) {
  if (!model19 || env.initial) {
    model19 = await loadModel(config3.object.modelPath);
    const inputs = (model19 == null ? void 0 : model19["executor"]) ? Object.values(model19.modelSignature["inputs"]) : void 0;
    inputSize9 = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 416;
  } else if (config3.debug)
    log("cached model:", model19["modelUrl"]);
  return model19;
}
async function process4(res, outputShape, config3) {
  var _a, _b;
  let id2 = 0;
  let results = [];
  const size2 = inputSize9;
  for (const strideSize of [1, 2, 4]) {
    const baseSize = strideSize * 13;
    const scoresT = gc(res.find((a) => a.shape[1] === baseSize ** 2 && (a.shape[2] || 0) === labels2.length));
    const scores = await scoresT.array();
    const featuresT = gc(res.find((a) => a.shape[1] === baseSize ** 2 && (a.shape[2] || 0) < labels2.length));
    const boxesMaxT = W(featuresT, [-1, 4, (((_a = featuresT.shape) == null ? void 0 : _a[1]) || 0) / 4]);
    const boxIdxT = Ek(boxesMaxT, 2);
    const boxIdx = await boxIdxT.array();
    for (let i = 0; i < scoresT.shape[0]; i++) {
      for (let j = 0; j < (((_b = scoresT.shape) == null ? void 0 : _b[1]) || 0); j++) {
        const score = scores[i][j];
        if (score > (config3.object.minConfidence || 0) && j !== 61) {
          const cx2 = (0.5 + Math.trunc(i % baseSize)) / baseSize;
          const cy2 = (0.5 + Math.trunc(i / baseSize)) / baseSize;
          const boxOffset = boxIdx[i].map((a) => a * (baseSize / strideSize / size2));
          const [x, y8] = [
            cx2 - scaleBox / strideSize * boxOffset[0],
            cy2 - scaleBox / strideSize * boxOffset[1]
          ];
          const [w10, h] = [
            cx2 + scaleBox / strideSize * boxOffset[2] - x,
            cy2 + scaleBox / strideSize * boxOffset[3] - y8
          ];
          let boxRaw = [x, y8, w10, h];
          boxRaw = boxRaw.map((a) => Math.max(0, Math.min(a, 1)));
          const box = [
            // results normalized to input image pixels
            boxRaw[0] * outputShape[0],
            boxRaw[1] * outputShape[1],
            boxRaw[2] * outputShape[0],
            boxRaw[3] * outputShape[1]
          ];
          const result = {
            id: id2++,
            // strideSize,
            score: Math.round(100 * score) / 100,
            class: j + 1,
            label: labels2[j].label,
            // center: [Math.trunc(outputShape[0] * cx), Math.trunc(outputShape[1] * cy)],
            // centerRaw: [cx, cy],
            box: box.map((a) => Math.trunc(a)),
            boxRaw
          };
          results.push(result);
        }
      }
    }
    Mt([scoresT, featuresT, boxesMaxT, boxIdxT]);
  }
  const nmsBoxes = results.map((a) => [a.boxRaw[1], a.boxRaw[0], a.boxRaw[3], a.boxRaw[2]]);
  const nmsScores = results.map((a) => a.score);
  let nmsIdx = [];
  if (nmsBoxes && nmsBoxes.length > 0) {
    const nms = await Kj.nonMaxSuppressionAsync(nmsBoxes, nmsScores, config3.object.maxDetected || 0, config3.object.iouThreshold, config3.object.minConfidence);
    nmsIdx = Array.from(await nms.data());
    Mt(nms);
  }
  results = results.filter((_val, idx) => nmsIdx.includes(idx)).sort((a, b) => b.score - a.score);
  return results;
}
async function predict18(image, config3) {
  if (!(model19 == null ? void 0 : model19["executor"]))
    return [];
  const skipTime = (config3.object.skipTime || 0) > now() - lastTime15;
  const skipFrame = skipped15 < (config3.object.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && last10.length > 0) {
    skipped15++;
    return last10;
  }
  skipped15 = 0;
  if (!env.kernels.includes("mod") || !env.kernels.includes("sparsetodense"))
    return last10;
  return new Promise(async (resolve) => {
    const outputSize2 = [image.shape[2] || 0, image.shape[1] || 0];
    const resizeT = Kj.resizeBilinear(image, [inputSize9, inputSize9], false);
    const normT = je(resizeT, constants.tf255);
    const transposeT = yc(normT, [0, 3, 1, 2]);
    let objectT;
    if (config3.object.enabled)
      objectT = model19.execute(transposeT);
    lastTime15 = now();
    const obj = await process4(objectT, outputSize2, config3);
    last10 = obj;
    Mt([resizeT, normT, transposeT, ...objectT]);
    resolve(obj);
  });
}

// src/body/posenetutils.ts
var partNames = [
  "nose",
  "leftEye",
  "rightEye",
  "leftEar",
  "rightEar",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle"
];
var count = partNames.length;
var partIds = partNames.reduce((result, jointName, i) => {
  result[jointName] = i;
  return result;
}, {});
var connectedPartNames = [
  ["leftHip", "leftShoulder"],
  ["leftElbow", "leftShoulder"],
  ["leftElbow", "leftWrist"],
  ["leftHip", "leftKnee"],
  ["leftKnee", "leftAnkle"],
  ["rightHip", "rightShoulder"],
  ["rightElbow", "rightShoulder"],
  ["rightElbow", "rightWrist"],
  ["rightHip", "rightKnee"],
  ["rightKnee", "rightAnkle"],
  ["leftShoulder", "rightShoulder"],
  ["leftHip", "rightHip"]
];
var connectedPartIndices = connectedPartNames.map(([jointNameA, jointNameB]) => [partIds[jointNameA], partIds[jointNameB]]);
var poseChain = [
  ["nose", "leftEye"],
  ["leftEye", "leftEar"],
  ["nose", "rightEye"],
  ["rightEye", "rightEar"],
  ["nose", "leftShoulder"],
  ["leftShoulder", "leftElbow"],
  ["leftElbow", "leftWrist"],
  ["leftShoulder", "leftHip"],
  ["leftHip", "leftKnee"],
  ["leftKnee", "leftAnkle"],
  ["nose", "rightShoulder"],
  ["rightShoulder", "rightElbow"],
  ["rightElbow", "rightWrist"],
  ["rightShoulder", "rightHip"],
  ["rightHip", "rightKnee"],
  ["rightKnee", "rightAnkle"]
];
function getBoundingBox(keypoints) {
  const coord = keypoints.reduce(({ maxX, maxY, minX, minY }, { position: { x, y: y8 } }) => ({
    maxX: Math.max(maxX, x),
    maxY: Math.max(maxY, y8),
    minX: Math.min(minX, x),
    minY: Math.min(minY, y8)
  }), {
    maxX: Number.NEGATIVE_INFINITY,
    maxY: Number.NEGATIVE_INFINITY,
    minX: Number.POSITIVE_INFINITY,
    minY: Number.POSITIVE_INFINITY
  });
  return [coord.minX, coord.minY, coord.maxX - coord.minX, coord.maxY - coord.minY];
}
function scalePoses(poses, [height, width], [inputResolutionHeight, inputResolutionWidth]) {
  const scaleY = height / inputResolutionHeight;
  const scaleX = width / inputResolutionWidth;
  const scalePose = (pose, i) => ({
    id: i,
    score: pose.score,
    boxRaw: [pose.box[0] / inputResolutionWidth, pose.box[1] / inputResolutionHeight, pose.box[2] / inputResolutionWidth, pose.box[3] / inputResolutionHeight],
    box: [Math.trunc(pose.box[0] * scaleX), Math.trunc(pose.box[1] * scaleY), Math.trunc(pose.box[2] * scaleX), Math.trunc(pose.box[3] * scaleY)],
    keypoints: pose.keypoints.map(({ score, part, position }) => ({
      score,
      part,
      position: [Math.trunc(position.x * scaleX), Math.trunc(position.y * scaleY)],
      positionRaw: [position.x / inputResolutionHeight, position.y / inputResolutionHeight]
    })),
    annotations: {}
  });
  const scaledPoses = poses.map((pose, i) => scalePose(pose, i));
  return scaledPoses;
}
var MaxHeap = class {
  // function call
  constructor(maxSize2, getElementValue) {
    __publicField(this, "priorityQueue");
    // don't touch
    __publicField(this, "numberOfElements");
    __publicField(this, "getElementValue");
    this.priorityQueue = new Array(maxSize2);
    this.numberOfElements = -1;
    this.getElementValue = getElementValue;
  }
  enqueue(x) {
    this.priorityQueue[++this.numberOfElements] = x;
    this.swim(this.numberOfElements);
  }
  dequeue() {
    const max = this.priorityQueue[0];
    this.exchange(0, this.numberOfElements--);
    this.sink(0);
    this.priorityQueue[this.numberOfElements + 1] = null;
    return max;
  }
  empty() {
    return this.numberOfElements === -1;
  }
  size() {
    return this.numberOfElements + 1;
  }
  all() {
    return this.priorityQueue.slice(0, this.numberOfElements + 1);
  }
  max() {
    return this.priorityQueue[0];
  }
  swim(k) {
    while (k > 0 && this.less(Math.floor(k / 2), k)) {
      this.exchange(k, Math.floor(k / 2));
      k = Math.floor(k / 2);
    }
  }
  sink(k) {
    while (2 * k <= this.numberOfElements) {
      let j = 2 * k;
      if (j < this.numberOfElements && this.less(j, j + 1))
        j++;
      if (!this.less(k, j))
        break;
      this.exchange(k, j);
      k = j;
    }
  }
  getValueAt(i) {
    return this.getElementValue(this.priorityQueue[i]);
  }
  less(i, j) {
    return this.getValueAt(i) < this.getValueAt(j);
  }
  exchange(i, j) {
    const t8 = this.priorityQueue[i];
    this.priorityQueue[i] = this.priorityQueue[j];
    this.priorityQueue[j] = t8;
  }
};
function getOffsetPoint(y8, x, keypoint, offsets) {
  return {
    y: offsets.get(y8, x, keypoint),
    x: offsets.get(y8, x, keypoint + count)
  };
}
function getImageCoords(part, outputStride2, offsets) {
  const { heatmapY, heatmapX, id: keypoint } = part;
  const { y: y8, x } = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);
  return {
    x: part.heatmapX * outputStride2 + x,
    y: part.heatmapY * outputStride2 + y8
  };
}
function clamp(a, min, max) {
  if (a < min)
    return min;
  if (a > max)
    return max;
  return a;
}
function squaredDistance(y12, x12, y22, x22) {
  const dy2 = y22 - y12;
  const dx2 = x22 - x12;
  return dy2 * dy2 + dx2 * dx2;
}
function addVectors(a, b) {
  return { x: a.x + b.x, y: a.y + b.y };
}

// src/body/posenet.ts
var model20;
var poseNetOutputs = [
  "MobilenetV1/offset_2/BiasAdd",
  "MobilenetV1/heatmap_2/BiasAdd",
  "MobilenetV1/displacement_fwd_2/BiasAdd",
  "MobilenetV1/displacement_bwd_2/BiasAdd"
  /* displacementBwd */
];
var localMaximumRadius = 1;
var outputStride = 16;
var squaredNmsRadius = 50 ** 2;
function traverse(edgeId, sourceKeypoint, targetId, scores, offsets, displacements, offsetRefineStep = 2) {
  const getDisplacement = (point2) => ({
    y: displacements.get(point2.y, point2.x, edgeId),
    x: displacements.get(point2.y, point2.x, displacements.shape[2] / 2 + edgeId)
  });
  const getStridedIndexNearPoint = (point2, height2, width2) => ({
    y: clamp(Math.round(point2.y / outputStride), 0, height2 - 1),
    x: clamp(Math.round(point2.x / outputStride), 0, width2 - 1)
  });
  const [height, width] = scores.shape;
  const sourceKeypointIndices = getStridedIndexNearPoint(sourceKeypoint.position, height, width);
  const displacement = getDisplacement(sourceKeypointIndices);
  const displacedPoint = addVectors(sourceKeypoint.position, displacement);
  let targetKeypoint = displacedPoint;
  for (let i = 0; i < offsetRefineStep; i++) {
    const targetKeypointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);
    const offsetPoint = getOffsetPoint(targetKeypointIndices.y, targetKeypointIndices.x, targetId, offsets);
    targetKeypoint = addVectors(
      { x: targetKeypointIndices.x * outputStride, y: targetKeypointIndices.y * outputStride },
      { x: offsetPoint.x, y: offsetPoint.y }
    );
  }
  const targetKeyPointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);
  const score = scores.get(targetKeyPointIndices.y, targetKeyPointIndices.x, targetId);
  return { position: targetKeypoint, part: partNames[targetId], score };
}
function decodePose(root, scores, offsets, displacementsFwd, displacementsBwd) {
  const tuples = poseChain.map(([parentJoinName, childJoinName]) => [partIds[parentJoinName], partIds[childJoinName]]);
  const edgesFwd = tuples.map(([, childJointId]) => childJointId);
  const edgesBwd = tuples.map(([parentJointId]) => parentJointId);
  const numParts = scores.shape[2];
  const numEdges = edgesFwd.length;
  const keypoints = new Array(numParts);
  const rootPoint = getImageCoords(root.part, outputStride, offsets);
  keypoints[root.part.id] = {
    score: root.score,
    part: partNames[root.part.id],
    position: rootPoint
  };
  for (let edge = numEdges - 1; edge >= 0; --edge) {
    const sourceId = edgesFwd[edge];
    const targetId = edgesBwd[edge];
    if (keypoints[sourceId] && !keypoints[targetId]) {
      keypoints[targetId] = traverse(edge, keypoints[sourceId], targetId, scores, offsets, displacementsBwd);
    }
  }
  for (let edge = 0; edge < numEdges; ++edge) {
    const sourceId = edgesBwd[edge];
    const targetId = edgesFwd[edge];
    if (keypoints[sourceId] && !keypoints[targetId]) {
      keypoints[targetId] = traverse(edge, keypoints[sourceId], targetId, scores, offsets, displacementsFwd);
    }
  }
  return keypoints;
}
function scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, scores) {
  const [height, width] = scores.shape;
  let localMaximum = true;
  const yStart = Math.max(heatmapY - localMaximumRadius, 0);
  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);
  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {
    const xStart = Math.max(heatmapX - localMaximumRadius, 0);
    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);
    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {
      if (scores.get(yCurrent, xCurrent, keypointId) > score) {
        localMaximum = false;
        break;
      }
    }
    if (!localMaximum)
      break;
  }
  return localMaximum;
}
function buildPartWithScoreQueue(minConfidence2, scores) {
  const [height, width, numKeypoints] = scores.shape;
  const queue = new MaxHeap(height * width * numKeypoints, ({ score }) => score);
  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {
    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {
      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {
        const score = scores.get(heatmapY, heatmapX, keypointId);
        if (score < minConfidence2)
          continue;
        if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, scores))
          queue.enqueue({ score, part: { heatmapY, heatmapX, id: keypointId } });
      }
    }
  }
  return queue;
}
function withinRadius(poses, { x, y: y8 }, keypointId) {
  return poses.some(({ keypoints }) => {
    var _a;
    const correspondingKeypoint = (_a = keypoints[keypointId]) == null ? void 0 : _a.position;
    if (!correspondingKeypoint)
      return false;
    return squaredDistance(y8, x, correspondingKeypoint.y, correspondingKeypoint.x) <= squaredNmsRadius;
  });
}
function getInstanceScore(existingPoses, keypoints) {
  const notOverlappedKeypointScores = keypoints.reduce((result, { position, score }, keypointId) => {
    if (!withinRadius(existingPoses, position, keypointId))
      result += score;
    return result;
  }, 0);
  return notOverlappedKeypointScores / keypoints.length;
}
function decode(offsets, scores, displacementsFwd, displacementsBwd, maxDetected, minConfidence2) {
  const poses = [];
  const queue = buildPartWithScoreQueue(minConfidence2, scores);
  while (poses.length < maxDetected && !queue.empty()) {
    const root = queue.dequeue();
    const rootImageCoords = getImageCoords(root.part, outputStride, offsets);
    if (withinRadius(poses, rootImageCoords, root.part.id))
      continue;
    let keypoints = decodePose(root, scores, offsets, displacementsFwd, displacementsBwd);
    keypoints = keypoints.filter((a) => a.score > minConfidence2);
    const score = getInstanceScore(poses, keypoints);
    const box = getBoundingBox(keypoints);
    if (score > minConfidence2)
      poses.push({ keypoints, box, score: Math.round(100 * score) / 100 });
  }
  return poses;
}
async function predict19(input, config3) {
  if (!(model20 == null ? void 0 : model20["executor"]))
    return [];
  const res = De(() => {
    if (!model20.inputs[0].shape)
      return [];
    const resized = Kj.resizeBilinear(input, [model20.inputs[0].shape[2], model20.inputs[0].shape[1]]);
    const normalized = Te(je(We(resized, "float32"), 127.5), 1);
    const results = model20.execute(normalized, poseNetOutputs);
    const results3d = results.map((y8) => gc(y8, [0]));
    results3d[1] = $a(results3d[1]);
    return results3d;
  });
  const buffers = await Promise.all(res.map((tensor) => tensor.buffer()));
  for (const t8 of res)
    Mt(t8);
  const decoded = decode(buffers[0], buffers[1], buffers[2], buffers[3], config3.body.maxDetected, config3.body.minConfidence);
  if (!model20.inputs[0].shape)
    return [];
  const scaled = scalePoses(decoded, [input.shape[1], input.shape[2]], [model20.inputs[0].shape[2], model20.inputs[0].shape[1]]);
  return scaled;
}
async function load18(config3) {
  if (!model20 || env.initial)
    model20 = await loadModel(config3.body.modelPath);
  else if (config3.debug)
    log("cached model:", model20["modelUrl"]);
  return model20;
}

// src/segmentation/rvm.ts
var model21;
var outputNodes2 = ["fgr", "pha", "r1o", "r2o", "r3o", "r4o"];
var t = {};
var ratio = 0;
function init3(config3) {
  Mt([t.r1i, t.r2i, t.r3i, t.r4i, t.downsample_ratio]);
  t.r1i = ur(0);
  t.r2i = ur(0);
  t.r3i = ur(0);
  t.r4i = ur(0);
  ratio = config3.segmentation.ratio || 0.5;
  t.downsample_ratio = ur(ratio);
}
async function load19(config3) {
  if (!model21 || env.initial)
    model21 = await loadModel(config3.segmentation.modelPath);
  else if (config3.debug)
    log("cached model:", model21["modelUrl"]);
  init3(config3);
  return model21;
}
var normalize = (r) => De(() => {
  const squeeze = gc(r, [0]);
  const mul = se(squeeze, constants.tf255);
  const cast = We(mul, "int32");
  return cast;
});
function getRGBA(fgr, pha) {
  const rgb3 = fgr ? normalize(fgr) : Ea([pha.shape[1] || 0, pha.shape[2] || 0, 3], 255, "int32");
  const a = pha ? normalize(pha) : Ea([fgr.shape[1] || 0, fgr.shape[2] || 0, 1], 255, "int32");
  const rgba = bt([rgb3, a], -1);
  Mt([rgb3, a]);
  return rgba;
}
function getState(state) {
  return De(() => {
    const r = {};
    r.unstack = fo(state, -1);
    r.concat = bt(r.unstack, 1);
    r.split = li(r.concat, 4, 1);
    r.stack = bt(r.split, 2);
    r.squeeze = gc(r.stack, [0]);
    r.expand = Ms(r.squeeze, -1);
    r.add = Ce(r.expand, 1);
    r.mul = se(r.add, 127.5);
    r.cast = We(r.mul, "int32");
    r.tile = cu(r.cast, [1, 1, 3]);
    r.alpha = Ea([r.tile.shape[0] || 0, r.tile.shape[1] || 0, 1], 255, "int32");
    return bt([r.tile, r.alpha], -1);
  });
}
async function predict20(input, config3) {
  if (!model21)
    model21 = await load19(config3);
  if (!(model21 == null ? void 0 : model21["executor"]))
    return null;
  t.src = je(input, 255);
  if (ratio !== config3.segmentation.ratio)
    init3(config3);
  const [fgr, pha, r1o, r2o, r3o, r4o] = await model21.executeAsync(t, outputNodes2);
  let rgba;
  switch (config3.segmentation.mode || "default") {
    case "default":
      rgba = getRGBA(fgr, pha);
      break;
    case "alpha":
      rgba = getRGBA(null, pha);
      break;
    case "foreground":
      rgba = getRGBA(fgr, null);
      break;
    case "state":
      rgba = getState(r1o);
      break;
    default:
      rgba = ur(0);
  }
  Mt([t.src, fgr, pha, t.r1i, t.r2i, t.r3i, t.r4i]);
  [t.r1i, t.r2i, t.r3i, t.r4i] = [r1o, r2o, r3o, r4o];
  return rgba;
}

// src/segmentation/selfie.ts
var model22;
async function load20(config3) {
  if (!model22 || env.initial)
    model22 = await loadModel(config3.segmentation.modelPath);
  else if (config3.debug)
    log("cached model:", model22["modelUrl"]);
  return model22;
}
async function predict21(input, config3) {
  var _a;
  if (!model22)
    model22 = await load20(config3);
  if (!(model22 == null ? void 0 : model22["executor"]) || !((_a = model22 == null ? void 0 : model22.inputs) == null ? void 0 : _a[0].shape))
    return null;
  const t8 = {};
  t8.resize = Kj.resizeBilinear(input, [model22.inputs[0].shape ? model22.inputs[0].shape[1] : 0, model22.inputs[0].shape ? model22.inputs[0].shape[2] : 0], false);
  t8.norm = je(t8.resize, constants.tf255);
  t8.res = model22.execute(t8.norm);
  t8.squeeze = gc(t8.res, [0]);
  t8.alpha = Kj.resizeBilinear(t8.squeeze, [input.shape[1] || 0, input.shape[2] || 0]);
  t8.mul = se(t8.alpha, constants.tf255);
  let rgba;
  switch (config3.segmentation.mode || "default") {
    case "default":
      t8.input = gc(input);
      t8.concat = bt([t8.input, t8.mul], -1);
      rgba = We(t8.concat, "int32");
      break;
    case "alpha":
      rgba = We(t8.mul, "int32");
      break;
    default:
      rgba = ur(0);
  }
  Object.keys(t8).forEach((tensor) => Mt(t8[tensor]));
  return rgba;
}

// src/models.ts
function validateModel(instance, model23, name) {
  var _a, _b;
  if (!model23)
    return null;
  if (!((_a = instance == null ? void 0 : instance.config) == null ? void 0 : _a.validateModels))
    return null;
  const simpleOps = ["const", "placeholder", "noop", "pad", "squeeze", "add", "sub", "mul", "div"];
  const ignoreOps = ["biasadd", "fusedbatchnormv3", "matmul", "switch", "shape", "merge", "split", "broadcastto"];
  const ops = [];
  const missing = [];
  const url = model23["modelUrl"];
  const executor = model23["executor"];
  if ((_b = executor == null ? void 0 : executor.graph) == null ? void 0 : _b.nodes) {
    for (const kernel of Object.values(executor.graph.nodes)) {
      const op2 = kernel.op.toLowerCase();
      if (!ops.includes(op2))
        ops.push(op2);
    }
  } else {
    if (!executor && instance.config.debug) {
      log("model not loaded", name);
    }
  }
  for (const op2 of ops) {
    if (!simpleOps.includes(op2) && !ignoreOps.includes(op2) && !instance.env.kernels.includes(op2) && !instance.env.kernels.includes(op2.replace("_", "")) && !instance.env.kernels.includes(op2.replace("native", "")) && !instance.env.kernels.includes(op2.replace("v2", ""))) {
      missing.push(op2);
    }
  }
  if (instance.config.debug && missing.length > 0)
    log("model validation failed:", name, missing);
  return missing.length > 0 ? { name, missing, ops, url } : null;
}
var Models = class {
  constructor(currentInstance) {
    __publicField(this, "instance");
    __publicField(this, "models", {});
    this.models = {};
    this.instance = currentInstance;
  }
  stats() {
    let totalSizeFromManifest = 0;
    let totalSizeWeights = 0;
    let totalSizeLoading = 0;
    for (const m of Object.values(modelStats)) {
      totalSizeFromManifest += m.sizeFromManifest;
      totalSizeWeights += m.sizeLoadedWeights;
      totalSizeLoading += m.sizeDesired;
    }
    const percentageLoaded = totalSizeLoading > 0 ? totalSizeWeights / totalSizeLoading : 0;
    return {
      numLoadedModels: Object.values(modelStats).length,
      numDefinedModels: Object.keys(this.models).length,
      percentageLoaded,
      totalSizeFromManifest,
      totalSizeWeights,
      totalSizeLoading,
      modelStats: Object.values(modelStats)
    };
  }
  reset() {
    for (const model23 of Object.keys(this.models))
      this.models[model23] = null;
  }
  async load(instance) {
    var _a, _b, _c2, _d2, _e, _f2, _g2, _h2, _i, _j2, _k2, _l2, _m, _n2, _o, _p2, _q, _r2, _s2, _t, _u2, _v2, _w2, _x2, _y, _z2, _A2;
    if (env.initial)
      this.reset();
    if (instance)
      this.instance = instance;
    const m = {};
    m.blazeface = this.instance.config.face.enabled && !this.models.blazeface ? load3(this.instance.config) : null;
    m.antispoof = this.instance.config.face.enabled && ((_a = this.instance.config.face.antispoof) == null ? void 0 : _a.enabled) && !this.models.antispoof ? load8(this.instance.config) : null;
    m.liveness = this.instance.config.face.enabled && ((_b = this.instance.config.face.liveness) == null ? void 0 : _b.enabled) && !this.models.liveness ? load9(this.instance.config) : null;
    m.faceres = this.instance.config.face.enabled && ((_c2 = this.instance.config.face.description) == null ? void 0 : _c2.enabled) && !this.models.faceres ? load7(this.instance.config) : null;
    m.emotion = this.instance.config.face.enabled && ((_d2 = this.instance.config.face.emotion) == null ? void 0 : _d2.enabled) && !this.models.emotion ? load6(this.instance.config) : null;
    m.iris = this.instance.config.face.enabled && ((_e = this.instance.config.face.iris) == null ? void 0 : _e.enabled) && !((_f2 = this.instance.config.face.attention) == null ? void 0 : _f2.enabled) && !this.models.iris ? load4(this.instance.config) : null;
    m.facemesh = this.instance.config.face.enabled && ((_g2 = this.instance.config.face.mesh) == null ? void 0 : _g2.enabled) && !this.models.facemesh ? load5(this.instance.config) : null;
    m.gear = this.instance.config.face.enabled && ((_h2 = this.instance.config.face["gear"]) == null ? void 0 : _h2.enabled) && !this.models.gear ? load10(this.instance.config) : null;
    m.ssrnetage = this.instance.config.face.enabled && ((_i = this.instance.config.face["ssrnet"]) == null ? void 0 : _i.enabled) && !this.models.ssrnetage ? load11(this.instance.config) : null;
    m.ssrnetgender = this.instance.config.face.enabled && ((_j2 = this.instance.config.face["ssrnet"]) == null ? void 0 : _j2.enabled) && !this.models.ssrnetgender ? load12(this.instance.config) : null;
    m.mobilefacenet = this.instance.config.face.enabled && ((_k2 = this.instance.config.face["mobilefacenet"]) == null ? void 0 : _k2.enabled) && !this.models.mobilefacenet ? load13(this.instance.config) : null;
    m.insightface = this.instance.config.face.enabled && ((_l2 = this.instance.config.face["insightface"]) == null ? void 0 : _l2.enabled) && !this.models.insightface ? load14(this.instance.config) : null;
    m.blazepose = this.instance.config.body.enabled && !this.models.blazepose && ((_m = this.instance.config.body.modelPath) == null ? void 0 : _m.includes("blazepose")) ? loadPose(this.instance.config) : null;
    m.blazeposedetect = this.instance.config.body.enabled && !this.models.blazeposedetect && this.instance.config.body["detector"] && this.instance.config.body["detector"].modelPath ? loadDetect(this.instance.config) : null;
    m.efficientpose = this.instance.config.body.enabled && !this.models.efficientpose && ((_n2 = this.instance.config.body.modelPath) == null ? void 0 : _n2.includes("efficientpose")) ? load2(this.instance.config) : null;
    m.movenet = this.instance.config.body.enabled && !this.models.movenet && ((_o = this.instance.config.body.modelPath) == null ? void 0 : _o.includes("movenet")) ? load16(this.instance.config) : null;
    m.posenet = this.instance.config.body.enabled && !this.models.posenet && ((_p2 = this.instance.config.body.modelPath) == null ? void 0 : _p2.includes("posenet")) ? load18(this.instance.config) : null;
    m.handtrack = this.instance.config.hand.enabled && !this.models.handtrack && ((_r2 = (_q = this.instance.config.hand.detector) == null ? void 0 : _q.modelPath) == null ? void 0 : _r2.includes("handtrack")) ? loadDetect3(this.instance.config) : null;
    m.handskeleton = this.instance.config.hand.enabled && this.instance.config.hand.landmarks && !this.models.handskeleton && ((_t = (_s2 = this.instance.config.hand.detector) == null ? void 0 : _s2.modelPath) == null ? void 0 : _t.includes("handtrack")) ? loadSkeleton2(this.instance.config) : null;
    if (this.instance.config.hand.enabled && !this.models.handdetect && ((_v2 = (_u2 = this.instance.config.hand.detector) == null ? void 0 : _u2.modelPath) == null ? void 0 : _v2.includes("handdetect"))) {
      m.handdetect = loadDetect2(this.instance.config);
      m.handskeleton = loadSkeleton(this.instance.config);
    }
    m.centernet = this.instance.config.object.enabled && !this.models.centernet && ((_w2 = this.instance.config.object.modelPath) == null ? void 0 : _w2.includes("centernet")) ? load(this.instance.config) : null;
    m.nanodet = this.instance.config.object.enabled && !this.models.nanodet && ((_x2 = this.instance.config.object.modelPath) == null ? void 0 : _x2.includes("nanodet")) ? load17(this.instance.config) : null;
    m.selfie = this.instance.config.segmentation.enabled && !this.models.selfie && ((_y = this.instance.config.segmentation.modelPath) == null ? void 0 : _y.includes("selfie")) ? load20(this.instance.config) : null;
    m.meet = this.instance.config.segmentation.enabled && !this.models.meet && ((_z2 = this.instance.config.segmentation.modelPath) == null ? void 0 : _z2.includes("meet")) ? load15(this.instance.config) : null;
    m.rvm = this.instance.config.segmentation.enabled && !this.models.rvm && ((_A2 = this.instance.config.segmentation.modelPath) == null ? void 0 : _A2.includes("rvm")) ? load19(this.instance.config) : null;
    for (const [model23, promise] of Object.entries(m)) {
      if (promise == null ? void 0 : promise["then"])
        promise["then"]((val) => this.models[model23] = val);
    }
    await Promise.all(Object.values(m));
  }
  list() {
    const models3 = Object.keys(this.models).map((model23) => {
      var _a;
      return { name: model23, loaded: this.models[model23] !== null, size: 0, url: this.models[model23] ? (_a = this.models[model23]) == null ? void 0 : _a["modelUrl"] : null };
    });
    for (const m of models3) {
      const stats = Object.keys(modelStats).find((s) => s.startsWith(m.name));
      if (!stats)
        continue;
      m.size = modelStats[stats].sizeLoadedWeights;
      m.url = modelStats[stats].url;
    }
    return models3;
  }
  loaded() {
    const list = this.list();
    const loaded = list.filter((model23) => model23.loaded).map((model23) => model23.name);
    return loaded;
  }
  validate() {
    const missing = [];
    for (const defined of Object.keys(this.models)) {
      const model23 = this.models[defined];
      if (!model23)
        continue;
      const res = validateModel(this.instance, model23, defined);
      if (res)
        missing.push(res);
    }
    return missing;
  }
};

// src/util/persons.ts
function join2(faces, bodies, hands, gestures, shape) {
  var _a, _b, _c2, _d2, _e, _f2;
  let id2 = 0;
  const persons = [];
  for (const face4 of faces) {
    const person2 = { id: id2++, face: face4, body: null, hands: { left: null, right: null }, gestures: [], box: [0, 0, 0, 0] };
    for (const body4 of bodies) {
      if (face4.box[0] > body4.box[0] && face4.box[0] < body4.box[0] + body4.box[2] && face4.box[1] + face4.box[3] > body4.box[1] && face4.box[1] + face4.box[3] < body4.box[1] + body4.box[3]) {
        person2.body = body4;
      }
    }
    if (person2.body) {
      for (const hand3 of hands) {
        if (hand3.box[0] + hand3.box[2] > person2.body.box[0] && hand3.box[0] + hand3.box[2] < person2.body.box[0] + person2.body.box[2] && hand3.box[1] + hand3.box[3] > person2.body.box[1] && hand3.box[1] + hand3.box[3] < person2.body.box[1] + person2.body.box[3]) {
          if (person2.hands)
            person2.hands.left = hand3;
        }
        if (hand3.box[0] < person2.body.box[0] + person2.body.box[2] && hand3.box[0] > person2.body.box[0] && hand3.box[1] + hand3.box[3] > person2.body.box[1] && hand3.box[1] + hand3.box[3] < person2.body.box[1] + person2.body.box[3]) {
          if (person2.hands)
            person2.hands.right = hand3;
        }
      }
    }
    for (const gesture2 of gestures) {
      if (gesture2["face"] !== void 0 && gesture2["face"] === face4.id)
        person2.gestures.push(gesture2);
      else if (gesture2["iris"] !== void 0 && gesture2["iris"] === face4.id)
        person2.gestures.push(gesture2);
      else if (gesture2["body"] !== void 0 && gesture2["body"] === ((_a = person2.body) == null ? void 0 : _a.id))
        person2.gestures.push(gesture2);
      else if (gesture2["hand"] !== void 0 && gesture2["hand"] === ((_b = person2.hands.left) == null ? void 0 : _b.id))
        person2.gestures.push(gesture2);
      else if (gesture2["hand"] !== void 0 && gesture2["hand"] === ((_c2 = person2.hands.right) == null ? void 0 : _c2.id))
        person2.gestures.push(gesture2);
    }
    const x = [];
    const y8 = [];
    const extractXY = (box) => {
      if (box && box.length === 4) {
        x.push(box[0], box[0] + box[2]);
        y8.push(box[1], box[1] + box[3]);
      }
    };
    extractXY(person2.face.box);
    extractXY((_d2 = person2.body) == null ? void 0 : _d2.box);
    extractXY((_e = person2.hands.left) == null ? void 0 : _e.box);
    extractXY((_f2 = person2.hands.right) == null ? void 0 : _f2.box);
    const minX = Math.min(...x);
    const minY = Math.min(...y8);
    person2.box = [minX, minY, Math.max(...x) - minX, Math.max(...y8) - minY];
    if ((shape == null ? void 0 : shape[1]) && (shape == null ? void 0 : shape[2]))
      person2.boxRaw = [person2.box[0] / shape[2], person2.box[1] / shape[1], person2.box[2] / shape[2], person2.box[3] / shape[1]];
    persons.push(person2);
  }
  return persons;
}

// src/sample.ts
var face3 = `
/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUA
AAABAAAARgEoAAMAAAABAAIAAAExAAIAAAARAAAATgAAAAAAAABgAAAAAQAAAGAAAAABcGFpbnQu
bmV0IDQuMi4xMwAA/9sAQwAGBAUGBQQGBgUGBwcGCAoQCgoJCQoUDg8MEBcUGBgXFBYWGh0lHxob
IxwWFiAsICMmJykqKRkfLTAtKDAlKCko/9sAQwEHBwcKCAoTCgoTKBoWGigoKCgoKCgoKCgoKCgo
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo/8AAEQgBAAEAAwEhAAIRAQMRAf/E
AB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAE
EQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZH
SElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1
tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEB
AQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXET
IjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFla
Y2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
x8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+qaKACigApGOKAML
Xp8xlF5A7V4X8RtYs7PzfNImnx8sa8Kp9z3q2tEgp6angWs62ZZ5CTGoJ6DArGNz5p+UrID6EUrF
PUlW1EuN0XNW7PQ2L5j3JnoKXN0KijqNP0eYoqXBdgPuuo+ZPeupisWn2Jd4+0r924XgsQOCff3/
AJ1FzRKxDqGii6m3siiQ8F1XGfXI6YNWLfRbiRQMkcZI9fpTDluT2/h6Qy8gDPbtmtG38JeY480Z
5zSLUTZg8M28YwYxjAArXtdPt402qgHbpSaLWhma3o0Uqk7Nx9DWLaaVblgPs6qRyds2M/gRSQp9
zZOni2iWS2hlQ+kjYz9OMGrdjq89vIPPVhj+8M/lQyDq9P1WOYBlMZz1AOD+VdDaTiReOKulK0jO
tHmi0WDTlr0TyxRVhT8tJjIX+9SUxHXUV553BRQAVBcPhSBTSuxPY86+IGti0s5I7dsORy9fM3i6
8e8mfDO5P90ZrWWiJicNPpZZtxV/xrW0jQt4DOv6Vk2dEEdTY6BHuB25rpbPSo0QARjP0qTRI17W
wA/hFaMWmoQMgflQXYsDS142rU9tpqqenfNA7GgtihxkdKuRW6qMY/GkDZY8sY4Ap4hXbyB+VArk
EtuH4wPyrk/EGkOm+a3jw3suRQLc5i38SX9hJ9nnY+XnBUdPyNdFY6pa3KkkAE9l6f8AfJ/pSJT6
GhDmI+Zb4ZRycdv6ium0nUhKFydrelTsNnS2829RnrVgV6NKXNG55lWPLIM81Op+WrZkRMfmNNzT
A7GivPO4KKAEY4XNYWt3vkwPg4OK0giJdjw/xrqhm87Zs8tc7pX5A+leSajf6aHYJ50kn4AZpTep
rBWRm2Vobm4BXfyehPFdnpmnBFUY5rI2SN63tlToK0YI+KZpFF+3QdavwoKTLtoW0Toaswpk5pCb
LCxipAhoIuP2dKevHXoaYDylRyxhlwRQI4nxVoCXWZI1GfpXGtbSWjYPGP73+NIGupt6TqMsLruZ
ih4xnP5V09mQ+JLd8gn0xSYJnVaVdkook69K34zuUGunDS3Rx4qOzHVIp4rrOMY3NJQI7GivPO8K
KAILt9kZrz3xlebYiu8KCCWb0XvW0NFch6ysfO3jLVjfXLIn+pQkKorl7WxNxIPl71g2dUUdpo+l
pBGvHPet23iC8ihFosrxirkHQUFo0IF4FXI1O726CpKLacCrMJoJLYHAPpTwucHpSRJJ5e4AZI9x
UqpxzVpCuOC8cUpQUMRnXttuB4rjNdsYyeVwfXpmpGmcvcQyafMCFJjPY10eg34BUg4DcZP8jUO4
HaRq3lLNF+IHet7R7jz7c56rwa2wz9+xhiVeFy/T1PFegeaNPWigDsc0ZrzzvDNIaAM7VpNqdegr
xL4l6kywyRhseZ19lrdfAZL4jxYg3Fw20d63tJsdrDI5rm3Z3R0R0Mce1eKnQYAplIkWrMJ45oZS
NO3PHbNXIyfpSGWowSOasxLUiZdjFSqtNEMkUemKlAGKsRJjAppFAiORMjmsTVrNZEO4cfSoZSOD
1eJ7WXBUzQZ+7nkfSo7e2Ei+ZaMzxntjBX2NSU1Y6/wxqojiEFzkA8KTXYaUoWRyv3W5rSjpNHPX
+BmpSg8V6J5gUUAdhRXnneFFAGHrTfu5PpXzj8S70/aZtxzztXFbv4DKHxHI+H4GZiz9zxXXW8G3
GBXMjvLRXAx0oPGPSmMVeOnWrMTYpFI0bcg1fh54xmgovRcD3qxETSIZcRvzp+/BpEkqsBUqsM9K
q4Em4Gkxk0yRGXrVW6i8yFhkg+tJjRxGsWrxllkUMh9eK5uMz6bcebbnfG33kPcVkay2OntPKuo0
nhXI67c8qa7Lw3c+adjcEDGK1paSRhVV4s6A0or0jyRRQ1AHX0V553hRQBz+vNtt5z3xXzX8Qbdm
uic5YnOMdK3l8JnTXvlbwpYl+WySOgrp5YfLOOB9O1c62O7qQkc+9RsKChFPWp4DluOlSykaNruH
ArUgHShFNF2NT1qxGO3NBmyxGcE1N2560CFzjrUysO9JAPDDjFOVuKoQuSRTWouBkazbCa3cd8cV
wF7IISQccHBzUSWpV9C3o1x5b5GAjdQD1rs9DjC3kckbEhqKfxIzn8LOupRXqnkPccBSkUAzraK8
87wooA5rxMSI3HqK8B8bQl9Q8sffY5b/AAraXwkUviNrw9pH2W1ViMMRTdRjw4HpWNtDti9TPc4P
FQs2M5qdyyMHLcfjV63HTAoBGtap0wK0YxigpsuRDtVhVYd6GQydVwwIqdRnqKCR23I5pCMUW6gD
YNKuetAEise9KTxQBWuFyhrznxNZkXjFeN3I+tTIZg2OqmzmxNF0PO3vXp/g2+hukVl4zyPanTXv
JmVR+60dpThXpnlPceopWFAbnV0V553hSGgRynjC5FujOey14Ssp1HxNmTnc+a3kvcIpv37HoEYQ
QmMdVHSsnVbYJF5jVk0dsNzlruVIsl2wKxbjWrVHILjg1CRbZJb+ILHPzyhfStODWLQgFJFYd+el
UJM27HUIXxhga1Y5lLVLKLkMnoauxnPPrSEx7ShF+Y/n2qrc6xBbhizDAqkK1zJuvG9nbg8ZA681
ly/Ei052RO3uKAsZlx8QGd8xxvt9Aa1NH8dK7AXMcip64zigdkdrZX8F7EJLdwwNXMkrz1qRMRly
CK4TxmpidWI49felPYSOMmi80NIoOV6qRzXYeA5SskYPfirpfEjGr8LPWVHyD6U4CvQPL3ZItOYc
UDOoNFeed4Uhpks4H4iE/Z5MeleMeGULeLgjds10S+BGdL+Jc9OSBU2Huc5Nc74yvUtrcDBrJnZF
63PJdXvLy/lKWw46bvQVz82jXhkLO5Y+9ZlsYthcRnbIjY9R3q3awTRkEM3WmJI6C0ea3dGRsr1x
XY6TqW9FLHnjrUs0izpLK5DDjofSta3ckH09KRUkZuuTvFGdvPauE1Y3U6Mqbssf/rUxHPTaJPK2
ZmJPbBqzY6DCZh5xJC9s9aBJHU6dpemJjfEmfetJtI0+VPkUr/unFOxdiextHs33W07YHQHk11mk
Xb3KbZ1xIvcd6LEyWho4Nct41sTPYb16ipexCPPZN+wYGCvH1rrPAEJmvkPoc1VL4kZVvgZ6yFwK
cBXoHkkqinFaVyzo80GuE7WJRQSziPiGdthK5HQV4x4J/wBI8WPIewNdEvgRNL42emO/yj1UHNef
eNpRczbC+I17DvWT2OqJxc0sMK4TCisy41q0hfEkqj8aixdwTXNOlwvmqD9anS9tXH7uVG+hosO4
/wC0oOhrR0+6G4YNIEzsNEuCxAPNdjZruA4xxUmjINSjURksOlcbqFykbnjFA1sYGoassaknCqO5
rl7rxhGm7yBnBxuJq0rkSlYpw+NLlsfd5P8AerVsvHEqSBHwPVgcgVpyMyVXU3rXxcHYETAk+hru
/DWti6ZSTyOKzZqndHaxvvUGq2rQ+dYyqR24qWI8dvbr7LqDxyDAzXpvw6FvIxePGSM06Xxoyr/A
zviKFHNegeX1J41zUhXioGbuaSuM6wpCaBHG/EcA6HN/exxXjXw2jL67cv8A3Qa6H8CFR+NnoWpO
I4XI44rxLxrqjQzSEsQM1gdSPM9U1uR1YbmWIdXHf2rmpIb67YS28UrRlsLI3c/jW0VZGUpO5pW1
jfLNOjahawzwReYI5cjzMkDavHJ5/SrVv9uhtPtVxCPLBwzxnlT9KGghLU3tKvvPjHzbl7EGuisJ
GRxWLOg7nRXJEbDjmvSNK+aFSfSoZr0KutRkphc4NcRrdkVjL9aVio7Hk3iqS8ubhrWzUlsZY9kG
cZNc5D4aee5MclzJIFTzHAO0MfatqSOWu7bFS1srDUZEis0vIZoUxPvfcC+4/dx2xjr712XiTwXb
WmlQ6hol3cRhoFd4rlg3zY5wR0GelavQwjq7GD4etdVvSnk2wAB+9v8A8mvcfA2kXiRo0/UdcDis
ZnTTulqeoWqbUAJqWUb42X1FZlnjfjSwlGrr5S/eNdD4RkvLAAQ4yRyaUZcruVKl7TQ9I0G+mnzH
ckFwM8VuIK7ac3KF2eXiKapz5UWYxipNtMyNejNch0jSar3cjR27uoyQCRVRWom9DxTx54gu5fMi
lbKdMVjfCZPNlv5v9rFbVHpYqjGzbOn8SzFI9o715L4u0r7arYzk+lYdTqSujy7U/C0u4vHk+WwO
xuh9q3J9dgvbdVukMV1EwbDDgn04rZMwlHoZ+orZ6hfQ3RWVnQYCgZAq+8U0ln5NtBsV2yxYcfgK
JtW0CnB31LlroVwJ1nQLGDjeP7w+lb0dsFxjrWB0tHS6NuWPJ6A16ToUm63T3Gallr4S7cxiTjrX
PaxaF7dlVeSMUhxZ5jd+H7qCa4eF3DSE5x3zXN3Wk6jbyeaiFWUY6ZyPStYS5SalPmVipFbX0E4c
W0alvmPHJrag0rVvEE6LdljGpG2NRtQD+tW5XMI0uU9M8NeFo9PiQhecDIIrtrOMIoG3H4VlJm9t
C6CB06VPGM1IHLeItGS6uw+ORT7e3jsbQvj7gzUNam0JaWE+HN7NqOqX80n3FO1RXo8YzXdS+BHk
4z+KyzGPapcU2YIv7qQtiuaxvcaWqG4O6FwfSrS1JbPnrxoxkv7qIfejcitj4V2f2exumI+8+aKn
xHTT+G5d8Txlm4rjLxMsQwzWT3OiK0Mm6sEkVsAcjFc1d+FEmlGwEDPQVopaEuOpr6f4ZWNAu3tW
vHpAj5ZQcUFIWaDjGMVUMQ3cVDBmvbhY7QAV2nh+T/R1yeKhlrY31+b61FcQK6nIoJMi401WblRi
qr6PCw5UYq9y+YgOgWzNkRrx3xWjp+nx2v3FQcelAbmko9anQ4GBUNisPHWr1qMrQhS2K11HvmYV
hamcxSRZ5xRIqluS/DKAQQXZxyXrvo2FdlL4EeZjH+/ZbjNSZpswLNBrE1Gt7VE4ODVIlnh/j61F
j4lmeTGyUbq6LwdEqWbeX0YbhSqfEddP4Bddj4JIrhL5d8h7VjI6oLQqKNzelWre3yc4/ClFjaL6
wqBxxUUxwCKu5BmXRA6c+9ZjP83FSBoQuPs4BrsNBlUW659KmRrDY6G1lyQtW3Hy0lqQ1qVJnAbm
oy3b9KYJCqRj3o4zRctIlhjLHmpSuOBRbQOpLGpPFaES7UqkZzKN1KsEc87/AHUUmvPLTVGv72aQ
k7WJwKmRrQ3ud74Ltilgz4++2a6iNDXdS0gjyMU71my7GpqTbxSbMki3SViajTTHqkSeR/GeyZmg
nQHkEE1S+F+oPPavBL96I4/Cia1udVF+4dVrkW+Fq8+v4tjMDWUkdVJ6WM0cNV+F+MVmjUcZgqnP
1qpNNnkcVRLiZtxIS1UzzIF7mghlxUZpVQdq6nTVdAoAOKzkbQWhvwM6gMM1twOJYx3NOJE11Kt1
H1/pVVlwBkk+9NocXoOQ45FPj+fkUJFF2NSB700v/hTEty5ZpkjvVyUgcCq6GM9zC14/8Se6GcZQ
1574Xs5WkI2HBPHFQ1dm1KSSZ7Rotn9l0+KPHIHNacae1dy0Vjxaj5ptlhVp+2s2CJ9ppCKzuWNx
zSFc1SYrHNeNdIGpaYw25ZeRXmvheyk0jVpEdcLJ0q3ZxNKTa0O3vQHg/DNcHrsJDmsmjspnNzNt
fFIJ24GazOhC+azDmgZIOOKBsp3J2qSaZodubq58yQ4QAnmhGT3NO18pb7BORmu205LfYpyKVkWp
Oxr5gKYWoIZWgfGfloFq1qTPLubnGO1RPtxg4P0oBAkY/hBz6VNDDkZ6AU0W2WSdqkdKr9ZOaGSj
VtcLHmnOcgmmYvcz7mBLy3MbdD1q9ouiRK6bUAVeelOC1InPlidSsWMDFOCEdq3uefykqrinYqGy
rFvApMVka2DAowKAsMkRXQqwyDXn/iWyitNQ3qPl6itIvRoF8RXinW4tQ6HI6GuW8SIVBPalc6qe
5x9x97r3qruwTjrWZ0ksZ9TUmcDNAmZ9/wAoao63rR0+w22MLPtAzt6mghmfofiB76LdJBJBIp5D
d/oa7bSdWLIPnpDi9TM8TeKdas51XTbIyxd3J/pXS+E/EFxqNoFu7do5OmD60maHWrnZyDRkn/69
MlEyOR0xntVoNx+FUgYjPxg4FLCuWDZyKQr2RoRnP0qO+nEFpJITgAUzLqZnhu6+0rknOTXpOmwJ
Fbrt5yMmnHYyr6Oxb2ijaKLnPYMClwKQWK3n0hn+lachHOJ9pNNN0apQFzsY10a4v4hXQh0xpieQ
MA1XLZNjhK80cT8OdV+3Wl3A7ZZJCw+hrR1qLcjZ/CsbnfHRnFXseHJArOYYbrUs1uPhYbuatqFP
ByfSkMq3UIINYkto+87Tx6GkSxfsDbflGD7CtTw/pk4nzITtPIFMFudsukh4Rxz71paTpKwP5jcn
0qTRy0NORMDgVCqewoJTJgAoxjntTiTu7fWmFxAcnn1q3EPl+X8KZMi4gKqB1Peob/Tv7Us5bfeU
yOoq4R5nYxqT5I8xieH9J1DTbvyJELRg8ODwa9Ms5mSFV9BWiptbnNVrKdmif7Q1KLg96XIZc5Is
pNL5pqeUrmMtZs0jzV08phchaY00zH1p2ZNxjS1g+LdJOt6U9ssmxjyGp2urDjLlaZzng/wUPDqz
TSTmWeTrjpVjVk3Rvjr2rnqQ5dDvo1XUd2cTqSNk9OKxXGCeKxZ1DAxHTr2q5C/y8GokUhsz54qu
uCxzSQjQ0+FZblR2ro4bZYiMVQ0dBb7Qi5x0qzuG5QOh71LYErDufpSeWrHnimIXbjkUjLkH1Hem
gGxryc+tXI19KYmWegq9YLiLJ7mtqS945cS7QsWehqxA9dEjz4krPSxyZqbFFhGxUm6smjRM55Lk
HvSvNxXTY57kLT+9MNwKdhXGm5FIbkU7Bca1wMEVhaiuQcVhXWiZ14R6tHGanGBI2OtYkqEHjgVy
s9ErEeo6UBsHipKEZs5qpPdRxcbhx70NCSuybTNWihc5brW9Fq6vjMnFSdEIdDRi8RRKygZbHFbu
m6nb3RA3gMegNJhOm0jbXGOoxTuCc1Rz3FyoGKawz9KaAVcZqeMgCmIkB4FaUTbYwB6V00Fuzixb
0SFMuDU8Mlbs4UPeXHeiOXkUrDuXYnyKk3cVk0ap6HMxxketSMhrcwRC0dMMZFMQ3yzSeVQAeUaz
9Vj8uPd271nVV4m+GdpnHX67pCeKyLtBtNcR6xlk9RVeWTb3qRnO6trgttyIfm71z7ai8j7/AJmN
DNqUVa5Yi1AnjynHuBV+11YJhWWXcP8AZNSzqgmaEerSsf3NtIQP4mGKtRavdRgMIpVI9KjU0a7n
R6T43uYQI7qN2Tpkqciu503VVuQGAYZHQjFVc4alPlZrpKGAznpTwxOc9+lWjIlUACnM4XApiLNk
nmvnsK0NvpXZRVonmYqV52GsmanhXitTmFkSiJTSAvwrxUxXIrJ7miOfjf1pzNWxkRlqYWpgJupu
6gQbuahvIxPA6eo4pNXVioS5WmefakGhndH4INZs5DJXA10PaTurmLO21uKpSZqGMoXGnRzBiyjd
9Kx5rcQS428fSkjanLoaOliHGZFB56VswW+mtPufcBsGOAfmxz+tFkd8HpoaUx09FAtFY8DO71qb
Sms/Nb7RbecG6AEjFLS5c78t+p0djpVs9wsyQiJAdyr1rW+zqjErzSe559Sbk9S3C+MA1bjbgE1S
MSXzMVG0vNUI2tPKrAuCMnrVzNd0PhR49W/O2xrHmp4TxVMzQshpIzzQBehqesnuaI5VGzT2bitz
FEbNTC1ADS1JupgG6l3UAc14s04yR/aYRll+8BXCtLncDXFWjys9TCz5oW7GddH5qqNzWDOgQnC8
VSuo1kHzAGkPYopEY2+RWxV23Vzj5G/Kg3jWaNazhZuqNXS6TaKhB2c0jR1nJWOlhOxRxU4YkCgx
Y0OQatQyDbyaaFYe8uF4NY3iC9ltbVGj43NTIL3h7WzMihjzXVQXYYDdW9Cf2WcOJpfaRZ3g9KsQ
mupnCLIabGeaAL0LcVY3cVmzRHIxtUhetzEjZqjLUAIWpN1ArhupwagAfDKQ3Q1594v0c2bm6tx+
5Y8j+6ayrR5onThp8s7dzkZjuqAAmuBnqC7c0iwgtzSA0rWzjfGRW3ZadDu4AoNYo2rfS4v7orSh
05UA2r0pDbsTm29KRottBNyJ0wpJ9KhD7f6U0ikNWffIFBz60zVUW52ow4UcUN6EPcx44WsbgOmd
ua7TT5Bd24KHnFKnLlZFSN4koluLdueRWvp14swweG9DXoxldHlTjYtzGoo25qzEvwtUxas2jRPQ
5CNqkLVsYoYzUzdQA3dSFqBBmnqaBhuqhriCXTpVIzxUz+Fl03aSPI9QTypW2/dz0qKNw3SvOPZR
Mqin8VLKRcs3O4Cuk0w/MDjt1NBtHY6O2IIHY1pxgFaETIRwMkjtVSUEk4570MlFW5bap6dKzWm8
1tqH8aY+hp2FvGoGayNevVt7/ap4xzUvYjqTLtvLPcvJxSaVcyWsxTnFZlnT2t15xHmCtOBYwQy4
B9q7cPO+jPPxFO2qLEj5HWo42+aus4HpoX4W4FTF+KlotbHII9SFuK0MUNZqiLUDE3UbqBBupwag
Bc1DefPbyD/ZND2KjujyPWlKzuPesRZjHJXms9lMuw3StjnmphKDSLTJ7OfE3JrpbO4GQc9qlnRA
3LO82k5NbFvdADkjBoCSHyXIIIzgVQvdRigT7wzjgUzO1jHknlvG7qnp61etYFQDIpCZoqVijzXn
3iC8EmsOuaCGb/heR/s0ijkVv6fbxy3QMg5xmsnuX0Ldzut3+UYTPWk+2GJSe+M1pFtamcldalmx
1eO4XaThhWnC+TXqR2PHqL3maUJ4qRjxSEjj42qXdxVmaGs1MJoATfSbqBAG5p6mgAzTJTmNvpQU
tzzHXY83D/U1zF5FhjgV5r3Pa6FMsV5HWnLe7RhqBRdmTwagN2d2K2rPU1C5LAnPrUs6Iysbdrq6
f3gK0BrUKj/WClY05iM6xLOcQAj3NT29uznfKSzHuadzNu7NSBFjHNSm5VO9IRnajqoWMhTzXFtA
bvUfMduSeg702Qz0rS7FbTToQFwzjJqaGTFyfK5PQViyzUuFmuIdgGABya5u/vTaN5cnUHFUmLoZ
zyskwlgJweSK6zQdUEwVJeGr0aUrxPLxEfe0OrhPAqVjxWhznGRtUwatDK4jNxURbmkAm6jNABup
6tQAFqhupNtu59qUnZFwV5JHnWsHdIx96w5lz15rzT2uhRmt85xWbcxMnUGmZlB0bdxmrNvFIcfM
350mWjbs7YkDJY/jW5ZWW4jikWkdNp9mqYJFaJdEHHakUULu/VB1rLn1Ld/FgetMGYd/qWSQmSa0
/AemS32pfa7piLeLkg9z6UmQtz0W7uQ2cZx0A9BVzR7cAea6j2rPqX0L99KRat5A6Dk1wOoKZ52a
YfMORTYRLujiGWEq6/NWza2yKQVHNdOHerRy4laJo6TTnbbtb8KuM3Fdh5z3OJjbmpt3FaMxAtUZ
agBN1GaQBzTwaAAms3VbjERUGsa07RsdeFpuUuY4jUjljWTKK4j02RE4IpJYFk6imQkVl0xWarsO
mAEcUi0bNnZBR0rWtoguMCkUi21wI161mXuocEKaYXMS4u+pY/hVCSWSY4HT0pEmlouiSahdpEBl
mOceleiwWcNjClvHgJH97Hc1EmVFFi3Czy7mwIl/WtJbjP7uLgd/apQ2VNVvtsBhiPzdK5S4nAuR
nqOCaTGi9pcytPlU+XpmumtWII44rah8ZjiNIXRuWeNvvViQ/LXpJWPJbu7nCRvVkNxVsxBmqJmo
EPiXca0YLMuOlJsuKuPlsSi5IrNuG8s4HWs5VEkbwoOTKsk+FJY4rC1K53k1xTk5O7PSpwVNWRzt
4cms+WpKICtSLTETQj5q0YeBSGiys23pUguGxQMq3E59ayrm4x3yaAKiRtO2WPHcmhruKFxFajzZ
ScA44qRHoXhuMaLpxaUg6hcDLMf4F9KlhuDeXGASIl+8azZslYma68y48m1+7nFW5rtbRNhb5z1p
iMKbUg0zuW4A4rPgb7VdKXOMmpA7HRbMS7nUYiUda0lkQOBngVrS+JGdbWLRt2bAx5BqeQ/LXpnj
PQ4GJ+ashuK0MhWaoWcA0AaOmASMK7jRNPWYBmHyiuepO2x10qfcv6vYxCzYqoGK4HVYVTJrmb5l
c6oaM5TUJ8EgGsG4kLNUHT0M64OaqMMikSRsuKbnFMRLG3zVehOaGNE445NNlnVFpDMu6uie9Vo1
8z5mOAOST2pDK91cNN+5tsrH3PrW54a06KxT7fdrlh/q1Pc+tJ6IUdZGvHPLezMcnBOWbsPap5r3
ylFtbdT1xUWNWzU0/Zbwlgfmx8zGsHWtRHmMqE59aAMyNifvHPc1f0gtPdqkY5JosJHeNci2tktY
euPnNY+oXWZEVJNrZ9aun8SIq/CzodHuriIokhDIR1ronbKZr0o6o8ipoz//2Q==`;
var body3 = `
/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAsICAoIBwsKCQoNDAsNERwSEQ8PESIZGhQcKSQrKigk
JyctMkA3LTA9MCcnOEw5PUNFSElIKzZPVU5GVEBHSEX/2wBDAQwNDREPESESEiFFLicuRUVFRUVF
RUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUX/wAARCASwBLADASIA
AhEBAxEB/8QAGwABAAIDAQEAAAAAAAAAAAAAAAEDAgQFBgf/xABDEAEAAgECBAMECQIDBgUFAQAA
AQIDBBEFEiExE0FRBiJhcRQjMkJSgZGhsWLBJDNyFSVTY3OSNEPR4fAHFjWCokT/xAAYAQEAAwEA
AAAAAAAAAAAAAAAAAQIDBP/EACARAQEBAQADAQEBAQEBAAAAAAABAhEDITFBEjJRIhP/2gAMAwEA
AhEDEQA/APqYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAKNTq8OkxzfNkisQC8eb1XtRNbzXT4q7eU2nu0MntRq/D8StMccvW29ZmdvgjsTyvZjxOLj
+s8WLxn8TFPXs6Oj9oct7c14rkxz22nrB2I49KOdTjelmszfmpMeUxv/AA28OqwZ4icWWtt/SUi4
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmdo3nsPNe0Pt
Fh09Z0+DNWL7+9O/7A3eJcZppsV5raI27esvH6jX5ddM25p79Ilo59VbUZOe2Tm/PeGvfPfT2iKR
PLv1+DO678XmW/a97U6TtOyzTbTF538/T9WjTNecm9a7126tqk3rSYxY5ta1plRZqZNXGjyZcPXl
mZmsx+qjBrsuO16xM7eXRt04JrdTltk5OWJnfaWf0a2lty5MdZnfzSn+WOHiOutFpjHa9e8bQ2fp
+alYy462pk7zXbuxjPesbRS0f6ZZV1ET1tErzXFLHo+A+1ddZf6NrI8PJHa1vN6iJi0bxMTHwfOa
zhzd61v1846utwniM6DUdb3nBaNrVmd9vjC/ZVePYirBqMWppz4rxaPgtEAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAItaK1m09ojcHnvarjM8P0vh49+a/eY8ng9D
h1fGM1rxjtGPfvbzdbjuTJxHX48cTPNltM/KsS9Dw7S49Jp6UpHaGe2vjz1y9J7LYK13vHWe7bj2
ex1tvM80ekuxW3RnW3Vm6P5jRx8H0+OYmMcb+bapo8GKPdpC6bQwtdHU8JpWkdJ/JweL6e23iU67
d4dubSqyVi9Zi0bwIs68XGp36TtEq7ZJmZmevzdbifCKWtbJinkt6eTgZPFw32t+sRurbWVzxs1y
Rv6T8V1NZNPtfq0seTm+Kevr+SZuxXjvaPiV8N4viycto9HseG6+uu08W6Rkj7UPmFck1tE1nlmP
Ld3eA8V8HVVi1pjq6Ma/pnqce/ERMTETHaUrKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAADW19+TQ5p/p2bLS4v04Zmt5VjeQeJ4bjnLqsupv+Ka1+ERLv4reTmcNxcuC
vy3l0qdI2hlr66sT02ot0ZV7qqrInruzrVZLGSZ37JjqgYTG0K5lbaFVhDT1Ub456RPweY4hixWi
eSdpjvD1eWejz3FNHWYtkpvFo9EIseb3tS3SerOms22rfpPqZKzvvHSYUz70TExG6Gdbs2rljeJ/
Mx5L0vEzPaelnOi98c9J2bFNTFpit47+a+PVUvx9T9nOIfT+GV5p3yY/ds67wvsXqpxau+G09Lx+
r3TqrEAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADV4ljnLw3U0jvO
O0fs2lWqyUw6XLkyfYrWZkHldBEV09eveG3Fq1mI3jd4vPrOIaid8G9MP3Y38k6fNrt/rMk9Ou8s
tfXXn49rGWInuy8SO/k5Gl1E3rG/fzbOe94wTy99mbRvTrMOOvNfJWsesywniukrG/jU6fF43WYN
TmtEeJtEQ06aSmK2+bNtEd+qfSO17unF9Hmvy1y13XWyVmN4tExLxVK8PmNq5NrT58zawam+m/yc
0Xj8NpRYSvQZ7xEOdqI3rPozxayNRXe0ct/ON03jmrKB5nV4q1yTO20Obmv4c+cx8HoeI6WZpNoj
q83niYmYscU0r8aJ6T1n49zeJ+Meqm1drb9J+Kd5p136StGVem9l9TbHxLDFp7W7+sS+q1nesT6w
+PcAzVjiGHftzQ+v4f8AJpv6On8jH9ZgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAABp8VrW/C9TW0ztOO3b5Nxp8VmI4bn37TWYB8f1HFtTfUfR9FWJmsdZ9I7MtJxDX5s
d8ta1y0xzteaR2277rcuhycP12SceLxMeWNpjttHwlu8I0mfQ1y+D7k5YmJmY36T36Ka43z/AF1t
cI1ds+qxVj7/AEej19PCw9HJ4NoK4OIU5Y35YmZdzVTGebVZabx5jJS+Tmns81rNLm1Wrzc9rVw4
Yibbem72mXTTS0w0M3BvEta1bWrM95ie5EanY87wXgNOL6XPfxraXLhra/W28bR/dzYzarBqJxRe
bzE7Rt5vWU9n8mPHOGmS0Ypnea1naJb+k9ncNLR7u2y/WcxXO4TOoyUrN6zD0FaW5Y3hu49FiwUi
KxCvLMR0hlW0jn6ukWw3iXjOJzbDlneOj3GaN6zDzfFOH+LE7SRGo83XNSZ2lbG2/WfdlvaT2cy6
rNFInlrv1mfJ37cK4PwTTxOoidRm2+/2/KFuyMp47XB4LivXiunrH2b2iH2qn2K/J8x4fGDNxTSZ
9Nh8OviRvTyfT6xtWI+DeXs9MNZubypASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAOZx6/LoOWPvWiHTcf2hiZ0e8fc2mf1E5+vP/AEeuSd7RC2uKtI6QjHfeINTfwtPf
Jvty9WPfbt/lucP03gxfJf7d/wBoReYpm97zaNeLb4Ims9Nt94auDjem1Wo5PFi1onylS+1o7l8V
bxvtupjDMdNkYtXS1+Stt+m63xImEJ4xjHER2ZxMUjeUTO3VRmydBbjLJqPi08mbeVOXJPq1sl5Q
Vbkz9+rRy35rxHqzmZlVEe/Ez5LRlW5iyfR6zffaIjq1OSNZps2a21rZInafSPJhxGMl9LStLRWM
lorM/A4dkrWbYfLZC2W/7K6eubX6b4RzT+W76K8b7G6X62cu3Sten59nsm3j+OXz3/0ANGIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0OIYfpOHPijvNNo+fdvtXJO18k/
/OwPFYbz2ls3jx8VqW6xMdWPEdP9D4lkx/dt79flLLHbkxTPwY6nt2512ORTRzE2x4/dpE7cvkme
E4IrW3hRMxO8THRtU1FKWtvtvK2upx22rzRCtXkqzh2jtF7ZbT122b01ndnpuWuP3Z3+Ky20qDVv
fauzVy3mejZzNK8dVjqi87KLRLYtXruqvXzkQp7Qoid88R6rcl+WGlW0/Sa22mfhCZOq2x082ix6
jkm822pO8VrPdr4dNObVeDo8XW3uzMbzK+mvxT7szE27cvnu9j7PcNjSaXx8mOIzZevbrEeic5tN
+SZnpt8J4fHD9HXHO3PPW0x/DeBtJxx29vaAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAKNRim9Z5e89Nl4DzXtVh5babURHrSf7f3ec1+qnDorWrvvt5Pccb0n0zhmWk
Rvevv1+cPE2rGTFNZU26PFfxwa5dVkjelI2772nZnX6bbrEUq3o0d678u8wmuDL2ittvVjXdneeK
cGv4jpJ6U56+kS7+j118+GLXpakzHaWlp9NNY3tv+bbiYiNoQy1y30uyZJlrWmZnuym6q1iIJnop
yW2Te8bdWnnypQqzZOadokiIpSZntWN5lrxki19vNRxrUeBwnNNd+fJEY6/OejXLn3Xe/wDp9wyn
E8uo4lqqxblv7lJ26T6vpD5X7G8QycKzeBMbzMRM1/FH/wA/h9QwZ6ajDXLitvWzRgsAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeL45w+dDrZvWv1OWd4+E+j2jX
12jx67TWw5Y6T2nzifU+rZ1y9eHwzDYxxEy18+DJodXfT5o96vafWPVbjyxDn1OOzHudbM0rt2UW
iI69mVtRXZq5tREb9VUoy2iIlRbJ0UX1VZ6btTLrI7V6yk62M2oisT1c7JmtkttVMUyZp6x0beDS
RWOvdKijDimvWd3G9pNRMfRcNfvZOb9Hpb0itJeP47k/3hgjaZnbaP1XxWW3T0movbNS0W645nbf
0nrMPpXs3xamoxdJiLbe/X1n8Uf3fKsOTw4jbaXo+EarJhtGTHMxeJ6xH7Sti9Zaj6x3HM4NxXFx
DS1mtoi8dJrv2l011QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AGjxLhODieOIye7kr9m8d4eM4to9RwjPXFa0ZIvG9bR0fQXmPbDFvTTZPOJmEWS/V8bs9R43NxLL
G8eFbePg1bajU5/s0l1ceKLx1hbjwRE9mOpx0y2uRTSZsm3PMw2aaKtIjo6kYo9EXpET0hVLXxYK
xC6MZvyx1lFs0RHfaPiCnU12pLyHGNDbUajBekWma2npWN3p8+opa20e9LSyZLxExTlpM+vdOdcZ
a9tPS8MyUvFrzWlI6727u1pYxYrbVmb7x+TQx6au3Nqcl7/0rcmW9axGnwZJj1novmxnZXV0fFp4
ZxLBPgTGK8xzXr5fOH0bFlpmxVyY7Rato3iYfNuG2x56Wrqa8s2jz+7Lu8O12bS6jkwzN6THNNI6
tvrN68Y4rxlx1vHa0bskAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAA4XtTTm0OKfTJ/aXdcL2pyRGjwU362yb7fkJz9eTxxyZJjyltRXzUZK7TFtl9Lbwy06YzrHwa+
fJFd/wCVt8m0bQ0eS2qzcm+1K/an+zNZFL5M1pjFXeI72ky48eGnPkvNp27+TPU6nHpMfLXaIjpE
erk5dRMxOfN1mPeisfshW1ne1a1577Y6x5R3U0zze31FOWI6ze0byU098kRlzbxM9qrMlPDpyRMR
Md5Vt/Ihp5898mWZm1pjftE91uCt7fCI7dWeHDEW3t723l6rslqxWZnasR+SYhFbzhnfxJ2jyeq9
lcGXWZcmW0zWKxHLaI7794eJx5fpfEKabT8t8l5isddo3l9S4VjrwrRUwzSJt3tav3pdOL6Y6dXD
j8HFWm+/KsU4NRXPvtWazHquWVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAa+fXYNP9u8b+kdZBsDkZOO135cWOZn4y5Wu4xqctbe9y19Kp4njt6vi+PDm8DFMWybbzPlV
5PiGtz67UxbNbeKTtWIjaIXYpnwuaftT5tXJT3vmi1pMsrU5qIrG1V1a+5DCa7b9GFbRr5J6Wnbt
Cu+Wmk0m8956z8ZWZNorbfzcbX5rZslazPux3hUt41NTntktObJ13+zX1bek01r4/HzVm0bxPXy/
+bNfDgjVa2uOY92kdfg6ufJOKvLXtttVVSqbcta2vM7zXtHpLQy5ZtMd+vWd+7Zy3mdJHXra3f0c
vUarw7zFY5rT2hH1Lavnrgx81p3U49Pk4nE5L35MO/StfNRXR5tXnrS8W67WvfyiPSPi7uLHFK1p
jrtSsbR5Lc4RzsXBaYreP4l45esRD2HD9fnw6evvWvO3Tfr0aGk0U55ra0TFInv6uzgrXFXlx0i0
77RPlC83Yj+JW7oddqr6vHzTTw9/f6dod+L1t9m0T8pcbFSmPHER3892W0zPuz+jSbVvidkcqmfP
Sel7bekrI4n4dZnPWIrHeYnZee2Wpy8dEaml4npNZblw5qzb8M9JbYgAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAABEzFYmZnaI7yCXL1XGa0jJXT0571nbee27DiXEprp8nhbxG20W8
5cbD0ikfnKO+urTPvjoZdXqctdsmTaPSvRpWmsdZ6yztfaGplvv3lWW1tyRlz1x0vkn7Vo5atTNe
Y0+1o79V2KsZsvX7Ne5mwxnyTNvsx2iGneM/rCdRSuOsTasTt5kRFtpjqmOH4t4nk7estiMNa97R
Hwhna0iuKTEdmGWa4672nZtRele1N59Zlq6vLOSsYorEc07qcW65euzRvtXvPZy52naZ7ujr6fXV
rWdukREK8+njHgmZmPc67bq6ivVWhxxgxZLztNrT1mZ/SP4VZs0zaOvfp84WUtNsXLvtv3699+rU
z7+Jtt5qURqMnPpctaR1rMSw4ZoK57eNk6xHaJRh97Ltt7lo5Z+L1HAPZvVauZ2nFTSzMTzeJEz8
to6xPfvsZntPZ9rXxabmxzefdrv0j1dXh/BcmstW1qxTHHasR3+b0GPhGl+kWmd64dNEVjf73T7X
y8vy+Ddx6O3iRakxTH5RXrMw1/lX+3Itw2MFIraN48qRHdZi0cUjmmPen9noox1iO0fNzdXEYrTt
stcmd9aX0bJ+HePmiKTitO8TMLZ1cVjrMfqpz6ys4pjfrPRWZ9rXXptUit6zO+23VyaRHEc05L1/
w9J9ys/en1ljqdVbwYw452tlnl3jyjzbmmiMeKtYjpEbLeTXPUU8ee/+qjJpsV5rbkrFqzE1tEbT
DpYNbW21Mnu29fKWna0KbqTdjXXjld0cvQ63ltGHNPSfs2n+HUbS9c2s2UASqAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAOVxPWe99HpP8ArmP4b+r1EabT3yT3iOkesvMVtN7za07zad5l
XV5GmM9vVfEstvDx0jtaVVMlq+UJ18b5cMRvPeSuK87bUt+i2Z3PtG7zXpjkzXt6R+TXyTMzvM7t
ydHqZ+zhv1+Cv/ZuqvPTHMfOYaTMil1a1K2vHSLTELq2v+KWzThGo84rH5rq8JzedqR+ZeI7WnOS
34pYTafWXR/2Pln/AMyrKOCWnvmiPyR6O1y9585lhWJvl557Q6eo4T4dYiMvW3b3UanhldHpJtGX
e09unmjsT7eb1l4trI2t0hsZfrdNO0bzy+nzU20/+NmkzO9esz+TZxWis9dttvPv+Tn21jjaW8zn
26bTG3mp1M/Wzv3t0jyWXiKZJmsTERaZhXXDbNl8WaztWenxZLstPp5pau8frDtVrNMM5cfTfpMf
3aunxxbes9d/R09Dp8ebJi09ptFr3jtt2WyrW9wy1Jx132mK+Xq9PotT0iIU19ntLtExa3T47T+q
6nBaYvsZstZ+cT/LeMnUi0TXffo1s2m8Ws2/OIMWk5Jib5L328rS2t94Sh5TV4ppklpW6PT6rh+P
NbebTHyas8E081mZy5P2W6OFhjxNTE/hr/LoRO0Kvo9dPqctKzMxEx1la5t3tdnjnMs4noievcrO
yZjeFF1OSnNV0OG62cn1GWffj7Mz5w05joovzY7xes7TE7w0xrjPeex6Ua+j1UarBFu1o6Wj0lsN
3JfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrU5o0+nvlt92P3BxuM6nxNRGCs+7Tv8
2hToxm1r3m9utrTvMsonqyt7XTmcja0u3O6FMfi5t/u0/lzdJM81p9O3zdvHTwsUR5+bfPqOfX1h
dqV+3O7bs1+T31oqmI3TEM4rvCdkDGIIhlFd2daboS0NXG2bD6bufxXU1vlmu/u4us/N0+L1tTSx
kr9qk7w89j1FNZMV3jxLzvaJ8mer+LSOZqK2xZotbvljfr/89U453rXt9lse081xZtNjx7TGKu0t
DHlrevSevaN5Y6+tJ8c7VRNMt63n3ub+6/R54rERMztDYy4a5omclYmfxKcenrjtHLvtPrCnVmdb
eFe3JXmjy6eS/DrMuLVYsta9Mdt++6qLxO+0dEc8UmInr18iUfReHcXrqccb9Z27Q61Lb13eJ9nc
1Z35rTvE9avY4bTkpG8xEfB05vYxqybc07R281naGMREdoT5JQqy9mply7Q3bV3iXG1eXw7TWSka
c258t7+tpT5/BjT7MfHqndz12Z+M4lMMKyziUJJiN1WSu9fku23RaOgKNJqbaTU1t9yelo+D0cTE
xEx1iXmM1Nt3W4PqvFweDaffx9vjDbGvxz+TP66QDRiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAOJxzU73rp6z296zsZMkYsdr2naKxvLyObNOfNfJbvad1dXkaeOdpvsc2yuZVzfbfqybutwu
s5s8R92J3dvJb3tnO4HSMegtmt3nfZvYp8SZl0z45NfSK7onH1bNcfRFqnUKJr0Y7dVtq7prjEsK
0XVpEM6028mW20IHK41aPo3J6zs4ODhdcvPnvExFevNXpMOrxi/PlrTee7PLX6Pwa09uaNlKtHg9
dM3z5d7ReOu02nu0JzZMfblrv5R5uvrcdImZ26T1mYhxs1Os7RH93PZ7axuafNfLitvbaYU3yZYt
PXs9NwHhui1HBa5LVicsb81onrEuVqNNSuS8Y67dZ6xPZa59Il9uX41vEitImZme3q2Kxbxora0T
Md/ROSa4Ztkj7c9OafL5LuGYubmyX3iu/TfbdSfVnpvZLT/XZK233+Mbbva1xRXyiPk8pwbH4N6T
adq5a71n0tD1WDL4tPe6Xr0tDpz8YVnJHWEXYxbqlBedoef4tW0XraO09HdyztSZcbUz43C+ee9b
SVMaeOfqq7+jGckQ1Yz7+7v2RN/WXPXZPjci2+2yyJaVMuy+uSJlA2d+pNoVRbeDcSxyTE+TDDlt
pdRXLTynrHrDOyiyZeVFnY9TjvXJjres71tG8MnJ4Nqt4tp7T1jrV1nRL1x2cvABKAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHJ49qfD09cNZ97JPX5PPw2uI6j6Vrsl/ux7tfk1mWr7dOM8iLdm
vfebREefRsWldw7SxqNbWbR7lPesrn3Vteo7dYjDpMGCvfbeXQ0uLlxRLRxROfUc34p6fCHYrXlr
EejqrjY8uzCYW7MZjdVKqK9VlaxCYrsnYExBMRMJRPZA8/xPHtmpP9W2xx76vhWOInvt/C7ike7N
vwzE9kcapGfhlevTaFbFo8RqJ5vy8/RoW09ek0msxHfp3dzNoLzp4zUmZpMbT8HJyYJi20X2n0lh
ZY1li/RaidBF4w2mK3jrHaFGp1lN+tptPp5IjBkid5mIp16TKu0abBPv33vPlM7z+iPdFNcWXU5I
tkrNce/b1W5db1nTaf3ax9q0fxDW1ebNk2phty1mOu09VOm8W19orEz23j1TwfSeERFuEYMddptW
d43dvBn21eKJ75KbW+cf/JcTgMxXTb3nbljz+TpcPmc2uyZO1KRtVtGVdi0bx07qJnllsRO6rNTe
N4XVamsy8mnvPwc3R2jPwe8TPbdlxXNOPSZfhWWpwO85OFzv57qrODkzeHntSe8Sn6Rv0a3EZ218
8nXekfr1a0ZLVnqx19dWb6demXybOO7lYMvNMdW9S/VVLo0us7tPHdtUtEwJiZU3jq2Jhham8CVG
PNODNTJXvWd3qcWSubFXJWd4tG8PK3pPd1OB6veLaa89Y61/u2xfxh5c/rsgNHOAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAANLimq+i6O0xPv392rdeZ4rq/pOqnlnelOkIt5F8Z7Wj27I2I6sb25YY
V1ImY3dbQ08LRc23vZp2j5OJG+XJWle9p2h6HHtbJXFT7OOIpX+7TxT31j5rycdTh+Dpz+XaG/sw
w18PHWseULN2trBE9UcrJKBhFU7JAQi0dEomegNDUYovM7x3jb5tO1ZvpbaTLtzRExWfWPJ08kbT
Ex5NXWYYyV5omYtHWJieyeDzuizfRs19Jn6TM7Ru1uMcJxZqTkw+5f4ebqa7SV1MR4tdrx2vEfy1
axqsNOTLjnLXytVXi3Xj8+nmsxTLM16d5npPyUzpekTtSK+U7vS6vQ/SYmK1vWPS1HOn2dvvvvE/
tDO5XlcO+LbfHSd/W3o6/BdDOXPTnj3Kz38rS6Wm4FNrRyRzTH3p6RH/AKvR8L4dXSzE3jmtHn5I
mbfqLV+m4dbLSsZInHjr3iI6zLpYaxS01rHuxHRHiT9mv6s67Vj1aqL6326MrWiYa+/Q54BxPaGe
XRZpj8MquB4+Xg8zPnB7SX30to379GxpK1xcHiKz5IS8xr8PLPixH2bftLTy05o6dHYyVjLhy0t1
izjZa3pMVv3iO/qz1G2L+NbSajbNyW7xLsY8kTDz+fJXFqKZN4iZnafi6WHL0iYlStI7OO+7axW2
crFl7dW9jvE9ULN+J3ZbdFGOy+AYWpEqN7afNXLj+1Wd23KrJVMvCzseh0+auow1yU7WhY4fCdV4
OadPefcvPuz6S7jol649Tl4AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV581NPhtkvO0R+4NPi2
r8DB4dJ9+/7Q83Po2NTqLanNbLfvPaPSFDHV66sZ5ET0hRknyW2lTtMyouz0c8usx2n7s7vScKwx
zc1vu/y85p+maJh6Th+SOWeveXR4/wDLm8v+nX5mUWa9bbrInolmu5jdTNkxYFk2Isr3TuCzeGMz
+THdEyDDJO9Ja823rt2XWnya946pGvktDXta0ztWu/ybvLE9dkcoOf4GbJPWK1j49VmLh9JtE33v
Mevb9G7WsW8l1ccREISophiJ2jpDYpijbaOjOuOJ8ujOdqxsgVcsUjaETYvbaFFrgu5lVsm0yUtu
ryg43H5m+GIj1XcJzePoL4pnrWGtxmfchr8JvfHS1622if3QljzTTLes+qrNjrkiYtCzPMxnm095
YZJ6boS5teB49Tqscza97VtvWvlv8V/FOF34RrIxTM2xXjelp/eHoeA6XnzReY3ivX/0dfivDcfE
9HbDbaLx1pb0lOs+jO7K8Lis3cN+0NKcd9PmthzV5clJ2mF9J9GHHVL108dm1SznYr/Ft0tuhLb8
mNohFbMhLWy0mJ3rPXvDvcO1karBG8/WV6Wj+7kWrvDDBlvpdRGSnbzj1hpjX4z8mOx6UYYstc2O
uSk71tG7Ns5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeXneJ62dVl5KT9VTt8Z9W9xbWclPo+O
fft9qfSHEU1pv48ftYST23ZTDC/p0YtlVuvVjMbM5+LCZjYGWGdrTPxiHY4ffaf3cjTxz1v6xMS6
Olty2iXVj/Dk8n+ndrkhnGRo1v8AFdW3RCrZ5uiYsqrboncSu508yjmZRYQt50TfowYTbYGVrKrT
uTZjvukQnYhMIGVY2ZxPVWyrHVCWzXpVXkt3TE7Va+W4K7X3jv1auTNy3jdba0RZpamfroQN7Hk3
6wr1GTaN2OOJiu6Mu98NvgDi8Wy74d/yZ8PiPAiO2zU4nb6qIn1bugjfFE/ASp1ke9u15mbbRDZ1
Mb823kx0Ontn1OOkedoJCvT8I03gaKsz9q/WW+isRWsVjtHRKyrhe0XCfpWL6Vgr9fjjrEfeh5fF
feH0V5Dj3DPoOo+k4a/U5J6xH3ZZ7z3228evytOk7NvFbo0cdols47bSybt7HbddHVqUs2aW3Qnq
xVeu8LILR3SlZw3V/R8nhXn6u0/pLuPMXjeHT4Zruf6jLPvR9mZ8/g1xrvpz+TH7HUAaMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAABRq9VXSYJyW79qx6yvmdo3l5viGs+maqYrO+OnSvx+KLeLZz2te1rZL2v
ed7WneZYWnZl5K72YV1xEyxmeqJljzIEWlVkszvbZp5soN3h2SJz3pP3odCnuWmPRxuERfJrZmtZ
mtY96fR28kbX3dXj/wAuTyf6bmK+9YX1s0cNtm3Sd4LFY2K23W1s16StiUJW7bp22RW3RluBuruz
mWEgrmCGWyNkoExKE1QlPmsqRDKeyBjaejWy2W3ttDUyz1QKslvehVqKTNosyyTvELabXptIJpaP
B39Ia2mz+JGpr51jdZefDx2hzuHZObNq58poJaGtjxJ2+LoaKP8ADRPo5+T3skx5OhpOmC0fBNQ0
5yTbn+bt8A0u9raiY6RHLVwY62mI6zMvaaHBGn0mPHt1iN5+aYVsACBXqMFNTgviyxvW0bSsAeE1
mkvw7V2w5Ote9besJx2er4rw2nEdNNekZa9aW9JeQjnxZLYskTW9Z2mJY7zz26fHrrdpbZsY7NGt
mxjvso1b9NmUwpx33XRO4K7VUTE1nmrvEx1bVo2VWiJE/XY4frY1WPlt0y17x6/FuPM0m+HJGTHO
1qu9pNVXVYt46Xj7VfRtnXXL5MfzexsALsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHM4jxOMFJphmJv529Dq
ZLfjDjPEIx450+K3v2+1MeUOHSOWFc3nJkmZnf4yujpVlqunOeFpV2nctLCZUXRM7MJtsWlRkv3Q
ky5NmpWt9RnrixVm17TtEQnJabXisRMzPSIew9n+CRoccajURvqLx5/chfOest642OGcIpoOG2w7
ROW9d72+LQvXevyejcPUU5M+SvpLeOataraw2a0dLbLqTtK1G3Es4lVWWUSoldFtmcXUbpidgXzK
GEW3TuCUSncnsDFMMLSms9EC6J6FpVzbZE5ALy0809ZbFr9GtfrEoFMzuuwz0Ueey3HbaBLDXe7i
tMOfwWnP9I+NZbuttvhs1uBRtXPb4SDm3iIvf57N7Dbl0VrS5+XrltEd+Z1Jx7cNms9N4TURRw3T
+PrcO3WszEvZOD7P6aYiMlvu16S7y1QAIAABxOPcLnUY/pWCv1tI96I+9DtgmXl68Biy7/NtUu3+
O8HnFa2s0tfd75KR5fFyMWTdhrPHVnX9R0cd21S3Rzsdm1iuqs256wrmGcT0RYSx5d047X02SMmO
esd49YRE9WcdSXhZ2O1p89NRji9J+cei1xMc3wXi+KZj1j1dTTaqmor06WjvWW+ddcu8XK8BZmAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAMMmWmKu952UZ9XFZmuP3revlDTtzWnmvO8q3XGmfHb9ZanV3yxtWeWn7y4es
vPNtDqZJ6Ts5mppvdl/XXRMyfGvSNlu/RVvtOzLfoipLT1VTKbSpvfogRkvtDVyZOhkyvQcA4Dzz
XV6yvTvTHMfvK+c9U3rkW+zvA/D21urr789cdZ8vi9KDb45rejl8Rry6iJ/FV1HP4vXbBTJEfYt1
+UpiHM295bXsqrO9l8QkZ0lZEqqLeyBZHZLGvZkhIndADKJ3TMoqWQMZ6pjsxll2jsCLSrmU2lFY
36gieyu0LJk3jbsga0wdqzK20QpyztQGprL/AFMrOE05NLkt6qdVWZxNrSe5o9vWBLiUjnzXn0vL
q555dHt8HOwV928/1z/LpzXxbYccRvzTB+jucOwxh0dI22mY3ltIrHLWIjyjZKyoAAAAACJiJjaY
3iXleM8InR5J1GniZw2n3oj7s/8Ao9Wi9a3rNbRE1mNpifNFnVs65XhcWTdt47bnFuF24dm8TFEz
p7T0/pn0a+HJux1OOrOux08d1ndqY7tillVkzExLOk7yd4YxGwluViJhE45raL0na0dtlWO0+bZr
1TKi+2zptZGTamT3b/tLacvJjiY3XaTWdYxZZ6/dtPm1zrv1z78fPcbwC7EAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhkyV
xUm152iAZWtFazNp2iGhm1Vss8uP3aevnKrNntqLdelI7VRHRnrX/HRjx/tZREVjZXeybW6KbWZt
pCZ6S08tN7Nmbb7zCrJtyoS5145bSx5mWafelr3tsKmS/o08uXyhlly7RPV2+AcBnPNdZrK+53pS
fP4ytnPVda4y4BwHxOXV6uvu96Unz+MvVxG0bQRG0bR2G0nHLb2gCUDX12LxtFmpHeazt82wT1gH
mMN4tWs+rcr2aEV8DU5sM/cvO3yb+O0csLUTSdrLphRE8tlkZI7Atr2ZMazDJVKTYSCawi7Ksq7z
1QERvLK3ZGPrKbyCrbdnMcsbeaa18/RhvvM7oGEwTG0JmYYTIML22a2e28xELM19oURPNO4lOem+
n3ZY5+prVnMc2GYU4/L4A0a15cNf6rz/AC6fC6+NxCPOuOu/5tHJTbHj+F5/l1+BYumXJMd9o3/d
MRXYASgAAAAAAABhlxUz4rY8lYtS0bTEvH8R4ffhmo6bzhtPu29Pg9mq1Gnx6rDbFmrzVsizq2df
zXkMWTeIbNL7tbXaHLwzUctvexWn3bmPL8WFnHVL326VZ91MfFVjvvVlz79kLrcf2m7j7bNHH3bl
J2SirLQoy4t1++7G0dBC/RanxI8PJPv18/WG241+alovSdrV6w6mDNGfFF4/OPSW2b1zeTPL1aAs
zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAVZ9RXBTe3WZ7R6iZOpzZq4ac1p+UermZMl89+a/byj0Ra9815ted59PQ32hlrXXRjH
DpCLX6ML5NlNsm/ZRqstfdXzbsZt06sLZNvNB1Za8RDWyZdo7q8udq5Mu/mIMt4md2lmy7JzZuWJ
dHgfBL8RvGo1MTXTxPSPx/8AstJ1XWpIs4BwSdbeNVqq/URPu0n73/s9hEREbRG0QUpWlYrWIisR
tER5JbSccur2gCUAAAAPM8Sry8Uyz67fwuxbzVPGsE49XGbvF42V4M0TEL33ERnktsxpk3sumK2j
admFdPFZ33VS2Mdui2J3UU6LYlFSsN2O5NkCyJ6K7T1TEsbAsxdpReerKkTFGMxvYEz0rsqtbbpC
b2VT1QEzuwtbaGUxspuJU3neWdKoiu8rq12gCI92YatLcublnzbEz1aOptyZqTuDHLfxN6R0+t5X
qdJhjBp6UiPLeXl9NSMnEKxHa1+bb8nrlvxUAAAAAAAAAAABTqtNj1eC2LLXeto/R43VabJw/VTh
ydY+7b1h7ho8V4dXiGlmvbJXrS3xRZ1fGv5rzeHN02bEW3cys3xZJx5ImtqztMS3MeTeGFjqlb2O
8btql3NpbZtYsnSBLeiWfdTjtutid+ghherHS5p0+f3vsX6T8Fkw181d4lMvEWdnHaGnw/UeNh5L
T7+PpPxbjdyWcvAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAo1Oprgr63ntAmTqdRqK4K9etp7Q5d7Wy2m953lNrWyWm953mVd77R0
Za1104xxlN9lV8qnJl2a9s3xUXX2ybsJyRDWtl3YWydEC+2VRkzeW6q+T4tbJm+KRdfK1cmWZnlr
vNp7RC/R6HU8SycmCk7ed57Q9ZwvgOn4fEXtHi5/O9o7fJaZ6z1uRyOEezVstq6jiEbV71xevzer
rWtKxWsRFY6REeSRrJxz22gCUAAAAAANbX6aNVpL0npMRvWfSXlKamsRMVvXm+EvZXjmpaPWHzfL
oNRjzXicfWJ8phfPxFejx72x7xMzK+sXiNoiXlq+Pi6fWV/VfTNqfLJl/WTg9Pji8R70LqvMV1Gq
j/zcv6yz+lanzzZP1lWpelTET6S81Gp1P/Gyf90s412rjtnyfqql6asREdWM9+jz9eJ6yP8Az7uh
odZqMt458tpB1JvEViI3/RhzRt13/R1MNaziiZiJn5K9ZNceKZiIiQcu/WekT+iYrWI3lzdTrs+8
8uW0fJzcur1Np/zsn6g79phVaIeetqNR/wAXJ/3SwnUaj/i5P+6UD0ldonum161h5mNRqP8Ai5P1
lNtRqJjacuT9Qd22WN5aGeZyZd/KHJy59RHbLf8AVq31Gp/4uT9ZEvS8Lr/vSs2npzRtL1z53wK+
oza/HW2XJNd99pmX0Rb8VAAAAAAAAAAAAAAcHj/C5yV+l4I9+v24jzj1cLFk8nu5jeNpeW41wmdL
knU6ev1Vp96sfdn/ANFdTrXG+eq1q5F2LLtbZoY8m8d11bbSydErsYsm+zZrO/zcnBm226uhiyRK
EtrvCrJDOJTeu8A1MWX6Lqq5N/dnpb5O5ExMbx2cPNTeJb/DM/iYPDtPvY+nzhri/jDy5/W6AuwA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAa2p1UYo5adbz+xbxMlvqJ1OqjDHLXree0ejmzNrWm953tPmTPWbWneZ7yoy5YhjrXXTjH8s75N
mtkyxt0VZM2/m175N1V03yTKubMLXVXybeYLLX2VXy7eam+b0bOg4VquJW+rry4/O9uyZOq3UjVm
9r25axMzPaIdvhns1kzbZddM0p5Y47z8/R2+HcF03Doi1a8+Xzvbv+TotJnjDXkt+K8ODHp8cY8N
IpSO0RCwF2YAAAAAAAAACvUZYw6fJkntWN3k8dfHz2vLucdz8mkjFE9bz1+UOZosX1UzPm0nqI/W
MYo9FlcPNklfFGeH/NshLGun+Cz6PtHZtVZWlRLS+jxPkRpIn7rdoupHTdA5s6SI+7H6Mfo+32Y2
+To3neSIiZ7A0IjPXpXLePlMotGW3272t85datKzHZjbTVnsDj+FG/2Y/RlGP4R+jo20u7H6N1Ql
o+H8I/REY957R+jpfReiK6eOYHLtj2tttH6KrY/6Y/R2c+kjeJiFVtLG24hxpw7/AHY/RRkw9O37
O99Hrt1YX0tfOBLjcGp4XF8c+u8fs9c4dcVcGemSI61nd3IneN1orQAAAAAAAAAAAAABFqxes1tE
TE9JiUgPKcX4RbRXnNgiZwWnrH4XPi28PdXpW9JraImsxtMS8pxXhF9DecuGJtgmf+1TWW2N/la1
L7N7T5e3Vy6W3hsYcvLbqzbO9jvvCzvDR0+XeO7crO6FmGSvRThy/RtVXJ92elvk2rRvDUzU7pl4
izsd2J3jeBpcNz+Lg5LT7+Pp+Xk3W7js5eAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADs0NTrN96Yp6edkW8Wzm6+LNTq4pvTHO9vOfRoWtt
1mes95YWvs1s2fZldddOczLPLn2ju0MmebT3YZc2/mpm3qqllN1drsbZIhr3yzvtHf4AsvlYYseb
V5Yx4KTe0+UQ6nDvZ3UazbJqd8OKeu33peq0eh0+hxcmnxxWPOfOfm0mP+steT/ji8N9mKY9suum
L37+HHaPm9DSlaVitKxWsdohI0Y22gAgAAAAAAAAAABXnyRhw3yT92Nwef4xm8bVzET0rPJH5d12
CvLhho3rN9RWs9Z23n5y6O21YhrVYbdGOCfrrLPJRpv863zVS6FS09SvZj3lVZZRdPSqmnSWdrIE
ebOkK4ldTsgW1WKqd1oMZhEVZyRAImOjGI6rJ7IiATNd46qL02bHkiaxaoNGY2n4ImPgtyV2n0Vo
Gvlx7x2beiyTk08RPevSVUxux00+Fn2n7N+n5rRFb4AAAAAAAAAAAAAAACLVres1tETWekxKQHlu
L8InR2nPp43wz3j8P/s5dLveWrFqzW0bxPeJeV4xwmdFec+CJnDM9Y/CrY1xv8qvTZ+WYdbDk5oh
5zHk283U0eo3jaZZ2N5XYjrCnLSJhOK+8d1kxvCqzSwZvousrb7k9LfJ3nB1OLeJdLhufx9LEWn3
6e7LXN9Ofy5/W4AuxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAETaKxMzO0Qi9646Ta07RDmZ9VbPbaOlI7Qi3i+c3TPUaqcu9adKfy0722ZXvFa9
XO1OrjrESxt66ZJmcjPUanlidmhkzTZVfLN5VWvsC2b7R3U3yqrZZtO1esz2h2+F+zWTUcuXXTNM
feKR3n5+iZLVbqRzNJo9TxHLyaekz62ntD1fDOA6fQbZL7Zc/wCKY6R8odLBgxabFGPDSKUjyiFj
SZkYa3aALKAAAAAAAAAAAAAADQ4pl2pTFH3p3n5Q33E12Tn1eSfKscsLZ+orS00eJqbW+Lfnu1tF
XaJnZsz3WpCfsyp00fWSvmPdVYOmSUDd8kR3InoQosy7JmUX7MdwZ17ro7KKT1XRPRAsrO0rYndr
79V1ZBaQiJ6JgCSIJASwrO07MpV2nqBlrv1a1o2bf2qtfLXaQUTO0sb05o3jv3ZXhjS20xEphW5h
yeJjjf7UdJWNKLziyRePsz0lux1SgAQAAAAAAAAAAAAAADG9K5KTS8Rato2mJZAPIcU4ZbQZuekT
OC3afT4NXFkmlntc2GmoxWx5K71tG0vHa/RX0GpmlutJ61t6wrY2xr8dXS5uesN+tt4ef0eaa223
2dnHk3juyreM81OaFGiy/RtZET9jJ7s/2bdutd2jqKeic3iNTsd8a2h1H0jTVtP2o6W+bZbOO+gA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABje9cdJt
adohGTLXFTmvO0fy52bJfU23t0pHaqLeL5xdK9Rnvqb+cUjtCi94xxvK3JetKuHrdZvaa1ljb10y
cnIs1Wt3naJc++TmVWvMz1YWybfMGdsm3eWek0mo4jm8PT0mfW3lDf4V7P5tdMZdRviwfvZ6/TaX
DpMMYsFIpWPTzXmf+steT8jn8L4Dp+HxF77Zc/4pjpHydYGjC3oAAAAAAAAAAAAAAAAADG9opS1p
7RG7zszN6WtPe0zLua+3Joss/wBOzhzG2OsL5+IrY09dsSyYRijbHEMvOChb7KjF0yS2LQ169Mso
S24noyrPVXWejNVKbTuw3T3REdQWU6LYlVvsyiUDPfqupPRr79VuOQX1lZEqoZxIMksd0gT2VT0l
bPZVbuCaW8i8bwr32WxbcGnkjaZa9p2ndv5qbw5+aNugLItF6TEtvTX5sMb969HMpfazc0d9stqe
vVZDdAQAAAAAAAAAAAAAAAADV1+iprtPOO/2u9bektoB4TJTJpNRbHkja1Z6uto8viVht+0HDvpG
H6Tjj6zHHvbecONw7Ltfkmeqmo6Ma69DXbbZTkr1mGWO3RneOaGbZRoM30fVzSelMnT83aef1FZ7
x3h1tBqfpGnjmn369LNc3sc3kzy9bQCzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAa+q1dNNXr7157VhGp1Xh70x+9f9ocy283m1p5rz3mVbrjXHjt91lz
5c9+fJ1nyjyhdM8lZlOOIiqrUXikd+kMreunnI5XEdX4dZiZcG+XmtNl/F83PeeWWHDOGanieSKY
q+5H2rz2hMzWd1Iqx1yajJXHhrNrW6REeb1nCPZumn2z62Ivl7xTyr/6uhwzhGn4Zj2xxzZJ+1kn
vLoNJnjHW7TbbsAszAAAAAAAAAAAAAAAAAAAAaPFrbaSK/itEOXt0rDf4xb/ACa/GZacRvaF58Q2
IjasQnzPIhCU92tMbZGzHmotG10C6nZkwpPRmipIllEbMIZIE7solgmJBnCyk9VMM6z1BtVllEqK
z0WRILYlluriWcSDJVbusV27gwInaSWM9ECyZ3hqamnSWxFmOSOaqRx725bNnSZNs9J+OynVY+WZ
YYr7TE+nVaIr0Ais81Yn1hKAAAAAAAAAAAAAAAAAABExvG09peU4nov9n66L0j6q/WPg9Y1OJaON
ZpL0+9HWs/EWzeVz9PbmrEtnyc3h9reHy26TWdnSr2YX6657ijLXpLX0+onSamL/AHJ6W+Tbv2aW
ekTv16JzeI1Ox6KJiYiY7Slz+E6jxdN4dp3vj6fl5Og2clnKACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeQRMxEbzO0Q08uqtkma4ulfO3r8lefUePMxWf
cjy9WvlzVxV6T1Z61/x0Y8f7Wc7Ur1lqVy+LqOWJ2hp6rXddon5rOF1tfmz5OkT0qzb8dWbxjp1c
biuuilJ5Z6r+IcQrixzEy8zl1E6rNt1tMztFY81sztU1eRucN4ffi2p5esRM72n0h7rS6XFo8FcO
CkVpX082nwXh3+z9FWLxHi36328vg6TZyW9ABAAAAAAAAAAAAAAAAAAAAAADj8Unm1tK/hqppHvw
y1k8/EMk+m0GOPeafiFpCZYwolnXspvHvLa9mF46gmnZmwozRUiUCBKYYsoBLOFbKAX0llEqqyzi
QXRLOJVRLOOwLIljZMEgrlhKyYYTAK5nZPN0RZjugUanHzVlz6xtLq361c+9eXItPpXX0dubTU+E
bL2lw2++O1fSW6m/VYAISAAAAAAAAAAAAAAAAAp1GbwcfTreelYEydcuMcRrM/L9nnlsV6wqpi2r
tv133mfWVkRyRtEdGFva7MzkYZNoamWN4bV4mYa9qztKIujhVppxGI8r1mJegeZpknBqKZY+7L0t
LRekWrO8TG8Ns/HJ5ZypAWZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAADS12fp4VJ6z9qVuq1HgUiI+3bpDl589cOKZmevqprXPTbx477rDJlrhr1nq4+s182tMRP
RqaziXiZJrWekNG17ZbxWJ336M5LXRbI3dLTJrs07RMY6fan1dHLrowY+X7MVjt6N3R6Kul0EbWm
s7bz8Z+LnabQX43r7Y53php/mXj+Dnv0f1JO1x/8ZxbUzj02O15mfLtD13AvZqnDds+pmMmo26el
XX0Wh0/D8EYtNjilY7+s/NstpOOTW7QBKgAAAAAAAAAAAAAAAAAAAAAADG88tLW9I3BwJtz6nNf1
vK/DHVqYJ3pzT5y3MPZeojOWMQylEKpTVjZnDCwkqzYQyRRICATCITAJZQxhMAshnEq4ZQC2srKq
qrIBZCWNZZgwswmFloVyCu0dFcx1WyrtCBhv5NTPHXds2U5o3hIz4ffbPt+KHUcTSW5c9Jme0u2v
VYAKpAAAAAAAAAAAAAAAAYZctcVOa35R6tLrltN795/YvknNqrfhpPLH92V5isd9mWq6fHjk6rn0
ZxG8KK5Jm/wbVZiYZtqrmkqL023bkxvCiY3lJHNyRG81mHS4Rn5sNsNp64+3yaWaNrzOzHBl+i6q
mT7s9J+S+ay8mex6EIneN47SNXKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAImYiJme0JafEs3h6fkidrZOn5eaLeJk7eOdm1Hi2vmtPTry/CHmOJcUvmvOPF1n09Pm
6HF9ZGm01qxO3R5vSY7XwzmzTy47zzTEd7en5Mfvt2/PURWdo3tvPrPlKymbktFqTtMTvHzbOLDG
f63JXbFX7FdnoODcDprZpq9TjiMMTvSn4vj8l5fxnrk91saPSa7i2hpOfbTVt5x1m0fLydzR6PDo
dPGHBXasd585n1lsRERG0dIF5OOe6tAEqgAAAAAAAAAAAAAAAAAAAAAAADX11+TRZrf0y2Gjxe22
gtH4piP3TPpXKwxtjhuYo9xq442iIblI2pC1RET2ILd9kxCqRjZmwlCSEohIJAQAAJZISDKGUd2M
MoBnVbVVCyAWVWeSuqyOwIlXZZKue4MJV2WWYT2QKbKL9YlfdRdIo35b7/Hd3KTzUrPrDh27uxpb
c2mpPwX/ABX9XAKpAAAAAAAAAAAAAACekTIp1eTwtJmv+GkyJn1oafeazbfpMzLR4jq/o8b823zX
6XNF8ERCvTcNpxLV5LauvPhx9Irv3lhztdtv8TtaWLicXrt03jzjzb2k1nid56ty3s/w+a7Uwzjn
1raejlarhmbhl/FpbxMO/fzj5p/ixSeXOvTtRfeI280ZI26tfDm3pWe63LaZx7qtGvniJ6tPLvOK
fOa9WzbJvTbza02jl3n5SSljscK1MajSxWZ96nSW88xw/VfQ9XMT9nfa3yemid43jtLeXsce88qQ
EqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADia3UTm1l4j7OP3Y/u
7Vp2rM+kPJW1PhYcmS0+9MzKm/jbwz31weMzbV8UppazPL9q0/BF4rk1GLDSNqxPWPhCnHmnNrtT
qPKteWPm6U6OdHaZvO+SaRNvhv12Ub/q3FhtrNVj0uKOt56z6R5y9zix1w4qY6RtWsREOJ7L6OKa
S2rvX6zNM7T6Vh3mmZyOfya7eACzIAAAAAAAAAAAAAAAAAAAAAAAAAAczjVvqMVfW/8AZ03I41bf
Lp6/OVs/UVrY47NyOzUxd4bUJpEbb3Z7IiOrKIVSjZhMLJYyhKIgmGUQSDESIEbJEgQmCITEAmGU
IiGUAyhZVhDOoM4Wx2VQtqBKuyyWEgqlhKyyuyBVaGtkbNmvk7A15l1eH2300R6TMORPSXT4ZO+O
8fFefEX63gEAAAAAAAAAAAAAAAq1WPxdLlp+Kkx+y1Fvsz8gjhaDauGK8sx07y3OE3m1tT6RaP4c
vU6yMNKUx73zT0ilY3l2eF6a+m0kRl/zbzz3+Ez5M8z26fJruW6wzYq5sV8d43raNpZjRzPPaTmx
5b6bJ9rHO3zb2WJ8GWPEscY9bgzxH2t62n19GWW0eHOzHU5XbjXZ1x8WTnz2iZ7S2M1IjH2+LX0V
KTqs8zO9ot0j8nUthi1J3UaOFMTfLFo6xMbS9BwHWTqdHOO8+/hnln5eTjYMFo1WTH5VnePzXcIm
2k4zlpPSmXy/hfF5eMfJns69OA2cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAADG/2LfJ874rW845mubliY7bPoto5qzHrDz0+yePNF41OotaJ7RWNtpV1OtfHqZ715fhu
j8adNpcVfeyzE2/vLuanhOu1nEctIxTTFa/+ZPbZ3eHcF0vDbTfFE2yzG03t32+DokynXl9+leDB
TTYKYccbUpWIhYCzEAAAAAAAAAAAAAAAAAAAAAAAAAAAAcXjE/4zDH9M/wAu04XF5/3jj/0f3Wz9
RUYmzDWxS2I7FSyjuzY1ZKpRKEygEwiWUIkGIk2QJNhKQhMIhkCYZQxhlAMoZwwZwgWQshVCyATL
CWc9ldpBhZXLOVdpQK7NfJPRdaWvknoDVvPvOnwuel4+TlXn3nS4VPvXj4QtEV0wAAAAAAAAAAAA
AAAAAVV02CmTxK4qRf8AFFeq0AAAanEsfPpZmO9Ji0NDLfkwdOsulrumiyzHlVzJrz4Ovoy26vB8
cTBa9NffLtMY77Rv8Yegx5ImkKdJoY1HC81Y+3OSbVn0mGGkmbY45u6tnrrTOu2xGO0RxCd+nNVj
qKxTV1vH2pjaGtnyzXXYdo96ZmGXEMk15b7/AGZiVerWPTYckZcNbx5wzc7hGbnxXxzPWk7x8pdF
0S9jh1OXgAlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAcPjEf4/FP9H93ccXjMf4vDP9Mx+62fqKrx+S+GvibEFSsqyYwlVK
ZYsmIMoRKYJQIPIEiQ2ATCUQygCGUIhMAyhnDCGUIFkLIV1ZxIMpVWWSrsCuyqyyyq09ECq8tfJK
66jJ2Bp5J6upwn7dv9Lk5J951uE/av8AJaIrqAAAAAAAAAAAAAAAAAAAAAAq1Mc2myxPnWf4cmtu
XT9fR0tffk0WSe28bfq5Wbamm3326MtunwfK6PCv/AxPraZ/dz9PO97/AOqf5dHhdZrw7Dv3mOb9
XOxRFM+avpe38mvkPHf/AFWlrKba7Tzt99ZxKkfR7euyNXMTrtPHfa0z+zPiM/UR8Zj+Wbdu8HpN
M2bfzrV13M4dO2pyR61dNvj44/J/oAWZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADj8bj63BPzdhyeNx0wz8ZWz9RWri7Nmv
VrYu0NmqaRZHZlDGGSiwxZSgCEkCBCQSCQBMJRCYgEsoYx3Z17AlMIhlCBnDOGEM4AlhZZKq4KrK
7LLKrIFN2vdfZReAaObu6/CO9vk5OePR1uEd7fJeIrqAIAAAAAAAAAAAAAAAAAAAAGtxCk5NFliI
3mI32+XVyNTyZOHTee946PQKPoeDffw4777eW/yVs60xv+ZxOnr4Okx1t05KRv8Ao41Z5q3yed5m
XY1szXRZ5jvFJ/hxItP0aOSN9q7yrtr4f2tHFM5+KT16Yq/vK/iGSbXw4vO14UcPx5MGfNbPG18m
1oj4THRsTw7VanPXVYpi3gzMcnrvCnG11JOupwuN8+a3pEQ6jT4divjxWnJExa09pbjbM5HHu90A
JUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAHM41H1GOf6nTc/jEf4Ws+lls/UX45uGekNujTwdm5RNIthKIZKLDFlsiQIShIC
EgCUJ7AmGTGO7IDzZQhMSDJMMYZQgZwzhhDOATuqssmVdgVWVWWyqtCBTeVF19lF+wNLNG7q8I+9
8nLyupwnt+S8RXUAQAAAAAAAAAAAAAAAAAAAAAAItWL1mto3iY2lyrcLyUxzix2ia2nvPeK+jrCL
OrTVnxpanhuPPemSs8l6RtE7dJj0ldpNP9GwRSZ3neZmV4cR/Vs4AJQAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANHi1d9H
M+kt5ra+vPoskfDdOfqK4mn7Q3aNHBPZu0W0RdDOGFWcKLCJZeTGQQlCQSgASBsCYZQxhlAJTAmA
TsmAgGcM4YQyjsgRLC3VnaVcgwsrt3Z2V2QK7tbJ1bN5a9waeWO7p8Knt8nNyebpcK8vkvlFdQBA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK9RXmwZI+ErEWjesx6wQeZwejeo0cccuW8
elpblJaaRGxVnCuss4ZrMvJEgCAASISCQIBlCYYpieoM0wx8k7gzIRueYM4Z79FcSy3QEsLJmWFp
BjaVVpZWlXMoGNmvkXXlr3kGtknu6XCf7OXkl1OEdl8orqgIAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAHmskcmtzV/rls0U62OXiWX4zErcc9GmkRfWVkSqqziWayxCPIANwBIhIJSxS
CRG6dwZwlhEs4BluMdzfqgZxLLdXuy3AmVdpZTKuZBjaVVpWWV2QlhZRdfZRcGpl7urwfrzfJy8r
rcH61vPyWitdMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHA4nHLxKZ9awnH2ZcY
jbW459aq8fZpfiI2IZwrqzhmsz3Ebm4JN0AMhCQSIASndiAziWUSriWcAyRujc80DM3RCfIETLCW
UsZEsJYSslXZAwlTddPZTkBp5e7r8Gj6rJPxhx8k9Xa4PG2C8/FaK10QAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAcfjcbZMFvnDWx9m5x2PqcNvS+zSxT7sNPxH62YZQwqzhRZO6UCB
KUAJTux3SDIRuAncQAmJZRLBMSgZ7iIAZRKd2DICUSlAljLCYWMLIFVukNfI2bNbIDTyT7zu8Ijb
Sz/qcG/2nf4T/wCE/wD2WnxWt4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHL9oL
+Hw2cm28VvEuPptfgyVj6yIn0no7/FtJfW8NzYMe3PaPd39d3iMug1WktNc2C9dvPbeP1aZ9xF+v
T471tHu2iflK2HkqWmvaZj5Surqc9Ps5bx+alTHqYHm68S1Vf/NmfnC2vGNTXvyT84Ql6A3cSvHM
sfaxVn5Ssrxyv3sM/lKB1xza8bwT3pePyWV4tpZ+/MfOEjfGrXiGlt2zV/PotrqcN/s5aT/+wLRj
FontMSlAlKEgndO6IAZQljDIEgeQljLCzOVdkCu/SGrkbF56NPNeKxMzMRHxENe0+89DwuNtHHzl
5PJr8NcnLW3Pbf7r1nCZm2gpae8zMrz4i/W6AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAETETG0xukB4HVaeMHEtRi26RedvkyjBSfX9W77QYvC4xz7dMlYlrU7M929dWJLFc6aPK0q
7YLxPS0S22FlP6q38Zac0yR92s/KVc3tHfFf8tpbcsLRvB/dR/8ALLVnU0r9uL1+dZI1mnmdvGpv
6TOy6ym+Oto2tWJ+cJ/tW+KLK5KW+zes/KU7tG+h01p64qx8Y6NXNo6Y+uPJlp8rLf0rfG7MXtHa
0x8pZxqs9e2a8f8A7Oj7HaTHn0+f6RWM23LETfr6vRW4PoL99NT8ui7F4+vEdXXtnt+fVbXjGsr/
AOZE/OsPS29nuH27YrV+VpeV9pdPXhOtw49NG9Mld55+vXcTPd42I47qo7xSfyWV9oM8d8VJ/VxM
d8l46xWF9cV7en6o/qLfxp2I9ob+eCv/AHMo9op89P8A/wBORGmyT5R+qfo2X8P7n9Q/jTsx7RR5
6ef+4/8AuHftg/8A6cWcOSO9J/WEbWr3pY7Efzp2Lcfv5YK/9zWy8d1E/ZpSv5Oba1/+Hb9lc+LP
bFt87I7E/wAabWbiurvEx4nL/pjZzc2bJkn372t85ZXx55/BX85lucC0vPxnTxlnnjm32mOiZqUu
LJ2p4TwnVavNWaYbRTfre0bQ99pcH0bT0xb78vmtiIiNojaErMwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAHnfarF7umzRHaZrLjYrdIen9ocPi8JyTt1xzF4eUw23rCm3R4r6bMy
wt6kdTaWLdjswmNoZontsCm0K5XWjopnuDC0dGpqG5bs08/daKV672MjbSaif6oh6Z5f2LtvptRX
0tEvUN3Jfo8f7cYve0eX4zV7B5z20xc/C8eSPuZIRficfXlcPaG7ino08HWIbePpLF2NuiyOyrHK
3fZFSwuovHVfaVF4QK5YWTM9UT0EKry6Ps1Tn4zjn8NZn9nOtLseydObiWW34cf918fWfk+PYANn
KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq1WKM+ly4p+/WYeBxTNd6zG0xO0
vobw3FcP0bi2em20Tbmj5Srr418V9sa2Z7qKyzi07MXUylhaU7yjqhLCeiq3ddaFNxFYW7NLNG8t
zya+WO6Va9J7FW66mvwidnrXiPY3Ny8RyUn71Jj9Ht3RPjk19HK9pMHj8D1ER3rHN+jqqtTjjNps
uOe16zAifXzfTz7kNyndpYazS9qT0mszDdoxrsi6m8LazMq6zDOsq1ZEyrt1WWlXaUCqyq0rbKbi
Fdp6PReyFd8uqv8ACsfy83aXrPZHHto89/xX2/SP/dpj6y8vx6EBq5gAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAB5n2q03LfDqqx39y39npmlxbS/TOG5se29tuavzgWzeV4mtui2
O3RRSY2hdVhqO2MvI36iu9lUsrSrvDHn6spnmSiq5jooyV6tq1VV69RC32byTh43h8otMx+r6I+Z
aK/g8TwX7bXh9Mid4iW+fjl8n1ICWb57xLBOm4zqse20Tbmj8+qKdnS9q8PhcTw5tumSm0/OHMxz
0Za+uzx3sX1t0Zxurr1ZxvspWiZYWZbsbT0QK7KLrZVZJFaqt5vbezNOTg9J/FaZeJns93wCvLwb
T/GJn92uGHldIBowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADuAPA67F9H4l
qMW20VvO3yRWW97T4fC4rXJHSMtI/WGhVlue3b473K2KzMML4+62tujG9pnozXaOSOVFMnVbmq1t
trJRW5E7wwvUxTvCyY6CHOt7moxz6Wh9PxTzYaT61h8x1MbZK/OH0zTf+Fxf6I/htj45vL9WgLMn
mvbPFvocGWO9L7fq85p5maw9d7VYvE4JkmPu2if3eW0+PasdFNOnxfF1Y2hlykRsmY+LJ0MZjZXa
eq2eyi8oQTO0KLdZWzPRjWu6VaqtHR73g0bcI0sf0Q8Nkq93wqNuFaWP+XDTDDytwBowAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAef9q8HNpcGaI60vtPyl56k9Iew49j8ThGe
PwxFv0l4zH2U26fDfTYiyJljvsjf4sm6vJ1hrXjq2MkqLdZEVbgbMx0auGdmzNt6iHN1Ub5af6of
TdPG2nxx6Vj+HzaaTm1+nx/iyVj930ysbViPRrj45vL9SAuyc7j1efguqj+jd4/T33rD3HEcPj8O
1GP8WOY/Z4TTT7sKadHhbcsZnaCJ3TPZk6VdrKbTutmP0U2nqgrGOsr8deiuI2X09EqKM1dt3uuG
f/jdN/06/wAPE546S9rwud+Gaaf+XH8NMMPK2wGjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABrcRp4nDtRWPPHP8PCYusPoWSvNjtX1iYfPuWaXtX8MzCuvjfw32siu8ptXoxi
0wy5t4YulReqmazu2skbquURWFInddM7VYRGyL291KFnCcfj8e0le/Lbmn8n0N4b2Ur4nHLWmPsY
5e5a5+OXyXugBZmiY3iY9Xz7NjnTa3Ph/BeYj5PoTxftFg8Hjk2iOmWkW/Psrr418V5WrWd2faFc
V2jdnEMXWxntupmN7NiYU27iWML6dVMVnddjgVqMsdHr+CW5uE6f4Rt+7yuSsTDv+zWXn0WTHP3L
/tK+GHl+O0A1c4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Dn93W56/wDM
t/L3z59qp24jn+OS38lnpr4r7ZxHQ2TEstt3PXUrt27K57rr1VT0BjKnJPRbMqMs7QlV2fYvHvrd
VknyrEfu9m8f7FZI8fVU85iJewbT45NfQBKo817W4eulzxHaZrL0rje09ItwqbfhtBVs3leai8RD
KLw1sduesL606dWFdsZT1jdhNeq6K9DlhCVUU6s4jZnt1YzAhnM71dH2bycmszY/K1d/0c6OzY4R
fwuK4p8rTstn6z8k7HrwGzkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHz3
Vxvr80/8y38voTwGpj/F5/8AqT/JfjTx/WVeyY6FPspc9dZPVXaOq2WEwIUTVRmjo2rNfLHRI3vZ
DJycXtX8dZh7t879nsnhcbwz23tt+r6I2nxyb+gCVBzuPY/E4PqI9K7ui19fTxNBnp60n+Aj5/pJ
3jZu1aOnnltMNussdfXbm+l3ZM9URHREdZVXTuT1Nk7boQiOkJw28PU47/htEp5eivJPLMTCZ9Vv
x7mJ3iJ9UqNHk8XR4b+tIXuhxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD
weqjbWZ4/wCZP8vePCaz/wDIaiP+Zb+UX408f0r9lOxWOifJhXWjfyYWllPRXYQxnrCrJHRd3YZI
6A1NJecHEsN/S0T+76bE7xE+r5dk93LW3pL6ZpMni6PDf8VIn9m2fjm8s9rgFmQxvHNS0esbMiew
PnHLyai9fS0w2aNfUTtrs3+uf5bGPqy068fF227KtSsdFlKqNGMV6myyY6sbdIQI8tlOWOi6Jhhk
j3RD0vA8nicMx9etZmHRcT2Zyb6XNT8N9/2dt0T449T2AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAHhdfG3E9TH9cvdPEcXjk4zqI/q3L8aeP6xr2TsxpLOekMK6mFo6qpXSrm
OqBixvHSVmzC4OfqK7S9/wAByeLwbTW9K7fo8Fqo6Paeyl+fglI/Da0NcMPK7QC7AAB8313TiOf/
AKk/y2MHWrX4jG3E9R/1Lfyv0/aFNOrHxuU7LI7MMayGTVlHWUXhNe6Z6wIUsb9d1m20q7dkDpez
N9tRqKT5xEvRvKez9+Xis1/FSYerb5+OTyf6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAB43j9eXjN/jWJ/Z7J5L2mry8Upb8VIF8f6aGOey2eynHvOy7bowrrYSxZSwQJ2YXZ
92N4BoanrEvVexmTm4blr+HJ/aHltRHSXofYm/1Wrp5RaJaYY+X49WA0c4AD51xONuKan/qW/lbp
+0MOLRtxbU/9SU4J7KadWPjep2WQrr2WRPRk1TvsndXMpiRCb9FNu0rbTuqvKBscCjfi9PhWZeue
V9n434rafTHL1TfPxy+T/QAszAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHmv
avHtfTZfnV6VxPajHzcNrf8ABeJFs/XnMcr4no18c+6vr2YadkY2YM57sEDLyY37Mo7MMnYGlqO0
vQ+xNfqNVb1tEfs87qZ2rL0/sVX/AHdnt65P7Q0wx8vx6UBo5wAHz/jUbcX1PT78qtO2vaCnJxjP
8Zif2amnnspp04+OjWejKJ6MKdmcMmyJn4m5ZHzEVPMwtJv0VZLbQDqezcb8RzT6Y/7vUPM+ytZt
n1OTyiIh6Ztn45N/6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABocbxeLw
nUR5xXm/Rvq8+OMuDJjntaswEeBxT0bNZ6NatZpNqz3rO0rqsdO3PxlaWEMpY+aqWXkryT0ZT2V3
7A0dVPuy9f7G124NM/iyT/Z4zWT7sw957MYfB4Fp4/FE2/WWmGHldcBowAAeM9qKcvFeb8VIly9P
0nq7ntbTbVYL+tJj93CwT76unR4/jo0nozhhTsy3Y1sWljM9Ce7HyQIm3RRlttVbaWrnt0Sh6n2U
x8vD8mSfv3/h3XN4Bi8Lg2nj8Uc36y6TeOPXugCUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAPD8RxeBxXUU26Tbmj8+quro+02Lw+I4ssdslNvzhzazvDPbq8d7GW7Dfqz2VzG
0s2qd+iu/Zn5Ksk9BVztX1mI8930zh2LwOHabH+HHWP2fNYp4+vwYvxXiP3fUqxtWIjyjZtj45/L
faQFmQADzftfj3w6fJ6WmHmsP23rvaqnNwqLfhvEvIYZ+sV038bo0noy36MK9oZQxrdMyrlnMbMZ
QKrS1M07zEestq/RRjr4utwY/wAV4j91p9V18fQdJj8LR4ccfdpEfsuREbREJbuMAAAAAAAAAAAA
BAJAAAAEAJEAJQAJQAJEAJQAJQAJEACUJAQlAJEAJQAJQJAAAEAJEAJBAAAJAABAJEJAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwvanDzaPFmjvjv8A
tLztJ3h7HjGHx+FainnFeaPnHV4vFbeIU038VbHeGF+kso7Mb9mTdhKnLK3dRm7SIrHhGPxeP6Sv
9cT/AHfSnz72Zx+J7Q45/BWZ/Z9BbZ+OXyfQBZQABzeP4/E4NqI9Ii36S8Ng/wAx9C4jTxOH6ivr
jn+Hz3B/mQi/GvjdCnWNlsdI2V07LIlg6USrt2ZzZXMoFV+zPhGLxeOaavpbm/RVltEN72Yx+Jxm
b7dKUmf7L5+s9/HtRA2cqRACRACRACRACUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCQQCRACRACRCQBCQBCQB
ACRACRACRACRACL1i9LVntMbPATTwdRkxT3pea/u+gPE8Xx+DxrPHlaYt+qNfGvjvtXXsi0dOrKk
dEXjZg6VMtbP2bMtXUdpEV0/Y2nNxbNf8OP+727xvsXH+N1U/wBEfy9k3nxyb+gCVQAGOWvNivX1
rMPnGGOXNNfOJ2fSZ6w+dZKeHxDPX8N7R+6L8a+L63KdoZ7q6zvEMpnowdKJ6ywmWUyqvIKM0vQ+
x+D6rU55+9aKx+TzWa36vbezmDwODYenW+95/Nphj5L6dQBo5wAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEiAAAEoA
AAAAAAAAAAAAAEAkEAkRuAkQbgkQAkQAkQAkQAl5T2nx8nEMOT8dNv0l6pwfarHvpcGWPu32/WCr
YvK4mOem6b9mGKd4Z3idmFdka0y1c892zfpMtLPaNpEV6D2Kj/Eauf6YeweQ9ieuTVz8K/3evbT4
5NfQBKoAA8FxCvJxrUx/XMvevD8Zry8fz/Haf2RfjTx/6RSOnRMyypHu9kXjowrqVSrvPRnZVl6V
kK0775MsUjvadn0nT4ow6bFijtSsVfPuFYvpPGtNTy54mfy6vorXDm8l9pEC7JIgBIgBIgBIgBIg
BIgBIhIAgBIhIAgBIgBIIBIAAhIAhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAA
AAAAAAAAABAJQkAEAAAAAAAAAAjc3BIjdG4Mkbo5kcwMjdhzHMDPc3V8xzAs3N1fMjmBZubq+Y5g
Wbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmTzAz3N2HMnmBlu5ftFTx
OEZJ/DMW/d0t2rxKni8N1FPWkiZ9eS08e7Cy8dGGn6UhZaJljXZGnmc3UT3dPP2cnUT78xCIV6j2
H/8A9c/6f7vXPI+w8bU1U+vL/d63du5NfUiDcVSIAS8b7RV5eOb/AIqRL2TyXtNX/e2KfXH/AHlF
+NPH/pr4+2xcxx0hFpY11K7R16KM32ZWz3UaidqSgrc9kcPicWyZJjfw6T+727y3sXh2xarN+K0V
h6lvPjj3e0ASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAAAkQAkQAkAAAAAAAAAAAAAAA
EgAAAAAAAAAAAAAAAAAAAAAgAAABKDcAN0bgkY8xzAyRux5kcwM9zdXNkTcFm6OZXzMeYFvMibKu
ZHMC2bo51U2RuC2bom6rc3BZzom6sBZzI52ADPnOdggFnMc6skFnMc6rc3BbznOp3RzAv50c6nml
HMC/nOf4qOY5wX85zqOc5wbHOc7X5znBsc6edr85zg2ec52vzpi4NjmY5bROG+/bllVzsNTk5dLl
n0pP8BHmMHWNmzt0aum8obm08vVjfrtnxztR0mXHzTvaZdjVRMTLkZo6yiFen9iZ2pqY/wBP93rN
3kPY+/LfPX1rE/u9XzN3HfqzdO6vmTuIZ7m7Hc3Bnu8t7TR/vHBP9E/y9Pu837SV31umn+if5Rfi
/j/01MMb1hjkrtKzBG0bMsmOZY11tOYamr6Und0LUc7XT7u3rJPqL8er9lcPhcFpbzyWm39v7O00
+FYvA4Zpsc94xxu227jv1IAgAAAAAAAAABKAAAASgASgBIgBIgBIgBIhIAAAAAAAAAAAAAAAAAAC
UACUJAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAg3AEbomQZbo3YzLGbAz3RNlc3YzcFs2YzdVN2
M2Bdzom6nmNwW86JurTAMuY3REJ2BB1ZRVMVBhsbSsiqeUFXLucq3lTygp5TlXcpygp5TlXcpygp
5TlXcqOUFXKjlXcrGYBXysdlswiYBVMdUTCyY6sZBWxlnMMZgGLGZZSwkDdHMiWO4MuY5mEyjcFn
N1OdVzHMC3nTzqeY5gX85zqOZPMC+Lqdbk20eb/RKOZr8QybaK/XvtH7iZ9aGlp2luzT3fg19NHS
OjbmPcYX67XH1XSZ9XIzRvMuzrK7zLkZYmYnciunb9lZ5dTk+OP+71cXeP8AZnJ/ip2nf3J/l6iL
/Fu5L9bMWZczXi6YuIbEWTzKIuyiwLt3nuO25uI4a/hx7/rLuczg8TicvFLbfdpEK6+NPH/phhjo
stLGkctUWnoxrrU3j1cnWTzZq1jzl1clo5Zcu8c+txR63iP3Tn6pv4+g4o5cVI9IiGe7CJ2iE7t3
GyN2O6dwSINwSISAlAAlACRAAlAAlACRACRCQAAAAAAAAAASgASISAAAAAAAAAAAAACQAAAAAAAA
AAAAAASAAAAAAAAAAAAAAAAIAAAQCAJljuljsCJlhMs9mOwMJYys5TkBVsjZdyHICrZPKt5E8oK4
qmKrOVOwMIqyirPY2Bjyp2ZbAI2NmSARsbMgEbI2ZAMdjZICNkbMkSCNmOzJEgx2YyzljMAwlhKy
WEwCuWErJhhMArlhLOWEgxljMpljIImWMyTKJA3N0IBO5vux3NwZbnMx3NwZczT4jf3MdPW27a3a
fJOq1XNP2KdIRfi+J2trSYfcjeF+Wm1OicVeWIiN9kai8xjY12ORqultnI1Ecsujq79XP1FovWYI
rTgeq+j8QrWZ+3Mx+r2UXeC0WG2Ti2kiN5mL807eUREvbzbaejefHJv62Iv8WUXa0WTFhVtRdlF2
rz9WUXBtc7jR9dqc2T1ttHyhvZMvJitb0jdq6XHNcNenWVN3028U99WRj6Kb02be3Tq18/SN2Lpc
3UdN9nOmZrqKX/DaJ/d0svvTLRzV3jomK6+Pd1vvWJj0ZczT0mXxNJht60hfFnQ4qu3N1cWTEgs3
Tur5k7gz3N2O5uDM3Y7m4MtxBuCQASIASIASAAAAAAACRCQAAAAAAAAEoSAAAAAAAAAAAlAAlCQA
AAAAAAAAAAASAAAAAAAAAAAAIASgAAAEJAQJQCNkbMgGOyOVnsAw5TlZ7GwMOVPKy2NgY7GzIBGx
skA2AAAAAAAAAAQkBAEghEskAxYzDPZGwK5hjMLJhjMAqmGEwumrCagomFcw2JqqtUFEsLLrV82F
o7gqljKyYYTGwMZRKUSCAQAboJnaN5Bjkneu0d5W4ccViIiOzHFWbTzNumP1Zarr8eeRMbxDW1Mx
NO67NbkhzNVnmInqzaOZrL93JyZeV0M1++7S02jvxDWxhxx033tPpC8Z6rrezWjmZyazJG2/u03h
2vFibTHoqvamiwVwY+nLGzV0+SZ1Mx8G0/45tOhzJ5lXMc3UVXRdlF1HP+iYsDPLPPy49/tz1+Te
pSIr0ho6ak5Ms5J8o2q6NImOrHV7XX488ypzTtHXo0s9t6zG7c1G1qz6ubeZiZ3UatXJG3yauSO7
cvMTEx5tPLb3prPRMVr0HB8vicNxf0+7+kt+LOJwTJyY/Bnz3tH93X36N58cWvq6LSyiyndMSlC7
mZcymLJiwLosmJVRLKLAtiU7q4lMSCzc3YxJuDMRuAlKAEgAAAlAkAAAAAABKAEgAAAAAJAAAAAA
AAAAAAAEgAAAAAAAAAAAAAkAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAhIAAACAAAASgAAAAAAEAAAA
hGzJAImGMwzQDDZjNVuyNgUTVhNGxysZqDVmiu1G5NN2M4waM0+DCaN2cbGcQNGaMZq3JxMJxA1J
qx2bU4kU09slorWNwa20z02RXHbJbl26QvtFovbHWkxEdJt5y2MOHlr2U1W3jx+1hiw8vSO63lmI
XRTaEWmtY6snRHO1VpmJ+DjavpSZl2s8b7y4HFcnh0n0gha5ebJN55KRM2mdoiPN6fh+kpwXh0Wy
RHj5Otp/s5Ps1p62y31+em9aTMYt/OfVfxTiPjZ52naI7fBrI5t66xz5+a1rW7yx0eSL6iZjtEOX
qNbSletom3lENjh2fbHzbbWt3iVozruc+5ztWubf4M4ybpQ2Oboyrva0Vjza8WdDR4OkXt3n9ldX
kaePP9VtYqctYhdvt5oivTeCZ2YOxXk6ubqMfV0b9mrljfqlFcq88k7z2U5axeItDa1OPessuC8P
ya7XRWYnwqdbT/ZMilvIu4dpslNdixXja8Y5tt85djZdbDWnGOesRtXFtuw6T27No5Kx2OrKYQlC
ExKJgBnEpiyvdlEgsizKLKollFgWxLKJVRLKJBbEp3VxLKJBnuMWQJEbpBIAAAJAAAABIAAAAAAA
lAJAAAAAAAAAAAAAASAAAAAAAAAAAAAJAAAABAJABAlAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAA
AAABAJQAAAAgAABAAI2EoBGyJhkgGPKxmqxAKpownHC+YRMdN5BrTj67R3bOn01o7p01Iv71u89o
b9a7LfBTfS1vWI2jf12VfQPSW8KX2mas+NC2iv6xMNfJpMnLtEbuuxtMRCtzF55NR5rPps1N/ctP
y6uHreE6nXZ4pak48X3rT06fB7fNeI33cbX6mI32R/MWu7XF116aDSRhxbRERs8f499bkyZeeKae
kzE2mdon81/tfxDLGOunwbzlzbx08oaHBvZHJlx48mrvaa94pu04y617576rNGLRRM0397JEd/lu
9Dw/S3x4qxffo6mm4NjwUiKY4iI9Ib1dHFY6QIaNabbrYrLfrpJtaK1rMzPZb/s+05IpP59OyLeJ
k7eNfRaOc1ue32I7fGXYpi5Y77M8OGMeOKxHSFsU3Y29deZMzirl6dlVvhLatCjJHeYQv1rXnps1
8k9/VsW6qLVmZIi1rzitlvFKRvaZ2h6TSaenC9FFY+3brM+sqeG8Prp4+kZ+lvuxPkr1mqm95nfp
DXM459676a2q1dsV7XietvNno78+CJn1cjX6mOeIm0bR33dfRU5NJjidt9t5afjG/V6JZ7I2QMNh
nyo2BhsMuVG3wAhMSbbQRAMolnE+iuGUSCyJZRKuGUSCyJZK4llEgyZMYTuCUsYSCQASISAAAlCQ
AAAAAAEoASCASAAAAAAAAAAAAlACRACQAAAAAAAAAEgCEoASCAAAAAAAAAAAAAAAAAAAAAAABAAA
AAAAAAAISAIAAAAAAQAAACASgAAAQJAQAAhIDHZhln3do7z0WS18mWsajHjmes7pg3dNi5aRMNqO
yvDHTpPRaigHZhN4hHRlaVN59JY3zRENLUavaO+yq0iNVlitJ6vNcR1MVi0zO0era1/Ea0rPvbz5
PM5MWp45qvo2GZrhmfrsnpHpHzTCseEcM/2vrr8Q1Eb4qzy44nziPN63HpYiIiI7LNHoqabBTFii
IpSNohuVxrKtWMEejPwY9G1FFmHB4mWJn7MdfnIM9JpIx15to5pbUaas/a6rqViI7MxPxqX0UT1r
O3wVzpbR2hviP5i03Y5s6a879FNtHljydhExCv8AMTPJXBnRZbz0iG5ptFjwe/l96zctMVamTJtE
yTMibu1VrdTzRMR0j0ed4lr64MVpm0RERvMz5NvX62uOJ69XhOKX1HH9bHDtFvNYnfJeOy0Z2ojX
6jjnEq6fRUmccTvN/J9H0eKcOnx45neaxEbubwHgOHg+milI3vP2resu3Wu0JQmITsmISDHZHKz2
JgFc1RMLJhGwK9iIZ7MZgEdgmAEwyiWCdwWRLKJVxKYsC2JTuriWUSDNlEsIlMAySx3SCRCQSIAS
AAACRACQAAAAAAASIASAAAAAAAAAAAAAAACRACRACQASIAAAAAAAAAAAAAAAAAAAAAAAAQCUAAAA
AAAAAAIAAAAAAAAQAAAAAACBICBICAAEJAQJQCJcLjuS2ny6fPG/LWdpd1o8T0X07SXx/e7wCdJx
Wa0jmneHQpxPDMdZmJfNtZm49weZrh0/j4o7VtSZ2+Uw0/8A7o49k92vBLc/ntFohFW9PqGXimOI
6Tu1L8T3eCx6r2t1O3JwvHjifO99v7t/Bwf2l1PXU6rS6eJ8qUm8x+so5TsekzcSjbvs4mt4rzW5
K2mbT0itesy2cHsvbvqtbmyz5xERWP2jd1tJwrTaONsOKtZ8585+cnDrzmn4Rq+IZObUROHD32n7
Vv8A0ej0uhxaXFGPFSK1j0bkY4jyZRVZVXFGUVWbGwKsk8mObekNrSW3pWf1a2aYjHbm7bNnQ1id
PW0TvuDdhJEbQABMsLW2R0ZTMQrvfbz2YWzVhpanUxEd0dWkW5c8R5uXxDX1w4pnfr5Q19XxKuOJ
2neXltVqtVxbV/RdJ715+1bypANfiOu1HENV9C0MTfNeesx2rD1PAeBYuE6aKx72W3W9/WVnBuB4
eF4dqRzZbdb5J72l160WVK02ZxCYhOwI23TsnY2BGxsnYBjsiYZsZBjMMZZSgGEolMsQDdG6NwZ7
piVe6YkFsSziVMWZRILolMSriWUSCyJTuwhMSDMRCQSI3SAlACRCQAAEoAEoASAAAAAAAAACUACR
ACQAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAABAAAAAAAAAAAAACBKAAAAAAAQ
JQAAAhICEbJAYTWJ7wx8KvpC0BV4ceieWGewDHlNmWwCNjZICNhIDmcZredBecdpiY69FXCOLW+i
UiZidukulmxxlx2paN4mNng+K4+I8Hy2yaTfl37TXetoCPfRxfp1qi3F48ofKMvtvxak8s6LDv61
rZji9rPaLUf5PC+bfttS0q8q3p9W/wBrRMdpUZuKdN99nzvFqPbTVz7nD8OKs+do2/mW3h4D7Xaq
ZnPrtNpqz35aRaYOHY9Zk4pNt9rR+rl6zi+OnS+WN57Rv1lXp/YrNaYtruL6zNPnGO3hxP6O5w/2
f0HDuun09Yv55Le9afznqcOvO4tBreMTHu30unnva0bWt8on+70nDuE4OHYYx4Kbesz3tPrMuhGO
IjpDOKrK9YVpsyiGUQnYGOyUgI2SlAIEmwMWMs9kTAMJYzDOYRMArmGErZhhMArlHmzmGMwDE3Ts
bAbs4swj5pgFkSziVcM4BZEsolXDKAZwyhjCYBkACQhIAAAAAAAJAAAAAAAAAAAAAAAAAAAShIAA
AAAAAAJAAAAAAAAAAAAAABAJEAAAAAAAAAAAAAAAIEoBKAAAAAAAAAAAAAAABAlAAAAAAAIAAAAA
BAkBAkBAkBAlACEgMZjdjbFW8bWrEx8YWANb6Fp+bfwab+vLDKMFK9qxH5L0bAr8OPRPKz2AY7J2
SbAjYZAI2E7AIEgIEgIEgMdkSy2NgY7MdlmyNoBXsxmFuyNgVTVjNV3KjlBRNTlXTVHKCrlIqt5T
lBhEMohlFerLlBjEMohMVTEARDKCITsAk2AEgAAAkAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAD/
2Q==`;

// src/warmup.ts
async function warmupBitmap(instance) {
  const b64toBlob = (base64, type = "application/octet-stream") => fetch(`data:${type};base64,${base64}`).then((res2) => res2.blob());
  let blob;
  let res;
  switch (instance.config.warmup) {
    case "face":
      blob = await b64toBlob(face3);
      break;
    case "body":
    case "full":
      blob = await b64toBlob(body3);
      break;
    default:
      blob = null;
  }
  if (blob) {
    const bitmap = await createImageBitmap(blob);
    res = await instance.detect(bitmap, instance.config);
    bitmap.close();
  }
  return res;
}
async function warmupCanvas(instance) {
  return new Promise((resolve) => {
    let src;
    switch (instance.config.warmup) {
      case "face":
        src = "data:image/jpeg;base64," + face3;
        break;
      case "full":
      case "body":
        src = "data:image/jpeg;base64," + body3;
        break;
      default:
        src = "";
    }
    let img;
    if (typeof Image !== "undefined")
      img = new Image();
    else if (env.Image)
      img = new env.Image();
    else {
      resolve(void 0);
      return;
    }
    img.onload = async () => {
      const canvas3 = canvas(img.naturalWidth, img.naturalHeight);
      if (!canvas3) {
        log("Warmup: Canvas not found");
        resolve(void 0);
      } else {
        const ctx = canvas3.getContext("2d");
        if (ctx)
          ctx.drawImage(img, 0, 0);
        const tensor = await instance.image(canvas3, true);
        const res = tensor.tensor ? await instance.detect(tensor.tensor, instance.config) : void 0;
        resolve(res);
      }
    };
    if (src)
      img.src = src;
    else
      resolve(void 0);
  });
}
async function warmupNode(instance) {
  const atob2 = (str) => Buffer.from(str, "base64");
  let img;
  if (instance.config.warmup === "face")
    img = atob2(face3);
  else
    img = atob2(body3);
  let res;
  if ("node" in tfjs_esm_exports && Cde() === "tensorflow") {
    const data = (void 0).decodeJpeg(img);
    const expanded = Ms(data, 0);
    instance.tf.dispose(data);
    res = await instance.detect(expanded, instance.config);
    instance.tf.dispose(expanded);
  } else {
    if (instance.config.debug)
      log("Warmup tfjs-node not loaded");
  }
  return res;
}
async function runInference(instance) {
  let res;
  if (typeof createImageBitmap === "function")
    res = await warmupBitmap(instance);
  else if (typeof Image !== "undefined" || env.Canvas !== void 0)
    res = await warmupCanvas(instance);
  else
    res = await warmupNode(instance);
  return res;
}
async function runCompile(instance) {
  var _a, _b, _c2, _d2;
  if (!A().flagRegistry.ENGINE_COMPILE_ONLY)
    return;
  const backendType = Cde();
  const webGLBackend = vde();
  if (backendType !== "webgl" && backendType !== "humangl" || !(webGLBackend == null ? void 0 : webGLBackend["checkCompileCompletion"])) {
    return;
  }
  A().set("ENGINE_COMPILE_ONLY", true);
  const numTensorsStart = pr().state.numTensors;
  const compiledModels = [];
  for (const [modelName, model23] of Object.entries(instance.models.models)) {
    if (!model23)
      continue;
    const shape = (model23 == null ? void 0 : model23.modelSignature) && ((_b = (_a = model23 == null ? void 0 : model23.inputs) == null ? void 0 : _a[0]) == null ? void 0 : _b.shape) ? [...model23.inputs[0].shape] : [1, 64, 64, 3];
    const dtype = (model23 == null ? void 0 : model23.modelSignature) && ((_d2 = (_c2 = model23 == null ? void 0 : model23.inputs) == null ? void 0 : _c2[0]) == null ? void 0 : _d2.dtype) ? model23.inputs[0].dtype : "float32";
    for (let dim = 0; dim < shape.length; dim++) {
      if (shape[dim] === -1)
        shape[dim] = dim === 0 ? 1 : 64;
    }
    const tensor = Gr(shape, dtype);
    try {
      const res = model23.execute(tensor);
      compiledModels.push(modelName);
      if (Array.isArray(res))
        res.forEach((t8) => Mt(t8));
      else
        Mt(res);
    } catch (e) {
      if (instance.config.debug)
        log("compile fail model:", modelName);
    }
    Mt(tensor);
  }
  const kernels = await webGLBackend["checkCompileCompletionAsync"]();
  webGLBackend["getUniformLocations"]();
  if (instance.config.debug)
    log("compile pass:", { models: compiledModels, kernels: kernels.length });
  A().set("ENGINE_COMPILE_ONLY", false);
  const numTensorsEnd = pr().state.numTensors;
  if (numTensorsEnd - numTensorsStart > 0)
    log("tensor leak:", numTensorsEnd - numTensorsStart);
}
async function warmup(instance, userConfig) {
  await check(instance, false);
  const t02 = now();
  instance.state = "warmup";
  if (userConfig)
    instance.config = mergeDeep(instance.config, userConfig);
  if (!instance.config.warmup || instance.config.warmup.length === 0 || instance.config.warmup === "none") {
    return empty();
  }
  return new Promise(async (resolve) => {
    await instance.models.load();
    await runCompile(instance);
    const res = await runInference(instance);
    const t12 = now();
    if (instance.config.debug)
      log("warmup", instance.config.warmup, Math.round(t12 - t02), "ms");
    instance.emit("warmup");
    resolve(res);
  });
}

// src/human.ts
var _numTensors, _analyzeMemoryLeaks, _checkSanity, _sanity, _loops;
var Human = class {
  // definition end
  /** Constructor for **Human** library that is futher used for all operations
   * @param userConfig - user configuration object {@link Config}
   */
  constructor(userConfig) {
    /** Current version of Human library in *semver* format */
    __publicField(this, "version");
    /** Current configuration
     * - Defaults: [config](https://github.com/vladmandic/human/blob/main/src/config.ts#L262)
     */
    __publicField(this, "config");
    /** Last known result of detect run
     * - Can be accessed anytime after initial detection
    */
    __publicField(this, "result");
    /** Current state of Human library
     * - Can be polled to determine operations that are currently executed
     * - Progresses through: 'config', 'check', 'backend', 'load', 'run:<model>', 'idle'
     */
    __publicField(this, "state");
    /** currenty processed image tensor and canvas */
    __publicField(this, "process");
    /** Instance of TensorFlow/JS used by Human
     *  - Can be embedded or externally provided
     * [TFJS API](https://js.tensorflow.org/api/latest/)
     */
    __publicField(this, "tf");
    /** Object containing environment information used for diagnostics */
    __publicField(this, "env", env);
    /** Draw helper classes that can draw detected objects on canvas using specified draw
     * - canvas: draws input to canvas
     * - options: are global settings for all draw operations, can be overriden for each draw method {@link DrawOptions}
     * - face, body, hand, gesture, object, person: draws detected results as overlays on canvas
     */
    // draw: { canvas: typeof draw.canvas, face: typeof draw.face, body: typeof draw.body, hand: typeof draw.hand, gesture: typeof draw.gesture, object: typeof draw.object, person: typeof draw.person, all: typeof draw.all, options: DrawOptions };
    __publicField(this, "draw", draw_exports);
    /** Face Matching
     * - similarity: compare two face descriptors and return similarity index
     * - distance: compare two face descriptors and return raw calculated differences
     * - find: compare face descriptor to array of face descriptors and return best match
     */
    __publicField(this, "match", match_exports);
    /** Currently loaded models
     * @internal
     * {@link models#Models}
    */
    __publicField(this, "models");
    /** Container for events dispatched by Human
     * Possible events:
     * - `create`: triggered when Human object is instantiated
     * - `load`: triggered when models are loaded (explicitly or on-demand)
     * - `image`: triggered when input image is processed
     * - `result`: triggered when detection is complete
     * - `warmup`: triggered when warmup is complete
     * - `error`: triggered on some errors
     */
    __publicField(this, "events");
    /** Reference face triangualtion array of 468 points, used for triangle references between points */
    __publicField(this, "faceTriangulation");
    /** Refernce UV map of 468 values, used for 3D mapping of the face mesh */
    __publicField(this, "faceUVMap");
    /** Performance object that contains values for all recently performed operations */
    __publicField(this, "performance");
    // perf members are dynamically defined as needed
    __privateAdd(this, _numTensors, void 0);
    __privateAdd(this, _analyzeMemoryLeaks, void 0);
    __privateAdd(this, _checkSanity, void 0);
    /** internal function to measure tensor leaks */
    __publicField(this, "analyze", (...msg) => {
      if (!__privateGet(this, _analyzeMemoryLeaks))
        return;
      const currentTensors = this.tf.engine().state.numTensors;
      const previousTensors = __privateGet(this, _numTensors);
      __privateSet(this, _numTensors, currentTensors);
      const leaked = currentTensors - previousTensors;
      if (leaked !== 0)
        log(...msg, leaked);
    });
    /** internal function for quick sanity check on inputs @hidden */
    __privateAdd(this, _sanity, (input) => {
      if (!__privateGet(this, _checkSanity))
        return null;
      if (!input)
        return "input is not defined";
      if (this.env.node && !(input instanceof ut))
        return "input must be a tensor";
      try {
        this.tf.getBackend();
      } catch (e) {
        return "backend not loaded";
      }
      return null;
    });
    /** WebCam helper methods
     *
     */
    __publicField(this, "webcam", new WebCam());
    /** emit event */
    __publicField(this, "emit", (event) => {
      var _a;
      if ((_a = this.events) == null ? void 0 : _a.dispatchEvent)
        this.events.dispatchEvent(new Event(event));
    });
    /** internal structure that keeps track of processed videos @hidden */
    __privateAdd(this, _loops, {});
    const tfVersion = (Ace.tfjs || _X).replace(/-(.*)/, "");
    config.wasmPath = `https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${tfVersion}/dist/`;
    config.modelBasePath = env.browser ? "../models/" : "file://models/";
    this.version = version;
    Object.defineProperty(this, "version", { value: version });
    this.config = JSON.parse(JSON.stringify(config));
    Object.seal(this.config);
    this.config.cacheModels = typeof indexedDB !== "undefined";
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    setModelLoadOptions(this.config);
    this.tf = tfjs_esm_exports;
    this.state = "idle";
    __privateSet(this, _numTensors, 0);
    __privateSet(this, _analyzeMemoryLeaks, false);
    __privateSet(this, _checkSanity, false);
    this.performance = {};
    this.events = typeof EventTarget !== "undefined" ? new EventTarget() : void 0;
    this.models = new Models(this);
    init2();
    this.result = empty();
    this.process = { tensor: null, canvas: null };
    this.faceTriangulation = triangulation;
    this.faceUVMap = uvmap;
    validateModel(this, null, "");
    this.emit("create");
    if (this.config.debug || this.env.browser)
      log(`version: ${this.version}`);
    if (this.config.debug)
      log(`tfjs version: ${this.tf.version["tfjs-core"]}`);
    const envTemp = JSON.parse(JSON.stringify(this.env));
    delete envTemp.kernels;
    delete envTemp.initial;
    delete envTemp.perfadd;
    if (this.config.debug)
      log("environment:", envTemp);
  }
  /** Reset configuration to default values */
  reset() {
    const currentBackend = this.config.backend;
    this.config = JSON.parse(JSON.stringify(config));
    this.config.backend = currentBackend;
    reset();
    env.initial = true;
  }
  /** Validate current configuration schema */
  validate(userConfig) {
    const msgs = validate(config, userConfig || this.config);
    if (msgs.length === 0)
      this.config = mergeDeep(this.config, userConfig);
    return msgs;
  }
  /** Utility wrapper for performance.now() */
  now() {
    return now();
  }
  /** Process input as return canvas and tensor
   *
   * @param input - any input {@link Input}
   * @param getTensor - should image processing also return tensor or just canvas
   * Returns object with `tensor` and `canvas`
   */
  image(input, getTensor = false) {
    return process2(input, this.config, getTensor);
  }
  /** Segmentation method takes any input and returns RGBA tensor
   * Note: Segmentation is not triggered as part of detect process
   *
   * @param input - {@link Input}
   * Returns tensor which contains image data in RGBA format
   */
  async segmentation(input, userConfig) {
    var _a, _b, _c2;
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    if (!this.config.segmentation.enabled)
      return null;
    const processed = await process2(input, this.config);
    if (!processed.tensor)
      return null;
    let tensor = null;
    if ((_a = this.config.segmentation.modelPath) == null ? void 0 : _a.includes("rvm"))
      tensor = await predict20(processed.tensor, this.config);
    if ((_b = this.config.segmentation.modelPath) == null ? void 0 : _b.includes("meet"))
      tensor = await predict16(processed.tensor, this.config);
    if ((_c2 = this.config.segmentation.modelPath) == null ? void 0 : _c2.includes("selfie"))
      tensor = await predict21(processed.tensor, this.config);
    Mt(processed.tensor);
    return tensor;
  }
  /** Compare two input tensors for pixel similarity
   * - use `human.image` to process any valid input and get a tensor that can be used for compare
   * - when passing manually generated tensors:
   *  - both input tensors must be in format [1, height, width, 3]
   *  - if resolution of tensors does not match, second tensor will be resized to match resolution of the first tensor
   * - return value is pixel similarity score normalized by input resolution and rgb channels
  */
  compare(firstImageTensor, secondImageTensor) {
    return compare(this.config, firstImageTensor, secondImageTensor);
  }
  /** Explicit backend initialization
   *  - Normally done implicitly during initial load phase
   *  - Call to explictly register and initialize TFJS backend without any other operations
   *  - Use when changing backend during runtime
   */
  async init() {
    await check(this, true);
    await this.tf.ready();
    reset();
  }
  /** Load method preloads all configured models on-demand
   * - Not explicitly required as any required model is load implicitly on it's first run
   *
   * @param userConfig - {@link Config}
  */
  async load(userConfig) {
    this.state = "load";
    const timeStamp = now();
    const count2 = Object.values(this.models.models).filter((model23) => model23).length;
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    if (this.env.initial) {
      if (!await check(this, false))
        log("error: backend check failed");
      await bde();
      if (this.env.browser) {
        if (this.config.debug)
          log("configuration:", this.config);
        if (this.config.debug)
          log("tf flags:", this.tf.ENV.flags);
      }
    }
    await this.models.load(this);
    if (this.env.initial && this.config.debug)
      log("tf engine state:", this.tf.engine().state.numBytes, "bytes", this.tf.engine().state.numTensors, "tensors");
    this.env.initial = false;
    const loaded = Object.values(this.models.models).filter((model23) => model23).length;
    if (loaded !== count2) {
      this.models.validate();
      this.emit("load");
    }
    const current = Math.trunc(now() - timeStamp);
    if (current > (this.performance.loadModels || 0))
      this.performance.loadModels = this.env.perfadd ? (this.performance.loadModels || 0) + current : current;
  }
  /** Runs interpolation using last known result and returns smoothened result
   * Interpolation is based on time since last known result so can be called independently
   *
   * @param result - {@link Result} optional use specific result set to run interpolation on
   * @returns result - {@link Result}
   */
  next(result = this.result) {
    return calc2(result, this.config);
  }
  /** Warmup method pre-initializes all configured models for faster inference
   * - can take significant time on startup
   * - only used for `webgl` and `humangl` backends
   * @param userConfig - {@link Config}
   * @returns result - {@link Result}
  */
  async warmup(userConfig) {
    const t02 = now();
    const res = await warmup(this, userConfig);
    const t12 = now();
    this.performance.warmup = Math.trunc(t12 - t02);
    return res;
  }
  /** Run detect with tensorflow profiling
   * - result object will contain total exeuction time information for top-20 kernels
   * - actual detection object can be accessed via `human.result`
  */
  async profile(input, userConfig) {
    const profile = await this.tf.profile(() => this.detect(input, userConfig));
    const kernels = {};
    let total = 0;
    for (const kernel of profile.kernels) {
      const ms2 = Number(kernel.kernelTimeMs) || 0;
      if (kernels[kernel.name])
        kernels[kernel.name] += ms2;
      else
        kernels[kernel.name] = ms2;
      total += ms2;
    }
    const kernelArr = [];
    Object.entries(kernels).forEach((key) => kernelArr.push({ kernel: key[0], time: key[1], perc: 0 }));
    for (const kernel of kernelArr) {
      kernel.perc = Math.round(1e3 * kernel.time / total) / 1e3;
      kernel.time = Math.round(1e3 * kernel.time) / 1e3;
    }
    kernelArr.sort((a, b) => b.time - a.time);
    kernelArr.length = 20;
    return kernelArr;
  }
  /** Main detection method
   * - Analyze configuration: {@link Config}
   * - Pre-process input: {@link Input}
   * - Run inference for all configured models
   * - Process and return result: {@link Result}
   *
   * @param input - {@link Input}
   * @param userConfig - {@link Config}
   * @returns result - {@link Result}
  */
  async detect(input, userConfig) {
    this.state = "detect";
    return new Promise(async (resolve) => {
      var _a, _b, _c2, _d2, _e, _f2, _g2, _h2, _i, _j2, _k2, _l2, _m, _n2, _o, _p2, _q, _r2, _s2, _t, _u2;
      this.state = "config";
      let timeStamp;
      this.config = mergeDeep(this.config, userConfig);
      this.state = "check";
      const error = __privateGet(this, _sanity).call(this, input);
      if (error) {
        log(error, input);
        this.emit("error");
        resolve(empty(error));
      }
      const timeStart = now();
      await this.load();
      timeStamp = now();
      this.state = "image";
      const img = await process2(input, this.config);
      this.process = img;
      this.performance.inputProcess = this.env.perfadd ? (this.performance.inputProcess || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      this.analyze("Get Image:");
      if (!img.tensor) {
        if (this.config.debug)
          log("could not convert input to tensor");
        this.emit("error");
        resolve(empty("could not convert input to tensor"));
        return;
      }
      this.emit("image");
      timeStamp = now();
      this.config.skipAllowed = await skip(this.config, img.tensor);
      this.config.filter.autoBrightness = (this.config.filter.autoBrightness || false) && this.config.skipAllowed;
      if (!this.performance.totalFrames)
        this.performance.totalFrames = 0;
      if (!this.performance.cachedFrames)
        this.performance.cachedFrames = 0;
      this.performance.totalFrames++;
      if (this.config.skipAllowed)
        this.performance.cachedFrames++;
      this.performance.cacheCheck = this.env.perfadd ? (this.performance.cacheCheck || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      this.analyze("Check Changed:");
      let faceRes = [];
      let bodyRes = [];
      let handRes = [];
      let objectRes = [];
      this.state = "detect:face";
      if (this.config.async) {
        faceRes = this.config.face.enabled ? detectFace(this, img.tensor) : [];
        if (this.performance.face)
          delete this.performance.face;
      } else {
        timeStamp = now();
        faceRes = this.config.face.enabled ? await detectFace(this, img.tensor) : [];
        this.performance.face = this.env.perfadd ? (this.performance.face || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      if (this.config.async && (this.config.body.maxDetected === -1 || this.config.hand.maxDetected === -1))
        faceRes = await faceRes;
      this.analyze("Start Body:");
      this.state = "detect:body";
      const bodyConfig = this.config.body.maxDetected === -1 ? mergeDeep(this.config, { body: { maxDetected: this.config.face.enabled ? 1 * faceRes.length : 1 } }) : this.config;
      if (this.config.async) {
        if ((_a = this.config.body.modelPath) == null ? void 0 : _a.includes("posenet"))
          bodyRes = this.config.body.enabled ? predict19(img.tensor, bodyConfig) : [];
        else if ((_b = this.config.body.modelPath) == null ? void 0 : _b.includes("blazepose"))
          bodyRes = this.config.body.enabled ? predict(img.tensor, bodyConfig) : [];
        else if ((_c2 = this.config.body.modelPath) == null ? void 0 : _c2.includes("efficientpose"))
          bodyRes = this.config.body.enabled ? predict3(img.tensor, bodyConfig) : [];
        else if ((_d2 = this.config.body.modelPath) == null ? void 0 : _d2.includes("movenet"))
          bodyRes = this.config.body.enabled ? predict17(img.tensor, bodyConfig) : [];
        if (this.performance.body)
          delete this.performance.body;
      } else {
        timeStamp = now();
        if ((_e = this.config.body.modelPath) == null ? void 0 : _e.includes("posenet"))
          bodyRes = this.config.body.enabled ? await predict19(img.tensor, bodyConfig) : [];
        else if ((_f2 = this.config.body.modelPath) == null ? void 0 : _f2.includes("blazepose"))
          bodyRes = this.config.body.enabled ? await predict(img.tensor, bodyConfig) : [];
        else if ((_g2 = this.config.body.modelPath) == null ? void 0 : _g2.includes("efficientpose"))
          bodyRes = this.config.body.enabled ? await predict3(img.tensor, bodyConfig) : [];
        else if ((_h2 = this.config.body.modelPath) == null ? void 0 : _h2.includes("movenet"))
          bodyRes = this.config.body.enabled ? await predict17(img.tensor, bodyConfig) : [];
        this.performance.body = this.env.perfadd ? (this.performance.body || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Body:");
      this.analyze("Start Hand:");
      this.state = "detect:hand";
      const handConfig = this.config.hand.maxDetected === -1 ? mergeDeep(this.config, { hand: { maxDetected: this.config.face.enabled ? 2 * faceRes.length : 1 } }) : this.config;
      if (this.config.async) {
        if ((_j2 = (_i = this.config.hand.detector) == null ? void 0 : _i.modelPath) == null ? void 0 : _j2.includes("handdetect"))
          handRes = this.config.hand.enabled ? predict14(img.tensor, handConfig) : [];
        else if ((_l2 = (_k2 = this.config.hand.detector) == null ? void 0 : _k2.modelPath) == null ? void 0 : _l2.includes("handtrack"))
          handRes = this.config.hand.enabled ? predict15(img.tensor, handConfig) : [];
        if (this.performance.hand)
          delete this.performance.hand;
      } else {
        timeStamp = now();
        if ((_n2 = (_m = this.config.hand.detector) == null ? void 0 : _m.modelPath) == null ? void 0 : _n2.includes("handdetect"))
          handRes = this.config.hand.enabled ? await predict14(img.tensor, handConfig) : [];
        else if ((_p2 = (_o = this.config.hand.detector) == null ? void 0 : _o.modelPath) == null ? void 0 : _p2.includes("handtrack"))
          handRes = this.config.hand.enabled ? await predict15(img.tensor, handConfig) : [];
        this.performance.hand = this.env.perfadd ? (this.performance.hand || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Hand:");
      this.analyze("Start Object:");
      this.state = "detect:object";
      if (this.config.async) {
        if ((_q = this.config.object.modelPath) == null ? void 0 : _q.includes("nanodet"))
          objectRes = this.config.object.enabled ? predict18(img.tensor, this.config) : [];
        else if ((_r2 = this.config.object.modelPath) == null ? void 0 : _r2.includes("centernet"))
          objectRes = this.config.object.enabled ? predict2(img.tensor, this.config) : [];
        if (this.performance.object)
          delete this.performance.object;
      } else {
        timeStamp = now();
        if ((_s2 = this.config.object.modelPath) == null ? void 0 : _s2.includes("nanodet"))
          objectRes = this.config.object.enabled ? await predict18(img.tensor, this.config) : [];
        else if ((_t = this.config.object.modelPath) == null ? void 0 : _t.includes("centernet"))
          objectRes = this.config.object.enabled ? await predict2(img.tensor, this.config) : [];
        this.performance.object = this.env.perfadd ? (this.performance.object || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Object:");
      this.state = "detect:await";
      if (this.config.async)
        [faceRes, bodyRes, handRes, objectRes] = await Promise.all([faceRes, bodyRes, handRes, objectRes]);
      this.state = "detect:gesture";
      let gestureRes = [];
      if (this.config.gesture.enabled) {
        timeStamp = now();
        gestureRes = [...face2(faceRes), ...body2(bodyRes), ...hand2(handRes), ...iris2(faceRes)];
        if (!this.config.async)
          this.performance.gesture = this.env.perfadd ? (this.performance.gesture || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
        else if (this.performance.gesture)
          delete this.performance.gesture;
      }
      this.performance.total = this.env.perfadd ? (this.performance.total || 0) + Math.trunc(now() - timeStart) : Math.trunc(now() - timeStart);
      const shape = ((_u2 = this.process.tensor) == null ? void 0 : _u2.shape) || [0, 0, 0, 0];
      this.result = {
        face: faceRes,
        body: bodyRes,
        hand: handRes,
        gesture: gestureRes,
        object: objectRes,
        performance: this.performance,
        canvas: this.process.canvas,
        timestamp: Date.now(),
        error: null,
        width: shape[2],
        height: shape[1],
        get persons() {
          return join2(faceRes, bodyRes, handRes, gestureRes, shape);
        }
      };
      Mt(img.tensor);
      this.emit("detect");
      this.state = "idle";
      resolve(this.result);
    });
  }
  /** Helper function
   * @param ms - sleep time in miliseconds
   */
  async sleep(ms2) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms2);
    });
  }
  /** Continously detect video frames
   * @param element - HTMLVideoElement input
   * @param run - boolean run continously or stop if already running, default true
   * @param delay - number delay detection between frames for number of miliseconds, default 0
   */
  async video(element, run = true, delay = 0) {
    if (run) {
      if (!__privateGet(this, _loops)[element.id]) {
        if (this.config.debug)
          log("video start", element.id);
        __privateGet(this, _loops)[element.id] = true;
      }
      if (!element.paused && __privateGet(this, _loops)[element.id] && element.readyState >= 2)
        await this.detect(element);
      if (delay > 0)
        await this.sleep(delay);
      if (__privateGet(this, _loops)[element.id])
        requestAnimationFrame(() => this.video(element, run, delay));
    } else {
      if (this.config.debug)
        log("video stop", element.id);
      __privateGet(this, _loops)[element.id] = false;
    }
  }
};
_numTensors = new WeakMap();
_analyzeMemoryLeaks = new WeakMap();
_checkSanity = new WeakMap();
_sanity = new WeakMap();
_loops = new WeakMap();
export {
  Env,
  Human,
  Human as default,
  config as defaults,
  draw_exports as draw,
  empty,
  env,
  match_exports as match,
  models_exports2 as models
};
//# sourceMappingURL=human.esm.js.map
