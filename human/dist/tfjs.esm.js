/*
  Human
  homepage: <https://github.com/vladmandic/human>
  author: <https://github.com/vladmandic>'
*/

var wG=Object.create;var QC=Object.defineProperty;var SG=Object.getOwnPropertyDescriptor;var IG=Object.getOwnPropertyNames;var vG=Object.getPrototypeOf,kG=Object.prototype.hasOwnProperty;var qt=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),qe=(r,t)=>{for(var e in t)QC(r,e,{get:t[e],enumerable:!0})},NG=(r,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of IG(t))!kG.call(r,n)&&n!==e&&QC(r,n,{get:()=>t[n],enumerable:!(o=SG(t,n))||o.enumerable});return r};var Kp=(r,t,e)=>(e=r!=null?wG(vG(r)):{},NG(t||!r||!r.__esModule?QC(e,"default",{value:r,enumerable:!0}):e,r));var V0=qt((tle,z0)=>{z0.exports=Nt;var No=null;try{No=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(r){}function Nt(r,t,e){this.low=r|0,this.high=t|0,this.unsigned=!!e}Nt.prototype.__isLong__;Object.defineProperty(Nt.prototype,"__isLong__",{value:!0});function Wr(r){return(r&&r.__isLong__)===!0}Nt.isLong=Wr;var R0={},D0={};function Bu(r,t){var e,o,n;return t?(r>>>=0,(n=0<=r&&r<256)&&(o=D0[r],o)?o:(e=Tt(r,(r|0)<0?-1:0,!0),n&&(D0[r]=e),e)):(r|=0,(n=-128<=r&&r<128)&&(o=R0[r],o)?o:(e=Tt(r,r<0?-1:0,!1),n&&(R0[r]=e),e))}Nt.fromInt=Bu;function To(r,t){if(isNaN(r))return t?Lu:_o;if(t){if(r<0)return Lu;if(r>=O0)return B0}else{if(r<=-F0)return Vr;if(r+1>=F0)return L0}return r<0?To(-r,t).neg():Tt(r%oc|0,r/oc|0,t)}Nt.fromNumber=To;function Tt(r,t,e){return new Nt(r,t,e)}Nt.fromBits=Tt;var Zm=Math.pow;function cw(r,t,e){if(r.length===0)throw Error("empty string");if(r==="NaN"||r==="Infinity"||r==="+Infinity"||r==="-Infinity")return _o;if(typeof t=="number"?(e=t,t=!1):t=!!t,e=e||10,e<2||36<e)throw RangeError("radix");var o;if((o=r.indexOf("-"))>0)throw Error("interior hyphen");if(o===0)return cw(r.substring(1),t,e).neg();for(var n=To(Zm(e,8)),s=_o,a=0;a<r.length;a+=8){var i=Math.min(8,r.length-a),p=parseInt(r.substring(a,a+i),e);if(i<8){var u=To(Zm(e,i));s=s.mul(u).add(To(p))}else s=s.mul(n),s=s.add(To(p))}return s.unsigned=t,s}Nt.fromString=cw;function Fs(r,t){return typeof r=="number"?To(r,t):typeof r=="string"?cw(r,t):Tt(r.low,r.high,typeof t=="boolean"?t:r.unsigned)}Nt.fromValue=Fs;var A0=65536,XG=1<<24,oc=A0*A0,O0=oc*oc,F0=O0/2,P0=Bu(XG),_o=Bu(0);Nt.ZERO=_o;var Lu=Bu(0,!0);Nt.UZERO=Lu;var rc=Bu(1);Nt.ONE=rc;var M0=Bu(1,!0);Nt.UONE=M0;var pw=Bu(-1);Nt.NEG_ONE=pw;var L0=Tt(-1,2147483647,!1);Nt.MAX_VALUE=L0;var B0=Tt(-1,-1,!0);Nt.MAX_UNSIGNED_VALUE=B0;var Vr=Tt(0,-2147483648,!1);Nt.MIN_VALUE=Vr;var de=Nt.prototype;de.toInt=function(){return this.unsigned?this.low>>>0:this.low};de.toNumber=function(){return this.unsigned?(this.high>>>0)*oc+(this.low>>>0):this.high*oc+(this.low>>>0)};de.toString=function(t){if(t=t||10,t<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative())if(this.eq(Vr)){var e=To(t),o=this.div(e),n=o.mul(e).sub(this);return o.toString(t)+n.toInt().toString(t)}else return"-"+this.neg().toString(t);for(var s=To(Zm(t,6),this.unsigned),a=this,i="";;){var p=a.div(s),u=a.sub(p.mul(s)).toInt()>>>0,c=u.toString(t);if(a=p,a.isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}};de.getHighBits=function(){return this.high};de.getHighBitsUnsigned=function(){return this.high>>>0};de.getLowBits=function(){return this.low};de.getLowBitsUnsigned=function(){return this.low>>>0};de.getNumBitsAbs=function(){if(this.isNegative())return this.eq(Vr)?64:this.neg().getNumBitsAbs();for(var t=this.high!=0?this.high:this.low,e=31;e>0&&!(t&1<<e);e--);return this.high!=0?e+33:e+1};de.isZero=function(){return this.high===0&&this.low===0};de.eqz=de.isZero;de.isNegative=function(){return!this.unsigned&&this.high<0};de.isPositive=function(){return this.unsigned||this.high>=0};de.isOdd=function(){return(this.low&1)===1};de.isEven=function(){return(this.low&1)===0};de.equals=function(t){return Wr(t)||(t=Fs(t)),this.unsigned!==t.unsigned&&this.high>>>31===1&&t.high>>>31===1?!1:this.high===t.high&&this.low===t.low};de.eq=de.equals;de.notEquals=function(t){return!this.eq(t)};de.neq=de.notEquals;de.ne=de.notEquals;de.lessThan=function(t){return this.comp(t)<0};de.lt=de.lessThan;de.lessThanOrEqual=function(t){return this.comp(t)<=0};de.lte=de.lessThanOrEqual;de.le=de.lessThanOrEqual;de.greaterThan=function(t){return this.comp(t)>0};de.gt=de.greaterThan;de.greaterThanOrEqual=function(t){return this.comp(t)>=0};de.gte=de.greaterThanOrEqual;de.ge=de.greaterThanOrEqual;de.compare=function(t){if(Wr(t)||(t=Fs(t)),this.eq(t))return 0;var e=this.isNegative(),o=t.isNegative();return e&&!o?-1:!e&&o?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1};de.comp=de.compare;de.negate=function(){return!this.unsigned&&this.eq(Vr)?Vr:this.not().add(rc)};de.neg=de.negate;de.add=function(t){Wr(t)||(t=Fs(t));var e=this.high>>>16,o=this.high&65535,n=this.low>>>16,s=this.low&65535,a=t.high>>>16,i=t.high&65535,p=t.low>>>16,u=t.low&65535,c=0,l=0,m=0,d=0;return d+=s+u,m+=d>>>16,d&=65535,m+=n+p,l+=m>>>16,m&=65535,l+=o+i,c+=l>>>16,l&=65535,c+=e+a,c&=65535,Tt(m<<16|d,c<<16|l,this.unsigned)};de.subtract=function(t){return Wr(t)||(t=Fs(t)),this.add(t.neg())};de.sub=de.subtract;de.multiply=function(t){if(this.isZero())return _o;if(Wr(t)||(t=Fs(t)),No){var e=No.mul(this.low,this.high,t.low,t.high);return Tt(e,No.get_high(),this.unsigned)}if(t.isZero())return _o;if(this.eq(Vr))return t.isOdd()?Vr:_o;if(t.eq(Vr))return this.isOdd()?Vr:_o;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(P0)&&t.lt(P0))return To(this.toNumber()*t.toNumber(),this.unsigned);var o=this.high>>>16,n=this.high&65535,s=this.low>>>16,a=this.low&65535,i=t.high>>>16,p=t.high&65535,u=t.low>>>16,c=t.low&65535,l=0,m=0,d=0,f=0;return f+=a*c,d+=f>>>16,f&=65535,d+=s*c,m+=d>>>16,d&=65535,d+=a*u,m+=d>>>16,d&=65535,m+=n*c,l+=m>>>16,m&=65535,m+=s*u,l+=m>>>16,m&=65535,m+=a*p,l+=m>>>16,m&=65535,l+=o*c+n*u+s*p+a*i,l&=65535,Tt(d<<16|f,l<<16|m,this.unsigned)};de.mul=de.multiply;de.divide=function(t){if(Wr(t)||(t=Fs(t)),t.isZero())throw Error("division by zero");if(No){if(!this.unsigned&&this.high===-2147483648&&t.low===-1&&t.high===-1)return this;var e=(this.unsigned?No.div_u:No.div_s)(this.low,this.high,t.low,t.high);return Tt(e,No.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?Lu:_o;var o,n,s;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return Lu;if(t.gt(this.shru(1)))return M0;s=Lu}else{if(this.eq(Vr)){if(t.eq(rc)||t.eq(pw))return Vr;if(t.eq(Vr))return rc;var a=this.shr(1);return o=a.div(t).shl(1),o.eq(_o)?t.isNegative()?rc:pw:(n=this.sub(t.mul(o)),s=o.add(n.div(t)),s)}else if(t.eq(Vr))return this.unsigned?Lu:_o;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();s=_o}for(n=this;n.gte(t);){o=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var i=Math.ceil(Math.log(o)/Math.LN2),p=i<=48?1:Zm(2,i-48),u=To(o),c=u.mul(t);c.isNegative()||c.gt(n);)o-=p,u=To(o,this.unsigned),c=u.mul(t);u.isZero()&&(u=rc),s=s.add(u),n=n.sub(c)}return s};de.div=de.divide;de.modulo=function(t){if(Wr(t)||(t=Fs(t)),No){var e=(this.unsigned?No.rem_u:No.rem_s)(this.low,this.high,t.low,t.high);return Tt(e,No.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))};de.mod=de.modulo;de.rem=de.modulo;de.not=function(){return Tt(~this.low,~this.high,this.unsigned)};de.and=function(t){return Wr(t)||(t=Fs(t)),Tt(this.low&t.low,this.high&t.high,this.unsigned)};de.or=function(t){return Wr(t)||(t=Fs(t)),Tt(this.low|t.low,this.high|t.high,this.unsigned)};de.xor=function(t){return Wr(t)||(t=Fs(t)),Tt(this.low^t.low,this.high^t.high,this.unsigned)};de.shiftLeft=function(t){return Wr(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?Tt(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):Tt(0,this.low<<t-32,this.unsigned)};de.shl=de.shiftLeft;de.shiftRight=function(t){return Wr(t)&&(t=t.toInt()),(t&=63)===0?this:t<32?Tt(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):Tt(this.high>>t-32,this.high>=0?0:-1,this.unsigned)};de.shr=de.shiftRight;de.shiftRightUnsigned=function(t){if(Wr(t)&&(t=t.toInt()),t&=63,t===0)return this;var e=this.high;if(t<32){var o=this.low;return Tt(o>>>t|e<<32-t,e>>>t,this.unsigned)}else return t===32?Tt(e,0,this.unsigned):Tt(e>>>t-32,0,this.unsigned)};de.shru=de.shiftRightUnsigned;de.shr_u=de.shiftRightUnsigned;de.toSigned=function(){return this.unsigned?Tt(this.low,this.high,!1):this};de.toUnsigned=function(){return this.unsigned?this:Tt(this.low,this.high,!0)};de.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()};de.toBytesLE=function(){var t=this.high,e=this.low;return[e&255,e>>>8&255,e>>>16&255,e>>>24,t&255,t>>>8&255,t>>>16&255,t>>>24]};de.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,t&255,e>>>24,e>>>16&255,e>>>8&255,e&255]};Nt.fromBytes=function(t,e,o){return o?Nt.fromBytesLE(t,e):Nt.fromBytesBE(t,e)};Nt.fromBytesLE=function(t,e){return new Nt(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)};Nt.fromBytesBE=function(t,e){return new Nt(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}});var Ik=qt(()=>{});var vk=qt(()=>{});var Q2=qt((Y2,Vw)=>{(function(r,t,e){function o(i){var p=this,u=a();p.next=function(){var c=2091639*p.s0+p.c*23283064365386963e-26;return p.s0=p.s1,p.s1=p.s2,p.s2=c-(p.c=c|0)},p.c=1,p.s0=u(" "),p.s1=u(" "),p.s2=u(" "),p.s0-=u(i),p.s0<0&&(p.s0+=1),p.s1-=u(i),p.s1<0&&(p.s1+=1),p.s2-=u(i),p.s2<0&&(p.s2+=1),u=null}function n(i,p){return p.c=i.c,p.s0=i.s0,p.s1=i.s1,p.s2=i.s2,p}function s(i,p){var u=new o(i),c=p&&p.state,l=u.next;return l.int32=function(){return u.next()*4294967296|0},l.double=function(){return l()+(l()*2097152|0)*11102230246251565e-32},l.quick=l,c&&(typeof c=="object"&&n(c,u),l.state=function(){return n(u,{})}),l}function a(){var i=4022871197,p=function(u){u=String(u);for(var c=0;c<u.length;c++){i+=u.charCodeAt(c);var l=.02519603282416938*i;i=l>>>0,l-=i,l*=i,i=l>>>0,l-=i,i+=l*4294967296}return(i>>>0)*23283064365386963e-26};return p}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.alea=s})(Y2,typeof Vw=="object"&&Vw,typeof define=="function"&&define)});var J2=qt((Z2,Ww)=>{(function(r,t,e){function o(a){var i=this,p="";i.x=0,i.y=0,i.z=0,i.w=0,i.next=function(){var c=i.x^i.x<<11;return i.x=i.y,i.y=i.z,i.z=i.w,i.w^=i.w>>>19^c^c>>>8},a===(a|0)?i.x=a:p+=a;for(var u=0;u<p.length+64;u++)i.x^=p.charCodeAt(u)|0,i.next()}function n(a,i){return i.x=a.x,i.y=a.y,i.z=a.z,i.w=a.w,i}function s(a,i){var p=new o(a),u=i&&i.state,c=function(){return(p.next()>>>0)/4294967296};return c.double=function(){do var l=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(l+m)/(1<<21);while(d===0);return d},c.int32=p.next,c.quick=c,u&&(typeof u=="object"&&n(u,p),c.state=function(){return n(p,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor128=s})(Z2,typeof Ww=="object"&&Ww,typeof define=="function"&&define)});var t1=qt((e1,Uw)=>{(function(r,t,e){function o(a){var i=this,p="";i.next=function(){var c=i.x^i.x>>>2;return i.x=i.y,i.y=i.z,i.z=i.w,i.w=i.v,(i.d=i.d+362437|0)+(i.v=i.v^i.v<<4^(c^c<<1))|0},i.x=0,i.y=0,i.z=0,i.w=0,i.v=0,a===(a|0)?i.x=a:p+=a;for(var u=0;u<p.length+64;u++)i.x^=p.charCodeAt(u)|0,u==p.length&&(i.d=i.x<<10^i.x>>>4),i.next()}function n(a,i){return i.x=a.x,i.y=a.y,i.z=a.z,i.w=a.w,i.v=a.v,i.d=a.d,i}function s(a,i){var p=new o(a),u=i&&i.state,c=function(){return(p.next()>>>0)/4294967296};return c.double=function(){do var l=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(l+m)/(1<<21);while(d===0);return d},c.int32=p.next,c.quick=c,u&&(typeof u=="object"&&n(u,p),c.state=function(){return n(p,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorwow=s})(e1,typeof Uw=="object"&&Uw,typeof define=="function"&&define)});var o1=qt((r1,Gw)=>{(function(r,t,e){function o(a){var i=this;i.next=function(){var u=i.x,c=i.i,l,m,d;return l=u[c],l^=l>>>7,m=l^l<<24,l=u[c+1&7],m^=l^l>>>10,l=u[c+3&7],m^=l^l>>>3,l=u[c+4&7],m^=l^l<<7,l=u[c+7&7],l=l^l<<13,m^=l^l<<9,u[c]=m,i.i=c+1&7,m};function p(u,c){var l,m,d=[];if(c===(c|0))m=d[0]=c;else for(c=""+c,l=0;l<c.length;++l)d[l&7]=d[l&7]<<15^c.charCodeAt(l)+d[l+1&7]<<13;for(;d.length<8;)d.push(0);for(l=0;l<8&&d[l]===0;++l);for(l==8?m=d[7]=-1:m=d[l],u.x=d,u.i=0,l=256;l>0;--l)u.next()}p(i,a)}function n(a,i){return i.x=a.x.slice(),i.i=a.i,i}function s(a,i){a==null&&(a=+new Date);var p=new o(a),u=i&&i.state,c=function(){return(p.next()>>>0)/4294967296};return c.double=function(){do var l=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(l+m)/(1<<21);while(d===0);return d},c.int32=p.next,c.quick=c,u&&(u.x&&n(u,p),c.state=function(){return n(p,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xorshift7=s})(r1,typeof Gw=="object"&&Gw,typeof define=="function"&&define)});var s1=qt((n1,Hw)=>{(function(r,t,e){function o(a){var i=this;i.next=function(){var u=i.w,c=i.X,l=i.i,m,d;return i.w=u=u+1640531527|0,d=c[l+34&127],m=c[l=l+1&127],d^=d<<13,m^=m<<17,d^=d>>>15,m^=m>>>12,d=c[l]=d^m,i.i=l,d+(u^u>>>16)|0};function p(u,c){var l,m,d,f,h,g=[],x=128;for(c===(c|0)?(m=c,c=null):(c=c+"\0",m=0,x=Math.max(x,c.length)),d=0,f=-32;f<x;++f)c&&(m^=c.charCodeAt((f+32)%c.length)),f===0&&(h=m),m^=m<<10,m^=m>>>15,m^=m<<4,m^=m>>>13,f>=0&&(h=h+1640531527|0,l=g[f&127]^=m+h,d=l==0?d+1:0);for(d>=128&&(g[(c&&c.length||0)&127]=-1),d=127,f=4*128;f>0;--f)m=g[d+34&127],l=g[d=d+1&127],m^=m<<13,l^=l<<17,m^=m>>>15,l^=l>>>12,g[d]=m^l;u.w=h,u.X=g,u.i=d}p(i,a)}function n(a,i){return i.i=a.i,i.w=a.w,i.X=a.X.slice(),i}function s(a,i){a==null&&(a=+new Date);var p=new o(a),u=i&&i.state,c=function(){return(p.next()>>>0)/4294967296};return c.double=function(){do var l=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(l+m)/(1<<21);while(d===0);return d},c.int32=p.next,c.quick=c,u&&(u.X&&n(u,p),c.state=function(){return n(p,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.xor4096=s})(n1,typeof Hw=="object"&&Hw,typeof define=="function"&&define)});var i1=qt((a1,Kw)=>{(function(r,t,e){function o(a){var i=this,p="";i.next=function(){var c=i.b,l=i.c,m=i.d,d=i.a;return c=c<<25^c>>>7^l,l=l-m|0,m=m<<24^m>>>8^d,d=d-c|0,i.b=c=c<<20^c>>>12^l,i.c=l=l-m|0,i.d=m<<16^l>>>16^d,i.a=d-c|0},i.a=0,i.b=0,i.c=-1640531527,i.d=1367130551,a===Math.floor(a)?(i.a=a/4294967296|0,i.b=a|0):p+=a;for(var u=0;u<p.length+20;u++)i.b^=p.charCodeAt(u)|0,i.next()}function n(a,i){return i.a=a.a,i.b=a.b,i.c=a.c,i.d=a.d,i}function s(a,i){var p=new o(a),u=i&&i.state,c=function(){return(p.next()>>>0)/4294967296};return c.double=function(){do var l=p.next()>>>11,m=(p.next()>>>0)/4294967296,d=(l+m)/(1<<21);while(d===0);return d},c.int32=p.next,c.quick=c,u&&(typeof u=="object"&&n(u,p),c.state=function(){return n(p,{})}),c}t&&t.exports?t.exports=s:e&&e.amd?e(function(){return s}):this.tychei=s})(a1,typeof Kw=="object"&&Kw,typeof define=="function"&&define)});var u1=qt(()=>{});var c1=qt((p1,Ld)=>{(function(r,t,e){var o=256,n=6,s=52,a="random",i=e.pow(o,n),p=e.pow(2,s),u=p*2,c=o-1,l;function m(C,S,k){var _=[];S=S==!0?{entropy:!0}:S||{};var E=g(h(S.entropy?[C,b(t)]:C==null?x():C,3),_),R=new d(_),D=function(){for(var P=R.g(n),O=i,M=0;P<p;)P=(P+M)*o,O*=o,M=R.g(1);for(;P>=u;)P/=2,O/=2,M>>>=1;return(P+M)/O};return D.int32=function(){return R.g(4)|0},D.quick=function(){return R.g(4)/4294967296},D.double=D,g(b(R.S),t),(S.pass||k||function(P,O,M,L){return L&&(L.S&&f(L,R),P.state=function(){return f(R,{})}),M?(e[a]=P,O):P})(D,E,"global"in S?S.global:this==e,S.state)}function d(C){var S,k=C.length,_=this,E=0,R=_.i=_.j=0,D=_.S=[];for(k||(C=[k++]);E<o;)D[E]=E++;for(E=0;E<o;E++)D[E]=D[R=c&R+C[E%k]+(S=D[E])],D[R]=S;(_.g=function(P){for(var O,M=0,L=_.i,B=_.j,z=_.S;P--;)O=z[L=c&L+1],M=M*o+z[c&(z[L]=z[B=c&B+O])+(z[B]=O)];return _.i=L,_.j=B,M})(o)}function f(C,S){return S.i=C.i,S.j=C.j,S.S=C.S.slice(),S}function h(C,S){var k=[],_=typeof C,E;if(S&&_=="object")for(E in C)try{k.push(h(C[E],S-1))}catch(R){}return k.length?k:_=="string"?C:C+"\0"}function g(C,S){for(var k=C+"",_,E=0;E<k.length;)S[c&E]=c&(_^=S[c&E]*19)+k.charCodeAt(E++);return b(S)}function x(){try{var C;return l&&(C=l.randomBytes)?C=C(o):(C=new Uint8Array(o),(r.crypto||r.msCrypto).getRandomValues(C)),b(C)}catch(_){var S=r.navigator,k=S&&S.plugins;return[+new Date,r,k,r.screen,b(t)]}}function b(C){return String.fromCharCode.apply(0,C)}if(g(e.random(),t),typeof Ld=="object"&&Ld.exports){Ld.exports=m;try{l=u1()}catch(C){}}else typeof define=="function"&&define.amd?define(function(){return m}):e["seed"+a]=m})(typeof self!="undefined"?self:p1,[],Math)});var qw=qt((Y2e,l1)=>{var vq=Q2(),kq=J2(),Nq=t1(),Tq=o1(),_q=s1(),$q=i1(),Qu=c1();Qu.alea=vq;Qu.xor128=kq;Qu.xorwow=Nq;Qu.xorshift7=Tq;Qu.xor4096=_q;Qu.tychei=$q;l1.exports=Qu});var Bv=qt(()=>{});var zv=qt(()=>{});var RB=qt(()=>{});var DB=qt(()=>{});var AB=qt(()=>{});var FB=qt((Wg,Wv)=>{var Vv=(()=>{var r=typeof document!="undefined"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename!="undefined"&&(r=r||__filename),function(t){t=t||{};function e(){return oe.buffer!=Ge&&_t(oe.buffer),mt}function o(){return oe.buffer!=Ge&&_t(oe.buffer),it}function n(){return oe.buffer!=Ge&&_t(oe.buffer),gt}function s(){return oe.buffer!=Ge&&_t(oe.buffer),Lr}function a(){return oe.buffer!=Ge&&_t(oe.buffer),Lt}function i(){return oe.buffer!=Ge&&_t(oe.buffer),to}function p(){return oe.buffer!=Ge&&_t(oe.buffer),nr}var u=typeof t!="undefined"?t:{},c,l;u.ready=new Promise(function(F,V){c=F,l=V});var m;typeof process!="undefined"&&process.listeners&&(m={uncaughtException:process.listeners("uncaughtException"),unhandledRejection:process.listeners("unhandledRejection")});var d=Object.assign({},u),f=[],h="./this.program",g=(F,V)=>{throw V},x=typeof window=="object",b=typeof importScripts=="function",C=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",S=u.ENVIRONMENT_IS_PTHREAD||!1,k="";function _(F){return u.locateFile?u.locateFile(F,k):k+F}var E,R,D,P;function O(F){if(F instanceof Eu)return;j("exiting due to exception: "+F)}if(C){var M=Bv(),L=zv();b?k=L.dirname(k)+"/":k=__dirname+"/",E=(V,ue)=>(V=zp(V)?new URL(V):L.normalize(V),M.readFileSync(V,ue?void 0:"utf8")),D=V=>{var ue=E(V,!0);return ue.buffer||(ue=new Uint8Array(ue)),ue},R=(V,ue,Ee)=>{V=zp(V)?new URL(V):L.normalize(V),M.readFile(V,function(Be,Le){Be?Ee(Be):ue(Le.buffer)})},process.argv.length>1&&(h=process.argv[1].replace(/\\/g,"/")),f=process.argv.slice(2),process.on("uncaughtException",function(V){if(!(V instanceof Eu))throw V}),process.on("unhandledRejection",function(V){throw V}),g=(V,ue)=>{if(Bo())throw process.exitCode=V,ue;O(ue),process.exit(V)},u.inspect=function(){return"[Emscripten Module object]"};let F;try{F=RB()}catch(V){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),V}global.Worker=F.Worker}else(x||b)&&(b?k=self.location.href:typeof document!="undefined"&&document.currentScript&&(k=document.currentScript.src),typeof r!="undefined"&&r&&(k=r),k.indexOf("blob:")!==0?k=k.substr(0,k.replace(/[?#].*/,"").lastIndexOf("/")+1):k="",C||(E=F=>{var V=new XMLHttpRequest;return V.open("GET",F,!1),V.send(null),V.responseText},b&&(D=F=>{var V=new XMLHttpRequest;return V.open("GET",F,!1),V.responseType="arraybuffer",V.send(null),new Uint8Array(V.response)}),R=(F,V,ue)=>{var Ee=new XMLHttpRequest;Ee.open("GET",F,!0),Ee.responseType="arraybuffer",Ee.onload=()=>{if(Ee.status==200||Ee.status==0&&Ee.response){V(Ee.response);return}ue()},Ee.onerror=ue,Ee.send(null)}),P=F=>document.title=F);C&&typeof performance=="undefined"&&(global.performance=DB().performance);var B=console.log.bind(console),z=console.warn.bind(console);C&&(B=F=>M.writeSync(1,F+`
`),z=F=>M.writeSync(2,F+`
`));var U=u.print||B,j=u.printErr||z;Object.assign(u,d),d=null,u.arguments&&(f=u.arguments),u.thisProgram&&(h=u.thisProgram),u.quit&&(g=u.quit);var q=4,Y=Atomics.load,J=Atomics.store,re=Atomics.compareExchange,ne;u.wasmBinary&&(ne=u.wasmBinary);var ee=u.noExitRuntime||!0;typeof WebAssembly!="object"&&$u("no native wasm support detected");var oe,ie,le=!1,be;function _e(F,V){F||$u(V)}var ve=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):void 0;function Fe(F,V,ue){V>>>=0;for(var Ee=V+ue,Be=V;F[Be]&&!(Be>=Ee);)++Be;if(Be-V>16&&F.buffer&&ve)return ve.decode(F.buffer instanceof SharedArrayBuffer?F.slice(V,Be):F.subarray(V,Be));for(var Le="";V<Be;){var ge=F[V++];if(!(ge&128)){Le+=String.fromCharCode(ge);continue}var Ne=F[V++]&63;if((ge&224)==192){Le+=String.fromCharCode((ge&31)<<6|Ne);continue}var Pt=F[V++]&63;if((ge&240)==224?ge=(ge&15)<<12|Ne<<6|Pt:ge=(ge&7)<<18|Ne<<12|Pt<<6|F[V++]&63,ge<65536)Le+=String.fromCharCode(ge);else{var so=ge-65536;Le+=String.fromCharCode(55296|so>>10,56320|so&1023)}}return Le}function Pe(F,V){return F>>>=0,F?Fe(o(),F,V):""}function st(F,V,ue,Ee){if(ue>>>=0,!(Ee>0))return 0;for(var Be=ue,Le=ue+Ee-1,ge=0;ge<F.length;++ge){var Ne=F.charCodeAt(ge);if(Ne>=55296&&Ne<=57343){var Pt=F.charCodeAt(++ge);Ne=65536+((Ne&1023)<<10)|Pt&1023}if(Ne<=127){if(ue>=Le)break;V[ue++>>>0]=Ne}else if(Ne<=2047){if(ue+1>=Le)break;V[ue++>>>0]=192|Ne>>6,V[ue++>>>0]=128|Ne&63}else if(Ne<=65535){if(ue+2>=Le)break;V[ue++>>>0]=224|Ne>>12,V[ue++>>>0]=128|Ne>>6&63,V[ue++>>>0]=128|Ne&63}else{if(ue+3>=Le)break;V[ue++>>>0]=240|Ne>>18,V[ue++>>>0]=128|Ne>>12&63,V[ue++>>>0]=128|Ne>>6&63,V[ue++>>>0]=128|Ne&63}}return V[ue>>>0]=0,ue-Be}function lt(F,V,ue){return st(F,o(),V,ue)}var Ge,mt,it,gt,xt,Lr,Lt,to,nr;S&&(Ge=u.buffer);function _t(F){Ge=F,u.HEAP8=mt=new Int8Array(F),u.HEAP16=gt=new Int16Array(F),u.HEAP32=Lr=new Int32Array(F),u.HEAPU8=it=new Uint8Array(F),u.HEAPU16=xt=new Uint16Array(F),u.HEAPU32=Lt=new Uint32Array(F),u.HEAPF32=to=new Float32Array(F),u.HEAPF64=nr=new Float64Array(F)}var sr=u.INITIAL_MEMORY||16777216;if(S)oe=u.wasmMemory,Ge=u.buffer;else if(u.wasmMemory)oe=u.wasmMemory;else if(oe=new WebAssembly.Memory({initial:sr/65536,maximum:65536,shared:!0}),!(oe.buffer instanceof SharedArrayBuffer))throw j("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),C&&j("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");oe&&(Ge=oe.buffer),sr=Ge.byteLength,_t(Ge);var ar,ro=[],oo=[],hr=[],Wa=!1;function Bo(){return ee}function Ks(){if(u.preRun)for(typeof u.preRun=="function"&&(u.preRun=[u.preRun]);u.preRun.length;)sl(u.preRun.shift());ul(ro)}function Yt(){Wa=!0,!S&&ul(oo)}function Ua(){if(!S){if(u.postRun)for(typeof u.postRun=="function"&&(u.postRun=[u.postRun]);u.postRun.length;)l0(u.postRun.shift());ul(hr)}}function sl(F){ro.unshift(F)}function al(F){oo.unshift(F)}function l0(F){hr.unshift(F)}var Ti=0,Bp=null,Ga=null;function Cy(F){Ti++,u.monitorRunDependencies&&u.monitorRunDependencies(Ti)}function wm(F){if(Ti--,u.monitorRunDependencies&&u.monitorRunDependencies(Ti),Ti==0&&(Bp!==null&&(clearInterval(Bp),Bp=null),Ga)){var V=Ga;Ga=null,V()}}function $u(F){u.onAbort&&u.onAbort(F),F="Aborted("+F+")",j(F),le=!0,be=1,F+=". Build with -sASSERTIONS for more info.";var V=new WebAssembly.RuntimeError(F);throw l(V),V}var wy="data:application/octet-stream;base64,";function Sm(F){return F.startsWith(wy)}function zp(F){return F.startsWith("file://")}var gr;gr="tfjs-backend-wasm-threaded-simd.wasm",Sm(gr)||(gr=_(gr));function Im(F){try{if(F==gr&&ne)return new Uint8Array(ne);if(D)return D(F);throw"both async and sync fetching of the wasm failed"}catch(V){$u(V)}}function Sy(){if(!ne&&(x||b)){if(typeof fetch=="function"&&!zp(gr))return fetch(gr,{credentials:"same-origin"}).then(function(F){if(!F.ok)throw"failed to load wasm binary file at '"+gr+"'";return F.arrayBuffer()}).catch(function(){return Im(gr)});if(R)return new Promise(function(F,V){R(gr,function(ue){F(new Uint8Array(ue))},V)})}return Promise.resolve().then(function(){return Im(gr)})}function Iy(){var F={env:Om,wasi_snapshot_preview1:Om};function V(ge,Ne){var Pt=ge.exports;if(u.asm=Pt,Dy(u.asm._emscripten_tls_init),ar=u.asm.__indirect_function_table,al(u.asm.__wasm_call_ctors),ie=Ne,!S){var so=Me.unusedWorkers.length;Me.unusedWorkers.forEach(function(Ka){Me.loadWasmModuleToWorker(Ka,function(){--so||wm("wasm-instantiate")})})}}S||Cy("wasm-instantiate");function ue(ge){V(ge.instance,ge.module)}function Ee(ge){return Sy().then(function(Ne){return WebAssembly.instantiate(Ne,F)}).then(function(Ne){return Ne}).then(ge,function(Ne){j("failed to asynchronously prepare wasm: "+Ne),$u(Ne)})}function Be(){return!ne&&typeof WebAssembly.instantiateStreaming=="function"&&!Sm(gr)&&!zp(gr)&&!C&&typeof fetch=="function"?fetch(gr,{credentials:"same-origin"}).then(function(ge){var Ne=WebAssembly.instantiateStreaming(ge,F);return Ne.then(ue,function(Pt){return j("wasm streaming compile failed: "+Pt),j("falling back to ArrayBuffer instantiation"),Ee(ue)})}):Ee(ue)}if(u.instantiateWasm)try{var Le=u.instantiateWasm(F,V);return Le}catch(ge){j("Module.instantiateWasm callback failed with error: "+ge),l(ge)}return Be().catch(l),{}}var m0,d0,vm={};function Eu(F){this.name="ExitStatus",this.message="Program terminated with exit("+F+")",this.status=F}function vy(F){var V=Me.pthreads[F];delete Me.pthreads[F],V.terminate(),jC(F),Me.runningWorkers.splice(Me.runningWorkers.indexOf(V),1),V.pthread_ptr=0}function ky(F){var V=Me.pthreads[F];V.postMessage({cmd:"cancel"})}function il(F){var V=Me.pthreads[F];_e(V),Me.returnWorkerToPool(V)}function Ny(F){var V=Me.getNewWorker();if(!V)return 6;Me.runningWorkers.push(V),Me.pthreads[F.pthread_ptr]=V,V.pthread_ptr=F.pthread_ptr;var ue={cmd:"run",start_routine:F.startRoutine,arg:F.arg,pthread_ptr:F.pthread_ptr};return V.runPthread=()=>{C&&V.ref(),V.postMessage(ue,F.transferList),delete V.runPthread},V.loaded&&V.runPthread(),0}var km={varargs:void 0,get:function(){km.varargs+=4;var F=s()[km.varargs-4>>>2];return F},getStr:function(F){var V=Pe(F);return V}};function Nm(F){if(S)return _i(1,1,F);be=F,Bo()||(Me.terminateAllThreads(),u.onExit&&u.onExit(F),le=!0),g(F,new Eu(F))}function Ty(F,V){if(be=F,!V&&S)throw _m(F),"unwind";Nm(F)}var Tm=Ty;function _y(F){if(F instanceof Eu||F=="unwind")return be;g(1,F)}var Me={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init:function(){S?Me.initWorker():Me.initMainThread()},initMainThread:function(){for(var F=8;F--;)Me.allocateUnusedWorker()},initWorker:function(){ee=!1},setExitStatus:function(F){be=F},terminateAllThreads:function(){for(var F of Object.values(Me.pthreads))Me.returnWorkerToPool(F);for(var F of Me.unusedWorkers)F.terminate();Me.unusedWorkers=[]},returnWorkerToPool:function(F){var V=F.pthread_ptr;delete Me.pthreads[V],Me.unusedWorkers.push(F),Me.runningWorkers.splice(Me.runningWorkers.indexOf(F),1),F.pthread_ptr=0,C&&F.unref(),jC(V)},receiveObjectTransfer:function(F){},threadInitTLS:function(){Me.tlsInitFunctions.forEach(F=>F())},loadWasmModuleToWorker:function(F,V){F.onmessage=Le=>{var ge=Le.data,Ne=ge.cmd;if(F.pthread_ptr&&(Me.currentProxiedOperationCallerThread=F.pthread_ptr),ge.targetThread&&ge.targetThread!=Wm()){var Pt=Me.pthreads[ge.targetThread];Pt?Pt.postMessage(ge,ge.transferList):j('Internal error! Worker sent a message "'+Ne+'" to target pthread '+ge.targetThread+", but that thread no longer exists!"),Me.currentProxiedOperationCallerThread=void 0;return}Ne==="processProxyingQueue"?pl(ge.queue):Ne==="spawnThread"?Ny(ge):Ne==="cleanupThread"?il(ge.thread):Ne==="killThread"?vy(ge.thread):Ne==="cancelThread"?ky(ge.thread):Ne==="loaded"?(F.loaded=!0,C&&F.unref(),V&&V(F),F.runPthread&&F.runPthread()):Ne==="print"?U("Thread "+ge.threadId+": "+ge.text):Ne==="printErr"?j("Thread "+ge.threadId+": "+ge.text):Ne==="alert"?alert("Thread "+ge.threadId+": "+ge.text):ge.target==="setimmediate"?F.postMessage(ge):Ne==="callHandler"?u[ge.handler](...ge.args):Ne&&j("worker sent an unknown command "+Ne),Me.currentProxiedOperationCallerThread=void 0},F.onerror=Le=>{var ge="worker sent an error!";throw j(ge+" "+Le.filename+":"+Le.lineno+": "+Le.message),Le},C&&(F.on("message",function(Le){F.onmessage({data:Le})}),F.on("error",function(Le){F.onerror(Le)}),F.on("detachedExit",function(){}));var ue=[],Ee=["onExit","onAbort","print","printErr"];for(var Be of Ee)u.hasOwnProperty(Be)&&ue.push(Be);F.postMessage({cmd:"load",handlers:ue,urlOrBlob:u.mainScriptUrlOrBlob||r,wasmMemory:oe,wasmModule:ie})},allocateUnusedWorker:function(){var F,V=_("tfjs-backend-wasm-threaded-simd.worker.js");F=new Worker(V),Me.unusedWorkers.push(F)},getNewWorker:function(){return Me.unusedWorkers.length==0&&(Me.allocateUnusedWorker(),Me.loadWasmModuleToWorker(Me.unusedWorkers[0])),Me.unusedWorkers.pop()}};u.PThread=Me;function ul(F){for(;F.length>0;)F.shift()(u)}function $y(){var F=Wm(),V=s()[F+52>>>2],ue=s()[F+56>>>2],Ee=V-ue;b0(V,Ee),Um(V)}u.establishStackSpace=$y;function _m(F){if(S)return _i(2,0,F);try{Tm(F)}catch(V){_y(V)}}var Vp=[];function Ey(F){var V=Vp[F];return V||(F>=Vp.length&&(Vp.length=F+1),Vp[F]=V=ar.get(F)),V}function Ry(F,V){var ue=Ey(F)(V);Bo()?Me.setExitStatus(ue):y0(ue)}u.invokeEntryPoint=Ry;function Dy(F){Me.tlsInitFunctions.push(F)}function Ay(F){h0(F,!b,1,!x),Me.threadInitTLS()}function Fy(F){S?postMessage({cmd:"cleanupThread",thread:F}):il(F)}function $m(F,V,ue,Ee){return S?_i(3,1,F,V,ue,Ee):Em(F,V,ue,Ee)}function Em(F,V,ue,Ee){if(typeof SharedArrayBuffer=="undefined")return j("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var Be=[],Le=0;if(S&&(Be.length===0||Le))return $m(F,V,ue,Ee);if(Le)return Le;var ge={startRoutine:ue,pthread_ptr:F,arg:Ee,transferList:Be};return S?(ge.cmd="spawnThread",postMessage(ge,Be),0):Ny(ge)}function Py(){return 65536}var Oy=!0;function My(){return Oy}function pl(F){Atomics.store(s(),F>>2,1),Wm()&&x0(F),Atomics.compareExchange(s(),F>>2,1,0)}u.executeNotifiedProxyingQueue=pl;function Ly(F,V,ue,Ee){if(F==V)setTimeout(()=>pl(Ee));else if(S)postMessage({targetThread:F,cmd:"processProxyingQueue",queue:Ee});else{var Be=Me.pthreads[F];if(!Be)return;Be.postMessage({cmd:"processProxyingQueue",queue:Ee})}return 1}function By(F,V,ue){return-1}function zy(){$u("")}function Ru(F){Ru.shown||(Ru.shown={}),Ru.shown[F]||(Ru.shown[F]=1,C&&(F="warning: "+F),j(F))}function Vy(){C||b||Ru("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread")}function Wy(){return Date.now()}function Rm(){return 4294901760}function Uy(){return Rm()}var cl;C?cl=()=>{var F=process.hrtime();return F[0]*1e3+F[1]/1e6}:cl=()=>performance.timeOrigin+performance.now();function Gy(F,V,ue){o().copyWithin(F>>>0,V>>>0,V+ue>>>0)}function Hy(){return C?AB().cpus().length:navigator.hardwareConcurrency}function Ky(F){var V=XC(),ue=F();return Um(V),ue}function _i(F,V){var ue=arguments.length-2,Ee=arguments;return Ky(()=>{for(var Be=ue,Le=Gm(Be*8),ge=Le>>3,Ne=0;Ne<ue;Ne++){var Pt=Ee[2+Ne];p()[ge+Ne>>>0]=Pt}return g0(F,Be,Le,V)})}var ll=[];function qy(F,V,ue){ll.length=V;for(var Ee=ue>>3,Be=0;Be<V;Be++)ll[Be]=p()[Ee+Be>>>0];var Le=F<0,ge=Le?vm[-F-1]:rb[F];return ge.apply(null,ll)}function jy(F){try{return oe.grow(F-Ge.byteLength+65535>>>16),_t(oe.buffer),1}catch(V){}}function Xy(F){var V=o().length;if(F=F>>>0,F<=V)return!1;var ue=Rm();if(F>ue)return!1;let Ee=(Pt,so)=>Pt+(so-Pt%so)%so;for(var Be=1;Be<=4;Be*=2){var Le=V*(1+.2/Be);Le=Math.min(Le,F+100663296);var ge=Math.min(ue,Ee(Math.max(F,Le),65536)),Ne=jy(ge);if(Ne)return!0}return!1}function Yy(){throw"unwind"}function Dm(F){return S?_i(4,1,F):52}function Am(F,V,ue,Ee,Be){return S?_i(5,1,F,V,ue,Ee,Be):70}var Qy=[null,[],[]];function Zy(F,V){var ue=Qy[F];V===0||V===10?((F===1?U:j)(Fe(ue,0)),ue.length=0):ue.push(V)}function Fm(F,V,ue,Ee){if(S)return _i(6,1,F,V,ue,Ee);for(var Be=0,Le=0;Le<ue;Le++){var ge=a()[V>>>2],Ne=a()[V+4>>>2];V+=8;for(var Pt=0;Pt<Ne;Pt++)Zy(F,o()[ge+Pt>>>0]);Be+=Ne}return a()[Ee>>>2]=Be,0}function Pm(F){var V=u["_"+F];return V}function Jy(F,V){e().set(F,V>>>0)}function eb(F,V,ue,Ee,Be){var Le={string:Br=>{var Hp=0;if(Br!=null&&Br!==0){var S0=(Br.length<<2)+1;Hp=Gm(S0),lt(Br,Hp,S0)}return Hp},array:Br=>{var Hp=Gm(Br.length);return Jy(Br,Hp),Hp}};function ge(Br){return V==="string"?Pe(Br):V==="boolean"?!!Br:Br}var Ne=Pm(F),Pt=[],so=0;if(Ee)for(var Ka=0;Ka<Ee.length;Ka++){var w0=Le[ue[Ka]];w0?(so===0&&(so=XC()),Pt[Ka]=w0(Ee[Ka])):Pt[Ka]=Ee[Ka]}var YC=Ne.apply(null,Pt);function CG(Br){return so!==0&&Um(so),ge(Br)}return YC=CG(YC),YC}function tb(F,V,ue,Ee){ue=ue||[];var Be=ue.every(ge=>ge==="number"||ge==="boolean"),Le=V!=="string";return Le&&Be&&!Ee?Pm(F):function(){return eb(F,V,ue,arguments,Ee)}}Me.init();var rb=[null,Nm,_m,$m,Dm,Am,Fm],Om={__emscripten_init_main_thread_js:Ay,__emscripten_thread_cleanup:Fy,__pthread_create_js:Em,_emscripten_default_pthread_stack_size:Py,_emscripten_get_now_is_monotonic:My,_emscripten_notify_task_queue:Ly,_emscripten_set_offscreencanvas_size:By,abort:zy,emscripten_check_blocking_allowed:Vy,emscripten_date_now:Wy,emscripten_get_heap_max:Uy,emscripten_get_now:cl,emscripten_memcpy_big:Gy,emscripten_num_logical_cores:Hy,emscripten_receive_on_main_thread_js:qy,emscripten_resize_heap:Xy,emscripten_unwind_to_js_event_loop:Yy,exit:Tm,fd_close:Dm,fd_seek:Am,fd_write:Fm,memory:oe||u.wasmMemory},f0=Iy(),ob=u.___wasm_call_ctors=function(){return(ob=u.___wasm_call_ctors=u.asm.__wasm_call_ctors).apply(null,arguments)},nb=u._init=function(){return(nb=u._init=u.asm.init).apply(null,arguments)},sb=u._init_with_threads_count=function(){return(sb=u._init_with_threads_count=u.asm.init_with_threads_count).apply(null,arguments)},ab=u._get_threads_count=function(){return(ab=u._get_threads_count=u.asm.get_threads_count).apply(null,arguments)},ib=u._register_tensor=function(){return(ib=u._register_tensor=u.asm.register_tensor).apply(null,arguments)},ub=u._dispose_data=function(){return(ub=u._dispose_data=u.asm.dispose_data).apply(null,arguments)},pb=u._dispose=function(){return(pb=u._dispose=u.asm.dispose).apply(null,arguments)},cb=u._Abs=function(){return(cb=u._Abs=u.asm.Abs).apply(null,arguments)},lb=u._Acos=function(){return(lb=u._Acos=u.asm.Acos).apply(null,arguments)},mb=u._Acosh=function(){return(mb=u._Acosh=u.asm.Acosh).apply(null,arguments)},db=u._Add=function(){return(db=u._Add=u.asm.Add).apply(null,arguments)},fb=u._AddN=function(){return(fb=u._AddN=u.asm.AddN).apply(null,arguments)},hb=u._All=function(){return(hb=u._All=u.asm.All).apply(null,arguments)},gb=u._Any=function(){return(gb=u._Any=u.asm.Any).apply(null,arguments)},xb=u._ArgMax=function(){return(xb=u._ArgMax=u.asm.ArgMax).apply(null,arguments)},yb=u._ArgMin=function(){return(yb=u._ArgMin=u.asm.ArgMin).apply(null,arguments)},bb=u._Asin=function(){return(bb=u._Asin=u.asm.Asin).apply(null,arguments)},Cb=u._Asinh=function(){return(Cb=u._Asinh=u.asm.Asinh).apply(null,arguments)},wb=u._Atan=function(){return(wb=u._Atan=u.asm.Atan).apply(null,arguments)},Sb=u._Atan2=function(){return(Sb=u._Atan2=u.asm.Atan2).apply(null,arguments)},Ib=u._Atanh=function(){return(Ib=u._Atanh=u.asm.Atanh).apply(null,arguments)},vb=u._AvgPool=function(){return(vb=u._AvgPool=u.asm.AvgPool).apply(null,arguments)},kb=u._AvgPool3D=function(){return(kb=u._AvgPool3D=u.asm.AvgPool3D).apply(null,arguments)},Nb=u._AvgPool3DGrad=function(){return(Nb=u._AvgPool3DGrad=u.asm.AvgPool3DGrad).apply(null,arguments)},Tb=u._AvgPoolGrad=function(){return(Tb=u._AvgPoolGrad=u.asm.AvgPoolGrad).apply(null,arguments)},_b=u._BatchMatMul=function(){return(_b=u._BatchMatMul=u.asm.BatchMatMul).apply(null,arguments)},$b=u._Bincount=function(){return($b=u._Bincount=u.asm.Bincount).apply(null,arguments)},Eb=u._BitwiseAnd=function(){return(Eb=u._BitwiseAnd=u.asm.BitwiseAnd).apply(null,arguments)},Rb=u._Ceil=function(){return(Rb=u._Ceil=u.asm.Ceil).apply(null,arguments)},Db=u._ClipByValue=function(){return(Db=u._ClipByValue=u.asm.ClipByValue).apply(null,arguments)},Ab=u._Conv2D=function(){return(Ab=u._Conv2D=u.asm.Conv2D).apply(null,arguments)},Fb=u._Conv2DBackpropInput=function(){return(Fb=u._Conv2DBackpropInput=u.asm.Conv2DBackpropInput).apply(null,arguments)},Pb=u._Conv3D=function(){return(Pb=u._Conv3D=u.asm.Conv3D).apply(null,arguments)},Ob=u._Conv3DBackpropFilterV2=function(){return(Ob=u._Conv3DBackpropFilterV2=u.asm.Conv3DBackpropFilterV2).apply(null,arguments)},Mb=u._Conv3DBackpropInputV2=function(){return(Mb=u._Conv3DBackpropInputV2=u.asm.Conv3DBackpropInputV2).apply(null,arguments)},Lb=u._Cos=function(){return(Lb=u._Cos=u.asm.Cos).apply(null,arguments)},Bb=u._Cosh=function(){return(Bb=u._Cosh=u.asm.Cosh).apply(null,arguments)},zb=u._CropAndResize=function(){return(zb=u._CropAndResize=u.asm.CropAndResize).apply(null,arguments)},Vb=u._Cumprod=function(){return(Vb=u._Cumprod=u.asm.Cumprod).apply(null,arguments)},Wb=u._Cumsum=function(){return(Wb=u._Cumsum=u.asm.Cumsum).apply(null,arguments)},Ub=u._DenseBincount=function(){return(Ub=u._DenseBincount=u.asm.DenseBincount).apply(null,arguments)},Gb=u._DepthToSpace=function(){return(Gb=u._DepthToSpace=u.asm.DepthToSpace).apply(null,arguments)},Hb=u._DepthwiseConv2dNative=function(){return(Hb=u._DepthwiseConv2dNative=u.asm.DepthwiseConv2dNative).apply(null,arguments)},Kb=u._Diag=function(){return(Kb=u._Diag=u.asm.Diag).apply(null,arguments)},qb=u._Dilation2D=function(){return(qb=u._Dilation2D=u.asm.Dilation2D).apply(null,arguments)},jb=u._Dilation2DBackpropFilter=function(){return(jb=u._Dilation2DBackpropFilter=u.asm.Dilation2DBackpropFilter).apply(null,arguments)},Xb=u._Dilation2DBackpropInput=function(){return(Xb=u._Dilation2DBackpropInput=u.asm.Dilation2DBackpropInput).apply(null,arguments)},Yb=u._Elu=function(){return(Yb=u._Elu=u.asm.Elu).apply(null,arguments)},Qb=u._EluGrad=function(){return(Qb=u._EluGrad=u.asm.EluGrad).apply(null,arguments)},Zb=u._Equal=function(){return(Zb=u._Equal=u.asm.Equal).apply(null,arguments)},Jb=u._Erf=function(){return(Jb=u._Erf=u.asm.Erf).apply(null,arguments)},eC=u._Exp=function(){return(eC=u._Exp=u.asm.Exp).apply(null,arguments)},tC=u._Expm1=function(){return(tC=u._Expm1=u.asm.Expm1).apply(null,arguments)},rC=u._FlipLeftRight=function(){return(rC=u._FlipLeftRight=u.asm.FlipLeftRight).apply(null,arguments)},oC=u._Floor=function(){return(oC=u._Floor=u.asm.Floor).apply(null,arguments)},nC=u._FloorDiv=function(){return(nC=u._FloorDiv=u.asm.FloorDiv).apply(null,arguments)},sC=u._FusedBatchNorm=function(){return(sC=u._FusedBatchNorm=u.asm.FusedBatchNorm).apply(null,arguments)},aC=u._FusedConv2D=function(){return(aC=u._FusedConv2D=u.asm.FusedConv2D).apply(null,arguments)},iC=u._FusedDepthwiseConv2D=function(){return(iC=u._FusedDepthwiseConv2D=u.asm.FusedDepthwiseConv2D).apply(null,arguments)},uC=u._Gather=function(){return(uC=u._Gather=u.asm.Gather).apply(null,arguments)},pC=u._GatherNd=function(){return(pC=u._GatherNd=u.asm.GatherNd).apply(null,arguments)},cC=u._Greater=function(){return(cC=u._Greater=u.asm.Greater).apply(null,arguments)},lC=u._GreaterEqual=function(){return(lC=u._GreaterEqual=u.asm.GreaterEqual).apply(null,arguments)},mC=u._IsFinite=function(){return(mC=u._IsFinite=u.asm.IsFinite).apply(null,arguments)},dC=u._IsInf=function(){return(dC=u._IsInf=u.asm.IsInf).apply(null,arguments)},fC=u._IsNan=function(){return(fC=u._IsNan=u.asm.IsNan).apply(null,arguments)},hC=u._LRN=function(){return(hC=u._LRN=u.asm.LRN).apply(null,arguments)},gC=u._LRNGrad=function(){return(gC=u._LRNGrad=u.asm.LRNGrad).apply(null,arguments)},xC=u._LeakyRelu=function(){return(xC=u._LeakyRelu=u.asm.LeakyRelu).apply(null,arguments)},yC=u._Less=function(){return(yC=u._Less=u.asm.Less).apply(null,arguments)},bC=u._LessEqual=function(){return(bC=u._LessEqual=u.asm.LessEqual).apply(null,arguments)},CC=u._LinSpace=function(){return(CC=u._LinSpace=u.asm.LinSpace).apply(null,arguments)},wC=u._Log=function(){return(wC=u._Log=u.asm.Log).apply(null,arguments)},SC=u._Log1p=function(){return(SC=u._Log1p=u.asm.Log1p).apply(null,arguments)},IC=u._LogicalAnd=function(){return(IC=u._LogicalAnd=u.asm.LogicalAnd).apply(null,arguments)},vC=u._LogicalNot=function(){return(vC=u._LogicalNot=u.asm.LogicalNot).apply(null,arguments)},kC=u._LogicalOr=function(){return(kC=u._LogicalOr=u.asm.LogicalOr).apply(null,arguments)},NC=u._LogicalXor=function(){return(NC=u._LogicalXor=u.asm.LogicalXor).apply(null,arguments)},TC=u._Max=function(){return(TC=u._Max=u.asm.Max).apply(null,arguments)},_C=u._MaxPool=function(){return(_C=u._MaxPool=u.asm.MaxPool).apply(null,arguments)},$C=u._MaxPool3D=function(){return($C=u._MaxPool3D=u.asm.MaxPool3D).apply(null,arguments)},EC=u._MaxPool3DGrad=function(){return(EC=u._MaxPool3DGrad=u.asm.MaxPool3DGrad).apply(null,arguments)},RC=u._MaxPoolGrad=function(){return(RC=u._MaxPoolGrad=u.asm.MaxPoolGrad).apply(null,arguments)},DC=u._MaxPoolWithArgmax=function(){return(DC=u._MaxPoolWithArgmax=u.asm.MaxPoolWithArgmax).apply(null,arguments)},AC=u._Maximum=function(){return(AC=u._Maximum=u.asm.Maximum).apply(null,arguments)},FC=u._Mean=function(){return(FC=u._Mean=u.asm.Mean).apply(null,arguments)},PC=u._Min=function(){return(PC=u._Min=u.asm.Min).apply(null,arguments)},OC=u._Minimum=function(){return(OC=u._Minimum=u.asm.Minimum).apply(null,arguments)},MC=u._MirrorPad=function(){return(MC=u._MirrorPad=u.asm.MirrorPad).apply(null,arguments)},LC=u._Mod=function(){return(LC=u._Mod=u.asm.Mod).apply(null,arguments)},BC=u._Multinomial=function(){return(BC=u._Multinomial=u.asm.Multinomial).apply(null,arguments)},zC=u._Multiply=function(){return(zC=u._Multiply=u.asm.Multiply).apply(null,arguments)},VC=u._Neg=function(){return(VC=u._Neg=u.asm.Neg).apply(null,arguments)},WC=u._NonMaxSuppressionV3=function(){return(WC=u._NonMaxSuppressionV3=u.asm.NonMaxSuppressionV3).apply(null,arguments)},UC=u._NonMaxSuppressionV4=function(){return(UC=u._NonMaxSuppressionV4=u.asm.NonMaxSuppressionV4).apply(null,arguments)},Mm=u._NonMaxSuppressionV5=function(){return(Mm=u._NonMaxSuppressionV5=u.asm.NonMaxSuppressionV5).apply(null,arguments)},Lm=u._NotEqual=function(){return(Lm=u._NotEqual=u.asm.NotEqual).apply(null,arguments)},ml=u._OneHot=function(){return(ml=u._OneHot=u.asm.OneHot).apply(null,arguments)},GC=u._PadV2=function(){return(GC=u._PadV2=u.asm.PadV2).apply(null,arguments)},HC=u._Pow=function(){return(HC=u._Pow=u.asm.Pow).apply(null,arguments)},Wp=u._Prelu=function(){return(Wp=u._Prelu=u.asm.Prelu).apply(null,arguments)},Bm=u._Prod=function(){return(Bm=u._Prod=u.asm.Prod).apply(null,arguments)},Up=u._RealDiv=function(){return(Up=u._RealDiv=u.asm.RealDiv).apply(null,arguments)},Gp=u._Reciprocal=function(){return(Gp=u._Reciprocal=u.asm.Reciprocal).apply(null,arguments)},KC=u._Relu=function(){return(KC=u._Relu=u.asm.Relu).apply(null,arguments)},K=u._Relu6=function(){return(K=u._Relu6=u.asm.Relu6).apply(null,arguments)},ae=u._ResizeBilinear=function(){return(ae=u._ResizeBilinear=u.asm.ResizeBilinear).apply(null,arguments)},$e=u._ResizeBilinearGrad=function(){return($e=u._ResizeBilinearGrad=u.asm.ResizeBilinearGrad).apply(null,arguments)},at=u._ResizeNearestNeighbor=function(){return(at=u._ResizeNearestNeighbor=u.asm.ResizeNearestNeighbor).apply(null,arguments)},$t=u._ResizeNearestNeighborGrad=function(){return($t=u._ResizeNearestNeighborGrad=u.asm.ResizeNearestNeighborGrad).apply(null,arguments)},Et=u._Reverse=function(){return(Et=u._Reverse=u.asm.Reverse).apply(null,arguments)},Qe=u._RotateWithOffset=function(){return(Qe=u._RotateWithOffset=u.asm.RotateWithOffset).apply(null,arguments)},Ke=u._Round=function(){return(Ke=u._Round=u.asm.Round).apply(null,arguments)},Gt=u._Rsqrt=function(){return(Gt=u._Rsqrt=u.asm.Rsqrt).apply(null,arguments)},no=u._ScatterNd=function(){return(no=u._ScatterNd=u.asm.ScatterNd).apply(null,arguments)},Ha=u._SearchSorted=function(){return(Ha=u._SearchSorted=u.asm.SearchSorted).apply(null,arguments)},zm=u._SelectV2=function(){return(zm=u._SelectV2=u.asm.SelectV2).apply(null,arguments)},dl=u._Selu=function(){return(dl=u._Selu=u.asm.Selu).apply(null,arguments)},qC=u._Sigmoid=function(){return(qC=u._Sigmoid=u.asm.Sigmoid).apply(null,arguments)},br=u._Sign=function(){return(br=u._Sign=u.asm.Sign).apply(null,arguments)},$i=u._Sin=function(){return($i=u._Sin=u.asm.Sin).apply(null,arguments)},Vm=u._Sinh=function(){return(Vm=u._Sinh=u.asm.Sinh).apply(null,arguments)},WU=u._Softmax=function(){return(WU=u._Softmax=u.asm.Softmax).apply(null,arguments)},UU=u._Softplus=function(){return(UU=u._Softplus=u.asm.Softplus).apply(null,arguments)},GU=u._SparseFillEmptyRows=function(){return(GU=u._SparseFillEmptyRows=u.asm.SparseFillEmptyRows).apply(null,arguments)},HU=u._SparseReshape=function(){return(HU=u._SparseReshape=u.asm.SparseReshape).apply(null,arguments)},KU=u._SparseSegmentReduction=function(){return(KU=u._SparseSegmentReduction=u.asm.SparseSegmentReduction).apply(null,arguments)},qU=u._SparseToDense=function(){return(qU=u._SparseToDense=u.asm.SparseToDense).apply(null,arguments)},jU=u._Sqrt=function(){return(jU=u._Sqrt=u.asm.Sqrt).apply(null,arguments)},XU=u._Square=function(){return(XU=u._Square=u.asm.Square).apply(null,arguments)},YU=u._SquaredDifference=function(){return(YU=u._SquaredDifference=u.asm.SquaredDifference).apply(null,arguments)},QU=u._Step=function(){return(QU=u._Step=u.asm.Step).apply(null,arguments)},ZU=u._StridedSlice=function(){return(ZU=u._StridedSlice=u.asm.StridedSlice).apply(null,arguments)},JU=u._Sub=function(){return(JU=u._Sub=u.asm.Sub).apply(null,arguments)},eG=u._Sum=function(){return(eG=u._Sum=u.asm.Sum).apply(null,arguments)},tG=u._Tan=function(){return(tG=u._Tan=u.asm.Tan).apply(null,arguments)},rG=u._Tanh=function(){return(rG=u._Tanh=u.asm.Tanh).apply(null,arguments)},oG=u._TensorScatterUpdate=function(){return(oG=u._TensorScatterUpdate=u.asm.TensorScatterUpdate).apply(null,arguments)},nG=u._Tile=function(){return(nG=u._Tile=u.asm.Tile).apply(null,arguments)},sG=u._TopK=function(){return(sG=u._TopK=u.asm.TopK).apply(null,arguments)},aG=u._Transform=function(){return(aG=u._Transform=u.asm.Transform).apply(null,arguments)},iG=u._Transpose=function(){return(iG=u._Transpose=u.asm.Transpose).apply(null,arguments)},uG=u.__FusedMatMul=function(){return(uG=u.__FusedMatMul=u.asm._FusedMatMul).apply(null,arguments)},pG=u._malloc=function(){return(pG=u._malloc=u.asm.malloc).apply(null,arguments)},cG=u._free=function(){return(cG=u._free=u.asm.free).apply(null,arguments)},lG=u.__emscripten_tls_init=function(){return(lG=u.__emscripten_tls_init=u.asm._emscripten_tls_init).apply(null,arguments)},Wm=u._pthread_self=function(){return(Wm=u._pthread_self=u.asm.pthread_self).apply(null,arguments)},mG=u.___errno_location=function(){return(mG=u.___errno_location=u.asm.__errno_location).apply(null,arguments)},h0=u.__emscripten_thread_init=function(){return(h0=u.__emscripten_thread_init=u.asm._emscripten_thread_init).apply(null,arguments)},dG=u.__emscripten_thread_crashed=function(){return(dG=u.__emscripten_thread_crashed=u.asm._emscripten_thread_crashed).apply(null,arguments)},fG=u._emscripten_main_thread_process_queued_calls=function(){return(fG=u._emscripten_main_thread_process_queued_calls=u.asm.emscripten_main_thread_process_queued_calls).apply(null,arguments)},hG=u._emscripten_main_browser_thread_id=function(){return(hG=u._emscripten_main_browser_thread_id=u.asm.emscripten_main_browser_thread_id).apply(null,arguments)},g0=u._emscripten_run_in_main_runtime_thread_js=function(){return(g0=u._emscripten_run_in_main_runtime_thread_js=u.asm.emscripten_run_in_main_runtime_thread_js).apply(null,arguments)},gG=u._emscripten_dispatch_to_thread_=function(){return(gG=u._emscripten_dispatch_to_thread_=u.asm.emscripten_dispatch_to_thread_).apply(null,arguments)},x0=u.__emscripten_proxy_execute_task_queue=function(){return(x0=u.__emscripten_proxy_execute_task_queue=u.asm._emscripten_proxy_execute_task_queue).apply(null,arguments)},jC=u.__emscripten_thread_free_data=function(){return(jC=u.__emscripten_thread_free_data=u.asm._emscripten_thread_free_data).apply(null,arguments)},y0=u.__emscripten_thread_exit=function(){return(y0=u.__emscripten_thread_exit=u.asm._emscripten_thread_exit).apply(null,arguments)},b0=u._emscripten_stack_set_limits=function(){return(b0=u._emscripten_stack_set_limits=u.asm.emscripten_stack_set_limits).apply(null,arguments)},XC=u.stackSave=function(){return(XC=u.stackSave=u.asm.stackSave).apply(null,arguments)},Um=u.stackRestore=function(){return(Um=u.stackRestore=u.asm.stackRestore).apply(null,arguments)},Gm=u.stackAlloc=function(){return(Gm=u.stackAlloc=u.asm.stackAlloc).apply(null,arguments)},xG=u.dynCall_iijjiiii=function(){return(xG=u.dynCall_iijjiiii=u.asm.dynCall_iijjiiii).apply(null,arguments)},yG=u.dynCall_jiji=function(){return(yG=u.dynCall_jiji=u.asm.dynCall_jiji).apply(null,arguments)};u.keepRuntimeAlive=Bo,u.wasmMemory=oe,u.cwrap=tb,u.ExitStatus=Eu,u.PThread=Me;var Hm;Ga=function F(){Hm||C0(),Hm||(Ga=F)};function C0(F){if(F=F||f,Ti>0)return;if(S){c(u),Yt(),startWorker(u);return}if(Ks(),Ti>0)return;function V(){Hm||(Hm=!0,u.calledRun=!0,!le&&(Yt(),c(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),Ua()))}u.setStatus?(u.setStatus("Running..."),setTimeout(function(){setTimeout(function(){u.setStatus("")},1),V()},1)):V()}if(u.preInit)for(typeof u.preInit=="function"&&(u.preInit=[u.preInit]);u.preInit.length>0;)u.preInit.pop()();C0();var Km;m&&(Km={uncaughtException:process.listeners("uncaughtException").filter(function(F){return!m.uncaughtException.indexOf(F)>-1}),unhandledRejection:process.listeners("unhandledRejection").filter(function(F){return!m.unhandledRejection.indexOf(F)>-1})});var qm;if(typeof WasmBackendModule!="undefined")qm=WasmBackendModule;else if(typeof t!="undefined")qm=t;else throw new Error("Could not find wasm module in post.js");if(Km){var bG=qm._dispose;qm._dispose=function(){bG(),Km.uncaughtException.forEach(function(F){process.removeListener("uncaughtException",F)}),Km.unhandledRejection.forEach(function(F){process.removeListener("unhandledRejection",F)})}}return t.ready}})();typeof Wg=="object"&&typeof Wv=="object"?Wv.exports=Vv:typeof define=="function"&&define.amd?define([],function(){return Vv}):typeof Wg=="object"&&(Wg.WasmBackendModuleThreadedSimd=Vv)});var OB=qt((UFt,PB)=>{PB.exports.wasmWorkerContents=`"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f)},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"
");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"})};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=function(){postMessage({cmd:"callHandler",handler:handler,args:[...arguments]})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};`});var MB=qt((Ug,Gv)=>{var Uv=(()=>{var r=typeof document!="undefined"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename!="undefined"&&(r=r||__filename),function(t){t=t||{};var e=typeof t!="undefined"?t:{},o,n;e.ready=new Promise(function(K,ae){o=K,n=ae});var s;typeof process!="undefined"&&process.listeners&&(s={uncaughtException:process.listeners("uncaughtException"),unhandledRejection:process.listeners("unhandledRejection")});var a=Object.assign({},e),i=[],p="./this.program",u=(K,ae)=>{throw ae},c=typeof window=="object",l=typeof importScripts=="function",m=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",d="";function f(K){return e.locateFile?e.locateFile(K,d):d+K}var h,g,x,b;function C(K){if(K instanceof Bp)return;E("exiting due to exception: "+K)}if(m){var S=Bv(),k=zv();l?d=k.dirname(d)+"/":d=__dirname+"/",h=(K,ae)=>(K=Ks(K)?new URL(K):k.normalize(K),S.readFileSync(K,ae?void 0:"utf8")),x=K=>{var ae=h(K,!0);return ae.buffer||(ae=new Uint8Array(ae)),ae},g=(K,ae,$e)=>{K=Ks(K)?new URL(K):k.normalize(K),S.readFile(K,function(at,$t){at?$e(at):ae($t.buffer)})},process.argv.length>1&&(p=process.argv[1].replace(/\\/g,"/")),i=process.argv.slice(2),process.on("uncaughtException",function(K){if(!(K instanceof Bp))throw K}),process.on("unhandledRejection",function(K){throw K}),u=(K,ae)=>{if(it())throw process.exitCode=K,ae;C(ae),process.exit(K)},e.inspect=function(){return"[Emscripten Module object]"}}else(c||l)&&(l?d=self.location.href:typeof document!="undefined"&&document.currentScript&&(d=document.currentScript.src),r&&(d=r),d.indexOf("blob:")!==0?d=d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1):d="",h=K=>{var ae=new XMLHttpRequest;return ae.open("GET",K,!1),ae.send(null),ae.responseText},l&&(x=K=>{var ae=new XMLHttpRequest;return ae.open("GET",K,!1),ae.responseType="arraybuffer",ae.send(null),new Uint8Array(ae.response)}),g=(K,ae,$e)=>{var at=new XMLHttpRequest;at.open("GET",K,!0),at.responseType="arraybuffer",at.onload=()=>{if(at.status==200||at.status==0&&at.response){ae(at.response);return}$e()},at.onerror=$e,at.send(null)},b=K=>document.title=K);var _=e.print||console.log.bind(console),E=e.printErr||console.warn.bind(console);Object.assign(e,a),a=null,e.arguments&&(i=e.arguments),e.thisProgram&&(p=e.thisProgram),e.quit&&(u=e.quit);var R=4,D;e.wasmBinary&&(D=e.wasmBinary);var P=e.noExitRuntime||!0;typeof WebAssembly!="object"&&hr("no native wasm support detected");var O,M=!1,L;function B(K,ae){K||hr(ae)}var z=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):void 0;function U(K,ae,$e){ae>>>=0;for(var at=ae+$e,$t=ae;K[$t]&&!($t>=at);)++$t;if($t-ae>16&&K.buffer&&z)return z.decode(K.subarray(ae,$t));for(var Et="";ae<$t;){var Qe=K[ae++];if(!(Qe&128)){Et+=String.fromCharCode(Qe);continue}var Ke=K[ae++]&63;if((Qe&224)==192){Et+=String.fromCharCode((Qe&31)<<6|Ke);continue}var Gt=K[ae++]&63;if((Qe&240)==224?Qe=(Qe&15)<<12|Ke<<6|Gt:Qe=(Qe&7)<<18|Ke<<12|Gt<<6|K[ae++]&63,Qe<65536)Et+=String.fromCharCode(Qe);else{var no=Qe-65536;Et+=String.fromCharCode(55296|no>>10,56320|no&1023)}}return Et}function j(K,ae){return K>>>=0,K?U(ne,K,ae):""}function q(K,ae,$e,at){if($e>>>=0,!(at>0))return 0;for(var $t=$e,Et=$e+at-1,Qe=0;Qe<K.length;++Qe){var Ke=K.charCodeAt(Qe);if(Ke>=55296&&Ke<=57343){var Gt=K.charCodeAt(++Qe);Ke=65536+((Ke&1023)<<10)|Gt&1023}if(Ke<=127){if($e>=Et)break;ae[$e++>>>0]=Ke}else if(Ke<=2047){if($e+1>=Et)break;ae[$e++>>>0]=192|Ke>>6,ae[$e++>>>0]=128|Ke&63}else if(Ke<=65535){if($e+2>=Et)break;ae[$e++>>>0]=224|Ke>>12,ae[$e++>>>0]=128|Ke>>6&63,ae[$e++>>>0]=128|Ke&63}else{if($e+3>=Et)break;ae[$e++>>>0]=240|Ke>>18,ae[$e++>>>0]=128|Ke>>12&63,ae[$e++>>>0]=128|Ke>>6&63,ae[$e++>>>0]=128|Ke&63}}return ae[$e>>>0]=0,$e-$t}function Y(K,ae,$e){return q(K,ne,ae,$e)}var J,re,ne,ee,oe,ie,le,be,_e;function ve(K){J=K,e.HEAP8=re=new Int8Array(K),e.HEAP16=ee=new Int16Array(K),e.HEAP32=ie=new Int32Array(K),e.HEAPU8=ne=new Uint8Array(K),e.HEAPU16=oe=new Uint16Array(K),e.HEAPU32=le=new Uint32Array(K),e.HEAPF32=be=new Float32Array(K),e.HEAPF64=_e=new Float64Array(K)}var Fe=e.INITIAL_MEMORY||16777216,Pe,st=[],lt=[],Ge=[],mt=!1;function it(){return P}function gt(){if(e.preRun)for(typeof e.preRun=="function"&&(e.preRun=[e.preRun]);e.preRun.length;)Lt(e.preRun.shift());Ga(st)}function xt(){mt=!0,Ga(lt)}function Lr(){if(e.postRun)for(typeof e.postRun=="function"&&(e.postRun=[e.postRun]);e.postRun.length;)nr(e.postRun.shift());Ga(Ge)}function Lt(K){st.unshift(K)}function to(K){lt.unshift(K)}function nr(K){Ge.unshift(K)}var _t=0,sr=null,ar=null;function ro(K){_t++,e.monitorRunDependencies&&e.monitorRunDependencies(_t)}function oo(K){if(_t--,e.monitorRunDependencies&&e.monitorRunDependencies(_t),_t==0&&(sr!==null&&(clearInterval(sr),sr=null),ar)){var ae=ar;ar=null,ae()}}function hr(K){e.onAbort&&e.onAbort(K),K="Aborted("+K+")",E(K),M=!0,L=1,K+=". Build with -sASSERTIONS for more info.";var ae=new WebAssembly.RuntimeError(K);throw n(ae),ae}var Wa="data:application/octet-stream;base64,";function Bo(K){return K.startsWith(Wa)}function Ks(K){return K.startsWith("file://")}var Yt;Yt="tfjs-backend-wasm.wasm",Bo(Yt)||(Yt=f(Yt));function Ua(K){try{if(K==Yt&&D)return new Uint8Array(D);if(x)return x(K);throw"both async and sync fetching of the wasm failed"}catch(ae){hr(ae)}}function sl(){if(!D&&(c||l)){if(typeof fetch=="function"&&!Ks(Yt))return fetch(Yt,{credentials:"same-origin"}).then(function(K){if(!K.ok)throw"failed to load wasm binary file at '"+Yt+"'";return K.arrayBuffer()}).catch(function(){return Ua(Yt)});if(g)return new Promise(function(K,ae){g(Yt,function($e){K(new Uint8Array($e))},ae)})}return Promise.resolve().then(function(){return Ua(Yt)})}function al(){var K={env:il,wasi_snapshot_preview1:il};function ae(Qe,Ke){var Gt=Qe.exports;e.asm=Gt,O=e.asm.memory,ve(O.buffer),Pe=e.asm.__indirect_function_table,to(e.asm.__wasm_call_ctors),oo("wasm-instantiate")}ro("wasm-instantiate");function $e(Qe){ae(Qe.instance)}function at(Qe){return sl().then(function(Ke){return WebAssembly.instantiate(Ke,K)}).then(function(Ke){return Ke}).then(Qe,function(Ke){E("failed to asynchronously prepare wasm: "+Ke),hr(Ke)})}function $t(){return!D&&typeof WebAssembly.instantiateStreaming=="function"&&!Bo(Yt)&&!Ks(Yt)&&!m&&typeof fetch=="function"?fetch(Yt,{credentials:"same-origin"}).then(function(Qe){var Ke=WebAssembly.instantiateStreaming(Qe,K);return Ke.then($e,function(Gt){return E("wasm streaming compile failed: "+Gt),E("falling back to ArrayBuffer instantiation"),at($e)})}):at($e)}if(e.instantiateWasm)try{var Et=e.instantiateWasm(K,ae);return Et}catch(Qe){E("Module.instantiateWasm callback failed with error: "+Qe),n(Qe)}return $t().catch(n),{}}var l0,Ti;function Bp(K){this.name="ExitStatus",this.message="Program terminated with exit("+K+")",this.status=K}function Ga(K){for(;K.length>0;)K.shift()(e)}function Cy(){hr("")}function wm(){return 4294901760}function $u(){return wm()}function wy(K,ae,$e){ne.copyWithin(K>>>0,ae>>>0,ae+$e>>>0)}function Sm(K){try{return O.grow(K-J.byteLength+65535>>>16),ve(O.buffer),1}catch(ae){}}function zp(K){var ae=ne.length;K=K>>>0;var $e=wm();if(K>$e)return!1;let at=(Gt,no)=>Gt+(no-Gt%no)%no;for(var $t=1;$t<=4;$t*=2){var Et=ae*(1+.2/$t);Et=Math.min(Et,K+100663296);var Qe=Math.min($e,at(Math.max(K,Et),65536)),Ke=Sm(Qe);if(Ke)return!0}return!1}var gr={varargs:void 0,get:function(){gr.varargs+=4;var K=ie[gr.varargs-4>>>2];return K},getStr:function(K){var ae=j(K);return ae}};function Im(K){return 52}function Sy(K,ae,$e,at,$t){return 70}var Iy=[null,[],[]];function m0(K,ae){var $e=Iy[K];ae===0||ae===10?((K===1?_:E)(U($e,0)),$e.length=0):$e.push(ae)}function d0(K,ae,$e,at){for(var $t=0,Et=0;Et<$e;Et++){var Qe=le[ae>>>2],Ke=le[ae+4>>>2];ae+=8;for(var Gt=0;Gt<Ke;Gt++)m0(K,ne[Qe+Gt>>>0]);$t+=Ke}return le[at>>>2]=$t,0}function vm(K){var ae=e["_"+K];return ae}function Eu(K,ae){re.set(K,ae>>>0)}function vy(K,ae,$e,at,$t){var Et={string:br=>{var $i=0;if(br!=null&&br!==0){var Vm=(br.length<<2)+1;$i=ml(Vm),Y(br,$i,Vm)}return $i},array:br=>{var $i=ml(br.length);return Eu(br,$i),$i}};function Qe(br){return ae==="string"?j(br):ae==="boolean"?!!br:br}var Ke=vm(K),Gt=[],no=0;if(at)for(var Ha=0;Ha<at.length;Ha++){var zm=Et[$e[Ha]];zm?(no===0&&(no=Mm()),Gt[Ha]=zm(at[Ha])):Gt[Ha]=at[Ha]}var dl=Ke.apply(null,Gt);function qC(br){return no!==0&&Lm(no),Qe(br)}return dl=qC(dl),dl}function ky(K,ae,$e,at){$e=$e||[];var $t=$e.every(Qe=>Qe==="number"||Qe==="boolean"),Et=ae!=="string";return Et&&$t&&!at?vm(K):function(){return vy(K,ae,$e,arguments,at)}}var il={abort:Cy,emscripten_get_heap_max:$u,emscripten_memcpy_big:wy,emscripten_resize_heap:zp,fd_close:Im,fd_seek:Sy,fd_write:d0},Ny=al(),km=e.___wasm_call_ctors=function(){return(km=e.___wasm_call_ctors=e.asm.__wasm_call_ctors).apply(null,arguments)},Nm=e._init=function(){return(Nm=e._init=e.asm.init).apply(null,arguments)},Ty=e._init_with_threads_count=function(){return(Ty=e._init_with_threads_count=e.asm.init_with_threads_count).apply(null,arguments)},Tm=e._get_threads_count=function(){return(Tm=e._get_threads_count=e.asm.get_threads_count).apply(null,arguments)},_y=e._register_tensor=function(){return(_y=e._register_tensor=e.asm.register_tensor).apply(null,arguments)},Me=e._dispose_data=function(){return(Me=e._dispose_data=e.asm.dispose_data).apply(null,arguments)},ul=e._dispose=function(){return(ul=e._dispose=e.asm.dispose).apply(null,arguments)},$y=e._Abs=function(){return($y=e._Abs=e.asm.Abs).apply(null,arguments)},_m=e._Acos=function(){return(_m=e._Acos=e.asm.Acos).apply(null,arguments)},Vp=e._Acosh=function(){return(Vp=e._Acosh=e.asm.Acosh).apply(null,arguments)},Ey=e._Add=function(){return(Ey=e._Add=e.asm.Add).apply(null,arguments)},Ry=e._AddN=function(){return(Ry=e._AddN=e.asm.AddN).apply(null,arguments)},Dy=e._All=function(){return(Dy=e._All=e.asm.All).apply(null,arguments)},Ay=e._Any=function(){return(Ay=e._Any=e.asm.Any).apply(null,arguments)},Fy=e._ArgMax=function(){return(Fy=e._ArgMax=e.asm.ArgMax).apply(null,arguments)},$m=e._ArgMin=function(){return($m=e._ArgMin=e.asm.ArgMin).apply(null,arguments)},Em=e._Asin=function(){return(Em=e._Asin=e.asm.Asin).apply(null,arguments)},Py=e._Asinh=function(){return(Py=e._Asinh=e.asm.Asinh).apply(null,arguments)},Oy=e._Atan=function(){return(Oy=e._Atan=e.asm.Atan).apply(null,arguments)},My=e._Atan2=function(){return(My=e._Atan2=e.asm.Atan2).apply(null,arguments)},pl=e._Atanh=function(){return(pl=e._Atanh=e.asm.Atanh).apply(null,arguments)},Ly=e._AvgPool=function(){return(Ly=e._AvgPool=e.asm.AvgPool).apply(null,arguments)},By=e._AvgPool3D=function(){return(By=e._AvgPool3D=e.asm.AvgPool3D).apply(null,arguments)},zy=e._AvgPool3DGrad=function(){return(zy=e._AvgPool3DGrad=e.asm.AvgPool3DGrad).apply(null,arguments)},Ru=e._AvgPoolGrad=function(){return(Ru=e._AvgPoolGrad=e.asm.AvgPoolGrad).apply(null,arguments)},Vy=e._BatchMatMul=function(){return(Vy=e._BatchMatMul=e.asm.BatchMatMul).apply(null,arguments)},Wy=e._Bincount=function(){return(Wy=e._Bincount=e.asm.Bincount).apply(null,arguments)},Rm=e._BitwiseAnd=function(){return(Rm=e._BitwiseAnd=e.asm.BitwiseAnd).apply(null,arguments)},Uy=e._Ceil=function(){return(Uy=e._Ceil=e.asm.Ceil).apply(null,arguments)},cl=e._ClipByValue=function(){return(cl=e._ClipByValue=e.asm.ClipByValue).apply(null,arguments)},Gy=e._Conv2D=function(){return(Gy=e._Conv2D=e.asm.Conv2D).apply(null,arguments)},Hy=e._Conv2DBackpropInput=function(){return(Hy=e._Conv2DBackpropInput=e.asm.Conv2DBackpropInput).apply(null,arguments)},Ky=e._Conv3D=function(){return(Ky=e._Conv3D=e.asm.Conv3D).apply(null,arguments)},_i=e._Conv3DBackpropFilterV2=function(){return(_i=e._Conv3DBackpropFilterV2=e.asm.Conv3DBackpropFilterV2).apply(null,arguments)},ll=e._Conv3DBackpropInputV2=function(){return(ll=e._Conv3DBackpropInputV2=e.asm.Conv3DBackpropInputV2).apply(null,arguments)},qy=e._Cos=function(){return(qy=e._Cos=e.asm.Cos).apply(null,arguments)},jy=e._Cosh=function(){return(jy=e._Cosh=e.asm.Cosh).apply(null,arguments)},Xy=e._CropAndResize=function(){return(Xy=e._CropAndResize=e.asm.CropAndResize).apply(null,arguments)},Yy=e._Cumprod=function(){return(Yy=e._Cumprod=e.asm.Cumprod).apply(null,arguments)},Dm=e._Cumsum=function(){return(Dm=e._Cumsum=e.asm.Cumsum).apply(null,arguments)},Am=e._DenseBincount=function(){return(Am=e._DenseBincount=e.asm.DenseBincount).apply(null,arguments)},Qy=e._DepthToSpace=function(){return(Qy=e._DepthToSpace=e.asm.DepthToSpace).apply(null,arguments)},Zy=e._DepthwiseConv2dNative=function(){return(Zy=e._DepthwiseConv2dNative=e.asm.DepthwiseConv2dNative).apply(null,arguments)},Fm=e._Diag=function(){return(Fm=e._Diag=e.asm.Diag).apply(null,arguments)},Pm=e._Dilation2D=function(){return(Pm=e._Dilation2D=e.asm.Dilation2D).apply(null,arguments)},Jy=e._Dilation2DBackpropFilter=function(){return(Jy=e._Dilation2DBackpropFilter=e.asm.Dilation2DBackpropFilter).apply(null,arguments)},eb=e._Dilation2DBackpropInput=function(){return(eb=e._Dilation2DBackpropInput=e.asm.Dilation2DBackpropInput).apply(null,arguments)},tb=e._Elu=function(){return(tb=e._Elu=e.asm.Elu).apply(null,arguments)},rb=e._EluGrad=function(){return(rb=e._EluGrad=e.asm.EluGrad).apply(null,arguments)},Om=e._Equal=function(){return(Om=e._Equal=e.asm.Equal).apply(null,arguments)},f0=e._Erf=function(){return(f0=e._Erf=e.asm.Erf).apply(null,arguments)},ob=e._Exp=function(){return(ob=e._Exp=e.asm.Exp).apply(null,arguments)},nb=e._Expm1=function(){return(nb=e._Expm1=e.asm.Expm1).apply(null,arguments)},sb=e._FlipLeftRight=function(){return(sb=e._FlipLeftRight=e.asm.FlipLeftRight).apply(null,arguments)},ab=e._Floor=function(){return(ab=e._Floor=e.asm.Floor).apply(null,arguments)},ib=e._FloorDiv=function(){return(ib=e._FloorDiv=e.asm.FloorDiv).apply(null,arguments)},ub=e._FusedBatchNorm=function(){return(ub=e._FusedBatchNorm=e.asm.FusedBatchNorm).apply(null,arguments)},pb=e._FusedConv2D=function(){return(pb=e._FusedConv2D=e.asm.FusedConv2D).apply(null,arguments)},cb=e._FusedDepthwiseConv2D=function(){return(cb=e._FusedDepthwiseConv2D=e.asm.FusedDepthwiseConv2D).apply(null,arguments)},lb=e._Gather=function(){return(lb=e._Gather=e.asm.Gather).apply(null,arguments)},mb=e._GatherNd=function(){return(mb=e._GatherNd=e.asm.GatherNd).apply(null,arguments)},db=e._Greater=function(){return(db=e._Greater=e.asm.Greater).apply(null,arguments)},fb=e._GreaterEqual=function(){return(fb=e._GreaterEqual=e.asm.GreaterEqual).apply(null,arguments)},hb=e._IsFinite=function(){return(hb=e._IsFinite=e.asm.IsFinite).apply(null,arguments)},gb=e._IsInf=function(){return(gb=e._IsInf=e.asm.IsInf).apply(null,arguments)},xb=e._IsNan=function(){return(xb=e._IsNan=e.asm.IsNan).apply(null,arguments)},yb=e._LRN=function(){return(yb=e._LRN=e.asm.LRN).apply(null,arguments)},bb=e._LRNGrad=function(){return(bb=e._LRNGrad=e.asm.LRNGrad).apply(null,arguments)},Cb=e._LeakyRelu=function(){return(Cb=e._LeakyRelu=e.asm.LeakyRelu).apply(null,arguments)},wb=e._Less=function(){return(wb=e._Less=e.asm.Less).apply(null,arguments)},Sb=e._LessEqual=function(){return(Sb=e._LessEqual=e.asm.LessEqual).apply(null,arguments)},Ib=e._LinSpace=function(){return(Ib=e._LinSpace=e.asm.LinSpace).apply(null,arguments)},vb=e._Log=function(){return(vb=e._Log=e.asm.Log).apply(null,arguments)},kb=e._Log1p=function(){return(kb=e._Log1p=e.asm.Log1p).apply(null,arguments)},Nb=e._LogicalAnd=function(){return(Nb=e._LogicalAnd=e.asm.LogicalAnd).apply(null,arguments)},Tb=e._LogicalNot=function(){return(Tb=e._LogicalNot=e.asm.LogicalNot).apply(null,arguments)},_b=e._LogicalOr=function(){return(_b=e._LogicalOr=e.asm.LogicalOr).apply(null,arguments)},$b=e._LogicalXor=function(){return($b=e._LogicalXor=e.asm.LogicalXor).apply(null,arguments)},Eb=e._Max=function(){return(Eb=e._Max=e.asm.Max).apply(null,arguments)},Rb=e._MaxPool=function(){return(Rb=e._MaxPool=e.asm.MaxPool).apply(null,arguments)},Db=e._MaxPool3D=function(){return(Db=e._MaxPool3D=e.asm.MaxPool3D).apply(null,arguments)},Ab=e._MaxPool3DGrad=function(){return(Ab=e._MaxPool3DGrad=e.asm.MaxPool3DGrad).apply(null,arguments)},Fb=e._MaxPoolGrad=function(){return(Fb=e._MaxPoolGrad=e.asm.MaxPoolGrad).apply(null,arguments)},Pb=e._MaxPoolWithArgmax=function(){return(Pb=e._MaxPoolWithArgmax=e.asm.MaxPoolWithArgmax).apply(null,arguments)},Ob=e._Maximum=function(){return(Ob=e._Maximum=e.asm.Maximum).apply(null,arguments)},Mb=e._Mean=function(){return(Mb=e._Mean=e.asm.Mean).apply(null,arguments)},Lb=e._Min=function(){return(Lb=e._Min=e.asm.Min).apply(null,arguments)},Bb=e._Minimum=function(){return(Bb=e._Minimum=e.asm.Minimum).apply(null,arguments)},zb=e._MirrorPad=function(){return(zb=e._MirrorPad=e.asm.MirrorPad).apply(null,arguments)},Vb=e._Mod=function(){return(Vb=e._Mod=e.asm.Mod).apply(null,arguments)},Wb=e._Multinomial=function(){return(Wb=e._Multinomial=e.asm.Multinomial).apply(null,arguments)},Ub=e._Multiply=function(){return(Ub=e._Multiply=e.asm.Multiply).apply(null,arguments)},Gb=e._Neg=function(){return(Gb=e._Neg=e.asm.Neg).apply(null,arguments)},Hb=e._NonMaxSuppressionV3=function(){return(Hb=e._NonMaxSuppressionV3=e.asm.NonMaxSuppressionV3).apply(null,arguments)},Kb=e._NonMaxSuppressionV4=function(){return(Kb=e._NonMaxSuppressionV4=e.asm.NonMaxSuppressionV4).apply(null,arguments)},qb=e._NonMaxSuppressionV5=function(){return(qb=e._NonMaxSuppressionV5=e.asm.NonMaxSuppressionV5).apply(null,arguments)},jb=e._NotEqual=function(){return(jb=e._NotEqual=e.asm.NotEqual).apply(null,arguments)},Xb=e._OneHot=function(){return(Xb=e._OneHot=e.asm.OneHot).apply(null,arguments)},Yb=e._PadV2=function(){return(Yb=e._PadV2=e.asm.PadV2).apply(null,arguments)},Qb=e._Pow=function(){return(Qb=e._Pow=e.asm.Pow).apply(null,arguments)},Zb=e._Prelu=function(){return(Zb=e._Prelu=e.asm.Prelu).apply(null,arguments)},Jb=e._Prod=function(){return(Jb=e._Prod=e.asm.Prod).apply(null,arguments)},eC=e._RealDiv=function(){return(eC=e._RealDiv=e.asm.RealDiv).apply(null,arguments)},tC=e._Reciprocal=function(){return(tC=e._Reciprocal=e.asm.Reciprocal).apply(null,arguments)},rC=e._Relu=function(){return(rC=e._Relu=e.asm.Relu).apply(null,arguments)},oC=e._Relu6=function(){return(oC=e._Relu6=e.asm.Relu6).apply(null,arguments)},nC=e._ResizeBilinear=function(){return(nC=e._ResizeBilinear=e.asm.ResizeBilinear).apply(null,arguments)},sC=e._ResizeBilinearGrad=function(){return(sC=e._ResizeBilinearGrad=e.asm.ResizeBilinearGrad).apply(null,arguments)},aC=e._ResizeNearestNeighbor=function(){return(aC=e._ResizeNearestNeighbor=e.asm.ResizeNearestNeighbor).apply(null,arguments)},iC=e._ResizeNearestNeighborGrad=function(){return(iC=e._ResizeNearestNeighborGrad=e.asm.ResizeNearestNeighborGrad).apply(null,arguments)},uC=e._Reverse=function(){return(uC=e._Reverse=e.asm.Reverse).apply(null,arguments)},pC=e._RotateWithOffset=function(){return(pC=e._RotateWithOffset=e.asm.RotateWithOffset).apply(null,arguments)},cC=e._Round=function(){return(cC=e._Round=e.asm.Round).apply(null,arguments)},lC=e._Rsqrt=function(){return(lC=e._Rsqrt=e.asm.Rsqrt).apply(null,arguments)},mC=e._ScatterNd=function(){return(mC=e._ScatterNd=e.asm.ScatterNd).apply(null,arguments)},dC=e._SearchSorted=function(){return(dC=e._SearchSorted=e.asm.SearchSorted).apply(null,arguments)},fC=e._SelectV2=function(){return(fC=e._SelectV2=e.asm.SelectV2).apply(null,arguments)},hC=e._Selu=function(){return(hC=e._Selu=e.asm.Selu).apply(null,arguments)},gC=e._Sigmoid=function(){return(gC=e._Sigmoid=e.asm.Sigmoid).apply(null,arguments)},xC=e._Sign=function(){return(xC=e._Sign=e.asm.Sign).apply(null,arguments)},yC=e._Sin=function(){return(yC=e._Sin=e.asm.Sin).apply(null,arguments)},bC=e._Sinh=function(){return(bC=e._Sinh=e.asm.Sinh).apply(null,arguments)},CC=e._Softmax=function(){return(CC=e._Softmax=e.asm.Softmax).apply(null,arguments)},wC=e._Softplus=function(){return(wC=e._Softplus=e.asm.Softplus).apply(null,arguments)},SC=e._SparseFillEmptyRows=function(){return(SC=e._SparseFillEmptyRows=e.asm.SparseFillEmptyRows).apply(null,arguments)},IC=e._SparseReshape=function(){return(IC=e._SparseReshape=e.asm.SparseReshape).apply(null,arguments)},vC=e._SparseSegmentReduction=function(){return(vC=e._SparseSegmentReduction=e.asm.SparseSegmentReduction).apply(null,arguments)},kC=e._SparseToDense=function(){return(kC=e._SparseToDense=e.asm.SparseToDense).apply(null,arguments)},NC=e._Sqrt=function(){return(NC=e._Sqrt=e.asm.Sqrt).apply(null,arguments)},TC=e._Square=function(){return(TC=e._Square=e.asm.Square).apply(null,arguments)},_C=e._SquaredDifference=function(){return(_C=e._SquaredDifference=e.asm.SquaredDifference).apply(null,arguments)},$C=e._Step=function(){return($C=e._Step=e.asm.Step).apply(null,arguments)},EC=e._StridedSlice=function(){return(EC=e._StridedSlice=e.asm.StridedSlice).apply(null,arguments)},RC=e._Sub=function(){return(RC=e._Sub=e.asm.Sub).apply(null,arguments)},DC=e._Sum=function(){return(DC=e._Sum=e.asm.Sum).apply(null,arguments)},AC=e._Tan=function(){return(AC=e._Tan=e.asm.Tan).apply(null,arguments)},FC=e._Tanh=function(){return(FC=e._Tanh=e.asm.Tanh).apply(null,arguments)},PC=e._TensorScatterUpdate=function(){return(PC=e._TensorScatterUpdate=e.asm.TensorScatterUpdate).apply(null,arguments)},OC=e._Tile=function(){return(OC=e._Tile=e.asm.Tile).apply(null,arguments)},MC=e._TopK=function(){return(MC=e._TopK=e.asm.TopK).apply(null,arguments)},LC=e._Transform=function(){return(LC=e._Transform=e.asm.Transform).apply(null,arguments)},BC=e._Transpose=function(){return(BC=e._Transpose=e.asm.Transpose).apply(null,arguments)},zC=e.__FusedMatMul=function(){return(zC=e.__FusedMatMul=e.asm._FusedMatMul).apply(null,arguments)},VC=e._malloc=function(){return(VC=e._malloc=e.asm.malloc).apply(null,arguments)},WC=e._free=function(){return(WC=e._free=e.asm.free).apply(null,arguments)},UC=e.___errno_location=function(){return(UC=e.___errno_location=e.asm.__errno_location).apply(null,arguments)},Mm=e.stackSave=function(){return(Mm=e.stackSave=e.asm.stackSave).apply(null,arguments)},Lm=e.stackRestore=function(){return(Lm=e.stackRestore=e.asm.stackRestore).apply(null,arguments)},ml=e.stackAlloc=function(){return(ml=e.stackAlloc=e.asm.stackAlloc).apply(null,arguments)},GC=e.dynCall_iijjiiii=function(){return(GC=e.dynCall_iijjiiii=e.asm.dynCall_iijjiiii).apply(null,arguments)},HC=e.dynCall_jiji=function(){return(HC=e.dynCall_jiji=e.asm.dynCall_jiji).apply(null,arguments)};e.cwrap=ky;var Wp;ar=function K(){Wp||Bm(),Wp||(ar=K)};function Bm(K){if(K=K||i,_t>0||(gt(),_t>0))return;function ae(){Wp||(Wp=!0,e.calledRun=!0,!M&&(xt(),o(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),Lr()))}e.setStatus?(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1),ae()},1)):ae()}if(e.preInit)for(typeof e.preInit=="function"&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();Bm();var Up;s&&(Up={uncaughtException:process.listeners("uncaughtException").filter(function(K){return!s.uncaughtException.indexOf(K)>-1}),unhandledRejection:process.listeners("unhandledRejection").filter(function(K){return!s.unhandledRejection.indexOf(K)>-1})});var Gp;if(typeof t!="undefined")Gp=t;else if(typeof WasmBackendModuleThreadedSimd!="undefined")Gp=WasmBackendModuleThreadedSimd;else throw new Error("Could not find wasm module in post.js");if(Up){var KC=Gp._dispose;Gp._dispose=function(){KC(),Up.uncaughtException.forEach(function(K){process.removeListener("uncaughtException",K)}),Up.unhandledRejection.forEach(function(K){process.removeListener("unhandledRejection",K)})}}return t.ready}})();typeof Ug=="object"&&typeof Gv=="object"?Gv.exports=Uv:typeof define=="function"&&define.amd?define([],function(){return Uv}):typeof Ug=="object"&&(Ug.WasmBackendModule=Uv)});var zo=class{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}},ao=class{refCount(t){return zr("refCount")}incRef(t){return zr("incRef")}timerAvailable(){return!0}time(t){return zr("time")}read(t){return zr("read")}readSync(t){return zr("readSync")}readToGPU(t,e){return zr("readToGPU")}numDataIds(){return zr("numDataIds")}disposeData(t,e){return zr("disposeData")}write(t,e,o){return zr("write")}move(t,e,o,n,s){return zr("move")}createTensorFromGPUData(t,e,o){return zr("createTensorFromGPUData")}memory(){return zr("memory")}floatPrecision(){return zr("floatPrecision")}epsilon(){return this.floatPrecision()===32?1e-7:1e-4}dispose(){return zr("dispose")}};function zr(r){throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function I0(r){let t=r.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,jm(r,t,e)}function TG(r,t){if(r.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${t.length}`);let e=r.length,o=0;for(;e>0;)o=Math.random()*e|0,e--,jm(r,e,o),jm(t,e,o)}function qp(r,t,e){return Math.max(r,Math.min(t,e))}function _G(r){return r%2===0?r:r+1}function jm(r,t,e){let o=r[t];r[t]=r[e],r[e]=o}function $G(r){let t=0;for(let e=0;e<r.length;e++)t+=r[e];return t}function EG(r,t){let e=Math.random();return t*e+(1-e)*r}function RG(r,t){let e=0;for(let o=0;o<r.length;o++){let n=Number(r[o])-Number(t[o]);e+=n*n}return e}function $(r,t){if(!r)throw new Error(typeof t=="string"?t:t())}function yt(r,t,e=""){$(Cr(r,t),()=>e+` Shapes ${r} and ${t} must match`)}function io(r){$(r!=null,()=>"The input to the tensor constructor must be a non-null value.")}function He(r){if(r.length===0)return 1;let t=r[0];for(let e=1;e<r.length;e++)t*=r[e];return t}function DG(r){return r.length===0}function ZC(r,t){if(r===t)return!0;if(r==null||t==null||r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==null&&t[e]!==null&&r[e]!==t[e])return!1;return!0}function Cr(r,t){if(r===t)return!0;if(r==null||t==null||r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==t[e])return!1;return!0}function qa(r){return r%1===0}function AG(r){if(Math.tanh!=null)return Math.tanh(r);if(r===1/0)return 1;if(r===-1/0)return-1;{let t=Math.exp(2*r);return(t-1)/(t+1)}}function FG(r){let t=Math.ceil(Math.sqrt(r));return[t,Math.ceil(r/t)]}function PG(r){let t=new Uint32Array(r);for(let e=0;e<r;++e)t[e]=e;return I0(t),t}function Au(r,t){return t<=r.length?r:r+" ".repeat(t-r.length)}function OG(r,t=n=>0,e,o){return new Promise((n,s)=>{let a=0,i=()=>{if(r()){n();return}a++;let p=t(a);if(e!=null&&a>=e){s();return}o!=null?o(i,p):setTimeout(i,p)};i()})}function MG(r,t){let e=1,o=-1;for(let s=0;s<r.length;++s)if(r[s]>=0)e*=r[s];else if(r[s]===-1){if(o!==-1)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);o=s}else if(r[s]<0)throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);if(o===-1){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${r}`);return r}if(e===0)throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);if(t%e!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);let n=r.slice();return n[o]=t/e,n}function Ei(r,t){let e=t.length;return r=r==null?t.map((o,n)=>n):[].concat(r),$(r.every(o=>o>=-e&&o<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${r}`),$(r.every(o=>qa(o)),()=>`All values in axis param must be integers but got axis ${r}`),r.map(o=>o<0?e+o:o)}function JC(r,t){let e=[],o=[],n=t!=null&&Array.isArray(t)&&t.length===0,s=t==null||n?null:Ei(t,r).sort(),a=0;for(let i=0;i<r.length;++i){if(s!=null){if(s[a]===i&&r[i]!==1)throw new Error(`Can't squeeze axis ${i} since its dim '${r[i]}' is not 1`);(s[a]==null||s[a]>i)&&r[i]===1&&(e.push(r[i]),o.push(i)),s[a]<=i&&a++}r[i]!==1&&(e.push(r[i]),o.push(i))}return{newShape:e,keptDims:o}}function ew(r,t){return Xm(r,t)}function Xm(r,t){let e=null;if(r==null||r==="float32")e=new Float32Array(t);else if(r==="int32")e=new Int32Array(t);else if(r==="bool")e=new Uint8Array(t);else if(r==="string")e=new Array(t);else throw new Error(`Unknown data type ${r}`);return e}function tw(r,t){for(let e=0;e<r.length;e++){let o=r[e];if(isNaN(o)||!isFinite(o))throw Error(`A tensor of type ${t} being uploaded contains ${o}.`)}}function rw(r){return r==="bool"||r==="complex64"||r==="float32"||r==="int32"||r==="string"}function LG(r,t){return!(t==="complex64"||t==="float32"&&r!=="complex64"||t==="int32"&&r!=="float32"&&r!=="complex64"||t==="bool"&&r==="bool")}function jp(r){if(r==="float32"||r==="int32")return 4;if(r==="complex64")return 8;if(r==="bool")return 1;throw new Error(`Unknown dtype ${r}`)}function ow(r){if(r==null)return 0;let t=0;return r.forEach(e=>t+=e.length),t}function Vo(r){return typeof r=="string"||r instanceof String}function v0(r){return typeof r=="boolean"}function k0(r){return typeof r=="number"}function Ri(r){return Array.isArray(r)?Ri(r[0]):r instanceof Float32Array?"float32":r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray?"int32":k0(r)?"float32":Vo(r)?"string":v0(r)?"bool":"float32"}function qs(r){return!!(r&&r.constructor&&r.call&&r.apply)}function Xp(r,t){for(let e=t;e<r;++e)if(r%e===0)return e;return r}function js(r){let t=r.length;if(t<2)return[];let e=new Array(t-1);e[t-2]=r[t-1];for(let o=t-3;o>=0;--o)e[o]=e[o+1]*r[o+1];return e}function N0(r,t,e,o=!1){let n=new Array;if(t.length===1){let s=t[0]*(o?2:1);for(let a=0;a<s;a++)n[a]=e[r+a]}else{let s=t[0],a=t.slice(1),i=a.reduce((p,u)=>p*u)*(o?2:1);for(let p=0;p<s;p++)n[p]=N0(r+p*i,a,e,o)}return n}function Du(r,t,e=!1){if(r.length===0)return t[0];let o=r.reduce((n,s)=>n*s)*(e?2:1);if(o===0)return[];if(o!==t.length)throw new Error(`[${r}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return N0(0,r,t,e)}function BG(r,t){if(Array.isArray(r))return r;if(t==="float32")return r instanceof Float32Array?r:new Float32Array(r);if(t==="int32")return r instanceof Int32Array?r:new Int32Array(r);if(t==="bool"||t==="string")return Uint8Array.from(new Int32Array(r));throw new Error(`Unknown dtype ${t}`)}function fl(r,t){let e=Yp(r,t);for(let o=0;o<e.length;o++)e[o]=1;return e}function Yp(r,t){if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool")return new Uint8Array(r);throw new Error(`Unknown data type ${t}`)}function zG(r,t){let e=r.reduce((o,n)=>o*n,1);if(t==null||t==="float32")return Du(r,new Float32Array(e));if(t==="int32")return Du(r,new Int32Array(e));if(t==="bool")return Du(r,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function wt(r){r.forEach(t=>{$(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${r}].`)})}function VG(r,t,e){if(t===0)return 0;if(t===1)return r[0];let o=r[r.length-1];for(let n=0;n<r.length-1;++n)o+=e[n]*r[n];return o}function WG(r,t,e){if(t===0)return[];if(t===1)return[r];let o=new Array(t);for(let n=0;n<o.length-1;++n)o[n]=Math.floor(r/e[n]),r-=o[n]*e[n];return o[o.length-1]=r,o}function Fu(r){return r&&r.then&&typeof r.then=="function"}var T0="tfjsflags",hl=class{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=GG,this.populateURLFlags()}setPlatform(t,e){this.platform!=null&&(A().getBool("IS_TEST")||A().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,o){if(this.flagRegistry[t]={evaluationFn:e,setHook:o},this.urlFlags[t]!=null){let n=this.urlFlags[t];A().getBool("IS_TEST")||A().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${n}.`),this.set(t,n)}}async getAsync(t){return t in this.flags?this.flags[t]:(this.flags[t]=await this.evaluateFlag(t),this.flags[t])}get(t){if(t in this.flags)return this.flags[t];let e=this.evaluateFlag(t);if(Fu(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(this.flagRegistry[t]==null)throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,this.flagRegistry[t].setHook!=null&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(this.flagRegistry[t]==null)throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global=="undefined"||typeof this.global.location=="undefined"||typeof this.global.location.search=="undefined")return;let t=this.getQueryParams(this.global.location.search);T0 in t&&t[T0].split(",").forEach(o=>{let[n,s]=o.split(":");this.urlFlags[n]=KG(n,s)})}};function GG(r){let t={};return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...o)=>(HG(t,o[0],o[1]),o.join("="))),t}function HG(r,t,e){r[decodeURIComponent(t)]=decodeURIComponent(e||"")}function KG(r,t){let e=t.toLowerCase();return e==="true"||e==="false"?e==="true":`${+e}`===e?+e:t}function A(){return nw}var nw=null;function _0(r){nw=r}var sw;function aw(){if(sw==null){let r;if(typeof window!="undefined")r=window;else if(typeof global!="undefined")r=global;else if(typeof process!="undefined")r=process;else if(typeof self!="undefined")r=self;else throw new Error("Could not find a global object");sw=r}return sw}function qG(){let r=aw();return r._tfGlobals==null&&(r._tfGlobals=new Map),r._tfGlobals}function gl(r,t){let e=qG();if(e.has(r))return e.get(r);{let o=t();return e.set(r,o),e.get(r)}}var Xs="Abs",Wo="Acos",Uo="Acosh",uo="Add",Go="AddN",Ho="All",Ko="Any",Ys="ArgMax",Qs="ArgMin",qo="Asin",jo="Asinh",Xo="Atan",Yo="Atanh",Qo="Atan2",Zo="AvgPool",Di="AvgPoolGrad",Zs="AvgPool3D",Ai="AvgPool3DGrad",Jo="BatchMatMul",Js="BatchToSpaceND",en="Bincount",ja="BitwiseAnd",Bce="BroadcastTo",ea="BroadcastArgs",bo="Cast",tn="Ceil",Co="ClipByValue",Fi="Complex",Pi="ComplexAbs",ta="Concat",rn="Conv2D",Oi="Conv2DBackpropFilter",on="Conv2DBackpropInput",nn="Conv3D",Xa="Conv3DBackpropFilterV2",sn="Conv3DBackpropInputV2",an="Cos",un="Cosh",pn="Cumprod",cn="Cumsum",ln="CropAndResize",ra="DenseBincount",mn="DepthToSpace",dn="DepthwiseConv2dNative",Mi="DepthwiseConv2dNativeBackpropFilter",Li="DepthwiseConv2dNativeBackpropInput",oa="Diag",fn="Dilation2D",Bi="Dilation2DBackpropInput",zi="Dilation2DBackpropFilter",Pu="Draw",hn="RealDiv",Vi="Einsum",gn="Elu",Ya="EluGrad",xn="Erf",yn="Equal",bn="Exp",na="ExpandDims",Cn="Expm1",Wi="FFT",sa="Fill",wn="FlipLeftRight",Sn="Floor",In="FloorDiv",vn="FusedBatchNorm",aa="GatherV2",kn="GatherNd",Nn="Greater",Tn="GreaterEqual",wo="Identity",Ui="IFFT",Gi="Imag",_n="IsFinite",$n="IsInf",En="IsNan",Rn="LeakyRelu",Dn="Less",An="LessEqual",Fn="LinSpace",Pn="Log",On="Log1p",Mn="LogicalAnd",Ln="LogicalNot",Bn="LogicalOr",$0="LogicalXor",zce="LogSoftmax",Vce="LowerBound",zn="LRN",Qa="LRNGrad",Wce="MatrixBandPart",Vn="Max",Wn="Maximum",Un="MaxPool",Hi="MaxPoolGrad",ia="MaxPool3D",Ki="MaxPool3DGrad",ua="MaxPoolWithArgmax",Gn="Mean",Hn="Min",Kn="Minimum",qn="MirrorPad",jn="Mod",Xn="Multinomial",Yn="Multiply",pa="Neg",Qn="NotEqual",Zn="NonMaxSuppressionV3",Za="NonMaxSuppressionV4",Jn="NonMaxSuppressionV5",ca="OnesLike",es="OneHot",la="Pack",ts="PadV2",Uce="Pool",rs="Pow",os="Prelu",ns="Prod",Qp="RaggedGather",Zp="RaggedRange",Jp="RaggedTensorToTensor",ma="Range",qi="Real",ss="Reciprocal",as="Relu",da="Reshape",is="ResizeNearestNeighbor",Ja="ResizeNearestNeighborGrad",us="ResizeBilinear",ei="ResizeBilinearGrad",ps="Relu6",cs="Reverse",ls="Round",ms="Rsqrt",ds="ScatterNd",fs="TensorScatterUpdate",hs="SearchSorted",fa="Select",gs="Selu",ha="Slice",xs="Sin",ys="Sinh",bs="Sign",Cs="Sigmoid",ws="Softplus",Ss="Sqrt",Is="Sum",ga="SpaceToBatchND",xa="SplitV",vs="Softmax",ji="SparseFillEmptyRows",ti="SparseReshape",ya="SparseSegmentMean",ba="SparseSegmentSum",ks="SparseToDense",Ns="SquaredDifference",Xi="Square",Ou="StaticRegexReplace",Ts="StridedSlice",Ca="StringNGrams",Yi="StringSplit",Qi="StringToHashBucketFast",_s="Sub",$s="Tan",Es="Tanh",po="Tile",Rs="TopK",Ds="Transform",co="Transpose",Zi="Unique",wa="Unpack",Ji="UnsortedSegmentSum",Gce="UpperBound",Sa="ZerosLike",So="Step",Mu="FromPixels",As="RotateWithOffset",Io="_FusedMatMul",vo="FusedConv2D",ko="FusedDepthwiseConv2D";function Ia(...r){A().getBool("IS_TEST")||A().getBool("PROD")||console.warn(...r)}function jG(...r){A().getBool("IS_TEST")||A().getBool("PROD")||console.log(...r)}var ec=gl("kernelRegistry",()=>new Map),xl=gl("gradRegistry",()=>new Map);function tc(r,t){let e=uw(r,t);return ec.get(e)}function iw(r){return xl.get(r)}function Ym(r){let t=ec.entries(),e=[];for(;;){let{done:o,value:n}=t.next();if(o)break;let[s,a]=n,[i]=s.split("_");i===r&&e.push(a)}return e}function ri(r){let{kernelName:t,backendName:e}=r,o=uw(t,e);ec.has(o)&&Ia(`The kernel '${t}' for backend '${e}' is already registered`),ec.set(o,r)}function Xce(r){let{kernelName:t}=r;xl.has(t)&&A().getBool("DEBUG")&&Ia(`Overriding the gradient for '${t}'`),xl.set(t,r)}function Yce(r,t){let e=uw(r,t);if(!ec.has(e))throw new Error(`The kernel '${r}' for backend '${t}' is not registered`);ec.delete(e)}function Qce(r){if(!xl.has(r))throw new Error(`The gradient '${r}' for backend is not registered`);xl.delete(r)}function Zce(r,t){Ym(r).forEach(o=>{let n=Object.assign({},o,{backendName:t});ri(n)})}function uw(r,t){return`${t}_${r}`}var y={};qe(y,{arraysEqual:()=>Cr,arraysEqualWithNull:()=>ZC,assert:()=>$,assertNonNegativeIntegerDimensions:()=>wt,assertNonNull:()=>io,assertShapesMatch:()=>yt,bytesFromStringArray:()=>ow,bytesPerElement:()=>jp,checkConversionForErrors:()=>tw,clamp:()=>qp,computeStrides:()=>js,convertBackendValuesAndArrayBuffer:()=>BG,createScalarValue:()=>t4,createShuffledIndices:()=>PG,decodeString:()=>sc,distSquared:()=>RG,encodeString:()=>tu,fetch:()=>o4,fingerPrint64:()=>e4,flatten:()=>Ps,getArrayFromDType:()=>Xm,getTypedArrayFromDType:()=>ew,hasEncodingLoss:()=>LG,hexToLong:()=>yl,indexToLoc:()=>WG,inferDtype:()=>Ri,inferFromImplicitShape:()=>MG,isBoolean:()=>v0,isFunction:()=>qs,isInt:()=>qa,isNumber:()=>k0,isPromise:()=>Fu,isScalarShape:()=>DG,isString:()=>Vo,isTypedArray:()=>Ot,isValidDtype:()=>rw,locToIndex:()=>VG,makeOnesTypedArray:()=>fl,makeZerosNestedTypedArray:()=>zG,makeZerosTypedArray:()=>Yp,nearestDivisor:()=>Xp,nearestLargerEven:()=>_G,now:()=>Wu,parseAxisParam:()=>Ei,randUniform:()=>EG,repeatedTry:()=>OG,rightPad:()=>Au,shuffle:()=>I0,shuffleCombo:()=>TG,sizeFromShape:()=>He,sizeToSquarishShape:()=>FG,squeezeShape:()=>JC,sum:()=>$G,swap:()=>jm,tanh:()=>AG,toNestedArray:()=>Du,toTypedArray:()=>nc});function Qm(r){return r instanceof Float32Array||r instanceof Int32Array||r instanceof Uint8Array||r instanceof Uint8ClampedArray}var mw=Kp(V0());var Vu=mw.default||mw;function yl(r){return Vu.fromString(r,!0,16)}var U0=yl("c3a5c85c97cb3127"),zu=yl("b492b66fbe98f273"),wr=yl("9ae16a3b2f90404f");function lw(r){return r.xor(r.shru(47))}function G0(r,t,e){let o=r.slice(t,t+e);return Vu.fromBytes(Array.from(o),!0,!0)}function St(r,t){return G0(r,t,8)}function W0(r,t){return G0(r,t,4)}function Qt(r,t){return t===0?r:r.shru(t).or(r.shl(64-t))}function eu(r,t,e=yl("9ddfea08eb382d69")){let o=r.xor(t).mul(e);o=o.xor(o.shru(47));let n=t.xor(o).mul(e);return n=n.xor(n.shru(47)),n=n.mul(e),n}function YG(r,t,e,o,n,s){n=n.add(r),s=Qt(s.add(n).add(o),21);let a=n;return n=n.add(t),n=n.add(e),s=s.add(Qt(n,44)),[n.add(o),s.add(a)]}function Jm(r,t,e,o){return YG(St(r,t),St(r,t+8),St(r,t+16),St(r,t+24),e,o)}function QG(r,t=r.length){if(t>=8){let e=wr.add(t*2),o=St(r,0).add(wr),n=St(r,t-8),s=Qt(n,37).mul(e).add(o),a=Qt(o,25).add(n).mul(e);return eu(s,a,e)}if(t>=4){let e=wr.add(t*2),o=W0(r,0);return eu(o.shl(3).add(t),W0(r,t-4),e)}if(t>0){let e=r[0],o=r[t>>1],n=r[t-1],s=e+(o<<8),a=t+(n<<2);return lw(wr.mul(s).xor(U0.mul(a))).mul(wr)}return wr}function ZG(r,t=r.length){let e=wr.add(t*2),o=St(r,0).mul(zu),n=St(r,8),s=St(r,t-8).mul(e),a=St(r,t-16).mul(wr);return eu(Qt(o.add(n),43).add(Qt(s,30)).add(a),o.add(Qt(n.add(wr),18)).add(s),e)}function JG(r,t=r.length){let e=wr.add(t*2),o=St(r,0).mul(wr),n=St(r,8),s=St(r,t-8).mul(e),a=St(r,t-16).mul(wr),i=Qt(o.add(n),43).add(Qt(s,30)).add(a),p=eu(i,o.add(Qt(n.add(wr),18)).add(s),e),u=St(r,16).mul(e),c=St(r,24),l=i.add(St(r,t-32)).mul(e),m=p.add(St(r,t-24)).mul(e);return eu(Qt(u.add(c),43).add(Qt(l,30)).add(m),u.add(Qt(c.add(o),18)).add(l),e)}function e4(r,t=r.length){let e=Vu.fromNumber(81,!0);if(t<=32)return t<=16?QG(r,t):ZG(r,t);if(t<=64)return JG(r,t);let o=e,n=e.mul(zu).add(113),s=lw(n.mul(wr).add(113)).mul(wr),a=[Vu.UZERO,Vu.UZERO],i=[Vu.UZERO,Vu.UZERO];o=o.mul(wr).add(St(r,0));let p=0,u=(t-1>>6)*64,c=u+(t-1&63)-63;do o=Qt(o.add(n).add(a[0]).add(St(r,p+8)),37).mul(zu),n=Qt(n.add(a[1]).add(St(r,p+48)),42).mul(zu),o=o.xor(i[1]),n=n.add(a[0]).add(St(r,p+40)),s=Qt(s.add(i[0]),33).mul(zu),a=Jm(r,p,a[1].mul(zu),o.add(i[0])),i=Jm(r,p+32,s.add(i[1]),n.add(St(r,p+16))),[s,o]=[o,s],p+=64;while(p!==u);let l=zu.add(s.and(255).shl(1));return p=c,i[0]=i[0].add(t-1&63),a[0]=a[0].add(i[0]),i[0]=i[0].add(a[0]),o=Qt(o.add(n).add(a[0]).add(St(r,p+8)),37).mul(l),n=Qt(n.add(a[1]).add(St(r,p+48)),42).mul(l),o=o.xor(i[1].mul(9)),n=n.add(a[0].mul(9).add(St(r,p+40))),s=Qt(s.add(i[0]),33).mul(l),a=Jm(r,p,a[1].mul(l),o.add(i[0])),i=Jm(r,p+32,s.add(i[1]),n.add(St(r,p+16))),[s,o]=[o,s],eu(eu(a[0],i[0],l).add(lw(n).mul(U0)).add(s),eu(a[1],i[1],l).add(o),l)}function t4(r,t){return t==="string"?tu(r):nc([r],t)}function r4(r,t){return r instanceof Float32Array&&t==="float32"||r instanceof Int32Array&&t==="int32"||r instanceof Uint8Array&&t==="bool"}function nc(r,t){if(t==="string")throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(r)&&(r=Ps(r)),A().getBool("DEBUG")&&tw(r,t),r4(r,t))return r;if(t==null||t==="float32"||t==="complex64")return new Float32Array(r);if(t==="int32")return new Int32Array(r);if(t==="bool"){let e=new Uint8Array(r.length);for(let o=0;o<e.length;++o)Math.round(r[o])!==0&&(e[o]=1);return e}else throw new Error(`Unknown data type ${t}`)}function Wu(){return A().platform.now()}function o4(r,t){return A().platform.fetch(r,t)}function tu(r,t="utf-8"){return t=t||"utf-8",A().platform.encode(r,t)}function sc(r,t="utf-8"){return t=t||"utf-8",A().platform.decode(r,t)}function Ot(r){return A().platform.isTypedArray!=null?A().platform.isTypedArray(r):Qm(r)}function Ps(r,t=[],e=!1){if(t==null&&(t=[]),typeof r=="boolean"||typeof r=="number"||typeof r=="string"||Fu(r)||r==null||Ot(r)&&e)t.push(r);else if(Array.isArray(r)||Ot(r))for(let o=0;o<r.length;++o)Ps(r[o],t,e);else{let o=-1;for(let n of Object.keys(r))/^([1-9]+[0-9]*|0)$/.test(n)&&(o=Math.max(o,Number(n)));for(let n=0;n<=o;n++)Ps(r[n],t,e)}return t}var ed=class{constructor(t,e){this.backendTimer=t,this.logger=e,e==null&&(this.logger=new dw)}profileKernel(t,e,o){let n,s=()=>{n=o()},a,i=Wu();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(let u of n)u.dataSync();a=Promise.resolve({kernelMs:Wu()-i})}if(A().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<n.length;u++){let c=n[u];c.data().then(l=>{n4(l,c.dtype,t)})}return{kernelName:t,outputs:n,inputs:e,timeMs:a.then(u=>u.kernelMs),extraInfo:a.then(u=>u.getExtraProfileInfo!=null?u.getExtraProfileInfo():"")}}logKernelProfile(t){let{kernelName:e,outputs:o,timeMs:n,inputs:s,extraInfo:a}=t;o.forEach(i=>{Promise.all([i.data(),n,a]).then(p=>{this.logger.logKernelProfile(e,i,p[0],p[1],s,p[2])})})}};function n4(r,t,e){if(t!=="float32")return!1;for(let o=0;o<r.length;o++){let n=r[o];if(isNaN(n)||!isFinite(n))return console.warn(`Found ${n} in the result of '${e}'`),!0}return!1}var dw=class{logKernelProfile(t,e,o,n,s,a){let i=typeof n=="number"?Au(`${n}ms`,9):n.error,p=Au(t,25),u=e.rank,c=e.size,l=Au(e.shape.toString(),14),m="";for(let d in s){let f=s[d];if(f!=null){let h=f.shape||e.shape,g=h.length;m+=`${d}: ${g}D ${g>0?h:""} `}}console.log(`%c${p}	%c${i}	%c${u}D ${l}	%c${c}	%c${m}	%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}};function H0(r,t,e){let o={},n={};for(let p=0;p<t.length;p++)o[t[p].id]=!0;for(let p=0;p<r.length;p++){let u=r[p],c=u.inputs;for(let l in c){let m=c[l],d=!1;for(let f=0;f<t.length;f++)if(o[m.id]){u.outputs.forEach(h=>o[h.id]=!0),d=!0,n[u.id]=!0;break}if(d)break}}let s={};s[e.id]=!0;let a={};for(let p=r.length-1;p>=0;p--){let u=r[p],c=u.inputs;for(let l=0;l<u.outputs.length;l++)if(s[u.outputs[l].id]){for(let m in c)s[c[m].id]=!0,a[u.id]=!0;break}}let i=[];for(let p=0;p<r.length;p++){let u=r[p];if(n[u.id]&&a[u.id]){let c={};for(let m in u.inputs){let d=u.inputs[m];o[d.id]&&(c[m]=d)}let l=Object.assign({},u);l.inputs=c,l.outputs=u.outputs,i.push(l)}}return i}function K0(r,t,e,o){for(let n=t.length-1;n>=0;n--){let s=t[n],a=[];if(s.outputs.forEach(p=>{let u=r[p.id];u!=null?a.push(u):a.push(null)}),s.gradient==null)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let i=s.gradient(a);for(let p in s.inputs){if(!(p in i))throw new Error(`Cannot backprop through input ${p}. Available gradients found: ${Object.keys(i)}.`);let u=e(()=>i[p]());if(u.dtype!=="float32")throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${p} must have 'float32' dtype, but has '${u.dtype}'`);let c=s.inputs[p];if(!Cr(u.shape,c.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${p}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(r[c.id]==null)r[c.id]=u;else{let l=r[c.id];r[c.id]=o(l,u),l.dispose()}}}}var q0=20,bl=3,fw=7;function j0(r,t,e,o){let n=js(t),s=s4(r,t,e,n),a=t.length,i=td(r,t,e,n,s),p=["Tensor"];return o&&(p.push(`  dtype: ${e}`),p.push(`  rank: ${a}`),p.push(`  shape: [${t}]`),p.push("  values:")),p.push(i.map(u=>"    "+u).join(`
`)),p.join(`
`)}function s4(r,t,e,o){let n=He(t),s=o[o.length-1],a=new Array(s).fill(0),i=t.length,p=e==="complex64"?wl(r):r;if(i>1)for(let u=0;u<n/s;u++){let c=u*s;for(let l=0;l<s;l++)a[l]=Math.max(a[l],Cl(p[c+l],0,e).length)}return a}function Cl(r,t,e){let o;return Array.isArray(r)?o=`${parseFloat(r[0].toFixed(fw))} + ${parseFloat(r[1].toFixed(fw))}j`:Vo(r)?o=`'${r}'`:e==="bool"?o=X0(r):o=parseFloat(r.toFixed(fw)).toString(),Au(o,t)}function X0(r){return r===0?"false":"true"}function td(r,t,e,o,n,s=!0){let a=e==="complex64"?2:1,i=t[0],p=t.length;if(p===0){if(e==="complex64"){let h=wl(r);return[Cl(h[0],0,e)]}return e==="bool"?[X0(r[0])]:[r[0].toString()]}if(p===1){if(i>q0){let g=bl*a,x=Array.from(r.slice(0,g)),b=Array.from(r.slice((i-bl)*a,i*a));return e==="complex64"&&(x=wl(x),b=wl(b)),["["+x.map((C,S)=>Cl(C,n[S],e)).join(", ")+", ..., "+b.map((C,S)=>Cl(C,n[i-bl+S],e)).join(", ")+"]"]}return["["+(e==="complex64"?wl(r):Array.from(r)).map((g,x)=>Cl(g,n[x],e)).join(", ")+"]"]}let u=t.slice(1),c=o.slice(1),l=o[0]*a,m=[];if(i>q0){for(let h=0;h<bl;h++){let g=h*l,x=g+l;m.push(...td(r.slice(g,x),u,e,c,n,!1))}m.push("...");for(let h=i-bl;h<i;h++){let g=h*l,x=g+l;m.push(...td(r.slice(g,x),u,e,c,n,h===i-1))}}else for(let h=0;h<i;h++){let g=h*l,x=g+l;m.push(...td(r.slice(g,x),u,e,c,n,h===i-1))}let d=p===2?",":"";m[0]="["+(i>0?m[0]+d:"");for(let h=1;h<m.length-1;h++)m[h]=" "+m[h]+d;let f=`,
`;for(let h=2;h<p;h++)f+=`
`;return m[m.length-1]=" "+m[m.length-1]+"]"+(s?"":f),m}function wl(r){let t=[];for(let e=0;e<r.length;e+=2)t.push([r[e],r[e+1]]);return t}var tt=class{constructor(t,e,o){if(this.dtype=e,this.shape=t.slice(),this.size=He(t),o!=null){let n=o.length;$(n===this.size,()=>`Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`)}if(e==="complex64")throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=o||Xm(e,this.size),this.strides=js(t)}set(t,...e){e.length===0&&(e=[0]),$(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);let o=this.locToIndex(e);this.values[o]=t}get(...t){t.length===0&&(t=[0]);let e=0;for(let n of t){if(n<0||n>=this.shape[e]){let s=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(s)}e++}let o=t[t.length-1];for(let n=0;n<t.length-1;++n)o+=this.strides[n]*t[n];return this.values[o]}locToIndex(t){if(this.rank===0)return 0;if(this.rank===1)return t[0];let e=t[t.length-1];for(let o=0;o<t.length-1;++o)e+=this.strides[o]*t[o];return e}indexToLoc(t){if(this.rank===0)return[];if(this.rank===1)return[t];let e=new Array(this.shape.length);for(let o=0;o<e.length-1;++o)e[o]=Math.floor(t/this.strides[o]),t-=e[o]*this.strides[o];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Os().makeTensor(this.values,this.shape,this.dtype)}},Os=null,ac=null,a4=null;function Y0(r){Os=r}function Q0(r){ac=r}function Z0(r){a4=r}var ut=class{constructor(t,e,o,n){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=He(t),this.strides=js(t),this.dataId=o,this.id=n,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let t=await this.data();return ac.buffer(this.shape,this.dtype,t)}bufferSync(){return ac.buffer(this.shape,this.dtype,this.dataSync())}async array(){let t=await this.data();return Du(this.shape,t,this.dtype==="complex64")}arraySync(){return Du(this.shape,this.dataSync(),this.dtype==="complex64")}async data(){this.throwIfDisposed();let t=Os().read(this.dataId);if(this.dtype==="string"){let e=await t;try{return e.map(o=>sc(o))}catch(o){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),Os().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();let t=Os().readSync(this.dataId);if(this.dtype==="string")try{return t.map(e=>sc(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();let t=await Os().read(this.dataId);return this.dtype==="string"?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),Os().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return ac.print(this,t)}clone(){return this.throwIfDisposed(),ac.clone(this)}toString(t=!1){let e=this.dataSync();return j0(e,this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),ac.cast(this,t)}variable(t=!0,e,o){return this.throwIfDisposed(),Os().makeVariable(this,t,e,o)}};Object.defineProperty(ut,Symbol.hasInstance,{value:r=>!!r&&r.data!=null&&r.dataSync!=null&&r.throwIfDisposed!=null});function i4(){return gl("Tensor",()=>ut)}i4();var oi=class extends ut{constructor(t,e,o,n){super(t.shape,t.dtype,t.dataId,n),this.trainable=e,this.name=o}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Cr(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Os().disposeTensor(this),this.dataId=t.dataId,Os().incRef(this,null)}dispose(){Os().disposeVariable(this),this.isDisposedInternal=!0}};Object.defineProperty(oi,Symbol.hasInstance,{value:r=>r instanceof ut&&r.assign!=null&&r.assign instanceof Function});var ek={};qe(ek,{assertTypesMatch:()=>Cw,getTensorsInContainer:()=>Sl,isTensorInList:()=>p4,makeTypesMatch:()=>Oe});var hw;(function(r){r.R0="R0",r.R1="R1",r.R2="R2",r.R3="R3",r.R4="R4",r.R5="R5",r.R6="R6"})(hw||(hw={}));var gw;(function(r){r.float32="float32",r.int32="int32",r.bool="int32",r.complex64="complex64"})(gw||(gw={}));var xw;(function(r){r.float32="float32",r.int32="int32",r.bool="bool",r.complex64="complex64"})(xw||(xw={}));var yw;(function(r){r.float32="float32",r.int32="float32",r.bool="float32",r.complex64="complex64"})(yw||(yw={}));var bw;(function(r){r.float32="complex64",r.int32="complex64",r.bool="complex64",r.complex64="complex64"})(bw||(bw={}));var u4={float32:yw,int32:gw,bool:xw,complex64:bw};function dt(r,t){if(r==="string"||t==="string"){if(r==="string"&&t==="string")return"string";throw new Error(`Can not upcast ${r} with ${t}`)}return u4[r][t]}function ni(r){return dt(r,"int32")}function rd(r){return r!=null&&typeof r=="object"&&"texture"in r&&r.texture instanceof WebGLTexture}function od(r){return typeof GPUBuffer!="undefined"&&r!=null&&typeof r=="object"&&"buffer"in r&&r.buffer instanceof GPUBuffer}function Oe(r,t){if(r.dtype===t.dtype)return[r,t];let e=dt(r.dtype,t.dtype);return[r.cast(e),t.cast(e)]}function Cw(r,t){$(r.dtype===t.dtype,()=>`The dtypes of the first(${r.dtype}) and second(${t.dtype}) input must match`)}function p4(r,t){return t.some(e=>e.id===r.id)}function Sl(r){let t=[];return J0(r,t,new Set),t}function J0(r,t,e){if(r==null)return;if(r instanceof ut){t.push(r);return}if(!c4(r))return;let o=r;for(let n in o){let s=o[n];e.has(s)||(e.add(s),J0(s,t,e))}}function c4(r){return Array.isArray(r)||typeof r=="object"}function ww(r){return r.kernelName!=null}var nd=class{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(let t in this.registeredVariables)this.registeredVariables[t].dispose()}},ru=class{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new nd}async ready(){if(this.pendingBackendInit!=null)return this.pendingBackendInit.then(()=>{});if(this.backendInstance!=null)return;let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e];if(await this.initializeBackend(o).success){await this.setBackend(o);return}}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(this.pendingBackendInit!=null)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(this.backendInstance==null){let{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry))if(t in this.registryFactory){let{asyncInit:e}=this.initializeBackend(t);if(e)return null}else return null;return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,o=1){return t in this.registryFactory?(Ia(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:o},!0)}async setBackend(t){if(this.registryFactory[t]==null)throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,this.registry[t]==null){this.backendInstance=null;let{success:e,asyncInit:o}=this.initializeBackend(t);if(!(o?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new ed(this.backendInstance),!0}setupRegisteredKernels(){Ym(this.backendName).forEach(e=>{e.setupFunc!=null&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){Ym(t).forEach(o=>{o.disposeFunc!=null&&o.disposeFunc(this.registry[t])})}initializeBackend(t){let e=this.registryFactory[t];if(e==null)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{let o=e.factory();if(o&&!(o instanceof ao)&&typeof o.then=="function"){let n=++this.pendingBackendInitId,s=o.then(a=>n<this.pendingBackendInitId?!1:(this.registry[t]=a,this.pendingBackendInit=null,!0)).catch(a=>(n<this.pendingBackendInitId||(this.pendingBackendInit=null,Ia(`Initialization of backend ${t} failed`),Ia(a.stack||a.message)),!1));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}else return this.registry[t]=o,{success:!0,asyncInit:!1}}catch(o){return Ia(`Initialization of backend ${t} failed`),Ia(o.stack||o.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&this.pendingBackendInit!=null&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(Object.keys(this.registryFactory).length===0)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){let t=this.getSortedBackends();for(let e=0;e<t.length;e++){let o=t[e],{success:n,asyncInit:s}=this.initializeBackend(o);if(s||n)return{name:o,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){let o=this.state.tensorInfo.get(e),n=o.backend,s=this.readSync(e),a=n.refCount(e);n.disposeData(e,!0),o.backend=t,t.move(e,s,o.shape,o.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let o=null;if(e==null){if(typeof t!="function")throw new Error("Please provide a function to tidy()");e=t}else{if(typeof t!="string"&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if(typeof e!="function")throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}let n;return this.scopedRun(()=>this.startScope(o),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,o){t();try{let n=o();return e(),n}catch(n){throw e(),n}}nextTensorId(){return ru.nextTensorId++}nextVariableId(){return ru.nextVariableId++}clone(t){let e=T.runKernel(wo,{x:t}),o={x:t},n=a=>({x:()=>{let i="float32",p={x:a},u={dtype:i};return T.runKernel(bo,p,u)}}),s=[];return this.addTapeNode(this.state.activeScope.name,o,[e],n,s,{}),e}runKernel(t,e,o){if(this.backendName==null&&this.backend,!(tc(t,this.backendName)!=null))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:o})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,o){let n=this.backend.numDataIds(),s=0;o.forEach(p=>{s+=p.dtype==="complex64"?3:1});let a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=n-e-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t){let e,o=[],n=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);let i;this.backendName==null&&this.backend;let p,u=ww(t)?t.kernelName:this.state.activeScope!=null?this.state.activeScope.name:"";if(ww(t)){let{kernelName:f,inputs:h,attrs:g}=t;this.backendName==null&&this.backend;let x=tc(f,this.backendName);$(x!=null,()=>`Cannot find registered kernel '${f}' for backend '${this.backendName}'`),i=()=>{let b=this.backend.numDataIds();p=x.kernelFunc({inputs:h,attrs:g,backend:this.backend});let C=Array.isArray(p)?p:[p];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(f,b,C);let S=C.map(k=>k.rank!=null?k:this.makeTensorFromTensorInfo(k));if(n){let k=this.getTensorsForGradient(f,h,S);o=this.saveTensorsForBackwardMode(k)}return S}}else{let{forwardFunc:f}=t,h=g=>{n&&(o=g.map(x=>this.keep(this.clone(x))))};i=()=>{let g=this.backend.numDataIds();p=this.tidy(()=>f(this.backend,h));let x=Array.isArray(p)?p:[p];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,g,x),x}}let{inputs:c,attrs:l}=t,m=ww(t)?null:t.backwardsFunc,d;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{!this.ENV.getBool("DEBUG")&&!this.state.profiling?e=i():(d=this.profiler.profileKernel(u,c,()=>i()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),e=d.outputs)}),n&&this.addTapeNode(u,c,e,m,o,l),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(c).map(f=>c[f]!=null?c[f].shape:null),outputShapes:e.map(f=>f.shape),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(p)?e:e[0]}saveTensorsForBackwardMode(t){return t.map(o=>this.keep(this.clone(o)))}getTensorsForGradient(t,e,o){let n=iw(t);if(n!=null){let s=n.inputsToSave||[],a=n.outputsToSave||[],i;n.saveAllInputs?($(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),i=Object.keys(e).map(u=>e[u])):i=s.map(u=>e[u]);let p=o.filter((u,c)=>a[c]);return i.concat(p)}return[]}makeTensor(t,e,o,n){if(t==null)throw new Error("Values passed to engine.makeTensor() are null");o=o||"float32",n=n||this.backend;let s=t;o==="string"&&Vo(t[0])&&(s=t.map(p=>tu(p)));let a=n.write(s,e,o),i=new ut(e,o,a,this.nextTensorId());if(this.trackTensor(i,n),o==="string"){let p=this.state.tensorInfo.get(a),u=ow(s);this.state.numBytes+=u-p.bytes,p.bytes=u}return i}makeTensorFromDataId(t,e,o,n){o=o||"float32";let s={dataId:t,shape:e,dtype:o};return this.makeTensorFromTensorInfo(s,n)}makeTensorFromTensorInfo(t,e){let{dataId:o,shape:n,dtype:s}=t,a=new ut(n,s,o,this.nextTensorId());return this.trackTensor(a,e),a}makeVariable(t,e=!0,o,n){o=o||this.nextVariableId().toString(),n!=null&&n!==t.dtype&&(t=t.cast(n));let s=new oi(t,e,o,this.nextTensorId());if(this.state.registeredVariables[s.name]!=null)throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,t.dtype==="string"&&this.state.numStringTensors++;let o=0;t.dtype!=="complex64"&&t.dtype!=="string"&&(o=t.size*jp(t.dtype)),this.state.numBytes+=o,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:o})),t instanceof oi||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;let e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,t.dtype==="string"&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),t.dtype!=="complex64"&&t.dtype!=="string"){let o=t.size*jp(t.dtype);this.state.numBytes-=o}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(let t in this.state.registeredVariables){let e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),this.state.registeredVariables[t.name]!=null&&delete this.state.registeredVariables[t.name]}memory(){let t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,t.reasons==null&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;let e=this.state.numBytes,o=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(n=>n.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-o;for(let n of this.state.activeProfile.kernels)n.kernelTimeMs=await n.kernelTimeMs,n.extraInfo=await n.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&this.state.kernelDepth===0}addTapeNode(t,e,o,n,s,a){let i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:o,saved:s},p=iw(t);p!=null&&(n=p.gradFunc),n!=null&&(i.gradient=u=>(u=u.map((c,l)=>{if(c==null){let m=o[l],d=Yp(m.size,m.dtype);return this.makeTensor(d,m.shape,m.dtype)}return c}),n(u.length>1?u:u[0],s,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){this.state.gradientDepth===0&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){let e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){let e=Sl(t),o=new Set(e.map(s=>s.id));for(let s=0;s<this.state.activeScope.track.length;s++){let a=this.state.activeScope.track[s];!a.kept&&!o.has(a.id)&&a.dispose()}let n=this.state.scopeStack.pop();this.state.activeScope=this.state.scopeStack.length===0?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(s=>{!s.kept&&s.scopeId===n.id&&this.track(s)})}gradients(t,e,o,n=!1){if($(e.length>0,()=>"gradients() received an empty list of xs."),o!=null&&o.dtype!=="float32")throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);let s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));$(s instanceof ut,()=>"The result y returned by f() must be a tensor.");let a=H0(this.state.activeTape,e,s);if(!n&&a.length===0&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let i={};i[s.id]=o==null?l4(s.shape):o,K0(i,a,u=>this.tidy(u),m4);let p=e.map(u=>i[u.id]);return this.state.gradientDepth===0&&(this.state.activeTape.forEach(u=>{for(let c of u.saved)c.dispose()}),this.state.activeTape=null),{value:s,grads:p}})}customGrad(t){return $(qs(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{$(e.every(i=>i instanceof ut),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let o,n={};e.forEach((i,p)=>{n[p]=i});let s=(i,p)=>(o=t(...e,p),$(o.value instanceof ut,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),$(qs(o.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),o.value),a=(i,p)=>{let u=o.gradFunc(i,p),c=Array.isArray(u)?u:[u];$(c.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),$(c.every(m=>m instanceof ut),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let l={};return c.forEach((m,d)=>{l[d]=()=>m}),l};return this.runKernelFunc({forwardFunc:s,backwardsFunc:a,inputs:n})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){let e=Wu(),o=await this.backend.time(t);return o.wallMs=Wu()-e,o}track(t){return this.state.activeScope!=null&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new nd;for(let t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}};ru.nextTensorId=0;ru.nextVariableId=0;function l4(r){let t=fl(He(r),"float32");return T.makeTensor(t,r,"float32")}function Sw(){let r=aw();if(r._tfengine==null){let t=new hl(r);r._tfengine=new ru(t)}return _0(r._tfengine.ENV),Y0(()=>r._tfengine),r._tfengine}var T=Sw();function m4(r,t){let e={a:r,b:t};return T.runKernel(uo,e)}var ou={};qe(ou,{isBrowser:()=>vw,isMobile:()=>h4,mockIsMobile:()=>f4});function d4(){return typeof navigator!="undefined"&&navigator!=null}var Iw;function f4(r){Iw=r}function h4(r){if(Iw!==void 0)return Iw;if(r||d4()){if(r||(r=navigator),r.product==="ReactNative")return!0;let t=r.userAgent||r.vendor||(typeof window!="undefined"?window.opera:"");if(!t){let e=r;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function vw(){return typeof window!="undefined"&&window.document!=null||typeof WorkerGlobalScope!="undefined"}var $r=A();$r.registerFlag("DEBUG",()=>!1,r=>{r&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")});$r.registerFlag("IS_BROWSER",()=>vw());$r.registerFlag("IS_NODE",()=>typeof process!="undefined"&&typeof process.versions!="undefined"&&typeof process.versions.node!="undefined");$r.registerFlag("IS_CHROME",()=>typeof navigator!="undefined"&&navigator!=null&&navigator.userAgent!=null&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor));$r.registerFlag("IS_SAFARI",()=>typeof navigator!="undefined"&&navigator!=null&&navigator.userAgent!=null&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor));$r.registerFlag("PROD",()=>!1);$r.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>$r.getBool("DEBUG"));$r.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0);$r.registerFlag("IS_TEST",()=>!1);$r.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>$r.getBool("DEBUG"));$r.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);$r.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1);$r.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);function ir(r,t){let e=r;if(Ot(r))return t==="string"?[]:[r.length];if(rd(r)){let n=r.channels||"RGBA";return[r.height,r.width*n.length]}else if(od(r))return[r.buffer.size/(t==null?4:jp(t))];if(!Array.isArray(r))return[];let o=[];for(;Array.isArray(e)||Ot(e)&&t!=="string";)o.push(e.length),e=e[0];return Array.isArray(r)&&A().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&rk(r,o,[]),o}function rk(r,t,e){if(e=e||[],!Array.isArray(r)&&!Ot(r)){$(t.length===0,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);return}$(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${r.length} elements`),$(r.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${r.length} elements`);let o=t.slice(1);for(let n=0;n<r.length;++n)rk(r[n],o,e.concat(n))}function tk(r,t,e,o){if(r!=="string_or_numeric"){if(r==null)throw new Error("Expected dtype cannot be null.");if(r!=="numeric"&&r!==t||r==="numeric"&&t==="string")throw new Error(`Argument '${e}' passed to '${o}' must be ${r} tensor, but got ${t} tensor`)}}function v(r,t,e,o="numeric"){if(r instanceof ut)return tk(o,r.dtype,t,e),r;let n=Ri(r);if(n!=="string"&&["bool","int32","float32"].indexOf(o)>=0&&(n=o),tk(o,n,t,e),r==null||!Ot(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string"){let p=r==null?"null":r.constructor.name;throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${p}'`)}let s=ir(r,n);!Ot(r)&&!Array.isArray(r)&&(r=[r]);let i=n!=="string"?nc(r,n):Ps(r,[],!0);return T.makeTensor(i,s,n)}function si(r,t,e,o="numeric"){if(!Array.isArray(r))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return r.map((s,a)=>v(s,`${t}[${a}]`,e,o))}var kw="__op";function N(r){let t=Object.keys(r);if(t.length!==1)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0],o=r[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e=e+kw;let n=(...s)=>{T.startScope(e);try{let a=o(...s);return Fu(a)&&console.error("Cannot return a Promise inside of tidy."),T.endScope(a),a}catch(a){throw T.endScope(null),a}};return Object.defineProperty(n,"name",{value:e,configurable:!0}),n}function g4(r,t){let e=v(r,"real","complex"),o=v(t,"imag","complex");yt(e.shape,o.shape,`real and imag shapes, ${e.shape} and ${o.shape}, must match in call to tf.complex().`);let n={real:e,imag:o};return T.runKernel(Fi,n)}var Er=N({complex_:g4});function Sr(r,t,e,o){if(o==null)o=Ri(r);else if(o==="complex64")throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(od(r)||rd(r)){if(o!=="float32"&&o!=="int32")throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${o}.`);return T.backend.createTensorFromGPUData(r,t||e,o)}if(!Ot(r)&&!Array.isArray(r)&&typeof r!="number"&&typeof r!="boolean"&&typeof r!="string")throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(t!=null){wt(t);let n=He(t),s=He(e);$(n===s,()=>`Based on the provided shape, [${t}], the tensor should have ${n} values but has ${s}`);for(let a=0;a<e.length;++a){let i=e[a],p=a===e.length-1?i!==He(t.slice(a)):!0;$(e[a]===t[a]||!p,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!Ot(r)&&!Array.isArray(r)&&(r=[r]),t=t||e,r=o!=="string"?nc(r,o):Ps(r,[],!0),T.makeTensor(r,t,o)}function ur(r,t,e){let o=ir(r,e);return Sr(r,t,o,e)}var Il={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var jt=class{static join(t){return new jt(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,t==null||(t instanceof Array||(t=[t]),t=t.map(o=>Ot(o)?o.buffer:o),t.length===0))return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let o=0;o<t.length;o++){let n=t[o];o!==t.length-1&&n.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);let s=e+n.byteLength;this.shards.push({buffer:n,start:e,end:s}),e=s}this.shards.length===0&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(this.shards.length===0)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),e=Math.min(this.byteLength,e),e<=t)return new ArrayBuffer(0);let o=this.findShardForByte(t);if(o===-1)throw new Error(`Could not find start shard for byte ${t}`);let n=e-t,s=new ArrayBuffer(n),a=new Uint8Array(s),i=0;for(let p=o;p<this.shards.length;p++){let u=this.shards[p],l=t+i-u.start,m=i,f=Math.min(e,u.end)-u.start,h=new Uint8Array(u.buffer,l,f-l);if(a.set(h,m),i+=h.length,e<u.end)break}return s}findShardForByte(t){if(this.shards.length===0||t<0||t>=this.byteLength)return-1;if(this.bufferUniformSize!=null)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(n){return t<n.start?-1:t>=n.end?1:0}if(e(this.shards[this.previousShardIndex])===0)return this.previousShardIndex;let o=x4(this.shards,e);return o===-1?-1:(this.previousShardIndex=o,this.previousShardIndex)}};function x4(r,t){let e=0,o=r.length;for(;e<=o;){let n=Math.floor((o-e)/2)+e,s=t(r[n]);if(s===0)return n;s<0?o=n:e=n+1}return-1}var sd=4;async function nk(r,t){let e=[],o=[],n=Array.isArray(r)?r.map(a=>a.name):Object.keys(r);for(let a=0;a<n.length;++a){let i=n[a],p=Array.isArray(r)?r[a].tensor:r[i];if(p.dtype!=="float32"&&p.dtype!=="int32"&&p.dtype!=="bool"&&p.dtype!=="string"&&p.dtype!=="complex64")throw new Error(`Unsupported dtype in weight '${i}': ${p.dtype}`);let u={name:i,shape:p.shape,dtype:p.dtype};if(p.dtype==="string"){let c=new Promise(async l=>{let m=await p.bytes(),d=m.reduce((g,x)=>g+x.length,0)+sd*m.length,f=new Uint8Array(d),h=0;for(let g=0;g<m.length;g++){let x=m[g],b=new Uint8Array(new Uint32Array([x.length]).buffer);f.set(b,h),h+=sd,f.set(x,h),h+=x.length}l(f)});o.push(c)}else o.push(p.data());t!=null&&(u.group=t),e.push(u)}let s=await Promise.all(o);return{data:y4(s),specs:e}}function ad(r,t){let e=new jt(r),o={},n,s=0;for(let a of t){let i=a.name,p=a.dtype,u=a.shape,c=He(u),l;if("quantization"in a){let m=a.quantization;if(m.dtype==="uint8"||m.dtype==="uint16"){if(!("min"in m&&"scale"in m))throw new Error(`Weight ${a.name} with quantization ${m.dtype} doesn't have corresponding metadata min and scale.`)}else if(m.dtype==="float16"){if(p!=="float32")throw new Error(`Weight ${a.name} is quantized with ${m.dtype} which only supports weights of type float32 not ${p}.`)}else throw new Error(`Weight ${a.name} has unknown quantization dtype ${m.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let d=Il[m.dtype],f=e.slice(s,s+c*d),h=m.dtype==="uint8"?new Uint8Array(f):new Uint16Array(f);if(p==="float32")if(m.dtype==="uint8"||m.dtype==="uint16"){l=new Float32Array(h.length);for(let g=0;g<h.length;g++){let x=h[g];l[g]=x*m.scale+m.min}}else if(m.dtype==="float16")n===void 0&&(n=S4()),l=n(h);else throw new Error(`Unsupported quantization type ${m.dtype} for weight type float32.`);else if(p==="int32"){if(m.dtype!=="uint8"&&m.dtype!=="uint16")throw new Error(`Unsupported quantization type ${m.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let g=0;g<h.length;g++){let x=h[g];l[g]=Math.round(x*m.scale+m.min)}}else throw new Error(`Unsupported dtype in weight '${i}': ${p}`);s+=c*d}else if(p==="string"){let m=He(a.shape);l=[];for(let d=0;d<m;d++){let f=new Uint32Array(e.slice(s,s+sd))[0];s+=sd;let h=new Uint8Array(e.slice(s,s+f));l.push(h),s+=f}}else{let m=Il[p],d=e.slice(s,s+c*m);if(p==="float32")l=new Float32Array(d);else if(p==="int32")l=new Int32Array(d);else if(p==="bool")l=new Uint8Array(d);else if(p==="complex64"){l=new Float32Array(d);let f=new Float32Array(l.length/2),h=new Float32Array(l.length/2);for(let b=0;b<f.length;b++)f[b]=l[b*2],h[b]=l[b*2+1];let g=ur(f,u,"float32"),x=ur(h,u,"float32");o[i]=Er(g,x),g.dispose(),x.dispose()}else throw new Error(`Unsupported dtype in weight '${i}': ${p}`);s+=c*m}p!=="complex64"&&(o[i]=ur(l,u,p))}return o}function y4(r){if(r===null)throw new Error(`Invalid input value: ${JSON.stringify(r)}`);let t=0,e=[];r.forEach(s=>{if(t+=s.byteLength,e.push(s.byteLength===s.buffer.byteLength?s:new s.constructor(s)),!(s instanceof Float32Array||s instanceof Int32Array||s instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`)});let o=new Uint8Array(t),n=0;return e.forEach(s=>{o.set(new Uint8Array(s.buffer),n),n+=s.byteLength}),o.buffer}var Nw=typeof Buffer!="undefined"&&(typeof Blob=="undefined"||typeof atob=="undefined"||typeof btoa=="undefined");function ok(r){return Nw?Buffer.byteLength(r,"utf8"):new Blob([r]).size}function sk(r){if(Nw)return Buffer.from(r).toString("base64");let t=new Uint8Array(r),e="";for(let o=0,n=t.length;o<n;o++)e+=String.fromCharCode(t[o]);return btoa(e)}function ak(r){if(Nw){let o=Buffer.from(r,"base64");return o.buffer.slice(o.byteOffset,o.byteOffset+o.byteLength)}let t=atob(r),e=new Uint8Array(t.length);for(let o=0;o<t.length;++o)e.set([t.charCodeAt(o)],o);return e.buffer}function ik(r){return jt.join(r)}function Tw(r){let t="/";for(r=r.trim();r.endsWith(t);)r=r.slice(0,r.length-1);let e=r.split(t);return e[e.length-1]}function id(r,t){let e={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy,weightsManifest:t};return r.signature!=null&&(e.signature=r.signature),r.userDefinedMetadata!=null&&(e.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(e.modelInitializer=r.modelInitializer),r.initializerSignature!=null&&(e.initializerSignature=r.initializerSignature),r.trainingConfig!=null&&(e.trainingConfig=r.trainingConfig),e}function _w(r,t,e){let o={modelTopology:r.modelTopology,format:r.format,generatedBy:r.generatedBy,convertedBy:r.convertedBy};if(r.trainingConfig!=null&&(o.trainingConfig=r.trainingConfig),r.weightsManifest!=null){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");o.weightSpecs=t,o.weightData=e}return r.signature!=null&&(o.signature=r.signature),r.userDefinedMetadata!=null&&(o.userDefinedMetadata=r.userDefinedMetadata),r.modelInitializer!=null&&(o.modelInitializer=r.modelInitializer),r.initializerSignature!=null&&(o.initializerSignature=r.initializerSignature),o}async function ic(r,t){let e,o;return r.weightsManifest!=null&&([e,o]=await t(r.weightsManifest)),_w(r,e,o)}function va(r){if(r.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:r.modelTopology==null?0:ok(JSON.stringify(r.modelTopology)),weightSpecsBytes:r.weightSpecs==null?0:ok(JSON.stringify(r.weightSpecs)),weightDataBytes:r.weightData==null?0:new jt(r.weightData).byteLength}}function ud(r){let t=[];for(let e of r)t.push(...e.weights);return t}function b4(){let r=e=>{let o=e<<13,n=0;for(;!(o&8388608);)n-=8388608,o<<=1;return o&=-8388609,n+=947912704,o|n},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=r(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}function C4(){let r=new Uint32Array(64);r[0]=0,r[31]=1199570944,r[32]=2147483648,r[63]=3347054592;for(let t=1;t<31;t++)r[t]=t<<23;for(let t=33;t<63;t++)r[t]=2147483648+(t-32<<23);return r}function w4(){let r=new Uint32Array(64);for(let t=0;t<64;t++)r[t]=1024;return r[0]=r[32]=0,r}function S4(){let r=b4(),t=C4(),e=w4();return o=>{let n=new ArrayBuffer(4*o.length),s=new Uint32Array(n);for(let a=0;a<o.length;a++){let i=o[a],p=r[e[i>>10]+(i&1023)]+t[i>>10];s[a]=p}return new Float32Array(n)}}var ft=class{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return ft.instance==null&&(ft.instance=new ft),ft.instance}static registerSaveRouter(t){ft.getInstance().saveRouters.push(t)}static registerLoadRouter(t){ft.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return ft.getHandlers(t,"save")}static getLoadHandlers(t,e){return ft.getHandlers(t,"load",e)}static getHandlers(t,e,o){let n=[];return(e==="load"?ft.getInstance().loadRouters:ft.getInstance().saveRouters).forEach(a=>{let i=a(t,o);i!==null&&n.push(i)}),n}},uk=r=>ft.registerSaveRouter(r),pk=r=>ft.registerLoadRouter(r),ck=r=>ft.getSaveHandlers(r),lk=(r,t)=>ft.getLoadHandlers(r,t);var $w="tensorflowjs",Ew=1,Uu="models_store",nu="model_info_store";function mk(){if(!A().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let r=typeof window=="undefined"?self:window,t=r.indexedDB||r.mozIndexedDB||r.webkitIndexedDB||r.msIndexedDB||r.shimIndexedDB;if(t==null)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Rw(r){let t=r.result;t.createObjectStore(Uu,{keyPath:"modelPath"}),t.createObjectStore(nu,{keyPath:"modelPath"})}var ka=class{constructor(t){if(this.indexedDB=mk(),t==null||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((o,n)=>{let s=this.indexedDB.open($w,Ew);s.onupgradeneeded=()=>Rw(s),s.onsuccess=()=>{let a=s.result;if(e==null){let i=a.transaction(Uu,"readonly"),u=i.objectStore(Uu).get(this.modelPath);u.onsuccess=()=>{if(u.result==null)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));o(u.result.modelArtifacts)},u.onerror=c=>(a.close(),n(u.error)),i.oncomplete=()=>a.close()}else{e.weightData=jt.join(e.weightData);let i=va(e),p=a.transaction(nu,"readwrite"),u=p.objectStore(nu),c;try{c=u.put({modelPath:this.modelPath,modelArtifactsInfo:i})}catch(m){return n(m)}let l;c.onsuccess=()=>{l=a.transaction(Uu,"readwrite");let m=l.objectStore(Uu),d;try{d=m.put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:i})}catch(f){return n(f)}d.onsuccess=()=>o({modelArtifactsInfo:i}),d.onerror=f=>{u=p.objectStore(nu);let h=u.delete(this.modelPath);h.onsuccess=()=>(a.close(),n(d.error)),h.onerror=g=>(a.close(),n(d.error))}},c.onerror=m=>(a.close(),n(c.error)),p.oncomplete=()=>{l==null?a.close():l.oncomplete=()=>a.close()}}},s.onerror=a=>n(s.error)})}};ka.URL_SCHEME="indexeddb://";var dk=r=>A().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(ka.URL_SCHEME)?I4(r.slice(ka.URL_SCHEME.length)):null;ft.registerSaveRouter(dk);ft.registerLoadRouter(dk);function I4(r){return new ka(r)}function v4(r){return r.startsWith(ka.URL_SCHEME)?r.slice(ka.URL_SCHEME.length):r}var pd=class{constructor(){this.indexedDB=mk()}async listModels(){return new Promise((t,e)=>{let o=this.indexedDB.open($w,Ew);o.onupgradeneeded=()=>Rw(o),o.onsuccess=()=>{let n=o.result,s=n.transaction(nu,"readonly"),i=s.objectStore(nu).getAll();i.onsuccess=()=>{let p={};for(let u of i.result)p[u.modelPath]=u.modelArtifactsInfo;t(p)},i.onerror=p=>(n.close(),e(i.error)),s.oncomplete=()=>n.close()},o.onerror=n=>e(o.error)})}async removeModel(t){return t=v4(t),new Promise((e,o)=>{let n=this.indexedDB.open($w,Ew);n.onupgradeneeded=()=>Rw(n),n.onsuccess=()=>{let s=n.result,a=s.transaction(nu,"readwrite"),i=a.objectStore(nu),p=i.get(t),u;p.onsuccess=()=>{if(p.result==null)return s.close(),o(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{let c=i.delete(t),l=()=>{u=s.transaction(Uu,"readwrite");let d=u.objectStore(Uu).delete(t);d.onsuccess=()=>e(p.result.modelArtifactsInfo),d.onerror=f=>o(p.error)};c.onsuccess=l,c.onerror=m=>(l(),s.close(),o(p.error))}},p.onerror=c=>(s.close(),o(p.error)),a.oncomplete=()=>{u==null?s.close():u.oncomplete=()=>s.close()}},n.onerror=s=>o(n.error)})}};var ai="/",uc="tensorflowjs_models",fk="info",k4="model_topology",N4="weight_specs",T4="weight_data",_4="model_metadata";function hk(r){return{info:[uc,r,fk].join(ai),topology:[uc,r,k4].join(ai),weightSpecs:[uc,r,N4].join(ai),weightData:[uc,r,T4].join(ai),modelMetadata:[uc,r,_4].join(ai)}}function gk(r){for(let t of Object.values(r))window.localStorage.removeItem(t)}function $4(r){let t=r.split(ai);if(t.length<3)throw new Error(`Invalid key format: ${r}`);return t.slice(1,t.length-1).join(ai)}function E4(r){return r.startsWith(Na.URL_SCHEME)?r.slice(Na.URL_SCHEME.length):r}var Na=class{constructor(t){if(!A().getBool("IS_BROWSER")||typeof window=="undefined"||typeof window.localStorage=="undefined")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,t==null||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=hk(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let e=JSON.stringify(t.modelTopology),o=JSON.stringify(t.weightSpecs),n=va(t),s=jt.join(t.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(n)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,o),this.LS.setItem(this.keys.weightData,sk(s));let a={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:t.signature!=null?t.signature:void 0,userDefinedMetadata:t.userDefinedMetadata!=null?t.userDefinedMetadata:void 0,modelInitializer:t.modelInitializer!=null?t.modelInitializer:void 0,initializerSignature:t.initializerSignature!=null?t.initializerSignature:void 0,trainingConfig:t.trainingConfig!=null?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:n}}catch(a){throw gk(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`)}}}async load(){let t=JSON.parse(this.LS.getItem(this.keys.info));if(t==null)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(t.modelTopologyType!=="JSON")throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let e={},o=JSON.parse(this.LS.getItem(this.keys.topology));if(o==null)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=o;let n=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(n==null)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=n;let s=this.LS.getItem(this.keys.modelMetadata);if(s!=null){let i=JSON.parse(s);e.format=i.format,e.generatedBy=i.generatedBy,e.convertedBy=i.convertedBy,i.signature!=null&&(e.signature=i.signature),i.userDefinedMetadata!=null&&(e.userDefinedMetadata=i.userDefinedMetadata),i.modelInitializer!=null&&(e.modelInitializer=i.modelInitializer),i.initializerSignature!=null&&(e.initializerSignature=i.initializerSignature),i.trainingConfig!=null&&(e.trainingConfig=i.trainingConfig)}let a=this.LS.getItem(this.keys.weightData);if(a==null)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=ak(a),e}};Na.URL_SCHEME="localstorage://";var xk=r=>A().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(Na.URL_SCHEME)?R4(r.slice(Na.URL_SCHEME.length)):null;ft.registerSaveRouter(xk);ft.registerLoadRouter(xk);function R4(r){return new Na(r)}var cd=class{constructor(){$(A().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),$(typeof window=="undefined"||typeof window.localStorage!="undefined",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let t={},e=uc+ai,o=ai+fk;for(let n=0;n<this.LS.length;++n){let s=this.LS.key(n);if(s.startsWith(e)&&s.endsWith(o)){let a=$4(s);t[a]=JSON.parse(this.LS.getItem(s))}}return t}async removeModel(t){t=E4(t);let e=hk(t);if(this.LS.getItem(e.info)==null)throw new Error(`Cannot find model at path '${t}'`);let o=JSON.parse(this.LS.getItem(e.info));return gk(e),o}};var pc="://",Zt=class{constructor(){this.managers={}}static getInstance(){return Zt.instance==null&&(Zt.instance=new Zt),Zt.instance}static registerManager(t,e){$(t!=null,()=>"scheme must not be undefined or null."),t.endsWith(pc)&&(t=t.slice(0,t.indexOf(pc))),$(t.length>0,()=>"scheme must not be an empty string.");let o=Zt.getInstance();$(o.managers[t]==null,()=>`A model store manager is already registered for scheme '${t}'.`),o.managers[t]=e}static getManager(t){let e=Zt.getInstance().managers[t];if(e==null)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(Zt.getInstance().managers)}};function ld(r){if(r.indexOf(pc)===-1)throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Zt.getSchemes().join(",")}`);return{scheme:r.split(pc)[0],path:r.split(pc)[1]}}async function yk(r,t,e=!1){$(r!==t,()=>`Old path and new path are the same: '${r}'`);let o=ft.getLoadHandlers(r);$(o.length>0,()=>`Copying failed because no load handler is found for source URL ${r}.`),$(o.length<2,()=>`Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);let n=o[0],s=ft.getSaveHandlers(t);$(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),$(s.length<2,()=>`Copying failed because more than one (${o.length}) save handlers for destination URL ${t}.`);let a=s[0],i=ld(r).scheme,p=ld(r).path,u=i===ld(r).scheme,c=await n.load();e&&u&&await Zt.getManager(i).removeModel(p);let l=await a.save(c);return e&&!u&&await Zt.getManager(i).removeModel(p),l.modelArtifactsInfo}async function bk(){let r=Zt.getSchemes(),t={};for(let e of r){let o=await Zt.getManager(e).listModels();for(let n in o){let s=e+pc+n;t[s]=o[n]}}return t}async function Ck(r){let t=ld(r);return Zt.getManager(t.scheme).removeModel(t.path)}async function wk(r,t){return yk(r,t,!1)}async function Sk(r,t){return yk(r,t,!0)}var Dw=class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return this.textEncoder==null&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){if(typeof window=="undefined"||!A().getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(t,e);return}this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",o=>{if(o.source===window&&o.data.name===this.messageName){o.stopPropagation();let n=this.functionRefs[o.data.index];n(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}isTypedArray(t){return Qm(t)}};if(A().get("IS_BROWSER")){A().setPlatform("browser",new Dw);try{Zt.registerManager(Na.URL_SCHEME,new cd)}catch(r){}try{Zt.registerManager(ka.URL_SCHEME,new pd)}catch(r){}}var D4={importFetch:()=>Ik()},Aw;var Fw=class{constructor(){this.util=vk(),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return A().global.fetch!=null?A().global.fetch(t,e):(Aw==null&&(Aw=D4.importFetch()),Aw(t,e))}now(){let t=process.hrtime();return t[0]*1e3+t[1]/1e6}encode(t,e){if(e!=="utf-8"&&e!=="utf8")throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return t.length===0?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}};A().get("IS_NODE")&&!A().get("IS_BROWSER")&&A().setPlatform("node",new Fw);function me(r,t="float32",e){return t=t||"float32",wt(r),new tt(r,t,e)}function A4(r,t){let e=v(r,"x","cast");if(!rw(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if(t==="string"&&e.dtype!=="string"||t!=="string"&&e.dtype==="string")throw new Error("Only strings can be casted to strings");let o={x:e},n={dtype:t};return T.runKernel(bo,o,n)}var We=N({cast_:A4});function F4(r){let e={x:v(r,"x","clone","string_or_numeric")};return T.runKernel(wo,e)}var Ur=N({clone_:F4});function md(r,t=!1){console.log(r.toString(t))}Sw();var P4={buffer:me,cast:We,clone:Ur,print:md};Q0(P4);function lde(){A().set("PROD",!0)}function mde(){A().set("DEBUG",!0)}function dde(){A().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Pw(r){A().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(r+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}Z0(Pw);function fde(){T.disposeVariables()}function pr(){return T}function hde(){return T.memory()}function gde(r){return T.profile(r)}function De(r,t){return T.tidy(r,t)}function Mt(r){Sl(r).forEach(e=>e.dispose())}function Rr(r){return T.keep(r)}function xde(r){return T.time(r)}function yde(r){return T.setBackend(r)}function bde(){return T.ready()}function Cde(){return T.backendName}function wde(r){T.removeBackend(r)}function Sde(r){return T.findBackend(r)}function Ide(r){return T.findBackendFactory(r)}function su(r,t,e=1){return T.registerBackend(r,t,e)}function vde(){return T.backend}function kde(r,t){A().setPlatform(r,t)}function O4(r,t){let e=v(r,"a","add"),o=v(t,"b","add");[e,o]=Oe(e,o);let n={a:e,b:o};return T.runKernel(uo,n)}var Ce=N({add_:O4});function M4(r,t){let e=v(r,"a","floorDiv"),o=v(t,"b","floorDiv");[e,o]=Oe(e,o);let n={a:e,b:o};return T.runKernel(In,n)}var dd=N({floorDiv_:M4});function L4(r,t){let e=v(r,"a","div"),o=v(t,"b","div");if([e,o]=Oe(e,o),e.dtype==="int32"&&o.dtype==="int32")return dd(e,o);let n={a:e,b:o},s={};return T.runKernel(hn,n,s)}var je=N({div_:L4});function B4(r,t){let e=v(r,"a","mul"),o=v(t,"b","mul");[e,o]=Oe(e,o);let n={a:e,b:o};return T.runKernel(Yn,n)}var se=N({mul_:B4});function z4(r){let t=v(r,"x","abs");if(t.dtype==="complex64"){let e={x:t};return T.runKernel(Pi,e)}else{let e={x:t};return T.runKernel(Xs,e)}}var Jt=N({abs_:z4});function V4(r){let e={x:v(r,"x","acos")};return T.runKernel(Wo,e)}var kk=N({acos_:V4});function W4(r){let e={x:v(r,"x","acosh")};return T.runKernel(Uo,e)}var Nk=N({acosh_:W4});function U4(r){$(Array.isArray(r),()=>"The argument passed to tf.addN() must be a list of tensors"),$(r.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${r.length}`);let t=r.map((n,s)=>v(n,`tensors${s}`,"addN")),e=t[0];t.forEach(n=>{if(n.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(n=>{if(!Cr(n.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});let o=t;return T.runKernel(Go,o)}var Tk=N({addN_:U4});function G4(r,t=null,e=!1){let n={x:v(r,"x","all","bool")},s={axis:t,keepDims:e};return T.runKernel(Ho,n,s)}var _k=N({all_:G4});function H4(r,t=null,e=!1){let n={x:v(r,"x","any","bool")},s={axis:t,keepDims:e};return T.runKernel(Ko,n,s)}var $k=N({any_:H4});function K4(r,t=0){let o={x:v(r,"x","argMax")},n={axis:t};return T.runKernel(Ys,o,n)}var Ek=N({argMax_:K4});function q4(r,t=0){let o={x:v(r,"x","argMin")},n={axis:t};return T.runKernel(Qs,o,n)}var Rk=N({argMin_:q4});function j4(r){let e={x:v(r,"x","asin")};return T.runKernel(qo,e)}var Dk=N({asin_:j4});function X4(r){let e={x:v(r,"x","asinh")};return T.runKernel(jo,e)}var Ak=N({asinh_:X4});function Y4(r){let e={x:v(r,"x","atan")};return T.runKernel(Xo,e)}var Fk=N({atan_:Y4});function Q4(r,t){let e=v(r,"a","atan2"),o=v(t,"b","atan2");[e,o]=Oe(e,o);let n={a:e,b:o};return T.runKernel(Qo,n)}var Pk=N({atan2_:Q4});function Z4(r){let e={x:v(r,"x","atanh")};return T.runKernel(Yo,e)}var Ok=N({atanh_:Z4});function J4(r,t,e,o,n="NHWC",s){let a=r[3],i=[...t,a],p=Lk(n);return Hu(r,i,e,s,o,null,null,p)}function Mw(r,t,e,o,n,s,a="channelsLast"){let[i,p]=vl(t),u;if(a==="channelsLast")u=[i,p,r[3],r[3]];else if(a==="channelsFirst")u=[i,p,r[1],r[1]];else throw new Error(`Unknown dataFormat ${a}`);return Hu(r,u,e,o,n,s,!1,a)}function eH(r,t,e,o,n,s,a="NDHWC"){let[i,p,u]=Ow(t),c,l;if(a==="NDHWC")l="channelsLast",c=[i,p,u,r[4],r[4]];else if(a==="NCDHW")l="channelsFirst",c=[i,p,u,r[1],r[1]];else throw new Error(`Unknown dataFormat ${a}`);return Mk(r,c,e,o,n,!1,l,s)}function Hu(r,t,e,o,n,s,a=!1,i="channelsLast"){let[p,u,c,l]=[-1,-1,-1,-1];if(i==="channelsLast")[p,u,c,l]=r;else if(i==="channelsFirst")[p,l,u,c]=r;else throw new Error(`Unknown dataFormat ${i}`);let[m,d,,f]=t,[h,g]=vl(e),[x,b]=vl(o),C=cc(m,x),S=cc(d,b),{padInfo:k,outHeight:_,outWidth:E}=oH(n,u,c,h,g,C,S,s,i),R=a?f*l:f,D;return i==="channelsFirst"?D=[p,R,_,E]:i==="channelsLast"&&(D=[p,_,E,R]),{batchSize:p,dataFormat:i,inHeight:u,inWidth:c,inChannels:l,outHeight:_,outWidth:E,outChannels:R,padInfo:k,strideHeight:h,strideWidth:g,filterHeight:m,filterWidth:d,effectiveFilterHeight:C,effectiveFilterWidth:S,dilationHeight:x,dilationWidth:b,inShape:r,outShape:D,filterShape:t}}function Mk(r,t,e,o,n,s=!1,a="channelsLast",i){let[p,u,c,l,m]=[-1,-1,-1,-1,-1];if(a==="channelsLast")[p,u,c,l,m]=r;else if(a==="channelsFirst")[p,m,u,c,l]=r;else throw new Error(`Unknown dataFormat ${a}`);let[d,f,h,,g]=t,[x,b,C]=Ow(e),[S,k,_]=Ow(o),E=cc(d,S),R=cc(f,k),D=cc(h,_),{padInfo:P,outDepth:O,outHeight:M,outWidth:L}=nH(n,u,c,l,x,b,C,E,R,D,i),B=s?g*m:g,z;return a==="channelsFirst"?z=[p,B,O,M,L]:a==="channelsLast"&&(z=[p,O,M,L,B]),{batchSize:p,dataFormat:a,inDepth:u,inHeight:c,inWidth:l,inChannels:m,outDepth:O,outHeight:M,outWidth:L,outChannels:B,padInfo:P,strideDepth:x,strideHeight:b,strideWidth:C,filterDepth:d,filterHeight:f,filterWidth:h,effectiveFilterDepth:E,effectiveFilterHeight:R,effectiveFilterWidth:D,dilationDepth:S,dilationHeight:k,dilationWidth:_,inShape:r,outShape:z,filterShape:t}}function tH(r,t,e,o,n){o==null&&(o=Lw(r,t,e));let s=r[0],a=r[1],i=kl((s-t+2*o)/e+1,n),p=kl((a-t+2*o)/e+1,n);return[i,p]}function rH(r,t,e,o,n,s){n==null&&(n=Lw(r,t[0],o[0]));let a=[0,0,0,e];for(let i=0;i<3;i++)r[i]+2*n>=t[i]&&(a[i]=kl((r[i]-t[i]+2*n)/o[i]+1,s));return a}function Lw(r,t,e,o=1){let n=cc(t,o);return Math.floor((r[0]*(e-1)-e+n)/2)}function vl(r){return typeof r=="number"?[r,r,r]:r.length===2?[r[0],r[1],1]:r}function Ow(r){return typeof r=="number"?[r,r,r]:r}function cc(r,t){return t<=1?r:r+(r-1)*(t-1)}function oH(r,t,e,o,n,s,a,i,p){let u,c,l;if(typeof r=="number"){u={top:r,bottom:r,left:r,right:r,type:r===0?"VALID":"NUMBER"};let d=tH([t,e],s,o,r,i);c=d[0],l=d[1]}else if(r==="same"){c=Math.ceil(t/o),l=Math.ceil(e/n);let m=Math.max(0,(c-1)*o+s-t),d=Math.max(0,(l-1)*n+a-e),f=Math.floor(m/2),h=m-f,g=Math.floor(d/2),x=d-g;u={top:f,bottom:h,left:g,right:x,type:"SAME"}}else if(r==="valid")u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-s+1)/o),l=Math.ceil((e-a+1)/n);else if(typeof r=="object"){let m=p==="channelsLast"?r[1][0]:r[2][0],d=p==="channelsLast"?r[1][1]:r[2][1],f=p==="channelsLast"?r[2][0]:r[3][0],h=p==="channelsLast"?r[2][1]:r[3][1];u={top:m,bottom:d,left:f,right:h,type:m===0&&d===0&&f===0&&h===0?"VALID":"EXPLICIT"},c=kl((t-s+m+d)/o+1,i),l=kl((e-a+f+h)/n+1,i)}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:u,outHeight:c,outWidth:l}}function nH(r,t,e,o,n,s,a,i,p,u,c){let l,m,d,f;if(r==="valid"&&(r=0),typeof r=="number"){l={top:r,bottom:r,left:r,right:r,front:r,back:r,type:r===0?"VALID":"NUMBER"};let g=rH([t,e,o,1],[i,p,u],1,[n,s,a],r,c);m=g[0],d=g[1],f=g[2]}else if(r==="same"){m=Math.ceil(t/n),d=Math.ceil(e/s),f=Math.ceil(o/a);let h=(m-1)*n+i-t,g=(d-1)*s+p-e,x=(f-1)*a+u-o,b=Math.floor(h/2),C=h-b,S=Math.floor(g/2),k=g-S,_=Math.floor(x/2),E=x-_;l={top:S,bottom:k,left:_,right:E,front:b,back:C,type:"SAME"}}else throw Error(`Unknown padding parameter: ${r}`);return{padInfo:l,outDepth:m,outHeight:d,outWidth:f}}function kl(r,t){if(!t)return Math.trunc(r);switch(t){case"round":return Math.round(r);case"ceil":return Math.ceil(r);case"floor":return Math.floor(r);default:throw new Error(`Unknown roundingMode ${t}`)}}function Gu(r){let[t,e,o]=vl(r);return t===1&&e===1&&o===1}function xr(r,t){return Gu(r)||Gu(t)}function Ta(r){return vl(r).every(t=>t>0)}function Lk(r){if(r==="NHWC")return"channelsLast";if(r==="NCHW")return"channelsFirst";throw new Error(`Unknown dataFormat ${r}`)}function Bt(r,t,e){if(e!=null){if(typeof t=="string")throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if(typeof t=="number")$(qa(t),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else if(typeof t=="object")t.forEach(o=>{o.forEach(n=>{$(qa(n),()=>`Error in ${r}: pad must be an integer when using dimRoundingMode ${e} but got pad ${n}.`)})});else throw Error(`Error in ${r}: Unknown padding parameter: ${t}`)}}function sH(r,t){let o={x:v(r,"x","reshape","string_or_numeric")},n={shape:t};return T.runKernel(da,o,n)}var W=N({reshape_:sH});function aH(r,t,e,o,n){let s=v(r,"x","avgPool","float32"),a=1;$(xr(e,a),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`);let i=s,p=!1;s.rank===3&&(p=!0,i=W(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(i.rank===4,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),Bt("avgPool",o,n);let u={x:i},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},l=T.runKernel(Zo,u,c);return l=We(l,s.dtype),p?W(l,[l.shape[1],l.shape[2],l.shape[3]]):l}var fd=N({avgPool_:aH});function iH(r,t,e,o,n,s="NDHWC"){let a=v(r,"x","avgPool3d","float32"),i=a,p=!1;a.rank===4&&(p=!0,i=W(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),$(i.rank===5,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),$(s==="NDHWC",()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),$(typeof e=="number"&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),Bt("avgPool3d",o,n);let u={x:i},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},l=T.runKernel(Zs,u,c);return l=We(l,i.dtype),p?W(l,[l.shape[1],l.shape[2],l.shape[3],l.shape[4]]):l}var Bk=N({avgPool3d_:iH});function uH(r,t=0){$(r.length>=1,()=>"Pass at least one tensor to concat");let e=si(r,"tensors","concat","string_or_numeric");if(e[0].dtype==="complex64"&&e.forEach(s=>{if(s.dtype!=="complex64")throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `)}),e.length===1)return Ur(e[0]);let o=e,n={axis:t};return T.runKernel(ta,o,n)}var bt=N({concat_:uH});function pH(r,t,e=!1,o=!1){let n=v(r,"a","matMul"),s=v(t,"b","matMul");[n,s]=Oe(n,s);let a={a:n,b:s},i={transposeA:e,transposeB:o};return T.runKernel(Jo,a,i)}var Ze=N({matMul_:pH});function cH(r){let e={x:v(r,"x","sigmoid","float32")};return T.runKernel(Cs,e)}var $a=N({sigmoid_:cH});function lH(r,t,e){let o=v(r,"x","slice","string_or_numeric");if(o.rank===0)throw new Error("Slicing scalar is not possible");let n={x:o},s={begin:t,size:e};return T.runKernel(ha,n,s)}var Xe=N({slice_:lH});function mH(r){let e={x:v(r,"x","tanh","float32")};return T.runKernel(Es,e)}var Nl=N({tanh_:mH});function dH(r,t,e,o,n,s){let a=v(r,"forgetBias","basicLSTMCell"),i=v(t,"lstmKernel","basicLSTMCell"),p=v(e,"lstmBias","basicLSTMCell"),u=v(o,"data","basicLSTMCell"),c=v(n,"c","basicLSTMCell"),l=v(s,"h","basicLSTMCell"),m=bt([u,l],1),d=Ze(m,i),f=Ce(d,p),h=f.shape[0],g=f.shape[1]/4,x=[h,g],b=Xe(f,[0,0],x),C=Xe(f,[0,g],x),S=Xe(f,[0,g*2],x),k=Xe(f,[0,g*3],x),_=Ce(se($a(b),Nl(C)),se(c,$a(Ce(a,S)))),E=se(Nl(_),$a(k));return[_,E]}var zk=N({basicLSTMCell_:dH});function fH(r,t,e){let o=v(r,"x","batchToSpaceND"),n=t.reduce((i,p)=>i*p);$(o.rank>=1+t.length,()=>`input rank is ${o.rank} but should be > than blockShape.length ${t.length}`),$(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),$(o.shape[0]%n===0,()=>`input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${n}`);let s={x:o},a={blockShape:t,crops:e};return T.runKernel(Js,s,a)}var hd=N({batchToSpaceND_:fH});function Vk(r){let t;return r.rank===0||r.rank===1?t=W(r,[1,1,1,r.size]):r.rank===2?t=W(r,[1,1,r.shape[0],r.shape[1]]):r.rank===3?t=W(r,[1,r.shape[0],r.shape[1],r.shape[2]]):t=r,t}function hH(r,t,e,o,n,s){s==null&&(s=.001);let a=v(r,"x","batchNorm"),i=v(t,"mean","batchNorm"),p=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;o!=null&&(c=v(o,"offset","batchNorm")),$(i.rank===p.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),$(c==null||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),$(u==null||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let m={x:Vk(a),scale:u,offset:c,mean:i,variance:p},d={varianceEpsilon:s},f=T.runKernel(vn,m,d);return W(f,a.shape)}var au=N({batchNorm_:hH});function gH(r,t,e,o,n,s){let a=v(r,"x","batchNorm"),i=v(t,"mean","batchNorm"),p=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(a.rank===2,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`),$(i.rank===2||i.rank===1,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),$(p.rank===2||p.rank===1,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${p.rank}.`),u!=null&&$(u.rank===2||u.rank===1,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===2||c.rank===1,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),au(a,i,p,c,u,s)}var Wk=N({batchNorm2d_:gH});function xH(r,t,e,o,n,s){let a=v(r,"x","batchNorm"),i=v(t,"mean","batchNorm"),p=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(a.rank===3,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`),$(i.rank===3||i.rank===1,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),$(p.rank===3||p.rank===1,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${p.rank}.`),u!=null&&$(u.rank===3||u.rank===1,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===3||c.rank===1,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),au(a,i,p,c,u,s)}var Uk=N({batchNorm3d_:xH});function yH(r,t,e,o,n,s){let a=v(r,"x","batchNorm"),i=v(t,"mean","batchNorm"),p=v(e,"variance","batchNorm"),u;n!=null&&(u=v(n,"scale","batchNorm"));let c;return o!=null&&(c=v(o,"offset","batchNorm")),$(a.rank===4,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`),$(i.rank===4||i.rank===1,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),$(p.rank===4||p.rank===1,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${p.rank}.`),u!=null&&$(u.rank===4||u.rank===1,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),c!=null&&$(c.rank===4||c.rank===1,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),au(a,i,p,c,u,s)}var Gk=N({batchNorm4d_:yH});function bH(r,t,e){let o=v(r,"x","bincount"),n=v(t,"weights","bincount");$(o.dtype==="int32",()=>`Error in bincount: input dtype must be int32, but got ${o.dtype}`),$(e>=0,()=>`size must be non-negative, but got ${e}.`),$(n.size===o.size||n.size===0,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);let s={x:o,weights:n},a={size:e};return T.runKernel(en,s,a)}var gd=N({bincount_:bH});function CH(r,t){let e=v(r,"x","bitwiseAnd"),o=v(t,"y","bitwiseAnd");if(!Cr(e.shape,o.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${o.shape}`);if(e.dtype!=="int32"||o.dtype!=="int32")throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${o.dtype}`);let n={a:e,b:o};return T.runKernel(ja,n)}var Hk=N({bitwiseAnd_:CH});function wH(r,t){let e=v(r,"s0","broadcastArgs","int32"),o=v(t,"s1","broadcastArgs","int32");if(e.rank!==1)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(o.rank!==1)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);let n={s0:e,s1:o};return T.runKernel(ea,n)}var Kk=N({broadcastArgs_:wH});function SH(r,t){let e=v(r,"broadcastTo","x"),o=e.shape;if(wt(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){let u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=W(e,u)}let n=e.shape,s=Array.from(t);for(let u=t.length-1;u>=0;u--)if(n[u]===t[u])s[u]=1;else if(e.shape[u]!==1)throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${t}].`);if(s.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length===0)return Ur(e);let i={x:e},p={reps:s};return T.runKernel(po,i,p)}var iu=N({broadcastTo_:SH});function IH(r){let e={x:v(r,"x","ceil","float32")};return T.runKernel(tn,e)}var qk=N({ceil_:IH});function Ea(r,t,e){wt(r),e=e||Ri(t);let o={shape:r,value:t,dtype:e};return T.runKernel(sa,{},o)}function vH(r,t,e){let o=v(r,"x","clipByValue");if($(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e)return Ea(o.shape,t,o.dtype);let n={x:o},s={clipValueMin:t,clipValueMax:e};return T.runKernel(Co,n,s)}var jk=N({clipByValue_:vH});function kH(r){return bt(r,0)}var Xk=N({concat1d_:kH});function NH(r,t){return bt(r,t)}var Yk=N({concat2d_:NH});function TH(r,t){return bt(r,t)}var Qk=N({concat3d_:TH});function _H(r,t){return bt(r,t)}var Zk=N({concat4d_:_H});function $H(r,t,e,o,n="NHWC",s=[1,1],a){let i=v(r,"x","conv2d","float32"),p=v(t,"filter","conv2d","float32"),u=i,c=!1;i.rank===3&&(c=!0,u=W(i,[1,i.shape[0],i.shape[1],i.shape[2]])),$(u.rank===4,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),$(p.rank===4,()=>`Error in conv2d: filter must be rank 4, but got rank ${p.rank}.`),Bt("conv2d",o,a);let l=n==="NHWC"?u.shape[3]:u.shape[1];$(l===p.shape[2],()=>`Error in conv2d: depth of input (${l}) must match input depth for filter ${p.shape[2]}.`),$(xr(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),$(Ta(s),()=>"Error in conv2D: Dilated rates should be larger than 0."),$(Ta(e),()=>"Error in conv2D: Strides should be larger than 0.");let m={x:u,filter:p},d={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:a},f=T.runKernel(rn,m,d);return c?W(f,[f.shape[1],f.shape[2],f.shape[3]]):f}var uu=N({conv2d_:$H});function EH(r,t,e,o,n="NWC",s=1,a){let i=v(r,"x","conv1d"),p=v(t,"filter","conv1d"),u=i,c=!1;i.rank===2&&(c=!0,u=W(i,[1,i.shape[0],i.shape[1]])),$(u.rank===3,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),$(p.rank===3,()=>`Error in conv1d: filter must be rank 3, but got rank ${p.rank}.`),Bt("conv1d",o,a),$(u.shape[2]===p.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${p.shape[1]}.`),$(xr(e,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${s}'`),$(Ta(s),()=>"Error in conv1D: Dilated rates should be larger than 0."),$(Ta(e),()=>"Error in conv1D: Stride should be larger than 0."),$(n==="NWC",()=>`Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);let l=W(p,[1,p.shape[0],p.shape[1],p.shape[2]]),m=W(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=uu(m,l,[1,e],o,"NHWC",[1,s],a);return c?W(g,[g.shape[2],g.shape[3]]):W(g,[g.shape[0],g.shape[2],g.shape[3]])}var Jk=N({conv1d_:EH});function RH(r,t,e,o,n,s="NHWC",a){$(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let i=r,p=t,u=!1;t.rank===3&&(u=!0,p=W(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,r[0],r[1],r[2]]),$(i.length===4,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),$(p.rank===4,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${p.rank}`),$(e.rank===4,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);let c=s==="NHWC"?i[3]:i[1],l=s==="NHWC"?p.shape[3]:p.shape[1];$(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),$(l===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${l}) must match output depth for filter ${e.shape[3]}.`),Bt("conv2dDerInput",n,a);let m={dy:p,filter:e},d={strides:o,pad:n,dataFormat:s,dimRoundingMode:a,inputShape:i},f=T.runKernel(on,m,d);return u?W(f,[f.shape[1],f.shape[2],f.shape[3]]):f}var xd=N({conv2DBackpropInput_:RH});function DH(r,t,e,o,n,s){let a=v(r,"x","conv2dTranspose"),i=v(t,"filter","conv2dTranspose");return xd(e,a,i,o,n,"NHWC",s)}var e2=N({conv2dTranspose_:DH});function AH(r,t,e,o,n="NDHWC",s=[1,1,1]){let a=v(r,"x","conv3d"),i=v(t,"filter","conv3d"),p=a,u=!1;a.rank===4&&(u=!0,p=W(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),$(p.rank===5,()=>`Error in conv3d: input must be rank 5, but got rank ${p.rank}.`),$(i.rank===5,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),$(p.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${p.shape[4]}) must match input depth for filter ${i.shape[3]}.`),$(xr(e,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),$(n==="NDHWC",()=>`Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`),$(Ta(s),()=>"Error in conv3D: Dilated rates should be larger than 0."),$(Ta(e),()=>"Error in conv3D: Strides should be larger than 0.");let c={x:p,filter:i},l={strides:e,pad:o,dataFormat:n,dilations:s},m=T.runKernel(nn,c,l);return u?W(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var t2=N({conv3d_:AH});function FH(r,t,e,o,n){$(r.length===t.rank,()=>`Length of inShape (${r.length}) and rank of dy (${t.rank}) must match`);let s=r,a=t,i=!1;t.rank===4&&(i=!0,a=W(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,r[0],r[1],r[2],r[3]]);let p=s[4],u=a.shape[4];$(s.length===5,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),$(a.rank===5,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`),$(e.rank===5,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),$(p===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${p}) must match input depth for filter ${e.shape[3]}.`),$(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);let c={dy:a,filter:e},l={pad:n,strides:o,inputShape:s},m=T.runKernel(sn,c,l);return i?W(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}var r2=N({conv3DBackpropInput_:FH});function PH(r,t,e,o,n){let s=v(r,"x","conv3dTranspose"),a=v(t,"filter","conv3dTranspose");return r2(e,s,a,o,n)}var o2=N({conv3dTranspose_:PH});function OH(r){let e={x:v(r,"x","cos","float32")};return T.runKernel(an,e)}var n2=N({cos_:OH});function MH(r){let e={x:v(r,"x","cosh","float32")};return T.runKernel(un,e)}var s2=N({cosh_:MH});function LH(r,t=0,e=!1,o=!1){let s={x:v(r,"x","cumprod")},a={axis:t,exclusive:e,reverse:o};return T.runKernel(pn,s,a)}var a2=N({cumprod_:LH});function BH(r,t=0,e=!1,o=!1){let s={x:v(r,"x","cumsum")},a={axis:t,exclusive:e,reverse:o};return T.runKernel(cn,s,a)}var i2=N({cumsum_:BH});function zH(r,t,e,o=!1){let n=v(r,"x","denseBincount"),s=v(t,"weights","denseBincount");$(n.dtype==="int32",()=>`Error in denseBincount: input dtype must be int32, but got ${n.dtype}`),$(n.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`),$(e>=0,()=>`size must be non-negative, but got ${e}.`),$(s.size===n.size||s.size===0,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);let a={x:n,weights:s},i={size:e,binaryOutput:o};return T.runKernel(ra,a,i)}var u2=N({denseBincount_:zH});function VH(r,t,e="NHWC"){let o=v(r,"x","depthToSpace","float32"),n=e==="NHWC"?o.shape[1]:o.shape[2],s=e==="NHWC"?o.shape[2]:o.shape[3],a=e==="NHWC"?o.shape[3]:o.shape[1];$(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),$(n*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${n} and ${t}  for depthToSpace with input shape
    ${o.shape}`),$(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${o.shape}`),$(a%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${a} for depthToSpace with input shape ${o.shape}`);let i={x:o},p={blockSize:t,dataFormat:e};return T.runKernel(mn,i,p)}var p2=N({depthToSpace_:VH});function WH(r,t,e,o,n="NHWC",s=[1,1],a){let i=v(r,"x","depthwiseConv2d","float32"),p=v(t,"filter","depthwiseConv2d","float32"),u=i,c=!1;i.rank===3&&(c=!0,u=W(i,[1,i.shape[0],i.shape[1],i.shape[2]])),$(u.rank===4,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),$(p.rank===4,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`);let l=n==="NHWC"?u.shape[3]:u.shape[1];$(l===p.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${l}) must match the inChannels dimension in filter ${p.shape[2]}.`),Bt("depthwiseConv2d",o,a);let m={x:u,filter:p},d={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:a},f=T.runKernel(dn,m,d);return c?W(f,[f.shape[1],f.shape[2],f.shape[3]]):f}var lc=N({depthwiseConv2d_:WH});function UH(r){let e={x:v(r,"x","diag")};return T.runKernel(oa,e)}var c2=N({diag_:UH});function GH(r,t,e,o,n=[1,1],s="NHWC"){let a=v(r,"x","dilation2d"),i=v(t,"filter","dilation2d");$(a.rank===3||a.rank===4,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`),$(i.rank===3,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),$(s==="NHWC",()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let p=a,u=!1;a.rank===3&&(p=W(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0),$(p.shape[3]===i.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${p.shape[3]} vs ${i.shape[2]}`);let c={x:p,filter:i},l={strides:e,pad:o,dilations:n},m=T.runKernel(fn,c,l);return u?W(m,[m.shape[1],m.shape[2],m.shape[3]]):m}var l2=N({dilation2d_:GH});var Ir={};qe(Ir,{assertAndGetBroadcastShape:()=>rt,getBroadcastDims:()=>m2,getReductionAxes:()=>yd});function m2(r,t){let e=r.length,o=[];for(let n=0;n<e;n++){let s=e-1-n,a=r[s]||1;(t[t.length-1-n]||1)>1&&a===1&&o.unshift(s)}return o}function yd(r,t){let e=[];for(let o=0;o<t.length;o++){let n=r[r.length-o-1],s=t.length-o-1,a=t[s];(n==null||n===1&&a>1)&&e.unshift(s)}return e}function rt(r,t){let e=Math.max(r.length,t.length),o=new Array(e);for(let n=0;n<e;n++){let s=r[r.length-n-1];s==null&&(s=1);let a=t[t.length-n-1];if(a==null&&(a=1),s===1)o[e-n-1]=a;else if(a===1)o[e-n-1]=s;else if(s!==a){let i=`Operands could not be broadcast together with shapes ${r} and ${t}.`;throw Error(i)}else o[e-n-1]=s}return o}function HH(r,t){let e=v(r,"a","equal","string_or_numeric"),o=v(t,"b","equal","string_or_numeric");[e,o]=Oe(e,o),rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(yn,n)}var bd=N({equal_:HH});function KH(r,t,e){let o=v(t,"a","where"),n=v(e,"b","where"),s=v(r,"condition","where","bool"),a=rt(rt(s.shape,o.shape),n.shape),i=iu(s,a),p=iu(o,a),u=iu(n,a),c={condition:i,t:p,e:u};return T.runKernel(fa,c)}var lo=N({where_:KH});function qH(r){let e={x:v(r,"x","zerosLike")};return T.runKernel(Sa,e)}var Ht=N({zerosLike_:qH});function jH(r,t){let e=v(r,"a","div"),o=v(t,"b","div");[e,o]=Oe(e,o);let n=je(e,o),s=Ht(n),a=bd(o,s);return lo(a,s,n)}var d2=N({divNoNan_:jH});function XH(r,t){let e=v(r,"t1","dot"),o=v(t,"t2","dot");$((e.rank===1||e.rank===2)&&(o.rank===1||o.rank===2),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${o.rank}.`);let n=e.rank===1?e.size:e.shape[1],s=o.rank===1?o.size:o.shape[0];if($(n===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`),e.rank===1&&o.rank===1){let a=W(e,[1,-1]),i=W(o,[-1,1]),p=Ze(a,i);return W(p,[])}else if(e.rank===1&&o.rank===2){let a=W(e,[1,-1]),i=W(o,[o.shape[0],o.shape[1]]),p=Ze(a,i);return W(p,[p.size])}else if(e.rank===2&&o.rank===1){let a=W(o,[-1,1]),i=Ze(e,a);return W(i,[i.size])}else{let a=W(o,[o.shape[0],o.shape[1]]);return Ze(e,a)}}var f2=N({dot_:XH});function YH(r,...t){let e=t.map((n,s)=>v(n,`tensors${s}`,"einsum")),o={equation:r};return T.runKernel(Vi,e,o)}var pu=N({einsum_:YH});function QH(r){let e={x:v(r,"x","elu","float32")};return T.runKernel(gn,e)}var Cd=N({elu_:QH});function ZH(r,t){let e=v(r,"x","ensureShape","string_or_numeric");if(!ZC(e.shape,t))throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`);return r}var h2=N({ensureShape_:ZH});function JH(r){let t=v(r,"x","erf");$(t.dtype==="int32"||t.dtype==="float32",()=>"Input dtype must be `int32` or `float32`."),t.dtype==="int32"&&(t=We(t,"float32"));let e={x:t};return T.runKernel(xn,e)}var g2=N({erf_:JH});function Bw(r,t){for(let e=0;e<r.length;++e)if(r[r.length-e-1]!==t-1-e)return!1;return!0}function x2(r,t,e){let o=r.length+t.length,n=[],s=0,a=0;for(let i=0;i<o;i++)e.indexOf(i)===-1?n.push(r[s++]):n.push(t[a++]);return n}function eK(r,t){let e=[],o=r.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&e.push(r[s]);let n=t.map(s=>r[s]);return[e,n]}function ii(r,t){let e=t.map(o=>1);return x2(r,e,t)}function tK(r,t,e){$(Bw(t,e),()=>`${r} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function rK(r,t){if(Bw(r,t))return null;let e=[];for(let o=0;o<t;++o)r.indexOf(o)===-1&&e.push(o);return r.forEach(o=>e.push(o)),e}function oK(r){return r.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function nK(r,t){let e=[];for(let o=t-r;o<t;++o)e.push(o);return e}function aK(r,t=null,e=!1){let n={x:v(r,"x","max")},s={reductionIndices:t,keepDims:e};return T.runKernel(Vn,n,s)}var Ra=N({max_:aK});function iK(r,t=null,e=!1){let n={x:v(r,"x","min")},s={axis:t,keepDims:e};return T.runKernel(Hn,n,s)}var Tl=N({min_:iK});function uK(r,t){let e=v(r,"base","pow"),o=v(t,"exp","pow");[e,o]=Oe(e,o);let n={a:e,b:o};return T.runKernel(rs,n)}var ui=N({pow_:uK});function ke(r,t){if((Ot(r)&&t!=="string"||Array.isArray(r))&&t!=="complex64")throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if(t==="string"&&Ot(r)&&!(r instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Sr(r,[],[],t)}function pK(r){let e={x:v(r,"x","sqrt","float32")};return T.runKernel(Ss,e)}var Dr=N({sqrt_:pK});function cK(r){let t=v(r,"x","square"),e={};return T.runKernel("Square",{x:t},e)}var er=N({square_:cK});function lK(r,t=null,e=!1){let o=v(r,"x","sum");o.dtype==="bool"&&(o=We(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return T.runKernel(Is,n,s)}var ot=N({sum_:lK});function mK(r,t="euclidean",e=null,o=!1){r=v(r,"x","norm");let n=y2(r,t,e),s=n.shape;if(o){let a=Ei(e,r.shape);s=ii(n.shape,a)}return W(n,s)}function y2(r,t,e=null){if(r.rank===0)return Jt(r);if(r.rank!==1&&e===null)return y2(W(r,[-1]),t,e);if(r.rank===1||typeof e=="number"||Array.isArray(e)&&e.length===1){if(t===1)return ot(Jt(r),e);if(t===1/0)return Ra(Jt(r),e);if(t===-1/0)return Tl(Jt(r),e);if(t==="euclidean"||t===2)return Dr(ot(ui(Jt(r),ke(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&e.length===2){if(t===1)return Ra(ot(Jt(r),e[0]),e[1]-1);if(t===1/0)return Ra(ot(Jt(r),e[1]),e[0]);if(t===-1/0)return Tl(ot(Jt(r),e[1]),e[0]);if(t==="fro"||t==="euclidean")return Dr(ot(er(r),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}var Ku=N({norm_:mK});function dK(r,t=null,e=!1){return Ku(r,"euclidean",t,e)}var b2=N({euclideanNorm_:dK});function fK(r){let e={x:v(r,"x","exp")};return T.runKernel(bn,e)}var $o=N({exp_:fK});function hK(r,t=0){let e=v(r,"x","expandDims","string_or_numeric");$(t<=e.rank,()=>"Axis must be <= rank of the tensor");let o={input:e},n={dim:t};return T.runKernel(na,o,n)}var Ms=N({expandDims_:hK});function gK(r){let e={x:v(r,"x","expm1")};return T.runKernel(Cn,e)}var C2=N({expm1_:gK});function xK(r,t){let e=v(r,"x","tile","string_or_numeric");$(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`);let o={x:e},n={reps:t};return T.runKernel(po,o,n)}var cu=N({tile_:xK});function yK(r,t,e,o="float32"){t==null&&(t=r);let n=me([r,t],o),s=r<=t?r:t;for(let i=0;i<s;++i)n.set(1,i,i);let a=W(n.toTensor(),[r,t]);if(e==null)return a;if(e.length===1)return cu(Ms(a,0),[e[0],1,1]);if(e.length===2)return cu(Ms(Ms(a,0),0),[e[0],e[1],1,1]);if(e.length===3)return cu(Ms(Ms(Ms(a,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}var wd=N({eye_:yK});function bK(r){let e={x:v(r,"x","floor","float32")};return T.runKernel(Sn,e)}var Sd=N({floor_:bK});function CK(r,t,e=0,o=0){let n=v(r,"x","gather"),s=v(t,"indices","gather","int32"),a={x:n,indices:s},i={axis:e,batchDims:o};return T.runKernel(aa,a,i)}var Id=N({gather_:CK});function wK(r,t){let e=v(r,"a","greater","string_or_numeric"),o=v(t,"b","greater","string_or_numeric");[e,o]=Oe(e,o),rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Nn,n)}var qu=N({greater_:wK});function SK(r,t){let e=v(r,"a","greaterEqual","string_or_numeric"),o=v(t,"b","greaterEqual","string_or_numeric");[e,o]=Oe(e,o),rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Tn,n)}var vd=N({greaterEqual_:SK});function IK(r){let e={input:v(r,"input","imag")};return T.runKernel(Gi,e)}var lu=N({imag_:IK});function vK(r){let e={x:v(r,"x","isFinite")};return T.runKernel(_n,e)}var w2=N({isFinite_:vK});function kK(r){let e={x:v(r,"x","isInf")};return T.runKernel($n,e)}var S2=N({isInf_:kK});function NK(r){let e={x:v(r,"x","isNaN")};return T.runKernel(En,e)}var I2=N({isNaN_:NK});function TK(r,t=.2){let o={x:v(r,"x","leakyRelu")},n={alpha:t};return T.runKernel(Rn,o,n)}var kd=N({leakyRelu_:TK});function _K(r,t){let e=v(r,"a","less","string_or_numeric"),o=v(t,"b","less","string_or_numeric");[e,o]=Oe(e,o),rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Dn,n)}var _l=N({less_:_K});function $K(r,t){let e=v(r,"a","lessEqual","string_or_numeric"),o=v(t,"b","lessEqual","string_or_numeric");[e,o]=Oe(e,o),rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(An,n)}var mc=N({lessEqual_:$K});function v2(r,t,e){if(e<=0)throw new Error("The number of values should be positive.");let o={start:r,stop:t,num:e};return T.runKernel(Fn,{},o)}function EK(r,t=5,e=1,o=1,n=.5){let s=v(r,"x","localResponseNormalization");$(s.rank===4||s.rank===3,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),$(qa(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let a=s,i=!1;s.rank===3&&(i=!0,a=W(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let p={x:a},u={depthRadius:t,bias:e,alpha:o,beta:n},c=T.runKernel(zn,p,u);return i?W(c,[c.shape[1],c.shape[2],c.shape[3]]):c}var k2=N({localResponseNormalization_:EK});function RK(r){let e={x:v(r,"x","log","float32")};return T.runKernel(Pn,e)}var pi=N({log_:RK});function DK(r){let e={x:v(r,"x","log1p")};return T.runKernel(On,e)}var Nd=N({log1p_:DK});function AK(r){return $(qs(r),()=>"The f passed in grad(f) must be a function"),(t,e)=>{let o=v(t,"x","tf.grad","string_or_numeric"),n=e!=null?v(e,"dy","tf.grad"):null;return T.tidy(()=>{let{value:s,grads:a}=T.gradients(()=>r(o),[o],n);return n!=null&&yt(s.shape,n.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Td(a),a[0]})}}function FK(r){return $(qs(r),()=>"The f passed in grads(f) must be a function"),(t,e)=>{$(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");let o=si(t,"args","tf.grads","string_or_numeric"),n=e!=null?v(e,"dy","tf.grads"):null;return T.tidy(()=>{let{value:s,grads:a}=T.gradients(()=>r(...o),o,n);return n!=null&&yt(s.shape,n.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Td(a),a})}}function PK(r){return $(qs(r),()=>"The f passed in valueAndGrad(f) must be a function"),(t,e)=>{$(t instanceof ut,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),$(e==null||e instanceof ut,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");let{grads:o,value:n}=T.gradients(()=>r(t),[t],e);return Td(o),{grad:o[0],value:n}}}function OK(r){return $(qs(r),()=>"The f passed in valueAndGrads(f) must be a function"),(t,e)=>{$(Array.isArray(t)&&t.every(n=>n instanceof ut),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),$(e==null||e instanceof ut,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");let o=T.gradients(()=>r(...t),t,e);return e!=null&&yt(o.value.shape,e.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Td(o.grads),o}}function zw(r,t){$(qs(r),()=>"The f passed in variableGrads(f) must be a function"),$(t==null||Array.isArray(t)&&t.every(u=>u instanceof oi),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let e=t!=null;if(!e){t=[];for(let u in T.registeredVariables)t.push(T.registeredVariables[u])}let o=e?t.filter(u=>!u.trainable):null,n=t.length;t=t.filter(u=>u.trainable),$(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);let s=!0,{value:a,grads:i}=T.gradients(r,t,null,s);$(i.some(u=>u!=null),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),$(a.rank===0,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);let p={};return t.forEach((u,c)=>{i[c]!=null&&(p[u.name]=i[c])}),o!=null&&o.forEach(u=>p[u.name]=null),{value:a,grads:p}}function vr(r){return T.customGrad(r)}function Td(r){if(r.filter(e=>e==null).length>0)throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`)}function MK(r){let e={x:v(r,"x","neg")};return T.runKernel(pa,e)}var cr=N({neg_:MK});function LK(r){let e={x:v(r,"x","softplus")};return T.runKernel(ws,e)}var _d=N({softplus_:LK});function BK(r){let t=v(r,"x","logSigmoid");return vr(o=>({value:cr(_d(cr(o))),gradFunc:a=>se(a,$a(cr(o)))}))(t)}var N2=N({logSigmoid_:BK});function zK(r,t){let e=v(r,"a","sub"),o=v(t,"b","sub");[e,o]=Oe(e,o);let n={a:e,b:o};return T.runKernel(_s,n)}var Te=N({sub_:zK});function VK(r,t=-1){let e=v(r,"logits","logSoftmax");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return vr((n,s)=>{let i=Ra(n,t,!0),p=Te(n,i),u=Te(We(p,"float32"),pi(ot($o(p),t,!0)));return s([u]),{value:u,gradFunc:(l,m)=>{let[d]=m,f=!0,h=$o(d);return Te(l,se(ot(l,t,f),h))}}})(e)}var T2=N({logSoftmax_:VK});function WK(r,t=null,e=!1){let o=v(r,"x","logSumExp"),n=Ei(t,o.shape),s=Ra(o,n,!0),a=Te(o,s),i=$o(a),p=ot(i,n),u=pi(p),c=Ce(W(s,u.shape),u);if(e){let l=ii(c.shape,n);return W(c,l)}return c}var $d=N({logSumExp_:WK});function UK(r,t){let e=v(r,"a","logicalAnd","bool"),o=v(t,"b","logicalAnd","bool");rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Mn,n)}var ju=N({logicalAnd_:UK});function GK(r){let e={x:v(r,"x","logicalNot","bool")};return T.runKernel(Ln,e)}var Ed=N({logicalNot_:GK});function HK(r,t){let e=v(r,"a","logicalOr","bool"),o=v(t,"b","logicalOr","bool");rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Bn,n)}var Rd=N({logicalOr_:HK});function KK(r,t){let e=v(r,"a","logicalXor","bool"),o=v(t,"b","logicalXor","bool");return rt(e.shape,o.shape),ju(Rd(r,t),Ed(ju(r,t)))}var _2=N({logicalXor_:KK});var Dd=2147483648;function qK(r,t,e="left"){let o=v(r,"sortedSequence","searchSorted"),n=v(t,"values","searchSorted"),s=o.shape[o.shape.length-1],a=n.shape[n.shape.length-1],i=W(o,[-1,s]),p=W(n,[-1,a]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==p.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(He(p.shape)>=Dd)throw new Error(`values tensor size must less than ${Dd}`);if(i.shape[1]>=Dd)throw new Error(`trailing dim_size must less than ${Dd} for int32 output type, was ${i.shape[1]}`);let u={sortedSequence:i,values:p},c={side:e};return T.runKernel(hs,u,c)}var $l=N({searchSorted_:qK});function $2(r,t){return $l(r,t,"left")}function jK(r,t,e,o,n){let s=v(r,"x","maxPool"),a=1,i=s,p=!1;s.rank===3&&(p=!0,i=W(s,[1,s.shape[0],s.shape[1],s.shape[2]])),$(i.rank===4,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),$(xr(e,a),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '${a}'`),Bt("maxPool",o,n);let u={x:i},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n},l=T.runKernel(Un,u,c);return p?W(l,[l.shape[1],l.shape[2],l.shape[3]]):l}var Ad=N({maxPool_:jK});function XK(r,t=[1,1,1],e,o,n,s="NDHWC"){let a=v(r,"x","maxPool3d"),i=a,p=!1;a.rank===4&&(p=!0,i=W(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),$(i.rank===5,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),$(s==="NDHWC",()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),Bt("maxPool3d",o,n);let u={x:i},c={filterSize:t,strides:e,pad:o,dimRoundingMode:n,dataFormat:s},l=T.runKernel(ia,u,c);return p?W(l,[l.shape[1],l.shape[2],l.shape[3],l.shape[4]]):l}var E2=N({maxPool3d_:XK});function YK(r,t,e,o,n=!1){let a={x:v(r,"x","maxPoolWithArgmax")},i={filterSize:t,strides:e,pad:o,includeBatchInIndex:n},p=T.runKernel(ua,a,i);return{result:p[0],indexes:p[1]}}var R2=N({maxPoolWithArgmax_:YK});function QK(r,t){let e=v(r,"a","maximum"),o=v(t,"b","maximum");[e,o]=Oe(e,o),e.dtype==="bool"&&(e=We(e,"int32"),o=We(o,"int32")),rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Wn,n)}var Fd=N({maximum_:QK});function ZK(r,t=null,e=!1){let n={x:v(r,"x","mean")},s={axis:t,keepDims:e};return T.runKernel(Gn,n,s)}var Xu=N({mean_:ZK});function Gr(r,t="float32"){if(wt(r),t==="complex64"){let o=Gr(r,"float32"),n=Gr(r,"float32");return Er(o,n)}let e=Yp(He(r),t);return T.makeTensor(e,r,t)}function Da(r,t="float32"){if(wt(r),t==="complex64"){let o=Da(r,"float32"),n=Gr(r,"float32");return Er(o,n)}let e=fl(He(r),t);return T.makeTensor(e,r,t)}function D2(r,t,{indexing:e="xy"}={}){if(e!=="xy"&&e!=="ij")throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(r===void 0)return[];let o=v(r,"x","meshgrid",r instanceof ut?r.dtype:"float32");if(t===void 0)return[o];let n=v(t,"y","meshgrid",t instanceof ut?t.dtype:"float32"),s=He(o.shape),a=He(n.shape);return e==="xy"?(o=W(o,[1,-1]),n=W(n,[-1,1]),[Ze(Da([a,1],o.dtype),o),Ze(n,Da([1,s],n.dtype))]):(o=W(o,[-1,1]),n=W(n,[1,-1]),[Ze(o,Da([1,a],o.dtype)),Ze(Da([s,1],n.dtype),n)])}function JK(r,t){let e=v(r,"a","minimum"),o=v(t,"b","minimum");[e,o]=Oe(e,o),e.dtype==="bool"&&(e=We(e,"int32"),o=We(o,"int32")),rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Kn,n)}var Yu=N({minimum_:JK});function eq(r,t,e){$(e==="reflect"||e==="symmetric",()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);let o=v(r,"x","mirrorPad");if(o.rank===0)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");$(t.length===o.rank,()=>`Padding doesn't match input. Must be ${o.rank}. Got ${t.length}.`);let n=e==="reflect"?1:0;for(let i=0;i<o.rank;i++)$(t[i].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),$(t[i][0]>=0&&t[i][0]<=o.shape[i]-n&&t[i][1]>=0&&t[i][1]<=o.shape[i]-n,()=>`Padding in dimension ${i} cannot be greater than or equal to ${o.shape[i]-n} or less than 0 for input of shape ${o.shape}`);let s={paddings:t,mode:e},a={x:o};return T.runKernel(qn,a,s)}var A2=N({mirrorPad_:eq});function tq(r,t){let e=v(r,"a","mod"),o=v(t,"b","mod");[e,o]=Oe(e,o);let n={a:e,b:o};return T.runKernel(jn,n)}var F2=N({mod_:tq});function rq(r,t=null,e=!1){r=v(r,"x","moments");let o=Ei(t,r.shape),n=Xu(r,o,e),s=n.shape;e||(s=ii(n.shape,o));let a=er(Te(We(r,"float32"),W(n,s))),i=Xu(a,o,e);return{mean:n,variance:i}}var P2=N({moments_:rq});function oq(r,t,e,o){let n=v(t,"data","multiRNNCell"),s=si(e,"c","multiRNNCell"),a=si(o,"h","multiRNNCell"),i=n,p=[];for(let l=0;l<r.length;l++){let m=r[l](i,s[l],a[l]);p.push(m[0]),p.push(m[1]),i=m[1]}let u=[],c=[];for(let l=0;l<p.length;l+=2)u.push(p[l]),c.push(p[l+1]);return[u,c]}var O2=N({multiRNNCell_:oq});function nq(r,t,e,o=!1){let n=v(r,"logits","multinomial"),s=n.size,a=n.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(a>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);e=e||Math.random();let p={logits:a===1?W(n,[1,-1]):n},u={numSamples:t,seed:e,normalized:o},c=T.runKernel(Xn,p,u);return a===1?W(c,[c.size]):c}var M2=N({multinomial_:nq});function sq(r,t){let e=v(r,"a","notEqual","string_or_numeric"),o=v(t,"b","notEqual","string_or_numeric");[e,o]=Oe(e,o),rt(e.shape,o.shape);let n={a:e,b:o};return T.runKernel(Qn,n)}var Pd=N({notEqual_:sq});function aq(r,t,e=1,o=0,n="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let a={indices:v(r,"indices","oneHot","int32")},i={dtype:n,depth:t,onValue:e,offValue:o};return T.runKernel(es,a,i)}var El=N({oneHot_:aq});function iq(r){let e={x:v(r,"x","onesLike")};return T.runKernel(ca,e)}var L2=N({onesLike_:iq});function uq(r,t){let e=v(r,"v1","outerProduct"),o=v(t,"v2","outerProduct");$(e.rank===1&&o.rank===1,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${o.rank}.`);let n=W(e,[-1,1]),s=W(o,[1,-1]);return Ze(n,s)}var B2=N({outerProduct_:uq});function pq(r,t,e=0){let o=v(r,"x","pad");if(o.rank===0)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");let n={paddings:t,constantValue:e},s={x:o};return T.runKernel(ts,s,n)}var Aa=N({pad_:pq});function cq(r,t,e=0){return $(t.length===2,()=>"Invalid number of paddings. Must be length of 2."),Aa(r,[t],e)}var z2=N({pad1d_:cq});function lq(r,t,e=0){return $(t.length===2&&t[0].length===2&&t[1].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Aa(r,t,e)}var V2=N({pad2d_:lq});function mq(r,t,e=0){return $(t.length===3&&t[0].length===2&&t[1].length===2&&t[2].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Aa(r,t,e)}var W2=N({pad3d_:mq});function dq(r,t,e=0){return $(t.length===4&&t[0].length===2&&t[1].length===2&&t[2].length===2&&t[3].length===2,()=>"Invalid number of paddings. Must be length of 2 each."),Aa(r,t,e)}var U2=N({pad4d_:dq});function fq(r,t,e){let o=v(r,"x","spaceToBatchND");$(o.rank>=1+t.length,()=>`input rank ${o.rank} should be > than [blockShape] ${t.length}`),$(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),$(o.shape.reduce((a,i,p)=>p>0&&p<=t.length?a&&(i+e[p-1][0]+e[p-1][1])%t[p-1]===0:a,!0),()=>`input spatial dimensions ${o.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`);let n={x:o},s={blockShape:t,paddings:e};return T.runKernel(ga,n,s)}var Od=N({spaceToBatchND_:fq});function hq(r,t,e,o,n,s,a){n==null&&(n=[1,1]),s==null&&(s=1),o===0&&(o="valid");let i=v(r,"x","maxPool"),p=i,u=!1;i.rank===3&&(u=!0,p=W(i,[1,i.shape[0],i.shape[1],i.shape[2]])),$(xr(s,n),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);let c=Mw(p.shape,t,s,n,o),l=[c.dilationHeight,c.dilationWidth],m;o==="same"?m=xq([c.filterHeight,c.filterWidth],l):m=[[0,0],[0,0]];let d=l[0]===1&&l[1]===1,[f,h]=gq([c.inHeight,c.inWidth],l,m),g=d?o:"valid",x=d?p:Od(p,l,f),C=(e==="avg"?()=>fd(x,t,s,g,a):()=>Ad(x,t,s,g,a))(),S=d?C:hd(C,l,h);return u?W(S,[S.shape[1],S.shape[2],S.shape[3]]):S}function gq(r,t,e){let o=e.map(c=>c[0]),n=e.map(c=>c[1]),s=r.concat(o,n),a=t.map((c,l)=>(c-s[l]%c)%c),i=n.map((c,l)=>c+a[l]),p=t.map((c,l)=>[o[l],i[l]]),u=t.map((c,l)=>[0,a[l]]);return[p,u]}function xq(r,t){let o=r.map((a,i)=>a+(a-1)*(t[i]-1)).map(a=>a-1),n=o.map(a=>Math.floor(a/2)),s=o.map((a,i)=>a-n[i]);return o.map((a,i)=>[n[i],s[i]])}var G2=N({pool_:hq});function yq(r,t){let e=v(r,"x","prelu"),o=v(t,"alpha","prelu"),n={x:e,alpha:o};return T.runKernel(os,n)}var Md=N({prelu_:yq});function bq(r,t=null,e=!1){let o=v(r,"x","prod");o.dtype==="bool"&&(o=We(o,"int32"));let n={x:o},s={axis:t,keepDims:e};return T.runKernel(ns,n,s)}var H2=N({prod_:bq});function Cq(r,t,e,o){let n=r.map((c,l)=>v(c,`tensors${l}`,"raggedGather","int32")),s=v(t,"paramsDenseValues","raggedGather"),a=v(e,"indices","raggedGather","int32"),i={paramsNestedSplits:n,paramsDenseValues:s,indices:a},p={outputRaggedRank:o},u=T.runKernel(Qp,i,p);return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}var K2=N({raggedGather_:Cq});function wq(r,t,e){let o=v(r,"starts","raggedRange"),n=v(t,"limits","raggedRange",o.dtype),s=v(e,"deltas","raggedRange",o.dtype),a={starts:o,limits:n,deltas:s},i=T.runKernel(Zp,a);return{rtNestedSplits:i[0],rtDenseValues:i[1]}}var q2=N({raggedRange_:wq});function Sq(r,t,e,o,n){let s=v(r,"shape","raggedTensorToTensor","int32"),a=v(t,"values","raggedTensorToTensor"),i=v(e,"defaultValue","raggedTensorToTensor",a.dtype),p=o.map((l,m)=>v(l,`tensors${m}`,"raggedTensorToTensor","int32")),u={shape:s,values:a,defaultValue:i,rowPartitionTensors:p},c={rowPartitionTypes:n};return T.runKernel(Jp,u,c)}var j2=N({raggedTensorToTensor_:Sq});function Iq(r,t,e){wt(r);let o=He(r),n=null;if(e==null||e==="float32")n=new Float32Array(o);else if(e==="int32")n=new Int32Array(o);else if(e==="bool")n=new Uint8Array(o);else throw new Error(`Unknown data type ${e}`);for(let s=0;s<o;s++)n[s]=t();return T.makeTensor(n,r,e)}var X2=N({rand_:Iq});var Wd=Kp(qw());var h1={};qe(h1,{TEST_EPSILON_FLOAT16:()=>m1,createVideoElement:()=>Oq,encodeStrings:()=>f1,expectArrayBuffersEqual:()=>Pq,expectArraysClose:()=>Rq,expectArraysEqual:()=>Aq,expectNumbersClose:()=>d1,expectPromiseToFail:()=>Dq,expectValuesInRange:()=>Fq,play:()=>Mq,testEpsilon:()=>Bd});var Eq=.001,m1=.1;function Rq(r,t,e){return e==null&&(e=Bd()),jw(r,t,(o,n)=>Xw(o,n,e))}function Bd(){return T.backend.floatPrecision()===32?Eq:m1}function jw(r,t,e){let o=!0;if((Ot(r)||Ot(t))&&(o=!1),Ot(r)&&Ot(t)&&(o=!0),o){let a=r.constructor.name,i=t.constructor.name;if(a!==i)throw new Error(`Arrays are of different type. Actual: ${a}. Expected: ${i}`)}if(Array.isArray(r)&&Array.isArray(t)){let a=ir(r),i=ir(t);if(!Cr(a,i))throw new Error(`Arrays have different shapes. Actual: [${a}]. Expected: [${i}]`)}let n=Ot(r)?r:Ps(r),s=Ot(t)?t:Ps(t);if(n.length!==s.length)throw new Error(`Arrays have different lengths actual: ${n.length} vs expected: ${s.length}.
Actual:   ${n}.
Expected: ${s}.`);for(let a=0;a<s.length;++a){let i=n[a],p=s[a];if(!e(i,p))throw new Error(`Arrays differ: actual[${a}] = ${i}, expected[${a}] = ${p}.
Actual:   ${n}.
Expected: ${s}.`)}typeof expect!="undefined"&&expect().nothing()}function Dq(r,t){r().then(()=>t.fail(),()=>t()),typeof expect!="undefined"&&expect().nothing()}function Aq(r,t){let e=typeof t=="string"||typeof t=="number"||typeof t=="boolean"?[t]:t;return Vo(r)||Vo(r[0])||Vo(t)||Vo(t[0])?jw(r,e,(o,n)=>o==n):jw(r,t,(o,n)=>Xw(o,n,0))}function d1(r,t,e){if(e==null&&(e=Bd()),!Xw(r,t,e))throw new Error(`Numbers differ: actual === ${r}, expected === ${t}`);typeof expect!="undefined"&&expect().nothing()}function Xw(r,t,e){return!isFinite(r)&&!isFinite(t)?!0:!(isNaN(r)||isNaN(t)||Math.abs(r-t)>e)}function Fq(r,t,e){for(let o=0;o<r.length;o++)if(r[o]<t||r[o]>e)throw new Error(`Value out of range:${r[o]} low: ${t}, high: ${e}`)}function Pq(r,t){let e=new Float32Array(r),o=new Float32Array(t);if(e.length!==o.length)throw new Error(`Expected ArrayBuffer to be of length ${o.length}, but it was ${e.length}`);for(let n=0;n<o.length;n++)if(e[n]!==o[n])throw new Error(`Expected ArrayBuffer value at ${n} to be ${o[n]} but got ${e[n]} instead`)}function f1(r){for(let t=0;t<r.length;t++){let e=r[t];Array.isArray(e)?f1(e):r[t]=tu(e)}return r}function Oq(r){let t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(r),new Promise(e=>{t.addEventListener("loadeddata",o=>e(t)),t.load()})}async function Mq(r){await r.play(),"requestVideoFrameCallback"in r&&await new Promise(t=>{r.requestVideoFrameCallback(t)})}var Zu=class{constructor(t,e,o,n,s){this.mean=t,this.stdDev=e,this.dtype=o,this.nextVal=NaN,this.truncated=n,this.truncated&&(this.upper=this.mean+this.stdDev*2,this.lower=this.mean-this.stdDev*2);let a=s||Math.random();this.random=Wd.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){let n=this.nextVal;return this.nextVal=NaN,n}let t,e,o=!1;for(;!o;){let n,s,a;do n=2*this.random()-1,s=2*this.random()-1,a=n*n+s*s;while(a>=1||a===0);let i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*n*i,e=this.mean+this.stdDev*s*i,(!this.truncated||this.isValidTruncated(t))&&(o=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return this.dtype==null||this.dtype==="float32"?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}},zd=class{constructor(t,e,o,n){this.alpha=t,this.beta=1/e,this.dtype=o;let s=n||Math.random();this.randu=Wd.alea(s.toString()),this.randn=new Zu(0,1,o,!1,this.randu()),t<1?this.d=t+2/3:this.d=t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,o,n,s,a;for(;;){do n=this.randn.nextValue(),a=1+this.c*n;while(a<=0);if(a*=a*a,t=n*n,e=1-.331*t*t,o=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<o)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return this.dtype==="float32"?t:Math.round(t)}},Vd=class{constructor(t=0,e=1,o,n){if(this.canReturnFloat=()=>this.dtype==null||this.dtype==="float32",this.min=t,this.range=e-t,this.dtype=o,n==null&&(n=Math.random()),typeof n=="number"&&(n=n.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Wd.alea(n)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}};function Lq(r,t,e=1,o="float32",n){if(wt(r),e==null&&(e=1),o==null&&(o="float32"),o!=="float32"&&o!=="int32")throw new Error(`Unsupported data type ${o}`);let s=new zd(t,e,o,n),a=me(r,o);for(let i=0;i<a.values.length;i++)a.values[i]=s.nextValue();return a.toTensor()}var g1=N({randomGamma_:Lq});function Bq(r,t=0,e=1,o,n){if(wt(r),o!=null&&o==="bool")throw new Error(`Unsupported data type ${o}`);let s=new Zu(t,e,o,!1,n),a=me(r,o);for(let i=0;i<a.values.length;i++)a.values[i]=s.nextValue();return a.toTensor()}var Ud=N({randomNormal_:Bq});function zq(r,t,e){if(t!=null&&t==="bool")throw new Error(`Unsupported data type ${t}`);return Ud(r,0,1,t,e)}var x1=N({randomStandardNormal_:zq});function Vq(r,t=0,e=1,o="float32",n){wt(r);let s=me(r,o),a=new Vd(t,e,null,n);for(let i=0;i<s.values.length;i++)s.values[i]=a.nextValue();return s.toTensor()}var dc=N({randomUniform_:Vq});function Wq(r,t,e,o){return dc(r,t,e,"int32",o)}var y1=N({randomUniformInt_:Wq});function mu(r,t,e=1,o="float32"){if(e===0)throw new Error("Cannot have a step of zero");let n={start:r,stop:t,step:e,dtype:o};return T.runKernel(ma,{},n)}function Uq(r){let e={input:v(r,"input","real")};return T.runKernel(qi,e)}var ci=N({real_:Uq});function Gq(r){let e={x:v(r,"x","reciprocal")};return T.runKernel(ss,e)}var b1=N({reciprocal_:Gq});function Hq(r){let e={x:v(r,"x","relu")};return T.runKernel(as,e)}var du=N({relu_:Hq});function Kq(r){let e={x:v(r,"x","relu6")};return T.runKernel(ps,e)}var Gd=N({relu6_:Kq});function qq(r,t){let o={x:v(r,"x","reverse")},n={dims:t};return T.runKernel(cs,o,n)}var mo=N({reverse_:qq});function jq(r){let t=v(r,"x","reverse");return $(t.rank===1,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),mo(t,0)}var C1=N({reverse1d_:jq});function Xq(r,t){let e=v(r,"x","reverse");return $(e.rank===2,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),mo(e,t)}var w1=N({reverse2d_:Xq});function Yq(r,t){let e=v(r,"x","reverse");return $(e.rank===3,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),mo(e,t)}var S1=N({reverse3d_:Yq});function Qq(r,t){let e=v(r,"x","reverse");return $(e.rank===4,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),mo(e,t)}var I1=N({reverse4d_:Qq});function Zq(r){let e={x:v(r,"x","round")};return T.runKernel(ls,e)}var Hd=N({round_:Zq});function Jq(r){let e={x:v(r,"x","rsqrt","float32")};return T.runKernel(ms,e)}var v1=N({rsqrt_:Jq});function e6(r){let e={x:v(r,"x","selu")};return T.runKernel(gs,e)}var k1=N({selu_:e6});function t6(r,t,e,o,n,s=[1,1],a="NHWC"){let i=v(r,"x","separableConv2d"),p=v(t,"depthwiseFilter","separableConv2d"),u=v(e,"pointwiseFilter","separableConv2d"),c=i,l=!1;if(i.rank===3&&(l=!0,c=W(i,[1,i.shape[0],i.shape[1],i.shape[2]])),a==="NCHW")throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");$(c.rank===4,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),$(p.rank===4,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${p.rank}.`),$(u.rank===4,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${p.rank}.`),$(u.shape[0]===1,()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),$(u.shape[1]===1,()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let m=p.shape[2],d=p.shape[3];$(u.shape[2]===m*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${m*d}, but got ${u.shape[2]}.`);let f=lc(c,p,o,n,a,s),g=uu(f,u,1,"valid",a);return l?W(g,[g.shape[1],g.shape[2],g.shape[3]]):g}var N1=N({separableConv2d_:t6});async function r6(r,t){let e=v(r,"x","setdiff1d"),o=v(t,"y","setdiff1d");$(e.dtype===o.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${o.dtype}).`),$(e.rank===1,()=>`x should be 1D tensor, but got x (${e.shape}).`),$(o.rank===1,()=>`y should be 1D tensor, but got y (${o.shape}).`);let n=await e.data(),s=await o.data(),a=new Set(s),i=0;for(let c=0;c<n.length;c++)a.has(n[c])||i++;let p=new tt([i],e.dtype),u=new tt([i],"int32");for(let c=0,l=0;c<n.length;c++)a.has(n[c])||(p.values[l]=n[c],u.values[l]=c,l++);return[p.toTensor(),u.toTensor()]}var T1=r6;function o6(r){let e={x:v(r,"x","sign")};return T.runKernel(bs,e)}var _1=N({sign_:o6});function n6(r){let e={x:v(r,"x","sin","float32")};return T.runKernel(xs,e)}var $1=N({sin_:n6});function s6(r){let e={x:v(r,"x","sinh")};return T.runKernel(ys,e)}var E1=N({sinh_:s6});function a6(r,t,e){let o=v(r,"x","slice1d");return $(o.rank===1,()=>`slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`),Xe(o,[t],[e])}var R1=N({slice1d_:a6});function i6(r,t,e){let o=v(r,"x","slice2d");return $(o.rank===2,()=>`slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`),Xe(o,t,e)}var D1=N({slice2d_:i6});function u6(r,t,e){let o=v(r,"x","slice3d");return $(o.rank===3,()=>`slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`),Xe(o,t,e)}var A1=N({slice3d_:u6});function p6(r,t,e){let o=v(r,"x","slice4d");return $(o.rank===4,()=>`slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`),Xe(o,t,e)}var F1=N({slice4d_:p6});function c6(r,t=-1){let e=v(r,"logits","softmax","float32");if(t===-1&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);let o={logits:e},n={dim:t};return T.runKernel(vs,o,n)}var P1=N({softmax_:c6});function l6(r){$(r.dtype==="complex64",()=>`The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);let t={input:r};return T.runKernel(Wi,t)}var fc=N({fft_:l6});function m6(r){$(r.dtype==="complex64",()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);let t={input:r};return T.runKernel(Ui,t)}var Ju=N({ifft_:m6});function d6(r){let t=r.shape[r.shape.length-1],e=r.size/t,o;if(t<=2){let n=W(r,[e,t]);o=Ju(n)}else{let n=[e,2*(t-1)],s=W(ci(r),[e,t]),a=W(lu(r),[e,t]),i=mo(Xe(s,[0,1],[e,t-2]),1),p=se(mo(Xe(a,[0,1],[e,t-2]),1),ke(-1)),u=bt([s,i],1),c=bt([a,p],1),l=W(Er(u,c),[n[0],n[1]]);o=Ju(l)}if(o=ci(o),r.rank===3&&r.shape[0]!==0){let n=o,s=r.shape[0];o=W(o,[s,o.shape[0]/s,o.shape[1]]),n.dispose()}return o}var Kd=N({irfft_:d6});function f6(r,t,e=0){let n={x:v(r,"x","split")},s={numOrSizeSplits:t,axis:e};return T.runKernel(xa,n,s)}var li=N({split_:f6});function h6(r,t){$(r.dtype==="float32",()=>`The dtype for rfft() must be real value but got ${r.dtype}`);let e=r.shape[r.shape.length-1],o=r.size/e,n;if(t!=null&&t<e){let f=r.shape.map(g=>0),h=r.shape.map(g=>g);h[r.shape.length-1]=t,n=Xe(r,f,h),e=t}else if(t!=null&&t>e){let f=r.shape.map(h=>h);f[r.shape.length-1]=t-e,n=bt([r,Gr(f)],r.shape.length-1),e=t}else n=r;let s=Ht(n),a=W(Er(n,s),[o,e]),i=fc(a),p=Math.floor(e/2)+1,u=ci(i),c=lu(i),l=li(u,[p,e-p],u.shape.length-1),m=li(c,[p,e-p],c.shape.length-1),d=n.shape.slice();return d[n.shape.length-1]=p,W(Er(l[0],m[0]),d)}var hc=N({rfft_:h6});function g6(r,t){let e=v(r,"a","squaredDifference"),o=v(t,"b","squaredDifference");[e,o]=Oe(e,o),rt(e.shape,o.shape);let n={a:e,b:o},s={};return T.runKernel(Ns,n,s)}var qd=N({squaredDifference_:g6});function x6(r,t){let e=v(r,"x","squeeze","string_or_numeric");return W(e,JC(e.shape,t).newShape)}var gc=N({squeeze_:x6});function y6(r,t=0){let e=si(r,"tensors","stack","string_or_numeric");$(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&$(t<=e[0].rank,()=>"Axis must be <= rank of the tensor");let o=e,n={axis:t};return T.runKernel(la,o,n)}var kr=N({stack_:y6});function b6(r,t=0){let o={x:v(r,"x","step")},n={alpha:t};return T.runKernel(So,o,n)}var jd=N({step_:b6});function C6(r,t,e,o,n=0,s=0,a=0,i=0,p=0){let c={x:v(r,"x","stridedSlice","string_or_numeric")},l={begin:t,end:e,strides:o,beginMask:n,endMask:s,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:p};return T.runKernel(Ts,c,l)}var O1=N({stridedSlice_:C6});function w6(r){let e={x:v(r,"x","tan","float32")};return T.runKernel($s,e)}var M1=N({tan_:w6});function tr(r,t){io(r);let e=ir(r,t);if(e.length!==1)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Sr(r,null,e,t)}function fu(r,t,e){if(io(r),t!=null&&t.length!==2)throw new Error("tensor2d() requires shape to have two numbers");let o=ir(r,e);if(o.length!==2&&o.length!==1)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Sr(r,t,o,e)}function Xd(r,t,e){if(io(r),t!=null&&t.length!==3)throw new Error("tensor3d() requires shape to have three numbers");let o=ir(r,e);if(o.length!==3&&o.length!==1)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Sr(r,t,o,e)}function L1(r,t,e){if(io(r),t!=null&&t.length!==4)throw new Error("tensor4d() requires shape to have four numbers");let o=ir(r,e);if(o.length!==4&&o.length!==1)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Sr(r,t,o,e)}function B1(r,t,e){if(io(r),t!=null&&t.length!==5)throw new Error("tensor5d() requires shape to have five numbers");let o=ir(r,e);if(o.length!==5&&o.length!==1)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Sr(r,t,o,e)}function z1(r,t,e){if(io(r),t!=null&&t.length!==6)throw new Error("tensor6d() requires shape to have six numbers");let o=ir(r,e);if(o.length!==6&&o.length!==1)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(o.length===1&&t==null)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||o,Sr(r,t,o,e)}var hu={};qe(hu,{calculateShapes:()=>V1,validateInput:()=>xc,validateUpdateShape:()=>Yw});function Yw(r,t,e){let o=t.rank>1?t.shape[t.rank-1]:1,n=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;if(e.rank<n)throw new Error(s+` update.rank < ${n}. `);if(r.length<o+(e.rank-n))throw new Error(s+` Output shape length < ${o+(e.rank-n)}`);if(e.rank!==n+r.length-o)throw new Error(s+` update.rank != ${n+r.length-o}`);for(let a=0;a<n;++a)if(e.shape[a]!==t.shape[a])throw new Error(s+` updates.shape[${a}] (${e.shape[a]}) != indices.shape[${a}] (${t.shape[a]}).`);for(let a=0;a<e.rank-n;++a)if(e.shape[a+n]!==r[a+o])throw new Error(s+` updates.shape[${a+n}] (${e.shape[a+n]}) != shape[${a+n}] (${r[a+n]})`)}function xc(r,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(r.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);if(t.dtype!=="int32")throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(e.length===0){if(t.size===0)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(r.size===0)throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`)}Yw(e,t,r)}function V1(r,t,e){let o=t.shape.length,n=o>1?t.shape[o-1]:1,s=e.length,a=1;for(let l=n;l<s;++l)a*=e[l];let i=n<1?1:n,p=He(t.shape)/i,u=[...js(e.slice(0,n)),1],c=He(e);return{sliceRank:n,numUpdates:p,sliceSize:a,strides:u,outputSize:c}}function S6(r,t,e){let o=v(r,"tensor","tensorScatterupdate"),n=v(t,"indices","tensorScatterupdate","int32"),s=v(e,"updates","tensorScatterupdate");if(xc(s,n,o.shape),o.dtype!==s.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${o.dtype} and ${s.dtype}.`);let a={tensor:o,indices:n,updates:s},i={};return T.runKernel(fs,a,i)}var W1=N({tensorScatterUpdate_:S6});function I6(r,t=1,e=!0){let o=v(r,"x","topk");if(o.rank===0)throw new Error("topk() expects the input to be of rank 1 or higher");let n=o.shape[o.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>n)throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${t}`);let s={x:o},a={k:t,sorted:e},[i,p]=T.runKernel(Rs,s,a);return{values:i,indices:p}}var U1=N({topk_:I6});function v6(r,t=0,e=1,o,n){if(wt(r),o!=null&&o==="bool")throw new Error("Unsupported data type $ { dtype }");let s=new Zu(t,e,o,!0,n),a=me(r,o);for(let i=0;i<a.values.length;i++)a.values[i]=s.nextValue();return a.toTensor()}var G1=N({truncatedNormal_:v6});function k6(r,t=0){let e=v(r,"x","unique","string_or_numeric");$(e.rank>0,()=>"The input tensor must be at least 1D");let o={x:e},n={axis:t},[s,a]=T.runKernel(Zi,o,n);return{values:s,indices:a}}var H1=N({unique_:k6});function N6(r,t,e){let o=v(r,"x","unsortedSegmentSum"),n=v(t,"segmentIds","unsortedSegmentSum","int32");$(qa(e),()=>"numSegments must be of dtype int");let s={x:o,segmentIds:n},a={numSegments:e};return T.runKernel(Ji,s,a)}var K1=N({unsortedSegmentSum_:N6});function T6(r,t=0){let e=v(r,"x","unstack","string_or_numeric");$(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`);let o={value:e},n={axis:t};return T.runKernel(wa,o,n)}var fo=N({unstack_:T6});function q1(r,t){return $l(r,t,"right")}function j1(r,t=!0,e,o){return T.makeVariable(r,t,e,o)}function Yd(r,t){let e=[];for(let s=0;s<t.length;s++)t[s]&&e.push(s);let o=me(r,"int32"),n=me([e.length,r.length],"int32");for(let s=0;s<e.length;s++){let a=o.indexToLoc(e[s]),i=s*r.length;n.values.set(a,i)}return n.toTensor()}async function _6(r){let t=v(r,"condition","whereAsync","bool"),e=await t.data(),o=Yd(t.shape,e);return r!==t&&t.dispose(),o}var Qd=_6;async function $6(r,t,e){let o=v(r,"tensor","boolMask"),n=v(t,"mask","boolMask","bool"),s=e==null?0:e,a=n.rank,i=o.shape;$(a>0,()=>"mask cannot be scalar"),yt(i.slice(s,s+a),n.shape,"mask's shape must match the first K dimensions of tensor's shape,");let p=1;for(let h=s;h<s+a;h++)p*=i[h];let u=i.slice(0,s).concat([p],i.slice(s+a)),c=W(o,u),l=W(n,[-1]),m=await Qd(l),d=gc(m,[1]),f=Id(c,d,s);return r!==o&&o.dispose(),t!==n&&n.dispose(),d.dispose(),c.dispose(),l.dispose(),m.dispose(),f}var E6=$6;function R6(r,t,e){let o=v(r,"x","transpose");if(t==null&&(t=o.shape.map((a,i)=>i).reverse()),$(o.rank===t.length,()=>`Error in transpose: rank of input ${o.rank} must match length of perm ${t}.`),t.forEach(a=>{$(a>=0&&a<o.rank,()=>`All entries in 'perm' must be between 0 and ${o.rank-1} but got ${t}`)}),o.rank<=1)return o.clone();let n={x:o},s={perm:t};return o.dtype==="complex64"?De(()=>{let a=ci(o),i=lu(o);return a=T.runKernel(co,{x:a},s),i=T.runKernel(co,{x:i},s),e&&(i=cr(i)),Er(a,i)}):T.runKernel(co,n,s)}var yc=N({transpose_:R6});function D6(r,t,e,o,n=!0){let s=v(r,"v","movingAverage"),a=v(t,"x","movingAverage"),i=v(e,"decay","movingAverage");Cw(s,a),$(Cr(s.shape,a.shape),()=>"Shape mismatch in v and x");let p=ke(1),u=Te(p,i),c=se(Te(a,s),u);if(n){$(o!=null,()=>"When using zeroDebias: true, step is required.");let l=v(o,"step","movingAverage");c=je(c,Te(p,ui(i,l)))}return Ce(s,c)}var A6=N({movingAverage_:D6});function F6(r,t,e){wt(e);let o=v(r,"indices","scatterND","int32"),n=v(t,"updates","scatterND");xc(n,o,e);let s={indices:o,updates:n},a={shape:e};return T.runKernel(ds,s,a)}var P6=N({scatterND_:F6});function X1(r,t,e,o){if(r.dtype!=="int32")throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);if(r.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);let n=r.rank>0?r.shape[0]:1,s=r.rank>1?r.shape[1]:1;if(e.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${s}.`);let a=t.size;if(!(t.rank===0||t.rank===1&&a===n))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${n}]`);if(t.dtype!==o.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}function M6(r,t,e,o=0){wt(e);let n=v(r,"sparseIndices","sparseToDense","int32"),s=v(t,"sparseValues","sparseToDense","string_or_numeric"),a=v(o,"defaultValue","sparseToDense",s.dtype);X1(n,s,e,a);let i={sparseIndices:n,sparseValues:s,defaultValue:a},p={outputShape:e};return T.runKernel(ks,i,p)}var L6=N({sparseToDense_:M6});function B6(r,t){let e=v(t,"indices","gatherND","int32"),n={params:v(r,"x","gatherND","string_or_numeric"),indices:e};return T.runKernel(kn,n)}var z6=N({gatherND_:B6});function Y1(r,t){if(t==null)return r.shape.slice();if(Cr(r.shape,t))return t;if(r.shape.length===t.length){let e=[];for(let o=0;o<r.shape.length;o++)t[o]==null&&r.shape[o]!=null?e.push(r.shape[o]):e.push(t[o]);return e}return t}function V6(r,t,e,o){let n=v(r,"x","dropout");if($(n.dtype==="float32",()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`),$(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),t===0)return r instanceof ut?n.clone():n;let s=Y1(n,e),a=1-t,i=je(Sd(Ce(dc(s,0,1,"float32",o),a)),a);return se(n,i)}var W6=N({dropout_:V6});function Qw(r){return Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))))}function Rl(r,t,e){let o=1-r%2,n=new Float32Array(r);for(let s=0;s<r;++s){let a=2*Math.PI*s/(r+o-1);n[s]=t-e*Math.cos(a)}return tr(n,"float32")}async function U6(r,t,e=1){let o=v(r,"predictions","inTopK"),n=v(t,"targets","inTopK");$(o.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`),$(o.rank-1===n.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`),yt(o.shape.slice(0,o.shape.length-1),n.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=o.shape[o.shape.length-1];$(e>0&&e<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${e}`);let a=await o.data(),i=await n.data(),[p,u]=[a.length/s,s],c=ew("bool",p);for(let l=0;l<p;l++){let m=l*u,d=a.subarray(m,m+u),f=[];for(let h=0;h<d.length;h++)f.push({value:d[h],index:h});f.sort((h,g)=>g.value-h.value),c[l]=0;for(let h=0;h<e;h++)if(f[h].index===i[l]){c[l]=1;break}}return r!==o&&o.dispose(),t!==n&&n.dispose(),ur(c,n.shape,"bool")}var G6=U6;var Zw={};qe(Zw,{conv2d:()=>Z1,depthwiseConv2d:()=>tN,matMul:()=>rN});function H6(r,t,e,o,n,s="NHWC",a){let i=r;r.rank===3&&(i=W(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let p=t;p.rank===3&&(p=W(t,[1,t.shape[0],t.shape[1],t.shape[2]])),$(i.rank===4,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),$(p.rank===4,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${p.shape}.`),$(e.length===4,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);let u=s==="NHWC"?i.shape[3]:i.shape[1],c=s==="NHWC"?p.shape[3]:p.shape[1];$(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),$(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),Bt("conv2dDerFilter",n,a);let l={x:i,dy:p},m={strides:o,pad:n,dataFormat:s,dimRoundingMode:a,filterShape:e};return T.runKernel(Oi,l,m)}var Q1=N({conv2DBackpropFilter_:H6});function ep(r,t,e){if(e==null||e==="linear")return r;if(e==="relu")return se(r,jd(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function tp(r,t){let e=t,o=yd(r.shape,t.shape);return o.length>0&&(e=ot(e,o)),W(e,r.shape)}function rp(r,t,e,o){if(t==="linear")return r;if(t==="relu")return du(r);if(t==="elu")return Cd(r);if(t==="relu6")return Gd(r);if(t==="prelu")return Md(r,e);if(t==="leakyrelu")return kd(r,o);if(t==="sigmoid")return $a(r);throw new Error(`Unknown fused activation ${t}.`)}var op=(r,t)=>!(r>0)||t==="linear";function K6({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:a,bias:i,activation:p="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(p=p||"linear",op(T.state.gradientDepth,p)===!1){$(n==="NHWC",()=>`Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let _=uu(r,t,e,o,n,s,a);return i!=null&&(_=Ce(_,i)),rp(_,p,u,c)}let l=v(r,"x","conv2d","float32"),m=v(t,"filter","conv2d","float32"),d=l,f=!1;l.rank===3&&(f=!0,d=W(l,[1,l.shape[0],l.shape[1],l.shape[2]])),$(d.rank===4,()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`),$(m.rank===4,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`),Bt("fused conv2d",o,a);let h=n==="NHWC"?d.shape[3]:d.shape[1];$(m.shape[2]===h,()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${m.shape[2]}.`),$(xr(e,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`);let g=Hu(d.shape,m.shape,e,s,o,a),x;i!=null&&(x=v(i,"bias","fused conv2d"),[x]=Oe(x,l),n==="NHWC"?rt(g.outShape,x.shape):($(x.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`),$(x.shape.length===0||x.shape[0]===g.outChannels||x.shape[0]===1,()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)));let b;if(u!=null){let _=u.shape;if($(_.length<=1||_.length===3,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${_.length}.`),_.length===1)$(_[0]===1||_[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${_}) is not compatible with the number of output channels (${g.outChannels}).`);else if(_.length===3)try{rt(_,g.outShape)}catch(E){let R=`Error in fused conv2d: PReLU activation weights (${_}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(R)}b=v(u,"prelu weights","fused conv2d")}let C=(_,E)=>{$(n==="NHWC",()=>`Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);let[R,D,P,O]=E,M=ep(_,P,p);$(Gu(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let L=xd(D.shape,M,R,e,o),B=Q1(D,M,R.shape,e,o),z=[L,B];if(O!=null){let U=tp(O,M);z.push(U)}return z},S={x:d,filter:m,bias:x,preluActivationWeights:b},k={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:a,activation:p,leakyreluAlpha:c};return i==null?vr((E,R,D)=>{let P=T.runKernel(vo,S,k);return D([R,E,P]),f&&(P=W(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:C}})(d,m):vr((E,R,D,P)=>{let O=T.runKernel(vo,S,k);return P([R,E,O,D]),f&&(O=W(O,[O.shape[1],O.shape[2],O.shape[3]])),{value:O,gradFunc:C}})(d,m,x)}var Z1=N({fusedConv2d_:K6});function q6(r,t,e,o,n,s=[1,1],a){let i=r;r.rank===3&&(i=W(r,[1,r.shape[0],r.shape[1],r.shape[2]]));let p=t;p.rank===3&&(p=W(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:i,dy:p},c={strides:o,pad:n,dimRoundingMode:a,dilations:s,filterShape:e};return T.runKernel(Mi,u,c)}var J1=N({depthwiseConv2dNativeBackpropFilter_:q6});function j6(r,t,e,o,n,s=[1,1],a){let i=t,p=!1;t.rank===3&&(p=!0,i=W(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:i,filter:e},c={strides:o,pad:n,dimRoundingMode:a,dilations:s,inputShape:r},l=T.runKernel(Li,u,c);return p?W(l,[l.shape[1],l.shape[2],l.shape[3]]):l}var eN=N({depthwiseConv2dNativeBackpropInput_:j6});function X6({x:r,filter:t,strides:e,pad:o,dataFormat:n="NHWC",dilations:s=[1,1],dimRoundingMode:a,bias:i,activation:p="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(op(T.state.gradientDepth,p)===!1){let k=lc(r,t,e,o,n,s,a);return i!=null&&(k=Ce(k,i)),rp(k,p,u,c)}let l=v(r,"x","depthwiseConv2d","float32"),m=v(t,"filter","depthwiseConv2d","float32"),d=l,f=!1;l.rank===3&&(f=!0,d=W(l,[1,l.shape[0],l.shape[1],l.shape[2]])),$(d.rank===4,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),$(m.rank===4,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`),$(d.shape[3]===m.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),s==null&&(s=[1,1]),$(xr(e,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${s}'`),Bt("fused depthwiseConv2d",o,a);let h=Hu(d.shape,m.shape,e,s,o,a,!0),g;i!=null&&(g=v(i,"bias","fused conv2d"),[g]=Oe(g,l),rt(h.outShape,g.shape));let x;u!=null&&(x=v(u,"prelu weights","fused depthwiseConv2d"));let b=(k,_)=>{$(Gu(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[E,R,D,P]=_,O=ep(k,D,p),M=eN(R.shape,O,E,e,o,s,a),L=J1(R,O,E.shape,e,o,s,a);if(P!=null){let B=tp(g,O);return[M,L,B]}return[M,L]},C={x:d,filter:m,bias:g,preluActivationWeights:x},S={strides:e,pad:o,dataFormat:n,dilations:s,dimRoundingMode:a,activation:p,leakyreluAlpha:c};return i==null?vr((_,E,R)=>{let D=T.runKernel(ko,C,S);return R([E,_,D]),f&&(D=W(D,[D.shape[1],D.shape[2],D.shape[3]])),{value:D,gradFunc:b}})(d,m):vr((_,E,R,D)=>{let P=T.runKernel(ko,C,S);return D([E,_,P,R]),f&&(P=W(P,[P.shape[1],P.shape[2],P.shape[3]])),{value:P,gradFunc:b}})(d,m,g)}var tN=N({fusedDepthwiseConv2d_:X6});function Y6({a:r,b:t,transposeA:e=!1,transposeB:o=!1,bias:n,activation:s="linear",preluActivationWeights:a,leakyreluAlpha:i=.2}){if(op(T.state.gradientDepth,s)===!1){let O=Ze(r,t,e,o);return n!=null&&(O=Ce(O,n)),rp(O,s,a,i)}let p=v(r,"a","fused matMul"),u=v(t,"b","fused matMul");[p,u]=Oe(p,u);let c=e?p.shape[p.rank-2]:p.shape[p.rank-1],l=o?u.shape[u.rank-1]:u.shape[u.rank-2],m=e?p.shape[p.rank-1]:p.shape[p.rank-2],d=o?u.shape[u.rank-2]:u.shape[u.rank-1],f=p.shape.slice(0,-2),h=u.shape.slice(0,-2),g=He(f),x=He(h);$(c===l,()=>`Error in fused matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${p.shape} and ${u.shape} and transposeA=${e} and transposeB=${o} must match.`);let C=rt(p.shape.slice(0,-2),u.shape.slice(0,-2)).concat([m,d]),S=e?W(p,[g,c,m]):W(p,[g,m,c]),k=o?W(u,[x,d,l]):W(u,[x,l,d]),_;n!=null&&(_=v(n,"bias","fused matMul"),[_]=Oe(_,p),rt(C,_.shape));let E;a!=null&&(E=v(a,"prelu weights","fused matMul"));let R=(O,M)=>{let[L,B,z,U]=M,j=ep(W(O,z.shape),z,s),q,Y;if(!e&&!o?(q=Ze(j,B,!1,!0),Y=Ze(L,j,!0,!1)):!e&&o?(q=Ze(j,B,!1,!1),Y=Ze(j,L,!0,!1)):e&&!o?(q=Ze(B,j,!1,!0),Y=Ze(L,j,!1,!1)):(q=Ze(B,j,!0,!0),Y=Ze(j,L,!0,!0)),n!=null){let J=tp(U,j);return[q,Y,J]}else return[q,Y]},D={a:S,b:k,bias:_,preluActivationWeights:E},P={transposeA:e,transposeB:o,activation:s,leakyreluAlpha:i};return n==null?vr((M,L,B)=>{let z=T.runKernel(Io,D,P);return B([M,L,z]),{value:W(z,C),gradFunc:R}})(S,k):vr((M,L,B,z)=>{let U=T.runKernel(Io,D,P);return z([M,L,U,B]),{value:W(U,C),gradFunc:R}})(S,k,_)}var rN=N({fusedMatMul_:Y6});function Q6(r){return Rl(r,.54,.46)}var oN=N({hammingWindow_:Q6});function Z6(r){return Rl(r,.5,.5)}var Zd=N({hannWindow_:Z6});function J6(r,t,e,o=!1,n=0){let s=0,a=[];for(;s+t<=r.size;)a.push(Xe(r,s,t)),s+=e;if(o)for(;s<r.size;){let i=s+t-r.size,p=bt([Xe(r,s,t-i),Ea([i],n)]);a.push(p),s+=e}return a.length===0?fu([],[0,t]):W(bt(a),[a.length,t])}var Jd=N({frame_:J6});function ej(r,t,e,o,n=Zd){o==null&&(o=Qw(t));let s=Jd(r,t,e),a=se(s,n(t));return hc(a,o)}var nN=N({stft_:ej});function tj(r,t,e,o,n="bilinear",s=0){let a=v(r,"image","cropAndResize"),i=v(t,"boxes","cropAndResize","float32"),p=v(e,"boxInd","cropAndResize","int32"),u=i.shape[0];$(a.rank===4,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),$(i.rank===2&&i.shape[1]===4,()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),$(p.rank===1&&p.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),$(o.length===2,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`),$(o[0]>=1&&o[1]>=1,()=>`cropSize must be atleast [1,1], but was ${o}`),$(n==="bilinear"||n==="nearest",()=>`method must be bilinear or nearest, but was ${n}`);let c={image:a,boxes:i,boxInd:p},l={method:n,extrapolationValue:s,cropSize:o};return T.runKernel(ln,c,l)}var sN=N({cropAndResize_:tj});function rj(r){let t=v(r,"image","flipLeftRight","float32");$(t.rank===4,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);let e={image:t};return T.runKernel(wn,e,{})}var aN=N({flipLeftRight_:rj});function oj(r){let t=v(r,"image","grayscaleToRGB"),e=t.rank-1,o=t.shape[e];$(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),$(o===1,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);let n=new Array(t.rank);return n.fill(1,0,e),n[e]=3,cu(t,n)}var iN=N({grayscaleToRGB_:oj});function nj(r){let t=v(r,"image","RGBToGrayscale"),e=t.rank-1,o=t.shape[e];$(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),$(o===3,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${o}.`);let n=t.dtype,s=We(t,"float32"),a=tr([.2989,.587,.114]),i;switch(t.rank){case 2:i=pu("ij,j->i",s,a);break;case 3:i=pu("ijk,k->ij",s,a);break;case 4:i=pu("ijkl,l->ijk",s,a);break;case 5:i=pu("ijklm,m->ijkl",s,a);break;case 6:i=pu("ijklmn,n->ijklm",s,a);break;default:throw new Error("Not a valid tensor rank.")}return i=Ms(i,-1),We(i,n)}var uN=N({rgbToGrayscale_:nj});function sj(r,t,e=0,o=.5){let n=v(r,"image","rotateWithOffset","float32");$(n.rank===4,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);let s={image:n},a={radians:t,fillValue:e,center:o};return T.runKernel(As,s,a)}var pN=N({rotateWithOffset_:sj});function Eo(r,t,e,o,n,s){o==null&&(o=.5),n==null&&(n=Number.NEGATIVE_INFINITY),s==null&&(s=0);let a=r.shape[0];return e=Math.min(e,a),$(0<=o&&o<=1,()=>`iouThreshold must be in [0, 1], but was '${o}'`),$(r.rank===2,()=>`boxes must be a 2D tensor, but was of rank '${r.rank}'`),$(r.shape[1]===4,()=>`boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`),$(t.rank===1,()=>"scores must be a 1D tensor"),$(t.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${t.shape[0]}`),$(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s}}function aj(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=v(r,"boxes","nonMaxSuppression","float32"),a=v(t,"scores","nonMaxSuppression","float32"),i=Eo(s,a,e,o,n);e=i.maxOutputSize,o=i.iouThreshold,n=i.scoreThreshold;let p={maxOutputSize:e,iouThreshold:o,scoreThreshold:n};return T.runKernel(Zn,{boxes:s,scores:a},p)}var cN=N({nonMaxSuppression_:aj});function lN(r,t,e){let o=ij(r,t,e),n=o<0?-(o+1):o;r.splice(n,0,t)}function ij(r,t,e){return pj(r,t,e||uj)}function uj(r,t){return r>t?1:r<t?-1:0}function pj(r,t,e){let o=0,n=r.length,s=0,a=!1;for(;o<n;){s=o+(n-o>>>1);let i=e(t,r[s]);i>0?o=s+1:(n=s,a=!i)}return a?o:-o-1}function ef(r,t,e,o,n){return Jw(r,t,e,o,n,0)}function tf(r,t,e,o,n,s){return Jw(r,t,e,o,n,0,!1,s,!0)}function rf(r,t,e,o,n,s){return Jw(r,t,e,o,n,s,!0)}function Jw(r,t,e,o,n,s,a=!1,i=!1,p=!1){let u=[];for(let g=0;g<t.length;g++)t[g]>n&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(mN);let c=s>0?-.5/s:0,l=[],m=[];for(;l.length<e&&u.length>0;){let g=u.pop(),{score:x,boxIndex:b,suppressBeginIndex:C}=g;if(x<n)break;let S=!1;for(let k=l.length-1;k>=C;--k){let _=cj(r,b,l[k]);if(_>=o){S=!0;break}if(g.score=g.score*lj(o,c,_),g.score<=n)break}g.suppressBeginIndex=l.length,S||(g.score===x?(l.push(b),m.push(g.score)):g.score>n&&lN(u,g,mN))}let d=l.length,f=e-d;i&&f>0&&(l.push(...new Array(f).fill(0)),m.push(...new Array(f).fill(0)));let h={selectedIndices:l};return a&&(h.selectedScores=m),p&&(h.validOutputs=d),h}function cj(r,t,e){let o=r.subarray(t*4,t*4+4),n=r.subarray(e*4,e*4+4),s=Math.min(o[0],o[2]),a=Math.min(o[1],o[3]),i=Math.max(o[0],o[2]),p=Math.max(o[1],o[3]),u=Math.min(n[0],n[2]),c=Math.min(n[1],n[3]),l=Math.max(n[0],n[2]),m=Math.max(n[1],n[3]),d=(i-s)*(p-a),f=(l-u)*(m-c);if(d<=0||f<=0)return 0;let h=Math.max(s,u),g=Math.max(a,c),x=Math.min(i,l),b=Math.min(p,m),C=Math.max(x-h,0)*Math.max(b-g,0);return C/(d+f-C)}function lj(r,t,e){let o=Math.exp(t*e*e);return e<=r?o:0}function mN(r,t){return r.score-t.score||r.score===t.score&&t.boxIndex-r.boxIndex}async function mj(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY){let s=v(r,"boxes","nonMaxSuppressionAsync"),a=v(t,"scores","nonMaxSuppressionAsync"),i=Eo(s,a,e,o,n);e=i.maxOutputSize,o=i.iouThreshold,n=i.scoreThreshold;let p=await Promise.all([s.data(),a.data()]),u=p[0],c=p[1],{selectedIndices:l}=ef(u,c,e,o,n);return s!==r&&s.dispose(),a!==t&&a.dispose(),tr(l,"int32")}var dN=mj;function dj(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let a=v(r,"boxes","nonMaxSuppression"),i=v(t,"scores","nonMaxSuppression"),p=Eo(a,i,e,o,n,s);e=p.maxOutputSize,o=p.iouThreshold,n=p.scoreThreshold,s=p.softNmsSigma;let u={boxes:a,scores:i},c={maxOutputSize:e,iouThreshold:o,scoreThreshold:n,softNmsSigma:s},l=T.runKernel(Jn,u,c);return{selectedIndices:l[0],selectedScores:l[1]}}var fN=N({nonMaxSuppressionWithScore_:dj});async function fj(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=0){let a=v(r,"boxes","nonMaxSuppressionAsync"),i=v(t,"scores","nonMaxSuppressionAsync"),p=Eo(a,i,e,o,n,s);e=p.maxOutputSize,o=p.iouThreshold,n=p.scoreThreshold,s=p.softNmsSigma;let u=await Promise.all([a.data(),i.data()]),c=u[0],l=u[1],{selectedIndices:m,selectedScores:d}=rf(c,l,e,o,n,s);return a!==r&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:tr(m,"int32"),selectedScores:tr(d)}}var hN=fj;function hj(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let a=v(r,"boxes","nonMaxSuppression"),i=v(t,"scores","nonMaxSuppression"),p=Eo(a,i,e,o,n,null),u=p.maxOutputSize,c=p.iouThreshold,l=p.scoreThreshold,m={boxes:a,scores:i},d={maxOutputSize:u,iouThreshold:c,scoreThreshold:l,padToMaxOutputSize:s},f=T.runKernel(Za,m,d);return{selectedIndices:f[0],validOutputs:f[1]}}var gN=N({nonMaxSuppressionPadded_:hj});async function gj(r,t,e,o=.5,n=Number.NEGATIVE_INFINITY,s=!1){let a=v(r,"boxes","nonMaxSuppressionAsync"),i=v(t,"scores","nonMaxSuppressionAsync"),p=Eo(a,i,e,o,n,null),u=p.maxOutputSize,c=p.iouThreshold,l=p.scoreThreshold,[m,d]=await Promise.all([a.data(),i.data()]),{selectedIndices:f,validOutputs:h}=tf(m,d,u,c,l,s);return a!==r&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:tr(f,"int32"),validOutputs:ke(h,"int32")}}var xN=gj;function xj(r,t,e=!1,o=!1){let n=v(r,"images","resizeBilinear");$(n.rank===3||n.rank===4,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`),$(t.length===2,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),$(o===!1||e===!1,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=n,a=!1;n.rank===3&&(a=!0,s=W(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,i={images:s},p={alignCorners:e,halfPixelCenters:o,size:t},u=T.runKernel(us,i,p);return a?W(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var yN=N({resizeBilinear_:xj});function yj(r,t,e=!1,o=!1){let n=v(r,"images","resizeNearestNeighbor");$(n.rank===3||n.rank===4,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`),$(t.length===2,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),$(n.dtype==="float32"||n.dtype==="int32",()=>"`images` must have `int32` or `float32` as dtype"),$(o===!1||e===!1,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=n,a=!1;n.rank===3&&(a=!0,s=W(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let[]=t,i={images:s},p={alignCorners:e,halfPixelCenters:o,size:t},u=T.runKernel(is,i,p);return a?W(u,[u.shape[1],u.shape[2],u.shape[3]]):u}var bN=N({resizeNearestNeighbor_:yj});function bj(r,t="binary",e=!1,o=.5){let n=v(r,"image","threshold"),s=.2989,a=.587,i=.114,p=n.shape[0]*n.shape[1],u=se(tr([o]),255),c,l,m,d;if($(n.rank===3,()=>`Error in threshold: image must be rank 3,but got rank ${n.rank}.`),$(n.shape[2]===3||n.shape[2]===1,()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`),$(n.dtype==="int32"||n.dtype==="float32",()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`),$(t==="otsu"||t==="binary",()=>`Method must be binary or otsu, but was ${t}`),n.shape[2]===3){[c,l,m]=li(n,[1,1,1],-1);let g=se(c,s),x=se(l,a),b=se(m,i);d=Ce(Ce(g,x),b)}else d=r;if(t==="otsu"){let g=gd(We(Hd(d),"int32"),ur([]),256);u=Cj(g,p)}let f=e?mc(d,u):qu(d,u);return We(se(f,255),"int32")}function Cj(r,t){let e=tr([-1]),o=tr([0]),n=tr([0]),s,a,i,p,u,c;for(let l=0;l<r.size-1;l++){s=Xe(r,0,l+1),a=Xe(r,l+1),u=je(ot(s),t),c=je(ot(a),t);let m=ot(se(s,mu(0,s.size)));i=je(m,ot(s));let d=Ea(a.shape,s.size),f=Ce(mu(0,a.size),d),h=se(a,f);p=je(ot(h),ot(a));let g=Te(i,p),x=Te(i,p),b=se(u,c);n=se(se(b,g),x);let C=qu(n,o);o=lo(C,n,o),e=lo(C,tr([l]),e)}return e}var CN=N({threshold_:bj});function wj(r,t,e="nearest",o="constant",n=0,s){let a=v(r,"image","transform","float32"),i=v(t,"transforms","transform","float32");$(a.rank===4,()=>`Error in transform: image must be rank 4,but got rank ${a.rank}.`),$(i.rank===2&&(i.shape[0]===a.shape[0]||i.shape[0]===1)&&i.shape[1]===8,()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),$(s==null||s.length===2,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);let p={image:a,transforms:i},u={interpolation:e,fillMode:o,fillValue:n,outputShape:s};return T.runKernel(Ds,p,u)}var wN=N({transform_:wj});function Sj(r,t,e){let o=v(r,"a","bandPart");$(o.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${o.rank}.`);let n=o.shape,[s,a]=o.shape.slice(-2),i,p;typeof t=="number"?($(t%1===0,()=>`bandPart(): numLower must be an integer, got ${t}.`),$(t<=s,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`),i=v(t<0?s:t,"numLower","bandPart")):($(t.dtype==="int32",()=>"bandPart(): numLower's dtype must be an int32."),i=lo(_l(t,0),s,Yu(t,s))),typeof e=="number"?($(e%1===0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),$(e<=a,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${a}).`),p=v(e<0?a:e,"numUpper","bandPart")):($(e.dtype==="int32",()=>"bandPart(): numUpper's dtype must be an int32."),p=lo(_l(e,0),a,Yu(e,a)));let u=W(mu(0,s,1,"int32"),[-1,1]),c=mu(0,a,1,"int32"),l=Te(u,c),m=ju(mc(l,i),vd(l,cr(p))),d=Gr([s,a],o.dtype);return W(kr(fo(W(o,[-1,s,a])).map(f=>lo(m,f,d))),n)}var SN=N({bandPart_:Sj});function Ij(r){let t;if(Array.isArray(r)){t=!1,$(r!=null&&r.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=r[0].shape[0];for(let s=1;s<r.length;++s)$(r[s].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`)}else t=!0,r=li(r,r.shape[0],0).map(n=>gc(n,[0]));$(r.length<=r[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);let e=[],o=r;for(let n=0;n<r.length;++n)e.push(T.tidy(()=>{let s=o[n];if(n>0)for(let a=0;a<n;++a){let i=se(ot(se(e[a],s)),e[a]);s=Te(s,i)}return je(s,Ku(s,"euclidean"))}));return t?kr(e,0):e}var IN=N({gramSchmidt_:Ij});function vj(r,t=!1){if($(r.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`),r.rank===2)return vN(r,t);{let e=r.shape.slice(0,r.shape.length-2).reduce((p,u)=>p*u),o=fo(W(r,[e,r.shape[r.shape.length-2],r.shape[r.shape.length-1]]),0),n=[],s=[];o.forEach(p=>{let[u,c]=vN(p,t);n.push(u),s.push(c)});let a=W(kr(n,0),r.shape),i=W(kr(s,0),r.shape);return[a,i]}}function vN(r,t=!1){return T.tidy(()=>{$(r.shape.length===2,()=>`qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);let e=r.shape[0],o=r.shape[1],n=wd(e),s=Ur(r),a=fu([[1]],[1,1]),i=Ur(a),p=e>=o?o:e;for(let u=0;u<p;++u){let c=s,l=i,m=n;[i,s,n]=T.tidy(()=>{let d=Xe(s,[u,u],[e-u,1]),f=Ku(d),h=Xe(s,[u,u],[1,1]),g=lo(qu(h,0),fu([[-1]]),fu([[1]])),x=Te(h,se(g,f)),b=je(d,x);b.shape[0]===1?i=Ur(a):i=bt([a,Xe(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);let C=cr(je(Ze(g,x),f)),S=Xe(s,[u,0],[e-u,o]),k=se(C,i),_=yc(i);if(u===0)s=Te(S,Ze(k,Ze(_,S)));else{let D=Te(S,Ze(k,Ze(_,S)));s=bt([Xe(s,[0,0],[u,o]),D],0)}let E=yc(k),R=Xe(n,[0,u],[e,n.shape[1]-u]);if(u===0)n=Te(R,Ze(Ze(R,i),E));else{let D=Te(R,Ze(Ze(R,i),E));n=bt([Xe(n,[0,0],[e,u]),D],1)}return[i,s,n]}),Mt([c,l,m])}return!t&&e>o&&(n=Xe(n,[0,0],[e,o]),s=Xe(s,[0,0],[o,o])),[n,s]})}var kN=N({qr_:vj});var Rt;(function(r){r[r.NONE=0]="NONE",r[r.MEAN=1]="MEAN",r[r.SUM=2]="SUM",r[r.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"})(Rt||(Rt={}));function kj(r,t,e=Rt.SUM_BY_NONZERO_WEIGHTS){let o=v(r,"losses","computeWeightedLoss"),n=null;t!=null&&(n=v(t,"weights","computeWeightedLoss"));let s=n==null?o:se(o,n);if(e===Rt.NONE)return s;if(e===Rt.SUM)return ot(s);if(e===Rt.MEAN){if(n==null)return Xu(s);{let a=o.size/n.size,i=je(ot(s),ot(n));return a>1?je(i,ke(a)):i}}if(e===Rt.SUM_BY_NONZERO_WEIGHTS){if(n==null)return je(ot(s),ke(o.size));{let a=se(n,Da(o.shape)),i=We(ot(Pd(a,ke(0))),"float32");return je(ot(s),i)}}throw Error(`Unknown reduction: ${e}`)}var lr=N({computeWeightedLoss_:kj});function Nj(r,t,e,o=Rt.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","absoluteDifference"),s=v(t,"predictions","absoluteDifference"),a=null;e!=null&&(a=v(e,"weights","absoluteDifference")),yt(n.shape,s.shape,"Error in absoluteDifference: ");let i=Jt(Te(n,s));return lr(i,a,o)}var NN=N({absoluteDifference_:Nj});function Tj(r,t,e,o,n=Rt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","cosineDistance"),a=v(t,"predictions","cosineDistance"),i=null;o!=null&&(i=v(o,"weights","cosineDistance")),yt(s.shape,a.shape,"Error in cosineDistance: ");let p=ke(1),u=Te(p,ot(se(s,a),e,!0));return lr(u,i,n)}var TN=N({cosineDistance_:Tj});function _j(r,t,e,o=Rt.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","hingeLoss"),s=v(t,"predictions","hingeLoss"),a=null;e!=null&&(a=v(e,"weights","hingeLoss")),yt(n.shape,s.shape,"Error in hingeLoss: ");let i=ke(1);n=Te(se(ke(2),n),i);let p=du(Te(i,se(n,s)));return lr(p,a,o)}var _N=N({hingeLoss_:_j});function $j(r,t,e,o=1,n=Rt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","huberLoss"),a=v(t,"predictions","huberLoss"),i=null;e!=null&&(i=v(e,"weights","huberLoss")),yt(s.shape,a.shape,"Error in huberLoss: ");let p=ke(o),u=Jt(Te(a,s)),c=Yu(u,p),l=Te(u,c),m=Ce(se(ke(.5),er(c)),se(p,l));return lr(m,i,n)}var $N=N({huberLoss_:$j});function Ej(r,t,e,o=1e-7,n=Rt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"labels","logLoss"),a=v(t,"predictions","logLoss"),i=null;e!=null&&(i=v(e,"weights","logLoss")),yt(s.shape,a.shape,"Error in logLoss: ");let p=ke(1),u=ke(o),c=cr(se(s,pi(Ce(a,u)))),l=se(Te(p,s),pi(Ce(Te(p,a),u))),m=Te(c,l);return lr(m,i,n)}var EN=N({logLoss_:Ej});function Rj(r,t,e,o=Rt.SUM_BY_NONZERO_WEIGHTS){let n=v(r,"labels","meanSquaredError"),s=v(t,"predictions","meanSquaredError"),a=null;e!=null&&(a=v(e,"weights","meanSquaredError")),yt(n.shape,s.shape,"Error in meanSquaredError: ");let i=qd(n,s);return lr(i,a,o)}var RN=N({meanSquaredError_:Rj});function Dj(r,t){let e=v(r,"labels","sigmoidCrossEntropyWithLogits"),o=v(t,"logits","sigmoidCrossEntropyWithLogits");yt(e.shape,o.shape,"Error in sigmoidCrossEntropyWithLogits: ");let n=du(o),s=se(o,e),a=Nd($o(cr(Jt(o))));return Ce(Te(n,s),a)}function Aj(r,t,e,o=0,n=Rt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"multiClassLabels","sigmoidCrossEntropy"),a=v(t,"logits","sigmoidCrossEntropy"),i=null;if(e!=null&&(i=v(e,"weights","sigmoidCrossEntropy")),yt(s.shape,a.shape,"Error in sigmoidCrossEntropy: "),o>0){let u=ke(o),c=ke(1),l=ke(.5);s=Ce(se(s,Te(c,u)),se(l,u))}let p=Dj(s,a);return lr(p,i,n)}var DN=N({sigmoidCrossEntropy_:Aj});function Fj(r,t,e=-1){if(e===-1&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return vr((n,s,a)=>{let p=$d(s,[e],!0),u=Te(We(s,"float32"),p);a([n,u]);let c=cr(se(u,n));return{value:ot(c,[e]),gradFunc:(d,f)=>{let[h,g]=f,x=ii(d.shape,[e]);return[se(W(d,x),Te(We(h,"float32"),$o(g))),se(W(d,x),Te($o(g),We(h,"float32")))]}}})(r,t)}function Pj(r,t,e,o=0,n=Rt.SUM_BY_NONZERO_WEIGHTS){let s=v(r,"onehotLabels","softmaxCrossEntropy"),a=v(t,"logits","softmaxCrossEntropy"),i=null;if(e!=null&&(i=v(e,"weights","softmaxCrossEntropy")),yt(s.shape,a.shape,"Error in softmaxCrossEntropy: "),o>0){let u=ke(o),c=ke(1),l=ke(s.shape[1]);s=Ce(se(s,Te(c,u)),je(u,l))}let p=Fj(s,a);return lr(p,i,n)}var AN=N({softmaxCrossEntropy_:Pj});function Oj(r,t,e,o){let n=v(r,"indices","sparseFillEmptyRows","int32"),s=v(t,"values","sparseFillEmptyRows"),a=v(e,"denseShape","sparseFillEmptyRows","int32"),i=v(o,"defaultValue","sparseFillEmptyRows",s.dtype);if(n.rank!==2)throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);if(s.rank!==1)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(a.rank!==1)throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);if(i.rank!==0)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);let p={indices:n,values:s,denseShape:a,defaultValue:i},u=T.runKernel(ji,p);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}var FN=N({sparseFillEmptyRows_:Oj});function Mj(r,t,e){let o=v(r,"inputIndices","sparseReshape","int32"),n=v(t,"inputShape","sparseReshape","int32"),s=v(e,"newShape","sparseReshape","int32");if(o.rank!==2)throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);if(n.rank!==1)throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);if(s.rank!==1)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);let a={inputIndices:o,inputShape:n,newShape:s},i=T.runKernel(ti,a);return{outputIndices:i[0],outputShape:i[1]}}var PN=N({sparseReshape_:Mj});function Lj(r,t,e){let o=v(r,"data","sparseSegmentMean"),n=v(t,"indices","sparseSegmentMean","int32"),s=v(e,"segmentIds","sparseSegmentMean","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);let a={data:o,indices:n,segmentIds:s};return T.runKernel(ya,a)}var ON=N({sparseSegmentMean_:Lj});function Bj(r,t,e){let o=v(r,"data","sparseSegmentSum"),n=v(t,"indices","sparseSegmentSum","int32"),s=v(e,"segmentIds","sparseSegmentSum","int32");if(o.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.rank!==1)throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);if(s.rank!==1)throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);let a={data:o,indices:n,segmentIds:s};return T.runKernel(ba,a)}var MN=N({sparseSegmentSum_:Bj});function zj(r,t,e,o,n,s,a,i){let p=v(r,"data","stringNGrams","string");if(p.dtype!=="string")throw new Error("Data must be of datatype string");if(p.shape.length!==1)throw new Error(`Data must be a vector, saw: ${p.shape}`);let u=v(t,"dataSplits","stringNGrams");if(u.dtype!=="int32")throw new Error("Data splits must be of datatype int32");let c={separator:e,nGramWidths:o,leftPad:n,rightPad:s,padWidth:a,preserveShortSequences:i},l={data:p,dataSplits:u},m=T.runKernel(Ca,l,c);return{nGrams:m[0],nGramsSplits:m[1]}}var LN=N({stringNGrams_:zj});function Vj(r,t,e=!0){let o=v(r,"input","stringSplit","string"),n=v(t,"delimiter","stringSplit","string");if(o.rank!==1)throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);if(n.rank!==0)throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);let s={skipEmpty:e},a={input:o,delimiter:n},i=T.runKernel(Yi,a,s);return{indices:i[0],values:i[1],shape:i[2]}}var BN=N({stringSplit_:Vj});function Wj(r,t){let e=v(r,"input","stringToHashBucketFast","string"),o={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");let n={input:e};return T.runKernel(Qi,n,o)}var zN=N({stringToHashBucketFast_:Wj});function Uj(r,t,e,o=!0){let n=v(r,"input","staticRegexReplace","string"),s={pattern:t,rewrite:e,replaceGlobal:o};return T.runKernel(Ou,{x:n},s)}var VN=N({staticRegexReplace_:Uj});var Gj={fft:fc,ifft:Ju,rfft:hc,irfft:Kd},Hj={hammingWindow:oN,hannWindow:Zd,frame:Jd,stft:nN},Kj={flipLeftRight:aN,grayscaleToRGB:iN,resizeNearestNeighbor:bN,resizeBilinear:yN,rgbToGrayscale:uN,rotateWithOffset:pN,cropAndResize:sN,nonMaxSuppression:cN,nonMaxSuppressionAsync:dN,nonMaxSuppressionWithScore:fN,nonMaxSuppressionWithScoreAsync:hN,nonMaxSuppressionPadded:gN,nonMaxSuppressionPaddedAsync:xN,threshold:CN,transform:wN},qj={bandPart:SN,gramSchmidt:IN,qr:kN},jj={absoluteDifference:NN,computeWeightedLoss:lr,cosineDistance:TN,hingeLoss:_N,huberLoss:$N,logLoss:EN,meanSquaredError:RN,sigmoidCrossEntropy:DN,softmaxCrossEntropy:AN},Xj={sparseFillEmptyRows:FN,sparseReshape:PN,sparseSegmentMean:ON,sparseSegmentSum:MN},Yj={stringNGrams:LN,stringSplit:BN,stringToHashBucketFast:zN,staticRegexReplace:VN};var WN={};qe(WN,{Serializable:()=>Dl,SerializationMap:()=>Fa,getRegisteredName:()=>Zj,registerClass:()=>tS});var Qj=new Map,eS=new Map,Dl=class{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}},Fa=class{constructor(){this.classNameMap={}}static getMap(){return Fa.instance==null&&(Fa.instance=new Fa),Fa.instance}static register(t){Fa.getMap().classNameMap[t.className]=[t,t.fromConfig]}};function tS(r,t,e){$(r.className!=null,()=>"Class being registered does not have the static className property defined."),$(typeof r.className=="string",()=>"className is required to be a string, but got type "+typeof r.className),$(r.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof t=="undefined"&&(t="Custom"),typeof e=="undefined"&&(e=r.className);let o=e,n=t+">"+o;return Fa.register(r),Qj.set(n,r),eS.set(r,n),r}function Zj(r){return eS.has(r)?eS.get(r):r.className}var Nr=class extends Dl{minimize(t,e=!1,o){let{value:n,grads:s}=this.computeGradients(t,o);if(o!=null){let a=o.map(i=>({name:i.name,tensor:s[i.name]}));this.applyGradients(a)}else this.applyGradients(s);return Mt(s),e?n:(n.dispose(),null)}get iterations(){return this.iterations_==null&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return zw(t,e)}dispose(){this.iterations_!=null&&Mt(this.iterations_)}async saveIterations(){return this.iterations_==null&&(this.iterations_=0),{name:"iter",tensor:ke(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}};Object.defineProperty(Nr,Symbol.hasInstance,{value:r=>r.minimize!=null&&r.computeGradients!=null&&r.applyGradients!=null});var np=class extends Nr{static get className(){return"Adadelta"}constructor(t,e,o=null){super(),this.learningRate=t,this.rho=e,this.epsilon=o,this.accumulatedGrads=[],this.accumulatedUpdates=[],o==null&&(this.epsilon=T.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=T.registeredVariables[o],a=!1;this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accum_grad`,variable:De(()=>Ht(s).variable(a))}),this.accumulatedUpdates[n]==null&&(this.accumulatedUpdates[n]={originalName:`${o}/accum_var`,variable:De(()=>Ht(s).variable(a))});let i=Array.isArray(t)?t[n].tensor:t[o];if(i==null)return;let p=this.accumulatedGrads[n].variable,u=this.accumulatedUpdates[n].variable;De(()=>{let c=Ce(se(p,this.rho),se(er(i),1-this.rho)),l=se(je(Dr(Ce(u,this.epsilon)),Dr(Ce(p,this.epsilon))),i),m=Ce(se(u,this.rho),se(er(l),1-this.rho));p.assign(c),u.assign(m);let d=Ce(se(l,-this.learningRate),s);s.assign(d)})}),this.incrementIterations()}dispose(){this.accumulatedUpdates!=null&&(Mt(this.accumulatedGrads.map(t=>t.variable)),Mt(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){let t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=t.length/2,o=!1;this.accumulatedGrads=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedUpdates=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}};var sp=class extends Nr{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=T.registeredVariables[o];this.accumulatedGrads[n]==null&&(this.accumulatedGrads[n]={originalName:`${o}/accumulator`,variable:De(()=>Ea(s.shape,this.initialAccumulatorValue).variable(!1))});let a=Array.isArray(t)?t[n].tensor:t[o];if(a==null)return;let i=this.accumulatedGrads[n].variable;De(()=>{let p=Ce(i,er(a));i.assign(p);let u=Ce(se(je(a,Dr(Ce(p,T.backend.epsilon()))),-this.learningRate),s);s.assign(u)})}),this.incrementIterations()}dispose(){this.accumulatedGrads!=null&&Mt(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulatedGrads=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}};var ap=class extends Nr{static get className(){return"Adam"}constructor(t,e,o,n=null){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],De(()=>{this.accBeta1=ke(e).variable(),this.accBeta2=ke(o).variable()}),n==null&&(this.epsilon=T.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);De(()=>{let o=Te(1,this.accBeta1),n=Te(1,this.accBeta2);e.forEach((s,a)=>{let i=T.registeredVariables[s],p=!1;this.accumulatedFirstMoment[a]==null&&(this.accumulatedFirstMoment[a]={originalName:`${s}/m`,variable:De(()=>Ht(i).variable(p))}),this.accumulatedSecondMoment[a]==null&&(this.accumulatedSecondMoment[a]={originalName:`${s}/v`,variable:De(()=>Ht(i).variable(p))});let u=Array.isArray(t)?t[a].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,m=Ce(se(c,this.beta1),se(u,1-this.beta1)),d=Ce(se(l,this.beta2),se(er(u),1-this.beta2)),f=je(m,o),h=je(d,n);c.assign(m),l.assign(d);let g=Ce(se(je(f,Ce(Dr(h),this.epsilon)),-this.learningRate),i);i.assign(g)}),this.accBeta1.assign(se(this.accBeta1,this.beta1)),this.accBeta2.assign(se(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),this.accumulatedFirstMoment!=null&&Mt(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedSecondMoment!=null&&Mt(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t),De(()=>{this.accBeta1.assign(ui(this.beta1,this.iterations_+1)),this.accBeta2.assign(ui(this.beta2,this.iterations_+1))});let e=t.length/2,o=!1;this.accumulatedFirstMoment=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedSecondMoment=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}};var ip=class extends Nr{static get className(){return"Adamax"}constructor(t,e,o,n=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=o,this.epsilon=n,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],De(()=>{this.iteration=ke(0).variable(),this.accBeta1=ke(e).variable()}),n==null&&(this.epsilon=T.backend.epsilon())}applyGradients(t){let e=Array.isArray(t)?t.map(o=>o.name):Object.keys(t);De(()=>{let o=Te(1,this.accBeta1),n=je(-this.learningRate,Ce(se(this.iteration,this.decay),1));e.forEach((s,a)=>{let i=T.registeredVariables[s],p=!1;this.accumulatedFirstMoment[a]==null&&(this.accumulatedFirstMoment[a]={originalName:`${s}/m`,variable:Ht(i).variable(p)}),this.accumulatedWeightedInfNorm[a]==null&&(this.accumulatedWeightedInfNorm[a]={originalName:`${s}/v`,variable:Ht(i).variable(p)});let u=Array.isArray(t)?t[a].tensor:t[s];if(u==null)return;let c=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,m=Ce(se(c,this.beta1),se(u,1-this.beta1)),d=se(l,this.beta2),f=Jt(u),h=Fd(d,f);c.assign(m),l.assign(h);let g=Ce(se(je(n,o),je(m,Ce(h,this.epsilon))),i);i.assign(g)}),this.iteration.assign(Ce(this.iteration,1)),this.accBeta1.assign(se(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),this.accumulatedFirstMoment!=null&&Mt(this.accumulatedFirstMoment.map(t=>t.variable)),this.accumulatedWeightedInfNorm!=null&&Mt(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}};var mi=class extends Nr{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=Array.isArray(t)?t[n].tensor:t[o];if(s==null)return;let a=T.registeredVariables[o];De(()=>{let i=Ce(se(this.c,s),a);a.assign(i)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,this.c!=null&&this.c.dispose(),this.c=Rr(ke(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(t=await this.extractIterations(t),t.length!==0)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}};var up=class extends mi{static get className(){return"Momentum"}constructor(t,e,o=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=o,this.accumulations=[],this.m=ke(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=T.registeredVariables[o];this.accumulations[n]==null&&(this.accumulations[n]={originalName:`${o}/momentum`,variable:De(()=>Ht(s).variable(!1))});let a=this.accumulations[n].variable,i=Array.isArray(t)?t[n].tensor:t[o];i!=null&&De(()=>{let p,u=Ce(se(this.m,a),i);this.useNesterov?p=Ce(se(this.c,Ce(i,se(u,this.m))),s):p=Ce(se(this.c,u),s),a.assign(u),s.assign(p)})}),this.incrementIterations()}dispose(){this.m.dispose(),this.accumulations!=null&&Mt(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=!1;this.accumulations=t.map(o=>({originalName:o.name,variable:o.tensor.variable(e)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}};var pp=class extends Nr{static get className(){return"RMSProp"}constructor(t,e=.9,o=0,n=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=o,this.epsilon=n,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,n==null&&(this.epsilon=T.backend.epsilon()),t==null)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(o=>o.name):Object.keys(t)).forEach((o,n)=>{let s=T.registeredVariables[o],a=!1;this.accumulatedMeanSquares[n]==null&&(this.accumulatedMeanSquares[n]={originalName:`${o}/rms`,variable:De(()=>Ht(s).variable(a))}),this.accumulatedMoments[n]==null&&(this.accumulatedMoments[n]={originalName:`${o}/momentum`,variable:De(()=>Ht(s).variable(a))}),this.accumulatedMeanGrads[n]==null&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${o}/mg`,variable:De(()=>Ht(s).variable(a))});let i=Array.isArray(t)?t[n].tensor:t[o];if(i==null)return;let p=this.accumulatedMeanSquares[n].variable,u=this.accumulatedMoments[n].variable;De(()=>{let c=Ce(se(p,this.decay),se(er(i),1-this.decay));if(this.centered){let l=this.accumulatedMeanGrads[n].variable,m=Ce(se(l,this.decay),se(i,1-this.decay)),d=je(se(i,this.learningRate),Dr(Te(c,Ce(er(m),this.epsilon)))),f=Ce(se(u,this.momentum),d);p.assign(c),l.assign(m),u.assign(f);let h=Te(s,f);s.assign(h)}else{let l=Ce(se(p,this.decay),se(er(i),1-this.decay)),m=Ce(se(u,this.momentum),je(se(i,this.learningRate),Dr(Ce(l,this.epsilon))));p.assign(l),u.assign(m);let d=Te(s,m);s.assign(d)}})}),this.incrementIterations()}dispose(){this.accumulatedMeanSquares!=null&&Mt(this.accumulatedMeanSquares.map(t=>t.variable)),this.accumulatedMeanGrads!=null&&this.centered&&Mt(this.accumulatedMeanGrads.map(t=>t.variable)),this.accumulatedMoments!=null&&Mt(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){let t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(t){t=await this.extractIterations(t);let e=this.centered?t.length/3:t.length/2,o=!1;this.accumulatedMeanSquares=t.slice(0,e).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.accumulatedMoments=t.slice(e,e*2).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})),this.centered&&(this.accumulatedMeanGrads=t.slice(e*2,e*3).map(n=>({originalName:n.name,variable:n.tensor.variable(o)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}};var Jj=[np,sp,ap,ip,up,pp,mi];function UN(){for(let r of Jj)tS(r)}var fi={};qe(fi,{CompositeArrayBuffer:()=>jt,browserFiles:()=>HN,browserHTTPRequest:()=>jN,concatenateArrayBuffers:()=>ik,copyModel:()=>wk,decodeWeights:()=>ad,encodeWeights:()=>nk,fromMemory:()=>XN,fromMemorySync:()=>iS,getLoadHandlers:()=>lk,getModelArtifactsForJSON:()=>ic,getModelArtifactsForJSONSync:()=>_w,getModelArtifactsInfoForJSON:()=>va,getSaveHandlers:()=>ck,getWeightSpecs:()=>ud,http:()=>nf,isHTTPScheme:()=>of,listModels:()=>bk,loadWeights:()=>KN,moveModel:()=>Sk,registerLoadRouter:()=>pk,registerSaveRouter:()=>uk,removeModel:()=>Ck,weightsLoaderFactory:()=>sS,withSaveHandler:()=>YN,withSaveHandlerSync:()=>QN});var eX="model",tX=".json",rX=".weights.bin";function GN(r){return new Promise(t=>setTimeout(t)).then(r)}var di=class{constructor(t){if(!A().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(di.URL_SCHEME)&&(t=t.slice(di.URL_SCHEME.length)),(t==null||t.length===0)&&(t=eX),this.modelJsonFileName=t+tX,this.weightDataFileName=t+rX}async save(t){if(typeof document=="undefined")throw new Error("Browser downloads are not supported in this environment since `document` is not present");let e=jt.join(t.weightData),o=window.URL.createObjectURL(new Blob([e],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],s=id(t,n),a=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),i=this.modelJsonAnchor==null?document.createElement("a"):this.modelJsonAnchor;if(i.download=this.modelJsonFileName,i.href=a,await GN(()=>i.dispatchEvent(new MouseEvent("click"))),t.weightData!=null){let p=this.weightDataAnchor==null?document.createElement("a"):this.weightDataAnchor;p.download=this.weightDataFileName,p.href=o,await GN(()=>p.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:va(t)}}}};di.URL_SCHEME="downloads://";var rS=class{constructor(t){if(t==null||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise((t,e)=>{let o=new FileReader;o.onload=n=>{let s=JSON.parse(n.target.result),a=s.modelTopology;if(a==null){e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}if(s.weightsManifest==null){e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(this.weightsFiles.length===0){t({modelTopology:a});return}let p=ic(s,u=>this.loadWeights(u));t(p)},o.onerror=n=>e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),o.readAsText(this.jsonFile)})}loadWeights(t){let e=[],o=[];for(let a of t)e.push(...a.weights),o.push(...a.paths);let n=this.checkManifestAndWeightFiles(t),s=o.map(a=>this.loadWeightsFile(a,n[a]));return Promise.all(s).then(a=>[e,a])}loadWeightsFile(t,e){return new Promise((o,n)=>{let s=new FileReader;s.onload=a=>{let i=a.target.result;o(i)},s.onerror=a=>n(`Failed to weights data from file of path '${t}'.`),s.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){let e=[],o=this.weightsFiles.map(s=>Tw(s.name)),n={};for(let s of t)s.paths.forEach(a=>{let i=Tw(a);if(e.indexOf(i)!==-1)throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);if(e.push(i),o.indexOf(i)===-1)throw new Error(`Weight file with basename '${i}' is not provided.`);n[a]=this.weightsFiles[o.indexOf(i)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return n}},oX=r=>A().getBool("IS_BROWSER")&&!Array.isArray(r)&&r.startsWith(di.URL_SCHEME)?nX(r.slice(di.URL_SCHEME.length)):null;ft.registerSaveRouter(oX);function nX(r="model"){return new di(r)}function HN(r){return new rS(r)}function oS(r,t,e,o){a(r),e=e==null?0:e,o=o==null?1:o,i(e,o);let n=0,s=p=>(p.then(u=>{let c=e+ ++n/r.length*(o-e);return t(c),u}),p);function a(p){$(p!=null&&Array.isArray(p)&&p.length>0,()=>"promises must be a none empty array")}function i(p,u){$(p>=0&&p<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${p}`),$(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),$(u>=p,()=>`startFraction must be no more than endFraction, but got startFraction ${p} and endFraction ${u}`)}return Promise.all(r.map(s))}async function nS(r,t){t==null&&(t={});let e=t.fetchFunc==null?A().platform.fetch:t.fetchFunc,o=r.map(l=>e(l,t.requestInit,{isBinary:!0})),n=0,s=.5,i=(t.onProgress==null?await Promise.all(o):await oS(o,t.onProgress,n,s)).map(l=>l.arrayBuffer()),p=.5,u=1;return t.onProgress==null?await Promise.all(i):await oS(i,t.onProgress,p,u)}async function KN(r,t="",e,o){return sS(a=>nS(a,{requestInit:o}))(r,t,e)}function sS(r){return async(t,e="",o)=>{let n=t.map(()=>!1),s={},a=o!=null?o.map(()=>!1):[],i=[];if(t.forEach((d,f)=>{let h=0;d.weights.forEach(g=>{let x="quantization"in g?g.quantization.dtype:g.dtype,b=Il[x]*He(g.shape),C=()=>{n[f]=!0,s[f]==null&&(s[f]=[]),s[f].push({manifestEntry:g,groupOffset:h,sizeBytes:b})};o!=null?o.forEach((S,k)=>{S===g.name&&(C(),a[k]=!0)}):C(),i.push(g.name),h+=b})}),!a.every(d=>d)){let d=o.filter((f,h)=>!a[h]);throw new Error(`Could not find weights in manifest with names: ${d.join(", ")}. 
Manifest JSON has weights with names: ${i.join(", ")}.`)}let p=n.reduce((d,f,h)=>(f&&d.push(h),d),[]),u=[];p.forEach(d=>{t[d].paths.forEach(f=>{let h=e+(e.endsWith("/")?"":"/")+f;u.push(h)})});let c=await r(u),l={},m=0;return p.forEach(d=>{let f=t[d].paths.length,h=new jt(c.slice(m,m+f));s[d].forEach(x=>{let b=h.slice(x.groupOffset,x.groupOffset+x.sizeBytes),C=ad(b,[x.manifestEntry]);for(let S in C)l[S]=C[S]}),m+=f}),l}}var sX="application/octet-stream",aX="application/json",Al=class{constructor(t,e){if(this.DEFAULT_METHOD="POST",e==null&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,e.fetchFunc!=null?($(typeof e.fetchFunc=="function",()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=A().platform.fetch,$(t!=null&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&$(t.length===2,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,e.requestInit!=null&&e.requestInit.body!=null)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;let o=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],n=id(t,o);if(e.body.append("model.json",new Blob([JSON.stringify(n)],{type:aX}),"model.json"),t.weightData!=null){let a=jt.join(t.weightData);e.body.append("model.weights.bin",new Blob([a],{type:sX}),"model.weights.bin")}let s=await this.fetch(this.path,e);if(s.ok)return{modelArtifactsInfo:va(t),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch(s){let a=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?a+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":a+=" Please make sure the server is serving valid JSON for this request.",new Error(a)}let o=e.modelTopology,n=e.weightsManifest;if(o==null&&n==null)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return ic(e,s=>this.loadWeights(s))}async loadWeights(t){let e=Array.isArray(this.path)?this.path[1]:this.path,[o,n]=iX(e),s=this.weightPathPrefix||o,a=ud(t),i=[],p=[];for(let c of t)for(let l of c.paths)this.weightUrlConverter!=null?p.push(this.weightUrlConverter(l)):i.push(s+l+n);this.weightUrlConverter&&i.push(...await Promise.all(p));let u=await nS(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[a,u]}};Al.URL_SCHEME_REGEX=/^https?:\/\//;function iX(r){let t=r.lastIndexOf("/"),e=r.lastIndexOf("?"),o=r.substring(0,t),n=e>t?r.substring(e):"";return[o+"/",n]}function of(r){return r.match(Al.URL_SCHEME_REGEX)!=null}var qN=(r,t)=>{if(typeof fetch=="undefined"&&(t==null||t.fetchFunc==null))return null;{let e=!0;if(Array.isArray(r)?e=r.every(o=>of(o)):e=of(r),e)return nf(r,t)}return null};ft.registerSaveRouter(qN);ft.registerLoadRouter(qN);function nf(r,t){return new Al(r,t)}function jN(r,t){return nf(r,t)}var Fl=class{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}},sf=class{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}},aS=class{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}};function XN(r,t,e,o){let n=arguments;return new aS(iS(...n))}function iS(r,t,e,o){return arguments.length===1?r.modelTopology!=null||r.weightSpecs!=null?new Fl(r):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Fl({modelTopology:r})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Fl({modelTopology:r,weightSpecs:t,weightData:e,trainingConfig:o}))}function YN(r){return new sf(r)}function QN(r){return new sf(r)}var JN={};qe(JN,{confusionMatrix:()=>ZN});function uX(r,t,e){let o=v(r,"labels","confusionMatrix"),n=v(t,"predictions","confusionMatrix");$(e==null||e>0&&Number.isInteger(e),()=>`If provided, numClasses must be a positive integer, but got ${e}`),$(o.rank===1,()=>`Expected the rank of labels to be 1, but got ${o.rank}`),$(n.rank===1,()=>`Expected the rank of predictions to be 1, but got ${n.rank}`),$(o.shape[0]===n.shape[0],()=>`Mismatch in the number of examples: ${o.shape[0]} vs. ${n.shape[0]}. Labels and predictions should have the same number of elements.`),$(e>0&&Number.isInteger(e),()=>`numClasses is required to be a positive integer, but got ${e}`);let s=El(We(o,"int32"),e),a=El(We(n,"int32"),e),i=yc(s),p=Ze(i,a);return We(p,"int32")}var ZN=N({confusionMatrix_:uX});var oT={};qe(oT,{draw:()=>gX,fromPixels:()=>xX,fromPixelsAsync:()=>dX,toPixels:()=>hX});var cp,eT=!1;function tT(r,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(r==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,o=!1,n=!1,s=!1,a=!1,i=!1;if(r.data instanceof Uint8Array)e=!0;else if(typeof ImageData!="undefined"&&r instanceof ImageData)o=!0;else if(typeof HTMLVideoElement!="undefined"&&r instanceof HTMLVideoElement)n=!0;else if(typeof HTMLImageElement!="undefined"&&r instanceof HTMLImageElement)s=!0;else if(r.getContext!=null)a=!0;else if(typeof ImageBitmap!="undefined"&&r instanceof ImageBitmap)i=!0;else throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);if(tc(Mu,T.backendName)!=null){let f={pixels:r},h={numChannels:t};return T.runKernel(Mu,f,h)}let[u,c]=n?[r.videoWidth,r.videoHeight]:[r.width,r.height],l;if(a)l=r.getContext("2d").getImageData(0,0,u,c).data;else if(o||e)l=r.data;else if(s||n||i){if(cp==null)if(typeof document=="undefined")if(typeof OffscreenCanvas!="undefined"&&typeof OffscreenCanvasRenderingContext2D!="undefined")cp=new OffscreenCanvas(1,1).getContext("2d");else throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");else cp=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});cp.canvas.width=u,cp.canvas.height=c,cp.drawImage(r,0,0,u,c),l=cp.getImageData(0,0,u,c).data}let m;if(t===4)m=new Int32Array(l);else{let f=u*c;m=new Int32Array(f*t);for(let h=0;h<f;h++)for(let g=0;g<t;++g)m[h*t+g]=l[h*4+g]}return Xd(m,[c,u,t],"int32")}function pX(r){return r!=null&&r.data instanceof Uint8Array}function cX(){return typeof window!="undefined"&&typeof ImageBitmap!="undefined"&&window.hasOwnProperty("createImageBitmap")}function lX(r){return r!=null&&r.width!==0&&r.height!==0}function mX(r){return cX()&&!(r instanceof ImageBitmap)&&lX(r)&&!pX(r)}async function dX(r,t=3){let e=null;if(A().getBool("WRAP_TO_IMAGEBITMAP")&&mX(r)){let o;try{o=await createImageBitmap(r,{premultiplyAlpha:"none"})}catch(n){o=null}o!=null&&o.width===r.width&&o.height===r.height?e=o:e=r}else e=r;return tT(e,t)}function rT(r){if(r.rank!==2&&r.rank!==3)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${r.rank}.`);let t=r.rank===2?1:r.shape[2];if(t>4||t===2)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if(r.dtype!=="float32"&&r.dtype!=="int32")throw new Error(`Unsupported type for toPixels: ${r.dtype}. Please use float32 or int32 tensors.`)}function fX(r){let t=(r==null?void 0:r.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}async function hX(r,t){let e=v(r,"img","toPixels");if(!(r instanceof ut)){let u=e;e=We(u,"int32"),u.dispose()}rT(e);let[o,n]=e.shape.slice(0,2),s=e.rank===2?1:e.shape[2],a=await e.data(),i=e.dtype==="float32"?255:1,p=new Uint8ClampedArray(n*o*4);for(let u=0;u<o*n;++u){let c=[0,0,0,255];for(let m=0;m<s;m++){let d=a[u*s+m];if(e.dtype==="float32"){if(d<0||d>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${d}.`)}else if(e.dtype==="int32"&&(d<0||d>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${d}.`);s===1?(c[0]=d*i,c[1]=d*i,c[2]=d*i):c[m]=d*i}let l=u*4;p[l+0]=Math.round(c[0]),p[l+1]=Math.round(c[1]),p[l+2]=Math.round(c[2]),p[l+3]=Math.round(c[3])}if(t!=null){eT||tc(Pu,T.backendName)!=null&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),eT=!0),t.width=n,t.height=o;let u=t.getContext("2d"),c=new ImageData(p,n,o);u.putImageData(c,0,0)}return e!==r&&e.dispose(),p}function gX(r,t,e){let o=v(r,"img","draw");if(!(r instanceof ut)){let a=o;o=We(a,"int32"),a.dispose()}rT(o),fX(e==null?void 0:e.imageOptions);let n={image:o},s={canvas:t,options:e};T.runKernel(Pu,n,s)}var xX=N({fromPixels_:tT});var af={};qe(af,{prepareAndValidate:()=>nT});function nT(r,t){let e=r.shape.length,o=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(o<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);if(t.dtype!=="int32")throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[o-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[o-1]} vs. ${e}`);if(He(r.shape)===0)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);let n=t.shape,s=n[n.length-1],a=1;for(let l=0;l<n.length-1;++l)a*=n[l];let i=r.shape,p=n.slice();p.pop();let u=1;for(let l=s;l<e;++l)u*=i[l],p.push(i[l]);let c=[...js(r.shape).map(l=>l/u),1].slice(0,s);return[p,a,u,c]}var ct={};qe(ct,{assertParamsValid:()=>bX,computeFlatOffset:()=>vX,computeOutShape:()=>wX,getNormalizedAxes:()=>SX,isSliceContinous:()=>IX,maskToAxes:()=>CX,parseSliceParams:()=>kX,sliceInfo:()=>NX,startForAxis:()=>mT,startIndicesWithElidedDims:()=>pT,stopForAxis:()=>dT,stopIndicesWithElidedDims:()=>cT,stridesForAxis:()=>lT,stridesWithElidedDims:()=>aT});var uS=-2,yX=-1;function bX(r,t,e){let o=r.shape.length;$(o===t.length,()=>`Error in slice${o}D: Length of begin ${t} must match the rank of the array (${o}).`),$(o===e.length,()=>`Error in slice${o}D: Length of size ${e} must match the rank of the array (${o}).`);for(let n=0;n<o;++n)$(t[n]+e[n]<=r.shape[n],()=>`Error in slice${o}D: begin[${n}] + size[${n}] (${t[n]+e[n]}) would overflow input.shape[${n}] (${r.shape[n]})`)}function CX(r){let t=[],e=0;for(;r>0;)r&1&&t.push(e),r/=2,e++;return t}function wX(r,t,e){let o=[];for(let n=0;n<r.length;n++)o[n]=Math.ceil((t[n]-r[n])/e[n]);return o}function aT(r,t,e,o){let n=[...r];for(let s=n.length;s<o.length;s++)n.push(1);for(let s=0;s<e;s++)s===0?n[t]=1:(n.splice(t,0,1),n.pop());return n}function iT(r,t,e){return e<=r?e:e-(t-1)}function uT(r,t){let e=[];for(let o=0;o<r;o++)e.push(t+o);return e}function SX(r,t,e,o,n,s,a,i,p){let u=r.length,c=new Array(u),l=new Array(u),m=new Array(u);if(t.length&&e>0){let d=t[0],f=e+1;c=pT(a,d,f,o,r),l=cT(i,d,f,n,r),m=aT(s,d,f,r)}else for(let d=0;d<u;d++)c[d]=mT(a,o,s,r,d,p),l[d]=dT(i,n,s,r,d,p),m[d]=lT(s,d,p);return{begin:c,end:l,strides:m}}function pT(r,t,e,o,n){let s=[...n],a=uT(e,t);for(let i=0;i<s.length;i++)if(a.indexOf(i)>-1)s[i]=0;else{let p=iT(t,e,i),u=o[p];r&1<<p&&(u=0),s[i]=u}return s}function cT(r,t,e,o,n){let s=[...n],a=uT(e,t);for(let i=0;i<s.length;i++)if(a.indexOf(i)>-1)s[i]=Number.MAX_SAFE_INTEGER;else{let p=iT(t,e,i),u=o[p];r&1<<p&&(u=Number.MAX_SAFE_INTEGER),s[i]=u}for(let i=0;i<s.length;i++){let p=n[i];s[i]<0&&(s[i]+=p),s[i]=qp(0,s[i],n[i])}return s}function lT(r,t,e){let o=r[t];return(e&1<<t||o==null)&&(o=1),o}function mT(r,t,e,o,n,s){let a=t[n],i=e[n]||1;(r&1<<n||s&1<<n||a==null)&&(i>0?a=Number.MIN_SAFE_INTEGER:a=Number.MAX_SAFE_INTEGER);let p=o[n];return a<0&&(a+=p),a=qp(0,a,p-1),a}function dT(r,t,e,o,n,s){let a=t[n],i=e[n]||1;(r&1<<n||s&1<<n||a==null)&&(i>0?a=Number.MAX_SAFE_INTEGER:a=Number.MIN_SAFE_INTEGER);let p=o[n];return a<0&&(a+=p),i>0?a=qp(0,a,p):a=qp(-1,a,p-1),a}function IX(r,t,e){let o=e.length;for(let n=0;n<e.length;n++)if(e[n]>1){o=n;break}for(let n=o+1;n<e.length;n++)if(t[n]>0||e[n]!==r[n])return!1;return!0}function vX(r,t){let e=r.length>0?r[r.length-1]:1;for(let o=0;o<r.length-1;o++)e+=r[o]*t[o];return e}function kX(r,t,e){let o,n=r.shape.length;typeof t=="number"?o=[t,...new Array(n-1).fill(0)]:t.length<n?o=t.concat(new Array(n-t.length).fill(0)):o=t.slice(),o.forEach(a=>{$(a!==-1,()=>"slice() does not support negative begin indexing.")});let s;return e==null?s=new Array(n).fill(-1):typeof e=="number"?s=[e,...new Array(n-1).fill(-1)]:e.length<n?s=e.concat(new Array(n-e.length).fill(-1)):s=e,s=s.map((a,i)=>a>=0?a:($(a===-1,()=>`Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`),r.shape[i]-o[i])),[o,s]}function NX(r,t,e,o,n,s,a,i,p){let u;if(o==null?(u=new Array(t.length),u.fill(1)):u=o,a!=null&&a&a-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1,l={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:n,endMask:s,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:p};for(let C=0;C<l.dims;C++)c&&1<<C&i&&l.numAddAxisAfterEllipsis++,1<<C&a&&(c=!0);c||(l.ellipsisMask|=1<<l.dims,l.dims++);let m={dims:r.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};TX(l,m);let d=!0,f=!0,h=!0,g=[],x=[];for(let C=0;C<r.length;++C){if(m.strides[C]===0)throw Error(`strides[${C}] must be non-zero`);let S=!!(m.shrinkAxisMask&1<<C),k=r[C];if(k===-1){g.push(S?1:-1);continue}let _=[m.beginMask&1<<C,m.endMask&1<<C],E=[m.strides[C]>0?0:-1,m.strides[C]>0?k:k-1];if(S&&m.strides[C]<=0)throw Error("only stride 1 allowed on non-range indexing.");h=h&&m.strides[C]===1;let R=!!(m.beginMask&1<<C&&m.endMask&1<<C);if(m.beginValid&&m.endValid){if(S){let M=m.begin[C]<0?k+m.begin[C]:m.begin[C];if(m.begin[C]=M,m.end[C]=m.begin[C]+1,M<0||M>=k)throw Error(`slice index ${m.begin[C]} of dimension ${C} out of bounds.`)}else m.begin[C]=sT(m.begin[C],0,m.strides[C],k,_,E),m.end[C]=sT(m.end[C],1,m.strides[C],k,_,E);let O=m.strides[C]===1&&m.begin[C]===0&&m.end[C]===k;d=d&&O,f=f&&(C===0&&m.strides[C]===1||O)}else d=d&&m.strides[C]===1&&R,f=f&&(C===0&&m.strides[C]===1||R);let D,P=!1;if(m.beginValid&&m.endValid?(D=m.end[C]-m.begin[C],P=!0):S?(D=1,P=!0):R&&k>=0&&(m.strides[C]<0?D=-k:D=k,P=!0),P){let O;D===0||D<0!=m.strides[C]<0?O=0:O=Math.trunc(D/m.strides[C])+(D%m.strides[C]!==0?1:0),g.push(O)}else g.push(-1)}for(let C=0;C<m.finalShapeGatherIndices.length;++C){let S=m.finalShapeGatherIndices[C];S>=0?x.push(g[S]):S===uS&&x.push(1)}return{finalShapeSparse:x.filter((C,S)=>m.finalShapeGatherIndices[S]!==uS),finalShape:x,isIdentity:d,sliceDim0:f,isSimpleSlice:h,begin:m.begin,end:m.end,strides:m.strides}}function TX(r,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=r.begin!=null,t.endValid=r.end!=null,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let o=0;o<r.dims;o++)if(1<<o&r.ellipsisMask){let n=Math.min(t.dims-(r.dims-o)+1+r.numAddAxisAfterEllipsis,t.dims);for(;e<n;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=o}else if(1<<o&r.newAxisMask)t.finalShapeGatherIndices.push(uS),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);r.begin!=null&&(t.begin[e]=r.begin[o]),r.end!=null&&(t.end[e]=r.end[o]),t.strides[e]=r.strides[o],r.beginMask&1<<o&&(t.beginMask|=1<<e),r.endMask&1<<o&&(t.endMask|=1<<e),r.shrinkAxisMask&1<<o?(t.finalShapeGatherIndices.push(yX),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(o)),t.inputShapeGatherIndicesSparse[e]=o,e++}}function sT(r,t,e,o,n,s){if(n[t])return e>0?s[t]:s[t+1&1];{let a=r<0?o+r:r;return a<s[0]?s[0]:a>s[1]?s[1]:a}}var _X="4.11.0";var Pl=class{static sgd(t){return new mi(t)}static momentum(t,e,o=!1){return new up(t,e,o)}static rmsprop(t,e=.9,o=0,n=null,s=!1){return new pp(t,e,o,n,s)}static adam(t=.001,e=.9,o=.999,n=null){return new ap(t,e,o,n)}static adadelta(t=.001,e=.95,o=null){return new np(t,e,o)}static adamax(t=.002,e=.9,o=.999,n=null,s=0){return new ip(t,e,o,n,s)}static adagrad(t,e=.1){return new sp(t,e)}};var TGe=Pl;var $X=(()=>typeof requestAnimationFrame!="undefined"?requestAnimationFrame:typeof setImmediate!="undefined"?setImmediate:r=>r())();function pS(){return new Promise(r=>$X(()=>r()))}var w={};qe(w,{ERF_A1:()=>KX,ERF_A2:()=>qX,ERF_A3:()=>jX,ERF_A4:()=>XX,ERF_A5:()=>YX,ERF_P:()=>HX,PARALLELIZE_THRESHOLD:()=>uf,RowPartitionType:()=>Pa,SELU_SCALE:()=>GX,SELU_SCALEALPHA:()=>UX,applyActivation:()=>rp,assertAndGetBroadcastShape:()=>rt,assertAxesAreInnerMostDims:()=>tK,assertParamsConsistent:()=>EX,assignToTypedArray:()=>r5,axesAreInnerMostDims:()=>Bw,calculateShapes:()=>V1,checkEinsumDimSizes:()=>u5,checkPadOnDimRoundingMode:()=>Bt,combineLocations:()=>x2,combineRaggedTensorToTensorShapes:()=>DX,complexWithEvenIndex:()=>JX,complexWithOddIndex:()=>e5,computeConv2DInfo:()=>Hu,computeConv3DInfo:()=>Mk,computeDefaultPad:()=>Lw,computeDilation2DInfo:()=>J4,computeOptimalWindowSize:()=>OX,computeOutAndReduceShapes:()=>eK,computeOutShape:()=>RX,computePool2DInfo:()=>Mw,computePool3DInfo:()=>eH,convertConv2DDataFormat:()=>Lk,decodeEinsumEquation:()=>a5,eitherStridesOrDilationsAreOne:()=>xr,expandShapeToKeepDim:()=>ii,exponent:()=>n5,exponents:()=>o5,fromStringArrayToUint8:()=>$5,fromUint8ToStringArray:()=>_5,getAxesPermutation:()=>rK,getBroadcastDims:()=>m2,getComplexWithIndex:()=>t5,getEinsumComputePath:()=>p5,getEinsumPermutation:()=>i5,getFusedBiasGradient:()=>tp,getFusedDyActivation:()=>ep,getImageCenter:()=>MX,getInnerMostAxes:()=>nK,getPermuted:()=>BX,getRaggedRank:()=>FX,getReductionAxes:()=>yd,getReshaped:()=>LX,getReshapedPermuted:()=>zX,getRowPartitionTypesHelper:()=>AX,getSliceBeginCoords:()=>VX,getSliceSize:()=>WX,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>d5,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>f5,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>h5,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>y5,getSparseReshapeInputOutputMismatchErrorMessage:()=>C5,getSparseReshapeInputOutputMultipleErrorMessage:()=>b5,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>g5,getSparseReshapeNegativeOutputDimErrorMessage:()=>x5,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>v5,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>w5,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>S5,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>I5,getUndoAxesPermutation:()=>oK,isIdentityPermutation:()=>c5,log:()=>jG,mergeRealAndImagArrays:()=>QX,prepareAndValidate:()=>nT,prepareSplitSize:()=>m5,segment_util:()=>lS,shouldFuse:()=>op,slice_util:()=>ct,splitRealAndImagArrays:()=>ZX,stridesOrDilationsArePositive:()=>Ta,tupleValuesAreOne:()=>Gu,upcastType:()=>dt,validateDefaultValueShape:()=>PX,validateInput:()=>xc,validateUpdateShape:()=>Yw,warn:()=>Ia});function EX(r,t){let e=r[0].length;r.forEach((n,s)=>{$(n.length===e,()=>`Error in concat${e}D: rank of tensors[${s}] must be the same as the rank of the rest (${e})`)}),$(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);let o=r[0];r.forEach((n,s)=>{for(let a=0;a<e;a++)$(a===t||n[a]===o[a],()=>`Error in concat${e}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`)})}function RX(r,t){let e=r[0].slice();for(let o=1;o<r.length;o++)e[t]+=r[o][t];return e}var Pa;(function(r){r[r.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",r[r.VALUE_ROWIDS=1]="VALUE_ROWIDS",r[r.ROW_LENGTHS=2]="ROW_LENGTHS",r[r.ROW_SPLITS=3]="ROW_SPLITS",r[r.ROW_LIMITS=4]="ROW_LIMITS",r[r.ROW_STARTS=5]="ROW_STARTS"})(Pa||(Pa={}));function DX(r,t,e){let o=new Array;if(e==null&&t==null)return o;if(t==null)for(;o.length<r+e.length;)o.push(-1);else o=t.slice();if(e==null)return o;if(r+e.length!==o.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${r+e.length}, but shape.rank = ${o.length}`);for(let n=1;n<e.length;++n){let s=e[n],a=o[o.length-e.length+n],i=o[a];if(s>=0)if(i>=0){if(i!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${n+r}] = ${s} but shape[${n+r}] = ${i}`)}else o[a]=s}return o}function AX(r){let t={FIRST_DIM_SIZE:Pa.FIRST_DIM_SIZE,VALUE_ROWIDS:Pa.VALUE_ROWIDS,ROW_LENGTHS:Pa.ROW_LENGTHS,ROW_SPLITS:Pa.ROW_SPLITS,ROW_LIMITS:Pa.ROW_LIMITS,ROW_STARTS:Pa.ROW_STARTS},e=[];for(let o of r)if(o in t)e.push(t[o]);else break;return e}function FX(r){return r.length===0?0:r[0]===Pa.FIRST_DIM_SIZE?r.length-1:r.length}function PX(r,t){if(r==null||t==null)return;let e=r.length,o=t.length;if(e>=o)throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${o})`);for(let n=0;n<Math.min(e,o-1);++n){let s=r[n],a=t[n+1];if(s>=0&&a>=0&&s!==1&&s!==a)throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${n-r.length}] = ${s} but ragged tensor input.flatValues.shape[${n-r.length}] = ${a}`)}}var uf=30;function OX(r){return r<=uf?r:Xp(r,Math.floor(Math.sqrt(r)))}function MX(r,t,e){let o=e*(typeof r=="number"?r:r[0]),n=t*(typeof r=="number"?r:r[1]);return[o,n]}function LX(r,t,e,o=!0){let n=[];if(o)n=n.concat(t.slice(0)),n.push(r[0]/e),n=n.concat(r.slice(1));else{n=n.concat(r[0]);let s=t.length;for(let a=0;a<s;++a)n=n.concat([r[a+1]/t[a],t[a]]);n=n.concat(r.slice(s+1))}return n}function BX(r,t,e=!0){let o=[];if(e){o.push(t);for(let n=t+1;n<r;++n)n<=2*t?(o.push(n),o.push(n-(t+1))):o.push(n)}else{let n=[],s=[];for(let a=1;a<r;++a)a>=t*2+1||a%2===1?s.push(a):n.push(a);o.push(...n),o.push(0),o.push(...s)}return o}function zX(r,t,e,o=!0){let n=[];o?n.push(r[0]/e):n.push(r[0]*e);for(let s=1;s<r.length;++s)s<=t.length?o?n.push(t[s-1]*r[s]):n.push(r[s]/t[s-1]):n.push(r[s]);return n}function VX(r,t){let e=[0];for(let o=0;o<t;++o)e.push(r[o][0]);return e}function WX(r,t,e){let o=r.slice(0,1);for(let n=0;n<e;++n)o.push(r[n+1]-t[n][0]-t[n][1]);return o}var UX=1.7580993408473768,GX=1.0507009873554805;var HX=.3275911,KX=.254829592,qX=-.284496736,jX=1.421413741,XX=-1.453152027,YX=1.061405429;function QX(r,t){if(r.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${t.length}.`);let e=new Float32Array(r.length*2);for(let o=0;o<e.length;o+=2)e[o]=r[o/2],e[o+1]=t[o/2];return e}function ZX(r){let t=new Float32Array(r.length/2),e=new Float32Array(r.length/2);for(let o=0;o<r.length;o+=2)t[o/2]=r[o],e[o/2]=r[o+1];return{real:t,imag:e}}function JX(r){let t=Math.ceil(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=0;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function e5(r){let t=Math.floor(r.length/4),e=new Float32Array(t),o=new Float32Array(t);for(let n=2;n<r.length;n+=4)e[Math.floor(n/4)]=r[n],o[Math.floor(n/4)]=r[n+1];return{real:e,imag:o}}function t5(r,t){let e=r[t*2],o=r[t*2+1];return{real:e,imag:o}}function r5(r,t,e,o){r[o*2]=t,r[o*2+1]=e}function o5(r,t){let e=new Float32Array(r/2),o=new Float32Array(r/2);for(let n=0;n<Math.ceil(r/2);n++){let s=(t?2:-2)*Math.PI*(n/r);e[n]=Math.cos(s),o[n]=Math.sin(s)}return{real:e,imag:o}}function n5(r,t,e){let o=(e?2:-2)*Math.PI*(r/t),n=Math.cos(o),s=Math.sin(o);return{real:n,imag:s}}var cS="->",s5=/->/g,fT=",",hT="...";function a5(r,t){r=r.replace(/\s/g,"");let e=(r.length-r.replace(s5,"").length)/cS.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${cS}").`);let[o,n]=r.split(cS);$(o.indexOf(hT)===-1,()=>`The ellipsis notation ("${hT}") is not supported yet.`);let s=o.split(fT),a=s.length;if(t!==a)throw new Error(`Expected ${a} input tensors, received ${t}`);if(a>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");let i=[];for(let m=0;m<n.length;++m){let d=n[m];if(!s.some(f=>f.indexOf(d)!==-1))throw new Error(`Output subscripts contain the label ${d} not present in the input subscripts.`);i.indexOf(d)===-1&&i.push(d)}for(let m=0;m<o.length;++m){let d=o[m];i.indexOf(d)===-1&&d!==fT&&i.push(d)}let p=new Array(s.length);for(let m=0;m<a;++m){if(new Set(s[m].split("")).size!==s[m].length)throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);p[m]=[];for(let d=0;d<s[m].length;++d)p[m].push(i.indexOf(s[m][d]))}let u=i.length,c=n.length,l=[];for(let m=c;m<u;++m)l.push(m);return{allDims:i,summedDims:l,idDims:p}}function i5(r,t){let e=new Array(r);e.fill(-1);for(let n=0;n<t.length;++n)e[t[n]]=n;let o=[];for(let n=0;n<r;++n)e[n]===-1&&o.push(n);return e=e.filter(n=>n!==-1),{permutationIndices:e,expandDims:o}}function u5(r,t,e){let o=new Array(r);for(let n=0;n<e.length;++n){let s=e[n].shape;for(let a=0;a<t[n].length;++a)o[t[n][a]]===void 0?o[t[n][a]]=s[a]:$(o[t[n][a]]===s[a],()=>`Expected dimension ${o[t[n][a]]} at axis ${a} of input shaped ${JSON.stringify(s)}, but got dimension ${s[a]}`)}}function p5(r,t){let e=r,o=[],n=0;r.length===0&&e.push(-1),n=r.length+1;for(let a=0;a<n;++a)o.push([]);let s=[];for(let a=0;a<e.length;++a){let i=e[a],p=l5(t,i);for(let u of p)s.indexOf(u)===-1&&(o[a].push(u),s.push(u))}return{path:e,steps:o}}function c5(r){return r.every((t,e)=>t===e)}function l5(r,t){let e=[];for(let o=0;o<r.length;++o)(r[o].length===0||r[o].indexOf(t)!==-1||t===-1)&&e.push(o);return e}function m5(r,t,e=0){let o=[];if(typeof t=="number")$(r.shape[e]%t===0,()=>"Number of splits must evenly divide the axis."),o=new Array(t).fill(r.shape[e]/t);else{let n=t.reduce((a,i)=>(i===-1&&(a+=1),a),0);$(n<=1,()=>"There should be only one negative value in split array.");let s=t.indexOf(-1);if(s!==-1){let a=t.reduce((i,p)=>p>0?i+p:i);t[s]=r.shape[e]-a}$(r.shape[e]===t.reduce((a,i)=>a+i),()=>"The sum of sizes must match the size of the axis dimension."),o=t}return o}function d5(r){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`}function f5(r,t){return`indices(${r}, 0) is invalid: ${t} < 0`}function h5(r,t,e){return`indices(${r}, 0) is invalid: ${t} >= ${e}`}function g5(r,t){return`only one output dimension may be -1, not both ${r} and ${t}`}function x5(r,t){return`size ${r} must be non-negative, not ${t}`}function y5(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function b5(r,t){let e=He(r),o=He(t);return`Input to reshape is a SparseTensor with ${e}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${t}`}function C5(r,t){let e=He(r),o=He(t);return`Input to reshape is a tensor with ${e} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${t}`}function w5(){return"segment ids must be >= 0"}function S5(){return"segment ids are not increasing"}function I5(r,t){return`Segment id ${r} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function v5(r,t,e){return`Bad: indices[${r}] == ${t} out of range [0, ${e})`}var lS={};qe(lS,{collectGatherOpShapeInfo:()=>T5,computeOutShape:()=>N5,segOpComputeOptimalWindowSize:()=>k5});function k5(r,t){let e=!1,o;for(r<=uf?(o=r,e=!0):o=Xp(r,Math.floor(Math.sqrt(r)));!e;)o>t||o===r?e=!0:o=Xp(r,o+1);return o}function N5(r,t,e){let o=[],n=r.length;for(let s=0;s<n;s++)s!==t?o.push(r[s]):o.push(e);return o}function T5(r,t,e,o){let n=t.shape.length,s=r.shape.length;if(o!==0&&(o<-n||o>n))throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);if(o<0&&(o+=n),o>s)throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);if(e<o)throw new Error(`batchDims (${o}) must be less than or equal to axis (${e}).`);for(let l=0;l<o;++l)if(r.shape[l]!==t.shape[l])throw new Error(`x.shape[${l}]: ${r.shape[l]} should be equal to indices.shape[${l}]: ${t.shape[l]}.`);let a=r.shape[e],i=[],p=1,u=1,c=1;for(let l=0;l<o;++l)i.push(r.shape[l]),p*=r.shape[l];for(let l=o;l<e;l++)i.push(r.shape[l]),u*=r.shape[l];for(let l=o;l<n;l++)i.push(t.shape[l]);for(let l=e+1;l<s;l++)i.push(r.shape[l]),c*=r.shape[l];return{batchSize:p,sliceSize:c,outerSize:u,dimSize:a,outputShape:i}}function _5(r){try{return r.map(t=>sc(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function $5(r){return r.map(t=>tu(t))}var Wt={};qe(Wt,{nonMaxSuppressionV3Impl:()=>ef,nonMaxSuppressionV4Impl:()=>tf,nonMaxSuppressionV5Impl:()=>rf,whereImpl:()=>Yd});UN();var E5=A();E5.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,r=>{r&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var ho;(function(r){r[r.DT_INVALID=0]="DT_INVALID",r[r.DT_FLOAT=1]="DT_FLOAT",r[r.DT_DOUBLE=2]="DT_DOUBLE",r[r.DT_INT32=3]="DT_INT32",r[r.DT_UINT8=4]="DT_UINT8",r[r.DT_INT16=5]="DT_INT16",r[r.DT_INT8=6]="DT_INT8",r[r.DT_STRING=7]="DT_STRING",r[r.DT_COMPLEX64=8]="DT_COMPLEX64",r[r.DT_INT64=9]="DT_INT64",r[r.DT_BOOL=10]="DT_BOOL",r[r.DT_QINT8=11]="DT_QINT8",r[r.DT_QUINT8=12]="DT_QUINT8",r[r.DT_QINT32=13]="DT_QINT32",r[r.DT_BFLOAT16=14]="DT_BFLOAT16",r[r.DT_QINT16=15]="DT_QINT16",r[r.DT_QUINT16=16]="DT_QUINT16",r[r.DT_UINT16=17]="DT_UINT16",r[r.DT_COMPLEX128=18]="DT_COMPLEX128",r[r.DT_HALF=19]="DT_HALF",r[r.DT_RESOURCE=20]="DT_RESOURCE",r[r.DT_VARIANT=21]="DT_VARIANT",r[r.DT_UINT32=22]="DT_UINT32",r[r.DT_UINT64=23]="DT_UINT64",r[r.DT_FLOAT_REF=101]="DT_FLOAT_REF",r[r.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",r[r.DT_INT32_REF=103]="DT_INT32_REF",r[r.DT_UINT8_REF=104]="DT_UINT8_REF",r[r.DT_INT16_REF=105]="DT_INT16_REF",r[r.DT_INT8_REF=106]="DT_INT8_REF",r[r.DT_STRING_REF=107]="DT_STRING_REF",r[r.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",r[r.DT_INT64_REF=109]="DT_INT64_REF",r[r.DT_BOOL_REF=110]="DT_BOOL_REF",r[r.DT_QINT8_REF=111]="DT_QINT8_REF",r[r.DT_QUINT8_REF=112]="DT_QUINT8_REF",r[r.DT_QINT32_REF=113]="DT_QINT32_REF",r[r.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",r[r.DT_QINT16_REF=115]="DT_QINT16_REF",r[r.DT_QUINT16_REF=116]="DT_QUINT16_REF",r[r.DT_UINT16_REF=117]="DT_UINT16_REF",r[r.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",r[r.DT_HALF_REF=119]="DT_HALF_REF",r[r.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",r[r.DT_VARIANT_REF=121]="DT_VARIANT_REF",r[r.DT_UINT32_REF=122]="DT_UINT32_REF",r[r.DT_UINT64_REF=123]="DT_UINT64_REF"})(ho||(ho={}));var gT;(function(r){let t;(function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"})(t=r.CheckpointFormatVersion||(r.CheckpointFormatVersion={}))})(gT||(gT={}));var dS={};function D5(r,t){let e={tfOpName:r,category:"custom",inputs:[],attrs:[],customExecutor:t};dS[r]=e}function pf(r){return dS[r]}function A5(r){delete dS[r]}function I(r,t,e,o,n){let s=t.inputParams[r];if(s&&s.inputIndexStart!==void 0){let i=s.inputIndexStart,p=s.inputIndexEnd===0?void 0:s.inputIndexEnd===void 0?i+1:s.inputIndexEnd,u=i<0?t.inputNames.length+i:i;if(s.type==="tensor")return zt(t.inputNames[u],e,o,n);if(s.type==="tensors"){let m=t.inputs.slice(i,p);return t.inputNames.slice(i,p).filter((f,h)=>{var g;return((g=m[h])===null||g===void 0?void 0:g.op)!=="NoOp"}).map(f=>zt(f,e,o,n))}let c=zt(t.inputNames[u],e,o,n),l=c.dataSync();return s.type==="number"?l[0]:y.toNestedArray(c.shape,l)}let a=t.attrParams[r];return a&&a.value}function zt(r,t,e,o){let[n,s]=Tr(r,e);if(o!=null){let i=o.getHashTableHandleByName(n);if(i!=null)return i}let a=e.currentContextIds.find(i=>!!t[cf(n,i)]);return a!==void 0?t[cf(n,a)][s]:void 0}function fS(r,t,e){return t[cf(r,e.currentContextId)]}function Ls(r,t){let[e,o,n]=Tr(r,t);return[cf(e,t&&t.currentContextId),o,n]}function cf(r,t){return t?`${r}-${t}`:r}function Tr(r,t){if(r==="")return["",0,void 0];let e=t!=null&&t.parseNodeNameCache!=null;if(e){let s=t.parseNodeNameCache.get(r);if(s!=null)return s}let o=r.split(":"),n;if(o.length===1)n=[r,0,void 0];else{let s=o[0],a=o.length===3?o[1]:void 0,i=Number(o[o.length-1]);n=[s,i,a]}return e&&t.parseNodeNameCache.set(r,n),n}function Ol(r,t,e){let o=I("pad",r,t,e);if(o==="explicit"){o=I("explicitPaddings",r,t,e);let n=[[0,0],[0,0],[0,0],[0,0]];for(let s=0;s<4;s++)n[s][0]=o[s*2],n[s][1]=o[s*2+1];return n}return o}function Bs(r){return r.kept?r:Ur(r)}var hS={};qe(hS,{json:()=>F5});var F5=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var gS={};qe(gS,{json:()=>P5});var P5=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var xS={};qe(xS,{json:()=>O5});var O5=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var yS={};qe(yS,{json:()=>M5});var M5=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var bS={};qe(bS,{json:()=>L5});var L5=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var CS={};qe(CS,{json:()=>B5});var B5=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var wS={};qe(wS,{json:()=>z5});var z5=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var SS={};qe(SS,{json:()=>V5});var V5=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var IS={};qe(IS,{json:()=>W5});var W5=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var vS={};qe(vS,{json:()=>U5});var U5=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var kS={};qe(kS,{json:()=>G5});var G5=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var NS={};qe(NS,{json:()=>H5});var H5=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var TS={};qe(TS,{json:()=>K5});var K5=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var _S={};qe(_S,{json:()=>q5});var q5=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var $S={};qe($S,{json:()=>j5});var j5=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var ES={};qe(ES,{json:()=>X5});var X5=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var RS={};qe(RS,{json:()=>Y5});var Y5=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var DS={};qe(DS,{json:()=>Q5});var Q5=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var AS={};qe(AS,{json:()=>Z5});var Z5=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var Ml=class{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let t=[hS,gS,xS,yS,bS,CS,wS,SS,IS,vS,kS,NS,TS,_S,$S,ES,RS,DS,AS],e=[].concat(...t.map(o=>o.json));this.opMappers=e.reduce((o,n)=>(o[n.tfOpName]=n,o),{})}transformGraph(t,e={}){let o=t.node,n=[],s=[],a=[],i=o.reduce((h,g)=>(h[g.name]=this.mapNode(g),g.op.startsWith("Placeholder")?n.push(h[g.name]):g.op==="Const"?s.push(h[g.name]):(g.input==null||g.input.length===0)&&a.push(h[g.name]),h),{}),p=[],u=[],c={},l={};e!=null&&(c=this.mapSignatureEntries(e.inputs),l=this.mapSignatureEntries(e.outputs));let m=Object.keys(i);m.forEach(h=>{let g=i[h];g.inputNames.forEach((x,b)=>{let[C,,S]=Ls(x),k=i[C];if(k.outputs!=null){let _=k.outputs.indexOf(S);if(_!==-1){let E=`${C}:${_}`;g.inputNames[b]=E}}g.inputs.push(k),k.children.push(g)})}),Object.keys(l).length===0?m.forEach(h=>{let g=i[h];g.children.length===0&&u.push(g)}):Object.keys(l).forEach(h=>{let[g]=Ls(h),x=i[g];x!=null&&(x.signatureKey=l[h],u.push(x))}),Object.keys(c).length>0?Object.keys(c).forEach(h=>{let[g]=Ls(h),x=i[g];x&&(x.signatureKey=c[h],p.push(x))}):p=n;let d={};t.library!=null&&t.library.function!=null&&(d=t.library.function.reduce((h,g)=>(h[g.signature.name]=this.mapFunction(g),h),{}));let f={nodes:i,inputs:p,outputs:u,weights:s,placeholders:n,signature:e,functions:d};return a.length>0&&(f.initNodes=a),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,o)=>(e[t[o].name]=o,e),{})}mapNode(t){let e=pf(t.op)||this.opMappers[t.op]||{};t.attr==null&&(t.attr={});let o={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(n=>n.startsWith("^")?n.slice(1):n),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return e.inputs!=null&&(o.inputParams=e.inputs.reduce((n,s)=>(n[s.name]={type:s.type,inputIndexStart:s.start,inputIndexEnd:s.end},n),{})),e.attrs!=null&&(o.attrParams=e.attrs.reduce((n,s)=>{let a=s.type,i;switch(s.type){case"string":i=lf(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=lf(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"string[]":i=yf(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=yf(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number":i=df(t.attr,s.tfName,s.defaultValue||0),i===void 0&&s.tfDeprecatedName&&(i=df(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"number[]":i=xf(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=xf(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool":i=mf(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=mf(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"bool[]":i=Cf(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=Cf(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape":i=gf(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=gf(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"shape[]":i=bf(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=bf(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype":i=ff(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=ff(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"dtype[]":i=hf(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=hf(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"func":i=xT(t.attr,s.tfName,s.defaultValue),i===void 0&&s.tfDeprecatedName&&(i=xT(t.attr,s.tfDeprecatedName,s.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${s.type} for op: ${t.op}`)}return n[s.name]={value:i,type:a},n},{})),o}mapFunction(t){let e=t.nodeDef,o=[],n=[],s={};e!=null&&(s=e.reduce((l,m)=>(l[m.name]=this.mapNode(m),m.op==="Const"&&n.push(l[m.name]),l),{}));let a=[],i=[];t.signature.inputArg.forEach(l=>{let[m]=Ls(l.name),d={name:m,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:FS(l.type),type:"dtype"}},children:[]};d.signatureKey=l.name,a.push(d),s[m]=d}),Object.keys(s).forEach(l=>{let m=s[l];m.inputNames.forEach((d,f)=>{let[h,,g]=Ls(d),x=s[h];if(x.outputs!=null){let b=x.outputs.indexOf(g);if(b!==-1){let C=`${h}:${b}`;m.inputNames[f]=C}}m.inputs.push(x),x.children.push(m)})});let u=t.ret;t.signature.outputArg.forEach(l=>{let[m,d]=Ls(u[l.name]),f=s[m];f!=null&&(f.defaultOutput=d,i.push(f))});let c=this.mapArgsToSignature(t);return{nodes:s,inputs:a,outputs:i,weights:n,placeholders:o,signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o),e),{}),outputs:t.signature.outputArg.reduce((e,o)=>(e[o.name]=this.mapArgToTensorInfo(o,t.ret),e),{})}}mapArgToTensorInfo(t,e){let o=t.name;return e!=null&&(o=e[o]),{name:o,dtype:t.type}}};function J5(r){let t=A().global;if(typeof t.atob!="undefined")return t.atob(r);if(typeof Buffer!="undefined")return new Buffer(r,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}function yT(r,t){let e=Array.isArray(r)?String.fromCharCode.apply(null,r):J5(r);return t?e:e.toLowerCase()}function lf(r,t,e,o=!1){let n=r[t];return n!=null?yT(n.s,o):e}function mf(r,t,e){let o=r[t];return o?o.b:e}function df(r,t,e){let o=r[t]||{},n=o.i!=null?o.i:o.f!=null?o.f:e;return typeof n=="number"?n:parseInt(n,10)}function FS(r){switch(typeof r=="string"&&(r=ho[r]),r){case ho.DT_FLOAT:case ho.DT_HALF:return"float32";case ho.DT_INT32:case ho.DT_INT64:case ho.DT_INT8:case ho.DT_UINT8:return"int32";case ho.DT_BOOL:return"bool";case ho.DT_DOUBLE:return"float32";case ho.DT_STRING:return"string";default:return null}}function xT(r,t,e){let o=r[t];return o&&o.func?o.func.name:e}function ff(r,t,e){let o=r[t];return o&&o.type?FS(o.type):e}function hf(r,t,e){let o=r[t];return o&&o.list&&o.list.type?o.list.type.map(n=>FS(n)):e}function bT(r){if(!r.unknownRank)return r.dim!=null?r.dim.map(t=>typeof t.size=="number"?t.size:parseInt(t.size,10)):[]}function gf(r,t,e){let o=r[t];return o&&o.shape?bT(o.shape):e}function xf(r,t,e){let o=r[t];return o?((o.list.f&&o.list.f.length?o.list.f:o.list.i)||[]).map(n=>typeof n=="number"?n:parseInt(n,10)):e}function yf(r,t,e,o=!1){let n=r[t];return n&&n.list&&n.list.s?n.list.s.map(s=>yT(s,o)):e}function bf(r,t,e){let o=r[t];return o&&o.list&&o.list.shape?o.list.shape.map(n=>bT(n)):e}function Cf(r,t,e){let o=r[t];return o&&o.list&&o.list.b?o.list.b:e}var wf=class{constructor(t,e,o){this.node=t,this.tensorMap=e,this.context=o,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(n=>this.getInput(n)),t.rawAttrs!=null&&(this.attrs=Object.keys(t.rawAttrs).reduce((n,s)=>(n[s]=this.getAttr(s),n),{}))}getInput(t){return zt(t,this.tensorMap,this.context)}getAttr(t,e){let o=this.node.rawAttrs[t];if(o.tensor!=null)return zt(t,this.tensorMap,this.context);if(o.i!=null||o.f!=null)return df(this.node.rawAttrs,t,e);if(o.s!=null)return lf(this.node.rawAttrs,t,e);if(o.b!=null)return mf(this.node.rawAttrs,t,e);if(o.shape!=null)return gf(this.node.rawAttrs,t,e);if(o.type!=null)return ff(this.node.rawAttrs,t,e);if(o.list!=null){if(o.list.i!=null||o.list.f!=null)return xf(this.node.rawAttrs,t,e);if(o.list.s!=null)return yf(this.node.rawAttrs,t,e);if(o.list.shape!=null)return bf(this.node.rawAttrs,t,e);if(o.list.b!=null)return Cf(this.node.rawAttrs,t,e);if(o.list.type!=null)return hf(this.node.rawAttrs,t,e)}return e}};var Je={};qe(Je,{OP_SCOPE_SUFFIX:()=>kw,abs:()=>Jt,acos:()=>kk,acosh:()=>Nk,add:()=>Ce,addN:()=>Tk,all:()=>_k,any:()=>$k,argMax:()=>Ek,argMin:()=>Rk,asin:()=>Dk,asinh:()=>Ak,atan:()=>Fk,atan2:()=>Pk,atanh:()=>Ok,avgPool:()=>fd,avgPool3d:()=>Bk,basicLSTMCell:()=>zk,batchNorm:()=>au,batchNorm2d:()=>Wk,batchNorm3d:()=>Uk,batchNorm4d:()=>Gk,batchToSpaceND:()=>hd,bincount:()=>gd,bitwiseAnd:()=>Hk,booleanMaskAsync:()=>E6,broadcastArgs:()=>Kk,broadcastTo:()=>iu,buffer:()=>me,cast:()=>We,ceil:()=>qk,clipByValue:()=>jk,clone:()=>Ur,complex:()=>Er,concat:()=>bt,concat1d:()=>Xk,concat2d:()=>Yk,concat3d:()=>Qk,concat4d:()=>Zk,conv1d:()=>Jk,conv2d:()=>uu,conv2dTranspose:()=>e2,conv3d:()=>t2,conv3dTranspose:()=>o2,cos:()=>n2,cosh:()=>s2,cosineWindow:()=>Rl,cumprod:()=>a2,cumsum:()=>i2,denseBincount:()=>u2,depthToSpace:()=>p2,depthwiseConv2d:()=>lc,diag:()=>c2,dilation2d:()=>l2,div:()=>je,divNoNan:()=>d2,dot:()=>f2,dropout:()=>W6,einsum:()=>pu,elu:()=>Cd,enclosingPowerOfTwo:()=>Qw,ensureShape:()=>h2,equal:()=>bd,erf:()=>g2,euclideanNorm:()=>b2,exp:()=>$o,expandDims:()=>Ms,expm1:()=>C2,eye:()=>wd,fft:()=>fc,fill:()=>Ea,floor:()=>Sd,floorDiv:()=>dd,fused:()=>Zw,gather:()=>Id,gatherND:()=>z6,greater:()=>qu,greaterEqual:()=>vd,ifft:()=>Ju,imag:()=>lu,image:()=>Kj,inTopKAsync:()=>G6,irfft:()=>Kd,isFinite:()=>w2,isInf:()=>S2,isNaN:()=>I2,leakyRelu:()=>kd,less:()=>_l,lessEqual:()=>mc,linalg:()=>qj,linspace:()=>v2,localResponseNormalization:()=>k2,log:()=>pi,log1p:()=>Nd,logSigmoid:()=>N2,logSoftmax:()=>T2,logSumExp:()=>$d,logicalAnd:()=>ju,logicalNot:()=>Ed,logicalOr:()=>Rd,logicalXor:()=>_2,losses:()=>jj,lowerBound:()=>$2,matMul:()=>Ze,max:()=>Ra,maxPool:()=>Ad,maxPool3d:()=>E2,maxPoolWithArgmax:()=>R2,maximum:()=>Fd,mean:()=>Xu,meshgrid:()=>D2,min:()=>Tl,minimum:()=>Yu,mirrorPad:()=>A2,mod:()=>F2,moments:()=>P2,movingAverage:()=>A6,mul:()=>se,multiRNNCell:()=>O2,multinomial:()=>M2,neg:()=>cr,norm:()=>Ku,notEqual:()=>Pd,oneHot:()=>El,ones:()=>Da,onesLike:()=>L2,op:()=>N,outerProduct:()=>B2,pad:()=>Aa,pad1d:()=>z2,pad2d:()=>V2,pad3d:()=>W2,pad4d:()=>U2,pool:()=>G2,pow:()=>ui,prelu:()=>Md,print:()=>md,prod:()=>H2,raggedGather:()=>K2,raggedRange:()=>q2,raggedTensorToTensor:()=>j2,rand:()=>X2,randomGamma:()=>g1,randomNormal:()=>Ud,randomStandardNormal:()=>x1,randomUniform:()=>dc,randomUniformInt:()=>y1,range:()=>mu,real:()=>ci,reciprocal:()=>b1,relu:()=>du,relu6:()=>Gd,reshape:()=>W,reverse:()=>mo,reverse1d:()=>C1,reverse2d:()=>w1,reverse3d:()=>S1,reverse4d:()=>I1,rfft:()=>hc,round:()=>Hd,rsqrt:()=>v1,scalar:()=>ke,scatterND:()=>P6,searchSorted:()=>$l,selu:()=>k1,separableConv2d:()=>N1,setdiff1dAsync:()=>T1,sigmoid:()=>$a,sign:()=>_1,signal:()=>Hj,sin:()=>$1,sinh:()=>E1,slice:()=>Xe,slice1d:()=>R1,slice2d:()=>D1,slice3d:()=>A1,slice4d:()=>F1,softmax:()=>P1,softplus:()=>_d,spaceToBatchND:()=>Od,sparse:()=>Xj,sparseToDense:()=>L6,spectral:()=>Gj,split:()=>li,sqrt:()=>Dr,square:()=>er,squaredDifference:()=>qd,squeeze:()=>gc,stack:()=>kr,step:()=>jd,stridedSlice:()=>O1,string:()=>Yj,sub:()=>Te,sum:()=>ot,tan:()=>M1,tanh:()=>Nl,tensor:()=>ur,tensor1d:()=>tr,tensor2d:()=>fu,tensor3d:()=>Xd,tensor4d:()=>L1,tensor5d:()=>B1,tensor6d:()=>z1,tensorScatterUpdate:()=>W1,tile:()=>cu,topk:()=>U1,transpose:()=>yc,truncatedNormal:()=>G1,unique:()=>H1,unsortedSegmentSum:()=>K1,unstack:()=>fo,upperBound:()=>q1,variable:()=>j1,where:()=>lo,whereAsync:()=>Qd,zeros:()=>Gr,zerosLike:()=>Ht});var CT=(r,t,e,o=Je)=>{switch(r.op){case"BiasAdd":case"AddV2":case"Add":return[o.add(I("a",r,t,e),I("b",r,t,e))];case"AddN":return[o.addN(I("tensors",r,t,e))];case"FloorMod":case"Mod":return[o.mod(I("a",r,t,e),I("b",r,t,e))];case"Mul":return[o.mul(I("a",r,t,e),I("b",r,t,e))];case"RealDiv":case"Div":return[o.div(I("a",r,t,e),I("b",r,t,e))];case"DivNoNan":return[o.divNoNan(I("a",r,t,e),I("b",r,t,e))];case"FloorDiv":return[o.floorDiv(I("a",r,t,e),I("b",r,t,e))];case"Sub":return[o.sub(I("a",r,t,e),I("b",r,t,e))];case"Minimum":return[o.minimum(I("a",r,t,e),I("b",r,t,e))];case"Maximum":return[o.maximum(I("a",r,t,e),I("b",r,t,e))];case"Pow":return[o.pow(I("a",r,t,e),I("b",r,t,e))];case"SquaredDifference":return[o.squaredDifference(I("a",r,t,e),I("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var wT=(r,t,e,o=Je)=>{switch(r.op){case"Abs":case"ComplexAbs":return[o.abs(I("x",r,t,e))];case"Acos":return[o.acos(I("x",r,t,e))];case"Acosh":return[o.acosh(I("x",r,t,e))];case"Asin":return[o.asin(I("x",r,t,e))];case"Asinh":return[o.asinh(I("x",r,t,e))];case"Atan":return[o.atan(I("x",r,t,e))];case"Atan2":return[o.atan2(I("x",r,t,e),I("y",r,t,e))];case"Atanh":return[o.atanh(I("x",r,t,e))];case"Ceil":return[o.ceil(I("x",r,t,e))];case"Complex":return[o.complex(I("real",r,t,e),I("imag",r,t,e))];case"Cos":return[o.cos(I("x",r,t,e))];case"Cosh":return[o.cosh(I("x",r,t,e))];case"Elu":return[o.elu(I("x",r,t,e))];case"Erf":return[o.erf(I("x",r,t,e))];case"Exp":return[o.exp(I("x",r,t,e))];case"Expm1":return[o.expm1(I("x",r,t,e))];case"Floor":return[o.floor(I("x",r,t,e))];case"Log":return[o.log(I("x",r,t,e))];case"Log1p":return[o.log1p(I("x",r,t,e))];case"Imag":return[o.imag(I("x",r,t,e))];case"Neg":return[o.neg(I("x",r,t,e))];case"Reciprocal":return[o.reciprocal(I("x",r,t,e))];case"Real":return[o.real(I("x",r,t,e))];case"Relu":return[o.relu(I("x",r,t,e))];case"Round":return[o.round(I("x",r,t,e))];case"Selu":return[o.selu(I("x",r,t,e))];case"Sigmoid":return[o.sigmoid(I("x",r,t,e))];case"Sin":return[o.sin(I("x",r,t,e))];case"Sign":return[o.sign(I("x",r,t,e))];case"Sinh":return[o.sinh(I("x",r,t,e))];case"Softplus":return[o.softplus(I("x",r,t,e))];case"Sqrt":return[o.sqrt(I("x",r,t,e))];case"Square":return[o.square(I("x",r,t,e))];case"Tanh":return[o.tanh(I("x",r,t,e))];case"Tan":return[o.tan(I("x",r,t,e))];case"ClipByValue":return[o.clipByValue(I("x",r,t,e),I("clipValueMin",r,t,e),I("clipValueMax",r,t,e))];case"Relu6":return[o.relu6(I("x",r,t,e))];case"Rsqrt":return[o.rsqrt(zt(r.inputNames[0],t,e))];case"LeakyRelu":return[o.leakyRelu(I("x",r,t,e),I("alpha",r,t,e))];case"Prelu":return[o.prelu(I("x",r,t,e),I("alpha",r,t,e))];case"IsNan":return[o.isNaN(zt(r.inputNames[0],t,e))];case"IsInf":return[o.isInf(zt(r.inputNames[0],t,e))];case"IsFinite":return[o.isFinite(zt(r.inputNames[0],t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function Hr(r,t,e=""){if(!(typeof r=="number"||typeof t=="number")){y.assert(r.length===t.length,()=>e+` Shapes ${r} and ${t} must match`);for(let o=0;o<r.length;o++){let n=r[o],s=t[o];y.assert(n<0||s<0||n===s,()=>e+` Shapes ${r} and ${t} must match`)}}}function ST(r){return!(typeof r=="number"||r.some(t=>t<0))}function bc(r,t,e){let o=Sf(r,e),n=!ST(o);if(n&&t.length===0)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);if(n&&t.forEach(s=>{o=Sf(s.shape,o)}),!ST(o))throw new Error(`Non-fully-defined elementShape: ${o}`);return o}function Sf(r,t){if(typeof r=="number")return t;if(typeof t=="number")return r;if(r.length!==t.length)throw new Error(`Incompatible ranks during merge: ${r} vs. ${t}`);let e=[];for(let o=0;o<r.length;++o){let n=r[o],s=t[o];if(n>=0&&s>=0&&n!==s)throw new Error(`Incompatible shape during merge: ${r} vs. ${t}`);e[o]=n>=0?n:s}return e}var If=class{constructor(t,e,o,n,s,a,i){this.name=t,this.dtype=e,this.maxSize=o,this.elementShape=n,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=ke(0),Rr(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);let e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);let o=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},
          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(this.size()===0&&(this.elementShape==null||this.elementShape.length===0)&&(this.elementShape=e.shape),Hr(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),o.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(o.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);o.tensor=e,Rr(e),o.written=!0,this.tensors[t]=o}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((o,n)=>this.write(o,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let n=0;n<this.size();n++)t.push(n)}if(t.length===0)return ur([],[0].concat(this.elementShape));let o=this.readMany(t);return Hr(this.elementShape,o[0].shape,"TensorArray shape mismatch: "),kr(o,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(this.size()===0)return ur([],[0].concat(this.elementShape));let e=[];for(let n=0;n<this.size();n++)e.push(n);let o=this.readMany(e);return Hr(this.elementShape,o[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`),bt(o,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let o=Math.max(...t);if(!this.dynamicSize&&o>=this.maxSize)throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);this.writeMany(t,fo(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let o=0,n=t.map(p=>(o+=p,o));if(o!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);let s=o===0?0:e.size/o,a=[];De(()=>{e=W(e,[1,o,s]);for(let p=0;p<t.length;++p){let c=[0,p===0?0:n[p-1],0],l=[1,t[p],s];a[p]=W(Xe(e,c,l),this.elementShape)}return a});let i=[];for(let p=0;p<t.length;p++)i[p]=p;this.writeMany(i,a)}};var hi=class{get id(){return this.idTensor.id}constructor(t,e,o,n=-1){this.tensors=t,this.elementShape=e,this.elementDtype=o,t!=null&&t.forEach(s=>{if(o!==s.dtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);Hr(e,s.shape,"TensorList shape mismatch: "),Rr(s)}),this.idTensor=ke(0),this.maxNumElements=n,Rr(this.idTensor)}copy(){return new hi([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(t==null||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,o=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(o!==-1&&this.tensors.length!==o)throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);Hr(t,this.elementShape,"TensorList shape mismatch: ");let n=bc(this.elementShape,this.tensors,t);return De(()=>{let s=this.tensors.map(a=>W(a,n));return kr(s,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(this.size()===0)throw new Error("Trying to pop from an empty list.");let o=bc(this.elementShape,this.tensors,t),n=this.tensors.pop();return n.kept=!1,Hr(n.shape,t,"TensorList shape mismatch: "),W(n,o)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(Hr(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Rr(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(this.maxNumElements!==-1&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);let e=new hi([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let o=0;o<Math.min(this.tensors.length,t);++o)e.tensors[o]=this.tensors[o];return e}getItem(t,e,o){if(o!==this.elementDtype)throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(this.tensors[t]==null)throw new Error(`element at index ${t} is null.`);Hr(this.tensors[t].shape,e,"TensorList shape mismatch: ");let n=bc(this.elementShape,this.tensors,e);return W(this.tensors[t],n)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||this.maxNumElements!==-1&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);Hr(this.elementShape,e.shape,"TensorList shape mismatch: "),Rr(e),this.tensors[t]!=null&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,o){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);Hr(this.elementShape,o,"TensorList shape mismatch: "),t=t.slice(0,this.size());let n=bc(this.elementShape,this.tensors,o);return t.length===0?ur([],[0].concat(n)):De(()=>{let s=t.map(a=>W(this.tensors[a],n));return kr(s,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);Hr(this.elementShape,e,"TensorList shape mismatch: ");let o=bc(this.elementShape,this.tensors,e);return this.size()===0?ur([],[0].concat(o)):De(()=>{let n=this.tensors.map(s=>W(s,o));return bt(n,0)})}};function IT(r,t,e){let o=r.dtype;if(r.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);if(r.dtype!==e)throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${e}`);let n=r.shape.slice(1);Hr(n,t,"TensorList shape mismatch: ");let s=fo(r);return new hi(s,t,o)}function vT(r,t,e,o){return new hi([],r,t,o)}function kT(r,t,e,o){if(t.length!==r.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${r.shape[0]}`);let n=Math.max(...t);if(o!=null&&o!==-1&&n>=o)throw new Error(`Max index must be < array size (${n}  vs. ${o})`);let s=new hi([],e,r.dtype,o),a=fo(r,0);return t.forEach((i,p)=>{s.setItem(i,a[p])}),s}function NT(r,t,e){let o=0,n=t.map(c=>(o+=c,o));if(o!==r.shape[0])throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);let s=r.shape.slice(1),a=Sf(s,e),i=o===0?0:r.size/o,p=De(()=>{let c=[];r=W(r,[1,o,i]);for(let l=0;l<t.length;++l){let d=[0,l===0?0:n[l-1],0],f=[1,t[l],i];c[l]=W(Xe(r,d,f),a)}return r.dispose(),c}),u=new hi([],e,r.dtype,t.length);for(let c=0;c<p.length;c++)u.setItem(c,p[c]);return u}var TT=async(r,t,e)=>{switch(r.op){case"If":case"StatelessIf":{let o=I("thenBranch",r,t,e),n=I("elseBranch",r,t,e),s=I("cond",r,t,e),a=I("args",r,t,e);return(await s.data())[0]?e.functionMap[o].executeFunctionAsync(a,e.tensorArrayMap,e.tensorListMap):e.functionMap[n].executeFunctionAsync(a,e.tensorArrayMap,e.tensorListMap)}case"While":case"StatelessWhile":{let o=I("body",r,t,e),n=I("cond",r,t,e),s=I("args",r,t,e),a=await e.functionMap[n].executeFunctionAsync(s,e.tensorArrayMap,e.tensorListMap),i=s.map(c=>c.id),p=await a[0].data();a.forEach(c=>{!c.kept&&i.indexOf(c.id)===-1&&c.dispose()});let u=s;for(;p[0];){let c=u;u=await e.functionMap[o].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);let l=u.map(d=>d.id);c.forEach(d=>{!d.kept&&i.indexOf(d.id)===-1&&l.indexOf(d.id)===-1&&d.dispose()});let m=await e.functionMap[n].executeFunctionAsync(u,e.tensorArrayMap,e.tensorListMap);p=await m[0].data(),m.forEach(d=>{!d.kept&&i.indexOf(d.id)===-1&&l.indexOf(d.id)===-1&&d.dispose()})}return u}case"LoopCond":{let o=I("pred",r,t,e);return[Bs(o)]}case"Switch":{let o=I("pred",r,t,e),n=I("data",r,t,e);return n.kept||(n=Bs(n)),(await o.data())[0]?[void 0,n]:[n,void 0]}case"Merge":{let o=r.inputNames.find(n=>zt(n,t,e)!==void 0);if(o){let n=zt(o,t,e);return[Bs(n)]}return}case"Enter":{let o=I("frameName",r,t,e),n=I("tensor",r,t,e);return e.enterFrame(o),[Bs(n)]}case"Exit":{let o=I("tensor",r,t,e);return e.exitFrame(),[Bs(o)]}case"NextIteration":{let o=I("tensor",r,t,e);return e.nextIteration(),[Bs(o)]}case"TensorArrayV3":{let o=I("size",r,t,e),n=I("dtype",r,t,e),s=I("elementShape",r,t,e),a=I("dynamicSize",r,t,e),i=I("clearAfterRead",r,t,e),p=I("identicalElementShapes",r,t,e),u=I("name",r,t,e),c=new If(u,n,o,s,p,a,i);return e.addTensorArray(c),[c.idTensor,ke(1)]}case"TensorArrayWriteV3":{let o=I("tensorArrayId",r,t,e),n=I("index",r,t,e),s=I("tensor",r,t,e),a=e.getTensorArray(o.id);return a.write(n,s),[a.idTensor]}case"TensorArrayReadV3":{let o=I("tensorArrayId",r,t,e),n=I("index",r,t,e);return[e.getTensorArray(o.id).read(n)]}case"TensorArrayGatherV3":{let o=I("tensorArrayId",r,t,e),n=I("indices",r,t,e),s=I("dtype",r,t,e);return[e.getTensorArray(o.id).gather(n,s)]}case"TensorArrayScatterV3":{let o=I("tensorArrayId",r,t,e),n=I("indices",r,t,e),s=I("tensor",r,t,e),a=e.getTensorArray(o.id);return a.scatter(n,s),[a.idTensor]}case"TensorArrayConcatV3":{let o=I("tensorArrayId",r,t,e),n=e.getTensorArray(o.id),s=I("dtype",r,t,e);return[n.concat(s)]}case"TensorArraySplitV3":{let o=I("tensorArrayId",r,t,e),n=I("tensor",r,t,e),s=I("lengths",r,t,e),a=e.getTensorArray(o.id);return a.split(s,n),[a.idTensor]}case"TensorArraySizeV3":{let o=I("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return[ke(n.size(),"int32")]}case"TensorArrayCloseV3":{let o=I("tensorArrayId",r,t,e),n=e.getTensorArray(o.id);return n.clearAndClose(),[n.idTensor]}case"TensorListSetItem":{let o=I("tensorListId",r,t,e),n=I("index",r,t,e),s=I("tensor",r,t,e),a=e.getTensorList(o.id);return a.setItem(n,s),[a.idTensor]}case"TensorListGetItem":{let o=I("tensorListId",r,t,e),n=I("index",r,t,e),s=I("elementShape",r,t,e),a=I("elementDType",r,t,e);return[e.getTensorList(o.id).getItem(n,s,a)]}case"TensorListScatterV2":case"TensorListScatter":{let o=I("indices",r,t,e),n=I("tensor",r,t,e),s=I("elementShape",r,t,e),a=I("numElements",r,t,e),i=kT(n,o,s,a);return e.addTensorList(i),[i.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let o=I("elementShape",r,t,e),n=I("elementDType",r,t,e),s;r.op==="TensorListReserve"?s="numElements":s="maxNumElements";let a=I(s,r,t,e),i=r.op==="TensorListReserve"?-1:a,p=vT(o,n,a,i);return e.addTensorList(p),[p.idTensor]}case"TensorListGather":{let o=I("tensorListId",r,t,e),n=I("indices",r,t,e),s=I("elementShape",r,t,e),a=I("elementDType",r,t,e);return[e.getTensorList(o.id).gather(n,a,s)]}case"TensorListStack":{let o=I("tensorListId",r,t,e),n=I("elementShape",r,t,e),s=I("elementDType",r,t,e),a=I("numElements",r,t,e);return[e.getTensorList(o.id).stack(n,s,a)]}case"TensorListFromTensor":{let o=I("tensor",r,t,e),n=I("elementShape",r,t,e),s=I("elementDType",r,t,e),a=IT(o,n,s);return e.addTensorList(a),[a.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let o=I("tensorListId",r,t,e),n=e.getTensorList(o.id),s=I("dtype",r,t,e),a=I("elementShape",r,t,e);return[n.concat(s,a)]}case"TensorListPushBack":{let o=I("tensorListId",r,t,e),n=I("tensor",r,t,e),s=e.getTensorList(o.id);return s.pushBack(n),[s.idTensor]}case"TensorListPopBack":{let o=I("tensorListId",r,t,e),n=I("elementShape",r,t,e),s=I("elementDType",r,t,e);return[e.getTensorList(o.id).popBack(n,s)]}case"TensorListSplit":{let o=I("tensor",r,t,e),n=I("elementShape",r,t,e),s=I("lengths",r,t,e),a=NT(o,s,n);return e.addTensorList(a),[a.idTensor]}case"TensorListLength":{let o=I("tensorListId",r,t,e),n=e.getTensorList(o.id);return[ke(n.size(),"int32")]}case"TensorListResize":{let o=I("tensorListId",r,t,e),n=I("size",r,t,e),a=e.getTensorList(o.id).resize(n);return e.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};function _T(r,t,e){let[o,n]=I("fusedOps",r,t,e),s=o==="biasadd",a=!s,i=n==="prelu",p=o==="fusedbatchnorm",u=I("numArgs",r,t,e);if(s){if(i&&u!==2)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&u!==1)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(p)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let c=I("strides",r,t,e),l=Ol(r,t,e),m=I("dataFormat",r,t,e).toUpperCase(),d=I("dilations",r,t,e),[f,h]=I("args",r,t,e);a&&(h=f,f=void 0);let g=I("leakyreluAlpha",r,t,e);return{stride:c,pad:l,dataFormat:m,dilations:d,biasArg:f,preluArg:h,activationFunc:n,leakyreluAlpha:g}}var $T=(r,t,e,o=Je)=>{switch(r.op){case"Conv1D":{let n=I("stride",r,t,e),s=I("pad",r,t,e),a=I("dataFormat",r,t,e).toUpperCase(),i=I("dilation",r,t,e);return[o.conv1d(I("x",r,t,e),I("filter",r,t,e),n,s,a,i)]}case"Conv2D":{let n=I("strides",r,t,e),s=Ol(r,t,e),a=I("dataFormat",r,t,e).toUpperCase(),i=I("dilations",r,t,e);return[o.conv2d(I("x",r,t,e),I("filter",r,t,e),[n[1],n[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{let{stride:n,pad:s,dataFormat:a,dilations:i,biasArg:p,preluArg:u,activationFunc:c,leakyreluAlpha:l}=_T(r,t,e);return[o.fused.conv2d({x:I("x",r,t,e),filter:I("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:p,activation:c,preluActivationWeights:u,leakyreluAlpha:l})]}case"FusedDepthwiseConv2dNative":{let{stride:n,pad:s,dataFormat:a,dilations:i,biasArg:p,preluArg:u,activationFunc:c,leakyreluAlpha:l}=_T(r,t,e);return[o.fused.depthwiseConv2d({x:I("x",r,t,e),filter:I("filter",r,t,e),strides:[n[1],n[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:p,activation:c,preluActivationWeights:u,leakyreluAlpha:l})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let n=I("outputShape",r,t,e),s=I("strides",r,t,e),a=Ol(r,t,e);return[o.conv2dTranspose(I("x",r,t,e),I("filter",r,t,e),n,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let n=I("strides",r,t,e),s=Ol(r,t,e),a=I("dilations",r,t,e),i=I("dataFormat",r,t,e).toUpperCase();return[o.depthwiseConv2d(I("input",r,t,e),I("filter",r,t,e),[n[1],n[2]],s,i,[a[1],a[2]])]}case"Conv3D":{let n=I("strides",r,t,e),s=I("pad",r,t,e),a=I("dataFormat",r,t,e).toUpperCase(),i=I("dilations",r,t,e);return[o.conv3d(I("x",r,t,e),I("filter",r,t,e),[n[1],n[2],n[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{let n=I("strides",r,t,e),s=I("pad",r,t,e),a=I("kernelSize",r,t,e);return[o.avgPool(I("x",r,t,e),[a[1],a[2]],[n[1],n[2]],s)]}case"MaxPool":{let n=I("strides",r,t,e),s=I("pad",r,t,e),a=I("kernelSize",r,t,e);return[o.maxPool(I("x",r,t,e),[a[1],a[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{let n=I("strides",r,t,e),s=I("pad",r,t,e),a=I("kernelSize",r,t,e),i=I("includeBatchInIndex",r,t,e),{result:p,indexes:u}=o.maxPoolWithArgmax(I("x",r,t,e),[a[1],a[2]],[n[1],n[2]],s,i);return[p,u]}case"AvgPool3D":{let n=I("strides",r,t,e),s=I("pad",r,t,e),a=I("kernelSize",r,t,e);return[o.avgPool3d(I("x",r,t,e),[a[1],a[2],a[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{let n=I("strides",r,t,e),s=I("pad",r,t,e),a=I("kernelSize",r,t,e);return[o.maxPool3d(I("x",r,t,e),[a[1],a[2],a[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{let n=I("strides",r,t,e),s=I("pad",r,t,e),a=I("dilations",r,t,e),i=n[1],p=n[2],u=a[1],c=a[2];return[o.dilation2d(I("x",r,t,e),I("filter",r,t,e),[i,p],s,[u,c],"NHWC")]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var ET=(r,t,e,o=Je)=>{switch(r.op){case"Fill":{let n=I("shape",r,t,e),s=I("dtype",r,t,e),a=I("value",r,t,e);return[o.fill(n,a,s)]}case"LinSpace":{let n=I("start",r,t,e),s=I("stop",r,t,e),a=I("num",r,t,e);return[o.linspace(n,s,a)]}case"Multinomial":{let n=I("logits",r,t,e),s=I("numSamples",r,t,e),a=I("seed",r,t,e);return[o.multinomial(n,s,a)]}case"OneHot":{let n=I("indices",r,t,e),s=I("depth",r,t,e),a=I("onValue",r,t,e),i=I("offValue",r,t,e),p=I("dtype",r,t,e);return[o.oneHot(n,s,a,i,p)]}case"Ones":return[o.ones(I("shape",r,t,e),I("dtype",r,t,e))];case"OnesLike":return[o.onesLike(I("x",r,t,e))];case"RandomStandardNormal":return[o.randomStandardNormal(I("shape",r,t,e),I("dtype",r,t,e),I("seed",r,t,e))];case"RandomUniform":return[o.randomUniform(I("shape",r,t,e),I("minval",r,t,e),I("maxval",r,t,e),I("dtype",r,t,e))];case"RandomUniformInt":return[o.randomUniformInt(I("shape",r,t,e),I("minval",r,t,e),I("maxval",r,t,e),I("seed",r,t,e))];case"Range":{let n=I("start",r,t,e),s=I("stop",r,t,e),a=I("step",r,t,e);return[o.range(n,s,a,I("dtype",r,t,e))]}case"TruncatedNormal":{let n=I("shape",r,t,e),s=I("mean",r,t,e),a=I("stdDev",r,t,e),i=I("seed",r,t,e);return[o.truncatedNormal(n,s,a,I("dtype",r,t,e),i)]}case"Zeros":return[o.zeros(I("shape",r,t,e),I("dtype",r,t,e))];case"ZerosLike":return[o.zerosLike(I("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function PS(r,t,e){let o=I("boxes",r,t,e),n=I("scores",r,t,e),s=I("maxOutputSize",r,t,e),a=I("iouThreshold",r,t,e),i=I("scoreThreshold",r,t,e),p=I("softNmsSigma",r,t,e);return{boxes:o,scores:n,maxOutputSize:s,iouThreshold:a,scoreThreshold:i,softNmsSigma:p}}var RT=async(r,t,e,o,n=Je)=>{switch(r.op){case"NonMaxSuppressionV5":{let{boxes:s,scores:a,maxOutputSize:i,iouThreshold:p,scoreThreshold:u,softNmsSigma:c}=PS(r,t,e),l=await n.image.nonMaxSuppressionWithScoreAsync(s,a,i,p,u,c);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:s,scores:a,maxOutputSize:i,iouThreshold:p,scoreThreshold:u}=PS(r,t,e),c=I("padToMaxOutputSize",r,t,e),l=await n.image.nonMaxSuppressionPaddedAsync(s,a,i,p,u,c);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:s,scores:a,maxOutputSize:i,iouThreshold:p,scoreThreshold:u}=PS(r,t,e);return[await n.image.nonMaxSuppressionAsync(s,a,i,p,u)]}case"Where":{let s=n.cast(I("condition",r,t,e),"bool"),a=[await n.whereAsync(s)];return s.dispose(),a}case"ListDiff":return n.setdiff1dAsync(I("x",r,t,e),I("y",r,t,e));default:throw TypeError(`Node type ${r.op} is not implemented`)}};var DT=(r,t,e,o=Je)=>{switch(r.op){case"LowerBound":{let n=I("sortedSequence",r,t,e),s=I("values",r,t,e);return[o.lowerBound(n,s)]}case"TopKV2":{let n=I("x",r,t,e),s=I("k",r,t,e),a=I("sorted",r,t,e),i=o.topk(n,s,a);return[i.values,i.indices]}case"UpperBound":{let n=I("sortedSequence",r,t,e),s=I("values",r,t,e);return[o.upperBound(n,s)]}case"Unique":{let n=I("x",r,t,e),s=o.unique(n);return[s.values,s.indices]}case"UniqueV2":{let n=I("x",r,t,e),s=I("axis",r,t,e),a=o.unique(n,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var AT=(r,t,e,o=Je)=>{switch(r.op){case"Const":return t[r.name];case"PlaceholderWithDefault":let n=I("default",r,t,e);return[zt(r.name,t,e)||n];case"Placeholder":return[zt(r.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{let c=I("x",r,t,e);return[Bs(c)]}case"IdentityN":return I("x",r,t,e).map(c=>Bs(c));case"Snapshot":let s=I("x",r,t,e);return[Bs(s)];case"Shape":return[o.tensor1d(I("x",r,t,e).shape,"int32")];case"ShapeN":return I("x",r,t,e).map(c=>o.tensor1d(c.shape));case"Size":return[o.scalar(I("x",r,t,e).size,"int32")];case"Rank":return[o.scalar(I("x",r,t,e).rank,"int32")];case"NoOp":return[o.scalar(1)];case"Print":let a=I("x",r,t,e),i=I("data",r,t,e),p=I("message",r,t,e),u=I("summarize",r,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(p);for(let c=0;c<i.length;c++)console.log(Array.prototype.slice.call(i[c].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var vf=class{get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=ke(0),this.tensorMap=new Map,Rr(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return ke(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return this.tensorMap.forEach(n=>n.dispose()),this.tensorMap.clear(),De(()=>{let n=fo(e),s=o.length,a=n.length;y.assert(s===a,()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`);for(let i=0;i<s;i++){let p=o[i],u=n[i];Rr(u),this.tensorMap.set(p,u)}return this.handle})}async find(t,e){this.checkKeyAndValueTensor(t,e);let o=await t.data();return De(()=>{let n=[];for(let s=0;s<o.length;s++){let a=o[s],i=this.findWithDefault(a,e);n.push(i)}return kr(n)})}findWithDefault(t,e){let o=this.tensorMap.get(t);return o!=null?o:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}};var FT=async(r,t,e,o)=>{switch(r.op){case"HashTable":case"HashTableV2":{let n=o.getHashTableHandleByName(r.name);if(n!=null)return[n];{let s=I("keyDType",r,t,e),a=I("valueDType",r,t,e),i=new vf(s,a);return o.addHashTable(r.name,i),[i.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{let n=I("tableHandle",r,t,e,o),s=I("keys",r,t,e),a=I("values",r,t,e);return[await o.getHashTableById(n.id).import(s,a)]}case"LookupTableFind":case"LookupTableFindV2":{let n=I("tableHandle",r,t,e,o),s=I("keys",r,t,e),a=I("defaultValue",r,t,e);return[await o.getHashTableById(n.id).find(s,a)]}case"LookupTableSize":case"LookupTableSizeV2":{let n=I("tableHandle",r,t,e,o);return[o.getHashTableById(n.id).tensorSize()]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var PT=(r,t,e,o=Je)=>{switch(r.op){case"ResizeBilinear":{let n=I("images",r,t,e),s=I("size",r,t,e),a=I("alignCorners",r,t,e),i=I("halfPixelCenters",r,t,e);return[o.image.resizeBilinear(n,[s[0],s[1]],a,i)]}case"ResizeNearestNeighbor":{let n=I("images",r,t,e),s=I("size",r,t,e),a=I("alignCorners",r,t,e),i=I("halfPixelCenters",r,t,e);return[o.image.resizeNearestNeighbor(n,[s[0],s[1]],a,i)]}case"CropAndResize":{let n=I("image",r,t,e),s=I("boxes",r,t,e),a=I("boxInd",r,t,e),i=I("cropSize",r,t,e),p=I("method",r,t,e),u=I("extrapolationValue",r,t,e);return[o.image.cropAndResize(n,s,a,i,p,u)]}case"ImageProjectiveTransformV3":{let n=I("images",r,t,e),s=I("transforms",r,t,e),a=I("outputShape",r,t,e),i=I("fillValue",r,t,e),p=I("interpolation",r,t,e),u=I("fillMode",r,t,e);return[o.image.transform(n,s,p.toLowerCase(),u.toLowerCase(),i,a)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var OT=(r,t,e,o=Je)=>{switch(r.op){case"Equal":return[o.equal(I("a",r,t,e),I("b",r,t,e))];case"NotEqual":return[o.notEqual(I("a",r,t,e),I("b",r,t,e))];case"Greater":return[o.greater(I("a",r,t,e),I("b",r,t,e))];case"GreaterEqual":return[o.greaterEqual(I("a",r,t,e),I("b",r,t,e))];case"Less":return[o.less(I("a",r,t,e),I("b",r,t,e))];case"LessEqual":return[o.lessEqual(I("a",r,t,e),I("b",r,t,e))];case"LogicalAnd":return[o.logicalAnd(I("a",r,t,e),I("b",r,t,e))];case"LogicalNot":return[o.logicalNot(I("a",r,t,e))];case"LogicalOr":return[o.logicalOr(I("a",r,t,e),I("b",r,t,e))];case"Select":case"SelectV2":return[o.where(I("condition",r,t,e),I("a",r,t,e),I("b",r,t,e))];case"BitwiseAnd":return[o.bitwiseAnd(I("a",r,t,e),I("b",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var MT=(r,t,e,o=Je)=>{switch(r.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[o.matMul(I("a",r,t,e),I("b",r,t,e),I("transposeA",r,t,e),I("transposeB",r,t,e))];case"Einsum":return[o.einsum(I("equation",r,t,e),...I("tensors",r,t,e))];case"Transpose":return[o.transpose(I("x",r,t,e),I("perm",r,t,e))];case"_FusedMatMul":let[n,s]=I("fusedOps",r,t,e),a=n==="biasadd",i=s==="prelu",p=I("numArgs",r,t,e),u=I("leakyreluAlpha",r,t,e);if(a){if(i&&p!==2)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&p!==1)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[c,l]=I("args",r,t,e);return[o.fused.matMul({a:I("a",r,t,e),b:I("b",r,t,e),transposeA:I("transposeA",r,t,e),transposeB:I("transposeB",r,t,e),bias:c,activation:s,preluActivationWeights:l,leakyreluAlpha:u})];case"MatrixBandPart":return[o.linalg.bandPart(I("a",r,t,e),I("numLower",r,t,e),I("numUpper",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var LT=(r,t,e,o=Je)=>{switch(r.op){case"EuclideanNorm":return[o.euclideanNorm(I("x",r,t,e),I("axis",r,t,e),I("keepDims",r,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":return[o.batchNorm(I("x",r,t,e),I("mean",r,t,e),I("variance",r,t,e),I("offset",r,t,e),I("scale",r,t,e),I("epsilon",r,t,e))];case"FusedBatchNormV3":return[o.batchNorm(I("x",r,t,e),I("mean",r,t,e),I("variance",r,t,e),I("offset",r,t,e),I("scale",r,t,e),I("epsilon",r,t,e))];case"LRN":return[o.localResponseNormalization(I("x",r,t,e),I("radius",r,t,e),I("bias",r,t,e),I("alpha",r,t,e),I("beta",r,t,e))];case"Softmax":return[o.softmax(I("x",r,t,e))];case"LogSoftmax":return[o.logSoftmax(I("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var BT=(r,t,e,o=Je)=>{switch(r.op){case"RaggedGather":{let{outputNestedSplits:n,outputDenseValues:s}=o.raggedGather(I("paramsNestedSplits",r,t,e),I("paramsDenseValues",r,t,e),I("indices",r,t,e),I("outputRaggedRank",r,t,e));return n.concat(s)}case"RaggedRange":{let{rtNestedSplits:n,rtDenseValues:s}=o.raggedRange(I("starts",r,t,e),I("limits",r,t,e),I("splits",r,t,e));return[n,s]}case"RaggedTensorToTensor":return[o.raggedTensorToTensor(I("shape",r,t,e),I("values",r,t,e),I("defaultValue",r,t,e),I("rowPartitionTensors",r,t,e),I("rowPartitionTypes",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var zT=(r,t,e,o=Je)=>{switch(r.op){case"Max":{let i=I("axis",r,t,e),p=I("keepDims",r,t,e);return[o.max(I("x",r,t,e),i,p)]}case"Mean":{let i=I("axis",r,t,e),p=I("keepDims",r,t,e);return[o.mean(I("x",r,t,e),i,p)]}case"Min":{let i=I("axis",r,t,e),p=I("keepDims",r,t,e);return[o.min(I("x",r,t,e),i,p)]}case"Sum":{let i=I("axis",r,t,e),p=I("keepDims",r,t,e);return[o.sum(I("x",r,t,e),i,p)]}case"All":{let i=I("axis",r,t,e),p=I("keepDims",r,t,e);return[o.all(I("x",r,t,e),i,p)]}case"Any":{let i=I("axis",r,t,e),p=I("keepDims",r,t,e);return[o.any(I("x",r,t,e),i,p)]}case"ArgMax":{let i=I("axis",r,t,e);return[o.argMax(I("x",r,t,e),i)]}case"ArgMin":{let i=I("axis",r,t,e);return[o.argMin(I("x",r,t,e),i)]}case"Prod":{let i=I("axis",r,t,e),p=I("keepDims",r,t,e);return[o.prod(I("x",r,t,e),i,p)]}case"Cumprod":{let i=I("axis",r,t,e),p=I("exclusive",r,t,e),u=I("reverse",r,t,e);return[o.cumprod(I("x",r,t,e),i,p,u)]}case"Cumsum":{let i=I("axis",r,t,e),p=I("exclusive",r,t,e),u=I("reverse",r,t,e);return[o.cumsum(I("x",r,t,e),i,p,u)]}case"Bincount":let n=I("x",r,t,e),s=I("weights",r,t,e),a=I("size",r,t,e);return[o.bincount(n,s,a)];case"DenseBincount":{let i=I("x",r,t,e),p=I("weights",r,t,e),u=I("size",r,t,e),c=I("binaryOutput",r,t,e);return[o.denseBincount(i,p,u,c)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var VT=(r,t,e,o=Je)=>{switch(r.op){case"ConcatV2":case"Concat":{let n=I("n",r,t,e),s=I("axis",r,t,e),a=I("tensors",r,t,e);return a=a.slice(0,n),[o.concat(a,s)]}case"Gather":{let n=I("x",r,t,e),s=I("indices",r,t,e);return[o.gather(n,o.cast(s,"int32"),0)]}case"GatherV2":{let n=I("axis",r,t,e),s=I("batchDims",r,t,e),a=I("x",r,t,e),i=I("indices",r,t,e);return[o.gather(a,o.cast(i,"int32"),n,s)]}case"Reverse":{let n=I("dims",r,t,e),s=[];for(let i=0;i<n.length;i++)n[i]&&s.push(i);let a=I("x",r,t,e);return[o.reverse(a,s)]}case"ReverseV2":{let n=I("axis",r,t,e),s=I("x",r,t,e);return[o.reverse(s,n)]}case"Slice":{let n=I("begin",r,t,e),s=I("size",r,t,e);return[o.slice(I("x",r,t,e),n,s)]}case"StridedSlice":{let n=I("begin",r,t,e),s=I("end",r,t,e),a=I("strides",r,t,e),i=I("beginMask",r,t,e),p=I("endMask",r,t,e),u=I("ellipsisMask",r,t,e),c=I("newAxisMask",r,t,e),l=I("shrinkAxisMask",r,t,e),m=I("x",r,t,e);return[o.stridedSlice(m,n,s,a,i,p,u,c,l)]}case"Pack":return De(()=>{let n=I("axis",r,t,e),s=I("tensors",r,t,e),a=s[0].shape,i=o.squeeze(s[0]).shape,p=s.map(u=>{let c=y.arraysEqual(u.shape,a);if(!c&&!y.arraysEqual(o.squeeze(u).shape,i))throw new Error("the input tensors shape does not match");return c?u:o.reshape(u,a)});return[o.stack(p,n)]});case"Unpack":{let n=I("axis",r,t,e),s=I("tensor",r,t,e);return o.unstack(s,n)}case"Tile":{let n=I("reps",r,t,e);return[o.tile(I("x",r,t,e),n)]}case"Split":case"SplitV":{let n=I("axis",r,t,e),s=I("numOrSizeSplits",r,t,e),a=I("x",r,t,e);return o.split(a,s,n)}case"ScatterNd":{let n=I("indices",r,t,e),s=I("values",r,t,e),a=I("shape",r,t,e);return[o.scatterND(n,s,a)]}case"GatherNd":{let n=I("x",r,t,e),s=I("indices",r,t,e);return[o.gatherND(n,s)]}case"SparseToDense":{let n=I("sparseIndices",r,t,e),s=I("outputShape",r,t,e),a=I("sparseValues",r,t,e),i=I("defaultValue",r,t,e);return[o.sparseToDense(n,a,s,a.dtype===i.dtype?i:o.cast(i,a.dtype))]}case"TensorScatterUpdate":{let n=I("indices",r,t,e),s=I("values",r,t,e),a=I("tensor",r,t,e);return[o.tensorScatterUpdate(a,n,s)]}default:throw TypeError(`Node type ${r.op} is not implemented`)}};var WT=(r,t,e,o=Je)=>{switch(r.op){case"SparseFillEmptyRows":{let{outputIndices:n,outputValues:s,emptyRowIndicator:a,reverseIndexMap:i}=o.sparse.sparseFillEmptyRows(I("indices",r,t,e),I("values",r,t,e),I("denseShape",r,t,e),I("defaultValue",r,t,e));return[n,s,a,i]}case"SparseReshape":{let{outputIndices:n,outputShape:s}=o.sparse.sparseReshape(I("inputIndices",r,t,e),I("inputShape",r,t,e),I("newShape",r,t,e));return[n,s]}case"SparseSegmentMean":return[o.sparse.sparseSegmentMean(I("data",r,t,e),I("indices",r,t,e),I("segmentIds",r,t,e))];case"SparseSegmentSum":return[o.sparse.sparseSegmentSum(I("data",r,t,e),I("indices",r,t,e),I("segmentIds",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var UT=(r,t,e,o=Je)=>{switch(r.op){case"FFT":return[o.fft(I("x",r,t,e))];case"IFFT":return[o.ifft(I("x",r,t,e))];case"RFFT":return[o.rfft(I("x",r,t,e))];case"IRFFT":return[o.irfft(I("x",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var GT=(r,t,e,o=Je)=>{switch(r.op){case"StaticRegexReplace":return[o.string.staticRegexReplace(I("input",r,t,e),I("pattern",r,t,e),I("rewrite",r,t,e),I("replaceGlobal",r,t,e))];case"StringNGrams":{let{nGrams:n,nGramsSplits:s}=o.string.stringNGrams(I("data",r,t,e),I("dataSplits",r,t,e),I("separator",r,t,e),I("nGramWidths",r,t,e),I("leftPad",r,t,e),I("rightPad",r,t,e),I("padWidth",r,t,e),I("preserveShortSequences",r,t,e));return[n,s]}case"StringSplit":{let{indices:n,values:s,shape:a}=o.string.stringSplit(I("input",r,t,e),I("delimiter",r,t,e),I("skipEmpty",r,t,e));return[n,s,a]}case"StringToHashBucketFast":return[o.string.stringToHashBucketFast(I("input",r,t,e),I("numBuckets",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};var HT=(r,t,e,o=Je)=>{switch(r.op){case"Cast":return[o.cast(I("x",r,t,e),I("dtype",r,t,e))];case"ExpandDims":{let n=I("axis",r,t,e);return[o.expandDims(I("x",r,t,e),n)]}case"Squeeze":{let n=I("axis",r,t,e);return[o.squeeze(I("x",r,t,e),n)]}case"Reshape":return[o.reshape(I("x",r,t,e),I("shape",r,t,e))];case"EnsureShape":return[o.ensureShape(I("x",r,t,e),I("shape",r,t,e))];case"MirrorPad":return[o.mirrorPad(I("x",r,t,e),I("padding",r,t,e),I("mode",r,t,e))];case"PadV2":case"Pad":return[o.pad(I("x",r,t,e),I("padding",r,t,e),I("constantValue",r,t,e))];case"SpaceToBatchND":{let n=I("blockShape",r,t,e),s=I("paddings",r,t,e);return[o.spaceToBatchND(I("x",r,t,e),n,s)]}case"BatchToSpaceND":{let n=I("blockShape",r,t,e),s=I("crops",r,t,e);return[o.batchToSpaceND(I("x",r,t,e),n,s)]}case"DepthToSpace":{let n=I("blockSize",r,t,e),s=I("dataFormat",r,t,e).toUpperCase();return[o.depthToSpace(I("x",r,t,e),n,s)]}case"BroadcastTo":return[o.broadcastTo(I("x",r,t,e),I("shape",r,t,e))];case"BroadcastArgs":return[o.broadcastArgs(I("s0",r,t,e),I("s1",r,t,e))];default:throw TypeError(`Node type ${r.op} is not implemented`)}};function OS(r,t,e,o,n=De){let s=((a,i,p)=>{switch(a.category){case"arithmetic":return n(()=>CT(a,i,p));case"basic_math":return n(()=>wT(a,i,p));case"control":return TT(a,i,p);case"convolution":return n(()=>$T(a,i,p));case"creation":return n(()=>ET(a,i,p));case"dynamic":return RT(a,i,p);case"evaluation":return n(()=>DT(a,i,p));case"image":return n(()=>PT(a,i,p));case"graph":return n(()=>AT(a,i,p));case"logical":return n(()=>OT(a,i,p));case"matrices":return n(()=>MT(a,i,p));case"normalization":return n(()=>LT(a,i,p));case"ragged":return n(()=>BT(a,i,p));case"reduction":return n(()=>zT(a,i,p));case"slice_join":return n(()=>VT(a,i,p));case"sparse":return n(()=>WT(a,i,p));case"spectral":return n(()=>UT(a,i,p));case"string":return n(()=>GT(a,i,p));case"transformation":return n(()=>HT(a,i,p));case"hash_table":return FT(a,i,p,o);case"custom":let u=pf(a.op);if(u&&u.customExecutor)return u.customExecutor(new wf(a,i,p));throw TypeError(`Custom op ${a.op} is not registered.`);default:throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(r,t,e);return y.isPromise(s)?s.then(a=>[].concat(a)):[].concat(s)}var Ll=class{constructor(t={},e={},o={},n={},s){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=o,this.functionMap=n,this.parseNodeNameCache=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let t=[];for(let e=0;e<this.contexts.length-1;e++){let o=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(o))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>e.id===0&&e.iterationId===0?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw new Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw new Error("Cannot increase frame iteration, the context is empty")}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(let e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(let e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}};function MS(r,t,e,o){let n=new Set,s=[],a=null,i=null,p=new Set,u=new Set(Object.keys(r).map(m=>Tr(m)[0]));o=o||[];let c=new Set(o.map(m=>Tr(m.name)[0])),l=[...t];for(;l.length>0;){let m=l.pop();if((gu(m)||k8(m)||N8(m))&&a==null&&(a=m,i=a.children.map(d=>d.name).filter(d=>n.has(d))),n.add(m.name),e[m.name]==null&&!u.has(m.name)&&!c.has(m.name)){if(m.inputs.length===0){s.push(m.name);continue}m.inputs.forEach(d=>{p.has(d.name)||(p.add(d.name),l.push(d))})}}return{inputs:r,outputs:t,usedNodes:n,missingInputs:s,dynamicNode:a,syncInputs:i}}function KT(r,t){let{usedNodes:e,inputs:o}=t,n=Object.keys(o).map(g=>Tr(g)[0]).map(g=>r.nodes[g]),s=r.initNodes||[],a=g=>e.has(typeof g=="string"?g:g.name);function i(g){return[...new Map(g.map(x=>[x.name,x])).values()]}let p=i([...n,...r.weights,...s]).filter(a),u=i([...p,...Object.values(r.nodes)]).filter(a),c=new Map(u.map(g=>[g.name,g])),l={};for(let g of u){l[g.name]=l[g.name]||0;for(let x of g.children)a(x)||(l[x.name]=Number.POSITIVE_INFINITY),l[x.name]=(l[x.name]||0)+1}let m=Object.entries(l).filter(([,g])=>g===0).map(([g])=>g),d=[...m];for(;m.length>0;){let g=m.pop(),x=c.get(g);for(let b of x.children.filter(a))--l[b.name]===0&&(d.push(b.name),m.push(b.name))}let f=d.map(g=>c.get(g)),h=C8(f,p);return w8(h,p),h}function C8(r,t){let e=new Map(r.map(a=>[a.name,a])),o=t.map(a=>a.name),n=new Set(o);for(;o.length>0;){let a=o.pop(),i=e.get(a);for(let p of i.children)!e.has(p.name)||n.has(p.name)||(n.add(p.name),o.push(p.name))}return r.filter(a=>n.has(a.name))}var Cc=class extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}};function w8(r,t){let e=new Map(r.map((i,p)=>[i.name,p])),o=new Set(t.map(i=>i.name)),n=i=>o.has(typeof i=="string"?i:i.name),s=new Set(r.map(i=>i.name)),a=i=>s.has(typeof i=="string"?i:i.name);for(let i of r){for(let p of i.children.filter(a)){if(!e.has(p.name))throw new Cc(`Child ${p.name} of node ${i.name} is unreachable.`);if(e.get(i.name)>e.get(p.name))throw new Cc(`Node ${i.name} is scheduled to run after its child ${p.name}.`)}if(!n(i))for(let p of i.inputs){if(!e.has(p.name))throw new Cc(`Input ${p.name} of node ${i.name} is unreachable.`);if(e.get(p.name)>e.get(i.name))throw new Cc(`Node ${i.name} is scheduled to run before its input ${p.name}.`)}}}function qT(r){let t=new Map(r.map((i,p)=>[i.name,p])),e=Number.MAX_SAFE_INTEGER,o=r.map((i,p)=>gu(i)?e:p),n=i=>{let p=o[t.get(i.name)];return p==null?-1:p},s=r.map((i,p)=>i.children.map(n).reduce((u,c)=>Math.max(u,c),o[p])),a=new Map;for(let i=0;i<r.length;++i){let p=s[i];if(p===e)continue;let u=r[i],c=r[p];a.has(c.name)||a.set(c.name,[]),a.get(c.name).push(u)}return a}var S8=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),I8=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),v8=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function gu(r){return S8.has(r.op)}function k8(r){return I8.has(r.op)}function N8(r){return v8.has(r.op)}var lp=class{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){let e=Object.keys(t).map(o=>t[o].map(n=>n.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{let e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,t.functions!=null&&Object.keys(t.functions).forEach(o=>{this._functionExecutorMap[o]=new lp(t.functions[o],this)})}getCompilationKey(t,e){let o=t.map(s=>s.name).sort(),n=e.map(s=>s.name).sort();return o.join(this.SEPARATOR)+"--"+n.join(this.SEPARATOR)}compile(t,e){let o=MS(t,e,this.weightMap,this._initNodes),{missingInputs:n,dynamicNode:s,syncInputs:a}=o;if(s!=null)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(n.length>0){let u=e.map(l=>l.name),c=Object.keys(t);throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${c}]. Missing the following inputs: [${n}]`)}let i=KT(this.graph,o),p=qT(i);return{orderedNodes:i,nodeLiveUntilMap:p}}cloneAndKeepTensor(t){if(t==null)return null;let e=t.clone();return Rr(e),e}cloneTensorList(t){return t?t.map(o=>this.cloneAndKeepTensor(o)):null}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(([e,o])=>[e,this.cloneTensorList(o)]))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);let o=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);let n=o.map(m=>this.graph.nodes[Tr(m)[0]]),s=e.map(m=>Tr(m)[0]),a=new Set(s),i=s.map(m=>this.graph.nodes[m]);i.length===0&&(i=this._outputs);let p=this.getCompilationKey(n,i),u=this.compiledMap.get(p);u==null&&(u=this.compile(t,i),this.compiledMap.set(p,u));try{this.keepIntermediateTensors=A().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(m){this.keepIntermediateTensors=!1,console.warn(m.message)}let c={},l={};return De(()=>{let m=new Ll(this.weightMap,c,l,this.functionExecutorMap,this.parseNodeNameCache),d=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(x=>{let[b,C]=Tr(x,m),S=[];S[C]=t[x],d[b]=S,this.keepIntermediateTensors&&(this.clonedTensorsMap[b]=this.cloneTensorList(S))});let f=this.getFrozenTensorIds(d),{orderedNodes:h,nodeLiveUntilMap:g}=u;for(let x of h){if(d[x.name])continue;let b=OS(x,d,m,this._resourceManager);if(y.isPromise(b))throw new Error(`The execution of the op '${x.op}' returned a promise. Please use model.executeAsync() instead.`);d[x.name]=b,this.keepIntermediateTensors&&(this.clonedTensorsMap[x.name]=this.cloneTensorList(b)),this.checkTensorForDisposalWithNodeLiveUntilInfo(x,d,m,f,a,g.get(x.name))}return this.parent==null&&m.dispose(f),e.map(x=>zt(x,d,m))})}getFrozenTensorIds(t){let e=[].concat.apply([],Object.keys(t).map(o=>t[o]).map(o=>o.map(n=>n.id)));return new Set(e)}checkTensorForDisposal(t,e,o,n,s,a,i){if(!(gu(e)||a.has(t))){for(let p of o[t])p!=null&&(i[p.id]=(i[p.id]||0)+e.children.length);for(let p of e.inputs){if(gu(p))continue;let u=fS(p.name,o,n);if(u!=null)for(let c of u){if(!c||c.kept||s.has(c.id))continue;let l=i[c.id];l===1?(c.dispose(),delete i[c.id]):l!=null&&i[c.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,o,n,s,a){function i(p){return gu(p)||s.has(p.name)}if(!(gu(t)||a==null))for(let p of a){if(i(p))continue;let u=fS(p.name,e,o);for(let c of u)!c||c.kept||n.has(c.id)||c.dispose()}}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(let e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(t,e,o=!1,n={},s={}){this.disposeIntermediateTensors(),o||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));try{this.keepIntermediateTensors=A().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(m){this.keepIntermediateTensors=!1,console.warn(m.message)}let a=new Ll(this.weightMap,n,s,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));let i=await this.executeWithControlFlow(t,a,e,o),p=e.map(m=>zt(m,i,a)),u=p.map(m=>m.id),c=Object.keys(t).map(m=>t[m].id),l=new Set([...u,...c,...this.weightIds]);return Object.values(i).forEach(m=>{m.forEach(d=>{d&&!d.isDisposed&&!l.has(d.id)&&d.dispose()})}),this.parent==null&&a.dispose(l),p}async executeFunctionAsync(t,e,o){let n=t.reduce((s,a,i)=>(s[this.inputs[i].name]=a,s),{});return this._executeAsync(n,this.outputNodes,!0,e,o)}async executeWithControlFlow(t,e,o,n){let s=Object.keys(t),a=s.map(S=>this.graph.nodes[Tr(S)[0]]),i=o.map(S=>Tr(S)[0]),p=new Set(i),u=i.map(S=>this.graph.nodes[S]);u.length===0&&(u=this._outputs);let{usedNodes:c,missingInputs:l,dynamicNode:m,syncInputs:d}=MS(t,u,this.weightMap,this._initNodes),f=[...a,...this.graph.weights,...this._initNodes||[]].map(S=>({node:S,contexts:e.currentContext})),h=Object.assign({},this.weightMap);Object.keys(t).forEach(S=>{let[k,_]=Tr(S),E=[];E[_]=t[S],h[k]=E});let g={},x=this.getFrozenTensorIds(h),b={};for(;f.length>0;){let S=this.processStack(a,f,e,h,b,x,p,g,c);await Promise.all(S)}m==null&&!n&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let C=u.filter(S=>!gu(S)&&!zt(S.name,h,e)).map(S=>S.name);if(C.length>0){let S="";throw m!=null&&(S=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${C}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${S}`)}return h}processStack(t,e,o,n,s,a,i,p,u){let c=[];for(;e.length>0;){let l=e.pop();o.currentContext=l.contexts;let m="";if(l.node.op==="Enter"&&I("isConstant",l.node,n,o)&&([m]=Ls(l.node.name,o)),n[l.node.name]==null){let d=OS(l.node,n,o,this._resourceManager);m||([m]=Ls(l.node.name,o));let f=o.currentContext;y.isPromise(d)?c.push(d.then(h=>(n[m]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[m]=this.cloneTensorList(h)),o.currentContext=f,this.checkTensorForDisposal(m,l.node,n,o,a,i,p),this.processChildNodes(l.node,e,o,n,s,u),h))):(n[m]=d,this.keepIntermediateTensors&&(this.clonedTensorsMap[m]=this.cloneTensorList(d)),this.checkTensorForDisposal(m,l.node,n,o,a,i,p),this.processChildNodes(l.node,e,o,n,s,u))}else this.processChildNodes(l.node,e,o,n,s,u)}return c}processChildNodes(t,e,o,n,s,a){t.children.forEach(i=>{let[p]=Ls(i.name,o);s[p]||!a.has(i.name)||(i.op==="Merge"?i.inputNames.some(u=>!!zt(u,n,o))&&(s[p]=!0,e.push({contexts:o.currentContext,node:i})):i.inputNames.every(u=>!!zt(u,n,o))&&(s[p]=!0,e.push({contexts:o.currentContext,node:i})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{let o=t[e],[n]=Tr(e),s=this.graph.nodes[n];if(s.attrParams.shape&&s.attrParams.shape.value){let a=s.attrParams.shape.value,i=a.length===o.shape.length&&o.shape.every((p,u)=>a[u]===-1||a[u]===p);y.assert(i,()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${a}], but was [${o.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&y.assert(o.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`)})}mapInputs(t){var e,o;let n={};for(let s in t){let a=(o=(e=this._signature)===null||e===void 0?void 0:e.inputs)===null||o===void 0?void 0:o[s];a!=null?n[a.name]=t[s]:n[s]=t[s]}return n}checkInputs(t){let e=Object.keys(t).filter(o=>{let[n]=Tr(o);return this.graph.nodes[n]==null});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>{var o,n;let s=(n=(o=this._signature)===null||o===void 0?void 0:o.outputs)===null||n===void 0?void 0:n[e];return s!=null?s.name:e},{})}checkOutputs(t){t.forEach(e=>{let[o]=Tr(e);if(!this.graph.nodes[o])throw new Error(`The output '${e}' is not found in the graph`)})}};var kf=class{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(let t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(let t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}};var T8="?tfjs-format=file",_8="model.json",Bl=class{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},o=fi){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=o,e==null&&(this.loadOptions={}),this.resourceManager=new kf}findIOHandler(){let t=this.modelUrl;if(t.load!=null)this.handler=t;else if(this.loadOptions.requestInit!=null)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{let e=this.io.getLoadHandlers(t,this.loadOptions);if(e.length===0)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),this.handler.load==null)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let t=this.handler.load();return y.isPromise(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;let e=this.artifacts.modelTopology,o=this.artifacts.signature;if(this.artifacts.userDefinedMetadata!=null){let s=this.artifacts.userDefinedMetadata;s.signature!=null&&(o=s.signature),s.structuredOutputKeys!=null&&(this.structuredOutputKeys=s.structuredOutputKeys)}this.signature=o,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;let n=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new lp(Ml.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(n),this.executor.resourceManager=this.resourceManager,t.modelInitializer!=null&&t.modelInitializer.node!=null){let s=Ml.Instance.transformGraph(t.modelInitializer);this.initializer=new lp(s),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}async save(t,e){if(typeof t=="string"){let o=this.io.getSaveHandlers(t);if(o.length===0)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(o.length>1)throw new Error(`Found more than one (${o.length}) save handlers for URL '${t}'`);t=o[0]}if(t.save==null)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}addStructuredOutputNames(t){if(this.structuredOutputKeys){let e=t instanceof ut?[t]:t,o={};return e.forEach((n,s)=>o[this.structuredOutputKeys[s]]=n),o}return t}predict(t,e){let o=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(o)}async predictAsync(t,e){let o=await this.executeAsync(t,this.outputNodes);return this.addStructuredOutputNames(o)}normalizeInputs(t){var e;if(!(t instanceof ut)&&!Array.isArray(t)){let s=(e=this.signature)===null||e===void 0?void 0:e.inputs;if(s!=null)for(let a in s){let i=s[a];i.resourceId!=null&&(t[a]=this.resourceIdToCapturedInput[i.resourceId])}return t}t=Array.isArray(t)?t:[t];let o=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+o!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-o} non-resource placeholders, while there are ${t.length} input tensors provided.`);let n=0;return this.inputNodes.reduce((s,a)=>{var i,p,u;let c=(u=(p=(i=this.signature)===null||i===void 0?void 0:i.inputs)===null||p===void 0?void 0:p[a])===null||u===void 0?void 0:u.resourceId;return c!=null?s[a]=this.resourceIdToCapturedInput[c]:s[a]=t[n++],s},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return this.initializer==null?[]:this.initializerSignature==null?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){let e=this.initializerSignature.outputs,o=Object.keys(e);for(let n=0;n<o.length;n++){let s=o[n],a=e[s];this.resourceIdToCapturedInput[a.resourceId]=t[n]}}}execute(t,e){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=this.executor.execute(t,e);return o.length>1?o:o[0]}async executeAsync(t,e){this.resourceIdToCapturedInput==null&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);let o=await this.executor.executeAsync(t,e);return o.length>1?o:o[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,o)=>(e[o]=[t[o]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Mt(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}};async function $8(r,t={},e=fi){if(r==null)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");t==null&&(t={}),t.fromTFHub&&typeof r=="string"&&(r=R8(r));let o=new Bl(r,t,e);return await o.load(),o}function E8(r){if(r==null)throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");let t;if(r instanceof Array){let[o,n]=r;if(!o)throw new Error("modelJSON must be the first element of the array");if(!n||!(n instanceof ArrayBuffer))throw new Error("An ArrayBuffer of weights must be the second element of the array");if(!("modelTopology"in o))throw new Error("Model JSON is missing 'modelTopology'");if(!("weightsManifest"in o))throw new Error("Model JSON is missing 'weightsManifest'");let s=fi.getWeightSpecs(o.weightsManifest),a=fi.getModelArtifactsForJSONSync(o,s,n);t=fi.fromMemorySync(a)}else if("load"in r)t=r;else if("modelTopology"in r&&"weightSpecs"in r&&"weightData"in r)t=fi.fromMemorySync(r);else throw new Error("Unknown model format");let e=new Bl(t);return e.load(),e}function R8(r){return r.endsWith("/")||(r=r+"/"),`${r}${_8}${T8}`}var D8="4.11.0";function Q(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the CPU backend.`)})}var A8=Wt.whereImpl,xu=class extends ao{nextDataId(){return xu.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new zo(this,pr())}write(t,e,o){this.firstUse&&(this.firstUse=!1,A().get("IS_NODE")&&w.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));let n={id:this.nextDataId()};return this.data.set(n,{values:t,dtype:o,refCount:1}),n}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(a=>y.encodeString(a));n=this.write(s,t,e)}else n=this.write(o,t,e);return{dataId:n,shape:t,dtype:e}}refCount(t){return this.data.has(t)?this.data.get(t).refCount:0}incRef(t){let e=this.data.get(t);e.refCount++}decRef(t){if(this.data.has(t)){let e=this.data.get(t);e.refCount--}}move(t,e,o,n,s){this.data.set(t,{values:e,dtype:n,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){let{dtype:e,complexTensorInfos:o}=this.data.get(t);if(e==="complex64"){let n=this.readSync(o.real.dataId),s=this.readSync(o.imag.dataId);return w.mergeRealAndImagArrays(n,s)}return y.convertBackendValuesAndArrayBuffer(this.data.get(t).values,e)}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return me(t.shape,t.dtype,o)}catch(o){throw new Error("Failed to decode encoded string bytes into utf-8")}return me(t.shape,t.dtype,e)}makeOutput(t,e,o){return pr().makeTensorFromTensorInfo(this.makeTensorInfo(e,o,t),this)}disposeData(t,e=!1){if(this.data.has(t)){if(this.data.get(t).refCount--,!e&&this.data.get(t).refCount>0)return!1;let{complexTensorInfos:o}=this.data.get(t);o!=null&&(this.disposeData(o.real.dataId,!0),this.disposeData(o.imag.dataId,!0)),this.data.delete(t)}return!0}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}async time(t){let e=y.now();return t(),{kernelMs:y.now()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(t){Q([t],"where");let e=this.readSync(t.dataId);return A8(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}};xu.nextDataId=0;var Tc={};qe(Tc,{addImpl:()=>zS,bincountImpl:()=>Ic,bincountReduceImpl:()=>Nf,bitwiseAndImpl:()=>VS,castImpl:()=>BS,ceilImpl:()=>WS,concatImpl:()=>mp,equalImpl:()=>US,expImpl:()=>HS,expm1Impl:()=>qS,floorDivImpl:()=>XS,floorImpl:()=>jS,gatherNdImpl:()=>Tf,gatherV2Impl:()=>_f,greaterEqualImpl:()=>QS,greaterImpl:()=>YS,lessEqualImpl:()=>JS,lessImpl:()=>ZS,linSpaceImpl:()=>$f,logImpl:()=>eI,maxImpl:()=>Ef,maximumImpl:()=>tI,minimumImpl:()=>rI,multiplyImpl:()=>zl,negImpl:()=>oI,notEqualImpl:()=>nI,prodImpl:()=>sI,raggedGatherImpl:()=>Rf,raggedRangeImpl:()=>Df,raggedTensorToTensorImpl:()=>Af,rangeImpl:()=>fp,rsqrtImpl:()=>aI,scatterImpl:()=>zs,sigmoidImpl:()=>v_,simpleAbsImpl:()=>LS,sliceImpl:()=>hp,sparseFillEmptyRowsImpl:()=>Ff,sparseReshapeImpl:()=>Pf,sparseSegmentReductionImpl:()=>Nc,sqrtImpl:()=>T_,squaredDifferenceImpl:()=>uI,staticRegexReplaceImpl:()=>pI,stridedSliceImpl:()=>Of,stringNGramsImpl:()=>gp,stringSplitImpl:()=>xp,stringToHashBucketFastImpl:()=>yp,subImpl:()=>lI,tileImpl:()=>Mf,topKImpl:()=>Lf,transposeImpl:()=>vc,uniqueImpl:()=>bp});function LS(r){let t=new Float32Array(r.length);for(let e=0;e<r.length;++e)t[e]=Math.abs(r[e]);return t}var F8=r=>{let{x:t}=r.inputs,e=r.backend;Q(t,"abs");let o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId).values;return o=LS(n),e.makeOutput(o,t.shape,t.dtype)},jT={kernelName:Xs,backendName:"cpu",kernelFunc:F8};function ze(r){return(t,e,o,n,s)=>{let a=w.assertAndGetBroadcastShape(t,e),i=a.length,p=y.computeStrides(a),u=y.sizeFromShape(a),c=y.getTypedArrayFromDType(s,u),l=t.length,m=e.length,d=y.computeStrides(t),f=y.computeStrides(e),h=w.getBroadcastDims(t,a),g=w.getBroadcastDims(e,a);if(h.length+g.length===0)for(let x=0;x<c.length;++x)c[x]=r(o[x%o.length],n[x%n.length]);else for(let x=0;x<c.length;++x){let b=y.indexToLoc(x,i,p),C=b.slice(-l);h.forEach(E=>C[E]=0);let S=y.locToIndex(C,l,d),k=b.slice(-m);g.forEach(E=>k[E]=0);let _=y.locToIndex(k,m,f);c[x]=r(o[S],n[_])}return[c,a]}}function Kt(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,i=e.makeTensorInfo(o.shape,"complex64"),p=e.data.get(i.dataId);return p.complexTensorInfos={real:e.makeTensorInfo(o.shape,"float32",s),imag:e.makeTensorInfo(n.shape,"float32",a)},i}var XT={kernelName:Fi,backendName:"cpu",kernelFunc:Kt};function wc(r,t,e="float32"){if(e==="complex64"){let n=wc(r,t,"float32"),s=wc(r,t,"float32");return Kt({inputs:{real:n,imag:s},backend:r})}let o=y.makeZerosTypedArray(y.sizeFromShape(t),e);return r.makeTensorInfo(t,e,o)}function mr(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var YT={kernelName:wo,backendName:"cpu",kernelFunc:mr};function Ro(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.real,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var QT={kernelName:qi,backendName:"cpu",kernelFunc:Ro};function BS(r,t,e,o){if(o==="int32"){let n=Int32Array.from(r);return[t,"int32",n]}if(o==="bool"){let n=y.toTypedArray([0],e),[s,a]=ze((i,p)=>i!==p?1:0)(t,[],r,n,"bool");return[a,"bool",s]}throw new Error(`Error in Cast: failed to cast ${e} to ${o}`)}function Do(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return mr({inputs:{x:n},backend:e});let c=wc(e,n.shape,n.dtype),l=Do({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),m=Kt({inputs:{real:l,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(l),m}if(n.dtype==="complex64"){let c=Ro({inputs:{input:n},backend:e}),l=Do({inputs:{x:c},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(c),l}if(!y.hasEncodingLoss(n.dtype,s)){let c=mr({inputs:{x:n},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:s}}let a=e.data.get(n.dataId).values,[i,p,u]=BS(a,n.shape,n.dtype,s);return e.makeTensorInfo(i,p,u)}var ZT={kernelName:bo,backendName:"cpu",kernelFunc:Do};function Ye(r,t,e,o){return e==null?({inputs:n,backend:s})=>{let{a,b:i}=n,p=s;Q([a,i],r);let u=p.data.get(a.dataId).values,c=p.data.get(i.dataId).values,l=a.dtype==="string"?w.fromUint8ToStringArray(u):u,m=a.dtype==="string"?w.fromUint8ToStringArray(c):c,d=o||a.dtype,[f,h]=t(a.shape,i.shape,l,m,d);return p.makeTensorInfo(h,d,f)}:({inputs:n,backend:s})=>{let{a,b:i}=n,p=s;if(a.dtype==="complex64"||i.dtype==="complex64"){let u=Do({inputs:{x:a},backend:p,attrs:{dtype:"complex64"}}),c=p.data.get(u.dataId),l=c.complexTensorInfos.real,m=c.complexTensorInfos.imag,d=p.data.get(l.dataId).values,f=p.data.get(m.dataId).values,h=Do({inputs:{x:i},backend:p,attrs:{dtype:"complex64"}}),g=p.data.get(h.dataId),x=g.complexTensorInfos.real,b=g.complexTensorInfos.imag,C=p.data.get(x.dataId).values,S=p.data.get(b.dataId).values,[k,_,E]=e(a.shape,i.shape,d,f,C,S),R=p.makeTensorInfo(E,"float32",k),D=p.makeTensorInfo(E,"float32",_),P=Kt({inputs:{real:R,imag:D},backend:p});return p.disposeIntermediateTensorInfo(u),p.disposeIntermediateTensorInfo(h),p.disposeIntermediateTensorInfo(R),p.disposeIntermediateTensorInfo(D),P}else{let u=p.data.get(a.dataId).values,c=p.data.get(i.dataId).values,l=o||a.dtype,[m,d]=t(a.shape,i.shape,u,c,l);return p.makeTensorInfo(d,l,m)}}}function Sc(r){return(t,e,o,n,s,a)=>{let i=w.assertAndGetBroadcastShape(t,e),p=y.sizeFromShape(i),u=i.length,c=y.computeStrides(i),l=y.getTypedArrayFromDType("float32",p),m=y.getTypedArrayFromDType("float32",p),d=w.getBroadcastDims(t,i),f=w.getBroadcastDims(e,i),h=w.mergeRealAndImagArrays(o,n),g=w.mergeRealAndImagArrays(s,a),x=t.length,b=y.computeStrides(t),C=e.length,S=y.computeStrides(e);if(d.length+f.length===0)for(let k=0;k<l.length;k++){let _=k%h.length,E=k%g.length,R=r(h[_*2],h[_*2+1],g[E*2],g[E*2+1]);l[k]=R.real,m[k]=R.imag}else for(let k=0;k<l.length;k++){let _=y.indexToLoc(k,u,c),E=_.slice(-x);d.forEach(M=>E[M]=0);let R=y.locToIndex(E,x,b),D=_.slice(-C);f.forEach(M=>D[M]=0);let P=y.locToIndex(D,C,S),O=r(h[R*2],h[R*2+1],g[P*2],g[P*2+1]);l[k]=O.real,m[k]=O.imag}return[l,m,i]}}var zS=ze((r,t)=>r+t),P8=Sc((r,t,e,o)=>({real:r+e,imag:t+o})),Oa=Ye(uo,zS,P8),JT={kernelName:uo,backendName:"cpu",kernelFunc:Oa};function Ic(r,t,e,o,n){let s=y.sizeFromShape(o),a=y.makeZerosTypedArray(n,e);for(let i=0;i<r.length;i++){let p=r[i];if(p<0)throw new Error("Input x must be non-negative!");p>=n||(s>0?a[p]+=t[i]:a[p]+=1)}return a}function Nf(r,t,e,o=!1){let n=r.shape[0],s=r.shape[1],a=me([n,e],t.dtype);for(let i=0;i<n;i++)for(let p=0;p<s;p++){let u=r.get(i,p);if(u<0)throw new Error("Input x must be non-negative!");u>=e||(o?a.set(1,i,u):t.size>0?a.set(a.get(i,u)+t.get(i,p),i,u):a.set(a.get(i,u)+1,i,u))}return a}var VS=ze((r,t)=>r&t),O8=Ye(ja,VS),e_={kernelName:ja,backendName:"cpu",kernelFunc:O8};function Xt(r){return(t,e,o)=>{let n=y.getArrayFromDType(e,t.length);for(let s=0;s<t.length;++s)n[s]=r(t[s],o);return n}}function Ie(r,t,e){let o=Xt(t);return Ar(r,o,e)}function Ar(r,t,e){return({inputs:o,attrs:n,backend:s})=>{let{x:a}=o;Q(a,r);let i=s,p=i.data.get(a.dataId).values,u;if(a.dtype==="string"){if(!Array.isArray(p))throw new Error("String tensor's value was not an instance of Array");u=w.fromUint8ToStringArray(p)}else u=p;let c=e||a.dtype,l=t(u,c,n);return i.makeTensorInfo(a.shape,c,l)}}var WS=Xt(r=>Math.ceil(r)),M8=Ar(tn,WS),t_={kernelName:tn,backendName:"cpu",kernelFunc:M8};function mp(r,t,e,o){let n=y.getArrayFromDType(e,y.sizeFromShape(t));if(o&&e!=="string"){let s=0;r.forEach(a=>{let i=y.sizeFromShape(a.shape);n.set(a.vals,s),s+=i})}else{let s=0;r.forEach(a=>{let i=e==="string"?w.fromUint8ToStringArray(a.vals):a.vals,p=0;for(let u=0;u<a.shape[0];++u){let c=u*t[1]+s;for(let l=0;l<a.shape[1];++l)n[c+l]=i[p++]}s+=a.shape[1]})}return n}var US=ze((r,t)=>r===t?1:0),GS=Ye(yn,US,null,"bool"),r_={kernelName:yn,backendName:"cpu",kernelFunc:GS};var HS=Xt(r=>Math.exp(r)),KS=Ar(bn,HS,"float32"),o_={kernelName:bn,backendName:"cpu",kernelFunc:KS};var qS=Xt(r=>Math.expm1(r)),L8=Ar(Cn,qS),n_={kernelName:Cn,backendName:"cpu",kernelFunc:L8};var jS=Xt(r=>Math.floor(r)),B8=Ar(Sn,jS),s_={kernelName:Sn,backendName:"cpu",kernelFunc:B8};var XS=ze((r,t)=>Math.floor(r/t)),z8=Ye(In,XS,null,"int32"),a_={kernelName:In,backendName:"cpu",kernelFunc:z8};function Tf(r,t,e,o,n,s,a,i,p){let u=me([o,s],e);for(let c=0;c<o;c++){let l=[],m=0;for(let d=0;d<n;d++){let f=r[c*n+d];m+=f*a[d],l.push(f)}if(m<0||m>=p/s)throw new Error(`Invalid indices: ${l} does not index into ${i}`);for(let d=0;d<s;d++)u.values[c*s+d]=t.get(...t.indexToLoc(m*s+d))}return u}function _f(r,t,e){let o=me(e,r.dtype);for(let n=0;n<o.size;++n){let a=o.indexToLoc(n).slice(),i=a[0],p=a[2],u=t.locToIndex([i,p]);a[2]=t.values[u];let c=r.locToIndex(a);0<=c&&c<r.values.length&&(o.values[n]=r.values[c])}return o}var YS=ze((r,t)=>r>t?1:0),V8=Ye(Nn,YS,null,"bool"),i_={kernelName:Nn,backendName:"cpu",kernelFunc:V8};var QS=ze((r,t)=>r>=t?1:0),W8=Ye(Tn,QS,null,"bool"),u_={kernelName:Tn,backendName:"cpu",kernelFunc:W8};var ZS=ze((r,t)=>r<t?1:0),U8=Ye(Dn,ZS,null,"bool"),p_={kernelName:Dn,backendName:"cpu",kernelFunc:U8};var JS=ze((r,t)=>r<=t?1:0),G8=Ye(An,JS,null,"bool"),c_={kernelName:An,backendName:"cpu",kernelFunc:G8};function $f(r,t,e){let o=(t-r)/(e-1),n=y.makeZerosTypedArray(e,"float32");n[0]=r;for(let s=1;s<n.length;s++)n[s]=n[s-1]+o;return n}var eI=Xt(r=>Math.log(r)),H8=Ar(Pn,eI),l_={kernelName:Pn,backendName:"cpu",kernelFunc:H8};function Ef(r,t,e,o){let n=y.getTypedArrayFromDType(o,y.sizeFromShape(e));for(let s=0;s<n.length;++s){let a=s*t,i=r[a];for(let p=0;p<t;++p){let u=r[a+p];(Number.isNaN(u)||u>i)&&(i=u)}n[s]=i}return n}var tI=ze((r,t)=>Math.max(r,t)),K8=Ye(Wn,tI),m_={kernelName:Wn,backendName:"cpu",kernelFunc:K8};var rI=ze((r,t)=>Math.min(r,t)),q8=Ye(Kn,rI),d_={kernelName:Kn,backendName:"cpu",kernelFunc:q8};var zl=ze((r,t)=>r*t),j8=Sc((r,t,e,o)=>({real:r*e-t*o,imag:r*o+t*e})),dp=Ye(Yn,zl,j8),f_={kernelName:Yn,backendName:"cpu",kernelFunc:dp};function oI(r,t,e){let o=y.createScalarValue(-1,e);return zl([],t,o,r,e)}function X8(r){let{inputs:t,backend:e}=r,{x:o}=t;Q(o,"neg");let n=e.data.get(o.dataId).values,[s,a]=oI(n,o.shape,o.dtype);return e.makeTensorInfo(a,o.dtype,s)}var h_={kernelName:pa,backendName:"cpu",kernelFunc:X8};var nI=ze((r,t)=>r!==t?1:0),Y8=Ye(Qn,nI,null,"bool"),g_={kernelName:Qn,backendName:"cpu",kernelFunc:Y8};function vc(r,t,e,o,n){let s=t.length,a=y.sizeFromShape(t),i=y.computeStrides(t),p=y.computeStrides(n),u=y.getTypedArrayFromDType(e,y.sizeFromShape(n));for(let c=0;c<a;++c){let l=y.indexToLoc(c,s,i),m=new Array(l.length);for(let f=0;f<m.length;f++)m[f]=l[o[f]];let d=y.locToIndex(m,s,p);u[d]=r[c]}return u}function It(r){let{inputs:t,attrs:e,backend:o}=r,{x:n}=t,{perm:s}=e;Q(n,"transpose");let a=n.shape.length,i=new Array(a);for(let l=0;l<i.length;l++)i[l]=n.shape[s[l]];let p=o.data.get(n.dataId).values,u=vc(p,n.shape,n.dtype,s,i);return{dataId:o.write(u,i,n.dtype),shape:i,dtype:n.dtype}}var x_={kernelName:co,backendName:"cpu",kernelFunc:It};function sI(r,t,e,o){let[n,s]=w.computeOutAndReduceShapes(r,o),a=dt(t,"int32"),i=y.makeZerosTypedArray(y.sizeFromShape(n),a),p=y.sizeFromShape(s);for(let u=0;u<i.length;++u){let c=u*p,l=1;for(let m=0;m<p;++m)l*=e[c+m];i[u]=l}return{outVals:i,outShape:n,outDtype:a}}function Q8(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;Q(n,"prod");let i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=w.getAxesPermutation(p,i),c=p,l=n,m=[];u!=null&&(l=It({inputs:{x:n},backend:e,attrs:{perm:u}}),m.push(l),c=w.getInnerMostAxes(c.length,i));let d=e.data.get(l.dataId).values,{outVals:f,outShape:h,outDtype:g}=sI(l.shape,l.dtype,d,c),x=h;return a&&(x=w.expandShapeToKeepDim(h,p)),m.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.makeTensorInfo(x,g,f)}var y_={kernelName:ns,backendName:"cpu",kernelFunc:Q8};function Z8(r,t,e){r.forEach((o,n)=>{if(o<0||o>=e){let s=y.indexToLoc(n,t.length,y.computeStrides(t)).join(",");throw new Error(`indices[${s}] = ${o} is not in [0, ${e})`)}})}function J8(r,t){for(let e=0;e<r.length;++e){let o=r[e],n=e===r.length-1?t:r[e+1].length;if(o.length===0)throw new Error("Ragged splits may not be empty");if(o[0]<0)throw new Error("Ragged splits must be non-negative");if(o[o.length-1]>n)throw new Error("Ragged splits must not point past values");for(let s=1;s<o.length;++s)if(o[s-1]>o[s])throw new Error("Ragged splits must be sorted in ascending order")}}function eY(r,t,e,o){let n=[],s=0,a=t.length-1+e.length,i=new Array(a).fill(null).map(()=>[0]);J8(e,o);let p=1;for(let u=0;u<t.length-1;++u){p*=t[u];let c=t[u+1];for(let l=1;l<p+1;++l)i[u].push(l*c)}for(let u=0;u<r.length;++u){let c=r[u],l=r[u]+1;for(let m=0;m<e.length;++m){let d=e[m],f=m+t.length-1;if(f>=0){let h=i[f],g=h[h.length-1]-d[c];for(let x=c;x<l;++x)i[f].push(d[x+1]+g)}c=d[c],l=d[l]}l!==c&&(n.push([c,l]),s+=l-c)}return{outSplits:i,valueSlices:n,numValues:s}}function tY(r){let t=[];for(let e=0;e<r.length;++e){let o=r[e].length,n=y.getArrayFromDType("int32",o);t.push(n),r[e].forEach((s,a)=>n[a]=s)}return t}function b_(r,t){let e=r.slice(0,t);for(;e.length<t;)e.push(1);for(let o=t;o<r.length;o++)e[t-1]*=r[o];return e}function rY(r,t,e,o,n,s){let a=b_(t,2)[1],i=b_(s,2)[1],p=0;for(let u of e)for(let c=u[0];c<u[1];++c){for(let l=0;l<o;++l)n[p*i+l]=r[c*a+l];++p}}function oY(r,t,e,o,n){let s=t.slice();s[0]=n;let a=y.getArrayFromDType(e,y.sizeFromShape(s)),i=r.length,p=i===0?0:i/t[0];return rY(r,t,o,p,a,s),[a,s]}function Rf(r,t,e,o,n,s,a,i){if(r.length===0)throw new Error("paramsNestedSplits must be non empty");if(t[0].length===0)throw new Error("Split tensors must not be scalars");let p=t[0][0]-1;if(Z8(s,a,p),o.length===0)throw new Error("params.rank must be nonzero");let u=o[0],{outSplits:c,valueSlices:l,numValues:m}=eY(s,a,r,u),d=tY(c),f=oY(e,o,n,l,m);return[d,f[0],f[1]]}var C_=2147483647;function Df(r,t,e,o,n,s,a){if(t.length>1)throw new Error("starts must be a scalar or vector");if(n.length>1)throw new Error("limits must be a scalar or vector");if(a.length>1)throw new Error("deltas must be a scalar or vector");let i=t.length===0,p=n.length===0,u=a.length===0,c=[];i||c.push(t[0]),p||c.push(n[0]),u||c.push(a[0]);for(let g=1;g<c.length;++g)if(c[g]!==c[g-1])throw new Error("starts, limits, and deltas must have the same shape");let l=c.length===0?1:c[0],m=y.getArrayFromDType("int32",l+1);m[0]=0;for(let g=0;g<l;++g){let x=i?r[0]:r[g],b=p?o[0]:o[g],C=u?s[0]:s[g];if(C===0)throw new Error("Requires delta != 0");let S;if(C>0&&b<x||C<0&&b>x)S=0;else if(S=Math.ceil(Math.abs((b-x)/C)),S>C_)throw new Error(`Requires ((limit - start) / delta) <= ${C_}`);m[g+1]=m[g]+S}let d=m[l],f=y.getArrayFromDType(e,d),h=0;for(let g=0;g<l;++g){let x=m[g+1]-m[g],b=i?r[0]:r[g],C=u?s[0]:s[g];for(let S=0;S<x;++S)f[h++]=b,b+=C}return[m,f]}var Ao=w.RowPartitionType,kc=class{constructor(t,e,o,n,s,a,i,p,u,c){this.shape=t,this.shapeShape=e,this.values=o,this.valuesShape=n,this.valuesDType=s,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=p,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=w.getRowPartitionTypesHelper(c),this.raggedRank=w.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===Ao.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===Ao.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){let e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case Ao.VALUE_ROWIDS:return kc.getMaxWidthValueRowID(e);case Ao.ROW_SPLITS:return kc.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${Ao[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){let e=t.length;if(e===0||e===1)return 0;let o=0;for(let n=0;n<e-1;++n){let s=t[n+1]-t[n];s>o&&(o=s)}return o}static getMaxWidthValueRowID(t){let e=t.length;if(e===0)return 0;let o=0,n=t[0],s=0;for(let a=1;a<e;++a){let i=t[a];i!==n&&(n=i,s=Math.max(a-o,s),o=a)}return Math.max(e-o,s)}tensorShapeFromTensor(t,e,o=!0){if(e.length===0){if(t[0]===-1)return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return S_(t,o)}calculateOutputSize(t){let e=this.valuesShape,o=this.defaultValueShape;w.validateDefaultValueShape(o,e);let n=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=w.combineRaggedTensorToTensorShapes(this.raggedRank,n,e);a[0]<0&&(a[0]=t);for(let i=1;i<=this.raggedRank;++i)a[i]<0&&(a[i]=this.getMaxWidth(i));return a}calculateFirstParentOutputIndex(t,e,o){let n=Math.min(t,o),s=[],a=0;for(let i=0;i<n;++i,a+=e)s.push(a);for(let i=n;i<t;++i)s.push(-1);return y.assert(s.length===t,()=>"Final length of result must be equal to firstDimension."),s}calculateOutputIndexRowSplit(t,e,o,n){let s=t.length,a=[];for(let i=0;i<s-1;++i){let p=t[i+1]-t[i],u=Math.min(n,p),c=e[i];c===-1&&(u=0);for(let l=0;l<u;++l)a.push(c),c+=o;for(let l=0;l<p-u;++l)a.push(-1)}if(s>0&&a.length!==t[s-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(t,e,o,n){let s=t.length,a=[];if(s===0)return[];let i=0,p=t[0];if(p>=e.length)throw new Error(`Got currentValueRowId=${p}, which is not less than ${e.length}`);let u=e[p];a.push(u);for(let c=1;c<s;++c){let l=t[c];if(l===p)u>=0&&(++i,i<n?u+=o:u=-1);else{if(i=0,p=l,l>=e.length)throw new Error(`Got nextValueRowId=${l} which is not less than ${e.length}`);u=e[l]}a.push(u)}if(a.length!==t.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(t,e,o,n){let s=this.getRowPartitionTensor(t),a=this.getRowPartitionTypeByDimension(t);switch(a){case Ao.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(s,e,o,n);case Ao.ROW_SPLITS:if(s.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${s.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(s,e,o,n);default:throw new Error(`Unsupported partition type: ${Ao[a]}`)}}getFirstDimensionSize(){let t=this.rowPartitionValues[0];if(this.rowPartitionTypes.length===0)throw new Error("No row_partition_types given.");let e=this.rowPartitionTypes[0];switch(e){case Ao.FIRST_DIM_SIZE:return t[0];case Ao.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Ao.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Ao[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");let e=this.getFirstDimensionSize(),o=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let p=n.length-2;p>=0;--p)n[p]=n[p+1]*o[p+1];let s=S_(o,!1),a=y.getArrayFromDType(this.valuesDType,y.sizeFromShape(s));if(n[0]*o[0]>0){let p=this.calculateFirstParentOutputIndex(e,n[0],o[0]);for(let u=1;u<=this.raggedRank;++u)p=this.calculateOutputIndex(u-1,p,n[u],o[u]);this.setOutput(this.raggedRank,p,a,s)}return[s,a]}setOutput(t,e,o,n){if(o.length===0)return;let s=this.values,a=o,i=n.slice();i=i.slice(t+1);let p=y.sizeFromShape(i),u=e.length,c=this.defaultValue;if(c.length!==p&&c.length!==1){let f=this.defaultValueShape;De(()=>{let h=W(c,f);c=iu(h,i).dataSync()})}let l=0,m=0,d=0;for(let f=0;f<=u;++f){let h=f<u?e[f]:-1;if(h===d){++d;continue}if(m<d){let g=s.subarray(l*p),x=a.subarray(m*p),b=(d-m)*p;w_(x,g,b)}if(f>=u){let g=o.length;h=Math.floor(g/p)}if(h>d)if(this.defaultValue.length===1)a.subarray(d*p,h*p).fill(this.defaultValue[0]),d=h;else for(;h>d;){let g=a.slice(d*p);w_(g,c,p),++d}h<0?(l=f+1,m=d):(l=f,m=d,d=m+1)}}};function w_(r,t,e){for(let o=0;o<e;o++)r[o]=t[o]}function S_(r,t){let e=[];for(let o of r){if(o<0){if(!t)throw new Error(`Dimension ${o} must be >= 0`);if(o<-1)throw new Error(`Dimension ${o} must be >= -1`);o=-1}e.push(o)}return e}function Af(r,t,e,o,n,s,a,i,p,u){return new kc(r,t,e,o,n,s,a,i,p,u).compute()}function fp(r,t,e,o){let n=r===t,s=r<t&&e<0,a=t<r&&e>1;if(n||s||a)return y.makeZerosTypedArray(0,o);let i=Math.abs(Math.ceil((t-r)/e)),p=y.makeZerosTypedArray(i,o);t<r&&e===1&&(e=-1),p[0]=r;for(let u=1;u<p.length;u++)p[u]=p[u-1]+e;return p}var aI=Xt(r=>1/Math.sqrt(r)),nY=Ar(ms,aI),I_={kernelName:ms,backendName:"cpu",kernelFunc:nY};function zs(r,t,e,o,n,s,a,i,p,u){let c=[o/n,n],l=r.values,m=t.values;if(o===0)return me(e,t.dtype);let d=p instanceof tt?p:me(c,t.dtype);typeof p=="string"||typeof p=="number"?d.values.fill(p):typeof p=="boolean"&&d.values.fill(+p);for(let f=0;f<s;f++){let h=[],g=0;for(let x=0;x<a;x++){let b=l[f*a+x];h.push(b),g+=b*i[x]}if(g<0||g>=o/n)throw new Error(`Invalid indices: ${h} does not index into ${e}`);for(let x=0;x<n;x++)u?d.values[g*n+x]+=m[f*n+x]:d.values[g*n+x]=t.rank===0?m[0]:m[f*n+x]}return d}var v_=Xt(r=>1/(1+Math.exp(-r))),iI=Ie(Cs,r=>1/(1+Math.exp(-r))),k_={kernelName:Cs,backendName:"cpu",kernelFunc:iI};function hp(r,t,e,o,n){let s=ct.isSliceContinous(o,t,e),a=y.sizeFromShape(e),i=y.computeStrides(o);if(s){let l=ct.computeFlatOffset(t,i);return n==="string"?r.slice(l,l+a):r.subarray(l,l+a)}let p=n==="string"?w.fromUint8ToStringArray(r):r,u=me(o,n,p),c=me(e,n);for(let l=0;l<c.size;++l){let m=c.indexToLoc(l),d=m.map((f,h)=>f+t[h]);c.set(u.get(...d),...m)}return n==="string"?w.fromStringArrayToUint8(c.values):c.values}function Fo(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:a}=o;Q(n,"slice");let[i,p]=ct.parseSliceParams(n,s,a);ct.assertParamsValid(n,i,p);let u=e.data.get(n.dataId).values,c=hp(u,i,p,n.shape,n.dtype);return e.makeTensorInfo(p,n.dtype,c)}var N_={kernelName:ha,backendName:"cpu",kernelFunc:Fo};function Ff(r,t,e,o,n,s,a){let i=t[0],p=s[0],u=new Array(p),c=new Array(i),l=t[1];if(p===0){if(i!==0)throw new Error(w.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));let g=y.getArrayFromDType(e,0),x=y.getArrayFromDType(n,0);return[g,[0,l],x,u,c]}let m=!0,d=0,f=new Array(p).fill(0);for(let g=0;g<i;++g){let x=r[g*l];if(x<0)throw new Error(w.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,x));if(x>=p)throw new Error(w.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,x,p));++f[x],m=m&&x>=d,d=x}let h=!0;for(let g=0;g<p;++g){let x=f[g]===0;u[g]=x,h=h&&!x,f[g]=Math.max(f[g],1),g>0&&(f[g]+=f[g-1])}if(h&&m){let g=r,x=o;for(let b=0;b<i;++b)c[b]=b;return[g,[i,l],x,u,c]}else{let g=f[p-1],x=y.getArrayFromDType(e,g*l),b=y.getArrayFromDType(n,g),C=new Array(p).fill(0);for(let S=0;S<i;++S){let k=r[S*l],_=C[k],E=(k===0?0:f[k-1])+_;C[k]++;for(let R=0;R<l;++R)x[E*l+R]=r[S*l+R];b[E]=o[S],c[S]=E}for(let S=0;S<p;++S)if(C[S]===0){let _=S===0?0:f[S-1];x[_*l+0]=S;for(let E=1;E<l;++E)x[_*l+E]=0;b[_]=a}return[x,[g,l],b,u,c]}}function Pf(r,t,e,o,n){let s=y.sizeFromShape(o),a=t[0],i=n.length,p=[],u=1,c=-1;for(let g=0;g<i;++g){let x=n[g];if(x===-1){if(c!==-1)throw new Error(w.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,g));c=g,p.push(1)}else{if(x<0)throw new Error(w.getSparseReshapeNegativeOutputDimErrorMessage(g,x));u*=x,p.push(x)}}if(c!==-1){if(u<=0)throw new Error(w.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let g=Math.trunc(s/u);if(u*g!==s)throw new Error(w.getSparseReshapeInputOutputMultipleErrorMessage(o,p));p[c]=g}if(y.sizeFromShape(p)!==s)throw new Error(w.getSparseReshapeInputOutputMismatchErrorMessage(o,p));let m=o.length,d=[];if(m>0){d[m-1]=1;for(let g=m-2;g>=0;--g)d[g]=d[g+1]*o[g+1]}let f=[];if(i>0){f[i-1]=1;for(let g=i-2;g>=0;--g)f[g]=f[g+1]*p[g+1]}let h=y.getArrayFromDType(e,a*i);for(let g=0;g<a;++g){let x=0;for(let b=0;b<m;++b)x+=r[g*m+b]*d[b];for(let b=0;b<i;++b)h[g*i+b]=Math.trunc(x/f[b]),x%=f[b]}return[h,[a,i],p]}function Nc(r,t,e,o,n,s=!1,a=0){let i=o.length,p=[t[0],r.length/t[0]],u=p[1],l=i>0?n[i-1]+1:0;if(l<0)throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let m=t.slice();m[0]=l;let d=m.reduce((C,S)=>C*S,1),f=y.getArrayFromDType(e,d);if(i===0)return l>0&&f.fill(a),[f,m];if(l<=0)throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let h=0,g=1,x=0,b=n[h];for(;;){let C=0;if(g<i){if(C=n[g],b===C){++g;continue}if(b>=C)throw new Error(w.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=l)throw new Error(w.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,l));b>x&&f.fill(a,x*u,b*u);for(let S=h;S<g;++S){let k=o[S];if(k<0||k>=p[0])throw new Error(w.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(S,o[S],p[0]));for(let _=0;_<u;_++)f[b*u+_]+=r[k*u+_]}if(s)for(let S=0;S<u;S++)f[b*u+S]/=g-h;if(h=g,++g,x=b+1,b=C,g>i)break}return x<l&&f.fill(a,x*u,l*u),[f,m]}var T_=Xt(r=>Math.sqrt(r)),sY=Ie(Ss,r=>Math.sqrt(r)),__={kernelName:Ss,backendName:"cpu",kernelFunc:sY};var uI=ze((r,t)=>{let e=r-t;return e*e}),aY=Ye(Ns,uI),$_={kernelName:Ns,backendName:"cpu",kernelFunc:aY};var pI=Xt((r,t)=>{let{pattern:e,replaceGlobal:o,rewrite:n}=t;return r.replace(new RegExp(e,o?"g":""),n)}),iY=Ar(Ou,pI),E_={kernelName:Ou,backendName:"cpu",kernelFunc:iY};function Of(r,t,e,o){let n=me(r,t.dtype);for(let s=0;s<n.size;s++){let a=n.indexToLoc(s),i=new Array(a.length);for(let p=0;p<i.length;p++)i[p]=a[p]*e[p]+o[p];n.set(t.get(...i),...a)}return n}var cI=class{constructor(t,e,o,n,s,a){this.separator=y.encodeString(t),this.nGramWidths=e,this.leftPad=y.encodeString(o),this.rightPad=y.encodeString(n),this.padWidth=s,this.preserveShort=a}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){let o=this.getPadWidth(e);return Math.max(0,t+2*o-e+1)}createNGrams(t,e,o,n,s,a){for(let i=0;i<s;++i){let p=this.getPadWidth(a),u=Math.max(0,p-i),c=Math.max(0,p-(s-(i+1))),l=a-(u+c),m=e+(u>0?0:i-p),d=0;d+=u*this.leftPad.length;for(let b=0;b<l;++b)d+=t[m+b].length;d+=c*this.rightPad.length;let f=u+c+l-1;d+=f*this.separator.length,o[n+i]=new Uint8Array(d);let h=o[n+i],g=0,x=b=>b.forEach(C=>h[g++]=C);for(let b=0;b<u;++b)x(this.leftPad),x(this.separator);for(let b=0;b<l-1;++b)x(t[m+b]),x(this.separator);if(l>0){x(t[m+l-1]);for(let b=0;b<c;++b)x(this.separator),x(this.rightPad)}else{for(let b=0;b<c-1;++b)x(this.rightPad),x(this.separator);x(this.rightPad)}}}compute(t,e){let o=t.length,n=e.length;if(n>0){let p=e[0];if(p!==0)throw new Error(`First split value must be 0, got ${p}`);for(let u=1;u<n;++u){let c=e[u]>=p;if(c=c&&e[u]<=o,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${p}, ${o}]`);p=e[u]}if(p!==o)throw new Error(`Last split value must be data size. Expected ${o}, got ${p}`)}let s=n-1,a=y.getArrayFromDType("int32",n);if(o===0||n===0){let p=new Array(o);for(let u=0;u<=s;++u)a[u]=0;return[p,a]}a[0]=0;for(let p=1;p<=s;++p){let u=e[p]-e[p-1],c=0;this.nGramWidths.forEach(l=>{c+=this.getNumNGrams(u,l)}),this.preserveShort&&u>0&&c===0&&(c=1),a[p]=a[p-1]+c}let i=new Array(a[s]);for(let p=0;p<s;++p){let u=e[p],c=a[p];if(this.nGramWidths.forEach(l=>{let m=e[p+1]-e[p],d=this.getNumNGrams(m,l);this.createNGrams(t,u,i,c,d,l),c+=d}),this.preserveShort&&c===a[p]){let l=e[p+1]-e[p];if(l===0)continue;let m=l+2*this.padWidth,d=1;this.createNGrams(t,u,i,c,d,m)}}return[i,a]}};function gp(r,t,e,o,n,s,a,i){return new cI(e,o,n,s,a,i).compute(r,t)}function uY(r,t,e,o){if(!r.length)return;if(t.length===0){for(let s=0;s<r.length;++s)o.push(r.subarray(s,s+1));return}if(t.length===1){let s=t[0],a=r.indexOf(s);for(;a!==-1;){let i=r.subarray(0,a);(!e||i.length!==0)&&o.push(i),r=r.subarray(a+1),a=r.indexOf(s)}(!e||r.length!==0)&&o.push(r);return}let n=0;for(let s=0;s<r.length+1;s++)if(s===r.length||t.indexOf(r[s])!==-1){let a=r.subarray(n,s);(!e||a.length!==0)&&o.push(a),n=s+1}}function xp(r,t,e){let o=r.length,n=[],s=0,a=0,i=new Array(o);for(let m=0;m<o;++m){let d=n.length;uY(r[m],t,e,n);let f=n.length-d;i[m]=f,s+=f,a=Math.max(a,f)}let p=y.getArrayFromDType("int32",s*2),u=new Array(s),c=[o,a],l=0;for(let m=0;m<o;++m)for(let d=0;d<i[m];++d)p[l*2]=m,p[l*2+1]=d,u[l]=n[l],++l;return[p,u,c]}function yp(r,t){let e=y.getArrayFromDType("int32",r.length);for(let o=0;o<r.length;++o)e[o]=y.fingerPrint64(r[o]).modulo(t).getLowBitsUnsigned();return e}var lI=ze((r,t)=>r-t),pY=Sc((r,t,e,o)=>({real:r-e,imag:t-o})),Vl=Ye(_s,lI,pY),R_={kernelName:_s,backendName:"cpu",kernelFunc:Vl};function Mf(r,t){let e=new Array(r.rank);for(let n=0;n<e.length;n++)e[n]=r.shape[n]*t[n];let o=me(e,r.dtype);for(let n=0;n<o.values.length;++n){let s=o.indexToLoc(n),a=new Array(r.rank);for(let p=0;p<a.length;p++)a[p]=s[p]%r.shape[p];let i=r.locToIndex(a);o.values[n]=r.values[i]}return o}var Wl=(r,t)=>{let e=t.value-r.value;return e===0?r.index-t.index:e};function D_(r,t,e=0,o=r.length-1){for(;o>e;){if(o-e>600){let i=o-e+1,p=t-e+1,u=Math.log(i),c=.5*Math.exp(2*u/3),l=.5*Math.sqrt(u*c*(i-c)/i)*Math.sign(p-i/2),m=Math.max(e,Math.floor(t-p*c/i+l)),d=Math.min(o,Math.floor(t+(i-p)*c/i+l));D_(r,t,m,d)}let n=r[t],s=e,a=o;for(y.swap(r,e,t),Wl(r[o],n)>0&&y.swap(r,e,o);s<a;){for(y.swap(r,s,a),s++,a--;Wl(r[s],n)<0;)s=s+1;for(;Wl(r[a],n)>0;)a=a-1}Wl(r[e],n)===0?y.swap(r,e,a):(a=a+1,y.swap(r,a,o)),a<=t&&(e=a+1),t<=a&&(o=a-1)}}function Lf(r,t,e,o,n){let s=t[t.length-1],[a,i]=[r.length/s,s],p=y.getTypedArrayFromDType(e,a*o),u=y.getTypedArrayFromDType("int32",a*o);for(let l=0;l<a;l++){let m=l*i,d=r.subarray(m,m+i),f=new Array(d.length);d.forEach((b,C)=>f[C]={value:b,index:C}),o<f.length&&(D_(f,o),f=f.slice(0,o)),n&&f.sort(Wl);let h=l*o,g=p.subarray(h,h+o),x=u.subarray(h,h+o);for(let b=0;b<o;b++)g[b]=f[b].value,x[b]=f[b].index}let c=t.slice();return c[c.length-1]=o,[me(c,e,p),me(c,"int32",u)]}function bp(r,t,e,o){let n=y.parseAxisParam(t,e)[0],s=[1,e[0],1];for(let f=0;f<n;f++)s[0]*=e[f];s[1]=e[n];for(let f=n+1;f<e.length;f++)s[2]*=e[f];let a=new Map,i=new Int32Array(e[n]),p=new tt(s,o,r),u=[],c=s[0]===1&&s[2]===1;for(let f=0;f<e[n];f++){let h;if(c)h=r[f].toString();else{let x=[];for(let b=0;b<s[0];b++)for(let C=0;C<s[2];C++)x.push(p.get(b,f,C));h=x.join(",")}let g=a.get(h);if(g!=null)i[f]=g;else{let x=a.size;a.set(h,x),i[f]=x,u.push(f)}}let l=s.slice();l[1]=a.size;let m=new tt(l,o);u.forEach((f,h)=>{for(let g=0;g<s[0];g++)for(let x=0;x<s[2];x++)m.set(p.get(g,f,x),g,h,x)});let d=e.slice();return d[n]=l[1],{outputValues:m.values,outputShape:d,indices:i}}var cY="4.11.0";su("cpu",()=>new xu,1);var mI=Ie(gn,r=>r>=0?r:Math.exp(r)-1),A_={kernelName:gn,backendName:"cpu",kernelFunc:mI};function dI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o;Q([n],"leakyRelu");let a=y.sizeFromShape(n.shape),i=e.data.get(n.dataId).values,p=y.getTypedArrayFromDType("float32",a);for(let u=0;u<i.length;u++)p[u]=i[u]<0?s*i[u]:i[u];return e.makeTensorInfo(n.shape,"float32",p)}var F_={kernelName:Rn,backendName:"cpu",kernelFunc:dI};var lY=ze((r,t)=>r<0?t*r:r);function fI(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t;Q([o,n],"prelu");let s=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,[i,p]=lY(o.shape,n.shape,s,a,"float32");return e.makeTensorInfo(p,"float32",i)}var P_={kernelName:os,backendName:"cpu",kernelFunc:fI};var hI=Ie(as,r=>Math.max(0,r)),O_={kernelName:as,backendName:"cpu",kernelFunc:hI};var gI=Ie(ps,r=>Math.min(Math.max(0,r),6)),M_={kernelName:ps,backendName:"cpu",kernelFunc:gI};function Cp(r,t,e,o,n){if(e==="linear")return mr({inputs:{x:t},backend:r});if(e==="relu")return hI({inputs:{x:t},backend:r});if(e==="elu")return mI({inputs:{x:t},backend:r});if(e==="relu6")return gI({inputs:{x:t},backend:r});if(e==="prelu")return fI({inputs:{x:t,alpha:o},backend:r});if(e==="leakyrelu")return dI({inputs:{x:t},backend:r,attrs:{alpha:n}});if(e==="sigmoid")return iI({inputs:{x:t},backend:r});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Ve(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,a=y.sizeFromShape(n.shape),i=y.inferFromImplicitShape(s,a),p=y.sizeFromShape(i);y.assert(a===p,()=>`The new shape (${i}) has ${p} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),e.incRef(n.dataId);let u=e.data.get(n.dataId);if(u.complexTensorInfos!=null){let c=u.complexTensorInfos.real,l=u.complexTensorInfos.imag;c.shape=i,l.shape=i}return{dataId:n.dataId,shape:i,dtype:n.dtype}}var L_={kernelName:da,backendName:"cpu",kernelFunc:Ve};function xI(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:a,transposeB:i}=o;Q([n,s],"matMul");let p=n.shape.length,u=s.shape.length,c=a?n.shape[p-2]:n.shape[p-1],l=i?s.shape[u-1]:s.shape[u-2],m=a?n.shape[p-1]:n.shape[p-2],d=i?s.shape[u-2]:s.shape[u-1],f=n.shape.slice(0,-2),h=s.shape.slice(0,-2),g=y.sizeFromShape(f),x=y.sizeFromShape(h),C=Ir.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,d]);y.assert(c===l,()=>`Error in matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);let S=a?[g,c,m]:[g,m,c],k=i?[x,d,l]:[x,l,d],_=Ve({inputs:{x:n},backend:e,attrs:{shape:S}}),E=Ve({inputs:{x:s},backend:e,attrs:{shape:k}}),R=a?_.shape[1]:_.shape[2],D=a?_.shape[2]:_.shape[1],P=i?E.shape[1]:E.shape[2],O=Math.max(g,x),M=e.data.get(_.dataId).values,L=e.data.get(E.dataId).values,B=y.computeStrides(_.shape),z=y.computeStrides(E.shape),[U,j,q]=a?[B[0],1,B[1]]:[B[0],B[1],1],[Y,J,re]=i?[1,z[1],z[0]]:[z[1],1,z[0]],ne=D*P,ee=me([O,D,P],_.dtype),oe=ee.values,ie=e.blockSize;for(let le=0;le<O;le++){let be=le%g,_e=le%x;for(let ve=0;ve<D;ve+=ie){let Fe=Math.min(ve+ie,D);for(let Pe=0;Pe<P;Pe+=ie){let st=Math.min(Pe+ie,P);for(let lt=0;lt<R;lt+=ie){let Ge=Math.min(lt+ie,R);for(let mt=ve;mt<Fe;mt++)for(let it=Pe;it<st;it++){let gt=0;for(let xt=lt;xt<Ge;xt++){let Lr=M[be*U+mt*j+xt*q],Lt=L[xt*Y+it*J+_e*re];gt+=Lr*Lt}oe[le*ne+(mt*P+it)]+=gt}}}}}return e.disposeIntermediateTensorInfo(_),e.disposeIntermediateTensorInfo(E),e.makeTensorInfo(C,ee.dtype,ee.values)}var B_={kernelName:Jo,backendName:"cpu",kernelFunc:xI};function mY(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:a,preluActivationWeights:i}=t,{transposeA:p,transposeB:u,activation:c,leakyreluAlpha:l}=o,m,d,f,h=[];m=xI({inputs:{a:n,b:s},attrs:{transposeA:p,transposeB:u},backend:e}),a&&(d=Oa({inputs:{a:m,b:a},backend:e}),h.push(m),m=d),c&&(f=Cp(e,m,c,i,l),h.push(m),m=f);for(let x of h)e.disposeIntermediateTensorInfo(x);return m}var z_={kernelName:Io,backendName:"cpu",kernelFunc:mY};var dY=Ie(Wo,r=>Math.acos(r)),V_={kernelName:Wo,backendName:"cpu",kernelFunc:dY};var fY=Ie(Uo,r=>Math.acosh(r)),W_={kernelName:Uo,backendName:"cpu",kernelFunc:fY};function hY(r){let{inputs:t,backend:e}=r,o=t;Q(t,"addN");let n=o.map(i=>e.data.get(i.dataId).values),s=me(o[0].shape,o[0].dtype),a=s.values;for(let i=0;i<o.length;i++){let p=n[i];for(let u=0;u<a.length;u++)a[u]+=p[u]}return e.makeTensorInfo(s.shape,s.dtype,s.values)}var U_={kernelName:Go,backendName:"cpu",kernelFunc:hY};function gY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;Q(n,"all");let i=y.parseAxisParam(s,n.shape),p=i,u=w.getAxesPermutation(p,n.shape.length),c=n;u!=null&&(c=It({inputs:{x:n},backend:e,attrs:{perm:u}}),p=w.getInnerMostAxes(p.length,n.shape.length)),w.assertAxesAreInnerMostDims("all",p,c.shape.length);let[l,m]=w.computeOutAndReduceShapes(c.shape,p),d=y.sizeFromShape(m),f=y.makeZerosTypedArray(y.sizeFromShape(l),c.dtype),h=e.data.get(c.dataId).values;for(let x=0;x<f.length;++x){let b=x*d,C=h[b];for(let S=0;S<d;++S){let k=h[b+S];C=C&&k}f[x]=C}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(l,c.dtype,f);if(a){let x=w.expandShapeToKeepDim(l,i),b=Ve({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var G_={kernelName:Ho,backendName:"cpu",kernelFunc:gY};function xY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;Q(n,"any");let i=y.parseAxisParam(s,n.shape),p=i,u=w.getAxesPermutation(p,n.shape.length),c=n;u!=null&&(c=It({inputs:{x:n},backend:e,attrs:{perm:u}}),p=w.getInnerMostAxes(p.length,n.shape.length)),w.assertAxesAreInnerMostDims("any",p,c.shape.length);let[l,m]=w.computeOutAndReduceShapes(c.shape,p),d=y.sizeFromShape(m),f=y.makeZerosTypedArray(y.sizeFromShape(l),c.dtype),h=e.data.get(c.dataId).values;for(let x=0;x<f.length;++x){let b=x*d,C=h[b];for(let S=0;S<d;++S){let k=h[b+S];C=C||k}f[x]=C}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(l,c.dtype,f);if(a){let x=w.expandShapeToKeepDim(l,i),b=Ve({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var H_={kernelName:Ko,backendName:"cpu",kernelFunc:xY};function yY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Q(n,"argMax");let a=y.parseAxisParam(s,n.shape),i=w.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=It({inputs:{x:n},backend:e,attrs:{perm:i}}),u.push(p),a=w.getInnerMostAxes(a.length,p.shape.length)),a=[a[0]],w.assertAxesAreInnerMostDims("argMax",a,p.shape.length);let[c,l]=w.computeOutAndReduceShapes(p.shape,a),m=y.sizeFromShape(c),d=y.makeZerosTypedArray(m,"int32"),f=y.sizeFromShape(l),h=e.data.get(p.dataId).values;for(let g=0;g<d.length;++g){let x=g*f,b=h[x],C=0;for(let S=0;S<f;++S){let k=h[x+S];k>b&&(b=k,C=S)}d[g]=C}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",d)}var K_={kernelName:Ys,backendName:"cpu",kernelFunc:yY};function bY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o;Q(n,"argMin");let a=y.parseAxisParam(s,n.shape),i=w.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=It({inputs:{x:n},backend:e,attrs:{perm:i}}),u.push(p),a=w.getInnerMostAxes(a.length,p.shape.length)),a=[a[0]],w.assertAxesAreInnerMostDims("argMin",a,p.shape.length);let[c,l]=w.computeOutAndReduceShapes(p.shape,a),m=y.sizeFromShape(c),d=y.makeZerosTypedArray(m,"int32"),f=y.sizeFromShape(l),h=e.data.get(p.dataId).values;for(let g=0;g<d.length;++g){let x=g*f,b=h[x],C=0;for(let S=0;S<f;++S){let k=h[x+S];k<b&&(b=k,C=S)}d[g]=C}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",d)}var q_={kernelName:Qs,backendName:"cpu",kernelFunc:bY};var CY=Ie(qo,r=>Math.asin(r)),j_={kernelName:qo,backendName:"cpu",kernelFunc:CY};var wY=Ie(jo,r=>Math.asinh(r)),X_={kernelName:jo,backendName:"cpu",kernelFunc:wY};var SY=Ie(Xo,r=>Math.atan(r)),Y_={kernelName:Xo,backendName:"cpu",kernelFunc:SY};var IY=ze((r,t)=>Math.atan2(r,t)),vY=Ye(Qo,IY),Q_={kernelName:Qo,backendName:"cpu",kernelFunc:vY};var kY=Ie(Yo,r=>Math.atanh(r)),Z_={kernelName:Yo,backendName:"cpu",kernelFunc:kY};function _c(r,t,e,o,n,s){let a=n.strideHeight,i=n.strideWidth,p=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,m=n.padInfo.top,d=n.padInfo.left,f=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,h=me(n.outShape,e),g=h.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3],b=n.outShape[2]*n.outShape[3],C=n.outShape[3];for(let S=0;S<n.batchSize;++S){let k=S*x,_=S*o[0];for(let E=0;E<n.inChannels;++E)for(let R=0;R<n.outHeight;++R){let D=R*a-m,P=Math.max(0,D),O=Math.min(n.inHeight,c+D),M=k+R*b;for(let L=0;L<n.outWidth;++L){let B=L*i-d,z=Math.max(0,B),U=Math.min(n.inWidth,l+B),j=f,q=0,Y=0;for(let re=P;re<O;re+=p){let ne=_+re*o[1];for(let ee=z;ee<U;ee+=u){let oe=ne+ee*o[2],ie=r[oe+E];s==="max"&&ie>j?j=ie:s==="avg"&&(q+=ie,Y++)}if(isNaN(j))break}let J=M+L*C+E;g[J]=s==="avg"?q/Y:j}}}return h}function Bf(r,t,e,o,n=!1,s=!1){let a=me(o.outShape,"int32"),i=o.strideHeight,p=o.strideWidth,u=o.dilationHeight,c=o.dilationWidth,l=o.effectiveFilterHeight,m=o.effectiveFilterWidth,d=o.padInfo.top,f=o.padInfo.left,h=me(t,e,r);for(let g=0;g<o.batchSize;++g)for(let x=0;x<o.inChannels;++x)for(let b=0;b<o.outHeight;++b){let C=b*i-d,S=C;for(;S<0;)S+=u;let k=Math.min(o.inHeight,l+C);for(let _=0;_<o.outWidth;++_){let E=_*p-f,R=E;for(;R<0;)R+=c;let D=Math.min(o.inWidth,m+E),P=Number.NEGATIVE_INFINITY,O=-1;for(let M=S;M<k;M+=u){let L=M-C;for(let B=R;B<D;B+=c){let z=B-E,U=h.get(g,M,B,x);U>P&&(P=U,n?O=s?((g*o.inHeight+M)*o.inWidth+B)*o.inChannels+x:(M*o.inWidth+B)*o.inChannels+x:O=L*m+z)}}a.set(O,g,b,_,x)}}return a}function zf(r,t,e,o,n,s){let a=n.strideDepth,i=n.strideHeight,p=n.strideWidth,u=n.dilationDepth,c=n.dilationHeight,l=n.dilationWidth,m=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,h=n.padInfo.front,g=n.padInfo.top,x=n.padInfo.left,b=s==="max"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,C=me(n.outShape,e),S=C.values,k=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],_=n.outShape[2]*n.outShape[3]*n.outShape[4],E=n.outShape[3]*n.outShape[4],R=n.outShape[4];for(let D=0;D<n.batchSize;++D){let P=D*k,O=D*o[0];for(let M=0;M<n.inChannels;++M)for(let L=0;L<n.outDepth;++L){let B=L*a-h,z=B;for(;z<0;)z+=u;let U=Math.min(n.inDepth,m+B),j=P+L*_;for(let q=0;q<n.outHeight;++q){let Y=q*i-g,J=Y;for(;J<0;)J+=c;let re=Math.min(n.inHeight,d+Y),ne=j+q*E;for(let ee=0;ee<n.outWidth;++ee){let oe=ee*p-x,ie=oe;for(;ie<0;)ie+=l;let le=Math.min(n.inWidth,f+oe),be=ne+ee*R,_e=b,ve=0,Fe=0;for(let st=z;st<U;st+=u){let lt=O+st*o[1];for(let Ge=J;Ge<re;Ge+=c){let mt=lt+Ge*o[2];for(let it=ie;it<le;it+=l){let gt=mt+it*o[3],xt=r[gt+M];if(s==="max"&&xt>_e?_e=xt:s==="avg"&&(ve+=xt,Fe++),isNaN(_e))break}if(isNaN(_e))break}if(isNaN(_e))break}let Pe=be+M;S[Pe]=s==="avg"?ve/Math.max(Fe,1):_e}}}}return C}function J_(r,t){let e=me(t.outShape,"int32"),o=t.strideDepth,n=t.strideHeight,s=t.strideWidth,a=t.dilationDepth,i=t.dilationHeight,p=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,l=t.effectiveFilterWidth,m=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let h=0;h<t.batchSize;++h)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){let b=x*o-m,C=b;for(;C<0;)C+=a;let S=Math.min(t.inDepth,u+b);for(let k=0;k<t.outHeight;++k){let _=k*n-d,E=_;for(;E<0;)E+=i;let R=Math.min(t.inHeight,c+_);for(let D=0;D<t.outWidth;++D){let P=D*s-f,O=P;for(;O<0;)O+=p;let M=Math.min(t.inWidth,l+P),L=Number.NEGATIVE_INFINITY,B=-1;for(let z=C;z<S;z+=a){let U=z-b;for(let j=E;j<R;j+=i){let q=j-_;for(let Y=O;Y<M;Y+=p){let J=Y-P,re=r.get(h,z,j,Y,g);re>=L&&(L=re,B=U*c*l+q*c+J)}}}e.set(B,h,x,k,D,g)}}}return e}function NY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Q(n,"avgPool");let{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(a,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,a,u,i,p),l;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))l=mr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,d=y.computeStrides(n.shape),f=_c(m,n.shape,n.dtype,d,c,"avg");l=e.makeTensorInfo(c.outShape,n.dtype,f.values)}return l}var e$={kernelName:Zo,backendName:"cpu",kernelFunc:NY};function TY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o;Q(n,"avgPool3d");let c=w.computePool3DInfo(n.shape,s,a,1,i,p,u),l=e.data.get(n.dataId).values,m=zf(l,n.shape,n.dtype,y.computeStrides(n.shape),c,"avg");return e.makeTensorInfo(m.shape,"float32",m.values)}var t$={kernelName:Zs,backendName:"cpu",kernelFunc:TY};function _Y(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o;Q([n,s],"avgPool3DGrad");let c=w.computePool3DInfo(s.shape,a,i,1,p,u),l=c.strideDepth,m=c.strideHeight,d=c.strideWidth,f=c.filterDepth,h=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,C=c.dilationWidth,S=c.effectiveFilterDepth,k=c.effectiveFilterHeight,_=c.effectiveFilterWidth,E=S-1-c.padInfo.front,R=_-1-c.padInfo.left,D=k-1-c.padInfo.top,P=me(s.shape,"float32"),O=1/(f*h*g),M=e.bufferSync(n);for(let L=0;L<c.batchSize;++L)for(let B=0;B<c.inChannels;++B)for(let z=0;z<c.inDepth;++z)for(let U=0;U<c.inHeight;++U)for(let j=0;j<c.inWidth;++j){let q=z-E,Y=U-D,J=j-R,re=0;for(let ne=0;ne<S;ne+=x){let ee=(q+ne)/l;if(!(ee<0||ee>=c.outDepth||Math.floor(ee)!==ee))for(let oe=0;oe<k;oe+=b){let ie=(Y+oe)/m;if(!(ie<0||ie>=c.outHeight||Math.floor(ie)!==ie))for(let le=0;le<_;le+=C){let be=(J+le)/d;if(be<0||be>=c.outWidth||Math.floor(be)!==be)continue;let _e=M.get(L,ee,ie,be,B);re+=_e}}}P.set(re*O,L,z,U,j,B)}return e.makeTensorInfo(P.shape,P.dtype,P.values)}var r$={kernelName:Ai,backendName:"cpu",kernelFunc:_Y};function $Y(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,a=s;Q([n,s],"avgPoolGrad");let{filterSize:i,strides:p,pad:u}=o,c=w.computePool2DInfo(a.shape,i,p,1,u),l=c.strideHeight,m=c.strideWidth,d=c.filterHeight,f=c.filterWidth,h=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,C=b-1-c.padInfo.left,S=x-1-c.padInfo.top,k=me(a.shape,"float32"),_=1/(d*f),E=e.data.get(n.dataId).values,R=me(n.shape,"float32",E);for(let D=0;D<c.batchSize;++D)for(let P=0;P<c.inChannels;++P)for(let O=0;O<c.inHeight;++O)for(let M=0;M<c.inWidth;++M){let L=O-S,B=M-C,z=0;for(let U=0;U<x;U+=h){let j=(L+U)/l;if(!(j<0||j>=c.outHeight||Math.floor(j)!==j))for(let q=0;q<b;q+=g){let Y=(B+q)/m;if(Y<0||Y>=c.outWidth||Math.floor(Y)!==Y)continue;let J=R.get(D,j,Y,P);z+=J}}k.set(z*_,D,O,M,P)}return e.makeTensorInfo(k.shape,k.dtype,k.values)}var o$={kernelName:Di,backendName:"cpu",kernelFunc:$Y};function EY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,scale:s,offset:a,mean:i,variance:p}=t;y.assert(i.shape.length===p.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(a==null||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(s==null||i.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Q([n,i,p,s,a],"batchNorm");let{varianceEpsilon:u}=o;u==null&&(u=.001);let c=e.data.get(n.dataId).values,l=e.data.get(i.dataId).values,m=e.data.get(p.dataId).values,d=s?e.data.get(s.dataId).values:new Float32Array([1]),f=a?e.data.get(a.dataId).values:new Float32Array([0]),h=new Float32Array(c.length),g=f.length,x=d.length,b=m.length,C=l.length,S=0,k=0,_=0,E=0;for(let R=0;R<c.length;++R)h[R]=f[S++]+(c[R]-l[k++])*d[_++]/Math.sqrt(m[E++]+u),S>=g&&(S=0),k>=C&&(k=0),_>=x&&(_=0),E>=b&&(E=0);return e.makeTensorInfo(n.shape,n.dtype,h)}var n$={kernelName:vn,backendName:"cpu",kernelFunc:EY};function RY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:a}=o;Q([n],"batchToSpaceND");let i=s.reduce((x,b)=>x*b),p=w.getReshaped(n.shape,s,i),u=w.getPermuted(p.length,s.length),c=w.getReshapedPermuted(n.shape,s,i),l=w.getSliceBeginCoords(a,s.length),m=w.getSliceSize(c,a,s.length),d=Ve({inputs:{x:n},backend:e,attrs:{shape:p}}),f=It({inputs:{x:d},backend:e,attrs:{perm:u}}),h=Ve({inputs:{x:f},backend:e,attrs:{shape:c}}),g=Fo({inputs:{x:h},backend:e,attrs:{begin:l,size:m}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),g}var s$={kernelName:Js,backendName:"cpu",kernelFunc:RY};function DY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:a}=o,i=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,u=Ic(i,p,s.dtype,s.shape,a);return e.makeTensorInfo([a],s.dtype,u)}var a$={kernelName:en,backendName:"cpu",kernelFunc:DY};function AY(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.data.get(o.dataId).values,a=e.data.get(n.dataId).values,i=w.assertAndGetBroadcastShape(Array.from(s),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}var i$={kernelName:ea,backendName:"cpu",kernelFunc:AY};var FY=Ie(Co,(r,t)=>{let e=t;return r>e.clipValueMax?e.clipValueMax:r<e.clipValueMin?e.clipValueMin:r}),u$={kernelName:Co,backendName:"cpu",kernelFunc:FY};var PY=r=>{let{x:t}=r.inputs,e=r.backend,o=new Float32Array(y.sizeFromShape(t.shape)),n=e.data.get(t.dataId),s=n.complexTensorInfos.real,a=n.complexTensorInfos.imag,i=e.data.get(s.dataId).values,p=e.data.get(a.dataId).values;for(let u=0;u<i.length;u++){let c=i[u],l=p[u];o[u]=Math.hypot(c,l)}return e.makeOutput(o,t.shape,"float32")},p$={kernelName:Pi,backendName:"cpu",kernelFunc:PY};function Ma(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.data.get(o.dataId).complexTensorInfos.imag,s=e.data.get(n.dataId).values;return e.makeTensorInfo(n.shape,n.dtype,s)}var c$={kernelName:Gi,backendName:"cpu",kernelFunc:Ma};function yu(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],a=t.map(h=>h.shape);w.assertParamsConsistent(a,s);let i=w.computeOutShape(t.map(h=>h.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let p=t.filter(h=>y.sizeFromShape(h.shape)>0);if(p.length===1)return mr({inputs:{x:p[0]},backend:e});if(p[0].dtype==="complex64"){let h=p.map(S=>Ro({inputs:{input:S},backend:e})),g=p.map(S=>Ma({inputs:{input:S},backend:e})),x=yu({inputs:h,backend:e,attrs:{axis:s}}),b=yu({inputs:g,backend:e,attrs:{axis:s}}),C=Kt({inputs:{real:x,imag:b},backend:e});return h.forEach(S=>e.disposeIntermediateTensorInfo(S)),g.forEach(S=>e.disposeIntermediateTensorInfo(S)),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),C}let u=p.map(h=>{let x=[-1,y.sizeFromShape(h.shape.slice(s))];return Ve({inputs:{x:h},backend:e,attrs:{shape:x}})}),c=u.map(h=>({vals:e.data.get(h.dataId).values,shape:h.shape}));i=w.computeOutShape(u.map(h=>h.shape),1);let l=u[0].shape[0]===1,m=mp(c,i,t[0].dtype,l),d=w.computeOutShape(p.map(h=>h.shape),s),f=e.makeTensorInfo(d,t[0].dtype,m);return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var l$={kernelName:ta,backendName:"cpu",kernelFunc:yu};function yI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dataFormat:p,dilations:u,dimRoundingMode:c}=o;Q([n,s],"conv2d");let l=w.convertConv2DDataFormat(p),m=w.computeConv2DInfo(n.shape,s.shape,a,u,i,c,!1,l),d=m.filterHeight,f=m.filterWidth,h=m.dilationHeight,g=m.dilationWidth,x=m.padInfo.left,b=m.padInfo.top,C=m.dataFormat==="channelsLast",S=new tt(m.outShape,n.dtype),k=y.computeStrides(n.shape),_=y.computeStrides(s.shape),E=k[0],R=C?k[1]:k[2],D=C?k[2]:1,P=C?1:k[1],O=S.strides[0],M=C?S.strides[1]:S.strides[2],L=C?S.strides[2]:1,B=C?1:S.strides[1],z=e.data.get(n.dataId).values,U=e.data.get(s.dataId).values,j=S.values;for(let q=0;q<m.batchSize;++q){let Y=q*E,J=q*O;for(let re=0;re<m.outHeight;++re){let ne=J+re*M,ee=re*m.strideHeight-b;for(let oe=0;oe<d;++oe){let ie=ee+oe*h;if(ie<0||ie>=m.inHeight)continue;let le=oe*_[0],be=Y+ie*R;for(let _e=0;_e<m.outWidth;++_e){let ve=ne+_e*L,Fe=_e*m.strideWidth-x;for(let Pe=0;Pe<f;++Pe){let st=Fe+Pe*g;if(st<0||st>=m.inWidth)continue;let lt=le+Pe*_[1],Ge=be+st*D,mt=lt;for(let it=0;it<m.inChannels;++it){let gt=z[Ge+it*P];for(let xt=0;xt<m.outChannels;++xt)j[ve+xt*B]+=gt*U[mt+xt];mt+=m.outChannels}}}}}}return e.makeTensorInfo(S.shape,S.dtype,j)}var m$={kernelName:rn,backendName:"cpu",kernelFunc:yI};function OY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,pad:i,dataFormat:p,dimRoundingMode:u,filterShape:c}=o;Q([n,s],"conv2dBackpropFilter");let l=w.convertConv2DDataFormat(p),m=w.computeConv2DInfo(n.shape,c,a,1,i,u,!1,l),{strideHeight:d,strideWidth:f,filterHeight:h,filterWidth:g}=m,x=m.dataFormat==="channelsLast",b=new tt(m.filterShape,"float32"),C=m.padInfo.left,S=m.padInfo.top,k=e.data.get(n.dataId).values,_=e.data.get(s.dataId).values,E=new tt(n.shape,n.dtype,k),R=new tt(s.shape,s.dtype,_);for(let D=0;D<h;++D){let P=Math.max(0,Math.ceil((S-D)/d)),O=Math.min(m.outHeight,(m.inHeight+S-D)/d);for(let M=0;M<g;++M){let L=Math.max(0,Math.ceil((C-M)/f)),B=Math.min(m.outWidth,(m.inWidth+C-M)/f);for(let z=0;z<m.inChannels;++z)for(let U=0;U<m.outChannels;++U){let j=0;for(let q=0;q<m.batchSize;++q)for(let Y=P;Y<O;++Y){let J=D+Y*d-S;for(let re=L;re<B;++re){let ne=M+re*f-C;x?j+=E.get(q,J,ne,z)*R.get(q,Y,re,U):j+=E.get(q,z,J,ne)*R.get(q,U,Y,re)}}b.set(j,D,M,z,U)}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var d$={kernelName:Oi,backendName:"cpu",kernelFunc:OY};function MY(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:a,strides:i,pad:p,dataFormat:u,dimRoundingMode:c}=o;Q([n,s],"conv2dBackpropInput");let l=y.computeStrides(s.shape),m=y.computeStrides(n.shape),d=w.convertConv2DDataFormat(u),f=w.computeConv2DInfo(a,s.shape,i,1,p,c,!1,d),h=new tt(f.inShape,"float32"),g=h.values,x=e.data.get(n.dataId).values,b=e.data.get(s.dataId).values,[C,S,k]=l,{batchSize:_,filterHeight:E,filterWidth:R,inChannels:D,inHeight:P,inWidth:O,outChannels:M,outHeight:L,outWidth:B,strideHeight:z,strideWidth:U}=f;d=f.dataFormat;let j=E-1-f.padInfo.top,q=R-1-f.padInfo.left,Y=d==="channelsLast",J=h.strides[0],re=Y?h.strides[1]:h.strides[2],ne=Y?h.strides[2]:1,ee=Y?1:h.strides[1],oe=m[0],ie=Y?m[1]:m[2],le=Y?m[2]:1,be=Y?1:m[1];for(let _e=0;_e<_;++_e)for(let ve=0;ve<D;++ve)for(let Fe=0;Fe<P;++Fe){let Pe=Fe-j,st=Math.max(0,Math.ceil(Pe/z)),lt=Math.min(L,(E+Pe)/z);for(let Ge=0;Ge<O;++Ge){let mt=Ge-q,it=Math.max(0,Math.ceil(mt/U)),gt=Math.min(B,(R+mt)/U),xt=0;for(let Lt=st;Lt<lt;++Lt){let to=Lt*z-Pe;for(let nr=it;nr<gt;++nr){let _t=nr*U-mt,sr=oe*_e+ie*Lt+le*nr,ar=C*(E-1-to)+S*(R-1-_t)+k*ve;for(let ro=0;ro<M;++ro){let oo=x[sr+be*ro],hr=b[ar+ro];xt+=oo*hr}}}let Lr=J*_e+re*Fe+ne*Ge+ee*ve;g[Lr]=xt}}return e.makeTensorInfo(h.shape,h.dtype,h.values)}var f$={kernelName:on,backendName:"cpu",kernelFunc:MY};function LY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p}=o;Q([n,s],"conv3d");let u=w.computeConv3DInfo(n.shape,s.shape,a,p,i),{filterDepth:c,filterHeight:l,filterWidth:m,dilationDepth:d,dilationHeight:f,dilationWidth:h,padInfo:g}=u,x=g.front,b=g.left,C=g.top,S=new tt(u.outShape,n.dtype),k=e.data.get(n.dataId).values,_=e.data.get(s.dataId).values,E=S.values,R=y.computeStrides(n.shape),D=y.computeStrides(s.shape);for(let P=0;P<u.batchSize;++P){let O=P*R[0],M=P*S.strides[0];for(let L=0;L<u.outDepth;++L){let B=M+L*S.strides[1],z=L*u.strideDepth-x;for(let U=0;U<c;++U){let j=z+U*d;if(j<0||j>=u.inDepth)continue;let q=U*D[0],Y=O+j*R[1];for(let J=0;J<u.outHeight;++J){let re=B+J*S.strides[2],ne=J*u.strideHeight-C;for(let ee=0;ee<l;++ee){let oe=ne+ee*f;if(oe<0||oe>=u.inHeight)continue;let ie=q+ee*D[1],le=Y+oe*R[2];for(let be=0;be<u.outWidth;++be){let _e=re+be*u.outChannels,ve=be*u.strideWidth-b;for(let Fe=0;Fe<m;++Fe){let Pe=ve+Fe*h;if(Pe<0||Pe>=u.inWidth)continue;let st=ie+Fe*D[2],lt=le+Pe*u.inChannels,Ge=st;for(let mt=0;mt<u.inChannels;++mt){let it=k[lt+mt];for(let gt=0;gt<u.outChannels;++gt)E[_e+gt]+=it*_[Ge+gt];Ge+=u.outChannels}}}}}}}}return e.makeTensorInfo(S.shape,S.dtype,S.values)}var h$={kernelName:nn,backendName:"cpu",kernelFunc:LY};function BY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,pad:i,filterShape:p}=o;Q([n,s],"conv3dBackpropFilterV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),l=w.computeConv3DInfo(n.shape,p,a,1,i),m=l.strideDepth,d=l.strideHeight,f=l.strideWidth,h=l.filterDepth,g=l.filterHeight,x=l.filterWidth,b=new tt(l.filterShape,"float32"),C=b.values,[S,k,_,E]=b.strides,R=e.data.get(s.dataId).values,[D,P,O,M]=c,L=e.data.get(n.dataId).values,[B,z,U,j]=u,q=l.padInfo.front,Y=l.padInfo.left,J=l.padInfo.top;for(let re=0;re<h;++re){let ne=Math.max(0,Math.ceil((q-re)/m)),ee=Math.min(l.outDepth,(l.inDepth+q-re)/m),oe=re*S;for(let ie=0;ie<g;++ie){let le=Math.max(0,Math.ceil((J-ie)/d)),be=Math.min(l.outHeight,(l.inHeight+J-ie)/d),_e=ie*k+oe;for(let ve=0;ve<x;++ve){let Fe=Math.max(0,Math.ceil((Y-ve)/f)),Pe=Math.min(l.outWidth,(l.inWidth+Y-ve)/f),st=ve*_+_e;for(let lt=0;lt<l.inChannels;++lt){let Ge=lt*E+st;for(let mt=0;mt<l.outChannels;++mt){let it=0;for(let gt=0;gt<l.batchSize;++gt){let xt=gt*B,Lr=gt*D;for(let Lt=ne;Lt<ee;++Lt){let nr=(re+Lt*m-q)*z+xt,_t=Lt*P+Lr;for(let sr=le;sr<be;++sr){let ro=(ie+sr*d-J)*U+nr,oo=sr*O+_t;for(let hr=Fe;hr<Pe;++hr){let Bo=(ve+hr*f-Y)*j+ro,Ks=hr*M+oo;it+=L[Bo+lt]*R[Ks+mt]}}}}C[Ge+mt]=it}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}var g$={kernelName:Xa,backendName:"cpu",kernelFunc:BY};function zY(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:a,strides:i,inputShape:p}=o;Q([n],"conv3dBackpropInputV2");let u=y.computeStrides(n.shape),c=y.computeStrides(s.shape),l=w.computeConv3DInfo(p,s.shape,i,1,a),m=new tt(l.inShape,"float32"),d=m.values,[f,h,g,x]=m.strides,b=e.data.get(n.dataId).values,[C,S,k,_]=u,E=e.data.get(s.dataId).values,[R,D,P,O]=c,{batchSize:M,filterDepth:L,filterHeight:B,filterWidth:z,inChannels:U,inDepth:j,inHeight:q,inWidth:Y,outChannels:J,outDepth:re,outHeight:ne,outWidth:ee,strideDepth:oe,strideHeight:ie,strideWidth:le}=l,be=L-1-l.padInfo.front,_e=B-1-l.padInfo.top,ve=z-1-l.padInfo.left;for(let Fe=0;Fe<M;++Fe)for(let Pe=0;Pe<U;++Pe)for(let st=0;st<j;++st){let lt=st-be,Ge=Math.max(0,Math.ceil(lt/oe)),mt=Math.min(re,(L+lt)/oe);for(let it=0;it<q;++it){let gt=it-_e,xt=Math.max(0,Math.ceil(gt/ie)),Lr=Math.min(ne,(B+gt)/ie);for(let Lt=0;Lt<Y;++Lt){let to=Lt-ve,nr=Math.max(0,Math.ceil(to/le)),_t=Math.min(ee,(z+to)/le),sr=0;for(let ar=Ge;ar<mt;++ar){let ro=ar*oe-lt;for(let oo=xt;oo<Lr;++oo){let hr=oo*ie-gt;for(let Wa=nr;Wa<_t;++Wa){let Bo=Wa*le-to,Ks=C*Fe+S*ar+k*oo+_*Wa,Yt=R*(L-1-ro)+D*(B-1-hr)+P*(z-1-Bo)+O*Pe;for(let Ua=0;Ua<J;++Ua){let sl=b[Ks+Ua],al=E[Yt+Ua];sr+=sl*al}}}}d[f*Fe+h*st+g*it+x*Lt+Pe]=sr}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}var x$={kernelName:sn,backendName:"cpu",kernelFunc:zY};var VY=Ie(an,r=>Math.cos(r)),y$={kernelName:an,backendName:"cpu",kernelFunc:VY};var WY=Ie(un,r=>Math.cosh(r)),b$={kernelName:un,backendName:"cpu",kernelFunc:WY};function UY(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:a}=t,{cropSize:i,method:p,extrapolationValue:u}=o,[c,l,m,d]=n.shape,f=s.shape[0],[h,g]=i,x=me([f,h,g,d],"float32"),b=e.data.get(s.dataId).values,C=e.data.get(a.dataId).values,S=e.data.get(n.dataId).values,k=y.computeStrides(n.shape),_=y.computeStrides(x.shape);for(let E=0;E<f;E++){let R=E*4,D=b[R],P=b[R+1],O=b[R+2],M=b[R+3],L=C[E];if(L>=c)continue;let B=h>1?(O-D)*(l-1)/(h-1):0,z=g>1?(M-P)*(m-1)/(g-1):0;for(let U=0;U<h;U++){let j=h>1?D*(l-1)+U*B:.5*(D+O)*(l-1);if(j<0||j>l-1){for(let q=0;q<g;q++)for(let Y=0;Y<d;Y++){let J=Y+q*_[2]+U*_[1]+E*_[0];x.values[J]=u}continue}if(p==="bilinear"){let q=Math.floor(j),Y=Math.ceil(j),J=j-q;for(let re=0;re<g;re++){let ne=g>1?P*(m-1)+re*z:.5*(P+M)*(m-1);if(ne<0||ne>m-1){for(let le=0;le<d;le++){let be=le+re*_[2]+U*_[1]+E*_[0];x.values[be]=u}continue}let ee=Math.floor(ne),oe=Math.ceil(ne),ie=ne-ee;for(let le=0;le<d;le++){let be=le+ee*k[2]+q*k[1]+L*k[0],_e=S[be];be=le+oe*k[2]+q*k[1]+L*k[0];let ve=S[be];be=le+ee*k[2]+Y*k[1]+L*k[0];let Fe=S[be];be=le+oe*k[2]+Y*k[1]+L*k[0];let Pe=S[be],st=_e+(ve-_e)*ie,lt=Fe+(Pe-Fe)*ie;be=le+re*_[2]+U*_[1]+E*_[0],x.values[be]=st+(lt-st)*J}}}else for(let q=0;q<g;++q){let Y=g>1?P*(m-1)+q*z:.5*(P+M)*(m-1);if(Y<0||Y>m-1){for(let ne=0;ne<d;ne++){let ee=ne+q*_[2]+U*_[1]+E*_[0];x.values[ee]=u}continue}let J=Math.round(Y),re=Math.round(j);for(let ne=0;ne<d;ne++){let ee=ne+J*k[2]+re*k[1]+L*k[0],oe=ne+q*_[2]+U*_[1]+E*_[0];x.values[oe]=S[ee]}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}var C$={kernelName:ln,backendName:"cpu",kernelFunc:UY};function GY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:a,reverse:i}=o;Q(n,"cumprod");let p=w.getAxesPermutation([s],n.shape.length),u=n;p!=null&&(u=It({inputs:{x:n},backend:e,attrs:{perm:p}}));let c=w.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let l=dt(u.dtype,"int32"),m=y.makeOnesTypedArray(y.sizeFromShape(u.shape),l),d=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],h=i?(x,b)=>x+f-b-1:(x,b)=>x+b;for(let x=0;x<d.length;x+=f)for(let b=0;b<f;b++){let C=h(x,b);if(b===0)m[C]=a?1:d[C];else{let S=h(x,b-1);m[C]=a?d[S]*m[S]:d[C]*m[S]}}let g=e.makeTensorInfo(u.shape,l,m);if(p!=null){let x=w.getUndoAxesPermutation(p),b=It({inputs:{x:g},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var w$={kernelName:pn,backendName:"cpu",kernelFunc:GY};function HY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:a,reverse:i}=o;Q(n,"cumsum");let p=w.getAxesPermutation([s],n.shape.length),u=n;p!=null&&(u=It({inputs:{x:n},backend:e,attrs:{perm:p}}));let c=w.getInnerMostAxes(1,n.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);let l=dt(u.dtype,"int32"),m=y.makeZerosTypedArray(y.sizeFromShape(u.shape),l),d=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],h=i?(x,b)=>x+f-b-1:(x,b)=>x+b;for(let x=0;x<d.length;x+=f)for(let b=0;b<f;b++){let C=h(x,b);if(b===0)m[C]=a?0:d[C];else{let S=h(x,b-1);m[C]=a?d[S]+m[S]:d[C]+m[S]}}let g=e.makeTensorInfo(u.shape,l,m);if(p!=null){let x=w.getUndoAxesPermutation(p),b=It({inputs:{x:g},backend:e,attrs:{perm:x}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),b}return g}var S$={kernelName:cn,backendName:"cpu",kernelFunc:HY};function KY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:a,binaryOutput:i}=o;if(n.shape.length===1){let p=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=Ic(p,u,s.dtype,s.shape,a);return e.makeTensorInfo([a],s.dtype,c)}else if(n.shape.length===2){let p=e.bufferSync(n),u=e.bufferSync(s),c=Nf(p,u,a,i);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var I$={kernelName:ra,backendName:"cpu",kernelFunc:KY};function qY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:a}=o;y.assert(a==="NHWC",()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);let i=n.shape[0],p=n.shape[1],u=n.shape[2],c=n.shape[3],l=p*s,m=u*s,d=c/(s*s),f=e.data.get(n.dataId).values,h=new Float32Array(i*l*m*d),g=0;for(let x=0;x<i;++x)for(let b=0;b<l;++b){let C=Math.floor(b/s),S=b%s;for(let k=0;k<m;++k){let _=Math.floor(k/s),E=k%s,R=(S*s+E)*d;for(let D=0;D<d;++D){let O=D+R+c*(_+u*(C+p*x));h[g++]=f[O]}}}return e.makeTensorInfo([i,l,m,d],n.dtype,h)}var v$={kernelName:mn,backendName:"cpu",kernelFunc:qY};function bI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p,dimRoundingMode:u}=o;Q([n,s],"depthwiseConv2DNative");let c=y.computeStrides(n.shape),l=y.computeStrides(s.shape),m=p;m==null&&(m=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(a,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${m}'`);let d=w.computeConv2DInfo(n.shape,s.shape,a,m,i,u,!0),{filterHeight:f,filterWidth:h,dilationHeight:g,dilationWidth:x,padInfo:b}=d,C=b.left,S=b.top,k=d.outChannels/d.inChannels,_=new tt(d.outShape,n.dtype),E=e.data.get(n.dataId).values,R=e.data.get(s.dataId).values,D=_.values;for(let P=0;P<d.batchSize;++P){let O=P*c[0],M=P*_.strides[0];for(let L=0;L<d.outHeight;++L){let B=M+L*_.strides[1],z=L*d.strideHeight-S;for(let U=0;U<f;++U){let j=z+U*g;if(j<0||j>=d.inHeight)continue;let q=U*l[0],Y=O+j*c[1];for(let J=0;J<d.outWidth;++J){let re=B+J*_.strides[2],ne=J*d.strideWidth-C;for(let ee=0;ee<h;++ee){let oe=ne+ee*x;if(oe<0||oe>=d.inWidth)continue;let ie=q+ee*l[1],le=Y+oe*d.inChannels,be=re,_e=ie;for(let ve=0;ve<d.inChannels;++ve){let Fe=E[le+ve];for(let Pe=0;Pe<k;++Pe)D[be+Pe]+=Fe*R[_e+Pe];be+=k,_e+=k}}}}}}return e.makeTensorInfo(_.shape,_.dtype,_.values)}var k$={kernelName:dn,backendName:"cpu",kernelFunc:bI};function jY(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,dilations:i,pad:p,dimRoundingMode:u,filterShape:c}=o;Q([n,s],"depthwiseConv2dNativeBackpropFilter");let l=w.computeConv2DInfo(n.shape,c,a,i,p,u,!0),{strideHeight:m,strideWidth:d,filterHeight:f,filterWidth:h}=l,g=new tt(l.filterShape,"float32"),x=l.padInfo.left,b=l.padInfo.top,C=l.outChannels/l.inChannels,S=e.data.get(n.dataId).values,k=new tt(n.shape,n.dtype,S),_=e.data.get(s.dataId).values,E=new tt(s.shape,s.dtype,_);for(let R=0;R<f;++R){let D=Math.max(0,Math.ceil((b-R)/m)),P=Math.min(l.outHeight,(l.inHeight+b-R)/m);for(let O=0;O<h;++O){let M=Math.max(0,Math.ceil((x-O)/d)),L=Math.min(l.outWidth,(l.inWidth+x-O)/d);for(let B=0;B<l.outChannels;++B){let z=Math.trunc(B/C),U=B%C,j=0;for(let q=0;q<l.batchSize;++q)for(let Y=D;Y<P;++Y){let J=R+Y*m-b;for(let re=M;re<L;++re){let ne=O+re*d-x;j+=k.get(q,J,ne,z)*E.get(q,Y,re,B)}}g.set(j,R,O,z,U)}}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}var N$={kernelName:Mi,backendName:"cpu",kernelFunc:jY};function XY(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:a,dilations:i,pad:p,dimRoundingMode:u,inputShape:c}=o;Q([n,s],"depthwiseConv2DNativeBackpropInput");let l=y.computeStrides(n.shape),m=y.computeStrides(s.shape),d=w.computeConv2DInfo(c,s.shape,a,i,p,u,!0),f=new tt(d.inShape,"float32"),h=f.values,[g,x,b]=f.strides,C=e.data.get(n.dataId).values,[S,k,_]=l,E=e.data.get(s.dataId).values,[R,D,P]=m,{batchSize:O,filterHeight:M,filterWidth:L,inChannels:B,inHeight:z,inWidth:U,outChannels:j,outHeight:q,outWidth:Y,strideHeight:J,strideWidth:re}=d,ne=M-1-d.padInfo.top,ee=L-1-d.padInfo.left,oe=j/B;for(let ie=0;ie<O;++ie)for(let le=0;le<B;++le)for(let be=0;be<z;++be){let _e=be-ne,ve=Math.max(0,Math.ceil(_e/J)),Fe=Math.min(q,(M+_e)/J);for(let Pe=0;Pe<U;++Pe){let st=Pe-ee,lt=Math.max(0,Math.ceil(st/re)),Ge=Math.min(Y,(L+st)/re),mt=0;for(let it=ve;it<Fe;++it){let gt=it*J-_e;for(let xt=lt;xt<Ge;++xt){let Lr=xt*re-st,Lt=S*ie+k*it+_*xt,to=R*(M-1-gt)+D*(L-1-Lr)+P*le;for(let nr=0;nr<oe;++nr){let _t=le*oe+nr,sr=C[Lt+_t],ar=E[to+nr];mt+=sr*ar}}}h[g*ie+x*be+b*Pe+le]=mt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}var T$={kernelName:Li,backendName:"cpu",kernelFunc:XY};function YY(r){let{inputs:t,backend:e}=r,{x:o}=t,n=y.sizeFromShape(o.shape),s=e.data.get(o.dataId).values,a=me([n,n],o.dtype),i=a.values;for(let u=0;u<s.length;u++)i[u*n+u]=s[u];let p=[...o.shape,...o.shape];return e.makeTensorInfo(p,a.dtype,a.values)}var _$={kernelName:oa,backendName:"cpu",kernelFunc:YY};var $$={kernelName:fn,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n}=r,{strides:s,pad:a,dilations:i}=e,p=t,u=p.data.get(o.dataId).values,c=o.shape.length,l=p.data.get(n.dataId).values,m=n.shape.length,{batchSize:d,inHeight:f,inWidth:h,inChannels:g,outHeight:x,outWidth:b,padInfo:C,strideHeight:S,strideWidth:k,filterHeight:_,filterWidth:E,dilationHeight:R,dilationWidth:D,outShape:P}=w.computeDilation2DInfo(o.shape,n.shape,s,a,"NHWC",i),O=y.sizeFromShape(P),M=P.length,L=y.getArrayFromDType(o.dtype,O);for(let z=0;z<d;++z)for(let U=0;U<x;++U){let j=U*S-C.top;for(let q=0;q<b;++q){let Y=q*k-C.left;for(let J=0;J<g;++J){let re=Number.MIN_SAFE_INTEGER;for(let ee=0;ee<_;++ee){let oe=j+ee*R;if(oe>=0&&oe<f)for(let ie=0;ie<E;++ie){let le=Y+ie*D;if(le>=0&&le<h){let be=y.locToIndex([z,oe,le,J],c,y.computeStrides(o.shape)),_e=y.locToIndex([ee,ie,J],m,y.computeStrides(n.shape)),ve=u[be]+l[_e];ve>re&&(re=ve)}}}let ne=y.locToIndex([z,U,q,J],M,y.computeStrides(P));L[ne]=re}}}return{dataId:p.write(y.toTypedArray(L,o.dtype),P,o.dtype),shape:P,dtype:o.dtype}}};var E$={kernelName:zi,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:a,pad:i,dilations:p}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),l=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:d,inWidth:f,inChannels:h,outHeight:g,outWidth:x,padInfo:b,strideHeight:C,strideWidth:S,filterHeight:k,filterWidth:_,dilationHeight:E,dilationWidth:R,outShape:D}=w.computeDilation2DInfo(o.shape,n.shape,a,i,"NHWC",p);y.assert(s.rank===D.length,()=>`Error in ${zi}, dy must have the same rank as output ${D.length}, but got ${s.rank}`);let P=y.toNestedArray(D,u.data.get(s.dataId).values),O=y.makeZerosNestedTypedArray(n.shape,n.dtype);for(let L=0;L<m;++L)for(let B=0;B<g;++B){let z=B*C-b.top;for(let U=0;U<x;++U){let j=U*S-b.left;for(let q=0;q<h;++q){let Y=Number.MIN_SAFE_INTEGER,J=0,re=0;for(let ne=0;ne<k;++ne){let ee=z+ne*E;if(ee>=0&&ee<d)for(let oe=0;oe<_;++oe){let ie=j+oe*R;if(ie>=0&&ie<f){let le=c[L][ee][ie][q]+l[ne][oe][q];le>Y&&(Y=le,J=ne,re=oe)}}}O[J][re][q]+=P[L][B][U][q]}}}return{dataId:u.write(y.toTypedArray(O,o.dtype),n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var R$={kernelName:Bi,backendName:"cpu",kernelFunc:({inputs:r,backend:t,attrs:e})=>{let{x:o,filter:n,dy:s}=r,{strides:a,pad:i,dilations:p}=e,u=t,c=y.toNestedArray(o.shape,u.data.get(o.dataId).values),l=y.toNestedArray(n.shape,u.data.get(n.dataId).values),{batchSize:m,inHeight:d,inWidth:f,inChannels:h,outHeight:g,outWidth:x,padInfo:b,strideHeight:C,strideWidth:S,filterHeight:k,filterWidth:_,dilationHeight:E,dilationWidth:R,outShape:D}=w.computeDilation2DInfo(o.shape,n.shape,a,i,"NHWC",p);y.assert(s.rank===D.length,()=>`Error in ${Bi}, dy must have the same rank as output ${D.length}, but got ${s.rank}`);let P=y.toNestedArray(D,u.data.get(s.dataId).values),O=y.makeZerosNestedTypedArray(o.shape,o.dtype);for(let L=0;L<m;++L)for(let B=0;B<g;++B){let z=B*C-b.top;for(let U=0;U<x;++U){let j=U*S-b.left;for(let q=0;q<h;++q){let Y=Number.MIN_SAFE_INTEGER,J=z<0?0:z,re=j<0?0:j;for(let ne=0;ne<k;++ne){let ee=z+ne*E;if(ee>=0&&ee<d)for(let oe=0;oe<_;++oe){let ie=j+oe*R;if(ie>=0&&ie<f){let le=c[L][ee][ie][q]+l[ne][oe][q];le>Y&&(Y=le,J=ee,re=ie)}}}O[L][J][re][q]+=P[L][B][U][q]}}}return{dataId:u.write(y.toTypedArray(O,o.dtype),o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function QY(r){let{inputs:t,backend:e,attrs:o}=r,{image:n}=t,{canvas:s,options:a}=o,{contextOptions:i,imageOptions:p}=a||{},u=(p==null?void 0:p.alpha)||1,c=(i==null?void 0:i.contextType)||"2d";if(c!=="2d")throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);let l=s.getContext(c,(i==null?void 0:i.contextAttributes)||{});if(l==null)throw new Error(`Could not get the context with ${c} type.`);let[m,d]=n.shape.slice(0,2),f=n.shape.length===2?1:n.shape[2],h=e.data.get(n.dataId).values,g=n.dtype==="float32"?255:1,x=new Uint8ClampedArray(d*m*4);for(let C=0;C<m*d;++C){let S=[0,0,0,255*u];for(let _=0;_<f;_++){let E=h[C*f+_];if(n.dtype==="float32"){if(E<0||E>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${E}.`)}else if(n.dtype==="int32"&&(E<0||E>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${E}.`);f===1?(S[0]=E*g,S[1]=E*g,S[2]=E*g):S[_]=E*g}let k=C*4;x[k+0]=Math.round(S[0]),x[k+1]=Math.round(S[1]),x[k+2]=Math.round(S[2]),x[k+3]=Math.round(S[3])}s.width=d,s.height=m;let b=new ImageData(x,d,m);return l.putImageData(b,0,0),n}var D$={kernelName:Pu,backendName:"cpu",kernelFunc:QY};function gi(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;Q(n,"sum");let i;n.dtype==="bool"?i=Do({inputs:{x:n},backend:e,attrs:{dtype:"int32"}}):i=mr({inputs:{x:n},backend:e});let p=i.shape.length,u=y.parseAxisParam(s,i.shape),c=w.getAxesPermutation(u,p),l=u,m=i;c!=null&&(m=It({inputs:{x:i},backend:e,attrs:{perm:c}}),l=w.getInnerMostAxes(l.length,p)),w.assertAxesAreInnerMostDims("sum",l,m.shape.length);let[d,f]=w.computeOutAndReduceShapes(m.shape,l),h=w.upcastType(m.dtype,"int32"),g=wc(e,d,h),x=y.sizeFromShape(f),b=e.data.get(g.dataId).values,C=e.data.get(m.dataId).values;for(let S=0;S<b.length;++S){let k=S*x,_=0;for(let E=0;E<x;++E)_+=C[k+E];b[S]=_}if(a){let S=w.expandShapeToKeepDim(g.shape,u),k=g;g=Ve({inputs:{x:g},backend:e,attrs:{shape:S}}),e.disposeIntermediateTensorInfo(k)}return e.disposeIntermediateTensorInfo(i),c!=null&&e.disposeIntermediateTensorInfo(m),g}var A$={kernelName:Is,backendName:"cpu",kernelFunc:gi};function ZY(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:a,summedDims:i,idDims:p}=w.decodeEinsumEquation(n,s.length);w.checkEinsumDimSizes(a.length,p,s);let{path:u,steps:c}=w.getEinsumComputePath(i,p),l=c.length,m=null,d=a.length,f=[];for(let h=0;h<l;++h){for(let g of c[h]){let{permutationIndices:x,expandDims:b}=w.getEinsumPermutation(d,p[g]),C;w.isIdentityPermutation(x)?C=s[g]:(C=It({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),f.push(C));let S=C.shape.slice();for(let k=0;k<b.length;++k)S.splice(b[k],0,1);y.arraysEqual(C.shape,S)||(C=Ve({inputs:{x:C},backend:e,attrs:{shape:S}}),f.push(C)),m===null?m=C:(m=dp({inputs:{a:C,b:m},backend:e}),f.push(m))}h<l-1&&(u[h]>=0&&(m=gi({inputs:{x:m},backend:e,attrs:{axis:u[h]-(a.length-d),keepDims:!1}}),f.push(m)),d--)}for(let h of f)h!==m&&e.disposeIntermediateTensorInfo(h);return m}var F$={kernelName:Vi,backendName:"cpu",kernelFunc:ZY};function JY(r){let{inputs:t,backend:e}=r,{dy:o,y:n}=t;Q([o,n],"eluGrad");let s=new Float32Array(y.sizeFromShape(n.shape)),a=e.data.get(n.dataId).values,i=e.data.get(o.dataId).values;for(let p=0;p<a.length;++p){let u=a[p];u>=0?s[p]=i[p]:s[p]=i[p]*(u+1)}return e.makeTensorInfo(n.shape,"float32",s)}var P$={kernelName:Ya,backendName:"cpu",kernelFunc:JY};var eQ=w.ERF_P,tQ=w.ERF_A1,rQ=w.ERF_A2,oQ=w.ERF_A3,nQ=w.ERF_A4,sQ=w.ERF_A5,aQ=Ie(xn,r=>{let t=Math.sign(r),e=Math.abs(r),o=1/(1+eQ*e);return t*(1-((((sQ*o+nQ)*o+oQ)*o+rQ)*o+tQ)*o*Math.exp(-e*e))}),O$={kernelName:xn,backendName:"cpu",kernelFunc:aQ};function $c(r){let{inputs:t,backend:e,attrs:o}=r,{input:n}=t,{dim:s}=o,a=n.shape.length,i=n.shape.slice(),p=s;return s<0&&(y.assert(-(a+1)<=s,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),p=a+s+1),i.splice(p,0,1),Ve({inputs:{x:n},backend:e,attrs:{shape:i}})}var M$={kernelName:na,backendName:"cpu",kernelFunc:$c};var iQ=ze((r,t)=>r/t),Ul=Ye(hn,iQ),Gl={kernelName:hn,backendName:"cpu",kernelFunc:Ul};function Vf(r,t,e){let o=r.shape,n=o[0],s=o[1],a=e.data.get(r.dataId),i=a.complexTensorInfos.real,p=a.complexTensorInfos.imag,u=[n,s],c=y.sizeFromShape(u),l=y.getTypedArrayFromDType("float32",c),m=y.getTypedArrayFromDType("float32",c);for(let g=0;g<n;g++){let x=Fo({inputs:{x:i},backend:e,attrs:{begin:[g,0],size:[1,s]}}),b=Fo({inputs:{x:p},backend:e,attrs:{begin:[g,0],size:[1,s]}}),C=Kt({inputs:{real:x,imag:b},backend:e}),{real:S,imag:k}=uQ(C,t,e),_=w.mergeRealAndImagArrays(S,k);for(let E=0;E<s;E++){let R=w.getComplexWithIndex(_,E);l[g*s+E]=R.real,m[g*s+E]=R.imag}e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(C)}let d=e.makeTensorInfo(u,"float32",l),f=e.makeTensorInfo(u,"float32",m),h=Kt({inputs:{real:d,imag:f},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(f),h}function uQ(r,t,e){let o=y.sizeFromShape(r.shape),n=e.data.get(r.dataId),s=e.data.get(n.complexTensorInfos.real.dataId).values,a=e.data.get(n.complexTensorInfos.imag.dataId).values;if(pQ(o)){let i=CI(s,a,o,t,e),p=[r.shape[0],r.shape[1]];if(t){let u=e.makeTensorInfo(p,"float32",i.real),c=e.makeTensorInfo(p,"float32",i.imag),l=e.makeTensorInfo([],"float32",y.createScalarValue(o,"float32")),m=mr({inputs:{x:l},backend:e}),d=Gl.kernelFunc({inputs:{a:u,b:l},backend:e}),f=Gl.kernelFunc({inputs:{a:c,b:m},backend:e}),h=e.data.get(d.dataId).values,g=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(f),{real:h,imag:g}}return i}else{let i=w.mergeRealAndImagArrays(s,a),p=cQ(i,o,t);return w.splitRealAndImagArrays(p)}}function pQ(r){return(r&r-1)===0}function CI(r,t,e,o,n){if(e===1)return{real:r,imag:t};let s=w.mergeRealAndImagArrays(r,t),a=e/2,i=w.complexWithEvenIndex(s),p=i.real,u=i.imag,c=[p.length],l=n.makeTensorInfo(c,"float32",p),m=n.makeTensorInfo(c,"float32",u),d=Kt({inputs:{real:l,imag:m},backend:n}),f=w.complexWithOddIndex(s),h=f.real,g=f.imag,x=[h.length],b=n.makeTensorInfo(x,"float32",h),C=n.makeTensorInfo(x,"float32",g),S=Kt({inputs:{real:b,imag:C},backend:n}),k=CI(p,u,a,o,n),_=k.real,E=k.imag,R=[_.length],D=n.makeTensorInfo(R,"float32",_),P=n.makeTensorInfo(R,"float32",E),O=Kt({inputs:{real:D,imag:P},backend:n}),M=CI(h,g,a,o,n),L=M.real,B=M.imag,z=[L.length],U=n.makeTensorInfo(z,"float32",L),j=n.makeTensorInfo(z,"float32",B),q=Kt({inputs:{real:U,imag:j},backend:n}),Y=w.exponents(e,o),J=[Y.real.length],re=n.makeTensorInfo(J,"float32",Y.real),ne=n.makeTensorInfo(J,"float32",Y.imag),ee=Kt({inputs:{real:re,imag:ne},backend:n}),oe=dp({inputs:{a:ee,b:q},backend:n}),ie=Oa({inputs:{a:O,b:oe},backend:n}),le=Vl({inputs:{a:O,b:oe},backend:n}),be=Ro({inputs:{input:ie},backend:n}),_e=Ro({inputs:{input:le},backend:n}),ve=Ma({inputs:{input:ie},backend:n}),Fe=Ma({inputs:{input:le},backend:n}),Pe=yu({inputs:[be,_e],backend:n,attrs:{axis:0}}),st=yu({inputs:[ve,Fe],backend:n,attrs:{axis:0}}),lt=n.data.get(Pe.dataId).values,Ge=n.data.get(st.dataId).values;return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(C),n.disposeIntermediateTensorInfo(S),n.disposeIntermediateTensorInfo(D),n.disposeIntermediateTensorInfo(P),n.disposeIntermediateTensorInfo(O),n.disposeIntermediateTensorInfo(U),n.disposeIntermediateTensorInfo(j),n.disposeIntermediateTensorInfo(q),n.disposeIntermediateTensorInfo(re),n.disposeIntermediateTensorInfo(ne),n.disposeIntermediateTensorInfo(ee),n.disposeIntermediateTensorInfo(oe),n.disposeIntermediateTensorInfo(ie),n.disposeIntermediateTensorInfo(le),n.disposeIntermediateTensorInfo(be),n.disposeIntermediateTensorInfo(ve),n.disposeIntermediateTensorInfo(_e),n.disposeIntermediateTensorInfo(Fe),n.disposeIntermediateTensorInfo(Pe),n.disposeIntermediateTensorInfo(st),{real:lt,imag:Ge}}function cQ(r,t,e){let o=new Float32Array(t*2);for(let n=0;n<t;n++){let s=0,a=0;for(let i=0;i<t;i++){let p=w.exponent(n*i,t,e),u=w.getComplexWithIndex(r,i);s+=u.real*p.real-u.imag*p.imag,a+=u.real*p.imag+u.imag*p.real}e&&(s/=t,a/=t),w.assignToTypedArray(o,s,a,n)}return o}function lQ(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],a=n/s,i=Ve({inputs:{x:o},backend:e,attrs:{shape:[a,s]}}),p=Vf(i,!1,e),u=Ve({inputs:{x:p},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(p),u}var L$={kernelName:Wi,backendName:"cpu",kernelFunc:lQ};function Hl(r){let{backend:t,attrs:e}=r,{shape:o,value:n,dtype:s}=e,a=s||y.inferDtype(n),i=y.getArrayFromDType(a,y.sizeFromShape(o));return mQ(i,n,a),t.makeTensorInfo(o,a,i)}var B$={kernelName:sa,backendName:"cpu",kernelFunc:Hl};function mQ(r,t,e){r.fill(t)}var z$={kernelName:wn,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,n=e,s=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[a,i,p,u]=o.shape,c=n.data.get(o.dataId).values;for(let m=0;m<a;m++){let d=m*p*i*u;for(let f=0;f<i;f++){let h=f*(p*u);for(let g=0;g<p;g++){let x=g*u;for(let b=0;b<u;b++){let C=Math.round(p-g-1),S=d+h+x+b,k=c[S];if(C>=0&&C<p){let _=C*u,E=d+h+_+b;k=c[E]}s[S]=k}}}}return{dataId:n.write(s,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};function dQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=t,{strides:p,pad:u,dataFormat:c,dilations:l,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=o,h=yI({inputs:{x:n,filter:s},backend:e,attrs:{strides:p,pad:u,dataFormat:c,dilations:l,dimRoundingMode:m}});if(a){let g=h;if(c==="NCHW"&&a.shape.length===1&&a.shape[0]!==1){let x=Ve({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});h=Oa({inputs:{a:h,b:x},backend:e}),e.disposeIntermediateTensorInfo(x)}else h=Oa({inputs:{a:h,b:a},backend:e});e.disposeIntermediateTensorInfo(g)}if(d){let g=h;if(c==="NCHW"&&d==="prelu"&&i.shape.length===1&&i.shape[0]!==1){let x=Ve({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});h=Cp(e,h,d,x,f),e.disposeIntermediateTensorInfo(x)}else h=Cp(e,h,d,i,f);e.disposeIntermediateTensorInfo(g)}return h}var V$={kernelName:vo,backendName:"cpu",kernelFunc:dQ};function fQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=t,{strides:p,pad:u,dataFormat:c,dilations:l,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=o,h=bI({inputs:{x:n,filter:s},backend:e,attrs:{strides:p,pad:u,dataFormat:c,dilations:l,dimRoundingMode:m}});if(a){let g=h;h=Oa({inputs:{a:h,b:a},backend:e}),e.disposeIntermediateTensorInfo(g)}if(d){let g=h;h=Cp(e,h,d,i,f),e.disposeIntermediateTensorInfo(g)}return h}var W$={kernelName:ko,backendName:"cpu",kernelFunc:fQ};function hQ(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=y.sizeFromShape(o.shape),a=n.shape,i=a[a.length-1],[p,u,c,l]=w.prepareAndValidate(o,n);if(u===0)return e.makeTensorInfo(p,o.dtype,[]);let m=e.data.get(n.dataId).values,d=e.bufferSync(o),f=Tf(m,d,o.dtype,u,i,c,l,o.shape,s);return e.makeTensorInfo(p,o.dtype,f.values)}var U$={kernelName:kn,backendName:"cpu",kernelFunc:hQ};function gQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:a,batchDims:i}=o;Q([n,s],"gatherV2");let p=y.parseAxisParam(a,n.shape)[0],u=e.data.get(s.dataId).values,c=n.shape[p];for(let S=0;S<u.length;++S){let k=u[S];y.assert(k<=c-1&&k>=0,()=>`GatherV2: the index value ${k} is not in [0, ${c-1}]`)}let l=i;i==null&&(l=0);let m=y.sizeFromShape(s.shape),d=w.segment_util.collectGatherOpShapeInfo(n,s,p,l),f=Ve({inputs:{x:n},backend:e,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),h=Ve({inputs:{x:s},backend:e,attrs:{shape:[d.batchSize,m/d.batchSize]}}),g=[d.batchSize,d.outerSize,m/d.batchSize,d.sliceSize],x=e.bufferSync(h),b=e.bufferSync(f),C=_f(b,x,g);return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.makeTensorInfo(d.outputShape,C.dtype,C.values)}var G$={kernelName:aa,backendName:"cpu",kernelFunc:gQ};function xQ(r){let{inputs:t,backend:e}=r,{input:o}=t,n=y.sizeFromShape(o.shape),s=o.shape[o.shape.length-1],a=n/s,i=Ve({inputs:{x:o},backend:e,attrs:{shape:[a,s]}}),p=Vf(i,!0,e),u=Ve({inputs:{x:p},backend:e,attrs:{shape:o.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(p),u}var H$={kernelName:Ui,backendName:"cpu",kernelFunc:xQ};var yQ=Ie(_n,r=>Number.isFinite(r)?1:0,"bool"),K$={kernelName:_n,backendName:"cpu",kernelFunc:yQ};var bQ=Ie($n,r=>Math.abs(r)===1/0?1:0,"bool"),q$={kernelName:$n,backendName:"cpu",kernelFunc:bQ};var CQ=Ie(En,r=>Number.isNaN(r)?1:0,"bool"),j$={kernelName:En,backendName:"cpu",kernelFunc:CQ};function wQ(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,a=$f(o,n,s);return t.makeTensorInfo([a.length],"float32",a)}var X$={kernelName:Fn,backendName:"cpu",kernelFunc:wQ};var SQ=Ie(On,r=>Math.log1p(r)),Y$={kernelName:On,backendName:"cpu",kernelFunc:SQ};var IQ=ze((r,t)=>r&&t),vQ=Ye(Mn,IQ,null,"bool"),Q$={kernelName:Mn,backendName:"cpu",kernelFunc:vQ};var kQ=Ie(Ln,r=>r?0:1,"bool"),Z$={kernelName:Ln,backendName:"cpu",kernelFunc:kQ};var NQ=ze((r,t)=>r||t),TQ=Ye(Bn,NQ,null,"bool"),J$={kernelName:Bn,backendName:"cpu",kernelFunc:TQ};function _Q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:a,alpha:i,beta:p}=o;Q(n,"LRN");let u=n.shape[3],c=u-1,l=e.data.get(n.dataId).values,m=y.sizeFromShape(n.shape),d=new Float32Array(m);function f(h){let g=h%u,x=h-g+Math.max(0,g-s),b=h-g+Math.min(g+s,c),C=0;for(;x<=b;x++){let S=l[x];C+=S*S}return C}for(let h=0;h<m;h++){let g=f(h),x=l[h]*Math.pow(a+i*g,-p);d[h]=x}return e.makeTensorInfo(n.shape,n.dtype,d)}var eE={kernelName:zn,backendName:"cpu",kernelFunc:_Q};function $Q(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:a}=t,{depthRadius:i,bias:p,alpha:u,beta:c}=o;Q(a,"LRNGrad");let l=y.sizeFromShape(a.shape),m=a.shape[3],d=e.data.get(a.dataId).values,f=e.data.get(n.dataId).values,h=e.data.get(s.dataId).values,g=new Float32Array(l),x=l;for(let b=0;b<x;b++){let C=b%m,S=b-C+Math.max(0,C-i),k=b-C+Math.min(m,C+i+1),_=0;for(let E=S;E<k;E++)_+=Math.pow(f[E],2);_=u*_+p;for(let E=S;E<k;E++){let R=-2*u*c*f[E]*h[b]/_;b===E&&(R+=Math.pow(_,-c)),R*=d[b],g[E]+=R}}return e.makeTensorInfo(a.shape,n.dtype,g)}var tE={kernelName:Qa,backendName:"cpu",kernelFunc:$Q};function wI(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:a}=o,i=e,p=n.shape,u=p.length,c=y.parseAxisParam(s,p),l=c,m=w.getAxesPermutation(l,u),d=i.data.get(n.dataId).values;if(m!=null){let S=new Array(u);for(let k=0;k<S.length;k++)S[k]=p[m[k]];d=vc(d,p,n.dtype,m,S),l=w.getInnerMostAxes(l.length,u),p=S}Q(n,"max"),w.assertAxesAreInnerMostDims("max",l,u);let[f,h]=w.computeOutAndReduceShapes(p,l),g=y.sizeFromShape(h),x=Ef(d,g,f,n.dtype),b=i.write(x,f,n.dtype),C=f;return a&&(C=w.expandShapeToKeepDim(f,c)),{dataId:b,shape:C,dtype:n.dtype}}var rE={kernelName:Vn,backendName:"cpu",kernelFunc:wI};function EQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Q(n,"maxPool");let{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,a,u,i,p),l;if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))l=mr({inputs:{x:n},backend:e});else{let m=e.data.get(n.dataId).values,d=y.computeStrides(n.shape),f=_c(m,n.shape,n.dtype,d,c,"max");l=e.makeTensorInfo(c.outShape,n.dtype,f.values)}return l}var oE={kernelName:Un,backendName:"cpu",kernelFunc:EQ};function RQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o;Q(n,"maxPool3d");let c=w.computePool3DInfo(n.shape,s,a,1,i,p,u),l=e.data.get(n.dataId).values,m=zf(l,n.shape,n.dtype,y.computeStrides(n.shape),c,"max");return e.makeTensorInfo(m.shape,"float32",m.values)}var nE={kernelName:ia,backendName:"cpu",kernelFunc:RQ};function DQ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o;Q([n,s],"maxPool3DGrad");let c=w.computePool3DInfo(s.shape,a,i,1,p,u),l=e.bufferSync(s),m=J_(l,c),d=c.strideDepth,f=c.strideHeight,h=c.strideWidth,g=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,C=c.effectiveFilterDepth,S=c.effectiveFilterHeight,k=c.effectiveFilterWidth,_=C-1-c.padInfo.front,E=k-1-c.padInfo.left,R=S-1-c.padInfo.top,D=me(s.shape,"float32"),P=e.bufferSync(n);for(let O=0;O<c.batchSize;++O)for(let M=0;M<c.inChannels;++M)for(let L=0;L<c.inDepth;++L)for(let B=0;B<c.inHeight;++B)for(let z=0;z<c.inWidth;++z){let U=L-_,j=B-R,q=z-E,Y=0;for(let J=0;J<C;J+=g){let re=(U+J)/d;if(!(re<0||re>=c.outDepth||Math.floor(re)!==re))for(let ne=0;ne<S;ne+=x){let ee=(j+ne)/f;if(!(ee<0||ee>=c.outHeight||Math.floor(ee)!==ee))for(let oe=0;oe<k;oe+=b){let ie=(q+oe)/h;if(ie<0||ie>=c.outWidth||Math.floor(ie)!==ie)continue;let le=C*S*k-1-m.get(O,re,ee,ie,M),be=J*S*k+ne*k+oe,_e=le===be?1:0;if(_e===0)continue;let ve=P.get(O,re,ee,ie,M);Y+=ve*_e}}}D.set(Y,O,L,B,z,M)}return e.makeTensorInfo(D.shape,D.dtype,D.values)}var sE={kernelName:Ki,backendName:"cpu",kernelFunc:DQ};function AQ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:a}=t,i=s;Q([s,a],"maxPoolGrad");let{filterSize:p,strides:u,pad:c,dimRoundingMode:l}=o,m=w.computePool2DInfo(i.shape,p,u,1,c,l),d=e.data.get(i.dataId).values,f=me(m.outShape,i.dtype,Bf(d,i.shape,i.dtype,m).values),h=m.strideHeight,g=m.strideWidth,x=m.dilationHeight,b=m.dilationWidth,C=m.effectiveFilterHeight,S=m.effectiveFilterWidth,k=S-1-m.padInfo.left,_=C-1-m.padInfo.top,E=me(i.shape,"float32"),R=e.data.get(n.dataId).values,D=me(n.shape,"float32",R);for(let P=0;P<m.batchSize;++P)for(let O=0;O<m.inChannels;++O)for(let M=0;M<m.inHeight;++M)for(let L=0;L<m.inWidth;++L){let B=M-_,z=L-k,U=0;for(let j=0;j<C;j+=x){let q=(B+j)/h;if(!(q<0||q>=m.outHeight||Math.floor(q)!==q))for(let Y=0;Y<S;Y+=b){let J=(z+Y)/g;if(J<0||J>=m.outWidth||Math.floor(J)!==J)continue;let re=C*S-1-f.get(P,q,J,O),ne=j*S+Y,ee=re===ne?1:0;if(ee===0)continue;let oe=D.get(P,q,J,O);U+=oe*ee}}E.set(U,P,M,L,O)}return e.makeTensorInfo(E.shape,E.dtype,E.values)}var aE={kernelName:Hi,backendName:"cpu",kernelFunc:AQ};function iE(r,t,e,o,n){let s=y.computeStrides(t),a=_c(r,t,e,s,n,"max"),i=Bf(r,t,e,n,!0,o);return[a.values,i.values]}var uE={kernelName:ua,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:a,includeBatchInIndex:i}=t,p=e;Q(o,"MaxPoolWithArgmax");let u=p.data.get(o.dataId).values,c=w.computePool2DInfo(o.shape,n,s,[1,1],a),[l,m]=iE(u,o.shape,o.dtype,i,c),d=p.write(l,c.outShape,o.dtype),f=p.write(m,c.outShape,o.dtype);return[{dataId:d,shape:c.outShape,dtype:o.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};function FQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o,i=y.parseAxisParam(s,n.shape),u=w.computeOutAndReduceShapes(n.shape,i)[1],c=y.sizeFromShape(u),l=[],m=e.makeTensorInfo([],"float32",new Float32Array([c]));l.push(m);let d=Do({inputs:{x:n},backend:e,attrs:{dtype:"float32"}});l.push(d);let f=Ul({inputs:{a:d,b:m},backend:e});l.push(f);let h=gi({inputs:{x:f},backend:e,attrs:{axis:s,keepDims:a}});return l.forEach(g=>e.disposeIntermediateTensorInfo(g)),h}var pE={kernelName:Gn,backendName:"cpu",kernelFunc:FQ};function PQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;Q(n,"min");let i=y.parseAxisParam(s,n.shape),p=i,u=w.getAxesPermutation(p,n.shape.length),c=n;u!=null&&(c=It({inputs:{x:n},backend:e,attrs:{perm:u}}),p=w.getInnerMostAxes(p.length,n.shape.length)),w.assertAxesAreInnerMostDims("min",p,c.shape.length);let[l,m]=w.computeOutAndReduceShapes(c.shape,p),d=y.sizeFromShape(m),f=y.makeZerosTypedArray(y.sizeFromShape(l),c.dtype),h=e.data.get(c.dataId).values;for(let x=0;x<f.length;++x){let b=x*d,C=h[b];for(let S=0;S<d;++S){let k=h[b+S];(Number.isNaN(k)||k<C)&&(C=k)}f[x]=C}u!=null&&e.disposeIntermediateTensorInfo(c);let g=e.makeTensorInfo(l,c.dtype,f);if(a){let x=w.expandShapeToKeepDim(l,i),b=Ve({inputs:{x:g},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(g),b}return g}var cE={kernelName:Hn,backendName:"cpu",kernelFunc:PQ};function OQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,mode:a}=o;Q(n,"mirrorPad");let i=s.map((C,S)=>C[0]+n.shape[S]+C[1]),p=s.map(C=>C[0]),u=s.map((C,S)=>C[0]+n.shape[S]),c=a==="reflect"?0:1,l=e.data.get(n.dataId).values,m=n.shape.length,d=y.computeStrides(n.shape),f=y.sizeFromShape(i),h=i.length,g=y.computeStrides(i),x=y.getTypedArrayFromDType(n.dtype,f);for(let C=0;C<f;C++){let S=y.indexToLoc(C,h,g);for(let _=0;_<h;_++)S[_]<p[_]?S[_]=p[_]*2-S[_]-c:S[_]>=u[_]&&(S[_]=(u[_]-1)*2-S[_]+c);S=S.map((_,E)=>_-p[E]);let k=y.locToIndex(S,m,d);x[C]=l[k]}return{dataId:e.write(x,i,n.dtype),shape:i,dtype:n.dtype}}var lE={kernelName:qn,backendName:"cpu",kernelFunc:OQ};var MQ=ze((r,t)=>{let e=r%t;return r<0&&t<0||r>=0&&t>=0?e:(e+t)%t}),LQ=Ye(jn,MQ),mE={kernelName:jn,backendName:"cpu",kernelFunc:LQ};var fE=Kp(qw());function SI(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,a=n.shape.length,i=s;if(i===-1&&(i=a-1),i!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);let p=y.parseAxisParam([i],n.shape),u=wI({inputs:{x:n},backend:e,attrs:{reductionIndices:p,keepDims:!1}}),c=w.expandShapeToKeepDim(u.shape,p),l=Ve({inputs:{x:u},backend:e,attrs:{shape:c}}),m=Vl({inputs:{a:n,b:l},backend:e}),d=KS({inputs:{x:m},backend:e}),f=gi({inputs:{x:d},backend:e,attrs:{axis:p,keepDims:!1}}),h=Ve({inputs:{x:f},backend:e,attrs:{shape:c}}),g=Ul({inputs:{a:d,b:h},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),g}var dE={kernelName:vs,backendName:"cpu",kernelFunc:SI};function BQ(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:a,normalized:i}=o;Q(n,"multinomial");let p=i?n:SI({inputs:{logits:n},backend:e,attrs:{dim:-1}}),u=p.shape[0],c=p.shape[1],l=e.data.get(p.dataId).values,m=[u,s],d=y.makeZerosTypedArray(y.sizeFromShape(m),"int32");for(let f=0;f<u;++f){let h=f*c,g=new Float32Array(c-1);g[0]=l[h];for(let C=1;C<g.length;++C)g[C]=g[C-1]+l[h+C];let x=fE.alea(a.toString()),b=f*s;for(let C=0;C<s;++C){let S=x();d[b+C]=g.length;for(let k=0;k<g.length;k++)if(S<g[k]){d[b+C]=k;break}}}return i||e.disposeIntermediateTensorInfo(p),e.makeTensorInfo(m,"int32",d)}var hE={kernelName:Xn,backendName:"cpu",kernelFunc:BQ};var zQ=Wt.nonMaxSuppressionV3Impl;function VQ(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p}=o;Q(n,"NonMaxSuppression");let u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,{selectedIndices:l}=zQ(u,c,a,i,p);return e.makeTensorInfo([l.length],"int32",new Int32Array(l))}var gE={kernelName:Zn,backendName:"cpu",kernelFunc:VQ};var WQ=Wt.nonMaxSuppressionV4Impl;function UQ(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,padToMaxOutputSize:u}=o;Q(n,"NonMaxSuppressionPadded");let c=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,{selectedIndices:m,validOutputs:d}=WQ(c,l,a,i,p,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([d]))]}var xE={kernelName:Za,backendName:"cpu",kernelFunc:UQ};var GQ=Wt.nonMaxSuppressionV5Impl;function HQ(r){let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,softNmsSigma:u}=o;Q(n,"NonMaxSuppressionWithScore");let c=e.data.get(n.dataId).values,l=e.data.get(s.dataId).values,m=a,d=i,f=p,h=u,{selectedIndices:g,selectedScores:x}=GQ(c,l,m,d,f,h);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var yE={kernelName:Jn,backendName:"cpu",kernelFunc:HQ};function KQ(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:a,onValue:i,offValue:p}=o;Q(n,"oneHot");let u=y.sizeFromShape(n.shape),c=new Float32Array(u*a);c.fill(p);let l=e.data.get(n.dataId).values;for(let m=0;m<u;++m)l[m]>=0&&l[m]<a&&(c[m*a+l[m]]=i);return e.makeTensorInfo([...n.shape,a],s,c)}var bE={kernelName:es,backendName:"cpu",kernelFunc:KQ};function Kl(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("zerosLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Ro({inputs:{input:o},backend:e}),s=Kl({inputs:{x:n},backend:e}),a=Ma({inputs:{input:o},backend:e}),i=Kl({inputs:{x:a},backend:e}),p=Kt({inputs:{real:s,imag:i},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),p}else return Hl({backend:e,attrs:{shape:o.shape,value:0,dtype:o.dtype}})}var CE={kernelName:Sa,backendName:"cpu",kernelFunc:Kl};function wE(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported for string tensors");if(o.dtype==="complex64"){let n=Ro({inputs:{input:o},backend:e}),s=wE({inputs:{x:n},backend:e}),a=Ma({inputs:{input:o},backend:e}),i=Kl({inputs:{x:a},backend:e}),p=Kt({inputs:{real:s,imag:i},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),p}else return Hl({backend:e,attrs:{shape:o.shape,value:1,dtype:o.dtype}})}var SE={kernelName:ca,backendName:"cpu",kernelFunc:wE};function II(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return $c({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,a=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let i=[],p=t.map(c=>{let l=$c({inputs:{input:c},backend:e,attrs:{dim:n}});return i.push(l),l}),u=yu({inputs:p,backend:e,attrs:{axis:n}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var IE={kernelName:la,backendName:"cpu",kernelFunc:II};function qQ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:a}=o;Q(n,"pad");let i=s.map((b,C)=>b[0]+n.shape[C]+b[1]),p=s.map(b=>b[0]),u=e.data.get(n.dataId).values,c=y.sizeFromShape(n.shape),l=n.shape.length,m=y.computeStrides(n.shape),d=y.sizeFromShape(i),f=i.length,h=y.computeStrides(i),g=y.getTypedArrayFromDType(n.dtype,d);a!==0&&g.fill(a);for(let b=0;b<c;b++){let S=y.indexToLoc(b,l,m).map((_,E)=>_+p[E]),k=y.locToIndex(S,f,h);g[k]=u[b]}return{dataId:e.write(g,i,n.dtype),shape:i,dtype:n.dtype}}var Wf={kernelName:ts,backendName:"cpu",kernelFunc:qQ};var jQ=ze((r,t)=>Math.pow(r,t)),XQ=Ye(rs,jQ),vE={kernelName:rs,backendName:"cpu",kernelFunc:XQ};function YQ(r){let{inputs:t,backend:e,attrs:o}=r,{paramsNestedSplits:n,paramsDenseValues:s,indices:a}=t,{outputRaggedRank:i}=o,p=n.map(x=>e.data.get(x.dataId).values),u=n.map(x=>x.shape),c=e.data.get(s.dataId).values,l=e.data.get(a.dataId).values,[m,d,f]=Rf(p,u,c,s.shape,s.dtype,l,a.shape,i),h=m.map(x=>e.makeTensorInfo([x.length],"int32",x)),g=e.makeTensorInfo(f,s.dtype,d);return h.concat([g])}var kE={kernelName:Qp,backendName:"cpu",kernelFunc:YQ};function QQ(r){let{inputs:t,backend:e}=r,{starts:o,limits:n,deltas:s}=t,a=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,[u,c]=Df(a,o.shape,o.dtype,i,n.shape,p,s.shape),l=e.makeTensorInfo([u.length],"int32",u),m=e.makeTensorInfo([c.length],o.dtype,c);return[l,m]}var NE={kernelName:Zp,backendName:"cpu",kernelFunc:QQ};function ZQ(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:p}=o,u=e.data.get(n.dataId).values,c=e.data.get(s.dataId).values,l=e.data.get(a.dataId).values,m=i.map(g=>e.data.get(g.dataId).values),d=i.map(g=>g.shape),[f,h]=Af(u,n.shape,c,s.shape,s.dtype,l,a.shape,m,d,p);return e.makeTensorInfo(f,s.dtype,h)}var TE={kernelName:Jp,backendName:"cpu",kernelFunc:ZQ};function JQ(r){let{backend:t,attrs:e}=r,{start:o,stop:n,dtype:s,step:a}=e,i=fp(o,n,a,s);return t.makeTensorInfo([i.length],s,i)}var _E={kernelName:ma,backendName:"cpu",kernelFunc:JQ};var e7=Ie(ss,r=>1/r),$E={kernelName:ss,backendName:"cpu",kernelFunc:e7};function t7(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:a,size:i}=o;Q(n,"resizeBilinear");let p=y.computeStrides(n.shape),[u,c]=i,[l,m,d,f]=n.shape,h=e.data.get(n.dataId).values,g=new Float32Array(y.sizeFromShape([l,u,c,f])),x=[s&&u>1?m-1:m,s&&c>1?d-1:d],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],C=0,S=x[0]/b[0],k=x[1]/b[1];for(let _=0;_<l;_++)for(let E=0;E<u;E++){let R;a?R=S*(E+.5)-.5:R=S*E;let D=Math.max(0,Math.floor(R)),P=R-D,O=Math.min(m-1,Math.ceil(R)),M=_*p[0]+D*p[1],L=_*p[0]+O*p[1];for(let B=0;B<c;B++){let z;a?z=k*(B+.5)-.5:z=k*B;let U=Math.max(0,Math.floor(z)),j=z-U,q=Math.min(d-1,Math.ceil(z)),Y=M+U*p[2],J=L+U*p[2],re=M+q*p[2],ne=L+q*p[2];for(let ee=0;ee<f;ee++){let oe=h[Y+ee],ie=h[J+ee],le=h[re+ee],be=h[ne+ee],_e=oe+(le-oe)*j,ve=ie+(be-ie)*j,Fe=_e+(ve-_e)*P;g[C++]=Fe}}}return e.makeTensorInfo([l,u,c,f],"float32",g)}var EE={kernelName:us,backendName:"cpu",kernelFunc:t7};function r7(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:a}=o;Q([s,n],"resizeBilinearGrad");let i=y.computeStrides(n.shape),[p,u,c,l]=n.shape,[,m,d]=s.shape,f=new Float32Array(p*u*c*l),h=[a&&m>1?u-1:u,a&&d>1?c-1:c],g=[a&&m>1?m-1:m,a&&d>1?d-1:d],x=h[0]/g[0],b=h[1]/g[1],C=e.data.get(s.dataId).values,S=0;for(let k=0;k<p;k++){let _=k*i[0];for(let E=0;E<m;E++){let R=E*x,D=Math.floor(R),P=Math.min(Math.ceil(R),u-1),O=_+D*i[1],M=_+P*i[1],L=R-D,B=1-L;for(let z=0;z<d;z++){let U=z*b,j=Math.floor(U),q=Math.min(Math.ceil(U),c-1),Y=U-j,J=1-Y,re=O+j*i[2],ne=O+q*i[2],ee=M+j*i[2],oe=M+q*i[2],ie=B*J,le=B*Y,be=L*J,_e=L*Y;for(let ve=0;ve<l;ve++){let Fe=C[S++];f[re+ve]+=Fe*ie,f[ne+ve]+=Fe*le,f[ee+ve]+=Fe*be,f[oe+ve]+=Fe*_e}}}}return e.makeTensorInfo([p,c,u,l],"float32",f)}var RE={kernelName:ei,backendName:"cpu",kernelFunc:r7};function o7(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:a,size:i}=o;Q(n,"resizeNearestNeighbor");let p=y.computeStrides(n.shape),[u,c]=i,[l,m,d,f]=n.shape,h=e.data.get(n.dataId).values,g=new Float32Array(l*u*c*f),x=[s&&u>1?m-1:m,s&&c>1?d-1:d],b=[s&&u>1?u-1:u,s&&c>1?c-1:c],C=x[0]/b[0],S=x[1]/b[1],k=0;for(let _=0;_<l;_++){let E=_*p[0];for(let R=0;R<u;R++){let D=a?C*(R+.5):C*R,P=Math.min(m-1,s?Math.round(D):Math.floor(D));a&&(P=Math.max(0,P));let O=E+P*p[1];for(let M=0;M<c;M++){let L=a?S*(M+.5):S*M,B=Math.min(d-1,s?Math.round(L):Math.floor(L));a&&(B=Math.max(0,B));let z=O+B*p[2];for(let U=0;U<f;U++){let j=h[z+U];g[k++]=j}}}}return e.makeTensorInfo([l,u,c,f],n.dtype,g)}var DE={kernelName:is,backendName:"cpu",kernelFunc:o7};function n7(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:a}=o;Q([s,n],"resizeNearestNeighborGrad");let i=y.computeStrides(n.shape),p=y.computeStrides(s.shape),[u,c,l,m]=n.shape,[,d,f]=s.shape,h=new Float32Array(u*c*l*m),g=e.data.get(s.dataId).values,x=[a&&d>1?c-1:c,a&&f>1?l-1:l],b=[a&&d>1?d-1:d,a&&f>1?f-1:f],C=x[0]/b[0],S=x[1]/b[1],k=1/C,_=1/S,E=Math.ceil(k)*2+2,R=Math.ceil(_)*2+2;for(let D=0;D<u;D++){let P=D*i[0];for(let O=0;O<c;O++){let M=P+O*i[1],L=Math.floor(O*k),B=Math.floor(L-E/2);for(let z=0;z<l;z++){let U=M+z*i[2],j=Math.floor(z*_),q=Math.floor(j-R/2);for(let Y=0;Y<m;Y++){let J=0;for(let re=0;re<E;re++){let ne=re+B;if(ne<0||ne>=d)continue;let ee=P+ne*p[1],oe=ne*C,ie=Math.min(c-1,a?Math.round(oe):Math.floor(oe));if(O===ie)for(let le=0;le<R;le++){let be=le+q;if(be<0||be>=f)continue;let _e=ee+be*p[2],ve=be*S,Fe=Math.min(l-1,a?Math.round(ve):Math.floor(ve));z===Fe&&(J+=g[_e+Y])}}h[U+Y]=J}}}}return e.makeTensorInfo(n.shape,n.dtype,h)}var AE={kernelName:Ja,backendName:"cpu",kernelFunc:n7};function s7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o;Q(n,"reverse");let a=n.shape.length,i=y.parseAxisParam(s,n.shape);if(a===0)return mr({inputs:{x:n},backend:e});let p=new tt(n.shape,n.dtype),u=e.bufferSync(n);for(let c=0;c<p.size;c++){let l=p.indexToLoc(c),m=l.slice();i.forEach(d=>m[d]=n.shape[d]-1-m[d]),p.set(u.get(...m),...l)}return e.makeTensorInfo(p.shape,p.dtype,p.values)}var FE={kernelName:cs,backendName:"cpu",kernelFunc:s7};var PE={kernelName:As,backendName:"cpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:a}=t,i=e,p=y.getTypedArrayFromDType(o.dtype,y.sizeFromShape(o.shape)),[u,c,l,m]=o.shape,[d,f]=w.getImageCenter(a,c,l),h=255,g=Math.sin(n),x=Math.cos(n),b=i.data.get(o.dataId).values;for(let S=0;S<u;S++){let k=S*l*c*m;for(let _=0;_<c;_++){let E=_*(l*m);for(let R=0;R<l;R++){let D=R*m;for(let P=0;P<m;P++){let O=[u,_,R,P],M=O[2],L=O[1],B=(M-d)*x-(L-f)*g,z=(M-d)*g+(L-f)*x;B=Math.round(B+d),z=Math.round(z+f);let U=s;if(typeof s!="number"&&(P===3?U=h:U=s[P]),B>=0&&B<l&&z>=0&&z<c){let q=z*(l*m),Y=B*m,J=k+q+Y+P;U=b[J]}let j=k+E+D+P;p[j]=U}}}}return{dataId:i.write(p,o.shape,o.dtype),shape:o.shape,dtype:o.dtype}}};var a7=Ie(ls,r=>{let t=Math.floor(r);return r-t<.5?Math.floor(r):r-t>.5?Math.ceil(r):t%2===0?t:t+1}),OE={kernelName:ls,backendName:"cpu",kernelFunc:a7};function i7(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:a}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:c,outputSize:l}=w.calculateShapes(s,n,a),m=!0,d=e.bufferSync(n),f=e.bufferSync(s),h=zs(d,f,a,l,u,p,i,c,0,m);return e.makeTensorInfo(a,h.dtype,h.values)}var ME={kernelName:ds,backendName:"cpu",kernelFunc:i7};function u7(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<t?e=n+1:o=n;return o}function p7(r,t){let e=0,o=r.length,n=0;for(;e<o;)n=Math.floor((e+o)/2),r[n]<=t?e=n+1:o=n;return o}function LE(r,t,e,o,n,s){let a=y.getArrayFromDType("int32",e*n);for(let i=0;i<e;++i){let p=r.slice(i*o,(i+1)*o),u=i*n;for(let c=0;c<n;++c)a[u+c]=s==="left"?u7(p,t[c+u]):p7(p,t[c+u])}return a}function c7(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:a}=o,i=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,u=LE(i,p,n.shape[0],n.shape[1],s.shape[1],a);return e.makeTensorInfo(s.shape,"int32",u)}var BE={kernelName:hs,backendName:"cpu",kernelFunc:c7};function l7(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t;Q([o,n,s],"select");let a=o.shape.length,i=e.data.get(o.dataId).values,p=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=dt(n.dtype,s.dtype),l=y.makeZerosTypedArray(y.sizeFromShape(n.shape),c),m=0,d=a===0||a>1||n.shape.length===1?1:y.sizeFromShape(n.shape.slice(1));for(let f=0;f<i.length;f++)for(let h=0;h<d;h++)i[f]===1?l[m++]=p[f]:l[m++]=u[f];return e.makeTensorInfo(n.shape,c,l)}var zE={kernelName:fa,backendName:"cpu",kernelFunc:l7};var m7=w.SELU_SCALEALPHA,d7=w.SELU_SCALE,f7=Ie(gs,r=>r>=0?d7*r:m7*(Math.exp(r)-1)),VE={kernelName:gs,backendName:"cpu",kernelFunc:f7};var h7=Ie(bs,r=>r<0?-1:r>0?1:0),WE={kernelName:bs,backendName:"cpu",kernelFunc:h7};var g7=Ie(xs,r=>Math.sin(r)),UE={kernelName:xs,backendName:"cpu",kernelFunc:g7};var x7=Ie(ys,r=>Math.sinh(r)),GE={kernelName:ys,backendName:"cpu",kernelFunc:x7};var y7=11920928955078125e-23,HE=Math.log(y7)+2,b7=Ie(ws,r=>{let t=r>-HE,e=r<HE,o=Math.exp(r),n;return e?n=o:t?n=r:n=Math.log(1+o),n}),KE={kernelName:ws,backendName:"cpu",kernelFunc:b7};function C7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:a}=o;Q([n],"spaceToBatchND");let i=y.sizeFromShape(s),p=[[0,0]];p.push(...a);for(let _=1+s.length;_<n.shape.length;++_)p.push([0,0]);let u=Wf.kernelFunc({inputs:{x:n},backend:e,attrs:{paddings:p,constantValue:0}}),c=w.getReshaped(u.shape,s,i,!1),l=w.getPermuted(c.length,s.length,!1),m=w.getReshapedPermuted(u.shape,s,i,!1),h=Ve({inputs:{x:u},backend:e,attrs:{shape:c}}),b=It({inputs:{x:h},backend:e,attrs:{perm:l}}),k=Ve({inputs:{x:b},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(b),k}var qE={kernelName:ga,backendName:"cpu",kernelFunc:C7};function w7(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:a}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
        ${n.shape}`);if(a.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);let i=e.data.get(o.dataId).values,p=e.data.get(n.dataId).values,u=e.data.get(s.dataId).values,c=e.data.get(a.dataId).values[0],[l,m,d,f,h]=Ff(i,o.shape,o.dtype,p,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,l),e.makeTensorInfo([m[0]],n.dtype,d),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(g=>Number(g)))),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}var jE={kernelName:ji,backendName:"cpu",kernelFunc:w7};function S7(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let a=Array.from(e.data.get(n.dataId).values),i=e.data.get(o.dataId).values,p=Array.from(e.data.get(s.dataId).values),[u,c,l]=Pf(i,o.shape,o.dtype,a,p);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([l.length],s.dtype,new Int32Array(l))]}var XE={kernelName:ti,backendName:"cpu",kernelFunc:S7};function I7(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let a=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,[u,c]=Nc(a,o.shape,o.dtype,i,p,!0);return e.makeTensorInfo(c,o.dtype,u)}var YE={kernelName:ya,backendName:"cpu",kernelFunc:I7};function v7(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(n.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");let a=e.data.get(o.dataId).values,i=e.data.get(n.dataId).values,p=e.data.get(s.dataId).values,[u,c]=Nc(a,o.shape,o.dtype,i,p);return e.makeTensorInfo(c,o.dtype,u)}var QE={kernelName:ba,backendName:"cpu",kernelFunc:v7};function k7(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:a}=t,{outputShape:i}=o,{sliceRank:p,numUpdates:u,sliceSize:c,strides:l,outputSize:m}=w.calculateShapes(s,n,i),d=!1,f=e.bufferSync(n),h;switch(s.dtype){case"bool":{let g=e.bufferSync(s),x=!!e.data.get(a.dataId).values[0];h=zs(f,g,i,m,c,u,p,l,x,d);break}case"float32":{let g=e.bufferSync(s),x=e.data.get(a.dataId).values[0];h=zs(f,g,i,m,c,u,p,l,x,d);break}case"int32":{let g=e.bufferSync(s),x=e.data.get(a.dataId).values[0];h=zs(f,g,i,m,c,u,p,l,x,d);break}case"string":{let g=e.bufferSync(s),x=y.decodeString(e.data.get(a.dataId).values[0]);h=zs(f,g,i,m,c,u,p,l,x,d);break}default:throw new Error(`Unsupported type ${s.dtype}`)}return e.makeTensorInfo(i,h.dtype,h.values)}var ZE={kernelName:ks,backendName:"cpu",kernelFunc:k7};function N7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:a}=o,i=y.parseAxisParam(a,n.shape)[0],p=w.prepareSplitSize(n,s,i),u=new Array(n.shape.length).fill(0),c=n.shape.slice();return p.map(l=>{let m=[...c];m[i]=l;let d=Fo({inputs:{x:n},backend:e,attrs:{begin:u,size:m}});return u[i]+=l,d})}var JE={kernelName:xa,backendName:"cpu",kernelFunc:N7};var eR={kernelName:Xi,backendName:"cpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t;Q(e,"square");let n=o.data.get(e.dataId).values,s=new Float32Array(n.length);for(let i=0;i<n.length;++i){let p=n[i];s[i]=p*p}return{dataId:o.write(s,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}};var T7=Ie(So,(r,t)=>{let e=t;return isNaN(r)?NaN:r>0?1:e.alpha}),tR={kernelName:So,backendName:"cpu",kernelFunc:T7};function _7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:a,strides:i,beginMask:p,endMask:u,ellipsisMask:c,newAxisMask:l,shrinkAxisMask:m}=o;Q(n,"stridedSlice");let{finalShapeSparse:d,finalShape:f,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:C,strides:S}=ct.sliceInfo(n.shape,s,a,i,p,u,c,l,m),k;if(h)k=Ve({inputs:{x:n},backend:e,attrs:{shape:f}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let _=ct.computeOutShape(b,C,S),E=Fo({inputs:{x:n},backend:e,attrs:{begin:b,size:_}});k=Ve({inputs:{x:E},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(E)}else{let _=e.bufferSync(n),E=Of(d,_,S,b);k=e.makeTensorInfo(f,E.dtype,E.values)}return k}var rR={kernelName:Ts,backendName:"cpu",kernelFunc:_7};function $7(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:a,rightPad:i,padWidth:p,preserveShortSequences:u}=o,{data:c,dataSplits:l}=t,m=e.data.get(c.dataId).values,d=e.data.get(l.dataId).values,[f,h]=gp(m,d,n,s,a,i,p,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(l.shape,"int32",h)]}var oR={kernelName:Ca,backendName:"cpu",kernelFunc:$7};function E7(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:a}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(a.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);let i=e.data.get(s.dataId).values,p=e.data.get(a.dataId).values[0],[u,c,l]=xp(i,p,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(l))]}var nR={kernelName:Yi,backendName:"cpu",kernelFunc:E7};function R7(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let a=e.data.get(s.dataId).values,i=yp(a,n);return e.makeTensorInfo(s.shape,"int32",i)}var sR={kernelName:Qi,backendName:"cpu",kernelFunc:R7};var D7=Ie($s,r=>Math.tan(r)),aR={kernelName:$s,backendName:"cpu",kernelFunc:D7};var A7=Ie(Es,r=>Math.tanh(r)),iR={kernelName:Es,backendName:"cpu",kernelFunc:A7};function F7(r){let{inputs:t,backend:e}=r,{tensor:o,indices:n,updates:s}=t,{sliceRank:a,numUpdates:i,sliceSize:p,strides:u,outputSize:c}=w.calculateShapes(s,n,o.shape),l=!1,m=e.bufferSync(n),d=e.bufferSync(s),f=e.bufferSync(o),h=zs(m,d,o.shape,c,p,i,a,u,f,l);return e.makeTensorInfo(o.shape,h.dtype,h.values)}var uR={kernelName:fs,backendName:"cpu",kernelFunc:F7};function P7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;Q(n,"tile");let a=Mf(e.bufferSync(n),s);return e.makeTensorInfo(a.shape,a.dtype,a.values)}var pR={kernelName:po,backendName:"cpu",kernelFunc:P7};function O7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:a}=o;Q(n,"topk");let i=e.data.get(n.dataId).values,[p,u]=Lf(i,n.shape,n.dtype,s,a);return[e.makeTensorInfo(p.shape,p.dtype,p.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}var cR={kernelName:Rs,backendName:"cpu",kernelFunc:O7};function M7(r){let{inputs:t,attrs:e,backend:o}=r,{image:n,transforms:s}=t,{interpolation:a,fillMode:i,fillValue:p,outputShape:u}=e,[c,l,m,d]=n.shape,[f,h]=u!=null?u:[l,m],g=[c,f,h,d],x=y.computeStrides(n.shape),b=x[0],C=x[1],S=x[2],k=y.computeStrides(g),_=k[0],E=k[1],R=k[2],D=y.getTypedArrayFromDType(n.dtype,y.sizeFromShape(g));D.fill(p);let P=o.data.get(n.dataId).values,O=o.data.get(s.dataId).values;for(let L=0;L<c;++L){let B=s.shape[0]===1?O:O.subarray(L*8,L*8+8);for(let z=0;z<f;++z)for(let U=0;U<h;++U)for(let j=0;j<d;++j){let q,Y=B[6]*U+B[7]*z+1;if(Y===0)continue;let J=(B[0]*U+B[1]*z+B[2])/Y,re=(B[3]*U+B[4]*z+B[5])/Y,ne=lR(J,m,i),ee=lR(re,l,i);switch(a){case"nearest":q=W7(P,l,m,b,C,S,L,ee,ne,j,p);break;case"bilinear":q=U7(P,l,m,b,C,S,L,ee,ne,j,p);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`)}let oe=L*_+z*E+U*R+j;D[oe]=q}return o.makeTensorInfo(g,n.dtype,D)}return{dataId:o.write(D,g,n.dtype),shape:n.shape,dtype:n.dtype}}var mR={kernelName:Ds,backendName:"cpu",kernelFunc:M7};function lR(r,t,e){switch(e){case"reflect":return L7(r,t);case"wrap":return B7(r,t);case"nearest":return V7(r,t);case"constant":default:return z7(r,t)}}function L7(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=2*t;e<o&&(e=o*Math.trunc(-e/o)+e),e=e<-t?e+o:-e-1}else if(e>t-1)if(t<=1)e=0;else{let o=2*t;e-=o*Math.trunc(e/o),e>=t&&(e=o-e-1)}return y.clamp(0,e,t-1)}function B7(r,t){let e=r;if(e<0)if(t<=1)e=0;else{let o=t-1;e+=t*(Math.trunc(-e/o)+1)}else if(e>t-1)if(t<=1)e=0;else{let o=t-1;e-=t*Math.trunc(e/o)}return y.clamp(0,e,t-1)}function z7(r,t){return r}function V7(r,t){return y.clamp(0,r,t-1)}function ql(r,t,e,o,n,s,a,i,p,u,c){let l=a*o+i*n+p*s+u;return 0<=i&&i<t&&0<=p&&p<e?r[l]:c}function W7(r,t,e,o,n,s,a,i,p,u,c){let l=Math.round(i),m=Math.round(p);return ql(r,t,e,o,n,s,a,l,m,u,c)}function U7(r,t,e,o,n,s,a,i,p,u,c){let l=Math.floor(i),m=Math.floor(p),d=l+1,f=m+1,h=(f-p)*ql(r,t,e,o,n,s,a,l,m,u,c)+(p-m)*ql(r,t,e,o,n,s,a,l,f,u,c),g=(f-p)*ql(r,t,e,o,n,s,a,d,m,u,c)+(p-m)*ql(r,t,e,o,n,s,a,d,f,u,c);return(d-i)*h+(i-l)*g}function G7(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Q(s,"unique");let a=o.data.get(s.dataId).values,{outputValues:i,outputShape:p,indices:u}=bp(a,n,s.shape,s.dtype);return[o.makeTensorInfo(p,s.dtype,i),o.makeTensorInfo([u.length],"int32",u)]}var dR={kernelName:Zi,backendName:"cpu",kernelFunc:G7};function H7(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let a=n.shape.length,i=n.shape[s],p=new Array(a-1),u=0;for(let d=0;d<a;d++)d!==s&&(p[u++]=n.shape[d]);let c=new Array(a).fill(0),l=n.shape.slice();l[s]=1;let m=new Array(i);for(let d=0;d<m.length;d++){c[s]=d;let f=Fo({inputs:{x:n},backend:e,attrs:{begin:c,size:l}});m[d]=Ve({inputs:{x:f},backend:e,attrs:{shape:p}}),e.disposeIntermediateTensorInfo(f)}return m}var fR={kernelName:wa,backendName:"cpu",kernelFunc:H7};function K7(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:a}=o;Q(n,"unsortedSegmentSum");let i=n.shape.length,p=s.shape.length,u=[],c=[],l=i-p,m=s;for(let f=0;f<l;++f){let h=$c({inputs:{input:m},backend:e,attrs:{dim:f+1}});m=h,c.push(h)}for(let f=0;f<a;++f){let h=y.createScalarValue(f,"int32"),g=e.makeTensorInfo([],"int32",h),x=GS({inputs:{a:g,b:m},backend:e}),b=Do({inputs:{x},backend:e,attrs:{dtype:"float32"}}),C=dp({inputs:{a:b,b:n},backend:e}),S=gi({inputs:{x:C},backend:e,attrs:{axis:0,keepDims:!1}});u.push(S),c.push(g),c.push(x),c.push(b),c.push(C),c.push(S)}let d=II({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),d}var hR={kernelName:Ji,backendName:"cpu",kernelFunc:K7};var q7=[z_,jT,V_,W_,JT,U_,G_,H_,K_,q_,j_,X_,Y_,Q_,Z_,e$,t$,r$,o$,B_,n$,s$,a$,e_,i$,ZT,t_,u$,XT,p$,l$,m$,d$,f$,h$,g$,x$,y$,b$,C$,w$,S$,I$,v$,k$,N$,T$,_$,$$,E$,R$,D$,F$,A_,P$,r_,O$,o_,M$,n_,L$,B$,z$,s_,a_,V$,W$,U$,G$,i_,u_,YT,H$,c$,K$,q$,j$,F_,p_,c_,X$,l_,Y$,Q$,Z$,J$,eE,tE,rE,m_,oE,nE,sE,aE,uE,pE,cE,d_,lE,mE,hE,f_,h_,gE,xE,yE,g_,bE,SE,IE,Wf,vE,P_,y_,kE,NE,TE,_E,QT,Gl,$E,O_,M_,L_,EE,RE,DE,AE,FE,PE,OE,I_,ME,BE,zE,VE,k_,WE,UE,GE,N_,dE,KE,qE,jE,XE,YE,QE,ZE,JE,__,eR,$_,E_,tR,rR,oR,nR,sR,R_,A$,aR,iR,uR,pR,cR,mR,x_,dR,fR,hR,CE];for(let r of q7)ri(r);var Ac={};qe(Ac,{assertNotComplex:()=>Vs,bindCanvasToFramebuffer:()=>rZ,bindColorTextureToFramebuffer:()=>Ql,bindTextureToProgramUniformSampler:()=>BI,bindTextureUnit:()=>bR,bindVertexBufferToProgramAttribute:()=>jf,callAndCheck:()=>ce,canBeRepresented:()=>TI,createFragmentShader:()=>$I,createFramebuffer:()=>OI,createProgram:()=>EI,createStaticIndexBuffer:()=>AI,createStaticVertexBuffer:()=>DI,createTexture:()=>FI,createVertexShader:()=>_I,getBatchDim:()=>yi,getExtensionOrThrow:()=>Ec,getFramebufferErrorMessage:()=>CR,getMaxTexturesInShader:()=>WI,getNumChannels:()=>eZ,getProgramUniformLocation:()=>LI,getProgramUniformLocationOrThrow:()=>MI,getRowsCols:()=>bi,getShapeAs3D:()=>Dc,getTextureShapeFromLogicalShape:()=>zI,getWebGLDisjointQueryTimerVersion:()=>UI,getWebGLErrorMessage:()=>yR,getWebGLMaxTextureSize:()=>VI,hasExtension:()=>qr,isCapableOfRenderingToFloatTexture:()=>GI,isDownloadFloatTextureEnabled:()=>HI,isReshapeFree:()=>Cu,isWebGLFenceEnabled:()=>KI,isWebGLVersionEnabled:()=>Yf,linkProgram:()=>RI,logShaderSourceAndInfoLog:()=>qf,resetMaxTextureSize:()=>oZ,resetMaxTexturesInShader:()=>nZ,unbindColorTextureFromFramebuffer:()=>Xf,unbindTextureUnit:()=>tZ,validateFramebuffer:()=>Rc,validateProgram:()=>Yl,validateTextureSize:()=>PI});var wp={},Uf={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function vI(r,t){wp[r]=t}function Kr(r,t){if(!(r in wp)||t!=null){let o=X7(r,t);if(o!==null)wp[r]=o;else return console.log("Could not get context for WebGL version",r),null}let e=wp[r];return e==null||e.isContextLost()?(delete wp[r],Kr(r)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),wp[r])}function j7(r){if(!A().getBool("IS_SAFARI")&&typeof OffscreenCanvas!="undefined"&&r===2)return new OffscreenCanvas(300,150);if(typeof document!="undefined")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function X7(r,t){if(r!==1&&r!==2)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");let e=t==null?j7(r):t;return e.addEventListener("webglcontextlost",o=>{o.preventDefault(),delete wp[r]},!1),A().getBool("SOFTWARE_WEBGL_ENABLED")&&(Uf.failIfMajorPerformanceCaveat=!1),r===1?e.getContext("webgl",Uf)||e.getContext("experimental-webgl",Uf):e.getContext("webgl2",Uf)}var bu;(function(r){r[r.DENSE=0]="DENSE",r[r.SHARED_BATCH=1]="SHARED_BATCH"})(bu||(bu={}));var dr;(function(r){r[r.RENDER=0]="RENDER",r[r.UPLOAD=1]="UPLOAD",r[r.PIXELS=2]="PIXELS",r[r.DOWNLOAD=3]="DOWNLOAD"})(dr||(dr={}));var rr;(function(r){r[r.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",r[r.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",r[r.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",r[r.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",r[r.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"})(rr||(rr={}));function Sp(r,t){return[t,r]}function gR(r,t){return r*t}function jl(r){let t=y.sizeFromShape(r),e=Math.ceil(t/4);return y.sizeToSquarishShape(e)}function La(r,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(r/2))]}function xR(r,t){let[e,o]=La(r,t);return e*o*4}function Xl(r,t){let e=r,o,n,s,a,i,p,u,c,l,m;return A().getNumber("WEBGL_VERSION")===2?(o=e.R32F,n=e.R16F,s=e.RGBA16F,a=e.RGBA32F,i=e.RED,u=4,c=1,l=e.HALF_FLOAT,m=e.FLOAT,p=e.RGBA8):(o=r.RGBA,n=r.RGBA,s=r.RGBA,a=e.RGBA,i=r.RGBA,u=4,c=4,l=t!=null?t.HALF_FLOAT_OES:null,m=r.FLOAT,p=r.RGBA),{internalFormatFloat:o,internalFormatHalfFloat:n,internalFormatPackedHalfFloat:s,internalFormatPackedFloat:a,textureFormatFloat:i,downloadTextureFormat:p,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:l,textureTypeFloat:m}}function ce(r,t){let e=t();return A().getBool("DEBUG")&&Y7(r),e}function Y7(r){let t=r.getError();if(t!==r.NO_ERROR)throw new Error("WebGL Error: "+yR(r,t))}var Q7=596e-10,Z7=65504;function TI(r){return!!(A().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||r===0||Q7<Math.abs(r)&&Math.abs(r)<Z7)}function yR(r,t){switch(t){case r.NO_ERROR:return"NO_ERROR";case r.INVALID_ENUM:return"INVALID_ENUM";case r.INVALID_VALUE:return"INVALID_VALUE";case r.INVALID_OPERATION:return"INVALID_OPERATION";case r.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case r.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case r.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}function Ec(r,t){return xi(r,()=>r.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function _I(r,t){let e=xi(r,()=>r.createShader(r.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(ce(r,()=>r.shaderSource(e,t)),ce(r,()=>r.compileShader(e)),r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw console.log(r.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}function $I(r,t){let e=xi(r,()=>r.createShader(r.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(ce(r,()=>r.shaderSource(e,t)),ce(r,()=>r.compileShader(e)),A().get("ENGINE_COMPILE_ONLY"))return e;if(r.getShaderParameter(e,r.COMPILE_STATUS)===!1)throw qf(t,r.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}var J7=/ERROR: [0-9]+:([0-9]+):/g;function qf(r,t){let e=J7.exec(t);if(e==null){console.log(`Couldn't parse line number in error: ${t}`),console.log(r);return}let o=+e[1],n=r.split(`
`),s=n.length.toString().length+2,a=n.map((l,m)=>y.rightPad((m+1).toString(),s)+l),i=0;for(let l=0;l<a.length;l++)i=Math.max(a[l].length,i);let p=a.slice(0,o-1),u=a.slice(o-1,o),c=a.slice(o);console.log(p.join(`
`)),console.log(t.split(`
`)[0]),console.log(`%c ${y.rightPad(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join(`
`))}function EI(r){return xi(r,()=>r.createProgram(),"Unable to create WebGLProgram.")}function RI(r,t){if(ce(r,()=>r.linkProgram(t)),!A().get("ENGINE_COMPILE_ONLY")&&r.getProgramParameter(t,r.LINK_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function Yl(r,t){if(ce(r,()=>r.validateProgram(t)),r.getProgramParameter(t,r.VALIDATE_STATUS)===!1)throw console.log(r.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function DI(r,t){let e=xi(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),ce(r,()=>r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function AI(r,t){let e=xi(r,()=>r.createBuffer(),"Unable to create WebGLBuffer");return ce(r,()=>r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e)),ce(r,()=>r.bufferData(r.ELEMENT_ARRAY_BUFFER,t,r.STATIC_DRAW)),e}function eZ(){return A().getNumber("WEBGL_VERSION")===2?1:4}function FI(r){return xi(r,()=>r.createTexture(),"Unable to create WebGLTexture.")}function PI(r,t){let e=A().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(r<=0||t<=0){let o=`[${r}x${t}]`;throw new Error("Requested texture size "+o+" is invalid.")}if(r>e||t>e){let o=`[${r}x${t}]`,n=`[${e}x${e}]`;throw new Error("Requested texture size "+o+" greater than WebGL maximum on this browser / GPU "+n+".")}}function OI(r){return xi(r,()=>r.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function jf(r,t,e,o,n,s,a){let i=r.getAttribLocation(t,e);return i===-1?!1:(ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,o)),ce(r,()=>r.vertexAttribPointer(i,n,r.FLOAT,!1,s,a)),ce(r,()=>r.enableVertexAttribArray(i)),!0)}function bR(r,t,e){wR(r,e),ce(r,()=>r.activeTexture(r.TEXTURE0+e)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,t))}function tZ(r,t){wR(r,t),ce(r,()=>r.activeTexture(r.TEXTURE0+t)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function MI(r,t,e){return xi(r,()=>r.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}function LI(r,t,e){return r.getUniformLocation(t,e)}function BI(r,t,e,o){ce(r,()=>bR(r,t,o)),ce(r,()=>r.uniform1i(e,o))}function rZ(r){ce(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,null)),ce(r,()=>r.viewport(0,0,r.canvas.width,r.canvas.height)),ce(r,()=>r.scissor(0,0,r.canvas.width,r.canvas.height))}function Ql(r,t,e){ce(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,e)),ce(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t,0))}function Xf(r,t){ce(r,()=>r.bindFramebuffer(r.FRAMEBUFFER,t)),ce(r,()=>r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,null,0))}function Rc(r){let t=r.checkFramebufferStatus(r.FRAMEBUFFER);if(t!==r.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+CR(r,t))}function CR(r,t){switch(t){case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case r.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}function xi(r,t,e){let o=ce(r,()=>t());if(o==null)throw new Error(e);return o}function wR(r,t){let e=r.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,o=t+r.TEXTURE0;if(o<r.TEXTURE0||o>e){let n=`[gl.TEXTURE0, gl.TEXTURE${e}]`;throw new Error(`textureUnit must be in ${n}.`)}}function yi(r,t=2){return y.sizeFromShape(r.slice(0,r.length-t))}function bi(r){if(r.length===0)throw Error("Cannot get rows and columns of an empty shape array.");return[r.length>1?r[r.length-2]:1,r[r.length-1]]}function Dc(r){let t=[1,1,1];return r.length===0||r.length===1&&r[0]===1||(t=[yi(r),...bi(r)]),t}function zI(r,t=!1){let e=A().getNumber("WEBGL_MAX_TEXTURE_SIZE"),o=A().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");o===1/0&&A().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(o=e/2),t&&(e=e*2,o=o*2,r=r.map((i,p)=>p>=r.length-2?y.nearestLargerEven(r[p]):r[p]),r.length===1&&(r=[2,r[0]])),r.length!==2&&(r=y.squeezeShape(r).newShape);let n=y.sizeFromShape(r),s=null;r.length<=1&&n<=e?s=[1,n]:r.length===2&&r[0]<=e&&r[1]<=e?s=r:r.length===3&&r[0]*r[1]<=e&&r[2]<=e?s=[r[0]*r[1],r[2]]:r.length===3&&r[0]<=e&&r[1]*r[2]<=e?s=[r[0],r[1]*r[2]]:r.length===4&&r[0]*r[1]*r[2]<=e&&r[3]<=e?s=[r[0]*r[1]*r[2],r[3]]:r.length===4&&r[0]<=e&&r[1]*r[2]*r[3]<=e&&(s=[r[0],r[1]*r[2]*r[3]]);let a=s!=null&&Math.max(...s)>o&&Math.min(...s)<=(t?2:1)&&Math.min(...s)>0;if(s==null||a)if(t){let i=yi(r),p=2,u=2;r.length&&([p,u]=bi(r)),n=i*(p/2)*(u/2),s=y.sizeToSquarishShape(n).map(c=>c*2)}else s=y.sizeToSquarishShape(n);return s}function Gf(r){return r%2===0}function Cu(r,t){if(r=r.slice(-2),t=t.slice(-2),y.arraysEqual(r,t)||!r.length||!t.length||r[0]===0||r[1]===0||t[0]===0||t[1]===0)return!0;if(r.length!==t.length){let e=r[r.length-1],o=t[t.length-1];if(e===o||Gf(e)&&Gf(o)&&(r[0]===1||t[0]===1))return!0}return r[1]===t[1]&&Gf(r[0])&&Gf(t[0])}var Hf,Kf;function VI(r){if(Hf==null){let t=Kr(r);Hf=t.getParameter(t.MAX_TEXTURE_SIZE)}return Hf}function oZ(){Hf=null}function nZ(){Kf=null}function WI(r){if(Kf==null){let t=Kr(r);Kf=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Kf)}function UI(r){if(r===0)return 0;let t,e=Kr(r);return qr(e,"EXT_disjoint_timer_query_webgl2")&&r===2?t=2:qr(e,"EXT_disjoint_timer_query")?t=1:t=0,t}function qr(r,t){return r.getExtension(t)!=null}function Yf(r){try{if(Kr(r)!=null)return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function GI(r){if(r===0)return!1;let t=Kr(r);if(r===1){if(!qr(t,"OES_texture_float"))return!1}else if(!qr(t,"EXT_color_buffer_float"))return!1;return NI(t)}function HI(r){if(r===0)return!1;let t=Kr(r);if(r===1){if(!qr(t,"OES_texture_float")||!qr(t,"WEBGL_color_buffer_float"))return!1}else{if(qr(t,"EXT_color_buffer_float"))return NI(t);let o="EXT_color_buffer_half_float";if(qr(t,o)){let n=t.getExtension(o);return sZ(t,n)}return!1}return NI(t)}function NI(r){let t=Xl(r),e=r.createTexture();r.bindTexture(r.TEXTURE_2D,e);let o=1,n=1;r.texImage2D(r.TEXTURE_2D,0,t.internalFormatFloat,o,n,0,t.textureFormatFloat,t.textureTypeFloat,null);let s=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,s),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,e,0);let a=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(e),r.deleteFramebuffer(s),a}function sZ(r,t){let e=Xl(r,t),o=r.createTexture();r.bindTexture(r.TEXTURE_2D,o);let n=1,s=1;r.texImage2D(r.TEXTURE_2D,0,e.internalFormatHalfFloat,n,s,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);let a=r.createFramebuffer();r.bindFramebuffer(r.FRAMEBUFFER,a),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,o,0);let i=r.checkFramebufferStatus(r.FRAMEBUFFER)===r.FRAMEBUFFER_COMPLETE;return r.bindTexture(r.TEXTURE_2D,null),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(o),r.deleteFramebuffer(a),i}function KI(r){return r!==2?!1:Kr(r).fenceSync!=null}function Vs(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}var Se=A();Se.registerFlag("HAS_WEBGL",()=>Se.getNumber("WEBGL_VERSION")>0);Se.registerFlag("WEBGL_VERSION",()=>Yf(2)?2:Yf(1)?1:0);Se.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1);Se.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>Se.get("WEBGL_VERSION")===2);Se.registerFlag("WEBGL_CPU_FORWARD",()=>!0);Se.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1);Se.registerFlag("WEBGL_PACK",()=>Se.getBool("HAS_WEBGL"));Se.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_CLIP",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_REDUCE",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_LAZILY_UNPACK",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_CONV_IM2COL",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>Se.getBool("WEBGL_PACK"));Se.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>VI(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>WI(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let r=Se.getNumber("WEBGL_VERSION");return r===0?0:UI(r)});Se.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Se.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!ou.isMobile());Se.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>GI(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>Se.getBool("WEBGL_FORCE_F16_TEXTURES")?!1:Se.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));Se.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>HI(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_FENCE_API_ENABLED",()=>KI(Se.getNumber("WEBGL_VERSION")));Se.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Se.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0);Se.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,r=>{if(typeof r!="number")throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${r}.`);if(r<0&&r!==-1)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`)});Se.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>ou.isMobile()?1:-1,r=>{if(typeof r!="number")throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${r}.`);if(r<0&&r!==-1)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`)});Se.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128);Se.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1);Se.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5);Se.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);Se.registerFlag("WEBGL_EXP_CONV",()=>!1);Se.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Se.getBool("IS_TEST"));Se.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0);Se.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1);Se.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1);Se.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);function vt(){let r,t,e,o,n,s,a,i,p,u;return A().getNumber("WEBGL_VERSION")===2?(r="#version 300 es",t="in",e="out",o="in",n="texture",s="outputColor",a="out vec4 outputColor;",i=A().getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",p="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(r="",t="attribute",e="varying",o="varying",n="texture2D",s="gl_FragColor",a="",i=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,p=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:r,attribute:t,varyingVs:e,varyingFs:o,texture2D:n,output:s,defineOutput:a,defineSpecialNaN:i,defineSpecialInf:p,defineRound:u}}function Ws(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let a=`int ${r[s]} = ${e} / ${n}`,i=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * ${n}`:`index -= ${r[s]} * ${n}`;return`${a}; ${i};`}).join("")}function Ip(r,t,e="index"){let o=y.computeStrides(t);return o.map((n,s)=>{let a=`int ${r[s]} = ${e} / outShapeStrides[${s}]`,i=s===o.length-1?`int ${r[s+1]} = ${e} - ${r[s]} * outShapeStrides[${s}]`:`index -= ${r[s]} * outShapeStrides[${s}]`;return`${a}; ${i};`}).join("")}function aZ(r,t){let e=r.length,o=r.map(s=>`${t}[${s}]`),n=new Array(e-1);n[e-2]=o[e-1];for(let s=e-3;s>=0;--s)n[s]=`(${n[s+1]} * ${o[s+1]})`;return n}function SR(r,t,e="index"){let o=r.map((s,a)=>a),n=aZ(o,t);return n.map((s,a)=>{let i=`int ${r[a]} = ${e} / ${n[a]}`,p=a===n.length-1?`int ${r[a+1]} = ${e} - ${r[a]} * ${n[a]}`:`index -= ${r[a]} * ${n[a]}`;return`${i}; ${p};`}).join("")}function Fc(r){let t=y.computeStrides(r).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function Pc(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}var Qf=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;var{getBroadcastDims:IR}=w;function vR(r,t,e){let o=[];if(r.forEach(d=>{let f=y.sizeFromShape(d.shapeInfo.logicalShape);if(d.shapeInfo.isUniform?o.push(`uniform float ${d.name}${f>1?`[${f}]`:""};`):(o.push(`uniform sampler2D ${d.name};`),o.push(`uniform int offset${d.name};`)),e.enableShapeUniforms){let{uniformShape:h}=Zf(e.packedInputs,d.shapeInfo.logicalShape,d.shapeInfo.texShape);switch(h.length){case 1:o.push(`uniform int ${d.name}Shape;`);break;case 2:o.push(`uniform ivec2 ${d.name}Shape;`);break;case 3:o.push(`uniform ivec3 ${d.name}Shape;`);break;case 4:o.push(`uniform ivec4 ${d.name}Shape;`);break;default:break}o.push(`uniform ivec2 ${d.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:o.push("uniform int outShape;");break;case 2:o.push("uniform ivec2 outShape;"),o.push("uniform int outShapeStrides;");break;case 3:o.push("uniform ivec3 outShape;"),o.push("uniform ivec2 outShapeStrides;");break;case 4:o.push("uniform ivec4 outShape;"),o.push("uniform ivec3 outShapeStrides;");break;default:break}o.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(d=>{o.push(`uniform ${d.type} ${d.name}${d.arrayIndex?`[${d.arrayIndex}]`:""};`)});let n=o.join(`
`),s=r.map(d=>iZ(d,t,e.packedInputs,e.enableShapeUniforms)).join(`
`),a=t.texShape,i=vt(),p=cZ(i),u,c,l=dZ(i);return t.isPacked?(u=uZ(t.logicalShape,a,e.enableShapeUniforms),c=mZ(i)):(u=pZ(t.logicalShape,a,e.enableShapeUniforms),c=lZ(i)),e.packedInputs&&(l+=xZ),[l,p,c,n,u,s,e.userCode].join(`
`)}function Mc(r,t=!1){let e=r.shapeInfo.logicalShape;switch(e.length){case 0:return $Z(r,t);case 1:return RZ(r,t);case 2:return AZ(r,t);case 3:return PZ(r,t);case 4:return MZ(r,t);case 5:return LZ(r);case 6:return BZ(r);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function kR(r,t){switch(r.shapeInfo.logicalShape.length){case 0:return _Z(r);case 1:return EZ(r,t);case 2:return DZ(r,t);case 3:return FZ(r,t);default:return OZ(r,t)}}function iZ(r,t,e=!1,o){let n="";e?n+=kR(r,o):n+=Mc(r,o);let s=r.shapeInfo.logicalShape,a=t.logicalShape;return s.length<=a.length&&(e?n+=zZ(r,t):n+=VZ(r,t)),n}function uZ(r,t,e){switch(r.length){case 0:return NR();case 1:return yZ(r,t,e);case 2:return NZ(r,t,e);case 3:return CZ(r,t,e);default:return SZ(r,t,e)}}function pZ(r,t,e){switch(r.length){case 0:return NR();case 1:return bZ(r,t,e);case 2:return TZ(r,t,e);case 3:return wZ(r,t,e);case 4:return IZ(r,t,e);case 5:return vZ(r,t);case 6:return kZ(r,t);default:throw new Error(`${r.length}-D output sampling is not yet supported`)}}function cZ(r){return`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `}function lZ(r){return`
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `}function mZ(r){return`
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `}function dZ(r){return`${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${fZ}
    ${hZ}
    ${gZ}
  `}var fZ=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,hZ=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,gZ=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,xZ=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function NR(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function yZ(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return o[0]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    `:o[1]===1?e?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `}function bZ(r,t,e){return t[0]===1?e?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `:t[1]===1?e?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `:e?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `}function CZ(r,t,e){if(e)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[2]/2),s=n*Math.ceil(r[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `}function wZ(r,t,e){if(e)return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Ip(["r","c","d"],r)}
    return ivec3(r, c, d);
  }
`;let o=Ws(["r","c","d"],r);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `}function SZ(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],n=Math.ceil(r[r.length-1]/2),s=n*Math.ceil(r[r.length-2]/2),a=s,i="",p="b, r, c";for(let u=2;u<r.length-1;u++)a*=r[r.length-u-1],i=`
      int b${u} = index / ${a};
      index -= b${u} * ${a};
    `+i,p=`b${u}, `+p;return`
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${i}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${p});
    }
  `}function IZ(r,t,e){if(e)return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Ip(["r","c","d","d2"],r)}
      return ivec4(r, c, d, d2);
    }
  `;let o=Ws(["r","c","d","d2"],r);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `}function vZ(r,t){let e=Ws(["r","c","d","d2","d3"],r);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}function kZ(r,t){let e=Ws(["r","c","d","d2","d3","d4"],r);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${e}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}function NZ(r,t,e){let o=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(y.arraysEqual(r,t))return e?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;let n=Math.ceil(r[1]/2);return e?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `}function TZ(r,t,e){return y.arraysEqual(r,t)?e?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `:r[1]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:r[0]===1?e?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:e?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `}function vp(r){return`offset${r}`}function _Z(r){let t=r.name,e="get"+t.charAt(0).toUpperCase()+t.slice(1),o=vt();return`
    vec4 ${e}() {
      return ${o.texture2D}(${t}, halfCR);
    }
  `}function $Z(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`float ${o}() {return ${e};}`;let[n,s]=r.shapeInfo.texShape;if(n===1&&s===1)return`
      float ${o}() {
        return sampleTexture(${e}, halfCR);
      }
    `;let a=vp(e);if(t)return`
    float ${o}() {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${a});
      return sampleTexture(${e}, uv);
    }
  `;let[i,p]=r.shapeInfo.texShape;return`
    float ${o}() {
      vec2 uv = uvFromFlat(${i}, ${p}, ${a});
      return sampleTexture(${e}, uv);
    }
  `}function EZ(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=r.shapeInfo.texShape,s=vt();if(t)return`
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${e}, uv);
    }
  `;let a=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return`
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${a[0]}, ${a[1]}, index);
      return ${s.texture2D}(${e}, uv);
    }
  `}function RZ(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1);if(r.shapeInfo.isUniform)return`
      float ${o}(int index) {
        ${Lc(r)}
      }
    `;let n=r.shapeInfo.texShape,s=n[0],a=n[1];if(a===1&&s===1)return`
      float ${o}(int index) {
        return sampleTexture(${e}, halfCR);
      }
    `;let i=vp(e);return a===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);
        return sampleTexture(${e}, uv);
      }
    `:s===1?t?`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);
        return sampleTexture(${e}, uv);
      }
    `:`
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);
        return sampleTexture(${e}, uv);
      }
    `:t?`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});
      return sampleTexture(${e}, uv);
    }
  `:`
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});
      return sampleTexture(${e}, uv);
    }
  `}function DZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,a=s[0],i=s[1],p=vt();if(s!=null&&y.arraysEqual(e,s))return t?`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${p.texture2D}(${o}, uv);
      }
    `:`
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);

        return ${p.texture2D}(${o}, uv);
      }
    `;if(t)return`
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${p.texture2D}(${o}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],c=Math.ceil(e[1]/2);return`
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${p.texture2D}(${o}, uv);
    }
  `}function AZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape;if(s!=null&&y.arraysEqual(e,s)){if(t)return`
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;let m=s[0],d=s[1];return`
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${d}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `}let{newShape:a,keptDims:i}=y.squeezeShape(e),p=a;if(p.length<e.length){let m=Bc(r,p),d=["row","col"];return`
      ${Mc(m,t)}
      float ${n}(int row, int col) {
        return ${n}(${zc(d,i)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));
        ${Lc(r)}
      }
    `;let u=s[0],c=s[1],l=vp(o);return c===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${l}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  `:u===1?t?`
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${l}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${l}), vec3(${e[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  `:t?`
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${l};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    `:`
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${e[1]} + col + ${l};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`}function FZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=r.shapeInfo.texShape,a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(e[0]===1){let m=e.slice(1),d=[1,2],f=Bc(r,m),h=["b","row","col"];return`
        ${kR(f,t)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${zc(h,d)});
        }
      `}let i=vt();if(t)return`
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${i.texture2D}(${o}, uv);
    }
  `;let p=a[0],u=a[1],c=Math.ceil(e[2]/2),l=c*Math.ceil(e[1]/2);return`
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${p}, ${u}, ${l}, ${c}, b, row, col);
      return ${i.texture2D}(${o}, uv);
    }
  `}function PZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[1]*e[2],a=e[2],{newShape:i,keptDims:p}=y.squeezeShape(e),u=i;if(u.length<e.length){let h=Bc(r,u),g=["row","col","depth"];return`
        ${Mc(h,t)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${zc(g,p)});
        }
      `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${a}, 1)));
        ${Lc(r)}
      }
    `;let c=r.shapeInfo.texShape,l=c[0],m=c[1],d=r.shapeInfo.flatOffset;if(m===s&&d==null)return t?`
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${a}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${l}.0);
          return sampleTexture(${o}, uv);
        }
      `;if(m===a&&d==null)return t?`
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${l}.0);
      return sampleTexture(${o}, uv);
    }
  `;let f=vp(o);return t?`
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    `:`
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${a} + depth + ${f};
        vec2 uv = uvFromFlat(${l}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `}function OZ(r,t){let e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=vt();if(t)return`
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${e}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${e}, uv);
    }
  `;let s=r.shapeInfo.logicalShape,a=s.length,i=r.shapeInfo.texShape,p=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=p[0],c=p[1],l=Math.ceil(s[a-1]/2),m=l*Math.ceil(s[a-2]/2),d="int b, int row, int col",f=`b * ${m} + (row / 2) * ${l} + (col / 2)`;for(let h=2;h<a-1;h++)d=`int b${h}, `+d,m*=s[a-h-1],f=`b${h} * ${m} + `+f;return`
    vec4 ${o}(${d}) {
      int index = ${f};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${e}, uv);
    }
  `}function MZ(r,t){let e=r.shapeInfo.logicalShape,o=r.name,n="get"+o.charAt(0).toUpperCase()+o.slice(1),s=e[3],a=e[2]*s,i=e[1]*a,{newShape:p,keptDims:u}=y.squeezeShape(e);if(p.length<e.length){let b=Bc(r,p),C=["row","col","depth","depth2"];return`
      ${Mc(b,t)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${zc(C,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${i}, ${a}, ${s}, 1)));
        ${Lc(r)}
      }
    `;let c=r.shapeInfo.flatOffset,l=r.shapeInfo.texShape,m=l[0],d=l[1],f=`int stride2 = ${o}Shape[3];`,h=`int stride1 = ${o}Shape[2] * stride2;`,g=`int stride0 = ${o}Shape[1] * stride1;`;if(d===i&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        ${f}
        ${h}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${a}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;if(d===s&&c==null)return t?`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `:`
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${e[1]*e[2]}, ${e[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;let x=vp(o);return t?`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${h}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  `:`
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${d}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `}function LZ(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),n=t[4],s=t[3]*n,a=t[2]*s,i=t[1]*a,{newShape:p,keptDims:u}=y.squeezeShape(t);if(p.length<t.length){let h=Bc(r,p),g=["row","col","depth","depth2","depth3"];return`
      ${Mc(h)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${zc(g,u)});
      }
    `}if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${i}, ${a}, ${s}, ${n})) +
          depth3;
        ${Lc(r)}
      }
    `;let c=r.shapeInfo.flatOffset,l=r.shapeInfo.texShape,m=l[0],d=l[1];if(d===i&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${a}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(d===n&&c==null)return`
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]},
               ${t[2]*t[3]}, ${t[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${m}.0);
        return sampleTexture(${e}, uv);
      }
    `;let f=vp(e);return`
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} + depth * ${s} +
          depth2 * ${n} + depth3 + ${f};
      vec2 uv = uvFromFlat(${m}, ${d}, index);
      return sampleTexture(${e}, uv);
    }
  `}function BZ(r){let t=r.shapeInfo.logicalShape,e=r.name,o="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:n,keptDims:s}=y.squeezeShape(t);if(n.length<t.length){let g=Bc(r,n),x=["row","col","depth","depth2","depth3","depth4"];return`
      ${Mc(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${zc(x,s)});
      }
    `}let a=t[5],i=t[4]*a,p=t[3]*i,u=t[2]*p,c=t[1]*u;if(r.shapeInfo.isUniform)return`
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${p}, ${i})) +
          dot(
            vec2(depth3, depth4),
            vec2(${a}, 1)));
        ${Lc(r)}
      }
    `;let l=r.shapeInfo.flatOffset,m=r.shapeInfo.texShape,d=m[0],f=m[1];if(f===c&&l==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${p}, ${i}, ${a})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;if(f===a&&l==null)return`
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${t[1]*t[2]*t[3]*t[4]},
               ${t[2]*t[3]*t[4]},
               ${t[3]*t[4]},
               ${t[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${d}.0);
        return sampleTexture(${e}, uv);
      }
    `;let h=vp(e);return`
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${p} +
          depth2 * ${i} + depth3 * ${a} + depth4 + ${h};
      vec2 uv = uvFromFlat(${d}, ${f}, index);
      return sampleTexture(${e}, uv);
    }
  `}function Lc(r){let t=r.name,e=y.sizeFromShape(r.shapeInfo.logicalShape);return e<2?`return ${t};`:`
    for (int i = 0; i < ${e}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function zZ(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=r.shapeInfo.logicalShape.length,a=t.logicalShape.length,i=IR(r.shapeInfo.logicalShape,t.logicalShape),p=Re(a),u=a-s,c,l=["x","y","z","w","u","v"];s===0?c="":a<2&&i.length>=1?c="coords = 0;":c=i.map(b=>`coords.${l[b+u]} = 0;`).join(`
`);let m="";a<2&&s>0?m="coords":m=r.shapeInfo.logicalShape.map((b,C)=>`coords.${l[C+u]}`).join(", ");let d="return outputValue;",h=y.sizeFromShape(r.shapeInfo.logicalShape)===1,x=y.sizeFromShape(t.logicalShape)===1;if(s===1&&!h&&!x)d=`
      return vec4(outputValue.xy, outputValue.xy);
    `;else if(h&&!x)a===1?d=`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:d=`
        return vec4(outputValue.x);
      `;else if(i.length){let b=s-2,C=s-1;i.indexOf(b)>-1&&i.indexOf(C)>-1?d="return vec4(outputValue.x);":i.indexOf(b)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(C)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}return`
    vec4 ${n}() {
      ${p} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${d}
    }
  `}function VZ(r,t){let e=r.name,o=e.charAt(0).toUpperCase()+e.slice(1),n="get"+o+"AtOutCoords",s=t.texShape,a=r.shapeInfo.texShape,i=r.shapeInfo.logicalShape.length,p=t.logicalShape.length;if(!r.shapeInfo.isUniform&&i===p&&r.shapeInfo.flatOffset==null&&y.arraysEqual(a,s))return`
      float ${n}() {
        return sampleTexture(${e}, resultUV);
      }
    `;let u=Re(p),c=IR(r.shapeInfo.logicalShape,t.logicalShape),l=p-i,m,d=["x","y","z","w","u","v"];i===0?m="":p<2&&c.length>=1?m="coords = 0;":m=c.map(h=>`coords.${d[h+l]} = 0;`).join(`
`);let f="";return p<2&&i>0?f="coords":f=r.shapeInfo.logicalShape.map((h,g)=>`coords.${d[g+l]}`).join(", "),`
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${f});
    }
  `}function Re(r){if(r<=1)return"int";if(r===2)return"ivec2";if(r===3)return"ivec3";if(r===4)return"ivec4";if(r===5)return"ivec5";if(r===6)return"ivec6";throw Error(`GPU for rank ${r} is not yet supported`)}function Zf(r,t,e){let{newShape:o,keptDims:n}=y.squeezeShape(t),s=t.length,a=r&&s===3&&t[0]===1,i=a?t.slice(1):o,p=!r&&s>1&&!y.arraysEqual(t,e)&&o.length<s||a;return{useSqueezeShape:p,uniformShape:p?i:t,keptDims:n}}function Bc(r,t){let e=JSON.parse(JSON.stringify(r));return e.shapeInfo.logicalShape=t,e}function zc(r,t){return t.map(e=>r[e]).join(", ")}function _R(r,t,e,o){let n=e.map((c,l)=>{let m={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:c.isUniform?!1:c.texData.isPacked,flatOffset:null};return c.texData!=null&&c.texData.slice!=null&&c.texData.slice.flatOffset>0&&(m.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[l],shapeInfo:m}}),s=n.map(c=>c.shapeInfo),a={logicalShape:o.shape,texShape:o.texData.texShape,isUniform:!1,isPacked:o.texData.isPacked,flatOffset:null},i=vR(n,a,t),p=$I(r.gl,i),u=r.createProgram(p);return A().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:p,source:i,webGLProgram:u,inShapeInfos:s,outShapeInfo:a,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(r.buildVao(u),Object.assign({program:t,fragmentShader:p,source:i,webGLProgram:u,inShapeInfos:s,outShapeInfo:a},qI(r,t,u)))}function qI(r,t,e){let o=[],n=[],s,a,i,p=null,u=null;u=r.getUniformLocation(e,"NAN",!1),A().getNumber("WEBGL_VERSION")===1&&(p=r.getUniformLocation(e,"INFINITY",!1));let c=!1;for(let l of t.variableNames){let m={name:l,uniform:r.getUniformLocation(e,l,c),offset:r.getUniformLocation(e,`offset${l}`,c)};t.enableShapeUniforms&&(m.shape=r.getUniformLocation(e,`${l}Shape`,c),m.texShape=r.getUniformLocation(e,`${l}TexShape`,c)),o.push(m)}if(t.enableShapeUniforms&&(s=r.getUniformLocation(e,"outShape",c),i=r.getUniformLocation(e,"outShapeStrides",c),a=r.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(let l of t.customUniforms)n.push(r.getUniformLocation(e,l.name,c));return{variablesLocations:o,customUniformLocations:n,infLoc:p,nanLoc:u,outShapeLocation:s,outShapeStridesLocation:i,outTexShapeLocation:a}}function TR(r,t){if(r.length!==t.length)throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${t.length} inputs`);r.forEach((e,o)=>{let n=e.logicalShape,s=t[o],a=s.shape;if(!y.arraysEqual(n,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${a} must match`);if(e.isUniform&&s.isUniform)return;let i=e.texShape,p=s.isUniform?null:s.texData.texShape;if(!y.arraysEqual(i,p))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${p} must match`)})}function $R(r,t,e,o,n){t.program.enableShapeUniforms||(TR(t.inShapeInfos,e),TR([t.outShapeInfo],[o]));let s=o.texData.texture,a=o.texData.texShape;o.texData.isPacked?r.setOutputPackedMatrixTexture(s.texture,a[0],a[1]):r.setOutputMatrixTexture(s.texture,a[0],a[1]),r.setProgram(t.webGLProgram),r.bindVertexArray(t.webGLProgram.vao),A().getNumber("WEBGL_VERSION")===1&&t.infLoc!==null&&r.gl.uniform1f(t.infLoc,1/0),t.nanLoc!==null&&r.gl.uniform1f(t.nanLoc,NaN);for(let p=0;p<e.length;++p){let u=e[p],{uniform:c,offset:l,shape:m,texShape:d}=t.variablesLocations[p];if(m){let{uniformShape:f}=Zf(t.program.packedInputs,u.shape,u.texData.texShape);switch(f.length){case 1:r.gl.uniform1iv(m,new Int32Array(f));break;case 2:r.gl.uniform2iv(m,new Int32Array(f));break;case 3:r.gl.uniform3iv(m,new Int32Array(f));break;case 4:r.gl.uniform4iv(m,new Int32Array(f));break;default:break}}if(d&&r.gl.uniform2i(d,u.texData.texShape[0],u.texData.texShape[1]),c!=null){if(u.isUniform){if(y.sizeFromShape(u.shape)<2)r.gl.uniform1f(c,u.uniformValues[0]);else{let f=u.uniformValues;f instanceof Float32Array||(f=new Float32Array(f)),r.gl.uniform1fv(c,f)}continue}u.texData.slice!=null&&l!=null&&r.gl.uniform1i(l,u.texData.slice.flatOffset),r.setInputMatrixTexture(u.texData.texture.texture,c,p)}}let i=t.outShapeLocation;if(i)switch(o.shape.length){case 1:r.gl.uniform1iv(i,new Int32Array(o.shape));break;case 2:r.gl.uniform2iv(i,new Int32Array(o.shape));break;case 3:r.gl.uniform3iv(i,new Int32Array(o.shape));break;case 4:r.gl.uniform4iv(i,new Int32Array(o.shape));break;default:break}if(t.outShapeStridesLocation){let p=y.computeStrides(o.shape);switch(o.shape.length){case 2:r.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(p));break;case 3:r.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(p));break;case 4:r.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(p));break;default:break}}if(t.outTexShapeLocation&&r.gl.uniform2i(t.outTexShapeLocation,o.texData.texShape[0],o.texData.texShape[1]),t.program.customUniforms&&n)for(let p=0;p<t.program.customUniforms.length;++p){let u=t.program.customUniforms[p],c=t.customUniformLocations[p],l=n[p];if(u.type==="float")r.gl.uniform1fv(c,l);else if(u.type==="vec2")r.gl.uniform2fv(c,l);else if(u.type==="vec3")r.gl.uniform3fv(c,l);else if(u.type==="vec4")r.gl.uniform4fv(c,l);else if(u.type==="int")r.gl.uniform1iv(c,l);else if(u.type==="ivec2")r.gl.uniform2iv(c,l);else if(u.type==="ivec3")r.gl.uniform3iv(c,l);else if(u.type==="ivec4")r.gl.uniform4iv(c,l);else throw Error(`uniform type ${u.type} is not supported yet.`)}r.executeProgram()}function ER(r,t,e){let o="";t.concat(e).forEach(a=>{let i=a.texData!=null&&a.texData.slice!=null&&a.texData.slice.flatOffset>0;if(r.enableShapeUniforms&&!a.isUniform){let p=a.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:l}=Zf(r.packedInputs,a.shape,p),m="",d="",f="";if(c.length===1&&r.packedInputs){let k=[Math.ceil(p[0]/2),Math.ceil(p[1]/2)];m=`${k[0]>1}_${k[1]>1}`}else if(c.length===2&&!r.packedInputs)d=`${c[0]>1}_${c[1]>1}`;else if(c.length>2&&!r.packedInputs){let k=y.computeStrides(c);f=`${k[0]===p[1]}_${k[k.length-1]===p[1]}`}let h=a.shape.length,g=c.length===2&&y.arraysEqual(a.shape,p),x=y.sizeFromShape(a.shape)===1,b=w.getBroadcastDims(a.shape,e.shape),C=!r.packedInputs&&h===e.shape.length&&y.arraysEqual(p,e.texData.texShape),S=r.packedInputs||c.length>2?"":`${p[0]>1}_${p[1]>1}`;o+=`${h}_${C}_${u?l:""}_${c.length}_${x}_${b}_${g}_${m}_${d}_${f}_${S}_${i}`}else{let p=a.isUniform?"uniform":a.texData.texShape;o+=`${a.shape}_${p}_${i}`}});let n=r.userCode,s=r.constructor.name;return s+="_"+o+"_"+n+`${A().getNumber("WEBGL_VERSION")}`,s}function pt(r){return A().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&r<=4}var Jf=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=bu.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=vt();this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Ip(["r","c","d"],t):Ws(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${e.output} = result;
      }
    `}};var eh=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=bu.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let e=vt();this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?Ip(["r","c","d"],t):Ws(["r","c","d"],t)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${e.output} = result;
      }
    `}};var th=class{constructor(t){this.variableNames=["A"],this.outTexUsage=dr.DOWNLOAD;let e=vt();this.outputShape=t,this.userCode=`
      ${Qf}

      void main() {
        float x = getAAtOutCoords();
        ${e.output} = encode_float(x);
      }
    `}};var rh=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=dr.DOWNLOAD;let e=vt();this.outputShape=t,this.userCode=`
      ${Qf}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${e.output} = encode_float(x);
      }
    `}};var GZ={R:0,G:1,B:2,A:3},Zl=class{constructor(t,e=!1,o="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=vt();this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length);let s="result";e&&(s="floor(result * 255. + 0.5)");let a="";for(let i=0;i<o.length;i++){let p=o[i];a+=`
          if(offset == ${i}) {
            result = values[${GZ[p]}];
          }`}this.userCode=`
      ${this.enableShapeUniforms?Pc():Fc(t)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${o.length});

        flatIndex = idiv(flatIndex, ${o.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${n.texture2D}(A, uv);
          ${a}
        }
        ${n.output} = vec4(${s}, 0., 0., 0.);
      }
    `}};var oh=class{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let o=vt();this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length);let n="",s="result";e&&(s="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let i=0;i<=1;i++){let p=a*2+i;n+=`
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {
            localCoords[1] += ${a};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${p}] = values[0];
            } else if (offset == 1) {
              result[${p}] = values[1];
            } else if (offset == 2) {
              result[${p}] = values[2];
            } else {
              result[${p}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Pc():Fc(t)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `}};var cv={};qe(cv,{bindVertexProgramAttributeStreams:()=>rv,createBufferFromOutputTexture:()=>sv,createFloat16MatrixTexture:()=>ZI,createFloat16PackedMatrixTexture:()=>tv,createFloat32MatrixTexture:()=>QI,createIndexBuffer:()=>YI,createPackedMatrixTexture:()=>ev,createUnsignedBytesMatrixTexture:()=>JI,createVertexBuffer:()=>XI,createVertexShader:()=>jI,downloadByteEncodedFloatMatrixFromOutputTexture:()=>iv,downloadFloat32MatrixFromBuffer:()=>av,downloadMatrixFromPackedOutputTexture:()=>pv,downloadPackedMatrixFromBuffer:()=>uv,getInternalFormatForFloat16MatrixTexture:()=>sh,getInternalFormatForFloat16PackedMatrixTexture:()=>uh,getInternalFormatForFloat32MatrixTexture:()=>nh,getInternalFormatForPackedMatrixTexture:()=>ih,getInternalFormatForUnsignedBytesMatrixTexture:()=>ah,uploadDenseMatrixToTexture:()=>ov,uploadPixelDataToTexture:()=>nv});function jI(r){let t=vt(),e=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return _I(r,e)}function XI(r){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return DI(r,t)}function YI(r){let t=new Uint16Array([0,1,2,2,1,3]);return AI(r,t)}function Jl(r,t,e,o,n,s){PI(t,e);let a=FI(r),i=r.TEXTURE_2D;return ce(r,()=>r.bindTexture(i,a)),ce(r,()=>r.texParameteri(i,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE)),ce(r,()=>r.texParameteri(i,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE)),ce(r,()=>r.texParameteri(i,r.TEXTURE_MIN_FILTER,r.NEAREST)),ce(r,()=>r.texParameteri(i,r.TEXTURE_MAG_FILTER,r.NEAREST)),A().getNumber("WEBGL_VERSION")===1?ce(r,()=>r.texImage2D(i,0,o,t,e,0,n,s,null)):ce(r,()=>r.texStorage2D(i,1,o,t,e)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,null)),{texture:a,texShape:[e,t]}}function nh(r){return r.internalFormatFloat}function QI(r,t,e,o){let[n,s]=Sp(t,e);return Jl(r,n,s,nh(o),o.textureFormatFloat,r.FLOAT)}function sh(r){return r.internalFormatHalfFloat}function ZI(r,t,e,o){let[n,s]=Sp(t,e);return Jl(r,n,s,sh(o),o.textureFormatFloat,o.textureTypeHalfFloat)}function ah(r){return r.downloadTextureFormat}function JI(r,t,e,o){let[n,s]=Sp(t,e);return Jl(r,n,s,ah(o),r.RGBA,r.UNSIGNED_BYTE)}function ih(r){return r.internalFormatPackedFloat}function ev(r,t,e,o){let[n,s]=La(t,e);return Jl(r,n,s,ih(o),r.RGBA,r.FLOAT)}function uh(r){return r.internalFormatPackedHalfFloat}function tv(r,t,e,o){let[n,s]=La(t,e);return Jl(r,n,s,uh(o),r.RGBA,o.textureTypeHalfFloat)}function rv(r,t,e){return ce(r,()=>r.bindBuffer(r.ARRAY_BUFFER,e)),jf(r,t,"clipSpacePos",e,3,20,0)&&jf(r,t,"uv",e,2,20,12)}function ov(r,t,e,o,n,s){ce(r,()=>r.bindTexture(r.TEXTURE_2D,t));let a,i,p;n instanceof Uint8Array?(a=new Uint8Array(e*o*4),i=r.UNSIGNED_BYTE,p=r.RGBA):(a=new Float32Array(e*o*4),i=r.FLOAT,p=s.internalFormatPackedFloat),a.set(n),A().getNumber("WEBGL_VERSION")===2?ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e,o,r.RGBA,i,a)):ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,p,e,o,0,r.RGBA,i,a)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function nv(r,t,e){ce(r,()=>r.bindTexture(r.TEXTURE_2D,t)),e.data instanceof Uint8Array?A().getNumber("WEBGL_VERSION")===2?ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,e.width,e.height,r.RGBA,r.UNSIGNED_BYTE,e.data)):ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e.width,e.height,0,r.RGBA,r.UNSIGNED_BYTE,e.data)):A().getNumber("WEBGL_VERSION")===2?ce(r,()=>r.texSubImage2D(r.TEXTURE_2D,0,0,0,r.RGBA,r.UNSIGNED_BYTE,e)):ce(r,()=>r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,e)),ce(r,()=>r.bindTexture(r.TEXTURE_2D,null))}function sv(r,t,e,o){let n=r.createBuffer();ce(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,n));let i=4*4*t*e;return ce(r,()=>r.bufferData(r.PIXEL_PACK_BUFFER,i,r.STREAM_READ)),ce(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,0)),ce(r,()=>r.bindBuffer(r.PIXEL_PACK_BUFFER,null)),n}function av(r,t,e){let o=r,n=new Float32Array(e);return o.bindBuffer(o.PIXEL_PACK_BUFFER,t),o.getBufferSubData(o.PIXEL_PACK_BUFFER,0,n),o.bindBuffer(o.PIXEL_PACK_BUFFER,null),n}function iv(r,t,e,o){let[n,s]=Sp(t,e),a=4,i=new Uint8Array(gR(t*e,a));return ce(r,()=>r.readPixels(0,0,n,s,o.downloadTextureFormat,r.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}function uv(r,t,e,o,n,s,a,i){let p=r,u=new Float32Array(xR(s,a));return p.bindBuffer(p.PIXEL_PACK_BUFFER,t),p.getBufferSubData(p.PIXEL_PACK_BUFFER,0,u),p.bindBuffer(p.PIXEL_PACK_BUFFER,null),u}function pv(r,t,e){let o=new Float32Array(t*e*4);return ce(r,()=>r.readPixels(0,0,e,t,r.RGBA,r.FLOAT,o)),o}var kp=class{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];let e=A().getNumber("WEBGL_VERSION");if(t!=null?(this.gl=t,vI(e,t)):this.gl=Kr(e),t=this.gl,A().getNumber("WEBGL_VERSION")===2){let s=t;this.createVertexArray=()=>ce(s,()=>s.createVertexArray()),this.bindVertexArray=a=>ce(s,()=>s.bindVertexArray(a)),this.deleteVertexArray=a=>ce(s,()=>s.deleteVertexArray(a)),this.getVertexArray=()=>ce(s,()=>s.getParameter(s.VERTEX_ARRAY_BINDING))}else if(t!=null){let s=t.getExtension("OES_vertex_array_object");if(s==null)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>ce(t,()=>s.createVertexArrayOES()),this.bindVertexArray=a=>ce(t,()=>s.bindVertexArrayOES(a)),this.deleteVertexArray=a=>ce(t,()=>s.deleteVertexArrayOES(a)),this.getVertexArray=()=>ce(t,()=>t.getParameter(s.VERTEX_ARRAY_BINDING_OES))}let o="WEBGL_color_buffer_float",n="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),A().getNumber("WEBGL_VERSION")===1){let s="OES_texture_float",a="OES_texture_half_float";if(this.textureFloatExtension=Ec(this.gl,s),qr(this.gl,a))this.textureHalfFloatExtension=Ec(this.gl,a);else if(A().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(o),qr(this.gl,n))this.colorBufferHalfFloatExtension=Ec(this.gl,n);else if(A().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(o="EXT_color_buffer_float",qr(this.gl,o))this.colorBufferFloatExtension=this.gl.getExtension(o);else if(qr(this.gl,n))this.colorBufferHalfFloatExtension=this.gl.getExtension(n);else throw new Error("GL context does not support color renderable floats");this.vertexBuffer=XI(this.gl),this.indexBuffer=YI(this.gl),this.framebuffer=OI(this.gl),this.textureConfig=Xl(this.gl,this.textureHalfFloatExtension)}get debug(){return A().getBool("DEBUG")}dispose(){if(this.disposed)return;this.program!=null&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),this.outputTexture!=null&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let t=this.gl;ce(t,()=>t.finish()),ce(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),ce(t,()=>t.deleteFramebuffer(this.framebuffer)),ce(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),ce(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),ce(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),QI(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),ZI(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),JI(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),nv(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,o,n){this.throwIfDisposed(),ov(this.gl,t,e,o,n,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),tv(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),ev(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Xf(this.gl,this.framebuffer),this.outputTexture=null),ce(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,o){return this.downloadMatrixDriver(t,()=>iv(this.gl,e,o,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,o,n,s,a){return uv(this.gl,t,e,o,n,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return av(this.gl,t,e)}createBufferFromTexture(t,e,o){this.bindTextureToFrameBuffer(t);let n=sv(this.gl,e,o,this.textureConfig);return this.unbindTextureToFrameBuffer(),n}createAndWaitForFence(){let t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,o;if(A().getBool("WEBGL_FENCE_API_ENABLED")){let n=t,s=n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),o=()=>{let a=n.clientWaitSync(s,0,0);return a===n.ALREADY_SIGNALED||a===n.CONDITION_SATISFIED},e=s}else A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),o=()=>this.isQueryAvailable(e,A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):o=()=>!0;return{query:e,isFencePassed:o}}downloadMatrixFromPackedTexture(t,e,o){return this.downloadMatrixDriver(t,()=>pv(this.gl,e,o))}createProgram(t){this.throwIfDisposed();let e=this.gl;this.vertexShader==null&&(this.vertexShader=jI(e));let o=EI(e);ce(e,()=>e.attachShader(o,this.vertexShader)),ce(e,()=>e.attachShader(o,t)),RI(e,o);let n=Object.assign(o,{vao:this.createVertexArray()});return this.debug&&Yl(e,n),n}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);let e=this.gl;ce(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),rv(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),t!=null&&(ce(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,this.program!=null&&this.debug&&Yl(this.gl,this.program),ce(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,o=!0){return this.throwIfDisposed(),o?MI(this.gl,t,e):LI(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),ce(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,o){this.throwIfDisposed(),this.throwIfNoProgram(),BI(this.gl,t,e,o)}setOutputMatrixTexture(t,e,o){this.setOutputMatrixTextureDriver(t,o,e)}setOutputPackedMatrixTexture(t,e,o){this.throwIfDisposed();let[n,s]=La(e,o);this.setOutputMatrixTextureDriver(t,n,s)}setOutputMatrixWriteRegion(t,e,o,n){this.setOutputMatrixWriteRegionDriver(o,t,n,e)}setOutputPackedMatrixWriteRegion(t,e,o,n){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){this.program!=null&&Yl(this.gl,this.program),Rc(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let t=this.gl;if(this.debug){let e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}ce(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),ce(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return this.disjointQueryTimerExtension==null&&(this.disjointQueryTimerExtension=Ec(this.gl,A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.createQuery();return o.beginQuery(n.TIME_ELAPSED_EXT,s),s}let t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")===2){let e=this.gl,o=this.getQueryTimerExtensionWebGL2();e.endQuery(o.TIME_ELAPSED_EXT);return}let t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await y.repeatedTry(()=>this.disposed||this.isQueryAvailable(t,A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(e===0)return null;if(e===2){let o=this.gl;return o.getQueryParameter(t,o.QUERY_RESULT)/1e6}else{let o=this.getQueryTimerExtensionWebGL1();return o.getQueryObjectEXT(t,o.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(e===0)return!0;if(e===2){let o=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=o.getQueryParameter(t,o.QUERY_RESULT_AVAILABLE);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}else{let o=this.getQueryTimerExtensionWebGL1(),n=o.getQueryObjectEXT(t,o.QUERY_RESULT_AVAILABLE_EXT);return this.disjoint==null&&(this.disjoint=this.gl.getParameter(o.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){let t=HZ(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){let{resolveFn:o}=this.itemsToPoll[e];o()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let o;"setTimeoutCustom"in A().platform&&(o=A().platform.setTimeoutCustom.bind(A().platform)),y.repeatedTry(()=>(this.pollItems(),this.itemsToPoll.length===0),()=>0,null,o)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Ql(this.gl,t,this.framebuffer),this.debug&&Rc(this.gl)}unbindTextureToFrameBuffer(){this.outputTexture!=null?(Ql(this.gl,this.outputTexture,this.framebuffer),this.debug&&Rc(this.gl)):Xf(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);let o=e();return this.unbindTextureToFrameBuffer(),o}setOutputMatrixTextureDriver(t,e,o){this.throwIfDisposed();let n=this.gl;Ql(n,t,this.framebuffer),this.debug&&Rc(n),this.outputTexture=t,ce(n,()=>n.viewport(0,0,e,o)),ce(n,()=>n.scissor(0,0,e,o))}setOutputMatrixWriteRegionDriver(t,e,o,n){this.throwIfDisposed(),ce(this.gl,()=>this.gl.scissor(t,e,o,n))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(this.program==null)throw new Error("No GPU program is currently set.")}};function HZ(r){let t=0;for(;t<r.length&&r[t]();++t);return t-1}var{addImpl:RR,bincountImpl:ph,bincountReduceImpl:DR,bitwiseAndImpl:AR,castImpl:FR,ceilImpl:PR,concatImpl:OR,equalImpl:MR,expImpl:LR,expm1Impl:BR,floorImpl:zR,gatherNdImpl:VR,gatherV2Impl:WR,greaterImpl:UR,greaterEqualImpl:GR,lessImpl:HR,lessEqualImpl:KR,linSpaceImpl:qR,logImpl:jR,maxImpl:XR,maximumImpl:YR,minimumImpl:QR,multiplyImpl:ZR,negImpl:JR,notEqualImpl:eD,prodImpl:tD,raggedGatherImpl:rD,raggedRangeImpl:oD,raggedTensorToTensorImpl:nD,rangeImpl:sD,rsqrtImpl:aD,scatterImpl:iD,sigmoidImpl:uD,simpleAbsImpl:ch,sliceImpl:pD,sparseFillEmptyRowsImpl:cD,sparseReshapeImpl:lD,sparseSegmentReductionImpl:lh,sqrtImpl:mD,staticRegexReplaceImpl:dD,stridedSliceImpl:fD,stringNGramsImpl:hD,stringSplitImpl:gD,stringToHashBucketFastImpl:xD,subImpl:yD,tileImpl:bD,topKImpl:CD,transposeImpl:Np,uniqueImpl:wD}=Tc;function lv(r,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${r}.${e}`)}function Dt(r,t){return t===1?[r]:lv(r,t)}function SD(r,t){if(r===1)return"rc";let e="";for(let o=0;o<r;o++)e+=t[o],o<r-1&&(e+=",");return e}var mh=class{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=pt(this.outputShape.length),this.rank===0)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=Dt("rc",this.rank),o=Re(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),a=this.getOutput(e);this.userCode=`
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${a}));
          }
        }
      `}}getSourceCoordsArr(t){let e=[];for(let o=0;o<=1;o++)for(let n=0;n<=1;n++){let s=`${o===0?"r":"rp1"}, ${n===0?"c":"cp1"}`;for(let a=2;a<this.rank;a++)s=`${t[t.length-1-a]},`+s;e.push(s)}return e}getOutOfBoundsCondition(t){if(this.rank===1)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let o=this.rank-2;o<this.rank;o++)e+=`${t[o]} >= ${this.enableShapeUniforms?`outShape[${o}]`:this.outputShape[o]}`,o<this.rank-1&&(e+="||");return e}getSetup(t){if(this.rank===1)return"";let e=t.slice(-2),o=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],n=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${e[0]};
      int c = ${e[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `}getOutput(t){let e=this.getSourceCoordsArr(t);return this.rank===1?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),
            cEdge ? 0. : getA(${e[1]}),
            rEdge ? 0. : getA(${e[2]}),
            rEdge || cEdge ? 0. : getA(${e[3]})`}};var Vc=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length);let o="";for(let n=0;n<4;n++){let s="thisRC = rc;";n%2===1&&(s+="thisRC.z += 1;"),n>1&&(s+="thisRC.y += 1;"),o+=`
        ${s}
        ${n>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n>0?"}":""}
      `}this.userCode=`
      ${KZ(e,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Pc():Fc(t)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};

        ${o}

        setOutput(result);
      }
    `}};function KZ(r,t){return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${t?SR(["r","c","d"],"inputShape"):Ws(["r","c","d"],r)}
      return ivec3(r, c, d);
    }
  `}var dh=class{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,o){let n=vD(e,o),s=kD(t,n,o);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let a=ID(t,n,this.gpgpu.gl,this.gpgpu.textureConfig,o);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();let p=this.freeTextures[s].pop();return this.usedTextures[s].push(p),p}let i;return n===rr.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):n===rr.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):n===rr.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):n===rr.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):n===rr.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,o,n){if(this.freeTextures==null)return;let s=vD(o,n),a=kD(e,s,n);a in this.freeTextures||(this.freeTextures[a]=[]);let i=ID(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n),p=A().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");p!==-1&&this._numBytesAllocated>p?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;let u=this.usedTextures[a],c=u&&u.indexOf(t);if(c==null||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[c]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;let t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);let e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(this.freeTextures!=null){for(let t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}};function qZ(r,t){let e=r;if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F)return 16;if(t===r.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}function ID(r,t,e,o,n){let s=jZ(t,o),a;if(n){let[p,u]=La(r[0],r[1]);a=p*u}else{let[p,u]=Sp(r[0],r[1]);a=p*u}let i=qZ(e,s);return a*i}function jZ(r,t){switch(r){case rr.PACKED_2X2_FLOAT32:return ih(t);case rr.PACKED_2X2_FLOAT16:return uh(t);case rr.UNPACKED_FLOAT32:return nh(t);case rr.UNPACKED_FLOAT16:return sh(t);case rr.PACKED_4X1_UNSIGNED_BYTE:return ah(t);default:throw new Error(`Unknown physical texture type ${r}`)}}function XZ(r){return A().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?r?rr.PACKED_2X2_FLOAT32:rr.UNPACKED_FLOAT32:r?rr.PACKED_2X2_FLOAT16:rr.UNPACKED_FLOAT16}function vD(r,t){if(r===dr.UPLOAD)return rr.PACKED_2X2_FLOAT32;if(r===dr.RENDER||r==null)return XZ(t);if(r===dr.DOWNLOAD||r===dr.PIXELS)return rr.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${r}`)}function kD(r,t,e){return`${r[0]}_${r[1]}_${t}_${e}`}var or=class{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${e}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}},Ut="if (isnan(x)) return x;",ND="return x;",mv="return abs(x);";var TD="return (x >= 0.0) ? x : (exp(x) - 1.0);",_D=Ut+`
  return (x < 0.0) ? 0.0 : x;
`,$D=Ut+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,Ba="return x;",ED="return 1.0 / (1.0 + exp(-1.0 * x));";var DD="return x;",AD=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,FD=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,PD=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,OD="return 1.0 / (1.0 + exp(-1.0 * x));",Fr=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${e}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}};var fh=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length);let e=t.length,o=Dt("rc",e),n=Re(e),s=SD(e,o),a=o.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${i}));
      }
    `}};var QZ=Wt.whereImpl,ZZ=1e-7,JZ=1e-4,hh={};function e9(r){return r in hh||(hh[r]={}),hh[r]}var t9=A().getNumber("CPU_HANDOFF_SIZE_THRESHOLD"),r9=600;function o9(){return A().global.screen==null?1024:A().global.screen.height*A().global.screen.width*window.devicePixelRatio*r9/1024/1024}var wu=class extends ao{nextDataId(){return wu.nextDataId++}constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!A().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let e;if(t!=null){if(t instanceof kp)e=t;else{let o=Kr(A().getNumber("WEBGL_VERSION"),t);e=new kp(o)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let o=Kr(A().getNumber("WEBGL_VERSION"));e=new kp(o),this.binaryCache=e9(A().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=e,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new dh(this.gpgpu),this.numMBBeforeWarning=o9(),this.texData=new zo(this,pr())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(t,e,o,n,s,a){let i=this.makeTensorInfo(e,o),p=this.texData.get(i.dataId);p.isPacked=!1,p.texture={texture:t,texShape:[n,s]},p.texShape=[n,s];let u=Dc(e),c=new Zl(u,!1,a),l=this.runWebGLProgram(c,[i],o,[[n,s]]);return l.shape=e,p.texture=null,this.disposeIntermediateTensorInfo(i),l.dataId}write(t,e,o){if((A().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||A().getBool("DEBUG"))&&this.checkNumericalProblems(t),o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.texData.set(n,{shape:e,dtype:o,values:t,usage:dr.UPLOAD,refCount:1}),n}refCount(t){return this.texData.has(t)?this.texData.get(t).refCount:0}incRef(t){let e=this.texData.get(t);e.refCount++}decRef(t){if(this.texData.has(t)){let e=this.texData.get(t);e.refCount--}}move(t,e,o,n,s){if(A().getBool("DEBUG")&&this.checkNumericalProblems(e),n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:o,dtype:n,values:e,usage:dr.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}readSync(t){let e=this.texData.get(t),{values:o,dtype:n,complexTensorInfos:s,slice:a,shape:i,isPacked:p}=e;if(a!=null){let m;p?m=new Fr(i,Ba):m=new or(i,Ba);let d=this.runWebGLProgram(m,[{dataId:t,shape:i,dtype:n}],n),f=this.readSync(d.dataId);return this.disposeIntermediateTensorInfo(d),f}if(o!=null)return this.convertAndCacheOnCPU(t);if(n==="string")return o;let u=this.activeTimers!=null,c;u&&(c=y.now());let l;if(n==="complex64"){let m=this.readSync(s.real.dataId),d=this.readSync(s.imag.dataId);l=w.mergeRealAndImagArrays(m,d)}else l=this.getValuesFromTexture(t);return u&&(this.downloadWaitMs+=y.now()-c),this.convertAndCacheOnCPU(t,l)}async read(t){if(this.pendingRead.has(t)){let f=this.pendingRead.get(t);return new Promise(h=>f.push(h))}let e=this.texData.get(t),{values:o,shape:n,slice:s,dtype:a,complexTensorInfos:i,isPacked:p}=e;if(s!=null){let f;p?f=new Fr(n,Ba):f=new or(n,Ba);let h=this.runWebGLProgram(f,[{dataId:t,shape:n,dtype:a}],a),g=this.read(h.dataId);return this.disposeIntermediateTensorInfo(h),g}if(o!=null)return this.convertAndCacheOnCPU(t);if(A().getBool("DEBUG")&&!A().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&A().getNumber("WEBGL_VERSION")===2)throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u=null,c;if(a!=="complex64"&&A().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(t);let f=this.texData.get(c.dataId);u=this.gpgpu.createBufferFromTexture(f.texture.texture,...jl(n))}this.pendingRead.set(t,[]),a!=="complex64"&&await this.gpgpu.createAndWaitForFence();let l;if(a==="complex64"){let f=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),h=f[0],g=f[1];l=w.mergeRealAndImagArrays(h,g)}else if(u==null)l=this.getValuesFromTexture(t);else{let f=y.sizeFromShape(n);l=this.gpgpu.downloadFloat32MatrixFromBuffer(u,f)}if(c!=null&&this.disposeIntermediateTensorInfo(c),u!=null){let f=this.gpgpu.gl;ce(f,()=>f.deleteBuffer(u))}let m=this.convertAndCacheOnCPU(t,l),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach(f=>f(m)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&pr().removeDataId(t,this),this.pendingDeletes--),m}readToGPU(t,e={}){let o=this.texData.get(t),{values:n,shape:s,slice:a,dtype:i,isPacked:p,texture:u}=o;if(i==="complex64")throw new Error("Does not support reading texture for complex64 dtype.");if(a!=null){let d;p?d=new Fr(s,Ba):d=new or(s,Ba);let f=this.runWebGLProgram(d,[{dataId:t,shape:s,dtype:i}],i),h=this.readToGPU(f,e);return this.disposeIntermediateTensorInfo(f),h}if(u==null)throw n!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let c=this.decode(t,e.customTexShape),l=pr().makeTensorFromTensorInfo(c),m=this.texData.get(c.dataId);return Object.assign({tensorRef:l},m.texture)}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return me(t.shape,t.dtype,o)}catch(o){throw new Error("Failed to decode encoded string bytes into utf-8")}return me(t.shape,t.dtype,e)}checkNumericalProblems(t){if(t!=null)for(let e=0;e<t.length;e++){let o=t[e];if(!TI(o))throw A().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${o} cannot be represented on this device.`)}}getValuesFromTexture(t){let{shape:e,dtype:o,isPacked:n}=this.texData.get(t),s=y.sizeFromShape(e);if(A().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let m=this.decode(t),d=this.texData.get(m.dataId),f=this.gpgpu.downloadMatrixFromPackedTexture(d.texture.texture,...jl(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(m),f}let a=A().getBool("WEBGL_PACK")&&n===!0,i=a?Dc(e):e,p=a?new rh(i):new th(i),u=this.runWebGLProgram(p,[{shape:i,dtype:o,dataId:t}],"float32"),c=this.texData.get(u.dataId),l=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),l}timerAvailable(){return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(t){let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=y.flatten(this.activeTimers.map(p=>p.query)).filter(p=>p!=null),a=y.flatten(this.activeTimers.map(p=>p.name)).filter(p=>p!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let p=await Promise.all(s);i.kernelMs=y.sum(p),i.getExtraProfileInfo=()=>p.map((u,c)=>({name:a[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:y.now(),endMs:null}}endTimer(t){return A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=y.now(),t)}async getQueryTime(t){if(A().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);let e=t;return e.endMs-e.startMs}disposeData(t,e=!1){if(this.pendingDisposal.has(t))return!1;if(!this.texData.has(t))return!0;if(e?this.texData.get(t).refCount=0:this.texData.get(t).refCount--,!e&&this.texData.get(t).refCount>0)return!1;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),this.pendingDeletes++,!1;this.releaseGPUData(t);let{complexTensorInfos:o}=this.texData.get(t);return o!=null&&(this.disposeData(o.real.dataId,e),this.disposeData(o.imag.dataId,e)),this.texData.delete(t),!0}releaseGPUData(t){let{texture:e,dtype:o,texShape:n,usage:s,isPacked:a,slice:i}=this.texData.get(t),p=i&&i.origDataId||t,u=this.dataRefCount.get(p);u>1?this.dataRefCount.set(p,u-1):(this.dataRefCount.delete(p),e!=null&&(this.numBytesInGPU-=this.computeBytes(n,o),this.textureManager.releaseTexture(e,n,s,a)));let c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture.texture}getDataInfo(t){return this.texData.get(t)}shouldExecuteOnCPU(t,e=t9){return A().getBool("WEBGL_CPU_FORWARD")&&t.every(o=>this.texData.get(o.dataId).texture==null&&y.sizeFromShape(o.shape)<e)}getGPGPUContext(){return this.gpgpu}where(t){w.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let e=t.dataSync();return QZ(t.shape,e)}packedUnaryOp(t,e,o){let n=new Fr(t.shape,e),s=this.compileAndRun(n,[t],o);return pr().makeTensorFromTensorInfo(s)}abs(t){if(this.shouldExecuteOnCPU([t])&&t.dtype!=="complex64"){let n=ch(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,n)}if(A().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,mv,t.dtype);let e=new or(t.shape,mv),o=this.compileAndRun(e,[t]);return pr().makeTensorFromTensorInfo(o)}makeTensorInfo(t,e,o){let n;if(e==="string"&&o!=null&&o.length>0&&y.isString(o[0])){let s=o.map(a=>y.encodeString(a));n=this.write(s,t,e)}else n=this.write(o,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e,o){return pr().makeTensorFromTensorInfo(this.makeTensorInfo(t,e,o),this)}unpackTensor(t){let e=new fh(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){let e=new mh(t.shape),o=!0;return this.runWebGLProgram(e,[t],t.dtype,null,o)}packedReshape(t,e){let o=[yi(t.shape),...bi(t.shape)],n={dtype:t.dtype,shape:o,dataId:t.dataId},s=[yi(e),...bi(e)],a=new Vc(s,o),i=!0,p=[o],u=this.runWebGLProgram(a,[n],t.dtype,p,i);return{dataId:u.dataId,shape:e,dtype:u.dtype}}decode(t,e){let o=this.texData.get(t),{isPacked:n,shape:s,dtype:a}=o;if(e!=null){let m=y.sizeFromShape(s),d=e[0]*e[1]*4;y.assert(m<=d,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let i=Dc(s),p;n?p=new eh(i):p=new Jf(i);let u=!0,c=[e!=null?e:jl(i)],l=this.runWebGLProgram(p,[{shape:i,dtype:a,dataId:t}],a,c,u,e);return{dtype:a,shape:s,dataId:l.dataId}}runWebGLProgram(t,e,o,n,s=!1,a){let i=this.makeTensorInfo(t.outputShape,o),p=this.texData.get(i.dataId);if(t.packedOutput&&(p.isPacked=!0),t.outPackingScheme===bu.DENSE){let x=a!=null?a:jl(t.outputShape);p.texShape=x.map(b=>b*2)}if(t.outTexUsage!=null&&(p.usage=t.outTexUsage),y.sizeFromShape(i.shape)===0)return p.values=y.getTypedArrayFromDType(i.dtype,0),i;let u=[],c=e.map(x=>{if(x.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let b=this.texData.get(x.dataId);if(b.texture==null){if(!t.packedInputs&&y.sizeFromShape(x.shape)<=A().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:x.shape,texData:null,isUniform:!0,uniformValues:b.values};t.packedInputs&&(b.isPacked=!0,b.shape=x.shape)}if(this.uploadToGPU(x.dataId),!!b.isPacked!=!!t.packedInputs)x=b.isPacked?this.unpackTensor(x):this.packTensor(x),u.push(x),b=this.texData.get(x.dataId);else if(b.isPacked&&!Cu(b.shape,x.shape)){let C=x,S=x.shape;x.shape=b.shape,x=this.packedReshape(x,S),u.push(x),b=this.texData.get(x.dataId),C.shape=S}return{shape:x.shape,texData:b,isUniform:!1}});this.uploadToGPU(i.dataId);let l={shape:i.shape,texData:p,isUniform:!1},m=ER(t,c,l),d=this.getAndSaveBinary(m,()=>_R(this.gpgpu,t,c,l)),f=this.activeTimers!=null,h;f&&(h=this.startTimer()),A().get("ENGINE_COMPILE_ONLY")||$R(this.gpgpu,d,c,l,n),u.forEach(x=>this.disposeIntermediateTensorInfo(x)),f&&(h=this.endTimer(h),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(h)}));let g=A().getNumber("WEBGL_FLUSH_THRESHOLD");if(g>0){let x=y.now();x-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=x)}if(!A().getBool("WEBGL_LAZILY_UNPACK")&&p.isPacked&&s===!1){let x=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),x}return i}compileAndRun(t,e,o,n,s=!1){return o=o||e[0].dtype,this.runWebGLProgram(t,e,o,n,s)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(A().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}),this.textureManager.dispose(),this.canvas!=null&&typeof HTMLCanvasElement!="undefined"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return this.floatPrecisionValue==null&&(this.floatPrecisionValue=De(()=>{if(!A().get("WEBGL_RENDER_FLOAT32_ENABLED")){let t=A().getBool("DEBUG");A().set("DEBUG",!1);let e=this.abs(ke(1e-8)).dataSync()[0];if(A().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return this.floatPrecision()===32?ZZ:JZ}uploadToGPU(t){let e=this.texData.get(t),{shape:o,dtype:n,values:s,texture:a,usage:i,isPacked:p}=e;if(a!=null)return;let u=this.activeTimers!=null,c;u&&(c=y.now());let l=e.texShape;if(l==null&&(l=zI(o,p),e.texShape=l),s!=null){let m=Dc(o),d,f=l[1],h=l[0],g=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(p||!g)&&([f,h]=La(l[0],l[1])),p?d=new oh(m,g):d=new Zl(m,g);let x=g?[h,f]:l,b=this.makeTensorInfo(x,n),C=this.texData.get(b.dataId);g?C.usage=dr.PIXELS:C.usage=dr.UPLOAD,C.texShape=x,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId),f,h,s);let S=[[h,f]],k=!0,_=this.runWebGLProgram(d,[b],n,S,k),E=this.texData.get(_.dataId);e.texShape=E.texShape,e.isPacked=E.isPacked,e.usage=E.usage,A().get("ENGINE_COMPILE_ONLY")?this.disposeData(_.dataId):(e.texture=E.texture,e.values=null,this.texData.delete(_.dataId)),this.disposeIntermediateTensorInfo(b),u&&(this.uploadWaitMs+=y.now()-c)}else{let m=this.acquireTexture(l,i,n,p);e.texture=m}}convertAndCacheOnCPU(t,e){let o=this.texData.get(t),{dtype:n}=o;return e!=null&&(o.values=n9(e,n)),o.values}acquireTexture(t,e,o,n){if(this.numBytesInGPU+=this.computeBytes(t,o),!this.warnedAboutMemory&&this.numBytesInGPU>this.numMBBeforeWarning*1024*1024){let s=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,n)}computeBytes(t,e){return t[0]*t[1]*y.bytesPerElement(e)}checkCompileCompletion(){for(let[,t]of Object.entries(this.binaryCache))this.checkCompletion_(t)}async checkCompileCompletionAsync(){let t=[];if(this.gpgpu.parallelCompilationExtension){for(let[,e]of Object.entries(this.binaryCache))t.push(this.checkCompletionAsync_(e));return Promise.all(t)}else{for(let[,e]of Object.entries(this.binaryCache)){let o=new Promise(n=>{try{this.checkCompletion_(e),n(!0)}catch(s){throw s}});t.push(o)}return Promise.all(t)}}async checkCompletionAsync_(t){return this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(t):(await pS(),this.checkCompletionAsync_(t))}checkCompletion_(t){if(this.gpgpu.gl.getProgramParameter(t.webGLProgram,this.gpgpu.gl.LINK_STATUS)===!1)throw console.log(this.gpgpu.gl.getProgramInfoLog(t.webGLProgram)),this.gpgpu.gl.getShaderParameter(t.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)===!1?(qf(t.source,this.gpgpu.gl.getShaderInfoLog(t.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(let t of Object.values(this.binaryCache)){this.gpgpu.buildVao(t.webGLProgram);let{variablesLocations:e,customUniformLocations:o,infLoc:n,nanLoc:s,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:p}=qI(this.gpgpu,t.program,t.webGLProgram);t.variablesLocations=e,t.customUniformLocations=o,t.infLoc=n,t.nanLoc=s,t.outShapeLocation=a,t.outShapeStridesLocation=i,t.outTexShapeLocation=p}}createTensorFromGPUData(t,e,o){t.channels=t.channels||"RGBA";let{texture:n,height:s,width:a,channels:i}=t,p=pr().backend;if(!p.gpgpu.gl.isTexture(n))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");let u=p.writeTexture(n,e,o,s,a,i);return pr().makeTensorFromDataId(u,e,o,p)}};wu.nextDataId=0;function n9(r,t){if(t==="float32"||t==="complex64")return r;if(t==="int32"||t==="bool"){let e=t==="int32"?new Int32Array(r.length):new Uint8Array(r.length);for(let o=0;o<e.length;++o)e[o]=Math.round(r[o]);return e}else throw new Error(`Unknown dtype ${t}`)}var s9="4.11.0";function MD(){A().set("WEBGL_FORCE_F16_TEXTURES",!0)}ou.isBrowser()&&su("webgl",()=>new wu,2);var Cat={forceHalfFloat:MD};var Wc=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;var Pr=class{constructor(t,e,o){this.variableNames=["A","B"],this.outputShape=w.assertAndGetBroadcastShape(e,o),this.enableShapeUniforms=pt(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${t}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}};var Xr=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;var jr=class{constructor(t,e,o,n=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=w.assertAndGetBroadcastShape(e,o);let s=this.outputShape.length;this.enableShapeUniforms=pt(s);let a="";if(n)if(s===0||y.sizeFromShape(this.outputShape)===1)a=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else if(a=`
          ${Re(s)} coords = getOutputCoords();
        `,s===1)this.enableShapeUniforms?a+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:a+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let p=Dt("coords",s);this.enableShapeUniforms?a+=`
            bool nextRowOutOfBounds =
              (${p[s-2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${p[s-1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:a+=`
            bool nextRowOutOfBounds =
              (${p[s-2]} + 1) >= ${this.outputShape[s-2]};
            bool nextColOutOfBounds =
              (${p[s-1]} + 1) >= ${this.outputShape[s-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${t}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${a}

        setOutput(result);
      }
    `}};function At(r){let{inputs:t,backend:e}=r,{x:o}=t;return e.incRef(o.dataId),{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}var LD={kernelName:wo,backendName:"webgl",kernelFunc:At};function Or(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),a=e.texData.get(s.dataId),i=At({inputs:{x:o},backend:e}),p=At({inputs:{x:n},backend:e});return a.complexTensorInfos={real:i,imag:p},s}var BD={kernelName:Fi,backendName:"webgl",kernelFunc:Or};var dv="return (a < 0.) ? b * a : a;",fv=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function a9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,a=e.makeTensorInfo([],"float32",y.createScalarValue(s,"float32")),i=A().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new jr(fv,n.shape,a.shape):new Pr(dv,n.shape,a.shape),p=e.runWebGLProgram(i,[n,a],"float32");return e.disposeIntermediateTensorInfo(a),p}var zD={kernelName:Rn,backendName:"webgl",kernelFunc:a9};var hv="return (a < 0.) ? b * a : a;",gv=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;function i9(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=A().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new jr(gv,o.shape,n.shape):new Pr(hv,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],"float32")}var VD={kernelName:os,backendName:"webgl",kernelFunc:i9};var Po="if (isnan(x)) return x;";function xe({opSnippet:r,packedOpSnippet:t,cpuKernelImpl:e,dtype:o}){return({inputs:n,backend:s})=>{let{x:a}=n,i=s,p=o||a.dtype;if(i.shouldExecuteOnCPU([a])&&e!=null){let l=i.texData.get(a.dataId),m=e(l.values,p);return i.makeTensorInfo(a.shape,p,m)}let u=A().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&t!=null,c;return u?c=new Fr(a.shape,t):c=new or(a.shape,r),i.runWebGLProgram(c,[a],p)}}function nt({opSnippet:r,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:o=!1,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:i})=>{let{a:p,b:u}=a,c=i;if(o&&p.dtype==="complex64"){let f=c.texData.get(p.dataId),h=c.texData.get(u.dataId),[g,x]=[[f.complexTensorInfos.real,h.complexTensorInfos.real],[f.complexTensorInfos.imag,h.complexTensorInfos.imag]].map(C=>{let[S,k]=C,_={dataId:S.dataId,dtype:S.dtype,shape:p.shape},E={dataId:k.dataId,dtype:k.dtype,shape:u.shape},R=new Pr(r,p.shape,u.shape);return c.runWebGLProgram(R,[_,E],dt(S.dtype,k.dtype))}),b=Or({inputs:{real:g,imag:x},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(x),b}let l=s||dt(p.dtype,u.dtype);if((p.dtype==="string"||u.dtype==="string"||c.shouldExecuteOnCPU([p,u]))&&n!=null){let f=c.texData.get(p.dataId).values,h=c.texData.get(u.dataId).values,g=p.dtype==="string"?w.fromUint8ToStringArray(f):f,x=p.dtype==="string"?w.fromUint8ToStringArray(h):h,[b,C]=n(p.shape,u.shape,g,x,l),S=c.makeTensorInfo(C,l),k=c.texData.get(S.dataId);return k.values=b,S}let m=A().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&t!=null,d;return m?d=new jr(t,p.shape,u.shape,e):d=new Pr(r,p.shape,u.shape),c.runWebGLProgram(d,[p,u],l)}}function Ci(r,t=!1){if(r==="linear")return t?DD:ND;if(r==="relu")return t?FD:_D;if(r==="elu")return t?AD:TD;if(r==="relu6")return t?PD:$D;if(r==="prelu")return t?gv:hv;if(r==="leakyrelu")return t?fv:dv;if(r==="sigmoid")return t?OD:ED;throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`)}var Uc=class{constructor(t,e,o,n=!1,s=!1,a=!1,i=null,p=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=o,this.enableShapeUniforms=pt(this.outputShape.length);let c=n?t[1]:t[2],l=Math.ceil(c/2),m=n?"i * 2, rc.y":"rc.y, i * 2",d=s?"rc.z, i * 2":"i * 2, rc.z",f=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],g="",x="";i&&(p?g=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }`:u?g=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }`:g=`vec4 activation(vec4 x) {
          ${i}
        }`,x="result = activation(result);");let b=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),p&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let C="rc.x",S="rc.x";t[0]<e[0]?C=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(S=`imod(rc.x, ${e[0]})`),this.userCode=`
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${l}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        int batchA = ${C};
        int batchB = ${S};
        for (int i = 0; i < ${l}; i++) {
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${d});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${h[0]});
          result += (${f[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `}};var xv={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"},em=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=w.assertAndGetBroadcastShape(e,o),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${t}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}};var WD="return a * b;";function tm(r){let{inputs:t,backend:e}=r,{a:o,b:n}=t,s=w.upcastType(o.dtype,n.dtype);if(o.dtype==="complex64"){let i=e.texData.get(o.dataId),p=e.texData.get(n.dataId),u=new em(xv.REAL,o.shape,n.shape),c=new em(xv.IMAG,o.shape,n.shape),l=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:o.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:o.shape},{dataId:p.complexTensorInfos.real.dataId,dtype:p.complexTensorInfos.real.dtype,shape:n.shape},{dataId:p.complexTensorInfos.imag.dataId,dtype:p.complexTensorInfos.imag.dtype,shape:n.shape}],m=e.runWebGLProgram(u,l,"float32"),d=e.runWebGLProgram(c,l,"float32"),f=Or({inputs:{real:m,imag:d},backend:e});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(d),f}if(e.shouldExecuteOnCPU([o,n])){let i=e.texData.get(o.dataId),p=e.texData.get(n.dataId),[u,c]=ZR(o.shape,n.shape,i.values,p.values,s),l=e.makeTensorInfo(c,s),m=e.texData.get(l.dataId);return m.values=u,l}let a;return A().getBool("WEBGL_PACK_BINARY_OPERATIONS")?a=new jr(WD,o.shape,n.shape):a=new Pr(WD,o.shape,n.shape),e.runWebGLProgram(a,[o,n],s)}var UD={kernelName:Yn,backendName:"webgl",kernelFunc:tm};function GD(r,t,e){let o=[yi(r.shape),...bi(r.shape)],n={dtype:r.dtype,shape:o,dataId:r.dataId},s=[yi(t),...bi(t)],a=new Vc(s,o),i=!0,p=[o],u=e.runWebGLProgram(a,[n],r.dtype,p,i);return{dataId:u.dataId,shape:t,dtype:u.dtype}}function te(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{shape:s}=o,a=e,i=y.sizeFromShape(n.shape),p=y.inferFromImplicitShape(s,i),u=y.sizeFromShape(p);y.assert(i===u,()=>`The new shape (${p}) has ${u} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);let c=a.texData.get(n.dataId);return c.isPacked&&!Cu(n.shape,p)&&!(c.texture!==null&&Cu(c.shape,p))?GD(n,p,a):(a.incRef(n.dataId),{dataId:n.dataId,shape:p,dtype:n.dtype})}var HD={kernelName:da,backendName:"webgl",kernelFunc:te};var rm=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:a}=t;this.outputShape=[n,a];let i=Math.floor(o/4)*4,p=o%4,u="sumValue += dot(values, ones);";if(e!=null){let l=1/e;u=`sumValue += dot(values * ${y.isInt(l)?l.toPrecision(2):l}, ones);`}let c="";s%o>0&&(c=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${i};
        if (${p===1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${p===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${p===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `}};var gh=class{constructor(t,e){this.variableNames=["x"];let{windowSize:o,batchSize:n,inSize:s,outSize:a}=t;this.outputShape=[n,a];let i="0.0",p="";e==="prod"?i="1.0":e==="min"?(i="1.0 / 1e-20",p="min"):e==="max"&&(i="-1.0 / 1e-20",p="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="sum"?u="sumValue":e==="prod"?u="prodValue":e==="all"?u="allValue":e==="any"&&(u="anyValue");let c=Math.floor(o/4)*4,l=o%4,m=`
      if (${e==="sum"}) {
        sumValue += dot(values, ones);
      } else if (${e==="prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${p}(values, minMaxValue);
        if (${e==="min"} || ${e==="max"}) {
          minMaxValue = ${p}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,d="vec4";e==="all"?(i="1.0",m=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,d="bvec4"):e==="any"&&(i="0.0",m=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,d="bvec4");let f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${l===1}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${l===2}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${l===3}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function p9(r){let t=[];for(;t.length===0||t[t.length-1].outSize!==1;){let e=t.length?t[t.length-1].outSize:r[1],o=w.computeOptimalWindowSize(e);t.push({inSize:e,windowSize:o,outSize:Math.ceil(e/o)})}return t}function Yr(r,t,e,o){let n=p9(r.shape),s=r;for(let a=0;a<n.length;a++){let{inSize:i,windowSize:p,outSize:u}=n[a],c,l;e==="mean"?c=a===0?new rm({windowSize:p,inSize:i,batchSize:r.shape[0],outSize:u},i):new rm({windowSize:p,inSize:i,batchSize:r.shape[0],outSize:u}):c=new gh({windowSize:p,inSize:i,batchSize:r.shape[0],outSize:u},e),l=s,s=o.runWebGLProgram(c,[s],t),l.dataId!==r.dataId&&o.disposeIntermediateTensorInfo(l)}return s}var xh=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let a=0;a<o.length;a++)o[a]=t[e[a]];this.outputShape=o,this.rank=o.length;let n=Re(this.rank),s=c9(e);this.userCode=`
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `}};function c9(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],o=new Array(t);for(let n=0;n<r.length;n++)o[r[n]]=e[n];return o.join()}var yh=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let o=new Array(t.length);for(let c=0;c<o.length;c++)o[c]=t[e[c]];if(this.outputShape=o,this.rank=o.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let n=Re(this.rank),s=lv("rc",this.rank),a=new Array(this.rank);for(let c=0;c<e.length;c++)a[e[c]]=s[c];let i=`vec2(${a.slice(-2).join()})`,p=`++${s[this.rank-1]} < ${o[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${p}) {
        result[1] = ${u};
      }
      --${s[this.rank-1]};
      if(++${s[this.rank-2]} < ${o[this.rank-2]}) {
        result[2] = ${u};
        if(${p}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `}};function Su(r,t,e){let o=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yh(r.shape,t):new xh(r.shape,t);return e.runWebGLProgram(o,[r],r.dtype)}function KD(r,t,e,o){let n=t,s=r.shape.length,a=y.parseAxisParam(n,r.shape),i=a,p=w.getAxesPermutation(i,s),u=p!=null,c=r;u&&(c=Su(r,p,o),i=w.getInnerMostAxes(i.length,s)),w.assertAxesAreInnerMostDims("sum",i,s);let[l,m]=w.computeOutAndReduceShapes(c.shape,i),d=l;e&&(d=w.expandShapeToKeepDim(l,a));let f=y.sizeFromShape(m),g=y.sizeFromShape(r.shape)/f,x=te({inputs:{x:c},attrs:{shape:[g,f]},backend:o}),b=ni(r.dtype),C=Yr(x,b,"sum",o),S=te({inputs:{x:C},attrs:{shape:d},backend:o});return o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(C),u&&o.disposeIntermediateTensorInfo(c),S}function Tp(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;return KD(n,s,a,e)}var qD={kernelName:Is,backendName:"webgl",kernelFunc:Tp};function Ct(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,a=e,i=n.shape.length,p=new Array(i);for(let c=0;c<p.length;c++)p[c]=n.shape[s[c]];let u;if(a.shouldExecuteOnCPU([n])){let l=a.texData.get(n.dataId).values,m=Np(l,n.shape,n.dtype,s,p);u=a.makeTensorInfo(p,n.dtype);let d=a.texData.get(u.dataId);d.values=m}else u=Su(n,s,a);return u}var jD={kernelName:co,backendName:"webgl",kernelFunc:Ct};var yv=1e3;function _p({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:p=null}){let u=r.shape.length,c=t.shape.length,l=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],d=e?r.shape[u-1]:r.shape[u-2],f=o?t.shape[c-2]:t.shape[c-1],h=r.shape.slice(0,-2),g=t.shape.slice(0,-2),x=y.sizeFromShape(h),b=y.sizeFromShape(g),S=Ir.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);y.assert(l===m,()=>`Error in matMul: inner shapes (${l}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let k=e?[x,l,d]:[x,d,l],_=o?[b,f,m]:[b,m,f],E=te({inputs:{x:r},backend:n,attrs:{shape:k}}),R=te({inputs:{x:t},backend:n,attrs:{shape:_}}),D=[E,R],P=Math.max(x,b),O=e?E.shape[1]:E.shape[2],M=s!=null,L=a!=null,B=p==="leakyrelu",z=p!=null?Ci(p,!0):null,U=M||L||B||z!=null,j;if((d===1||f===1)&&O>yv&&U===!1){let Y=E,J=R;e&&(Y=Ct({inputs:{x:E},backend:n,attrs:{perm:[0,2,1]}}),D.push(Y)),o&&(J=Ct({inputs:{x:R},backend:n,attrs:{perm:[0,2,1]}}),D.push(J));let re=f!==1,ne=f===1,ee=Y;re&&(ee=te({inputs:{x:Y},backend:n,attrs:{shape:[P,O,1]}}),D.push(ee));let oe=f===1?2:1,ie=J;ne&&(ie=te({inputs:{x:J},backend:n,attrs:{shape:[P,1,O]}}),D.push(ie));let le=tm({inputs:{a:ee,b:ie},backend:n});j=Tp({inputs:{x:le},backend:n,attrs:{axis:oe,keepDims:!0}}),D.push(le)}else{let Y=dt(r.dtype,t.dtype),J=new Uc(k,_,[P,d,f],e,o,M,z,L,B),re=[E,R];if(s!=null&&re.push(s),L&&re.push(a),B){let ne=n.makeTensorInfo([],"float32",y.createScalarValue(i,"float32"));re.push(ne),D.push(ne)}j=n.runWebGLProgram(J,re,Y)}let q=te({inputs:{x:j},backend:n,attrs:{shape:S}});D.push(j);for(let Y of D)n.disposeIntermediateTensorInfo(Y);return q}function l9(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:a,preluActivationWeights:i}=t,{transposeA:p,transposeB:u,activation:c,leakyreluAlpha:l}=o;return _p({a:n,b:s,transposeA:p,transposeB:u,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:l,activation:c})}var XD={kernelName:Io,backendName:"webgl",kernelFunc:l9};var YD="return abs(x);";function m9(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])&&o.dtype!=="complex64"){let s=e.texData.get(o.dataId),a=ch(s.values);return e.makeTensorInfo(o.shape,o.dtype,a)}let n;return A().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Fr(o.shape,YD):n=new or(o.shape,YD),e.runWebGLProgram(n,[o],o.dtype)}var QD={kernelName:Xs,backendName:"webgl",kernelFunc:m9};var d9=Ut+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,f9=xe({opSnippet:d9}),ZD={kernelName:Wo,backendName:"webgl",kernelFunc:f9};var h9=Ut+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,g9=xe({opSnippet:h9}),JD={kernelName:Uo,backendName:"webgl",kernelFunc:g9};var eA="return a + b;",x9=nt({opSnippet:eA,packedOpSnippet:eA,supportsComplex:!0,cpuKernelImpl:RR}),tA={kernelName:uo,backendName:"webgl",kernelFunc:x9};var bh=class{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((s,a)=>`T${a}`);let o=[];this.variableNames.forEach(s=>{o.push(`float v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `}};var Ch=class{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((s,a)=>`T${a}`);let o=[];this.variableNames.forEach(s=>{o.push(`vec4 v${s} = get${s}AtOutCoords();`)});let n=this.variableNames.map(s=>`v${s}`).join(" + ");this.userCode=`
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `}};function wh(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return At({inputs:{x:o[0]},backend:e});if(o.length>A().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){let p=Math.floor(o.length/2),u=wh({inputs:o.slice(0,p),backend:e}),c=wh({inputs:o.slice(p),backend:e});return wh({inputs:[u,c],backend:e})}let n=o.map(p=>p.dtype).reduce((p,u)=>dt(p,u)),s=o.map(p=>p.shape),i=A().getBool("WEBGL_PACK")?new Ch(o[0].shape,s):new bh(o[0].shape,s);return e.runWebGLProgram(i,o,n)}var rA={kernelName:Go,backendName:"webgl",kernelFunc:wh};function y9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o,i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=p,c=w.getAxesPermutation(u,i),l=n;c!=null&&(l=Ct({inputs:{x:n},backend:e,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,i)),w.assertAxesAreInnerMostDims("all",u,i);let[m,d]=w.computeOutAndReduceShapes(l.shape,u),f=y.sizeFromShape(d),h=te({inputs:{x:l},backend:e,attrs:{shape:[-1,f]}}),g=Yr(h,h.dtype,"all",e),x;if(a){let b=w.expandShapeToKeepDim(m,p);x=te({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=te({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(l),x}var oA={kernelName:Ho,backendName:"webgl",kernelFunc:y9};function b9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o,i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=p,c=w.getAxesPermutation(u,i),l=n;c!=null&&(l=Ct({inputs:{x:n},backend:e,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,i)),w.assertAxesAreInnerMostDims("any",u,i);let[m,d]=w.computeOutAndReduceShapes(l.shape,u),f=y.sizeFromShape(d),h=te({inputs:{x:l},backend:e,attrs:{shape:[-1,f]}}),g=Yr(h,h.dtype,"any",e),x;if(a){let b=w.expandShapeToKeepDim(m,p);x=te({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=te({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(l),x}var nA={kernelName:Ko,backendName:"webgl",kernelFunc:b9};var Sh=class{constructor(t,e,o){this.variableNames=["A"];let{windowSize:n,batchSize:s,outSize:a}=t;o||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];let i=e==="max"?">":"<",p=o?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${p};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}};var Ih=class{constructor(t,e,o,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,y.assert(t.length>2,()=>`Packed arg${o.charAt(0).toUpperCase()+o.slice(1)} supports only inputs with rank above 2.`);let s=t[t.length-1],a=Math.ceil(s/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),n||this.variableNames.push("bestIndicesA");let i=this.outputShape,p=i.length,u=Re(p),c=Dt("coords",p),l,m;if(a===1){m=p+1;let R=Re(m);l=`
        ${R} sourceLocR = ${R}(${c.join()}, 0);
        ++${c[p-1]};
        ${R} sourceLocG = ${R}(${c.join()}, 0);
        ++${c[p-2]};
        ${R} sourceLocA = ${R}(${c.join()}, 0);
        --${c[p-1]};
        ${R} sourceLocB = ${R}(${c.join()}, 0);
        --${c[p-2]};`}else m=p,l=`
        ${u} sourceLocR = coords;
        ++${c[p-1]};
        ${u} sourceLocG = coords;
        ++${c[p-2]};
        ${u} sourceLocA = coords;
        --${c[p-1]};
        ${u} sourceLocB = coords;
        --${c[p-2]};`;let d=["x","y","z","w","u","v"].slice(0,m),f="."+d[m-1],h=d.map(R=>"int "+R),g=Dt("sourceLocR",m-1).concat("inIdx.r"),x=Dt("sourceLocG",m-1).concat("inIdx.g"),b=Dt("sourceLocB",m-1).concat("inIdx.b"),C=Dt("sourceLocA",m-1).concat("inIdx.a"),S=o==="max"?"greaterThan":"lessThan",k=n?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${C.join()})));`,_=`vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${C.join()}) : 0.)`,E=n?"":`
      float getBestIndicesAChannel(${h.join()}) {
        return getChannel(getBestIndicesA(${d.join()}),
                                          vec2(${d.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${h.join()}) {
        return getChannel(getA(${d.join()}),
                               vec2(${d.slice(-2).join()}));
      }
      ${E}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[p-1]} < ${i[p-1]-1};
        bool hasNextRow = ${c[p-2]} < ${i[p-2]-1};
        ${l}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${e};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${_};

        for (int i = 0; i < ${e}; i++) {
          inIdx = srcIdx;
          ${k}
          vec4 candidate = ${_};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${S}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}};function sA(r,t,e,o=null){let n=t.shape[0],s=t.shape[1];o!=null&&(n=o.shape[0],s=o.shape[1]);let a=w.computeOptimalWindowSize(s),i={windowSize:a,inSize:s,batchSize:n,outSize:Math.ceil(s/a)},p=new Sh(i,e,o==null),u=[t];o!=null&&u.push(o);let c=r.runWebGLProgram(p,u,"int32");if(c.shape[1]===1)return c;let l=sA(r,t,e,c);return r.disposeIntermediateTensorInfo(c),l}function aA(r,t,e,o=null){let n=o!=null?o.shape:t.shape,s=n[n.length-1],a=w.computeOptimalWindowSize(s),i=new Ih(n,a,e,o==null),p=o==null?[t]:[t,o],u=r.runWebGLProgram(i,p,"int32");if(u.shape.length===t.shape.length){let c=aA(r,t,e,u);return r.disposeIntermediateTensorInfo(u),c}return u}function vh(r,t,e,o){let n=[e];if(w.assertAxesAreInnerMostDims("arg"+o.charAt(0).toUpperCase()+o.slice(1),n,t.shape.length),!A().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let s=[],a=r.texData.get(t.dataId),i=a!==null&&a.isPacked,p=t;i&&(p=r.unpackTensor(t),s.push(p));let[u,c]=w.computeOutAndReduceShapes(p.shape,n),l=y.sizeFromShape(c),m=te({inputs:{x:p},backend:r,attrs:{shape:[-1,l]}});s.push(m);let d=sA(r,m,o);s.push(d);let f=te({inputs:{x:d},backend:r,attrs:{shape:u}});return s.forEach(h=>r.disposeIntermediateTensorInfo(h)),f}return aA(r,t,o)}function C9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,a=y.parseAxisParam(s,n.shape),i=w.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=Ct({inputs:{x:n},backend:e,attrs:{perm:i}}),u.push(p),a=w.getInnerMostAxes(a.length,p.shape.length)),w.assertAxesAreInnerMostDims("argMax",[a[0]],p.shape.length);let c=vh(e,p,a[0],"max");return u.forEach(l=>e.disposeIntermediateTensorInfo(l)),c}var iA={kernelName:Ys,backendName:"webgl",kernelFunc:C9};function w9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,a=y.parseAxisParam(s,n.shape),i=w.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=Ct({inputs:{x:n},backend:e,attrs:{perm:i}}),u.push(p),a=w.getInnerMostAxes(a.length,p.shape.length)),w.assertAxesAreInnerMostDims("argMin",[a[0]],p.shape.length);let c=vh(e,p,a[0],"min");return u.forEach(l=>e.disposeIntermediateTensorInfo(l)),c}var uA={kernelName:Qs,backendName:"webgl",kernelFunc:w9};var S9=Ut+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,I9=xe({opSnippet:S9}),pA={kernelName:qo,backendName:"webgl",kernelFunc:I9};var v9=Ut+"return log(x + sqrt(x * x + 1.0));",k9=xe({opSnippet:v9}),cA={kernelName:jo,backendName:"webgl",kernelFunc:k9};var N9=Ut+`
  return atan(x);
`,T9=xe({opSnippet:N9}),lA={kernelName:Xo,backendName:"webgl",kernelFunc:T9};var _9=Wc+`
  return atan(a, b);
`,$9=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Xr+`
  return result;
`,E9=nt({opSnippet:_9,packedOpSnippet:$9}),mA={kernelName:Qo,backendName:"webgl",kernelFunc:E9};var R9=Ut+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,D9=xe({opSnippet:R9}),dA={kernelName:Yo,backendName:"webgl",kernelFunc:D9};var Us=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let a=t.filterWidth,i=t.strideHeight,p=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterHeight,m=t.effectiveFilterWidth,d=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;let h=e==="avg",g=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,x=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`,b="0.0";if(h||(b="-1.0 / 1e-20"),o){let R=">=";this.userCode=`
        const ivec2 strides = ivec2(${i}, ${p});
        const ivec2 pads = ivec2(${d}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${l};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${R} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n?s?g:x:`wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let C="max",S=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(S="avgValue / max(count, 1.0)");let k=Math.floor(a/4)*4,_=a%4,E=`
      if (${h}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${C}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${i}, ${p});
      const ivec2 pads = ivec2(${d}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${l};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${k}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${E}
          }

          int xC = xCCorner + ${k};
          if (${_===1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${_===2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${E}
          } else if (${_===3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${E}
          }
        }
        setOutput(${S});
      }
    `}},Iu=class{constructor(t,e,o,n=!1,s=!1){if(this.variableNames=["x"],e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");let a=t.filterWidth,i=t.strideDepth,p=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,l=t.dilationHeight,m=t.dilationWidth,d=t.effectiveFilterDepth,f=t.effectiveFilterHeight,h=t.effectiveFilterWidth,g=t.padInfo.front,x=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;let C=e==="avg",S="0.0";if(C||(S="-1.0 / 1e-20"),o){let P=">=";this.userCode=`
        const ivec3 strides =
            ivec3(${i}, ${p}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${t.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${l}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${h};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${P} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${h} +
                      wR * ${h} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let k="max",_=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;e==="avg"&&(_="avgValue / max(count, 1.0)");let E=Math.floor(a/4)*4,R=a%4,D=`
      if (${C}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${k}(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${i}, ${p}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${S};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${t.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${S});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${E}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${D}
            }

            int xC = xCCorner + ${E};
            if (${R===1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${D}
            } else if (${R===2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${D}
            } else if (${R===3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${D}
            }
          }
        }
        setOutput(${_});
      }
    `}};function A9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Vs(n,"avgPool");let{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(a,u),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,a,u,i,p);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return At({inputs:{x:n},backend:e});let l=new Us(c,"avg",!1);return e.runWebGLProgram(l,[n],"float32")}var fA={kernelName:Zo,backendName:"webgl",kernelFunc:A9};function F9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o,c=[1,1,1],l=w.computePool3DInfo(n.shape,s,a,c,i,p,u),m=new Iu(l,"avg",!1);return e.runWebGLProgram(m,[n],"float32")}var hA={kernelName:Zs,backendName:"webgl",kernelFunc:F9};var kh=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,p=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=p-1-t.padInfo.top,l=u-1-t.padInfo.left,m=1/(e*o);this.userCode=`
      const ivec2 pads = ivec2(${c}, ${l});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${p};
            wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}},Nh=class{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,p=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,m=t.effectiveFilterHeight,d=t.effectiveFilterWidth,f=l-1-t.padInfo.front,h=m-1-t.padInfo.top,g=d-1-t.padInfo.left,x=1/(e*o*n);this.userCode=`
      const ivec3 pads = ivec3(${f}, ${h}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
            wD += ${p}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function P9(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,a=s,{filterSize:i,strides:p,pad:u,dimRoundingMode:c}=o,l=[1,1,1],m=w.computePool3DInfo(a.shape,i,p,l,u,c),d=new Nh(m);return e.runWebGLProgram(d,[n],a.dtype)}var gA={kernelName:Ai,backendName:"webgl",kernelFunc:P9};function O9(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,a=s;Vs([n,s],"avgPoolGrad");let{filterSize:i,strides:p,pad:u}=o,c=w.computePool2DInfo(a.shape,i,p,1,u),l=new kh(c);return e.runWebGLProgram(l,[n],a.dtype)}var xA={kernelName:Di,backendName:"webgl",kernelFunc:O9};function M9(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:a,transposeB:i}=o;return _p({a:n,b:s,transposeA:a,transposeB:i,backend:e})}var yA={kernelName:Jo,backendName:"webgl",kernelFunc:M9};var Th=class{constructor(t,e,o,n,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],w.assertAndGetBroadcastShape(t,e),w.assertAndGetBroadcastShape(t,o);let i="0.0";n!=null&&(w.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let p="1.0";s!=null&&(w.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),p="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${p};
        float inv = scale * inversesqrt(variance + float(${a}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}};var _h=class{constructor(t,e,o,n,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],w.assertAndGetBroadcastShape(t,e),w.assertAndGetBroadcastShape(t,o);let i="vec4(0.0)";n!=null&&(w.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let p="vec4(1.0)";s!=null&&(w.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale"),p="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${p};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${a}));

        setOutput((x - mean) * inv + offset);
      }
    `}};var L9=({inputs:r,backend:t,attrs:e})=>{let{x:o,mean:n,variance:s,offset:a,scale:i}=r;y.assert(n.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),y.assert(a==null||n.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),y.assert(i==null||n.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:p}=e;p==null&&(p=.001);let u=[o,n,s],c=null;a!=null&&(c=a.shape,u.push(a));let l=null;i!=null&&(l=i.shape,u.push(i));let m=A().getBool("WEBGL_PACK_NORMALIZATION")?new _h(o.shape,n.shape,s.shape,c,l,p):new Th(o.shape,n.shape,s.shape,c,l,p);return t.runWebGLProgram(m,u,u[0].dtype)},bA={kernelName:vn,backendName:"webgl",kernelFunc:L9};var $h=class{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;let e=Re(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let o=B9(this.rank),n,s=t.map((a,i)=>`sourceLoc.${bv[i]} = start[${i}] + coords.${bv[i]};`);n=`
        ${e} sourceLoc;
        ${e} coords = getOutputCoords();
        ${s.join(`
`)}
      `,this.userCode=`
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `}},bv=["x","y","z","w","u","v"];function B9(r){if(r===1)return"sourceLoc";if(r<=6)return bv.slice(0,r).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}var Eh=class{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let e=Re(this.rank),o=Dt("coords",this.rank),n=Dt("sourceLoc",this.rank),s=this.rank===1?"sourceLoc":`vec2(${n.slice(-2).join()})`,a=`getChannel(getSource(${n.join()}), ${s})`,i=`
      result.x = ${a};
      if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
        ++${n[this.rank-1]};
        result.y = ${a};
        --${n[this.rank-1]};
      }
    `,p=this.rank===1?"":`
      --${o[this.rank-1]};
      if (++${o[this.rank-2]} < ${t[this.rank-2]}) {
        ++${n[this.rank-2]};
        result.z = ${a};
        if (++${o[this.rank-1]} < ${t[this.rank-1]}) {
          ++${n[this.rank-1]};
          result.w = ${a};
        }
      }
    `,u=this.rank<=4?`sourceLoc = coords +
            ${e}(${t.map((c,l)=>`start[${l}]`).join()});`:t.map((c,l)=>`${n[l]} = ${o[l]} + start[${l}];`).join(`
`);this.userCode=`
      void main() {
        ${e} coords = getOutputCoords();
        ${e} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${i}
        ${p}
        setOutput(result);
      }
    `}};function z9(r,t,e,o){let n=o.texData.get(r.dataId),s=o.makeTensorInfo(e,r.dtype),a=o.texData.get(s.dataId);Object.assign(a,n),a.refCount=1,a.shape=e,a.dtype=r.dtype;let i=ct.computeFlatOffset(t,y.computeStrides(r.shape));n.slice&&(i+=n.slice.flatOffset),a.slice={flatOffset:i,origDataId:n.slice&&n.slice.origDataId||r.dataId};let p=o.dataRefCount.get(a.slice.origDataId)||1;return o.dataRefCount.set(a.slice.origDataId,p+1),s}function Gs(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:a}=o,[i,p]=ct.parseSliceParams(n,s,a);if(ct.assertParamsValid(n,i,p),y.sizeFromShape(p)===0)return e.makeTensorInfo(p,n.dtype,[]);if(e.shouldExecuteOnCPU([n])||n.dtype==="string"){let l=e.texData.get(n.dataId),m=pD(l.values,i,p,n.shape,n.dtype);return e.makeTensorInfo(p,n.dtype,m)}let{isPacked:u}=e.texData.get(n.dataId),c=ct.isSliceContinous(n.shape,i,p);if(u||!c){let l=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Eh(p):new $h(p),m=[i];return e.runWebGLProgram(l,[n],n.dtype,m)}return e.uploadToGPU(n.dataId),z9(n,i,p,e)}var CA={kernelName:ha,backendName:"webgl",kernelFunc:Gs};var V9=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:a}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let i=s.reduce((b,C)=>b*C),p=w.getReshaped(n.shape,s,i),u=w.getPermuted(p.length,s.length),c=w.getReshapedPermuted(n.shape,s,i),l=w.getSliceBeginCoords(a,s.length),m=w.getSliceSize(c,a,s.length),d=[],f=te({inputs:{x:n},backend:e,attrs:{shape:p}}),h=Ct({inputs:{x:f},backend:e,attrs:{perm:u}}),g=te({inputs:{x:h},backend:e,attrs:{shape:c}}),x=Gs({inputs:{x:g},backend:e,attrs:{begin:l,size:m}});return d.push(f),d.push(h),d.push(g),d.forEach(b=>e.disposeIntermediateTensorInfo(b)),x},wA={kernelName:Js,backendName:"webgl",kernelFunc:V9};function W9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:a}=o,i=e.readSync(n.dataId),p=e.readSync(s.dataId),u=ph(i,p,s.dtype,s.shape,a);return e.makeTensorInfo([a],s.dtype,u)}var SA={kernelName:en,backendName:"webgl",kernelFunc:W9};var U9=`
  int r = int(a.r) & int(b.r);
  int g = int(a.g) & int(b.g);
  int rb = int(a.b) & int(b.b);
  int ra = int(a.a) & int(b.a);
  return vec4(r, g, rb, ra);
`,G9=`
  return float(int(a.r) & int(b.r));
`;function H9(r){let{inputs:t,backend:e}=r,{a:o,b:n}=t,s=A().getBool("WEBGL_PACK_BINARY_OPERATIONS"),a=A().getNumber("WEBGL_VERSION");if(e.shouldExecuteOnCPU([o,n])||a===1){let p=e.texData.get(o.dataId).values,u=e.texData.get(n.dataId).values,[c,l]=AR(o.shape,n.shape,p,u,o.dtype),m=e.makeTensorInfo(l,o.dtype),d=e.texData.get(m.dataId);return d.values=c,m}let i;return s?i=new jr(U9,o.shape,n.shape,!1):i=new Pr(G9,o.shape,n.shape),e.runWebGLProgram(i,[o,n],o.dtype)}var IA={kernelName:ja,backendName:"webgl",kernelFunc:H9};function K9(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.readSync(o.dataId),a=e.readSync(n.dataId),i=w.assertAndGetBroadcastShape(Array.from(s),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}var vA={kernelName:ea,backendName:"webgl",kernelFunc:K9};var q9="return float(a != b);",Cv=nt({opSnippet:q9,cpuKernelImpl:eD,dtype:"bool"}),kA={kernelName:Qn,backendName:"webgl",kernelFunc:Cv};function wi(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return At({inputs:{x:n.complexTensorInfos.real},backend:e})}var NA={kernelName:qi,backendName:"webgl",kernelFunc:wi};var j9="return float(int(x));";function TA(r,t){let e=new or(r.shape,j9),o=t.runWebGLProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function wv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return At({inputs:{x:n},backend:e});let a=Gr(n.shape),i=wv({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),p=Or({inputs:{real:i,imag:a},backend:e});return a.dispose(),e.disposeIntermediateTensorInfo(i),p}if(n.dtype==="complex64"){let a=wi({inputs:{input:n},backend:e}),i=wv({inputs:{x:a},backend:e,attrs:{dtype:s}});return e.disposeIntermediateTensorInfo(a),i}if(!y.hasEncodingLoss(n.dtype,s)){let a=At({inputs:{x:n},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:s}}if(e.shouldExecuteOnCPU([n])){let a=e.texData.get(n.dataId).values,[i,p,u]=FR(a,n.shape,n.dtype,s);return e.makeTensorInfo(i,p,u)}if(s==="int32")return TA(n,e);if(s==="bool"){let a=e.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),p=Cv({inputs:{a:n,b:a},backend:e});return e.disposeIntermediateTensorInfo(a),p}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var _A={kernelName:bo,backendName:"webgl",kernelFunc:wv};var $A="return ceil(x);",X9=xe({opSnippet:$A,packedOpSnippet:$A,cpuKernelImpl:PR}),EA={kernelName:tn,backendName:"webgl",kernelFunc:X9};var Rh=class{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}};var Dh=class{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}};function Y9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:a}=o,i;A().getBool("WEBGL_PACK_CLIP")?i=new Dh(n.shape):i=new Rh(n.shape);let p=[[s],[a]];return e.runWebGLProgram(i,[n],n.dtype,p)}var RA={kernelName:Co,backendName:"webgl",kernelFunc:Y9};var Ah=class{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}};function DA(r,t){return{dataId:t.dataId,dtype:t.dtype,shape:r.shape}}function Q9(r){let{inputs:t,backend:e}=r,{x:o}=t,n=e.texData.get(o.dataId),s=new Ah(o.shape),a=[DA(o,n.complexTensorInfos.real),DA(o,n.complexTensorInfos.imag)];return e.runWebGLProgram(s,a,a[0].dtype)}var AA={kernelName:Pi,backendName:"webgl",kernelFunc:Q9};var Fh=class{constructor(t){this.outputShape=[],this.outputShape=w.computeOutShape(t,1),this.variableNames=t.map((a,i)=>`T${i}`);let e=new Array(t.length-1);e[0]=t[0][1];for(let a=1;a<e.length;a++)e[a]=e[a-1]+t[a][1];let o=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<e.length;a++){let i=e[a-1];o.push(`else if (yC < ${e[a]}) setOutput(getT${a}(yR, yC-${i}));`)}let n=e.length,s=e[e.length-1];o.push(`else setOutput(getT${n}(yR, yC-${s}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `}};var Oh=class{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=w.computeOutShape(t,e);let o=this.outputShape,n=o.length,s=Re(n),a=Dt("coords",n),i=["x","y","z","w","u","v"].slice(0,n);this.variableNames=t.map((h,g)=>`T${g}`);let p=new Array(t.length-1);p[0]=t[0][e];for(let h=1;h<p.length;h++)p[h]=p[h-1]+t[h][e];let u=i[e],c=i.slice(-2),l=i.join(),m=`if (${u} < ${p[0]}) {
        return getChannel(
            getT0(${l}), vec2(${c.join()}));
        }`;for(let h=1;h<p.length;h++){let g=p[h-1];m+=`
        if (${u} < ${p[h]}  && ${u} >= ${p[h-1]}) {
          return getChannel(
            getT${h}(${Ph(i,u,g)}),
            vec2(${Ph(c,u,g)}));
        }`}let d=p.length,f=p[p.length-1];m+=`
        return getChannel(
          getT${d}(${Ph(i,u,f)}),
          vec2(${Ph(c,u,f)}));`,this.userCode=`
      float getValue(${i.map(h=>"int "+h)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${a}), 0., 0., 0.);

        ${a[n-1]} = ${a[n-1]} + 1;
        if (${a[n-1]} < ${o[n-1]}) {
          result.g = getValue(${a});
        }

        ${a[n-2]} = ${a[n-2]} + 1;
        if (${a[n-2]} < ${o[n-2]}) {
          result.a = getValue(${a});
        }

        ${a[n-1]} = ${a[n-1]} - 1;
        if (${a[n-2]} < ${o[n-2]} &&
            ${a[n-1]} < ${o[n-1]}) {
          result.b = getValue(${a});
        }
        setOutput(result);
      }
    `}};function Ph(r,t,e){let o=r.indexOf(t);return r.map((s,a)=>a===o?`${s} - ${e}`:s).join()}function $p(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.texData.get(o.dataId);return At({inputs:{x:n.complexTensorInfos.imag},backend:e})}var FA={kernelName:Gi,backendName:"webgl",kernelFunc:$p};function Gc(r,t,e){let o=r[0].dtype;if(o==="complex64"){let d=r.map(b=>wi({inputs:{input:b},backend:e})),f=r.map(b=>$p({inputs:{input:b},backend:e})),h=Gc(d,t,e),g=Gc(f,t,e),x=Or({inputs:{real:h,imag:g},backend:e});return d.forEach(b=>e.disposeIntermediateTensorInfo(b)),f.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(g),x}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let d=r.map(S=>{let _=[-1,y.sizeFromShape(S.shape.slice(t))];return te({inputs:{x:S},backend:e,attrs:{shape:_}})}),f=d.map(S=>({vals:e.readSync(S.dataId),shape:S.shape})),h=w.computeOutShape(d.map(S=>S.shape),1),g=d[0].shape[0]===1,x=OR(f,h,o,g),b=w.computeOutShape(r.map(S=>S.shape),t),C=e.makeTensorInfo(b,o,x);return d.forEach(S=>e.disposeIntermediateTensorInfo(S)),C}let s=r.filter(d=>y.sizeFromShape(d.shape)>0),a=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&s[0].shape.length>1;if(s.length===1){let d=a?new or(r[0].shape,Ba):new Fr(r[0].shape,Ba);return e.runWebGLProgram(d,r,o)}let i=A().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(s.length>i){let d=[];for(let h=0;h<s.length;h+=i){let g=s.slice(h,h+i);d.push(Gc(g,t,e))}let f=Gc(d,t,e);for(let h of d)e.disposeIntermediateTensorInfo(h);return f}if(a){let d=new Oh(s.map(f=>f.shape),t);return e.runWebGLProgram(d,s,o)}let{tensors2D:p,outShape:u}=Z9(s,t,e),c=new Fh(p.map(d=>d.shape)),l=e.runWebGLProgram(c,p,o);p.forEach(d=>e.disposeIntermediateTensorInfo(d));let m=te({inputs:{x:l},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(l),m}function Z9(r,t,e){let o=w.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>te({inputs:{x:s},attrs:{shape:[-1,y.sizeFromShape(s.shape.slice(t))]},backend:e})),outShape:o}}function Sv(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],a=t.map(u=>u.shape);w.assertParamsConsistent(a,s);let i=w.computeOutShape(t.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let p=t.filter(u=>y.sizeFromShape(u.shape)>0);return p.length===1?At({inputs:{x:p[0]},backend:e}):Gc(p,s,e)}var PA={kernelName:ta,backendName:"webgl",kernelFunc:Sv};var Hc=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;let a=t.padInfo.top,i=t.padInfo.left,p=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,l=t.dilationWidth,m=t.filterHeight,d=t.filterWidth,f=Math.floor(t.inChannels/4)*4,h=t.inChannels%4,g=t.dataFormat==="channelsLast",x=g?1:2,b=g?2:3,C=g?3:1,S="",k="";o&&(n?S=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?S=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:S=`
          float activation(float x) {
            ${o}
          }
        `,k="result = activation(result);");let _=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${S}

      const ivec2 strides = ivec2(${p}, ${u});
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${C}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${t.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${l};

            if (xC < 0 || xC >= ${t.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${h===1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${h===2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${h===3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${_}
        ${k}
        setOutput(result);
      }
    `}},Mh=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let e=t.padInfo.front,o=t.padInfo.top,n=t.padInfo.left,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,p=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,m=t.filterHeight,d=t.filterWidth,f=Math.floor(t.inChannels/4)*4,h=t.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${s}, ${a}, ${i});
      const ivec3 pads = ivec3(${e}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${l}; wF++) {
          int xF = xFCorner + wF * ${p};

          if (xF < 0 || xF >= ${t.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${h===1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${h===2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${h===3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};var Kc=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=pt(this.outputShape.length);let a=t.padInfo.left,i=t.strideWidth,p=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,l=c,m=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let g=0;g<c;g++)m+=`
           vec4 xTexelC${g*2};
           int xTexelC${g*2}Ready;
           vec4 xTexelC${g*2+1};
           int xTexelC${g*2+1}Ready;
           vec4 xC${g};`;m+=`
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {
       `;for(let g=0;g<c;g++)m+=`
           xTexelC${g*2} = vec4(0.0);
           xTexelC${g*2}Ready = 0;
           xTexelC${g*2+1} = vec4(0.0);
           xTexelC${g*2+1}Ready = 0;
           xC${g} = vec4(0.0);`;m+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let g=0;g<(l+1)/2;g++){let x=g*2;if(m+=`
           xC = xCCorner + ${x*p};
           `,i===1){if(x<c&&(a%2===1?(m+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `,p===1&&x>0?m+=`
                 xC${x} = vec4(xTexelC${x-2}.zw, xTexelC${x}.xy);
                 `:m+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `):m+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `,x+1<c)){let b=a%2===0?y.nearestLargerEven(p):p;p%2===0&&a%2===1||p%2!==0&&a%2!==1?(m+=`
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                     xTexelC${x+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x+1}.zw = vec2(0.0);
                     }
                     xTexelC${x+1}Ready = 1;
                   }
                   `,p>1?m+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x+1} = vec4(previous.zw, xTexelC${x+1}.xy);
                     } else {
                      xC${x+1} = vec4(0.0, 0.0, xTexelC${x+1}.xy);
                     }
                     `:m+=`
                     xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.xy);
                     `):b===1?m+=`
                     xC${x+1} = xTexelC${x};
                     `:m+=`
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                       xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x+1}.zw = vec2(0.0);
                       }
                       xTexelC${x+1}Ready = 1;
                     }

                     xC${x+1} = xTexelC${x+1};
                     `}}else x<c&&(a%2===1?(m+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.0);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
               `,x+1<c&&(m+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x+1} = vec4(xTexelC${x+1}.xy, final.xy);
                 `)):(m+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x+1}Ready == 0) {
                   xTexelC${x+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x+1}.zw = vec2(0.);
                   }
                   xTexelC${x+1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x+1}.xy);
               `,x+1<c&&(m+=`
                   xC${x+1} = vec4(xTexelC${x}.zw, xTexelC${x+1}.zw);
                 `)));x<c&&(m+=`
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${t.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,x+1<c&&(m+=`
               wTexel = getW(r, ${x+1}, d1, d2);
               dotProd += xC${x+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${t.inChannels}) {
                 dotProd += xC${x+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}m+=`
     }
   `,m+=`
     }
   `,m+=`
     }
   `;let d="",f="";o&&(n?d=`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }`:s?d=`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }`:d=`vec4 activation(vec4 x) {
           ${o}
         }`,f="result = activation(result);");let h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${d}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${h}
         ${f}
         setOutput(result);
       }
     `}};var Lh=class{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=pt(this.outputShape.length);let{dataFormat:o}=e,n=vt(),s=o==="channelsLast",a=s?1:2,i=s?2:3,p=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`,u="";for(let c=0;c<=1;c++)for(let l=0;l<=1;l++)u+=`
          blockIndex = rc.z + ${l};
          pos = rc.y + ${c};

          ${p}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${a}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c*2+l}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c*2+l}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `}};function Bh(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function zh({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let p=r.shape,u=o.texData.get(r.dataId),c=e.inChannels,l=p[0]*p[1]*p[2],m=e.outChannels,d=e.dataFormat==="channelsLast",f=!1,h=!1,g,x=[];if(s!=null){let S=Bh(s.shape,d);S!=null&&(s=te({inputs:{x:s},backend:o,attrs:{shape:S}}),x.push(s))}if(n!=null){let S=Bh(n.shape,d);S!=null&&(n=te({inputs:{x:n},backend:o,attrs:{shape:S}}),x.push(n))}if(!((l===1||m===1)&&c>yv)&&u.isPacked&&d&&u.texture!=null&&p[2]%2!==0&&y.arraysEqual(u.shape.slice(-3),p.slice(-3))){let S=p[0]*p[1]*(p[2]+1),k={dataId:r.dataId,shape:[1,S,e.inChannels],dtype:r.dtype},_=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,y.assert(Cu(u.shape,k.shape),()=>`packed reshape ${u.shape} to ${k.shape} isn't free`);let E=te({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});x.push(E);let R=_p({a:k,b:E,backend:o,transposeA:f,transposeB:h,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a}),D=o.texData.get(R.dataId);y.assert(D.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=_,D.shape=e.outShape,g=At({inputs:{x:R},backend:o}),g.shape=e.outShape,x.push(R)}else{let S=e.outHeight*e.outWidth,k=te({inputs:{x:r},backend:o,attrs:{shape:d?[e.batchSize,S,e.inChannels]:[e.batchSize,e.inChannels,S]}}),_=te({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}}),E=_p({a:d?k:_,b:d?_:k,transposeA:!d,transposeB:h,backend:o,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a});g=te({inputs:{x:E},backend:o,attrs:{shape:e.outShape}}),x.push(k),x.push(_),x.push(E)}for(let S of x)o.disposeIntermediateTensorInfo(S);return g}function Vh({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let{filterWidth:p,filterHeight:u,inChannels:c,outWidth:l,outHeight:m,dataFormat:d}=e,f=d==="channelsLast",h=p*u*c,g=m*l,x=[e.batchSize,h,g],b=!0,C=!1,S=[];if(s!=null){let q=Bh(s.shape,f);q!=null&&(s=te({inputs:{x:s},backend:o,attrs:{shape:q}}),S.push(s))}if(n!=null){let q=Bh(n.shape,f);q!=null&&(n=te({inputs:{x:n},backend:o,attrs:{shape:q}}),S.push(n))}let k=te({inputs:{x:t},backend:o,attrs:{shape:[1,h,y.sizeFromShape(t.shape)/h]}});S.push(k);let _=new Lh(x,e),E=[r.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]],R=o.runWebGLProgram(_,[r],"float32",E),D=te({inputs:{x:R},backend:o,attrs:{shape:x}});S.push(R),S.push(D);let P=n!=null,O=s!=null,M=i==="leakyrelu",L=i?Ci(i,!0):null,B=new Uc(f?D.shape:k.shape,f?k.shape:D.shape,f?[e.batchSize,g,e.outChannels]:[e.batchSize,e.outChannels,g],b,C,P,L,O,M),z=f?[D,k]:[k,D];if(n&&z.push(n),O&&z.push(s),M){let q=o.makeTensorInfo([],"float32",y.createScalarValue(a,"float32"));z.push(q),S.push(q)}let U=o.runWebGLProgram(B,z,"float32"),j=te({inputs:{x:U},backend:o,attrs:{shape:e.outShape}});S.push(U);for(let q of S)o.disposeIntermediateTensorInfo(q);return j}function J9(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dataFormat:p,dilations:u,dimRoundingMode:c}=o,l=w.convertConv2DDataFormat(p),m=w.computeConv2DInfo(n.shape,s.shape,a,u,i,c,!1,l),d;if(m.filterHeight===1&&m.filterWidth===1&&m.dilationHeight===1&&m.dilationWidth===1&&m.strideHeight===1&&m.strideWidth===1&&(m.padInfo.type==="SAME"||m.padInfo.type==="VALID"))d=zh({x:n,filter:s,convInfo:m,backend:e});else if(m.strideWidth<=2&&l==="channelsLast"&&A().getBool("WEBGL_EXP_CONV")){let h=new Kc(m),g=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]];d=e.runWebGLProgram(h,[n,s],"float32",g)}else if(A().getBool("WEBGL_CONV_IM2COL"))d=Vh({x:n,filter:s,convInfo:m,backend:e});else{let h=new Hc(m);d=e.runWebGLProgram(h,[n,s],"float32")}let f=te({inputs:{x:d},backend:e,attrs:{shape:m.outShape}});return e.disposeIntermediateTensorInfo(d),f}var OA={kernelName:rn,backendName:"webgl",kernelFunc:J9};var Wh=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,a=t.dataFormat==="channelsLast";this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              ${a?`float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);`:`float dyValue = getDy(b, d2, yR, yC);
              float xValue = getX(b, d1, xR, xC);
              dotProd += (xValue * dyValue);`}
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Uh=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,a=t.dataFormat==="channelsLast",i=e-1-t.padInfo.top,p=o-1-t.padInfo.left,u=a?1:2,c=a?2:3,l=a?3:1;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${l}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {

              if (${a}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}},Gh=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yF = 0; yF < ${t.outDepth}; yF++) {
            int xF = wF + yF * ${e} - ${s};

            if (xF < 0 || xF >= ${t.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${t.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${a};

              if (xR < 0 || xR >= ${t.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${t.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${i};

                if (xC < 0 || xC >= ${t.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Hh=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterDepth,o=t.filterHeight,n=t.filterWidth,s=t.strideDepth,a=t.strideHeight,i=t.strideWidth,p=e-1-t.padInfo.front,u=o-1-t.padInfo.top,c=n-1-t.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${p}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${e}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${e} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function eJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,pad:i,dataFormat:p,dimRoundingMode:u,filterShape:c}=o,l=w.convertConv2DDataFormat(p),m=w.computeConv2DInfo(n.shape,c,a,1,i,u,!1,l),d=new Wh(m);return e.runWebGLProgram(d,[n,s],"float32")}var MA={kernelName:Oi,backendName:"webgl",kernelFunc:eJ};var Kh=class{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=pt(this.outputShape.length);let e=t.filterHeight,o=t.filterWidth,n=e-1-t.padInfo.top,s=o-1-t.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${n}, ${s});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];

        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        vec4 result = vec4(0.);
        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / strides[0];
          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);
          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            int wCPerm = ${o} - 1 - wC;

            float dyC = float(dyCCorner + wC) / strides[1];
            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)
              && (fract(dyC) == 0.0);
            int idyC = int(dyC);

            float dyC2 = float(dyCCorner + wC + 1) / strides[1];
            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)
              && (fract(dyC2) == 0.0);
            int idyC2 = int(dyC2);

            if (idyCVal && idyCVal2) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?
                  dySample : getDy(batch, idyR, idyC2, d2);

                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));

                dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample2.xy : dySample2.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC, d2);
                vec2 dyValue = mod(float(idyC), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.xy += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            } else if (idyCVal2) {
              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {
                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);
                vec4 dySample = getDy(batch, idyR, idyC2, d2);
                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?
                  dySample.xy : dySample.zw;
                result.zw += vec2(dot(dyValue, wValue.xy),
                  dot(dyValue, wValue.zw));
              }
            }
          }
        }
        setOutput(result);
      }
    `}};function tJ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:a,strides:i,pad:p,dataFormat:u,dimRoundingMode:c}=o,l=w.convertConv2DDataFormat(u),m=w.computeConv2DInfo(a,s.shape,i,1,p,c,!1,l);if(A().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&l==="channelsLast"){let d=[[m.strideHeight,m.strideWidth]],f=new Kh(m);return e.runWebGLProgram(f,[n,s],"float32",d)}else{let d=new Uh(m);return e.runWebGLProgram(d,[n,s],"float32")}}var LA={kernelName:on,backendName:"webgl",kernelFunc:tJ};function rJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p}=o,u=w.computeConv3DInfo(n.shape,s.shape,a,p,i),c=new Mh(u);return e.runWebGLProgram(c,[n,s],"float32")}var BA={kernelName:nn,backendName:"webgl",kernelFunc:rJ};function oJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,pad:i,filterShape:p}=o,u=w.computeConv3DInfo(n.shape,p,a,1,i),c=new Gh(u);return e.runWebGLProgram(c,[n,s],"float32")}var zA={kernelName:Xa,backendName:"webgl",kernelFunc:oJ};function nJ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:a,strides:i,inputShape:p}=o,u=w.computeConv3DInfo(p,s.shape,i,1,a),c=new Hh(u);return e.runWebGLProgram(c,[n,s],"float32")}var VA={kernelName:sn,backendName:"webgl",kernelFunc:nJ};var sJ=Po+`
  return cos(x);
`,aJ=`
  vec4 result = cos(x);
  bvec4 isNaN = isnan(x);
  ${Xr}
  return result;
`,iJ=xe({opSnippet:sJ,packedOpSnippet:aJ}),WA={kernelName:an,backendName:"webgl",kernelFunc:iJ};var uJ=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,pJ=xe({opSnippet:uJ}),UA={kernelName:un,backendName:"webgl",kernelFunc:pJ};var qh=class{constructor(t,e,o,n,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[a,i,p,u]=t,[c]=e,[l,m]=o;this.outputShape=[c,l,m,u];let d=n==="bilinear"?1:0,[f,h]=[`${i-1}.0`,`${p-1}.0`],[g,x,b]=l>1?[`${(i-1)/(l-1)}`,"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[C,S,k]=m>1?[`${(p-1)/(m-1)}`,"(x2-x1) * width_ratio",`x1*${h} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${h}`];this.userCode=`
      const float height_ratio = float(${g});
      const float width_ratio = float(${C});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${a}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${S};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${k};
        if( in_x < 0.0 || in_x > ${h} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${d} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}};var cJ=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:a}=t,{cropSize:i,method:p,extrapolationValue:u}=o,c=new qh(n.shape,s.shape,i,p,u);return e.runWebGLProgram(c,[n,s,a],"float32")},GA={kernelName:ln,backendName:"webgl",kernelFunc:cJ};var Ep;(function(r){r.Prod="*",r.Sum="+"})(Ep||(Ep={}));var om=class{constructor(t,e,o,n){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let s=this.outputShape.length,a=this.op===Ep.Prod?"1.0":"0.0",i=o?a:`getX(${HA(s,"coords",this.op)})`,p=this.outputShape[this.outputShape.length-1],u="",c="";o?(u=n?`end != ${p-1}`:"end != 0",c=n?"end + 1":"end - 1"):(u=n?`end + pow2 < ${p}`:"end >= pow2",c=n?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${Re(s)} coords = getOutputCoords();
        int end = ${KA(s,"coords",this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${KA(s,"coords",this.op)} = idx;
          val ${this.op}= getX(${HA(s,"coords",this.op)});
        }
        setOutput(val);
      }
    `}};function HA(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function KA(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function jh(r,t,e,o,n,s){let a=t.shape.length,i=w.getAxesPermutation([o],a),p=t;i!=null&&(p=Ct({inputs:{x:t},backend:e,attrs:{perm:i}}));let u=w.getInnerMostAxes(1,a)[0];if(u!==a-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=p.shape[u],l=At({inputs:{x:p},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let d=new om(r,p.shape,!1,s),f=[[m]],h=l;l=e.runWebGLProgram(d,[l],l.dtype,f),e.disposeIntermediateTensorInfo(h)}if(n){let m=new om(r,p.shape,n,s),d=l;l=e.runWebGLProgram(m,[l],l.dtype),e.disposeIntermediateTensorInfo(d)}if(i!=null){let m=w.getUndoAxesPermutation(i),d=Ct({inputs:{x:l},backend:e,attrs:{perm:m}});return e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(p),d}return l}function lJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:a,reverse:i}=o;return jh(Ep.Prod,n,e,s,a,i)}var qA={kernelName:pn,backendName:"webgl",kernelFunc:lJ};function mJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:a,reverse:i}=o;return jh(Ep.Sum,n,e,s,a,i)}var jA={kernelName:cn,backendName:"webgl",kernelFunc:mJ};function dJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:a,binaryOutput:i}=o;if(n.shape.length===1){let p=e.readSync(n.dataId),u=e.readSync(s.dataId),c=ph(p,u,s.dtype,s.shape,a);return e.makeTensorInfo([a],s.dtype,c)}else if(n.shape.length===2){let p=e.bufferSync(n),u=e.bufferSync(s),c=DR(p,u,a,i);return e.makeTensorInfo(c.shape,s.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`)}var XA={kernelName:ra,backendName:"webgl",kernelFunc:dJ};var Xh=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=o,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${e};
      int offset_h = imod(h, ${e});
      int in_w = w / ${e};
      int offset_w = imod(w, ${e});
      int offset_d = (offset_h * ${e} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function fJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:a}=o,i=n.shape[0],p=a==="NHWC"?n.shape[1]:n.shape[2],u=a==="NHWC"?n.shape[2]:n.shape[3],c=a==="NHWC"?n.shape[3]:n.shape[1],l=p*s,m=u*s,d=c/(s*s),f=a==="NHWC"?[i,l,m,d]:[i,d,l,m],h=new Xh(f,s,a);return e.runWebGLProgram(h,[n],n.dtype)}var YA={kernelName:mn,backendName:"webgl",kernelFunc:fJ};var qc=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=pt(this.outputShape.length);let a=t.filterHeight,i=t.filterWidth,p=t.outChannels/t.inChannels,u="",c="";o&&(n?u=`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?u=`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:u=`
          float activation(float x) {
            ${o}
          }
        `,c="result = activation(result);");let l=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${p};
        int q = d2 - d1 * ${p};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${a}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${l}
        ${c}
        setOutput(result);
      }
    `}};var jc=class{constructor(t,e=!1,o=null,n=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=pt(this.outputShape.length);let a=t.outChannels/t.inChannels,i=t.padInfo.left,p=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,l=t.filterWidth,m=l,d=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let x=0;x<l;x++)d+=`
          vec4 xTexelC${x*2};
          int xTexelC${x*2}Ready;
          vec4 xTexelC${x*2+1};
          int xTexelC${x*2+1}Ready;
          vec4 xC${x};`;d+=`
    for (int r = 0; r < ${c}; r++) {
      `;for(let x=0;x<l;x++)d+=`
          xTexelC${x*2} = vec4(0.0);
          xTexelC${x*2}Ready = 0;
          xTexelC${x*2+1} = vec4(0.0);
          xTexelC${x*2+1}Ready = 0;
          xC${x} = vec4(0.0);`;d+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let x=0;x<(m+1)/2;x++){let b=x*2;if(d+=`
          xC = xCCorner + ${b*u};
          `,p===1){if(b<l&&(i%2===1?(d+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `,u===1&&b>0?d+=`
                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);
                `:d+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `):d+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `,b+1<l)){let C=i%2===0?y.nearestLargerEven(u):u;u%2===0&&i%2===1||u%2!==0&&i%2!==1?(d+=`
                  xCOffset = xC + imod(pads[1], 2) + ${C};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b+1}.zw = vec2(0.0);
                    }
                    xTexelC${b+1}Ready = 1;
                  }
                  `,u>1?d+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);
                    } else {
                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);
                    }
                    `:d+=`
                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);
                    `):C===1?d+=`
                    xC${b+1} = xTexelC${b};
                    `:d+=`
                    xCOffset = xC + ${C};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b+1}.zw = vec2(0.0);
                      }
                      xTexelC${b+1}Ready = 1;
                    }

                    xC${b+1} = xTexelC${b+1};
                    `}}else b<l&&(i%2===1?(d+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.0);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
              `,b+1<l&&(d+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);
                `)):(d+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {
                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b+1}.zw = vec2(0.);
                  }
                  xTexelC${b+1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b+1}.xy);
              `,b+1<l&&(d+=`
                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);
                `)));b<l&&(d+=`
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `,b+1<l&&(d+=`
              wTexel = getW(r, ${b+1}, d1, q);
              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);
            `))}d+=`
    }
  `,d+=`
      }
    `;let f="",h="";o&&(n?f=`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }`:s?f=`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }`:f=`vec4 activation(vec4 x) {
          ${o}
        }`,h="result = activation(result);");let g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${a};
        int q = d2 - d1 * ${a};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${d}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${h}
        setOutput(result);
      }
    `}};function hJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p,dimRoundingMode:u}=o,c=p;c==null&&(c=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(a,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);let l=w.computeConv2DInfo(n.shape,s.shape,a,c,i,u,!0),m;A().getBool("WEBGL_PACK_DEPTHWISECONV")&&l.strideWidth<=2&&l.outChannels/l.inChannels===1?m=new jc(l):m=new qc(l);let d=[[l.padInfo.top,l.padInfo.left],[l.strideHeight,l.strideWidth],[l.dilationHeight,l.dilationWidth],[l.inHeight,l.inWidth]];return e.runWebGLProgram(m,[n,s],"float32",d)}var QA={kernelName:dn,backendName:"webgl",kernelFunc:hJ};var Yh=class{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;let e=t.strideHeight,o=t.strideWidth,n=t.padInfo.top,s=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${a} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${t.batchSize}; b++) {
          for (int yR = 0; yR < ${t.outHeight}; yR++) {
            int xR = wR + yR * ${e} - ${n};

            if (xR < 0 || xR >= ${t.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${t.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${t.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}},Qh=class{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;let e=t.filterHeight,o=t.filterWidth,n=t.strideHeight,s=t.strideWidth,a=e-1-t.padInfo.top,i=o-1-t.padInfo.left,p=t.outChannels/t.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${e}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${e} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${p}; dm++) {
              int d2 = d1 * ${p} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function gJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,dilations:i,pad:p,dimRoundingMode:u,filterShape:c}=o,l=w.computeConv2DInfo(n.shape,c,a,i,p,u,!0),m=new Yh(l);return e.runWebGLProgram(m,[n,s],"float32")}var ZA={kernelName:Mi,backendName:"webgl",kernelFunc:gJ};function xJ(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:a,dilations:i,pad:p,dimRoundingMode:u,inputShape:c}=o,l=w.computeConv2DInfo(c,s.shape,a,i,p,u,!0),m=new Qh(l);return e.runWebGLProgram(m,[n,s],"float32")}var JA={kernelName:Li,backendName:"webgl",kernelFunc:xJ};var Zh=class{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}};function yJ(r){let{inputs:t,backend:e}=r,{x:o}=t,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),a=te({inputs:{x:o},backend:e,attrs:{shape:[s]}}),i=new Zh(s),p=e.runWebGLProgram(i,[a],a.dtype),u=te({inputs:{x:p},backend:e,attrs:{shape:n}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(p),u}var eF={kernelName:oa,backendName:"webgl",kernelFunc:yJ};var Jh=class{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;let{inHeight:e,inWidth:o,padInfo:n,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:p,dilationHeight:u,dilationWidth:c}=t,{top:l,left:m}=n;this.userCode=`
      const ivec2 strides = ivec2(${s}, ${a});
      const ivec2 pads = ivec2(${l}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${e}) {
            for (int w = 0; w < ${p}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}};function bJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p}=o,u=w.computeDilation2DInfo(n.shape,s.shape,a,i,"NHWC",p),c,l=new Jh(u);c=e.runWebGLProgram(l,[n,s],"float32");let m=te({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),m}var tF={kernelName:fn,backendName:"webgl",kernelFunc:bJ};function CJ(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:a,summedDims:i,idDims:p}=w.decodeEinsumEquation(n,s.length);w.checkEinsumDimSizes(a.length,p,s);let{path:u,steps:c}=w.getEinsumComputePath(i,p),l=c.length,m=null,d=a.length,f=[];for(let h=0;h<l;++h){for(let g of c[h]){let{permutationIndices:x,expandDims:b}=w.getEinsumPermutation(d,p[g]),C;w.isIdentityPermutation(x)?C=s[g]:(C=Ct({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),f.push(C));let S=C.shape.slice();for(let k=0;k<b.length;++k)S.splice(b[k],0,1);y.arraysEqual(C.shape,S)||(C=te({inputs:{x:C},backend:e,attrs:{shape:S}}),f.push(C)),m===null?m=C:(m=tm({inputs:{a:C,b:m},backend:e}),f.push(m))}h<l-1&&(u[h]>=0&&(m=Tp({inputs:{x:m},backend:e,attrs:{axis:u[h]-(a.length-d),keepDims:!1}}),f.push(m)),d--)}for(let h of f)h!==m&&e.disposeIntermediateTensorInfo(h);return m}var rF={kernelName:Vi,backendName:"webgl",kernelFunc:CJ};var wJ="return (x >= 0.0) ? x : (exp(x) - 1.0);",SJ=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,IJ=xe({opSnippet:wJ,packedOpSnippet:SJ}),oF={kernelName:gn,backendName:"webgl",kernelFunc:IJ};var vJ="return (b >= 0.0) ? a : a * (b + 1.0);",kJ=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,NJ=r=>{let{inputs:t,backend:e}=r,{dy:o,y:n}=t,s=A().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new jr(kJ,o.shape,n.shape):new Pr(vJ,o.shape,n.shape);return e.runWebGLProgram(s,[o,n],o.dtype)},nF={kernelName:Ya,backendName:"webgl",kernelFunc:NJ};var TJ=`
  return vec4(equal(a, b));
`,_J="return float(a == b);",$J=nt({opSnippet:_J,packedOpSnippet:TJ,dtype:"bool",cpuKernelImpl:MR}),sF={kernelName:yn,backendName:"webgl",kernelFunc:$J};var EJ=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${w.ERF_P};
  float a1 = ${w.ERF_A1};
  float a2 = ${w.ERF_A2};
  float a3 = ${w.ERF_A3};
  float a4 = ${w.ERF_A4};
  float a5 = ${w.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,RJ=xe({opSnippet:EJ}),aF={kernelName:xn,backendName:"webgl",kernelFunc:RJ};var DJ=Po+`
  return exp(x);
`,AJ=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Iv=xe({opSnippet:DJ,packedOpSnippet:AJ,cpuKernelImpl:LR,dtype:"float32"}),iF={kernelName:bn,backendName:"webgl",kernelFunc:Iv};function eg(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,a=s.shape.length,i=s.shape.slice(),p=n;return n<0&&(y.assert(-(a+1)<=n,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),p=a+n+1),i.splice(p,0,1),te({inputs:{x:s},backend:o,attrs:{shape:i}})}var uF={kernelName:na,backendName:"webgl",kernelFunc:eg};var pF="return exp(x) - 1.0;",FJ=xe({opSnippet:pF,packedOpSnippet:pF,cpuKernelImpl:BR}),cF={kernelName:Cn,backendName:"webgl",kernelFunc:FJ};var nm=class{constructor(t,e,o){this.variableNames=["real","imag"];let n=e[1];this.outputShape=e;let s=o?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=o?`${n}.0`:"1.0",i;if(t==="real")i="return real * expR - imag * expI;";else if(t==="imag")i="return real * expI + imag * expR;";else throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${a};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}};function tg(r,t,e){let o=e.texData.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],a=n/s,i=te({inputs:{x:r},backend:e,attrs:{shape:[a,s]}}),p=i.shape,u=new nm("real",p,t),c=new nm("imag",p,t),l=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:p},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:p}],m=e.runWebGLProgram(u,l,"float32"),d=e.runWebGLProgram(c,l,"float32"),f=Or({inputs:{real:m,imag:d},backend:e});e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(d);let h=te({inputs:{x:f},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),h}function PJ(r){let{inputs:t,backend:e}=r,{input:o}=t;return tg(o,!1,e)}var lF={kernelName:Wi,backendName:"webgl",kernelFunc:PJ};var rg=class{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}};function Si(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||y.inferDtype(n),s==="string"){let a=y.getArrayFromDType(s,y.sizeFromShape(o));return a.fill(n),t.makeTensorInfo(o,s,a)}else{let a=new rg(o,n),i=[[n]];return t.runWebGLProgram(a,[],s,i)}}var mF={kernelName:sa,backendName:"webgl",kernelFunc:Si};var og=class{constructor(t){this.variableNames=["Image"],this.outputShape=[];let e=t[2];this.outputShape=t,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${e} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${e}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var dF={kernelName:wn,backendName:"webgl",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new og(e.shape);return o.runWebGLProgram(n,[e],e.dtype)}};var fF="return floor(x);",OJ=xe({opSnippet:fF,packedOpSnippet:fF,cpuKernelImpl:zR}),hF={kernelName:Sn,backendName:"webgl",kernelFunc:OJ};var MJ=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,LJ=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,BJ=nt({opSnippet:MJ,packedOpSnippet:LJ,dtype:"int32"}),gF={kernelName:In,backendName:"webgl",kernelFunc:BJ};var ng=class{constructor(t){this.variableNames=["A"];let e=vt(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${e.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}};var sg=class{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let e=vt(),[o,n]=t;this.outputShape=t,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${e.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${e.output} = result;
      }
    `}};var xF={kernelName:Mu,backendName:"webgl",kernelFunc:zJ},Xc,vv=A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function zJ(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o,a=typeof HTMLVideoElement!="undefined"&&n instanceof HTMLVideoElement,i=typeof HTMLImageElement!="undefined"&&n instanceof HTMLImageElement,[p,u]=a?[n.videoWidth,n.videoHeight]:[n.width,n.height],c=[u,p],l=[u,p,s];if(i||a){let h=A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(Xc==null||h!==vv)&&(vv=h,Xc=document.createElement("canvas").getContext("2d",{willReadFrequently:vv})),Xc.canvas.width=p,Xc.canvas.height=u,Xc.drawImage(n,0,0,p,u),n=Xc.canvas}let m=e.makeTensorInfo(c,"int32");e.texData.get(m.dataId).usage=dr.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(m.dataId),n);let d=A().getBool("WEBGL_PACK")?new sg(l):new ng(l),f=e.runWebGLProgram(d,[m],"int32");return e.disposeData(m.dataId),f}function VJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=t,{strides:p,pad:u,dataFormat:c,dilations:l,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=o,h=w.convertConv2DDataFormat(c),g=w.computeConv2DInfo(n.shape,s.shape,p,l,u,m,!1,h),x,b=[],C=a!=null,S=i!=null,k=d==="leakyrelu",_=()=>{let R=[n,s],D=(P,O)=>{if(O==="NCHW"&&P.shape.length===1&&P.shape[0]!==1){let M=te({inputs:{x:P},backend:e,attrs:{shape:[P.shape[0],1,1]}});return b.push(M),M}return P};if(C&&R.push(D(a,c)),S&&R.push(D(i,c)),k){let P=e.makeTensorInfo([],"float32",y.createScalarValue(f,"float32"));R.push(P),b.push(P)}return R};if(g.filterHeight===1&&g.filterWidth===1&&g.dilationHeight===1&&g.dilationWidth===1&&g.strideHeight===1&&g.strideWidth===1&&(g.padInfo.type==="SAME"||g.padInfo.type==="VALID"))x=zh({x:n,filter:s,convInfo:g,backend:e,bias:a,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else if(g.strideWidth<=2&&h==="channelsLast"&&A().getBool("WEBGL_EXP_CONV")){let R=d?Ci(d,!0):null,D=new Kc(g,C,R,S,k),P=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],O=_();x=e.runWebGLProgram(D,O,"float32",P)}else if(A().getBool("WEBGL_CONV_IM2COL"))x=Vh({x:n,filter:s,convInfo:g,backend:e,bias:a,activation:d,preluActivationWeights:i,leakyreluAlpha:f});else{let R=d?Ci(d,!1):null,D=new Hc(g,C,R,S,k),P=_();x=e.runWebGLProgram(D,P,"float32")}let E=te({inputs:{x},backend:e,attrs:{shape:g.outShape}});return b.push(x),b.forEach(R=>e.disposeIntermediateTensorInfo(R)),E}var yF={kernelName:vo,backendName:"webgl",kernelFunc:VJ};function WJ(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=t,{strides:p,pad:u,dilations:c,dimRoundingMode:l,activation:m,leakyreluAlpha:d}=o,f=[],h=c;h==null&&(h=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(p,h),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${h}'`);let g=w.computeConv2DInfo(n.shape,s.shape,p,h,u,l,!0),x=A().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels===1,b=m?Ci(m,x):null,C=[n,s],S=a!=null,k=i!=null,_=m==="leakyrelu";if(S&&C.push(a),k&&C.push(i),_){let P=e.makeTensorInfo([],"float32",y.createScalarValue(d,"float32"));C.push(P),f.push(P)}let E;x?E=new jc(g,S,b,k,_):E=new qc(g,S,b,k,_);let R=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],D=e.runWebGLProgram(E,C,"float32",R);return f.forEach(P=>e.disposeIntermediateTensorInfo(P)),D}var bF={kernelName:ko,backendName:"webgl",kernelFunc:WJ};var ag=class{constructor(t,e,o,n){this.sliceDim=t,this.strides=e,this.paramsShape=n,this.variableNames=["x","indices"],this.outputShape=o;let s=Re(o.length),a=`
    int index;`;for(let i=0;i<this.sliceDim;i++)a+=`
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`;this.userCode=`
         void main() {
          ${s} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${a}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}};function UJ(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,a=s[s.length-1],i=y.sizeFromShape(o.shape),[p,u,c,l]=w.prepareAndValidate(o,n),m=te({inputs:{x:n},backend:e,attrs:{shape:[u,a]}}),d=te({inputs:{x:o},backend:e,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let x=e.readSync(n.dataId),b=e.bufferSync(o),C=VR(x,b,o.dtype,u,a,c,l,o.shape,i);return e.makeTensorInfo(p,o.dtype,C.values)}let f=new ag(a,l,[u,c],o.shape),h=e.runWebGLProgram(f,[d,m],d.dtype),g=te({inputs:{x:h},backend:e,attrs:{shape:p}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),g}var CF={kernelName:kn,backendName:"webgl",kernelFunc:UJ};var ig=class{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;let o=Re(this.rank),n=GJ(t,2);this.userCode=`
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `}};function GJ(r,t){let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r.length;n++)n===2?o.push("index"):o.push(`${e[n]}`);return o.join()}function kv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:a,batchDims:i}=o,p=y.parseAxisParam(a,n.shape)[0];if(A().get("DEBUG")){let b=e.readSync(s.dataId),C=n.shape[p];for(let S=0;S<b.length;++S){let k=b[S];y.assert(k<=C-1&&k>=0,()=>`GatherV2: the index value ${k} is not in [0, ${C-1}]`)}}let u=w.segment_util.collectGatherOpShapeInfo(n,s,p,i),c=y.sizeFromShape(s.shape),l=[],m=te({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=te({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});l.push(m),l.push(d);let f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])||n.dtype==="string"){let b=e.bufferSync(d),C=e.bufferSync(m),S=WR(C,b,f);return l.forEach(k=>e.disposeIntermediateTensorInfo(k)),e.makeTensorInfo(u.outputShape,S.dtype,S.values)}let h=new ig(m.shape,f),g=e.runWebGLProgram(h,[m,d],m.dtype);l.push(g);let x=te({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return l.forEach(b=>e.disposeIntermediateTensorInfo(b)),x}var wF={kernelName:aa,backendName:"webgl",kernelFunc:kv};var HJ="return float(a > b);",KJ=`
  return vec4(greaterThan(a, b));
`,qJ=nt({opSnippet:HJ,packedOpSnippet:KJ,cpuKernelImpl:UR,dtype:"bool"}),SF={kernelName:Nn,backendName:"webgl",kernelFunc:qJ};var jJ="return float(a >= b);",XJ=`
  return vec4(greaterThanEqual(a, b));
`,YJ=nt({opSnippet:jJ,packedOpSnippet:XJ,dtype:"bool",cpuKernelImpl:GR}),IF={kernelName:Tn,backendName:"webgl",kernelFunc:YJ};function QJ(r){let{inputs:t,backend:e}=r,{input:o}=t;return tg(o,!0,e)}var vF={kernelName:Ui,backendName:"webgl",kernelFunc:QJ};var ZJ="return float(!isnan(x) && !isinf(x));",JJ=xe({opSnippet:ZJ,dtype:"bool"}),kF={kernelName:_n,backendName:"webgl",kernelFunc:JJ};var eee="return float(isinf(x));",tee=xe({opSnippet:eee,dtype:"bool"}),NF={kernelName:$n,backendName:"webgl",kernelFunc:tee};var ree="return float(isnan(x));",oee=xe({opSnippet:ree,dtype:"bool"}),TF={kernelName:En,backendName:"webgl",kernelFunc:oee};var nee="return float(a < b);",see=`
  return vec4(lessThan(a, b));
`,aee=nt({opSnippet:nee,packedOpSnippet:see,cpuKernelImpl:HR,dtype:"bool"}),_F={kernelName:Dn,backendName:"webgl",kernelFunc:aee};var iee="return float(a <= b);",uee=`
  return vec4(lessThanEqual(a, b));
`,pee=nt({opSnippet:iee,packedOpSnippet:uee,cpuKernelImpl:KR,dtype:"bool"}),$F={kernelName:An,backendName:"webgl",kernelFunc:pee};function cee(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,a=qR(o,n,s);return t.makeTensorInfo([a.length],"float32",a)}var EF={kernelName:Fn,backendName:"webgl",kernelFunc:cee};var lee=Po+`
  return x < 0.0 ? 0./0. : log(x);
`,mee=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,dee=xe({opSnippet:lee,packedOpSnippet:mee,cpuKernelImpl:jR}),RF={kernelName:Pn,backendName:"webgl",kernelFunc:dee};var fee=Po+`
  return log(1.0 + x);
`,hee=xe({opSnippet:fee}),DF={kernelName:On,backendName:"webgl",kernelFunc:hee};var gee="return float(a >= 1.0 && b >= 1.0);",xee=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,yee=nt({opSnippet:gee,packedOpSnippet:xee,dtype:"bool"}),AF={kernelName:Mn,backendName:"webgl",kernelFunc:yee};var bee="return float(!(x >= 1.0));",Cee=xe({opSnippet:bee}),FF={kernelName:Ln,backendName:"webgl",kernelFunc:Cee};var wee="return float(a >= 1.0 || b >= 1.0);",See=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,Iee=nt({opSnippet:wee,packedOpSnippet:See,dtype:"bool"}),PF={kernelName:Bn,backendName:"webgl",kernelFunc:Iee};var ug=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[];let a=e,i=t[3]-1;this.outputShape=t;let p,u=`float(${o}) + float(${n}) * sum`;s===.5?p=`inversesqrt(${u})`:s===1?p=`1.0/(${u})`:p=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${a}; j <= ${a}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${p};
        setOutput(val);
      }
    `}};var pg=class{constructor(t,e,o,n,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let a=e,i=t[3]-1;this.outputShape=t;let p,u=`float(${o}) + float(${n}) * sum`;s===.5?p=`inversesqrt(${u})`:s===1?p=`1.0/(${u})`:p=`exp(log(${u}) * float(-${s}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${a};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${a}; j <= ${a}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${p};
        setOutput(result);
      }
    `}};var vee=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:a,alpha:i,beta:p}=o,u=A().getBool("WEBGL_PACK_NORMALIZATION")?new pg(n.shape,s,a,i,p):new ug(n.shape,s,a,i,p);return e.runWebGLProgram(u,[n],n.dtype)},OF={kernelName:zn,backendName:"webgl",kernelFunc:vee};var cg=class{constructor(t,e,o,n,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=o,this.alpha=n,this.beta=s,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${e})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${e} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}};var kee=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:a}=t,{depthRadius:i,bias:p,alpha:u,beta:c}=o,l=new cg(n.shape,i,p,u,c);return e.runWebGLProgram(l,[n,s,a],n.dtype)},MF={kernelName:Qa,backendName:"webgl",kernelFunc:kee};function LF(r,t,e,o){let n=y.sizeFromShape(t),a=y.sizeFromShape(r.shape)/n,i=te({inputs:{x:r},attrs:{shape:[a,n]},backend:o}),p=Yr(i,r.dtype,"max",o),u=te({inputs:{x:p},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(i),o.disposeIntermediateTensorInfo(p),u}function Nv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:a}=o,i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=p,c=w.getAxesPermutation(u,i),l=c!=null,m=e.shouldExecuteOnCPU([n]),d=n;if(l){if(m){let C=e.texData.get(d.dataId).values,S=new Array(i);for(let E=0;E<S.length;E++)S[E]=n.shape[c[E]];let k=Np(C,n.shape,n.dtype,c,S);d=e.makeTensorInfo(S,n.dtype);let _=e.texData.get(d.dataId);_.values=k}else d=Su(n,c,e);u=w.getInnerMostAxes(u.length,i)}w.assertAxesAreInnerMostDims("max",u,i);let[f,h]=w.computeOutAndReduceShapes(d.shape,u),g=f;a&&(g=w.expandShapeToKeepDim(f,p));let x;if(m){let C=e.texData.get(d.dataId).values,S=XR(C,y.sizeFromShape(h),g,n.dtype);x=e.makeTensorInfo(g,n.dtype);let k=e.texData.get(x.dataId);k.values=S}else x=LF(d,h,g,e);return l&&e.disposeIntermediateTensorInfo(d),x}var BF={kernelName:Vn,backendName:"webgl",kernelFunc:Nv};var Nee=Wc+`
  return max(a, b);
`,Tee=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Xr+`
  return result;
`,_ee=nt({opSnippet:Nee,packedOpSnippet:Tee,cpuKernelImpl:YR}),zF={kernelName:Wn,backendName:"webgl",kernelFunc:_ee};function $ee(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;Vs(n,"maxPool");let{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1;y.assert(w.eitherStridesOrDilationsAreOne(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,a,u,i,p);if(c.filterWidth===1&&c.filterHeight===1&&y.arraysEqual(c.inShape,c.outShape))return At({inputs:{x:n},backend:e});let l=new Us(c,"max",!1);return e.runWebGLProgram(l,[n],n.dtype)}var VF={kernelName:Un,backendName:"webgl",kernelFunc:$ee};function Eee(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dataFormat:p,dimRoundingMode:u}=o,c=[1,1,1],l=w.computePool3DInfo(n.shape,s,a,c,i,u,p),m=new Iu(l,"max",!1);return e.runWebGLProgram(m,[n],n.dtype)}var WF={kernelName:ia,backendName:"webgl",kernelFunc:Eee};var lg=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideHeight,o=t.strideWidth,n=t.dilationHeight,s=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=s-1-t.padInfo.top,p=a-1-t.padInfo.left,u=s*a-1;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${e}.0;

          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${a}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${a} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}},mg=class{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;let e=t.strideDepth,o=t.strideHeight,n=t.strideWidth,s=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,p=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=p-1-t.padInfo.front,m=u-1-t.padInfo.top,d=c-1-t.padInfo.left,f=p*u*c-1;this.userCode=`
      const ivec3 pads = ivec3(${l}, ${m}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${e}.0;

          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${a}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}};function Ree(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,a=s,{filterSize:i,strides:p,pad:u,dimRoundingMode:c}=o,l=[1,1,1],m=w.computePool3DInfo(a.shape,i,p,l,u,c),d=new Iu(m,"max",!0),f=e.runWebGLProgram(d,[a],a.dtype),h=new mg(m),g=e.runWebGLProgram(h,[n,f],a.dtype);return e.disposeIntermediateTensorInfo(f),g}var UF={kernelName:Ki,backendName:"webgl",kernelFunc:Ree};function Dee(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:a}=t,i=s;Vs([s,a],"maxPoolGrad");let{filterSize:p,strides:u,pad:c,dimRoundingMode:l}=o,m=w.computePool2DInfo(i.shape,p,u,1,c,l),d=!0,f=new Us(m,"max",d),h=e.runWebGLProgram(f,[i],i.dtype),g=new lg(m),x=e.runWebGLProgram(g,[n,h],i.dtype);return e.disposeIntermediateTensorInfo(h),x}var GF={kernelName:Hi,backendName:"webgl",kernelFunc:Dee};function HF(r,t,e,o){let n=new Us(e,"max",!1),s=o.runWebGLProgram(n,[r],"float32");n=new Us(e,"max",!0,!0,t);let a=o.runWebGLProgram(n,[r],"float32");return[s,a]}var KF={kernelName:ua,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{filterSize:n,strides:s,pad:a,includeBatchInIndex:i}=t,p=e;y.assert(o.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);let u=[1,1];y.assert(w.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=w.computePool2DInfo(o.shape,n,s,u,a),[l,m]=HF(o,i,c,p);return[l,m]}};function qF(r,t,e,o){let n=y.sizeFromShape(t),a=y.sizeFromShape(r.shape)/n,i=te({inputs:{x:r},attrs:{shape:[a,n]},backend:o}),p=Yr(i,"float32","mean",o),u=te({inputs:{x:p},attrs:{shape:e},backend:o});return o.disposeIntermediateTensorInfo(i),o.disposeIntermediateTensorInfo(p),u}var jF={kernelName:Gn,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{keepDims:n,axis:s}=t,a=e,i=o.shape.length,p=y.parseAxisParam(s,o.shape),u=p,c=w.getAxesPermutation(u,i),l=c!=null,m=a.shouldExecuteOnCPU([o]),d=[],f=o;if(l){if(m){let S=a.texData.get(f.dataId).values,k=new Array(i);for(let R=0;R<k.length;R++)k[R]=o.shape[c[R]];let _=Np(S,o.shape,o.dtype,c,k);f=a.makeTensorInfo(k,o.dtype);let E=a.texData.get(f.dataId);E.values=_}else f=Su(o,c,a);d.push(f),u=w.getInnerMostAxes(u.length,i)}w.assertAxesAreInnerMostDims("sum",u,i);let[h,g]=w.computeOutAndReduceShapes(f.shape,u),x=h;n&&(x=w.expandShapeToKeepDim(h,p));let b=qF(f,g,x,a);for(let C of d)a.disposeIntermediateTensorInfo(C);return b}};function Aee(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o,i=n.shape.length,p=y.parseAxisParam(s,n.shape),u=p,c=w.getAxesPermutation(u,i),l=n;c!=null&&(l=Ct({inputs:{x:n},backend:e,attrs:{perm:c}}),u=w.getInnerMostAxes(u.length,n.shape.length)),w.assertAxesAreInnerMostDims("min",u,i);let[m,d]=w.computeOutAndReduceShapes(l.shape,u),f=y.sizeFromShape(d),h=te({inputs:{x:l},backend:e,attrs:{shape:[-1,f]}}),g=Yr(h,h.dtype,"min",e),x;if(a){let b=w.expandShapeToKeepDim(m,p);x=te({inputs:{x:g},backend:e,attrs:{shape:b}})}else x=te({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(g),c!=null&&e.disposeIntermediateTensorInfo(l),x}var XF={kernelName:Hn,backendName:"webgl",kernelFunc:Aee};var Fee=Wc+`
  return min(a, b);
`,Pee=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Xr+`
  return result;
`,Oee=nt({opSnippet:Fee,packedOpSnippet:Pee,cpuKernelImpl:QR}),YF={kernelName:Kn,backendName:"webgl",kernelFunc:Oee};var dg=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=e.map((c,l)=>c[0]+t[l]+c[1]);let n=t.length,s=Re(n),a=e.map(c=>c[0]).join(","),i=e.map((c,l)=>c[0]+t[l]).join(","),p=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n),u=o==="reflect"?0:1;if(n===1){this.userCode=`
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${p}));
      }
    `}};var fg=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,h)=>f[0]+t[h]+f[1]);let n=t.length,s=Re(n),a=e.map(f=>f[0]).join(","),i=e.map((f,h)=>f[0]+t[h]).join(","),p=Dt("rc",n),u=Dt("source",n),c=`${p[n-1]} < ${this.outputShape[n-1]}`,l=n===1?"source":`vec2(${u.slice(-2).join()})`,m=o==="reflect"?0:1,d="";if(n===1){let f=`
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;d=`
        ${s} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${u.join()}), ${l});
        ${p[n-1]} += 1;
        if(${c}) {
          ${f}
          result[1] = getChannel(getX(${u.join()}), ${l});
        }
      `}else{let f=`
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;d=`
        ${s} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${u.join()}), ${l});
        ${p[n-1]} += 1;
        if(${c}) {
          ${f}
          result[1] = getChannel(getX(${u.join()}), ${l});
        }
        rc = outputLoc;
        ${p[n-2]} += 1;
        if(${p[n-2]} < ${this.outputShape[n-2]}) {
          ${f}
          result[2] = getChannel(getX(${u.join()}), ${l});
          ${p[n-1]} += 1;
          if(${c}) {
            ${f}
            result[3] = getChannel(getX(${u.join()}), ${l});
          }
        }
      `}this.userCode=`
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `}};var Mee=({inputs:r,backend:t,attrs:e})=>{let{x:o}=r,{paddings:n,mode:s}=e,a=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new fg(o.shape,n,s):new dg(o.shape,n,s);return t.runWebGLProgram(a,[o],o.dtype)},QF={kernelName:qn,backendName:"webgl",kernelFunc:Mee};var Lee=`if (b == 0.0) return NAN;
  return mod(a, b);`,Bee=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+Xr+`
  return result;
`,zee=nt({opSnippet:Lee,packedOpSnippet:Bee}),ZF={kernelName:jn,backendName:"webgl",kernelFunc:zee};var hg=class{constructor(t,e,o){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,o],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${e-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${e-1}));
      }
    `}};var Vee=`
if (a == b) {
  return 1.0;
};
return a / b;`,Wee=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,Tv=nt({opSnippet:Vee,packedOpSnippet:Wee,checkOutOfBounds:!0}),JF={kernelName:hn,backendName:"webgl",kernelFunc:Tv};var e3="return a - b;",_v=nt({opSnippet:e3,packedOpSnippet:e3,supportsComplex:!0,cpuKernelImpl:yD}),t3={kernelName:_s,backendName:"webgl",kernelFunc:_v};function $v(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,a=y.parseAxisParam([s],n.shape),i=Nv({inputs:{x:n},backend:e,attrs:{reductionIndices:a,keepDims:!1}}),p=w.expandShapeToKeepDim(i.shape,a),u=te({inputs:{x:i},backend:e,attrs:{shape:p}}),c=_v({inputs:{a:n,b:u},backend:e}),l=Iv({inputs:{x:c},backend:e}),m=Tp({inputs:{x:l},backend:e,attrs:{axis:a,keepDims:!1}}),d=te({inputs:{x:m},backend:e,attrs:{shape:p}}),f=Tv({inputs:{a:l,b:d},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(d),f}var r3={kernelName:vs,backendName:"webgl",kernelFunc:$v};function Uee(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:a,normalized:i}=o,p=i?n:$v({inputs:{logits:n},backend:e,attrs:{dim:n.shape.length-1}}),u=p.shape[0],c=p.shape[1],l=new hg(u,c,s),m=[[a]],d=e.runWebGLProgram(l,[p],"int32",m);return i||e.disposeIntermediateTensorInfo(p),d}var o3={kernelName:Xn,backendName:"webgl",kernelFunc:Uee};var Gee=Ut+`
  return -x;
`,Hee=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;function Kee(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.texData.get(o.dataId),[a,i]=JR(s.values,o.shape,o.dtype);return e.makeTensorInfo(i,o.dtype,a)}let n;return A().getBool("WEBGL_PACK_UNARY_OPERATIONS")?n=new Fr(o.shape,Hee):n=new or(o.shape,Gee),e.runWebGLProgram(n,[o],o.dtype)}var n3={kernelName:pa,backendName:"webgl",kernelFunc:Kee};var qee=Wt.nonMaxSuppressionV3Impl;function jee(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:l}=qee(u,c,a,i,p);return e.makeTensorInfo([l.length],"int32",new Int32Array(l))}var s3={kernelName:Zn,backendName:"webgl",kernelFunc:jee};var Xee=Wt.nonMaxSuppressionV4Impl;function Yee(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,padToMaxOutputSize:u}=o,c=e.readSync(n.dataId),l=e.readSync(s.dataId),{selectedIndices:m,validOutputs:d}=Xee(c,l,a,i,p,u);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([],"int32",new Int32Array([d]))]}var a3={kernelName:Za,backendName:"webgl",kernelFunc:Yee};var Qee=Wt.nonMaxSuppressionV5Impl;function Zee(r){w.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,softNmsSigma:u}=o,c=e.readSync(n.dataId),l=e.readSync(s.dataId),m=a,d=i,f=p,h=u,{selectedIndices:g,selectedScores:x}=Qee(c,l,m,d,f,h);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var i3={kernelName:Jn,backendName:"webgl",kernelFunc:Zee};var gg=class{constructor(t,e,o,n){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `}};var Jee=r=>{let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:a,onValue:i,offValue:p}=o,u=y.sizeFromShape(n.shape),c=new gg(u,a,i,p),l=te({inputs:{x:n},backend:e,attrs:{shape:[u]}}),m=e.runWebGLProgram(c,[l],s);e.disposeIntermediateTensorInfo(l);let d=[...n.shape,a],f=te({inputs:{x:m},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(m),f},u3={kernelName:es,backendName:"webgl",kernelFunc:Jee};function sm(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=wi({inputs:{input:o},backend:e}),s=sm({inputs:{x:n},backend:e}),a=$p({inputs:{input:o},backend:e}),i=sm({inputs:{x:a},backend:e}),p=Or({inputs:{real:s,imag:i},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),p}else return Si({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var p3={kernelName:Sa,backendName:"webgl",kernelFunc:sm};function c3(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=wi({inputs:{input:o},backend:e}),s=c3({inputs:{x:n},backend:e}),a=$p({inputs:{input:o},backend:e}),i=sm({inputs:{x:a},backend:e}),p=Or({inputs:{real:s,imag:i},backend:e});return e.disposeIntermediateTensorInfo(n),e.disposeIntermediateTensorInfo(s),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),p}else return Si({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var l3={kernelName:ca,backendName:"webgl",kernelFunc:c3};function ete(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return eg({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,a=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let i=[],p=t.map(c=>{let l=eg({inputs:{input:c},backend:e,attrs:{dim:n}});return i.push(l),l}),u=Sv({inputs:p,backend:e,attrs:{axis:n}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}var m3={kernelName:la,backendName:"webgl",kernelFunc:ete};var xg=class{constructor(t,e,o){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);let n=t.length,s=Re(n),a=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),p=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,n);if(n===1){this.userCode=`
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${p}));
        }
      }
    `}};var yg=class{constructor(t,e,o){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((h,g)=>h[0]+t[g]+h[1]);let n=t.length,s=Re(n),a=e.map(h=>h[0]).join(","),i=e.map((h,g)=>h[0]+t[g]).join(","),p=Dt("rc",n),u=Dt("source",n),c=`${p[n-1]} < ${this.outputShape[n-1]}`,l=n===1?"source":`vec2(${u.slice(-2).join()})`,m=[`${s} rc = outputLoc;`,`${p[n-1]} += 1;
       if(${c}) {
      `,n===1?"":`}
       rc = outputLoc;
       ${p[n-2]} += 1;
       if(${p[n-2]} < ${this.outputShape[n-2]}) {`,n===1?"":`  ${p[n-1]} += 1;
         if(${c}) {`],d=n===1?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",f="";for(let h=0,g=n===1?2:4;h<g;h++)f+=`
        ${m[h]}
        if (${d}) {
          result[${h}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${h}] = getChannel(getX(${u.join()}), ${l});
        }
      `;f+=n===1?"} ":"}}",this.userCode=`
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `}};var Ev=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:a}=o;if(y.sizeFromShape(n.shape)===0){let u=s.map((c,l)=>c[0]+n.shape[l]+c[1]);return Si({backend:e,attrs:{shape:u,value:a,dtype:n.dtype}})}let i=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new yg(n.shape,s,a):new xg(n.shape,s,a),p=[[a]];return e.runWebGLProgram(i,[n],n.dtype,p)},d3={kernelName:ts,backendName:"webgl",kernelFunc:Ev};var tte=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,rte=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+Xr+`
  return result;
`,ote=nt({opSnippet:tte,packedOpSnippet:rte}),f3={kernelName:rs,backendName:"webgl",kernelFunc:ote};function nte(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o,i=n.shape.length,p=[],u=y.parseAxisParam(s,n.shape),c=u,l=w.getAxesPermutation(c,i),m=n;l!=null&&(m=Ct({inputs:{x:n},backend:e,attrs:{perm:l}}),c=w.getInnerMostAxes(c.length,i),p.push(m)),w.assertAxesAreInnerMostDims("prod",c,i);let d;if(e.shouldExecuteOnCPU([m])){let f=e.texData.get(m.dataId).values,{outVals:h,outShape:g,outDtype:x}=tD(m.shape,m.dtype,f,c);d=e.makeTensorInfo(g,x,h)}else{let[f,h]=w.computeOutAndReduceShapes(m.shape,c),g=y.sizeFromShape(h),x=te({inputs:{x:m},backend:e,attrs:{shape:[-1,g]}}),b=ni(n.dtype),C=Yr(x,b,"prod",e);d=te({inputs:{x:C},backend:e,attrs:{shape:f}}),p.push(x),p.push(C)}if(a){p.push(d);let f=w.expandShapeToKeepDim(d.shape,u);d=te({inputs:{x:d},backend:e,attrs:{shape:f}})}return p.forEach(f=>e.disposeIntermediateTensorInfo(f)),d}var h3={kernelName:ns,backendName:"webgl",kernelFunc:nte};function ste(r){let{inputs:t,backend:e,attrs:o}=r,{paramsNestedSplits:n,paramsDenseValues:s,indices:a}=t,{outputRaggedRank:i}=o,p=n.map(x=>e.readSync(x.dataId)),u=n.map(x=>x.shape),c=e.readSync(s.dataId),l=e.readSync(a.dataId),[m,d,f]=rD(p,u,c,s.shape,s.dtype,l,a.shape,i),h=m.map(x=>e.makeTensorInfo([x.length],"int32",x)),g=e.makeTensorInfo(f,s.dtype,d);return h.concat([g])}var g3={kernelName:Qp,backendName:"webgl",kernelFunc:ste};function ate(r){let{inputs:t,backend:e}=r,{starts:o,limits:n,deltas:s}=t,a=e.readSync(o.dataId),i=e.readSync(n.dataId),p=e.readSync(s.dataId),[u,c]=oD(a,o.shape,o.dtype,i,n.shape,p,s.shape),l=e.makeTensorInfo([u.length],"int32",u),m=e.makeTensorInfo([c.length],o.dtype,c);return[l,m]}var x3={kernelName:Zp,backendName:"webgl",kernelFunc:ate};function ite(r){let{inputs:t,backend:e,attrs:o}=r,{shape:n,values:s,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:p}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),l=e.readSync(a.dataId),m=i.map(g=>e.readSync(g.dataId)),d=i.map(g=>g.shape),[f,h]=nD(u,n.shape,c,s.shape,s.dtype,l,a.shape,m,d,p);return e.makeTensorInfo(f,s.dtype,h)}var y3={kernelName:Jp,backendName:"webgl",kernelFunc:ite};var Rv=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:a}=e,i=sD(o,n,s,a);return t.makeTensorInfo([i.length],a,i)},b3={kernelName:ma,backendName:"webgl",kernelFunc:Rv};var ute="return 1.0 / x;",pte=xe({opSnippet:ute}),C3={kernelName:ss,backendName:"webgl",kernelFunc:pte};var cte=Ut+`
  return (x < 0.0) ? 0.0 : x;
`,lte=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,mte=xe({opSnippet:cte,packedOpSnippet:lte}),w3={kernelName:as,backendName:"webgl",kernelFunc:mte};var dte=Ut+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,fte=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,hte=xe({opSnippet:dte,packedOpSnippet:fte}),S3={kernelName:ps,backendName:"webgl",kernelFunc:hte};var bg=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[a,i,p,u]=t;this.outputShape=[a,e,o,u];let c=[n&&e>1?i-1:i,n&&o>1?p-1:p],l=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":m="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/l[0]},
          ${c[1]/l[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${p}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}};var Cg=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[a,i,p,u]=t;this.outputShape=[a,e,o,u];let c=[n&&e>1?i-1:i,n&&o>1?p-1:p],l=[n&&e>1?e-1:e,n&&o>1?o-1:o],m;s?m="(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":m="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/l[0]},
          ${c[1]/l[1]},
          ${c[1]/l[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${p}.0,
                                     ${p}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}};function gte(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,c=A().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Cg(n.shape,p,u,s,a):new bg(n.shape,p,u,s,a);return e.runWebGLProgram(c,[n],"float32")}var I3={kernelName:us,backendName:"webgl",kernelFunc:gte};var wg=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,a,i]=t,p=[o&&a>1?n-1:n,o&&i>1?s-1:s],u=[o&&a>1?a-1:a,o&&i>1?i-1:i],c=p[0]/u[0],l=p[1]/u[1],m=1/c,d=1/l,f=Math.ceil(m)*2+2,h=Math.ceil(d)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${l});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${d});

        const int winHeight = int(${f});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function xte(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:a}=o,i=new wg(s.shape,n.shape,a);return e.runWebGLProgram(i,[s],s.dtype)}var v3={kernelName:ei,backendName:"webgl",kernelFunc:xte};var Sg=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.outputShape=[];let[a,i,p,u]=t;this.outputShape=[a,e,o,u];let c=[n&&e>1?i-1:i,n&&o>1?p-1:p],l=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",d;s?d="max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":d="vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0]/l[0]},
          ${c[1]/l[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${p}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}};var Ig=class{constructor(t,e,o,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[a,i,p,u]=t;this.outputShape=[a,e,o,u];let c=[n&&e>1?i-1:i,n&&o>1?p-1:p],l=[n&&e>1?e-1:e,n&&o>1?o-1:o],m=n?"0.5":"0.0",d;s?d="max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":d="vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0]/l[0]},
          ${c[1]/l[1]},
          ${c[1]/l[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${p}.0,
                                     ${p}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u-1};
        bool hasNextRow = coords.z < ${o-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}};function yte(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,c=A().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Ig(n.shape,p,u,s,a):new Sg(n.shape,p,u,s,a);return e.runWebGLProgram(c,[n],n.dtype)}var k3={kernelName:is,backendName:"webgl",kernelFunc:yte};var vg=class{constructor(t,e,o){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;let[,n,s]=e,[,a,i]=t,p=[o&&a>1?n-1:n,o&&i>1?s-1:s],u=[o&&a>1?a-1:a,o&&i>1?i-1:i],c=p[0]/u[0],l=p[1]/u[1],m=1/c,d=1/l,f=Math.ceil(m)*2+2,h=Math.ceil(d)*2+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${l});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${d});

        const int winHeight = int(${f});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${p[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${p[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}};function bte(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:a}=o,i=new vg(s.shape,n.shape,a);return e.runWebGLProgram(i,[s],s.dtype)}var N3={kernelName:Ja,backendName:"webgl",kernelFunc:bte};var kg=class{constructor(t,e){this.variableNames=["x"];let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);if(this.outputShape=t,o===1){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${t[0]} - coord - 1));
        }
      `;return}let n=i=>e.indexOf(i)!==-1&&t[i]!==1?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`,s=t.map((i,p)=>n(p)).join(","),a=Re(o);this.userCode=`
      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `}};var Ng=class{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let o=t.length;if(o>4)throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);this.outputShape=t;let n=Dt("rc",o),s=`${n[o-1]} + 1 < ${this.outputShape[o-1]}`,a=`${n[o-2]} + 1 < ${this.outputShape[o-2]}`,i=Re(o);o===1?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${t[0]} - rc - 1),
            ${t[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),
                ${t[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${p(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${a}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${l(n.slice())};
            }
          }
          setOutput(result);
        }
    `;function p(f){return m(f)}function u(f){return f[o-1]="("+f[o-1]+" + 1)",m(f)}function c(f){return f[o-2]="("+f[o-2]+" + 1)",m(f)}function l(f){return f[o-1]="("+f[o-1]+" + 1)",f[o-2]="("+f[o-2]+" + 1)",m(f)}function m(f){let h=t.map((b,C)=>d(C,f)),g=h.join(","),x=h.slice(-2).join(",");return`getChannel(getX(${g}), vec2(${x}))`}function d(f,h){return e.indexOf(f)!==-1&&t[f]!==1?`${t[f]} - ${h[f]} - 1`:`${h[f]}`}}};function Cte(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o,a=n.shape.length,i=y.parseAxisParam(s,n.shape);if(a===0)return At({inputs:{x:n},backend:e});let p=A().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ng(n.shape,i):new kg(n.shape,i);return e.runWebGLProgram(p,[n],n.dtype)}var T3={kernelName:cs,backendName:"webgl",kernelFunc:Cte};var Tg=class{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let o=t[1],n=t[2];this.outputShape=t;let s="";typeof e=="number"?s=`float outputValue = ${e.toFixed(2)};`:s=`
        vec3 fill = vec3(${e.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}};var _3={kernelName:As,backendName:"webgl",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:a}=t,i=e,p=new Tg(o.shape,s),[u,c]=w.getImageCenter(a,o.shape[1],o.shape[2]),l=[[u,c,Math.sin(n),Math.cos(n)]];return i.runWebGLProgram(p,[o],o.dtype,l)}};var wte=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,Ste=xe({opSnippet:wte}),$3={kernelName:ls,backendName:"webgl",kernelFunc:Ste};var Ite="return inversesqrt(x);",vte=xe({opSnippet:Ite,cpuKernelImpl:aD}),E3={kernelName:ms,backendName:"webgl",kernelFunc:vte};var vu=class{constructor(t,e,o,n,s,a,i=!0,p=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;let u=Re(s.length),c=Re(a.length),l="";o===1?l="i":o===2&&(l="i, j");let m=`getIndices(${l})`,d="";n===1?d="i":n===2&&(d="i, coords[1]");let f=`getUpdates(${d})`,h="";p&&(h="coords[0], coords[1]");let g=`getDefaultValue(${h})`,x=e>1?"strides[j]":"strides";this.userCode=`
        ${u} strides = ${u}(${s});

        void main() {
          ${c} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${t}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${e}; j++) {
              int index = round(${m});
              flattenedIndex += index * ${x};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${f};
              found = true;
            }
          }
          setOutput(mix(${g}, sum, float(found)));
        }
      `}};var _g=class{constructor(t,e,o,n,s,a,i=!0,p=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;let u=Re(s.length),c=Re(a.length),l="";o===1?l="i":o===2&&(l="i, j");let m=`getIndices(${l})`,d="";n===1?d="i":n===2&&(d="i, coords[1]");let f=`getUpdates(${d})`,h="";p&&(h="coords[0], coords[1]");let g=`getDefaultValue(${h})`,x=e>1?"strides[j]":"strides",b=e>1?"strides[j + 1]":"strides";this.userCode=`
        ${u} strides = ${u}(${s});

        void main() {
          ${c} coords = getOutputCoords();
          vec4 sum = vec4(0.);
          vec4 found = vec4(0.);
          for (int i = 0; i < ${t}; i+=2) {
            ivec2 flattenedIndex = ivec2(0);
            for (int j = 0; j < ${e}; j+=2) {
              ivec4 index = round(${m});
              flattenedIndex += index.xz * ${x};
              if (j + 1 < ${e}) {
                flattenedIndex += index.yw * ${b};
              }
            }
            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||
                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {
              vec4 updVals = ${f};
              if (flattenedIndex[0] == coords[0]) {
                sum.xy += updVals.xy;
                found.xy = vec2(1.);
              } else if (flattenedIndex[0] == coords[0] + 1) {
                sum.zw += updVals.xy;
                found.zw = vec2(1.);
              }
              if (flattenedIndex[1] == coords[0]) {
                sum.xy += updVals.zw;
                found.xy = vec2(1.);
              } else if (flattenedIndex[1] == coords[0] + 1) {
                sum.zw += updVals.zw;
                found.zw = vec2(1.);
              }
            }
          }
          setOutput(mix(${g}, sum, found));
        }
      `}};function kte(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:a}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:c,outputSize:l}=w.calculateShapes(s,n,a),m=[l/u,u];if(l===0)return e.makeTensorInfo(a,n.dtype);let d=te({inputs:{x:n},backend:e,attrs:{shape:[p,i]}}),f=te({inputs:{x:s},backend:e,attrs:{shape:[p,u]}}),h=e.makeTensorInfo([],"float32",new Float32Array([0])),g;A().getBool("WEBGL_PACK")?g=new _g(p,i,d.shape.length,f.shape.length,c,m):g=new vu(p,i,d.shape.length,f.shape.length,c,m);let x=e.runWebGLProgram(g,[f,d,h],f.dtype),b=te({inputs:{x},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(h),b}var R3={kernelName:ds,backendName:"webgl",kernelFunc:kte};var $g=class{constructor(t,e,o,n){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,o];let s="while (left < right) {",a=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,i=A().getNumber("WEBGL_VERSION")===2?s:a,p=n==="left"?"<":"<=";this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${p} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}};function Nte(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:a}=o,i=new $g(n.shape[0],n.shape[1],s.shape[1],a),p=[[n.shape[1]]];return e.runWebGLProgram(i,[n,s],"int32",p)}var D3={kernelName:hs,backendName:"webgl",kernelFunc:Nte};var Eg=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.outputShape=e;let n,s;if(o>4)throw Error(`Where for rank ${o} is not yet supported`);if(o===1)s="resRC",n="resRC";else{let i=["resRC.x","resRC.y","resRC.z","resRC.w"],p=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&p.push(`${i[c]}`);n=p.join(),s=u.join()}let a=Re(o);this.userCode=`
      void main() {
        ${a} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `}};function Tte(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,a=new Eg(o.shape.length,n.shape,n.shape.length);return e.runWebGLProgram(a,[o,n,s],dt(n.dtype,s.dtype))}var A3={kernelName:fa,backendName:"webgl",kernelFunc:Tte};var _te=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${w.SELU_SCALEALPHA};
  float scale = ${w.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,$te=xe({opSnippet:_te}),F3={kernelName:gs,backendName:"webgl",kernelFunc:$te};var Ete=Po+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,Rte=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Dte=xe({opSnippet:Ete,packedOpSnippet:Rte,cpuKernelImpl:uD}),P3={kernelName:Cs,backendName:"webgl",kernelFunc:Dte};var Ate=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,Fte=xe({opSnippet:Ate}),O3={kernelName:bs,backendName:"webgl",kernelFunc:Fte};var Pte=Po+`
  return sin(x);
`,Ote=`
  vec4 result = sin(x);
  bvec4 isNaN = isnan(x);
  ${Xr}
  return result;
`,Mte=xe({opSnippet:Pte,packedOpSnippet:Ote}),M3={kernelName:xs,backendName:"webgl",kernelFunc:Mte};var Lte=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,Bte=xe({opSnippet:Lte}),L3={kernelName:ys,backendName:"webgl",kernelFunc:Bte};var zte=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,Vte=xe({opSnippet:zte}),B3={kernelName:ws,backendName:"webgl",kernelFunc:Vte};var Wte=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:a}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let i=s.reduce((x,b)=>x*b),p=[[0,0]];p.push(...a);for(let x=1+s.length;x<n.shape.length;++x)p.push([0,0]);let u=[],c=Ev({inputs:{x:n},backend:e,attrs:{paddings:p,constantValue:0}}),l=w.getReshaped(c.shape,s,i,!1),m=w.getPermuted(l.length,s.length,!1),d=w.getReshapedPermuted(c.shape,s,i,!1),f=te({inputs:{x:c},backend:e,attrs:{shape:l}}),h=Ct({inputs:{x:f},backend:e,attrs:{perm:m}}),g=te({inputs:{x:h},backend:e,attrs:{shape:d}});return u.push(c),u.push(f),u.push(h),u.forEach(x=>e.disposeIntermediateTensorInfo(x)),g},z3={kernelName:ga,backendName:"webgl",kernelFunc:Wte};function Ute(r){let{inputs:t,backend:e}=r,{indices:o,values:n,denseShape:s,defaultValue:a}=t;if(s.shape.length!==1)throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(o.shape.length!==2)throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);if(n.shape.length!==1)throw new Error(`Values must be a vector, saw:
         ${n.shape}`);if(a.shape.length!==0)throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);let i=e.readSync(o.dataId),p=e.readSync(n.dataId),u=e.readSync(s.dataId),c=e.readSync(a.dataId)[0],[l,m,d,f,h]=cD(i,o.shape,o.dtype,p,n.dtype,u,c);return[e.makeTensorInfo(m,o.dtype,l),e.makeTensorInfo([m[0]],n.dtype,d),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(g=>Number(g)))),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}var V3={kernelName:ji,backendName:"webgl",kernelFunc:Ute};function Gte(r){let{inputs:t,backend:e}=r,{inputIndices:o,inputShape:n,newShape:s}=t;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let a=Array.from(e.readSync(n.dataId)),i=e.readSync(o.dataId),p=Array.from(e.readSync(s.dataId)),[u,c,l]=lD(i,o.shape,o.dtype,a,p);return[e.makeTensorInfo(c,o.dtype,u),e.makeTensorInfo([l.length],s.dtype,new Int32Array(l))]}var W3={kernelName:ti,backendName:"webgl",kernelFunc:Gte};function Hte(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let a=e.readSync(o.dataId),i=e.readSync(n.dataId),p=e.readSync(s.dataId),[u,c]=lh(a,o.shape,o.dtype,i,p,!0);return e.makeTensorInfo(c,o.dtype,u)}var U3={kernelName:ya,backendName:"webgl",kernelFunc:Hte};function Kte(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;if(o.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(n.shape.length!==1)throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);if(s.shape.length!==1)throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let a=e.readSync(o.dataId),i=e.readSync(n.dataId),p=e.readSync(s.dataId),[u,c]=lh(a,o.shape,o.dtype,i,p);return e.makeTensorInfo(c,o.dtype,u)}var G3={kernelName:ba,backendName:"webgl",kernelFunc:Kte};function qte(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:a}=t,{outputShape:i}=o,{sliceRank:p,numUpdates:u,sliceSize:c,strides:l,outputSize:m}=w.calculateShapes(s,n,i),d=!1;if(s.dtype==="string"){let x=e.bufferSync(n),b=e.bufferSync(s),C=y.decodeString(e.readSync(a.dataId)[0]),S=iD(x,b,i,m,c,u,p,l,C,d);return e.makeTensorInfo(i,S.dtype,S.values)}let f=new vu(u,p,n.shape.length,s.shape.length,l,[m,1],d),h=e.runWebGLProgram(f,[s,n,a],s.dtype),g=te({inputs:{x:h},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(h),g}var H3={kernelName:ks,backendName:"webgl",kernelFunc:qte};function jte(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:a}=o,i=y.parseAxisParam(a,n.shape)[0],p=w.prepareSplitSize(n,s,i),u=n.shape.length,c=new Array(u).fill(0),l=n.shape.slice();return p.map(m=>{let d=[...l];d[i]=m;let f=Gs({inputs:{x:n},backend:e,attrs:{begin:c,size:d}});return c[i]+=m,f})}var K3={kernelName:xa,backendName:"webgl",kernelFunc:jte};var q3="return sqrt(x);",Xte=xe({opSnippet:q3,packedOpSnippet:q3,cpuKernelImpl:mD}),j3={kernelName:Ss,backendName:"webgl",kernelFunc:Xte};var Yte="return x * x;",Qte=xe({opSnippet:Yte}),X3={kernelName:Xi,backendName:"webgl",kernelFunc:Qte};var Y3="return (a - b) * (a - b);",Zte=nt({opSnippet:Y3,packedOpSnippet:Y3}),Q3={kernelName:Ns,backendName:"webgl",kernelFunc:Zte};function Jte(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t;if(n.dtype!=="string")throw new Error("Input must be of datatype string");let s=e.readSync(n.dataId),a=w.fromUint8ToStringArray(s),i=dD(a,"string",o);return e.makeTensorInfo(n.shape,"string",i)}var Z3={kernelName:Ou,backendName:"webgl",kernelFunc:Jte};function ere({inputs:r,attrs:t,backend:e}){let{x:o}=r,n=Ut+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,s=new or(o.shape,n);return e.runWebGLProgram(s,[o],o.dtype)}var J3={kernelName:So,backendName:"webgl",kernelFunc:ere};var Rg=class{constructor(t,e,o){this.variableNames=["x"],this.outputShape=o;let n=o.length,s=Re(o.length),a=Re(o.length),i="";if(n===1)i="coords * strides + begin";else{let p=0;i=o.map((u,c)=>(p++,o.length===1?`coords * strides[${c}] + begin[${c}]`:`coords[${p-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`
      ${s} begin = ${s}(${t});
      ${s} strides = ${s}(${e});

      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `}};function tre(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:a,strides:i,beginMask:p,endMask:u,ellipsisMask:c,newAxisMask:l,shrinkAxisMask:m}=o,{finalShapeSparse:d,finalShape:f,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:C,strides:S}=ct.sliceInfo(n.shape,s,a,i,p,u,c,l,m),k;if(h)k=te({inputs:{x:n},backend:e,attrs:{shape:f}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let E=ct.computeOutShape(b,C,S),R=Gs({inputs:{x:n},backend:e,attrs:{begin:b,size:E}});k=te({inputs:{x:R},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(R)}else if(e.shouldExecuteOnCPU([n])){let R=e.readSync(n.dataId),D=me(n.shape,n.dtype,R),P=fD(d,D,S,b);k=e.makeTensorInfo(f,n.dtype,P.values)}else{let R=new Rg(b,S,d);k=e.runWebGLProgram(R,[n],n.dtype)}let _=te({inputs:{x:k},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(k),_}var eP={kernelName:Ts,backendName:"webgl",kernelFunc:tre};function rre(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:a,rightPad:i,padWidth:p,preserveShortSequences:u}=o,{data:c,dataSplits:l}=t,m=e.readSync(c.dataId),d=e.readSync(l.dataId),[f,h]=hD(m,d,n,s,a,i,p,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(l.shape,"int32",h)]}var tP={kernelName:Ca,backendName:"webgl",kernelFunc:rre};function ore(r){let{inputs:t,backend:e,attrs:o}=r,{skipEmpty:n}=o,{input:s,delimiter:a}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(s.shape.length!==1)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(a.shape.length!==0)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);let i=e.readSync(s.dataId),p=e.readSync(a.dataId)[0],[u,c,l]=gD(i,p,n),m=c.length;return[e.makeTensorInfo([m,2],"int32",u),e.makeTensorInfo([m],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(l))]}var rP={kernelName:Yi,backendName:"webgl",kernelFunc:ore};function nre(r){let{inputs:t,backend:e,attrs:o}=r,{numBuckets:n}=o,{input:s}=t;if(s.dtype!=="string")throw new Error("Input must be of datatype string");if(n<=0)throw new Error("Number of buckets must be at least 1");let a=e.readSync(s.dataId),i=xD(a,n);return e.makeTensorInfo(s.shape,"int32",i)}var oP={kernelName:Qi,backendName:"webgl",kernelFunc:nre};var sre="return tan(x);",are=xe({opSnippet:sre}),nP={kernelName:$s,backendName:"webgl",kernelFunc:are};var ire=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,ure=xe({opSnippet:ire}),sP={kernelName:Es,backendName:"webgl",kernelFunc:ure};function pre(r){let{inputs:t,backend:e,attrs:o}=r,{tensor:n,indices:s,updates:a}=t,{}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:c,outputSize:l}=w.calculateShapes(a,s,n.shape),m=[l/u,u];if(l===0)return e.makeTensorInfo(n.shape,s.dtype);let d=te({inputs:{x:s},backend:e,attrs:{shape:[p,i]}}),f=te({inputs:{x:a},backend:e,attrs:{shape:[p,u]}}),h=te({inputs:{x:n},backend:e,attrs:{shape:m}}),g=new vu(p,i,d.shape.length,f.shape.length,c,m,!1,!0),x=e.runWebGLProgram(g,[f,d,h],h.dtype),b=te({inputs:{x},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(x),b}var aP={kernelName:fs,backendName:"webgl",kernelFunc:pre};var Dg=class{constructor(t,e){this.variableNames=["A"];let o=new Array(t.length);for(let a=0;a<o.length;a++)o[a]=t[a]*e[a];this.outputShape=o,this.rank=o.length;let n=Re(this.rank),s=cre(t);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `}};function cre(r){let t=r.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(t===1)return`imod(resRC, ${r[0]})`;let e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],o=[];for(let n=0;n<r.length;n++)o.push(`imod(${e[n]}, ${r[n]})`);return o.join()}function Dv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(n.dtype==="string"||n.shape.length>5){let p=e.readSync(n.dataId),u=n.dtype==="string"?p.map(m=>y.decodeString(m)):p,c=me(n.shape,n.dtype,u),l=bD(c,s);return e.makeTensorInfo(l.shape,l.dtype,l.values)}let a=new Dg(n.shape,s);return e.runWebGLProgram(a,[n],n.dtype)}var iP={kernelName:po,backendName:"webgl",kernelFunc:Dv};var Ag=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}},Fg=class{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}};function Rp(r,t){t!==null&&r.disposeIntermediateTensorInfo(t)}function uP(r){let t=1;for(;t<r;)t*=2;return t}function lre(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:a}=o,i=A().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),p=A().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=n.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([n])||c<i||s>p){let P=e.readSync(n.dataId),[O,M]=CD(P,u,n.dtype,s,a);return[e.makeTensorInfo(O.shape,O.dtype,O.values),e.makeTensorInfo(M.shape,M.dtype,M.values)]}if(s===0)return u[u.length-1]=0,[e.makeTensorInfo(u,n.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(c===1)return[n,Si({attrs:{shape:u,dtype:"int32",value:0},backend:e})];let l=e.texData.get(n.dataId),m=l!==null&&l.isPacked,d=m?e.unpackTensor(n):n,h=y.sizeFromShape(u)/c,g=te({inputs:{x:d},attrs:{shape:[h,c]},backend:e});m&&Rp(e,d);let x=uP(s),b=uP(c),C=null,S=()=>C===null?[g,g]:[g,C],k=(P,O,M)=>{let L=S(),B=new Ag(M),U=[[c],[C===null?1:0],[Number.NEGATIVE_INFINITY],[P],[O]],j=C;C=e.runWebGLProgram(B,L,"int32",U),Rp(e,j)};for(let P=1;P<x;P*=2){let O=P*2;for(let M=P;M>=1;M/=2)k(O,M,[h,b])}for(let P=b;P>x;P/=2){let O=S(),M=new Fg([h,P/2]),B=[[c],[C===null?1:0],[x]],z=C;C=e.runWebGLProgram(M,O,"int32",B),Rp(e,z);let U=x/2,j=U*2;for(let q=U;q>=1;q/=2)k(j,q,C.shape)}let _=C;C=Gs({inputs:{x:C},backend:e,attrs:{begin:0,size:[h,s]}}),Rp(e,_);let E=kv({inputs:{x:g,indices:C},backend:e,attrs:{axis:1,batchDims:1}});Rp(e,g);let R=u.slice(0,-1);R.push(s),_=C,C=te({inputs:{x:C},attrs:{shape:R},backend:e}),Rp(e,_);let D=E;return E=te({inputs:{x:E},attrs:{shape:R},backend:e}),Rp(e,D),[E,C]}var pP={kernelName:Rs,backendName:"webgl",kernelFunc:lre};var Pg=class{constructor(t,e,o,n,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;let i=o==="nearest"?1:2,p;switch(n){case"constant":p=1;break;case"reflect":p=2;break;case"wrap":p=3;break;case"nearest":p=4;break;default:p=1;break}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${p} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${p} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${p} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${e}));
                float mapY = mapCoord(inY, float(${t}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}};function mre(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:a,fillMode:i,fillValue:p,outputShape:u}=o,[c,l,m,d]=n.shape,[f,h]=u!=null?u:[l,m],g=[c,f,h,d],x=new Pg(l,m,a,i,p,g);return e.runWebGLProgram(x,[n,s],"float32")}var cP={kernelName:Ds,backendName:"webgl",kernelFunc:mre};function dre(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t;Vs(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let a=o.readSync(s.dataId),{outputValues:i,outputShape:p,indices:u}=wD(a,n,s.shape,s.dtype);return[o.makeTensorInfo(p,s.dtype,i),o.makeTensorInfo([u.length],"int32",u)]}var lP={kernelName:Zi,backendName:"webgl",kernelFunc:dre};function fre(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let a=n,i=a.shape.length,p=n.shape[s],u=new Array(i-1),c=0;for(let h=0;h<i;h++)h!==s&&(u[c++]=a.shape[h]);let l=[],m=new Array(i).fill(0),d=a.shape.slice();d[s]=1;let f=new Array(p);for(let h=0;h<f.length;h++){m[s]=h;let g=Gs({inputs:{x:a},backend:e,attrs:{begin:m,size:d}}),x=te({inputs:{x:g},backend:e,attrs:{shape:u}});f[h]=x,l.push(g)}return l.forEach(h=>e.disposeIntermediateTensorInfo(h)),f}var mP={kernelName:wa,backendName:"webgl",kernelFunc:fre};var Og=class{constructor(t,e){this.variableNames=["x","segmentIds"];let o=t.windowSize,n=t.batchSize,s=t.inSize,a=t.numSegments,i=a*Math.ceil(s/o);this.outputShape=[n,i];let p="0.0",u="sumValue",c=Math.floor(o/4)*4,l=o%4,m=`
        sumValue += dot(values, segFilter);
    `,d="";s%o>0&&(d=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);let f="";s%o>0&&(f=`
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = ${p};

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${a})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${a})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${l===1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${l===2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${l===3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `}};function hre(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:a}=o,i=n.shape.length,p=[],u=0,c=w.getAxesPermutation([u],i),l=n;c!=null&&(l=Ct({inputs:{x:n},backend:e,attrs:{perm:c}}),p.push(l),u=w.getInnerMostAxes(1,i)[0]);let m=w.segment_util.computeOutShape(l.shape,u,a),d=y.sizeFromShape([l.shape[u]]),f=te({inputs:{x:l},backend:e,attrs:{shape:[-1,d]}});p.push(f);let h=ni(n.dtype),g=(S,k,_,E,R)=>{let D=S.shape[0],P=S.shape[1],O=w.segment_util.segOpComputeOptimalWindowSize(P,R),M={windowSize:O,inSize:P,batchSize:D,numSegments:R},L=new Og(M,k),B=e.compileAndRun(L,[S,_],E);if(p.push(B),B.shape[1]===R)return B;let z=Rv({backend:e,attrs:{start:0,stop:R,step:1,dtype:"float32"}}),U=Dv({inputs:{x:z},backend:e,attrs:{reps:[P/O]}});return p.push(z),p.push(U),g(B,k,U,E,R)},x=g(f,"unsortedSegmentSum",s,h,a),b=te({inputs:{x},backend:e,attrs:{shape:m}}),C=b;if(c!=null){p.push(b);let S=w.getUndoAxesPermutation(c);C=Ct({inputs:{x:C},backend:e,attrs:{perm:S}})}return p.forEach(S=>e.disposeIntermediateTensorInfo(S)),C}var dP={kernelName:Ji,backendName:"webgl",kernelFunc:hre};var gre=[XD,QD,ZD,JD,tA,rA,oA,nA,iA,uA,pA,cA,lA,mA,dA,fA,hA,gA,xA,yA,bA,wA,SA,IA,vA,_A,EA,RA,BD,AA,PA,OA,MA,LA,BA,zA,VA,WA,UA,GA,qA,jA,XA,YA,QA,ZA,JA,eF,tF,rF,oF,nF,sF,aF,iF,uF,cF,lF,mF,dF,hF,gF,xF,yF,bF,CF,wF,SF,IF,LD,vF,FA,kF,NF,TF,zD,_F,$F,EF,RF,DF,AF,FF,PF,OF,MF,BF,zF,VF,WF,UF,GF,KF,jF,XF,YF,QF,ZF,o3,UD,n3,s3,a3,i3,kA,u3,l3,m3,d3,f3,VD,h3,g3,x3,y3,b3,NA,JF,C3,w3,S3,HD,I3,v3,k3,N3,T3,_3,$3,E3,R3,D3,A3,F3,P3,O3,M3,L3,CA,r3,B3,z3,V3,W3,U3,G3,H3,K3,j3,X3,Q3,Z3,J3,eP,tP,rP,oP,t3,qD,nP,sP,aP,iP,pP,cP,jD,lP,mP,dP,p3];for(let r of gre)ri(r);var we;(function(r){r[r.float32=0]="float32",r[r.int32=1]="int32",r[r.bool=2]="bool",r[r.string=3]="string",r[r.complex64=4]="complex64"})(we||(we={}));var ku;(function(r){r[r.linear=0]="linear",r[r.relu=1]="relu",r[r.relu6=2]="relu6",r[r.prelu=3]="prelu",r[r.leakyrelu=4]="leakyrelu",r[r.sigmoid=5]="sigmoid",r[r.elu=6]="elu"})(ku||(ku={}));var fP;function xre(r){fP=r.wasm.cwrap(Io,null,["number","array","number","number","array","number","number","number","number","number","number","number","number"])}function yre(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:a,preluActivationWeights:i}=t;if(n.dtype!=="float32"||s.dtype!=="float32")throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");let{transposeA:p,transposeB:u,activation:c,leakyreluAlpha:l}=o,m=e.dataIdMap.get(n.dataId).id,d=e.dataIdMap.get(s.dataId).id,f=0;if(a!=null){let R=e.dataIdMap.get(a.dataId);if(R.shape.length!==1)throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${R.shape.length}.`);f=R.id}let h=i==null?0:e.dataIdMap.get(i.dataId).id,g=ku[c];if(g==null)throw new Error(`${c} activation not yet supported for FusedConv2D in the wasm backend.`);let x=p?n.shape[2]:n.shape[1],b=u?s.shape[1]:s.shape[2],C=Ir.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)),S=e.makeOutput([...C,x,b],n.dtype),k=e.dataIdMap.get(S.dataId).id,_=new Uint8Array(new Int32Array(n.shape).buffer),E=new Uint8Array(new Int32Array(s.shape).buffer);return fP(m,_,n.shape.length,d,E,s.shape.length,p,u,g,f,h,l||0,k),S}var hP={kernelName:Io,backendName:"wasm",setupFunc:xre,kernelFunc:yre};function he(r,t){let e;function o(s){e=s.wasm.cwrap(r,null,["number","number","number"])}function n(s){let{backend:a,inputs:{x:i}}=s,p=a.dataIdMap.get(i.dataId).id,u=a.makeOutput(i.shape,t||i.dtype),c=a.dataIdMap.get(u.dataId).id;return y.sizeFromShape(u.shape)===0||e(p,we[i.dtype],c),u}return{kernelName:r,backendName:"wasm",setupFunc:o,kernelFunc:n}}var gP=he(Xs);var xP=he(Wo);var yP=he(Uo);function Ue(r,t,e){let o;function n(a){o=a.wasm.cwrap(r,null,["number","array","number","number","array","number","number","number"])}function s(a){let{backend:i,inputs:p}=a,{a:u,b:c}=p,l=i.dataIdMap.get(u.dataId).id,m=i.dataIdMap.get(c.dataId).id,d=e!=null?e:u.dtype,f=w.assertAndGetBroadcastShape(u.shape,c.shape),h=i.makeOutput(f,d);if(y.sizeFromShape(f)===0)return h;let g=new Uint8Array(new Int32Array(u.shape).buffer),x=new Uint8Array(new Int32Array(c.shape).buffer),b=i.dataIdMap.get(h.dataId).id;return(()=>o(l,g,u.shape.length,m,x,c.shape.length,we[u.dtype],b))(),h}return{kernelName:r,backendName:"wasm",setupFunc:n,kernelFunc:s}}var bre=!0,bP=Ue(uo,bre);var CP;function Cre(r){CP=r.wasm.cwrap(Go,null,["array","number","number","number"])}function wre(r){let{inputs:t,backend:e}=r,o=e.makeOutput(t[0].shape,t[0].dtype);if(y.sizeFromShape(o.shape)===0)return o;let n=t.map(i=>e.dataIdMap.get(i.dataId).id),s=new Uint8Array(new Int32Array(n).buffer),a=e.dataIdMap.get(o.dataId).id;return CP(s,n.length,we[o.dtype],a),o}var wP={kernelName:Go,backendName:"wasm",setupFunc:Cre,kernelFunc:wre};function Dp(r){let{inputs:{x:t},backend:e}=r;if(t.dtype==="string")return ur(e.readSync(t.dataId),t.shape,t.dtype);let o=e.makeOutput(t.shape,t.dtype),n=e.typedArrayFromHeap(t);return e.typedArrayFromHeap(o).set(n),o}var SP={kernelName:wo,backendName:"wasm",kernelFunc:Dp};var IP;function Sre(r){IP=r.wasm.cwrap(co,null,["number","array","number","number","number","array","number"])}function go(r){let{inputs:t,backend:e,attrs:o}=r,[n,s]=vre(t.x.shape,o.perm),a=!0;for(let f=0;f<s.length;f++)s[f]!==f&&(a=!1);let i=Ire(t.x.shape,o.perm),p={dataId:t.x.dataId,shape:n,dtype:t.x.dtype};if(a){let f=Dp({inputs:t,backend:e});return f.shape=i,f}let u=e.makeOutput(i,p.dtype),c=e.dataIdMap.get(p.dataId).id,l=e.dataIdMap.get(u.dataId).id,m=new Uint8Array(new Int32Array(s).buffer),d=new Uint8Array(new Int32Array(p.shape).buffer);return IP(c,d,p.shape.length,we[p.dtype],l,m,s.length),u}function Ire(r,t){let e=new Array(r.length);for(let o=0;o<e.length;o++)e[o]=r[t[o]];return e}function vre(r,t){let e=[],o=[];for(let n=0;n<r.length;++n)r[n]!==1&&e.push(r[n]),r[t[n]]!==1&&o.push(t[n]);for(let n=0;n<o.length;++n){let s=-1;for(let a=0;a<o.length;++a)o[a]>=n&&(s===-1||o[s]>o[a])&&(s=a);o[s]=n}return[e,o]}var vP={kernelName:co,backendName:"wasm",kernelFunc:go,setupFunc:Sre};function _r(r,t,e){let o=r.shape,n=r.shape.length,s=y.parseAxisParam(t,o),a=s,i=w.getAxesPermutation(a,n),p=null,u=!1;if(i!=null){let c=new Array(n);for(let d=0;d<c.length;d++)c[d]=o[i[d]];a=w.getInnerMostAxes(a.length,n),p=go({inputs:{x:r},attrs:{perm:i},backend:e});let l=e.dataIdMap.get(r.dataId).id;e.dataIdMap.get(p.dataId).id!==l&&(u=!0)}return{transposed:p,originalAxes:s,axes:a,inputWasTransposed:u}}var kP;function kre(r){kP=r.wasm.cwrap(Ho,null,["number, number, number"])}function Nre(r){let{backend:t,inputs:e,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=e,p=t.dataIdMap.get(a.dataId).id,u=a,{transposed:c,axes:l,originalAxes:m,inputWasTransposed:d}=_r(a,n,t);if(d){let C=t.dataIdMap.get(c.dataId).id;u=c,p=C}let f=u.shape.length;w.assertAxesAreInnerMostDims("all",l,f);let[h,g]=w.computeOutAndReduceShapes(u.shape,l),x=y.sizeFromShape(g),b=t.makeOutput(h,a.dtype);if(y.sizeFromShape(u.shape)!==0){let C=t.dataIdMap.get(b.dataId).id;kP(p,x,C)}if(d&&t.disposeData(c.dataId),s){let C=w.expandShapeToKeepDim(b.shape,m);b.shape=C}return b}var NP={kernelName:Ho,backendName:"wasm",setupFunc:kre,kernelFunc:Nre};var TP;function Tre(r){TP=r.wasm.cwrap(Ko,null,["number, number, number"])}function _re(r){let{backend:t,inputs:e,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=e,p=t.dataIdMap.get(a.dataId).id,u=a,{transposed:c,axes:l,originalAxes:m,inputWasTransposed:d}=_r(a,n,t);if(d){let C=t.dataIdMap.get(c.dataId).id;u=c,p=C}let f=u.shape.length;w.assertAxesAreInnerMostDims("any",l,f);let[h,g]=w.computeOutAndReduceShapes(u.shape,l),x=y.sizeFromShape(g),b=t.makeOutput(h,a.dtype);if(y.sizeFromShape(u.shape)!==0){let C=t.dataIdMap.get(b.dataId).id;TP(p,x,C)}if(d&&t.disposeData(c.dataId),s){let C=w.expandShapeToKeepDim(b.shape,m);b.shape=C}return b}var _P={kernelName:Ko,backendName:"wasm",setupFunc:Tre,kernelFunc:_re};function Mg(r){let t;function e(n){t=n.wasm.cwrap(r,null,["number","number","number","number","number"])}function o(n){let{backend:s,inputs:a,attrs:i}=n,{axis:p}=i,{x:u}=a,c=s.dataIdMap.get(u.dataId).id,l=c,m=u,{transposed:d,axes:f,inputWasTransposed:h}=_r(u,p,s);if(h){let k=s.dataIdMap.get(d.dataId).id;k!==c&&(m=d,l=k)}let g=m.shape.slice(0,-1),x=s.makeOutput(g,"int32"),b=s.dataIdMap.get(x.dataId).id,C=y.sizeFromShape(x.shape),S=m.shape[f[0]];return t(l,we[m.dtype],C,S,b),h&&s.disposeData(d.dataId),x}return{kernelName:r,backendName:"wasm",setupFunc:e,kernelFunc:o}}var $P=Mg(Ys);var EP=Mg(Qs);var RP=he(qo);var DP=he(jo);var AP=he(Xo);var FP=Ue(Qo,!1);var PP=he(Yo);var OP;function $re(r){OP=r.wasm.cwrap(Zo,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Ere(r){let{inputs:t,attrs:e,backend:o}=r,n=t.x,s=o.dataIdMap.get(n.dataId).id,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=e,c=w.computePool2DInfo(n.shape,a,i,1,p,u),l=c.filterHeight,m=c.filterWidth,d=c.padInfo.top,f=c.padInfo.right,h=c.padInfo.bottom,g=c.padInfo.left,x=c.strideHeight,b=c.strideWidth,C=c.inChannels;if(c.dataFormat!=="channelsLast")throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);if(c.dilationWidth!==1||c.dilationHeight!==1)throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${c.dilationHeight}, ${c.dilationWidth}].`);let S=o.makeOutput(c.outShape,"float32"),k=o.dataIdMap.get(S.dataId).id;return OP(s,n.shape[0],n.shape[1],n.shape[2],l,m,d,f,h,g,x,b,C,k),S}var MP={kernelName:Zo,backendName:"wasm",setupFunc:$re,kernelFunc:Ere};var LP;function Rre(r){LP=r.wasm.cwrap("AvgPool3D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Dre(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o,c=w.computePool3DInfo(n.shape,s,a,1,i,p,u),l=e.makeOutput(c.outShape,n.dtype);return LP(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(l.dataId).id,c.batchSize,c.inChannels,c.inDepth,c.inHeight,c.inWidth,c.outDepth,c.outHeight,c.outWidth,c.strideDepth,c.strideHeight,c.strideWidth,c.dilationDepth,c.dilationHeight,c.dilationWidth,c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth,c.padInfo.front,c.padInfo.top,c.padInfo.left),l}var BP={kernelName:Zs,backendName:"wasm",setupFunc:Rre,kernelFunc:Dre};var zP;function Are(r){zP=r.wasm.cwrap("AvgPool3DGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Fre(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o,c=w.computePool3DInfo(s.shape,a,i,1,p,u),l=e.makeOutput(s.shape,s.dtype);return zP(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(l.dataId).id,c.batchSize,c.inChannels,c.inDepth,c.inHeight,c.inWidth,c.outDepth,c.outHeight,c.outWidth,c.strideDepth,c.strideHeight,c.strideWidth,c.dilationDepth,c.dilationHeight,c.dilationWidth,c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth,c.padInfo.front,c.padInfo.top,c.padInfo.left,c.filterDepth,c.filterHeight,c.filterWidth),l}var VP={kernelName:Ai,backendName:"wasm",setupFunc:Are,kernelFunc:Fre};var WP;function Pre(r){WP=r.wasm.cwrap("AvgPoolGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Ore(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:a,strides:i,pad:p}=o,u=w.computePool2DInfo(s.shape,a,i,1,p),c=e.makeOutput(s.shape,s.dtype);return WP(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(c.dataId).id,u.batchSize,u.inChannels,u.inHeight,u.inWidth,u.outHeight,u.outWidth,u.strideHeight,u.strideWidth,u.dilationHeight,u.dilationWidth,u.effectiveFilterHeight,u.effectiveFilterWidth,u.padInfo.top,u.padInfo.left,u.filterHeight,u.filterWidth),c}var UP={kernelName:Di,backendName:"wasm",setupFunc:Pre,kernelFunc:Ore};function Vt(r){let{inputs:t,attrs:e}=r,{x:o}=t,{shape:n}=e,s=y.sizeFromShape(o.shape),a=y.inferFromImplicitShape(n,s);return y.assert(s===y.sizeFromShape(a),()=>`new shape: ${a}, old shape: ${o.shape}. New shape and old shape must have the same number of elements.`),r.backend.incRef(o.dataId),{dataId:o.dataId,shape:a,dtype:o.dtype}}var GP={kernelName:da,backendName:"wasm",kernelFunc:Vt};var HP;function Mre(r){HP=r.wasm.cwrap(Jo,null,["number","array","number","number","array","number","number","number","number"])}function Lre(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:a,transposeB:i}=o;if(n.dtype!=="float32"||s.dtype!=="float32")throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");let p=n.shape.length,u=s.shape.length,c=a?n.shape[p-2]:n.shape[p-1],l=i?s.shape[u-1]:s.shape[u-2],m=a?n.shape[p-1]:n.shape[p-2],d=i?s.shape[u-2]:s.shape[u-1],f=n.shape.slice(0,-2),h=s.shape.slice(0,-2),g=y.sizeFromShape(f),x=y.sizeFromShape(h),C=Ir.assertAndGetBroadcastShape(n.shape.slice(0,-2),s.shape.slice(0,-2)).concat([m,d]);y.assert(c===l,()=>`Error in matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);let S=a?[g,c,m]:[g,m,c],k=i?[x,d,l]:[x,l,d],_=Vt({inputs:{x:n},backend:e,attrs:{shape:S}}),E=Vt({inputs:{x:s},backend:e,attrs:{shape:k}}),R=e.dataIdMap.get(_.dataId).id,D=e.dataIdMap.get(E.dataId).id,P=a?_.shape[2]:_.shape[1],O=i?E.shape[1]:E.shape[2],M=Math.max(g,x),L=e.makeOutput([M,P,O],_.dtype),B=e.dataIdMap.get(L.dataId).id,z=new Uint8Array(new Int32Array(_.shape).buffer),U=new Uint8Array(new Int32Array(E.shape).buffer);return HP(R,z,_.shape.length,D,U,E.shape.length,a,i,B),e.disposeData(_.dataId),e.disposeData(E.dataId),L.shape=C,L}var KP={kernelName:Jo,backendName:"wasm",setupFunc:Mre,kernelFunc:Lre};function Oo(r){let{inputs:{x:t},attrs:{begin:e,size:o},backend:n}=r,[s,a]=ct.parseSliceParams(t,e,o),i=ct.isSliceContinous(t.shape,s,a),p=n.readSync(t.dataId),u=n.makeOutput(a,t.dtype),c=y.computeStrides(t.shape),l=n.dataIdMap.get(u.dataId);if(i){let f=ct.computeFlatOffset(s,c);return t.dtype==="string"?l.stringBytes=p.slice(f,f+y.sizeFromShape(a)):n.typedArrayFromHeap(u).set(p.subarray(f,f+y.sizeFromShape(a))),u}if(t.dtype==="string"){let f=hp(p,s,a,t.shape,t.dtype);return l.stringBytes=f,u}let m=n.typedArrayFromHeap(u),d=t.shape.length;if(d===2)Bre(p,c[0],m,s,a);else if(d===3)zre(p,c[0],c[1],m,s,a);else if(d===4)Vre(p,c[0],c[1],c[2],m,s,a);else{let f=hp(p,s,a,t.shape,t.dtype);m.set(f)}return u}function Bre(r,t,e,o,n){let s=0,a=o[0],i=o[1],p=a+n[0];for(let u=a;u<p;u++){let c=u*t+i;e.set(r.subarray(c,c+n[1]),s),s+=n[1]}}function zre(r,t,e,o,n,s){let a=0,i=n[0],p=n[1],u=n[2],c=i+s[0],l=p+s[1];for(let m=i;m<c;m++)for(let d=p;d<l;d++){let f=m*t+d*e+u;o.set(r.subarray(f,f+s[2]),a),a+=s[2]}}function Vre(r,t,e,o,n,s,a){let i=0,p=s[0],u=s[1],c=s[2],l=p+a[0],m=u+a[1],d=c+a[2],f=s[3];for(let h=p;h<l;h++)for(let g=u;g<m;g++)for(let x=c;x<d;x++){let b=h*t+g*e+x*o+f;n.set(r.subarray(b,b+a[3]),i),i+=a[3]}}var qP={kernelName:ha,backendName:"wasm",kernelFunc:Oo};function Wre(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:a}=o,i=s.reduce((x,b)=>x*b),p=w.getReshaped(n.shape,s,i),u=w.getPermuted(p.length,s.length),c=w.getReshapedPermuted(n.shape,s,i),l=w.getSliceBeginCoords(a,s.length),m=w.getSliceSize(c,a,s.length),d=Vt({inputs:{x:n},backend:e,attrs:{shape:p}}),f=go({inputs:{x:d},backend:e,attrs:{perm:u}}),h=Vt({inputs:{x:f},backend:e,attrs:{shape:c}}),g=Oo({inputs:{x:h},backend:e,attrs:{begin:l,size:m}});return e.disposeData(d.dataId),e.disposeData(f.dataId),e.disposeData(h.dataId),g}var jP={kernelName:Js,backendName:"wasm",kernelFunc:Wre};var XP;function Ure(r){XP=r.wasm.cwrap(en,null,["number","number","boolean","number","number","number"])}function Gre(r){let{backend:t,inputs:e,attrs:o}=r,{x:n,weights:s}=e,{size:a}=o,i=s.shape.reduce((l,m)=>l*m,1)!==0,p=n.shape.length===1?[a]:[n.shape[0],a],u=t.makeOutput(p,s.dtype);function c(l){return t.dataIdMap.get(l.dataId).id}return XP(c(n),a,i,c(s),we[s.dtype],c(u)),u}var YP={kernelName:en,backendName:"wasm",setupFunc:Ure,kernelFunc:Gre};var Hre=!0,QP=Ue(ja,Hre);function Kre(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t,s=e.typedArrayFromHeap(o),a=e.typedArrayFromHeap(n),i=w.assertAndGetBroadcastShape(Array.from(s),Array.from(a));return e.makeOutput([i.length],"int32",void 0,new Int32Array(i))}var ZP={kernelName:ea,backendName:"wasm",kernelFunc:Kre};function Mr(r){let{inputs:{x:t},attrs:{dtype:e},backend:o}=r,n=o.makeOutput(t.shape,e),s=o.typedArrayFromHeap(t);return o.typedArrayFromHeap(n).set(s),n}var JP={kernelName:bo,backendName:"wasm",kernelFunc:Mr};var eO=he(tn);var tO;function qre(r){tO=r.wasm.cwrap(Co,null,["number","number","number","number"])}function jre(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:a}=o,i=e.dataIdMap.get(n.dataId).id,p=e.makeOutput(n.shape,n.dtype),u=e.dataIdMap.get(p.dataId).id;return tO(i,s,a,u),p}var rO={kernelName:Co,backendName:"wasm",setupFunc:qre,kernelFunc:jre};function Av(r){let{inputs:t,backend:e}=r,o=y.parseAxisParam(r.attrs.axis,t[0].shape)[0],n=t.map(d=>d.shape);w.assertParamsConsistent(n,o);let s=w.computeOutShape(t.map(d=>d.shape),o),a=t.filter(d=>y.sizeFromShape(d.shape)>0);if(a.length===1)return Dp({inputs:{x:a[0]},backend:e});let i=e.makeOutput(s,t[0].dtype);if(y.sizeFromShape(s)===0)return i;if(a[0].dtype==="string"){let d=a.map(C=>{let k=[-1,y.sizeFromShape(C.shape.slice(o))];return Vt({inputs:{x:C},backend:e,attrs:{shape:k}})}),f=d.map(C=>({vals:e.readSync(C.dataId),shape:C.shape}));s=w.computeOutShape(d.map(C=>C.shape),1);let h=d[0].shape[0]===1,g=mp(f,s,t[0].dtype,h),x=w.computeOutShape(a.map(C=>C.shape),o);i.shape=x;let b=e.dataIdMap.get(i.dataId);return b.stringBytes=w.fromStringArrayToUint8(g),d.forEach(C=>e.disposeData(C.dataId)),i}let p=y.sizeFromShape(a[0].shape.slice(0,o)),u=0,c=a.map(d=>{let f=y.sizeFromShape(d.shape.slice(o));return u+=f,f}),l=a.map(d=>e.typedArrayFromHeap(d)),m=e.typedArrayFromHeap(i);for(let d=0;d<p;d++){let f=d*u;for(let h=0;h<l.length;h++){let g=c[h],x=d*g,b=l[h].subarray(x,x+g);m.set(b,f),f+=g}}return i}var oO={kernelName:ta,backendName:"wasm",kernelFunc:Av};var nO;function Xre(r){nO=r.wasm.cwrap(rn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Yre(r){let{inputs:t,attrs:e,backend:o}=r,{x:n,filter:s}=t,a=o.dataIdMap.get(n.dataId).id,i=o.dataIdMap.get(s.dataId).id,{strides:p,dilations:u,pad:c,dimRoundingMode:l,dataFormat:m}=e,d=w.convertConv2DDataFormat(m),f=w.computeConv2DInfo(n.shape,s.shape,p,u,c,l,!1,d),h=f.filterHeight,g=f.filterWidth,x=f.padInfo.top,b=f.padInfo.right,C=f.padInfo.bottom,S=f.padInfo.left,k=f.dilationHeight,_=f.dilationWidth,E=f.strideHeight,R=f.strideWidth,D=f.inChannels,P=f.outChannels,O=f.padInfo.type==="SAME"?1:0;if(f.dataFormat!=="channelsLast")throw new Error(`wasm backend Conv2D does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);let M=o.makeOutput(f.outShape,"float32"),L=o.dataIdMap.get(M.dataId).id;return nO(a,n.shape[0],n.shape[1],n.shape[2],i,h,g,x,b,C,S,O,k,_,E,R,D,P,L),M}var sO={kernelName:rn,backendName:"wasm",setupFunc:Xre,kernelFunc:Yre};var aO;function Qre(r){aO=r.wasm.cwrap(on,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Zre(r){let{backend:t,inputs:e,attrs:o}=r,{dy:n,filter:s}=e,{strides:a,pad:i,dataFormat:p,dimRoundingMode:u,inputShape:c}=o,l=1,m=w.convertConv2DDataFormat(p),d=w.computeConv2DInfo(c,s.shape,a,l,i,u,!1,m),{batchSize:f,filterHeight:h,filterWidth:g,inChannels:x,inHeight:b,inWidth:C,outChannels:S,outHeight:k,outWidth:_,strideHeight:E,strideWidth:R}=d,D=h-1-d.padInfo.top,P=g-1-d.padInfo.left,O=d.dataFormat==="channelsLast",M=y.computeStrides(d.inShape),L=y.computeStrides(n.shape),[B,z,U]=y.computeStrides(s.shape),j=M[0],q=O?M[1]:M[2],Y=O?M[2]:1,J=O?1:M[1],re=L[0],ne=O?L[1]:L[2],ee=O?L[2]:1,oe=O?1:L[1],ie=t.makeOutput(d.inShape,"float32"),le=t.dataIdMap.get(ie.dataId).id,be=t.dataIdMap.get(n.dataId).id,_e=t.dataIdMap.get(s.dataId).id;return aO(be,_e,f,h,g,b,C,x,k,_,S,E,R,D,P,B,z,U,j,q,Y,J,re,ne,ee,oe,le),ie}var iO={kernelName:on,backendName:"wasm",setupFunc:Qre,kernelFunc:Zre};var uO;function Jre(r){uO=r.wasm.cwrap(nn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function eoe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p}=o;if(n.dtype!=="float32")throw new Error(`Tensor x must have dtype float32, got ${n.dtype}`);if(s.dtype!=="float32")throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);let u=w.computeConv3DInfo(n.shape,s.shape,a,p,i),c=e.makeOutput(u.outShape,n.dtype);return uO(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(c.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),c}var pO={kernelName:nn,backendName:"wasm",setupFunc:Jre,kernelFunc:eoe};var cO;function toe(r){cO=r.wasm.cwrap(Xa,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function roe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,pad:i,filterShape:p}=o;if(n.dtype!=="float32")throw new Error(`Tensor dy must have dtype float32, got ${n.dtype}`);if(s.dtype!=="float32")throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);let u=w.computeConv3DInfo(n.shape,p,a,1,i),c=e.makeOutput(u.filterShape,s.dtype);return cO(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(c.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),c}var lO={kernelName:Xa,backendName:"wasm",setupFunc:toe,kernelFunc:roe};var mO;function ooe(r){mO=r.wasm.cwrap(sn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function noe(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{pad:a,strides:i,inputShape:p}=o;if(n.dtype!=="float32")throw new Error(`Tensor dy must have dtype float32, got ${n.dtype}`);if(s.dtype!=="float32")throw new Error(`Tensor filter must have dtype float32, got ${s.dtype}`);let u=w.computeConv3DInfo(p,s.shape,i,1,a),c=e.makeOutput(u.inShape,n.dtype);return mO(e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(c.dataId).id,u.batchSize,u.inDepth,u.inHeight,u.inWidth,u.inChannels,u.outDepth,u.outHeight,u.outWidth,u.outChannels,u.strideDepth,u.strideHeight,u.strideWidth,u.dilationDepth,u.dilationHeight,u.dilationWidth,u.filterDepth,u.filterHeight,u.filterWidth,u.padInfo.front,u.padInfo.top,u.padInfo.left),c}var dO={kernelName:sn,backendName:"wasm",setupFunc:ooe,kernelFunc:noe};var fO=he(an);var hO=he(un);var Fv;(function(r){r[r.bilinear=0]="bilinear",r[r.nearest=1]="nearest"})(Fv||(Fv={}));var gO;function soe(r){gO=r.wasm.cwrap(ln,null,["number","number","number","number","array","number","number","number","number","number"])}function aoe(r){let{backend:t,inputs:e,attrs:o}=r,{method:n,extrapolationValue:s,cropSize:a}=o,{image:i,boxes:p,boxInd:u}=e,c=p.shape[0],[l,m]=a,d=[c,l,m,i.shape[3]],f=t.dataIdMap.get(i.dataId),h;i.dtype!=="float32"&&(h=Mr({backend:t,inputs:{x:i},attrs:{dtype:"float32"}}),f=t.dataIdMap.get(h.dataId));let g=f.id,x=t.dataIdMap.get(p.dataId).id,b=t.dataIdMap.get(u.dataId).id,C=t.makeOutput(d,"float32"),S=t.dataIdMap.get(C.dataId).id,k=new Uint8Array(new Int32Array(i.shape).buffer);return gO(g,x,b,c,k,l,m,Fv[n],s,S),h!=null&&t.disposeData(h.dataId),C}var xO={kernelName:ln,backendName:"wasm",setupFunc:soe,kernelFunc:aoe};var yO;function ioe(r){yO=r.wasm.cwrap(pn,null,["number","number","number","number","number","number"])}function uoe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:a,reverse:i}=o,p=n.shape.length;y.assert(n.dtype==="float32"||n.dtype==="int32",()=>`cumprod does not support ${n.dtype} tensors in the WASM backend`);let u=w.getAxesPermutation([s],p),c=n;u!==null&&(c=go({inputs:{x:n},attrs:{perm:u},backend:e}));let l=w.getInnerMostAxes(1,p)[0];w.assertAxesAreInnerMostDims("cumprod",[l],p);let m=e.makeOutput(c.shape,c.dtype),d=c.shape[l],f=e.dataIdMap.get(c.dataId).id,h=e.dataIdMap.get(m.dataId).id;yO(f,a?1:0,i?1:0,d,h,we[n.dtype]);let g=m;if(u!==null){let x=w.getUndoAxesPermutation(u);g=go({inputs:{x:m},attrs:{perm:x},backend:e}),e.disposeData(c.dataId),e.disposeData(m.dataId)}return g}var bO={kernelName:pn,backendName:"wasm",setupFunc:ioe,kernelFunc:uoe};var CO;function poe(r){CO=r.wasm.cwrap(cn,null,["number","number","number","number","number","number"])}function coe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:a,reverse:i}=o,p=n.shape.length;y.assert(n.dtype==="float32"||n.dtype==="int32",()=>`cumsum does not support ${n.dtype} tensors in the WASM backend`);let u=w.getAxesPermutation([s],p),c=n;u!==null&&(c=go({inputs:{x:n},attrs:{perm:u},backend:e}));let l=w.getInnerMostAxes(1,p)[0];w.assertAxesAreInnerMostDims("cumsum",[l],p);let m=e.makeOutput(c.shape,c.dtype),d=c.shape[l],f=e.dataIdMap.get(c.dataId).id,h=e.dataIdMap.get(m.dataId).id;CO(f,a?1:0,i?1:0,d,h,we[n.dtype]);let g=m;if(u!==null){let x=w.getUndoAxesPermutation(u);g=go({inputs:{x:m},attrs:{perm:x},backend:e}),e.disposeData(c.dataId),e.disposeData(m.dataId)}return g}var wO={kernelName:cn,backendName:"wasm",setupFunc:poe,kernelFunc:coe};var SO;function loe(r){SO=r.wasm.cwrap("DenseBincount",null,["number","array","number","number","boolean","number","number","boolean","number"])}function moe(r){let{backend:t,inputs:e,attrs:o}=r,{x:n,weights:s}=e,{size:a,binaryOutput:i}=o,p=s.shape.reduce((m,d)=>m*d,1)!==0,u=n.shape.length===1?[a]:[n.shape[0],a],c=t.makeOutput(u,s.dtype);function l(m){return t.dataIdMap.get(m.dataId).id}return SO(l(n),new Uint8Array(new Int32Array(n.shape).buffer),n.shape.length,a,p,l(s),we[s.dtype],i,l(c)),c}var IO={kernelName:ra,backendName:"wasm",setupFunc:loe,kernelFunc:moe};var vO;function doe(r){vO=r.wasm.cwrap(mn,null,["number","number","number","array","number","array","array","number","number"])}function foe(r){let{backend:t,inputs:e,attrs:o}=r,{x:n}=e,{blockSize:s,dataFormat:a}=o,i=n.shape[0],p=a==="NHWC"?n.shape[1]:n.shape[2],u=a==="NHWC"?n.shape[2]:n.shape[3],c=a==="NHWC"?n.shape[3]:n.shape[1],l=p*s,m=u*s,d=c/(s*s),f=a==="NHWC"?[i,l,m,d]:[i,d,l,m],h=t.makeOutput(f,"float32"),x=t.dataIdMap.get(n.dataId).id,b=new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer),C=new Uint8Array(new Int32Array(f).buffer),S=new Uint8Array(new Int32Array(y.computeStrides(f)).buffer),k=t.dataIdMap.get(h.dataId).id;return vO(x,s,a==="NHWC"?1:0,b,n.shape.length-1,C,S,f.length,k),h}var kO={kernelName:mn,backendName:"wasm",setupFunc:doe,kernelFunc:foe};var NO;function hoe(r){NO=r.wasm.cwrap(dn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function goe(r){let{inputs:t,attrs:e,backend:o}=r,{x:n,filter:s}=t,a=o.dataIdMap.get(n.dataId).id,i=o.dataIdMap.get(s.dataId).id,{strides:p,dilations:u,pad:c,dimRoundingMode:l}=e,m=u==null?[1,1]:u,d=w.computeConv2DInfo(n.shape,s.shape,p,m,c,l,!0),f=d.filterHeight,h=d.filterWidth,g=d.padInfo.top,x=d.padInfo.right,b=d.padInfo.bottom,C=d.padInfo.left,S=d.dilationHeight,k=d.dilationWidth,_=d.strideHeight,E=d.strideWidth,R=d.inChannels,D=d.outChannels,P=d.padInfo.type==="SAME"?1:0;if(d.dataFormat!=="channelsLast")throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${d.dataFormat}'. Please use 'channelsLast'.`);let O=o.makeOutput(d.outShape,"float32"),M=o.dataIdMap.get(O.dataId).id;return NO(a,n.shape[0],n.shape[1],n.shape[2],i,f,h,g,x,b,C,P,S,k,_,E,R,D,M),O}var TO={kernelName:dn,backendName:"wasm",setupFunc:hoe,kernelFunc:goe};var _O;function xoe(r){_O=r.wasm.cwrap("Diag",null,["number","number","number","number"])}function yoe(r){let{inputs:t,backend:e}=r,{x:o}=t,n=y.sizeFromShape(o.shape),s=e.makeOutput([...o.shape,...o.shape],o.dtype);return _O(e.dataIdMap.get(o.dataId).id,we[o.dtype],n,e.dataIdMap.get(s.dataId).id),s}var $O={kernelName:oa,backendName:"wasm",setupFunc:xoe,kernelFunc:yoe};var EO;function boe(r){EO=r.wasm.cwrap(fn,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Coe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p}=o;if(n.dtype!==s.dtype)throw new Error(`Dilation2D error: x must have the same dtype as filter. Got ${n.dtype} and ${s.dtype}`);let u=w.computeDilation2DInfo(n.shape,s.shape,a,i,"NHWC",p),c=e.makeOutput(u.outShape,n.dtype);return EO(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(c.dataId).id,we[n.dtype],u.batchSize,u.inChannels,u.inHeight,u.inWidth,u.outHeight,u.outWidth,u.strideHeight,u.strideWidth,u.dilationHeight,u.dilationWidth,u.filterHeight,u.filterWidth,u.padInfo.top,u.padInfo.left),c}var RO={kernelName:fn,backendName:"wasm",setupFunc:boe,kernelFunc:Coe};var DO;function woe(r){DO=r.wasm.cwrap(zi,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Soe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,dy:a}=t,{strides:i,pad:p,dilations:u}=o;if(n.dtype!==s.dtype||n.dtype!==a.dtype)throw new Error(`Dilation2DBackpropFilter error: x must have the same dtype as filter and dy. Got ${n.dtype}, ${s.dtype}, and ${a.dtype}`);let c=w.computeDilation2DInfo(n.shape,s.shape,i,p,"NHWC",u),l=e.makeOutput(s.shape,s.dtype);return DO(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(a.dataId).id,e.dataIdMap.get(l.dataId).id,we[n.dtype],c.batchSize,c.inChannels,c.inHeight,c.inWidth,c.outHeight,c.outWidth,c.strideHeight,c.strideWidth,c.dilationHeight,c.dilationWidth,c.filterHeight,c.filterWidth,c.padInfo.top,c.padInfo.left),l}var AO={kernelName:zi,backendName:"wasm",setupFunc:woe,kernelFunc:Soe};var FO;function Ioe(r){FO=r.wasm.cwrap(Bi,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function voe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,dy:a}=t,{strides:i,pad:p,dilations:u}=o;if(n.dtype!==s.dtype||n.dtype!==a.dtype)throw new Error(`Dilation2DBackpropInput error: x must have the same dtype as filter and dy. Got ${n.dtype}, ${s.dtype}, and ${a.dtype}`);let c=w.computeDilation2DInfo(n.shape,s.shape,i,p,"NHWC",u),l=e.makeOutput(n.shape,n.dtype);return FO(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(a.dataId).id,e.dataIdMap.get(l.dataId).id,we[n.dtype],c.batchSize,c.inChannels,c.inHeight,c.inWidth,c.outHeight,c.outWidth,c.strideHeight,c.strideWidth,c.dilationHeight,c.dilationWidth,c.filterHeight,c.filterWidth,c.padInfo.top,c.padInfo.left),l}var PO={kernelName:Bi,backendName:"wasm",setupFunc:Ioe,kernelFunc:voe};var OO=he(gn);var MO;function koe(r){MO=r.wasm.cwrap(Ya,null,["number","number","number"])}function Noe(r){let{inputs:t,backend:e}=r,{dy:o,y:n}=t,s=e.makeOutput(n.shape,"float32"),a=i=>e.dataIdMap.get(i.dataId).id;return MO(a(n),a(o),a(s)),s}var LO={kernelName:Ya,backendName:"wasm",setupFunc:koe,kernelFunc:Noe};var Toe=!1,BO=Ue(yn,Toe,"bool");var zO=he(xn);var VO=he(bn,"float32");function Lg(r){let{inputs:t,attrs:e,backend:o}=r,{input:n}=t,{dim:s}=e,a=n.shape.length,i=n.shape.slice(),p=s;return s<0&&(y.assert(-(a+1)<=s,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),p=a+s+1),i.splice(p,0,1),Vt({inputs:{x:n},backend:o,attrs:{shape:i}})}var WO={kernelName:na,backendName:"wasm",kernelFunc:Lg};var UO=he(Cn,"float32");function Pv(r){let{attrs:{shape:t,value:e,dtype:o},backend:n}=r,s=n.makeOutput(t,o);return n.typedArrayFromHeap(s).fill(e),s}var GO={kernelName:sa,backendName:"wasm",kernelFunc:Pv};var HO;function _oe(r){HO=r.wasm.cwrap(wn,null,["number","number","number","number","number","number"])}function $oe(r){let{inputs:t,backend:e}=r,{image:o}=t,n=e.makeOutput(o.shape,o.dtype),s=e.dataIdMap.get(o.dataId).id,a=e.dataIdMap.get(n.dataId).id,[i,p,u,c]=o.shape;return HO(s,i,p,u,c,a),n}var KO={kernelName:wn,backendName:"wasm",kernelFunc:$oe,setupFunc:_oe};var qO=he(Sn);var Eoe=!1,jO=Ue(In,Eoe);var XO;function Roe(r){XO=r.wasm.cwrap(vn,null,["number","number","number","number","number","number","number"])}function Doe(r){let{backend:t,inputs:e,attrs:o}=r,{varianceEpsilon:n}=o,{x:s,mean:a,variance:i,offset:p,scale:u}=e,c=t.dataIdMap.get(s.dataId).id,l=t.dataIdMap.get(a.dataId).id,m=t.dataIdMap.get(i.dataId).id,d=p!=null?t.dataIdMap.get(p.dataId).id:0,f=u!=null?t.dataIdMap.get(u.dataId).id:0,h=t.makeOutput(s.shape,s.dtype);if(y.sizeFromShape(s.shape)===0)return h;let g=t.dataIdMap.get(h.dataId).id;return XO(c,l,m,d,f,n,g),h}var YO={kernelName:vn,backendName:"wasm",setupFunc:Roe,kernelFunc:Doe};var QO;function Aoe(r){QO=r.wasm.cwrap(vo,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Foe(r){let{inputs:t,attrs:e,backend:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=t,{strides:p,pad:u,dilations:c,dataFormat:l,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=e,h=w.computeConv2DInfo(n.shape,s.shape,p,c,u,m),g=ku[d];if(g==null)throw new Error(`${d} activation not yet supported for FusedConv2D in the wasm backend.`);let x=o.dataIdMap.get(n.dataId).id,b=o.dataIdMap.get(s.dataId).id,C=h.outChannels,S=0;if(a!=null){let ee=o.dataIdMap.get(a.dataId);if(ee.shape.length!==1)throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${ee.shape.length}.`);if(ee.shape[0]!==C)throw new Error(`FusedConv2D bias shape (${ee.shape}) does not match the number of output channels (${C})`);S=ee.id}let k=h.filterHeight,_=h.filterWidth,E=h.padInfo.top,R=h.padInfo.right,D=h.padInfo.bottom,P=h.padInfo.left,O=h.dilationHeight,M=h.dilationWidth,L=h.strideHeight,B=h.strideWidth,z=h.inChannels,U=h.padInfo.type==="SAME"?1:0,j=h.batchSize,q=h.inHeight,Y=h.inWidth;if(l!=="NHWC")throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${l}'. Please use 'NHWC'.`);let J=o.makeOutput(h.outShape,"float32"),re=o.dataIdMap.get(J.dataId).id,ne=i==null?0:o.dataIdMap.get(i.dataId).id;return QO(x,j,q,Y,b,k,_,S,E,R,D,P,U,O,M,L,B,z,C,g,ne,f||0,re),J}var ZO={kernelName:vo,backendName:"wasm",setupFunc:Aoe,kernelFunc:Foe};var JO;function Poe(r){JO=r.wasm.cwrap(ko,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function Ooe(r){let{inputs:t,attrs:e,backend:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=t,{strides:p,pad:u,dilations:c,dataFormat:l,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=e,h=w.computeConv2DInfo(n.shape,s.shape,p,c,u,m,!0),g=ku[d];if(g==null)throw new Error(`${d} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);let x=o.dataIdMap.get(n.dataId).id,b=o.dataIdMap.get(s.dataId).id,C=h.outChannels,S=0;if(a!=null){let ee=o.dataIdMap.get(a.dataId);if(ee.shape.length!==1)throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${ee.shape.length}.`);if(ee.shape[0]!==C)throw new Error(`FusedDepthwiseConv2D bias shape (${ee.shape}) does not match the number of output channels (${C})`);S=ee.id}let k=h.filterHeight,_=h.filterWidth,E=h.padInfo.top,R=h.padInfo.right,D=h.padInfo.bottom,P=h.padInfo.left,O=h.dilationHeight,M=h.dilationWidth,L=h.strideHeight,B=h.strideWidth,z=h.inChannels,U=h.padInfo.type==="SAME"?1:0,j=h.batchSize,q=h.inHeight,Y=h.inWidth;if(l!=="NHWC")throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${l}'. Please use 'NHWC'.`);let J=o.makeOutput(h.outShape,"float32"),re=o.dataIdMap.get(J.dataId).id,ne=i==null?0:o.dataIdMap.get(i.dataId).id;return JO(x,j,q,Y,b,k,_,S,E,R,D,P,U,O,M,L,B,z,C,g,ne,f||0,re),J}var eM={kernelName:ko,backendName:"wasm",setupFunc:Poe,kernelFunc:Ooe};var tM;function Moe(r){tM=r.wasm.cwrap(kn,null,["number","number","number","number","number","number","array","number"])}function Loe(r){let{backend:t,inputs:e}=r,{params:o,indices:n}=e,[s,a,i,p]=af.prepareAndValidate(o,n),u=t.makeOutput(s,o.dtype);if(a===0)return u;let c=n.shape,l=c[c.length-1],d=t.dataIdMap.get(o.dataId).id,h=t.dataIdMap.get(n.dataId).id,g=new Uint8Array(new Int32Array(p).buffer),x=t.dataIdMap.get(u.dataId).id;return tM(d,we[o.dtype],h,a,l,i,g,x),u}var rM={kernelName:kn,backendName:"wasm",setupFunc:Moe,kernelFunc:Loe};var oM;function Boe(r){oM=r.wasm.cwrap("Gather",null,["number","number","array","number","number","number","array","number"])}function zoe(r){let{backend:t,inputs:e,attrs:o}=r,{x:n,indices:s}=e,{axis:a,batchDims:i}=o,p=y.parseAxisParam(a,n.shape)[0],u=t.readSync(s.dataId),c=n.shape[p];for(let D=0;D<u.length;++D){let P=u[D];y.assert(P<=c-1&&P>=0,()=>`GatherV2: the index value ${P} is not in [0, ${c-1}]`)}let l=w.segment_util.collectGatherOpShapeInfo(n,s,p,i),m=Vt({inputs:{x:n},attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]},backend:t}),d=y.sizeFromShape(s.shape),f=Vt({inputs:{x:s},attrs:{shape:[l.batchSize,d/l.batchSize]},backend:t}),h=[l.batchSize,l.outerSize,d/l.batchSize,l.sliceSize],g=t.makeOutput(h,n.dtype);if(y.sizeFromShape(n.shape)===0)return g;let x=m.shape.length-1,C=t.dataIdMap.get(m.dataId).id,k=t.dataIdMap.get(f.dataId).id,_=t.dataIdMap.get(g.dataId).id,E=new Uint8Array(new Int32Array(y.computeStrides(m.shape)).buffer),R=new Uint8Array(new Int32Array(y.computeStrides(h)).buffer);return oM(C,we[n.dtype],E,x,k,l.batchSize,R,_),t.disposeData(m.dataId),t.disposeData(f.dataId),g.shape=l.outputShape,g}var nM={kernelName:aa,backendName:"wasm",setupFunc:Boe,kernelFunc:zoe};var Voe=!1,sM=Ue(Nn,Voe,"bool");var Woe=!1,aM=Ue(Tn,Woe,"bool");var iM=he(_n,"bool");var uM=he($n,"bool");var pM=he(En,"bool");var cM;function Uoe(r){cM=r.wasm.cwrap(Rn,null,["number","number","number","number"])}function Goe(r){let{inputs:{x:t},attrs:{alpha:e},backend:o}=r,n=o.dataIdMap.get(t.dataId).id,s=o.makeOutput(t.shape,"float32");if(y.sizeFromShape(t.shape)!==0){let a=o.dataIdMap.get(s.dataId).id;cM(n,we[t.dtype],e,a)}return s}var lM={kernelName:Rn,backendName:"wasm",setupFunc:Uoe,kernelFunc:Goe};var Hoe=!1,mM=Ue(Dn,Hoe,"bool");var Koe=!1,dM=Ue(An,Koe,"bool");var fM;function qoe(r){fM=r.wasm.cwrap(Fn,null,["number","number","number","number"])}function joe(r){let{attrs:t,backend:e}=r,{start:o,stop:n,num:s}=t,a=Math.floor(s),i=e.makeOutput([a],"float32");return fM(e.dataIdMap.get(i.dataId).id,o,n,a),i}var hM={kernelName:Fn,backendName:"wasm",setupFunc:qoe,kernelFunc:joe};var gM=he(Pn);var xM=he(On);var Xoe=!1,yM=Ue(Mn,Xoe,"bool");var bM=he(Ln);var Yoe=!1,CM=Ue(Bn,Yoe,"bool");var Qoe=!1,wM=Ue($0,Qoe,"bool");var SM;function Zoe(r){SM=r.wasm.cwrap(zn,null,["number","number","number","number","number","number","number"])}function Joe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:a,alpha:i,beta:p}=o;if(n.dtype!=="float32")throw new Error("LRN error: x must have dtype float32");let u=e.makeOutput(n.shape,n.dtype);return SM(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(u.dataId).id,n.shape[3],s,a,i,p),u}var IM={kernelName:zn,backendName:"wasm",setupFunc:Zoe,kernelFunc:Joe};var vM;function ene(r){vM=r.wasm.cwrap(Qa,null,["number","number","number","number","number","number","number","number","number"])}function tne(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:a}=t,{depthRadius:i,bias:p,alpha:u,beta:c}=o;if(n.dtype!=="float32"||s.dtype!=="float32"||a.dtype!=="float32")throw new Error("LRNGrad error: x, y, and dy must have dtype float32");let l=e.makeOutput(n.shape,n.dtype);return vM(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(a.dataId).id,e.dataIdMap.get(l.dataId).id,a.shape[3],i,p,u,c),l}var kM={kernelName:Qa,backendName:"wasm",setupFunc:ene,kernelFunc:tne};var NM;function rne(r){NM=r.wasm.cwrap(Vn,null,["number","number","number","number"])}function one(r){let{backend:t,inputs:e,attrs:o}=r,{reductionIndices:n,keepDims:s}=o,{x:a}=e,p=t.dataIdMap.get(a.dataId).id,u=a,{transposed:c,axes:l,originalAxes:m,inputWasTransposed:d}=_r(a,n,t);if(d){let C=t.dataIdMap.get(c.dataId).id;u=c,p=C}let f=u.shape.length;w.assertAxesAreInnerMostDims("max",l,f);let[h,g]=w.computeOutAndReduceShapes(u.shape,l),x=y.sizeFromShape(g),b=t.makeOutput(h,a.dtype);if(y.sizeFromShape(u.shape)!==0){let C=t.dataIdMap.get(b.dataId).id;NM(p,we[a.dtype],x,C)}if(d&&t.disposeData(c.dataId),s){let C=w.expandShapeToKeepDim(b.shape,m);b.shape=C}return b}var TM={kernelName:Vn,backendName:"wasm",setupFunc:rne,kernelFunc:one};var nne=!1,_M=Ue(Wn,nne);var $M;function sne(r){$M=r.wasm.cwrap(Un,null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function ane(r){let{inputs:t,attrs:e,backend:o}=r,n=t.x,s=o.dataIdMap.get(n.dataId).id;y.assert(n.dtype==="float32",()=>`Error in MaxPool: only float32 input is supported. Got ${n.dtype}.`);let{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=e,c=w.computePool2DInfo(n.shape,a,i,1,p,u),l=c.filterHeight,m=c.filterWidth,d=c.padInfo.top,f=c.padInfo.right,h=c.padInfo.bottom,g=c.padInfo.left,x=c.dilationHeight,b=c.dilationWidth,C=c.strideHeight,S=c.strideWidth,k=c.inChannels,_=c.outChannels;if(c.dataFormat!=="channelsLast")throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);let E=o.makeOutput(c.outShape,"float32"),R=o.dataIdMap.get(E.dataId).id;return $M(s,n.shape[0],n.shape[1],n.shape[2],l,m,d,f,h,g,x,b,C,S,k,_,R),E}var EM={kernelName:Un,backendName:"wasm",setupFunc:sne,kernelFunc:ane};var RM;function ine(r){RM=r.wasm.cwrap("MaxPool3D",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function une(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:p,dataFormat:u}=o,c=w.computePool3DInfo(n.shape,s,a,1,i,p,u),l=e.makeOutput(c.outShape,n.dtype);return RM(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(l.dataId).id,c.batchSize,c.inChannels,c.inDepth,c.inHeight,c.inWidth,c.outDepth,c.outHeight,c.outWidth,c.strideDepth,c.strideHeight,c.strideWidth,c.dilationDepth,c.dilationHeight,c.dilationWidth,c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth,c.padInfo.front,c.padInfo.top,c.padInfo.left),l}var DM={kernelName:ia,backendName:"wasm",setupFunc:ine,kernelFunc:une};var AM;function pne(r){AM=r.wasm.cwrap("MaxPool3DGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function cne(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o,c=w.computePool3DInfo(s.shape,a,i,1,p,u),l=e.makeOutput(s.shape,s.dtype);return AM(e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(l.dataId).id,c.batchSize,c.inChannels,c.inDepth,c.inHeight,c.inWidth,c.outDepth,c.outHeight,c.outWidth,c.strideDepth,c.strideHeight,c.strideWidth,c.dilationDepth,c.dilationHeight,c.dilationWidth,c.effectiveFilterDepth,c.effectiveFilterHeight,c.effectiveFilterWidth,c.padInfo.front,c.padInfo.top,c.padInfo.left),l}var FM={kernelName:Ki,backendName:"wasm",setupFunc:pne,kernelFunc:cne};var PM;function lne(r){PM=r.wasm.cwrap("MaxPoolGrad",null,["number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function mne(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,{filterSize:a,strides:i,pad:p,dimRoundingMode:u}=o,c=w.computePool2DInfo(s.shape,a,i,1,p,u),l=e.makeOutput(s.shape,s.dtype);return PM(e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(l.dataId).id,c.batchSize,c.inChannels,c.inHeight,c.inWidth,c.outHeight,c.outWidth,c.strideHeight,c.strideWidth,c.dilationHeight,c.dilationWidth,c.effectiveFilterHeight,c.effectiveFilterWidth,c.padInfo.top,c.padInfo.left),l}var OM={kernelName:Hi,backendName:"wasm",setupFunc:lne,kernelFunc:mne};var MM;function dne(r){MM=r.wasm.cwrap("MaxPoolWithArgmax",null,["number","number","number","number","boolean","number","number","number","number","number","number","number","number","number","number","number","number","number","number"])}function fne(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,includeBatchInIndex:p}=o;y.assert(n.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${n.shape.length}.`);let u=[1,1];y.assert(w.eitherStridesOrDilationsAreOne(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);let c=w.computePool2DInfo(n.shape,s,a,[1,1],i),l=e.makeOutput(c.outShape,n.dtype),m=e.makeOutput(c.outShape,"int32");return MM(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(l.dataId).id,e.dataIdMap.get(m.dataId).id,we[n.dtype],p,c.batchSize,c.inChannels,c.inHeight,c.inWidth,c.outHeight,c.outWidth,c.strideHeight,c.strideWidth,c.dilationHeight,c.dilationWidth,c.effectiveFilterHeight,c.effectiveFilterWidth,c.padInfo.top,c.padInfo.left),[l,m]}var LM={kernelName:ua,backendName:"wasm",setupFunc:dne,kernelFunc:fne};var BM;function hne(r){BM=r.wasm.cwrap(Gn,null,["number, number, number"])}function gne(r){let{backend:t,inputs:e,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=e,i=t.dataIdMap.get(a.dataId).id,p=i,u=a,{transposed:c,axes:l,originalAxes:m,inputWasTransposed:d}=_r(a,n,t),f=l;if(d){let S=t.dataIdMap.get(c.dataId).id;S!==i&&(u=c,p=S,f=w.getInnerMostAxes(f.length,u.shape.length))}w.assertAxesAreInnerMostDims("mean",f,u.shape.length);let[h,g]=w.computeOutAndReduceShapes(u.shape,f),x=y.sizeFromShape(g),b=u;u.dtype!=="float32"&&(b=Mr({backend:t,inputs:{x:u},attrs:{dtype:"float32"}}),p=t.dataIdMap.get(b.dataId).id);let C=t.makeOutput(h,"float32");if(y.sizeFromShape(u.shape)!==0){let S=t.dataIdMap.get(C.dataId).id;BM(p,x,S)}if(d&&t.disposeData(c.dataId),s){let S=w.expandShapeToKeepDim(C.shape,m);C.shape=S}return u.dtype!=="float32"&&t.disposeData(b.dataId),C}var zM={kernelName:Gn,backendName:"wasm",setupFunc:hne,kernelFunc:gne};var VM;function xne(r){VM=r.wasm.cwrap(Hn,null,["number","number","number","number"])}function yne(r){let{backend:t,inputs:e,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=e,i=t.dataIdMap.get(a.dataId).id,p=i,u=a,{transposed:c,axes:l,originalAxes:m,inputWasTransposed:d}=_r(a,n,t);if(d){let C=t.dataIdMap.get(c.dataId).id;C!==i&&(u=c,p=C)}let f=u.shape.length;w.assertAxesAreInnerMostDims("min",l,f);let[h,g]=w.computeOutAndReduceShapes(u.shape,l),x=y.sizeFromShape(g),b=t.makeOutput(h,u.dtype);if(y.sizeFromShape(u.shape)!==0){let C=t.dataIdMap.get(b.dataId).id;VM(p,we[a.dtype],x,C)}if(d&&t.disposeData(c.dataId),s){let C=w.expandShapeToKeepDim(b.shape,m);b.shape=C}return b}var WM={kernelName:Hn,backendName:"wasm",setupFunc:xne,kernelFunc:yne};var bne=!1,UM=Ue(Kn,bne);var Ov;(function(r){r[r.reflect=0]="reflect",r[r.symmetric=1]="symmetric"})(Ov||(Ov={}));var GM;function Cne(r){GM=r.wasm.cwrap(qn,null,["number","array","number","number","array","array","number","number"])}function wne(r){let{inputs:{x:t},backend:e,attrs:{paddings:o,mode:n}}=r,s=o.map((f,h)=>f[0]+t.shape[h]+f[1]),a=e.dataIdMap.get(t.dataId).id,i=e.makeOutput(s,t.dtype),p=e.dataIdMap.get(i.dataId).id,u=new Uint8Array(new Int32Array(t.shape).buffer),c=o.map(f=>f[0]),l=o.map(f=>f[1]),m=new Uint8Array(new Int32Array(c).buffer),d=new Uint8Array(new Int32Array(l).buffer);return GM(a,u,t.shape.length,we[t.dtype],m,d,Ov[n],p),i}var HM={kernelName:qn,backendName:"wasm",kernelFunc:wne,setupFunc:Cne};var KM;function Sne(r){KM=r.wasm.cwrap(vs,null,["number","number","number","number"])}function Mv(r){let{backend:t,inputs:{logits:e},attrs:{dim:o}}=r,n=t.dataIdMap.get(e.dataId).id,s=t.makeOutput(e.shape,e.dtype),a=t.dataIdMap.get(s.dataId).id,i=e.shape[o],p=y.sizeFromShape(e.shape)/i;return y.sizeFromShape(s.shape)===0||KM(n,a,i,p),s}var qM={kernelName:vs,backendName:"wasm",setupFunc:Sne,kernelFunc:Mv};var jM;function Ine(r){jM=r.wasm.cwrap(Xn,null,["number","number","number","number","number","number"])}function vne(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:a,normalized:i}=o;if(n.dtype!=="float32")throw new Error(`Tensor logits must have dtype float32, got ${n.dtype}`);let p=i?n:Mv({inputs:{logits:n},backend:e,attrs:{dim:n.shape.length-1}}),[u,c]=p.shape,l=e.makeOutput([u,s],"int32");return jM(e.dataIdMap.get(p.dataId).id,u,c,s,a,e.dataIdMap.get(l.dataId).id),i||e.disposeData(p.dataId),l}var XM={kernelName:Xn,backendName:"wasm",setupFunc:Ine,kernelFunc:vne};var YM=Ue(jn,!0);var kne=!0,QM=Ue(Yn,kne);var ZM=he(pa);function Yc(r,t){let e=new Int32Array(r.wasm.HEAPU8.buffer,t,4),o=e[0],n=e[1],s=e[2],a=e[3];return r.wasm._free(t),{pSelectedIndices:o,selectedSize:n,pSelectedScores:s,pValidOutputs:a}}var JM;function Nne(r){JM=r.wasm.cwrap(Zn,"number",["number","number","number","number","number"])}function Tne(r){let{backend:t,inputs:e,attrs:o}=r,{iouThreshold:n,maxOutputSize:s,scoreThreshold:a}=o,{boxes:i,scores:p}=e,u=t.dataIdMap.get(i.dataId).id,c=t.dataIdMap.get(p.dataId).id,l=JM(u,c,s,n,a),{pSelectedIndices:m,selectedSize:d,pSelectedScores:f,pValidOutputs:h}=Yc(t,l);return t.wasm._free(f),t.wasm._free(h),t.makeOutput([d],"int32",m)}var eL={kernelName:Zn,backendName:"wasm",setupFunc:Nne,kernelFunc:Tne};var tL;function _ne(r){tL=r.wasm.cwrap(Za,"number",["number","number","number","number","number","bool"])}function $ne(r){let{backend:t,inputs:e,attrs:o}=r,{iouThreshold:n,maxOutputSize:s,scoreThreshold:a,padToMaxOutputSize:i}=o,{boxes:p,scores:u}=e,c=t.dataIdMap.get(p.dataId).id,l=t.dataIdMap.get(u.dataId).id,m=tL(c,l,s,n,a,i),{pSelectedIndices:d,selectedSize:f,pSelectedScores:h,pValidOutputs:g}=Yc(t,m);t.wasm._free(h);let x=t.makeOutput([f],"int32",d),b=t.makeOutput([],"int32",g);return[x,b]}var rL={kernelName:Za,backendName:"wasm",setupFunc:_ne,kernelFunc:$ne};var oL;function Ene(r){oL=r.wasm.cwrap(Jn,"number",["number","number","number","number","number","number"])}function Rne(r){let{backend:t,inputs:e,attrs:o}=r,{iouThreshold:n,maxOutputSize:s,scoreThreshold:a,softNmsSigma:i}=o,{boxes:p,scores:u}=e,c=t.dataIdMap.get(p.dataId).id,l=t.dataIdMap.get(u.dataId).id,m=oL(c,l,s,n,a,i),{pSelectedIndices:d,selectedSize:f,pSelectedScores:h,pValidOutputs:g}=Yc(t,m);t.wasm._free(g);let x=t.makeOutput([f],"int32",d),b=t.makeOutput([f],"float32",h);return[x,b]}var nL={kernelName:Jn,backendName:"wasm",setupFunc:Ene,kernelFunc:Rne};var Dne=!1,sL=Ue(Qn,Dne,"bool");var aL;function Ane(r){aL=r.wasm.cwrap(es,null,["number","number","number","number","number"])}function Fne(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:a,onValue:i,offValue:p}=o,u=e.makeOutput([...n.shape,a],s),c=e.dataIdMap.get(u.dataId).id,m=e.dataIdMap.get(n.dataId).id;return aL(m,a,i,p,c),u}var iL={kernelName:es,backendName:"wasm",setupFunc:Ane,kernelFunc:Fne};function Pne(r){let{inputs:{x:t},backend:e}=r,o=e.makeOutput(t.shape,t.dtype);return e.typedArrayFromHeap(o).fill(1),o}var uL={kernelName:ca,backendName:"wasm",kernelFunc:Pne};function One(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return Lg({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,a=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let i=[],p=t.map(c=>{let l=Lg({inputs:{input:c},backend:e,attrs:{dim:n}});return i.push(l),l}),u=Av({inputs:p,backend:e,attrs:{axis:n}});return i.forEach(c=>e.disposeData(c.dataId)),u}var pL={kernelName:la,backendName:"wasm",kernelFunc:One};var cL;function Mne(r){cL=r.wasm.cwrap(ts,null,["number","array","number","number","array","array","number","number"])}function Lne(r){let{inputs:{x:t},backend:e,attrs:{paddings:o,constantValue:n}}=r,s=o.map((h,g)=>h[0]+t.shape[g]+h[1]);if(y.sizeFromShape(t.shape)===0)return Pv({backend:e,attrs:{shape:s,value:n,dtype:t.dtype}});let a=e.dataIdMap.get(t.dataId).id,i=e.makeOutput(s,t.dtype),u=e.dataIdMap.get(i.dataId).id,c=new Uint8Array(new Int32Array(t.shape).buffer),l=o.map(h=>h[0]),m=o.map(h=>h[1]),d=new Uint8Array(new Int32Array(l).buffer),f=new Uint8Array(new Int32Array(m).buffer);return cL(a,c,t.shape.length,we[t.dtype],d,f,n,u),i}var Bg={kernelName:ts,backendName:"wasm",kernelFunc:Lne,setupFunc:Mne};var Bne=!1,lL=Ue(rs,Bne);var mL;function zne(r){mL=r.wasm.cwrap(os,null,["number","number","number"])}function Vne(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=e.dataIdMap.get(o.dataId).id,a=e.dataIdMap.get(n.dataId).id,i=s,p=o,u=p;p.dtype!=="float32"&&(u=Mr({backend:e,inputs:{x:o},attrs:{dtype:"float32"}}),i=e.dataIdMap.get(u.dataId).id);let c=e.makeOutput(o.shape,"float32"),l=e.dataIdMap.get(c.dataId).id;return mL(i,a,l),p.dtype!=="float32"&&e.disposeData(u.dataId),c}var dL={kernelName:os,backendName:"wasm",setupFunc:zne,kernelFunc:Vne};var fL;function Wne(r){fL=r.wasm.cwrap(ns,null,["number","number","number","number"])}function Une(r){let{backend:t,inputs:e,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=e,i=t.dataIdMap.get(a.dataId).id,p=i,u=a,{transposed:c,axes:l,originalAxes:m,inputWasTransposed:d}=_r(a,n,t),f=l;if(d){let C=t.dataIdMap.get(c.dataId).id;C!==i&&(u=c,p=C,f=w.getInnerMostAxes(f.length,u.shape.length))}w.assertAxesAreInnerMostDims("prod",f,u.shape.length);let[h,g]=w.computeOutAndReduceShapes(u.shape,f),x=y.sizeFromShape(g),b=t.makeOutput(h,u.dtype);if(y.sizeFromShape(u.shape)!==0){let C=t.dataIdMap.get(b.dataId).id;fL(p,x,we[b.dtype],C)}if(d&&t.disposeData(c.dataId),s){let C=w.expandShapeToKeepDim(b.shape,m);b.shape=C}return b}var hL={kernelName:ns,backendName:"wasm",setupFunc:Wne,kernelFunc:Une};var Gne=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:a}=e,i=fp(o,n,s,a),p=t.makeOutput([i.length],a);return t.typedArrayFromHeap(p).set(i),p},gL={kernelName:ma,backendName:"wasm",kernelFunc:Gne};var Hne=!0,xL=Ue(hn,Hne);var yL=he(ss);var bL=he(as);var CL=he(ps);var wL;function Kne(r){wL=r.wasm.cwrap(us,null,["number","number","number","number","number","number","number","number","number","number"])}function qne(r){let{backend:t,inputs:e,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,[c,l,m,d]=n.shape,f=[c,p,u,d],h=t.dataIdMap.get(n.dataId),g;h.dtype!=="float32"&&(g=Mr({backend:t,inputs:{x:n},attrs:{dtype:"float32"}}),h=t.dataIdMap.get(g.dataId));let x=h.id,b=t.makeOutput(f,"float32");if(y.sizeFromShape(n.shape)===0)return b;let C=t.dataIdMap.get(b.dataId).id;return wL(x,c,l,m,d,p,u,s?1:0,a?1:0,C),g!=null&&t.disposeData(g.dataId),b}var SL={kernelName:us,backendName:"wasm",setupFunc:Kne,kernelFunc:qne};var IL;function jne(r){IL=r.wasm.cwrap(ei,null,["number","number","number","array","array","boolean"])}function Xne(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:a}=o,i=e.makeOutput(n.shape,"float32"),p=e.dataIdMap.get(n.dataId),u;return p.dtype!=="float32"&&(u=Mr({backend:e,inputs:{x:n},attrs:{dtype:"float32"}}),p=e.dataIdMap.get(u.dataId)),IL(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(i.dataId).id,new Uint8Array(new Int32Array(n.shape).buffer),new Uint8Array(new Int32Array(s.shape).buffer),a),u!=null&&e.disposeData(u.dataId),i}var vL={kernelName:ei,backendName:"wasm",setupFunc:jne,kernelFunc:Xne};var kL;function Yne(r){kL=r.wasm.cwrap(is,null,["number","number","number","number","number","number","number","number","number","number"])}function Qne(r){let{backend:t,inputs:e,attrs:o}=r,{images:n}=e,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,[c,l,m,d]=n.shape,f=[c,p,u,d],h=t.makeOutput(f,"float32");if(y.sizeFromShape(n.shape)===0)return h;let g=t.dataIdMap.get(n.dataId),x;g.dtype!=="float32"&&(x=Mr({backend:t,inputs:{x:n},attrs:{dtype:"float32"}}),g=t.dataIdMap.get(x.dataId));let b=g.id,C=t.dataIdMap.get(h.dataId).id;return kL(b,c,l,m,d,p,u,s?1:0,a?1:0,C),x!=null&&t.disposeData(x.dataId),h}var NL={kernelName:is,backendName:"wasm",setupFunc:Yne,kernelFunc:Qne};var TL;function Zne(r){TL=r.wasm.cwrap(Ja,null,["number","number","number","array","array","boolean"])}function Jne(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:a}=o,i=e.makeOutput(n.shape,"float32"),p=e.dataIdMap.get(n.dataId),u;return p.dtype!=="float32"&&(u=Mr({backend:e,inputs:{x:n},attrs:{dtype:"float32"}}),p=e.dataIdMap.get(u.dataId)),TL(e.dataIdMap.get(n.dataId).id,e.dataIdMap.get(s.dataId).id,e.dataIdMap.get(i.dataId).id,new Uint8Array(new Int32Array(n.shape).buffer),new Uint8Array(new Int32Array(s.shape).buffer),a),u!=null&&e.disposeData(u.dataId),i}var _L={kernelName:Ja,backendName:"wasm",setupFunc:Zne,kernelFunc:Jne};var $L;function ese(r){$L=r.wasm.cwrap(cs,null,["number","array","number","array","number","number"])}function tse(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o,a=y.parseAxisParam(s,n.shape);if(n.shape.length===0)return Dp({inputs:{x:n},backend:e});let i=e.makeOutput(n.shape,n.dtype),p=e.dataIdMap.get(n.dataId).id,u=e.dataIdMap.get(i.dataId).id,c=new Uint8Array(new Int32Array(a).buffer),l=new Uint8Array(new Int32Array(n.shape).buffer);$L(p,c,a.length,l,n.shape.length,u);let m=Vt({inputs:{x:i},attrs:{shape:n.shape},backend:e});return e.disposeData(i.dataId),m}var EL={kernelName:cs,backendName:"wasm",kernelFunc:tse,setupFunc:ese};var RL;function rse(r){RL=r.wasm.cwrap(As,null,["number","number","number","number","number","number","number","number","array","number","number"])}function ose(r){let{inputs:t,backend:e,attrs:o}=r,{image:n}=t,{radians:s,fillValue:a,center:i}=o,p=e.makeOutput(n.shape,n.dtype),u=e.dataIdMap.get(n.dataId).id,c=e.dataIdMap.get(p.dataId).id,[l,m,d,f]=n.shape,[h,g]=w.getImageCenter(i,m,d),x=a===0,b=255,C=typeof a=="number"?[a,a,a,x?0:b]:[...a,b],S=new Uint8Array(new Int32Array(C).buffer);return RL(u,l,m,d,f,s,h,g,S,C.length,c),p}var DL={kernelName:As,backendName:"wasm",kernelFunc:ose,setupFunc:rse};var AL=he(ls);var FL=he(ms);var PL;function nse(r){PL=r.wasm.cwrap(ds,null,["number","number","number","number","number","number","array","number","number"])}function sse(r){let{backend:t,inputs:e,attrs:o}=r,{indices:n,updates:s}=e,{shape:a}=o,i=t.makeOutput(a,s.dtype);if(y.sizeFromShape(a)===0)return i;let{sliceRank:p,numUpdates:u,sliceSize:c,strides:l,outputSize:m}=hu.calculateShapes(s,n,a),f=t.dataIdMap.get(n.dataId).id,g=t.dataIdMap.get(s.dataId).id,x=new Uint8Array(new Int32Array(l).buffer),b=t.dataIdMap.get(i.dataId).id;return PL(f,g,we[s.dtype],p,u,c,x,m,b),i}var OL={kernelName:ds,backendName:"wasm",setupFunc:nse,kernelFunc:sse};var ML;function ase(r){ML=r.wasm.cwrap(hs,null,["number","number","number","number","number","number","bool","number"])}function ise(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:a}=o;if(n.dtype!==s.dtype)throw new Error(`SearchSorted error: sorted_sequence must have the same dtype as values. Got ${n.dtype} and ${s.dtype}`);let i=e.makeOutput(s.shape,"int32");function p(u){return e.dataIdMap.get(u.dataId).id}return ML(p(n),p(s),n.shape[0],n.shape[1],s.shape[1],we[n.dtype],a==="left",p(i)),i}var LL={kernelName:hs,backendName:"wasm",setupFunc:ase,kernelFunc:ise};var BL;function use(r){BL=r.wasm.cwrap("SelectV2",null,["number","number","number","number","number"])}function pse(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,a=e.dataIdMap.get(o.dataId).id,i=e.dataIdMap.get(n.dataId).id,p=e.dataIdMap.get(s.dataId).id,u=e.makeOutput(n.shape,n.dtype),c=e.dataIdMap.get(u.dataId).id,l=o.shape.length,m=n.shape.length,d=l===0||l>1||m===1?1:y.sizeFromShape(n.shape.slice(1));return BL(a,i,p,d,c),u}var zL={kernelName:fa,backendName:"wasm",kernelFunc:pse,setupFunc:use};var VL=he(gs);var WL;function cse(r){WL=r.wasm.cwrap(Cs,null,["number","number"])}function lse(r){let{backend:t,inputs:{x:e}}=r,o=t.dataIdMap.get(e.dataId).id,n=t.makeOutput(e.shape,e.dtype),s=t.dataIdMap.get(n.dataId).id;return y.sizeFromShape(n.shape)===0||WL(o,s),n}var UL={kernelName:"Sigmoid",backendName:"wasm",setupFunc:cse,kernelFunc:lse};var GL=he(bs);var HL=he(xs);var KL=he(ys);var qL=he(ws);function mse(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:a}=o,i=y.sizeFromShape(s),p=[[0,0]];p.push(...a);for(let _=1+s.length;_<n.shape.length;++_)p.push([0,0]);let u=Bg.kernelFunc({inputs:{x:n},backend:e,attrs:{paddings:p,constantValue:0}}),c=w.getReshaped(u.shape,s,i,!1),l=w.getPermuted(c.length,s.length,!1),m=w.getReshapedPermuted(u.shape,s,i,!1),h=Vt({inputs:{x:u},backend:e,attrs:{shape:c}}),b=go({inputs:{x:h},backend:e,attrs:{perm:l}}),k=Vt({inputs:{x:b},backend:e,attrs:{shape:m}});return e.disposeData(u.dataId),e.disposeData(h.dataId),e.disposeData(b.dataId),k}var jL={kernelName:ga,backendName:"wasm",kernelFunc:mse};var XL;function dse(r){XL=r.wasm.cwrap("SparseFillEmptyRows","number",["number","number","number","number","number","number","number","number","number","number","number","number"])}function fse(r){let{backend:t,inputs:e}=r,{indices:o,values:n,denseShape:s,defaultValue:a}=e,i=o.shape[0],p=o.shape[1],u=t.readSync(s.dataId)[0],c=[i+u,p],l=t.dataIdMap.get(o.dataId).id,m=t.dataIdMap.get(n.dataId).id,d=t.dataIdMap.get(a.dataId).id,f=t.makeOutput(c,o.dtype),h=t.dataIdMap.get(f.dataId).id,g=t.makeOutput(c.slice(0,1),n.dtype),x=t.dataIdMap.get(g.dataId).id,b=t.makeOutput([u],"bool"),C=t.dataIdMap.get(b.dataId).id,S=t.makeOutput([i],o.dtype),k=t.dataIdMap.get(S.dataId).id,_=t.makeOutput([4],"int32"),E=t.dataIdMap.get(_.dataId).id,R=XL(l,m,we[n.dtype],i,u,p,d,h,x,C,k,E),D=t.readSync(_.dataId),P;switch(D[0]){case 1:{P=w.getSparseFillEmptyRowsIndicesDenseShapeMismatch(D[1]);break}case 2:{P=w.getSparseFillEmptyRowsNegativeIndexErrorMessage(D[1],D[2]);break}case 3:P=w.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(D[1],D[2],D[3]);break;default:P=""}if(t.disposeData(_.dataId),P)throw t.disposeData(f.dataId),t.disposeData(g.dataId),t.disposeData(b.dataId),t.disposeData(S.dataId),new Error(P);let O=f,M=g;return R!==c[0]&&(O=Oo({inputs:{x:f},attrs:{begin:0,size:[R,p]},backend:t}),M=Oo({inputs:{x:g},attrs:{begin:0,size:R},backend:t}),t.disposeData(f.dataId),t.disposeData(g.dataId)),[O,M,b,S]}var YL={kernelName:ji,backendName:"wasm",setupFunc:dse,kernelFunc:fse};var QL;function hse(r){QL=r.wasm.cwrap(ti,null,["number","number","number","number","number","number","number"])}function gse(r){let{backend:t,inputs:e}=r,{inputIndices:o,inputShape:n,newShape:s}=e;if(o.shape.length!==2)throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);if(n.shape.length!==1)throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);if(s.shape.length!==1)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);let a=t.dataIdMap.get(o.dataId).id,i=t.dataIdMap.get(n.dataId).id,p=t.dataIdMap.get(s.dataId).id,u=o.shape[0],c=y.sizeFromShape(s.shape),l=t.makeOutput([u,c],o.dtype),m=t.dataIdMap.get(l.dataId).id,d=t.makeOutput([c],s.dtype),f=t.dataIdMap.get(d.dataId).id,h=t.makeOutput([3],"int32"),g=t.dataIdMap.get(h.dataId).id;QL(a,i,p,u,m,f,g);let x=t.readSync(h.dataId),b;switch(x[0]){case 0:{b=w.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(x[1],x[2]);break}case 1:{b=w.getSparseReshapeNegativeOutputDimErrorMessage(x[1],x[2]);break}case 2:b=w.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();break;case 3:{let C=Array.from(t.readSync(n.dataId)),S=Array.from(t.readSync(d.dataId));b=w.getSparseReshapeInputOutputMultipleErrorMessage(C,S);break}case 4:{let C=Array.from(t.readSync(n.dataId)),S=Array.from(t.readSync(d.dataId));b=w.getSparseReshapeInputOutputMismatchErrorMessage(C,S);break}default:b=""}if(t.disposeData(h.dataId),b)throw t.disposeData(l.dataId),t.disposeData(d.dataId),new Error(b);return[l,d]}var ZL={kernelName:ti,backendName:"wasm",setupFunc:hse,kernelFunc:gse};var JL;function zg(r){JL=r.wasm.cwrap("SparseSegmentReduction",null,["number","number","number","number","number","number","number","number","number"])}function Vg(r,t){let{backend:e,inputs:o}=r,{data:n,indices:s,segmentIds:a}=o,i=s.shape[0],p=e.readSync(a.dataId,i-1,i)[0],c=i>0?p+1:0;if(c<0)throw new Error(w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let l=n.shape.slice();l[0]=c;let m=e.dataIdMap.get(n.dataId).id,d=e.dataIdMap.get(s.dataId).id,f=e.dataIdMap.get(a.dataId).id,h=e.makeOutput(l,n.dtype),g=e.dataIdMap.get(h.dataId).id,x=e.makeOutput([4],"int32"),b=e.dataIdMap.get(x.dataId).id;JL(m,we[n.dtype],n.shape[0],d,f,g,b,t,0);let C=e.readSync(x.dataId),S;switch(C[0]){case 0:{S=w.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();break}case 1:{S=w.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();break}case 2:S=w.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(C[1],C[2]);break;case 3:S=w.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C[1],C[2],C[3]);break;default:S=""}if(e.disposeData(x.dataId),S)throw e.disposeData(h.dataId),new Error(S);return h}function xse(r){return Vg(r,!0)}var eB={kernelName:ya,backendName:"wasm",setupFunc:zg,kernelFunc:xse};function yse(r){return Vg(r,!1)}var tB={kernelName:ba,backendName:"wasm",setupFunc:zg,kernelFunc:yse};var rB;function bse(r){rB=r.wasm.cwrap(ks,null,["number","number","number","number","number","number","number","number","array","number","number"])}function Cse(r){let{backend:t,inputs:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:a}=e,{outputShape:i}=o,p=t.makeOutput(i,a.dtype);if(y.sizeFromShape(i)===0)return p;let{sliceRank:u,numUpdates:c,sliceSize:l,strides:m,outputSize:d}=w.calculateShapes(s,n,i),f=t.dataIdMap.get(n.dataId).id,h=t.dataIdMap.get(s.dataId).id,g=t.dataIdMap.get(a.dataId).id,x=new Uint8Array(new Int32Array(m).buffer),b=t.dataIdMap.get(p.dataId).id;return rB(f,h,s.shape.length,g,we[a.dtype],u,c,l,x,d,b),p}var oB={kernelName:ks,backendName:"wasm",setupFunc:bse,kernelFunc:Cse};function wse(r){let{inputs:t,attrs:e,backend:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:a}=e,i=y.parseAxisParam(a,n.shape)[0],p=w.prepareSplitSize(n,s,i),u=new Array(n.shape.length).fill(0),c=n.shape.slice();return p.map(l=>{let m=[...c];m[i]=l;let d=Oo({inputs:{x:n},attrs:{begin:u,size:m},backend:o});return u[i]+=l,d})}var nB={kernelName:xa,backendName:"wasm",kernelFunc:wse};var sB=he(Ss);var aB=he(Xi);var Sse=!0,iB=Ue(Ns,Sse);var uB;function Ise(r){uB=r.wasm.cwrap(So,null,["number","number","number","number"])}function vse(r){let{backend:t,inputs:e,attrs:o}=r,{alpha:n}=o,{x:s}=e,a=t.dataIdMap.get(s.dataId).id,i=t.makeOutput(s.shape,s.dtype),p=t.dataIdMap.get(i.dataId).id;return uB(a,n,we[s.dtype],p),i}var pB={kernelName:So,backendName:"wasm",setupFunc:Ise,kernelFunc:vse};var cB;function kse(r){cB=r.wasm.cwrap(Ts,null,["number","array","number","array","array","array","array","array","number","number"])}function Nse(r){let{backend:t,inputs:e,attrs:o}=r,{x:n}=e,{begin:s,end:a,strides:i,beginMask:p,endMask:u,ellipsisMask:c,newAxisMask:l,shrinkAxisMask:m}=o,{finalShapeSparse:d,finalShape:f,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:C,strides:S}=ct.sliceInfo(n.shape,s,a,i,p,u,c,l,m),k;if(h)k=Vt({inputs:{x:n},backend:t,attrs:{shape:f}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let _=ct.computeOutShape(b,C,S),E=Oo({inputs:{x:n},backend:t,attrs:{begin:b,size:_}});k=Vt({inputs:{x:E},backend:t,attrs:{shape:f}}),t.disposeData(E.dataId)}else{let _=t.makeOutput(d,"float32"),E=t.dataIdMap.get(n.dataId).id,R=new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer),D=new Uint8Array(new Int32Array(b).buffer),P=new Uint8Array(new Int32Array(C).buffer),O=new Uint8Array(new Int32Array(S).buffer),M=new Uint8Array(new Int32Array(d).buffer),L=new Uint8Array(new Int32Array(y.computeStrides(d)).buffer),B=t.dataIdMap.get(_.dataId).id;cB(E,R,n.shape.length,D,P,O,M,L,d.length,B),k=Vt({inputs:{x:_},backend:t,attrs:{shape:f}}),t.disposeData(_.dataId)}return k}var lB={kernelName:Ts,backendName:"wasm",setupFunc:kse,kernelFunc:Nse};function Tse(r){let{backend:t,inputs:e,attrs:o}=r,{data:n,dataSplits:s}=e,{separator:a,nGramWidths:i,leftPad:p,rightPad:u,padWidth:c,preserveShortSequences:l}=o,m=t.readSync(n.dataId),d=t.readSync(s.dataId),[f,h]=gp(m,d,a,i,p,u,c,l),g=t.makeOutput([f.length],"string"),x=t.dataIdMap.get(g.dataId);x.stringBytes=f;let b=t.makeOutput(s.shape,"int32");return t.typedArrayFromHeap(b).set(h),[g,b]}var mB={kernelName:Ca,backendName:"wasm",kernelFunc:Tse};function _se(r){let{backend:t,inputs:e,attrs:o}=r,{input:n,delimiter:s}=e,{skipEmpty:a}=o,i=t.readSync(n.dataId),p=t.readSync(s.dataId),[u,c,l]=xp(i,p[0],a),m=c.length,d=t.makeOutput([m,2],"int32");t.typedArrayFromHeap(d).set(u);let h=t.makeOutput([m],"string"),g=t.dataIdMap.get(h.dataId);g.stringBytes=c;let x=t.makeOutput([2],"int32");return t.typedArrayFromHeap(x).set(l),[d,h,x]}var dB={kernelName:Yi,backendName:"wasm",kernelFunc:_se};function $se(r){let{backend:t,inputs:e,attrs:o}=r,{input:n}=e,{numBuckets:s}=o,a=t.readSync(n.dataId),i=yp(a,s),p=t.makeOutput(n.shape,"int32");return t.typedArrayFromHeap(p).set(i),p}var fB={kernelName:Qi,backendName:"wasm",kernelFunc:$se};var Ese=!0,hB=Ue(_s,Ese);var gB;function Rse(r){gB=r.wasm.cwrap(Is,null,["number","number","number","number"])}function Dse(r){let{backend:t,inputs:e,attrs:o}=r,{axis:n,keepDims:s}=o,{x:a}=e,i=t.dataIdMap.get(a.dataId).id,p=i,u=a,{transposed:c,axes:l,originalAxes:m,inputWasTransposed:d}=_r(a,n,t),f=l;if(d){let C=t.dataIdMap.get(c.dataId).id;C!==i&&(u=c,p=C,f=w.getInnerMostAxes(f.length,u.shape.length))}w.assertAxesAreInnerMostDims("sum",f,u.shape.length);let[h,g]=w.computeOutAndReduceShapes(u.shape,f),x=y.sizeFromShape(g),b=t.makeOutput(h,u.dtype);if(y.sizeFromShape(u.shape)!==0){let C=t.dataIdMap.get(b.dataId).id;gB(p,x,we[b.dtype],C)}if(d&&t.disposeData(c.dataId),s){let C=w.expandShapeToKeepDim(b.shape,m);b.shape=C}return b}var xB={kernelName:Is,backendName:"wasm",setupFunc:Rse,kernelFunc:Dse};var yB=he($s);var bB=he(Es);var CB;function Ase(r){CB=r.wasm.cwrap(fs,null,["number","number","number","number","number","number","array","number","number","number"])}function Fse(r){let{backend:t,inputs:e,attrs:o}=r,{tensor:n,indices:s,updates:a}=e,{}=o,i=t.makeOutput(n.shape,n.dtype);if(y.sizeFromShape(n.shape)===0)return i;let{sliceRank:p,numUpdates:u,sliceSize:c,strides:l,outputSize:m}=hu.calculateShapes(a,s,n.shape),f=t.dataIdMap.get(s.dataId).id,g=t.dataIdMap.get(a.dataId).id,b=t.dataIdMap.get(n.dataId).id,C=new Uint8Array(new Int32Array(l).buffer),S=t.dataIdMap.get(i.dataId).id;return CB(f,g,we[a.dtype],p,u,c,C,m,S,b),i}var wB={kernelName:fs,backendName:"wasm",setupFunc:Ase,kernelFunc:Fse};var SB;function Pse(r){SB=r.wasm.cwrap(po,null,["number","array","number","array","number","number"])}function Ose(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,s=e.dataIdMap.get(n.dataId).id,{reps:a}=o,i=new Array(n.shape.length);for(let m=0;m<i.length;m++)i[m]=n.shape[m]*a[m];let p=new Uint8Array(new Int32Array(n.shape).buffer),u=new Uint8Array(new Int32Array(i).buffer),c=e.makeOutput(i,n.dtype),l=e.dataIdMap.get(c.dataId).id;return SB(s,p,n.shape.length,u,i.length,we[c.dtype],l),c}var IB={kernelName:po,backendName:"wasm",setupFunc:Pse,kernelFunc:Ose};var vB;function Mse(r){vB=r.wasm.cwrap(Rs,null,["number","array","number","number","number","bool","number","number"])}var Lse=({inputs:r,backend:t,attrs:e})=>{let{x:o}=r,{k:n,sorted:s}=e,a=t.dataIdMap.get(o.dataId).id,i=new Uint8Array(new Int32Array(o.shape).buffer),p=o.shape.slice();p[p.length-1]=n;let u=t.makeOutput(p,o.dtype),c=t.dataIdMap.get(u.dataId).id,l=t.makeOutput(p,"int32"),m=t.dataIdMap.get(l.dataId).id;return vB(a,i,o.shape.length,we[o.dtype],n,s,c,m),[u,l]},kB={kernelName:Rs,backendName:"wasm",setupFunc:Mse,kernelFunc:Lse};var NB;function Bse(r){NB=r.wasm.cwrap(Ds,null,["number","number","bool","number","number","number","number","number","number","array","number","array","number","number","number","number","number"])}function zse(r){let{backend:t,inputs:e,attrs:o}=r,{image:n,transforms:s}=e,{interpolation:a,fillMode:i,fillValue:p,outputShape:u}=o,[c,l,m,d]=n.shape,[f,h]=u!=null?u:[l,m],g=[c,f,h,d],x=new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer),b=new Uint8Array(new Int32Array(y.computeStrides(g)).buffer),C=t.makeOutput(g,n.dtype),S=t.dataIdMap.get(C.dataId).id,_=t.dataIdMap.get(n.dataId).id,R=t.dataIdMap.get(s.dataId).id,D=a==="nearest"?1:2,P;switch(i){case"constant":P=1;break;case"reflect":P=2;break;case"wrap":P=3;break;case"nearest":P=4;break;default:P=1;break}return NB(_,R,s.shape[0]>1,c,f,h,d,m,l,x,n.shape.length-1,b,g.length-1,D,P,p,S),C}var TB={kernelName:Ds,backendName:"wasm",setupFunc:Bse,kernelFunc:zse};function Vse(r){let{inputs:t,attrs:e,backend:o}=r,{axis:n}=e,{x:s}=t,{outputValues:a,outputShape:i,indices:p}=bp(o.readSync(s.dataId),n,s.shape,s.dtype);return[o.makeOutput(i,s.dtype,void 0,a),o.makeOutput([p.length],"int32",void 0,p)]}var _B={kernelName:Zi,backendName:"wasm",kernelFunc:Vse};function Wse(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let a=n.shape[s],i=n.shape.length,p=new Array(i-1),u=0;for(let d=0;d<i;d++)d!==s&&(p[u++]=n.shape[d]);let c=new Array(a),l=new Array(i).fill(0),m=n.shape.slice();m[s]=1;for(let d=0;d<c.length;d++)l[s]=d,c[d]=Oo({inputs:{x:n},attrs:{begin:l,size:m},backend:e});return c.map(({dataId:d,dtype:f})=>({dataId:d,dtype:f,shape:p}))}var $B={kernelName:wa,backendName:"wasm",kernelFunc:Wse};function Use(r){let{inputs:{x:t},backend:e}=r,o=e.makeOutput(t.shape,t.dtype);return e.typedArrayFromHeap(o).fill(0),o}var EB={kernelName:Sa,backendName:"wasm",kernelFunc:Use};var Gse=[hP,gP,xP,yP,bP,wP,NP,_P,$P,EP,RP,DP,AP,FP,PP,MP,UP,BP,VP,KP,jP,YP,QP,ZP,JP,eO,rO,oO,sO,iO,pO,lO,dO,fO,hO,xO,bO,wO,IO,kO,TO,$O,RO,AO,PO,OO,LO,BO,zO,VO,WO,UO,GO,KO,qO,jO,YO,ZO,eM,rM,nM,sM,aM,SP,iM,uM,pM,lM,mM,dM,hM,xM,gM,yM,bM,CM,wM,IM,kM,TM,_M,EM,DM,FM,OM,LM,zM,WM,UM,HM,XM,YM,QM,ZM,eL,rL,nL,sL,iL,uL,pL,Bg,lL,dL,hL,gL,xL,yL,bL,CL,GP,SL,vL,NL,_L,EL,DL,AL,FL,OL,LL,zL,VL,UL,GL,HL,KL,qP,qM,qL,jL,YL,ZL,eB,tB,oB,nB,sB,aB,iB,pB,lB,mB,dB,fB,hB,xB,yB,bB,wB,IB,kB,TB,vP,_B,$B,EB];for(let r of Gse)ri(r);var Lv=A();Lv.registerFlag("WASM_HAS_SIMD_SUPPORT",async()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]))}catch(r){return!1}});Lv.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT",async()=>{if(Lv.get("IS_NODE"))return!1;try{return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch(r){return!1}});var Kv=Kp(FB()),zB=Kp(OB()),qv=Kp(MB());var LB=Kv.default||Kv,Hse=qv.default||qv,pm=class extends ao{constructor(t){super(),this.wasm=t,this.dataIdNextNumber=1,this.wasm.tfjs.initWithThreadsCount(WB),Hv=this.wasm.tfjs.getThreadsCount(),this.dataIdMap=new zo(this,pr())}write(t,e,o){let n={id:this.dataIdNextNumber++};return this.move(n,t,e,o,1),n}numDataIds(){return this.dataIdMap.numDataIds()}async time(t){let e=y.now();return t(),{kernelMs:y.now()-e}}move(t,e,o,n,s){let a=this.dataIdNextNumber++;if(n==="string"){let c=e;this.dataIdMap.set(t,{id:a,stringBytes:c,shape:o,dtype:n,memoryOffset:null,refCount:s});return}let i=y.sizeFromShape(o),p=i*y.bytesPerElement(n),u=this.wasm._malloc(p)>>>0;this.dataIdMap.set(t,{id:a,memoryOffset:u,shape:o,dtype:n,refCount:s}),this.wasm.tfjs.registerTensor(a,i,u),e!=null&&this.wasm.HEAPU8.set(new Uint8Array(e.buffer,e.byteOffset,p),u)}async read(t){return this.readSync(t)}readSync(t,e,o){let{memoryOffset:n,dtype:s,shape:a,stringBytes:i}=this.dataIdMap.get(t);if(s==="string")return(e==null||e===0)&&(o==null||o>=i.length)?i:i.slice(e,o);e=e||0,o=o||y.sizeFromShape(a);let p=y.bytesPerElement(s),u=this.wasm.HEAPU8.slice(n+e*p,n+o*p);return qse(u.buffer,s)}disposeData(t,e=!1){if(this.dataIdMap.has(t)){let o=this.dataIdMap.get(t);if(o.refCount--,!e&&o.refCount>0)return!1;this.wasm._free(o.memoryOffset),this.wasm.tfjs.disposeData(o.id),this.dataIdMap.delete(t)}return!0}refCount(t){return this.dataIdMap.has(t)?this.dataIdMap.get(t).refCount:0}incRef(t){let e=this.dataIdMap.get(t);e!=null&&e.refCount++}floatPrecision(){return 32}getMemoryOffset(t){return this.dataIdMap.get(t).memoryOffset}dispose(){this.wasm.tfjs.dispose(),"PThread"in this.wasm&&this.wasm.PThread.terminateAllThreads(),this.wasm=null}memory(){return{unreliable:!1}}makeOutput(t,e,o,n){let s;if(o==null)s=this.write(n!=null?n:null,t,e);else{let a=this.dataIdNextNumber++;s={id:a},this.dataIdMap.set(s,{id:a,memoryOffset:o,shape:t,dtype:e,refCount:1});let i=y.sizeFromShape(t);this.wasm.tfjs.registerTensor(a,i,o)}return{dataId:s,shape:t,dtype:e}}typedArrayFromHeap({shape:t,dtype:e,dataId:o}){let n=this.wasm.HEAPU8.buffer,{memoryOffset:s}=this.dataIdMap.get(o),a=y.sizeFromShape(t);switch(e){case"float32":return new Float32Array(n,s,a);case"int32":return new Int32Array(n,s,a);case"bool":return new Uint8Array(n,s,a);default:throw new Error(`Unknown dtype ${e}`)}}};function Kse(r){return(t,e)=>(y.fetch(r,{credentials:"same-origin"}).then(o=>{o.ok||t.env.a(`failed to load wasm binary file at '${r}'`),o.arrayBuffer().then(n=>{WebAssembly.instantiate(n,t).then(s=>{e(s.instance,s.module)})})}),{})}function BB(r,t,e){if(Gg!=null)return Gg;let o="tfjs-backend-wasm.wasm";return r&&t?o="tfjs-backend-wasm-threaded-simd.wasm":r&&(o="tfjs-backend-wasm-simd.wasm"),im!=null&&im[o]!=null?im[o]:e+o}async function VB(){let[r,t]=await Promise.all([A().getAsync("WASM_HAS_SIMD_SUPPORT"),A().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);return new Promise((e,o)=>{let n={};n.locateFile=(i,p)=>{if(i.endsWith(".worker.js")){let u=zB.wasmWorkerContents.replace(/\n/g,"\\n"),c=new Blob([u],{type:"application/javascript"});return URL.createObjectURL(c)}return i.endsWith(".wasm")?BB(r,t,am!=null?am:p):p+i},jv&&(n.instantiateWasm=Kse(BB(r,t,am!=null?am:"")));let s=!1;n.onAbort=()=>{if(s||um)return;um=!0,o({message:"Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers"})};let a;t&&r&&Gg==null?(n.mainScriptUrlOrBlob=new Blob(["var WasmBackendModuleThreadedSimd = "+LB.toString()],{type:"text/javascript"}),a=LB(n)):a=Hse(n),a.then(i=>{s=!0,um=!1;let p=null;i.tfjs={init:i.cwrap("init",null,[]),initWithThreadsCount:i.cwrap("init_with_threads_count",null,["number"]),getThreadsCount:i.cwrap("get_threads_count","number",[]),registerTensor:i.cwrap("register_tensor",null,["number","number","number"]),disposeData:i.cwrap("dispose_data",p,["number"]),dispose:i.cwrap("dispose",p,[])},e({wasm:i})}).catch(o)})}function qse(r,t){switch(t){case"float32":return new Float32Array(r);case"int32":return new Int32Array(r);case"bool":return new Uint8Array(r);default:throw new Error(`Unknown dtype ${t}`)}}var jse=["tfjs-backend-wasm.wasm","tfjs-backend-wasm-simd.wasm","tfjs-backend-wasm-threaded-simd.wasm"],Gg=null,am=null,im={},um=!1,jv=!1;function Xse(r,t=!1){if(Pw("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."),um)throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");Gg=r,jv=t}function Yse(r,t=!1){if(um)throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");if(typeof r=="string")am=r;else{im=r;let e=jse.filter(o=>im[o]==null);if(e.length>0)throw new Error(`There were no entries found for the following binaries: ${e.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`)}jv=t}var WB=-1,Hv=-1;function Qse(r){WB=r}function Zse(){if(Hv===-1)throw new Error("WASM backend not initialized.");return Hv}var Jse="4.11.0";var eae=2;su("wasm",async()=>{let{wasm:r}=await VB();return new pm(r)},eae);var xo=A();xo.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE",()=>15);xo.registerFlag("WEBGPU_CPU_FORWARD",()=>!0);xo.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE",()=>-1);xo.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE",()=>!0);xo.registerFlag("WEBGPU_USE_LOW_POWER_GPU",()=>!1);xo.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e3);xo.registerFlag("WEBGPU_USE_PROFILE_TOOL",()=>!1);xo.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE",()=>!0);xo.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG",()=>!1);xo.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL",()=>-1);xo.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER",()=>!1);xo.registerFlag("WEBGPU_PRINT_SHADER",()=>"");xo.registerFlag("WEBGPU_ENGINE_COMPILE_ONLY",()=>!1);var Hg=class{constructor(t){t&&(this.vendor=t.vendor,this.architecture=t.architecture,this.intelGPUGeneration=this.getIntelGPUGeneration())}getIntelGPUGeneration(){if(this.isIntel()){if(this.architecture.startsWith("gen"))return Number(this.architecture.match(/\d+/));if(this.architecture.startsWith("xe"))return 12}return 0}isIntel(){return this.vendor==="intel"}};var Kg=class{constructor(t){this.device=t,this.numUsedBuffers=0,this.numFreeBuffers=0,this.freeBuffers=new Map,this.usedBuffers=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireBuffer(t,e,o=!1,n=!0){let s,a=UB(t,e);return n?(this.freeBuffers.has(a)||this.freeBuffers.set(a,[]),this.freeBuffers.get(a).length>0?(s=this.freeBuffers.get(a).pop(),this.numFreeBuffers--):(s=this.device.createBuffer({size:t,usage:e,mappedAtCreation:o}),this.numBytesAllocated+=t)):(s=this.device.createBuffer({size:t,usage:e,mappedAtCreation:o}),this.numBytesAllocated+=t),this.usedBuffers.has(a)||this.usedBuffers.set(a,[]),this.usedBuffers.get(a).push(s),this.numUsedBuffers++,this.numBytesUsed+=t,s}releaseBuffer(t,e=!0){if(this.freeBuffers.size===0)return;let o=t.size,n=t.usage,s=UB(o,n),a=this.usedBuffers.get(s),i=a.indexOf(t);if(i<0)throw new Error("Cannot find the buffer in buffer manager");a[i]=a[a.length-1],a.pop(),this.numUsedBuffers--,this.numBytesUsed-=o,e?(this.freeBuffers.get(s).push(t),this.numFreeBuffers++):(t.destroy(),this.numBytesAllocated-=o)}getNumUsedBuffers(){return this.numUsedBuffers}getNumFreeBuffers(){return this.numFreeBuffers}dispose(){this.freeBuffers.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.usedBuffers.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.freeBuffers=new Map,this.usedBuffers=new Map,this.numUsedBuffers=0,this.numFreeBuffers=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function UB(r,t){return`${r}_${t}`}var qg=class{constructor(t){this.device=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures=new Map,this.usedTextures=new Map,this.numBytesUsed=0,this.numBytesAllocated=0}acquireTexture(t,e,o,n){let s=HB(o),a=t*e*s,i=GB(t,e,o,n);if(this.freeTextures.has(i)||this.freeTextures.set(i,[]),this.usedTextures.has(i)||this.usedTextures.set(i,[]),this.numBytesUsed+=a,this.numUsedTextures++,this.freeTextures.get(i).length>0){this.numFreeTextures--;let u=this.freeTextures.get(i).shift();return this.usedTextures.get(i).push(u),u}this.numBytesAllocated+=a;let p=this.device.createTexture({size:[t,e],format:o,usage:n});return this.usedTextures.get(i).push(p),p}releaseTexture(t){if(this.freeTextures.size===0)return;let e=t.width,o=t.height,n=t.format,s=t.usage,a=GB(e,o,n,s);this.freeTextures.has(a)||this.freeTextures.set(a,[]),this.freeTextures.get(a).push(t),this.numFreeTextures++,this.numUsedTextures--;let i=this.usedTextures.get(a),p=i.indexOf(t);if(p<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(p,1);let u=HB(n),c=e*o*u;this.numBytesUsed-=c}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){this.freeTextures.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.usedTextures.forEach((t,e)=>{t.forEach(o=>{o.destroy()})}),this.freeTextures=new Map,this.usedTextures=new Map,this.numUsedTextures=0,this.numFreeTextures=0,this.numBytesUsed=0,this.numBytesAllocated=0}};function GB(r,t,e,o){return`${r}_${t}_${e}_${o}`}function HB(r){if(r==="rgba8unorm")return 16;throw new Error(`${r} is not supported!`)}function KB(r,t){if(Math.max(...r)>5)throw new Error("Cannot symbolically compute strides for rank > 6 tensor.");let e=r.length,o="xyzwuv",n=r.map(a=>`${t}.${o[a]}`),s=new Array(e-1);s[e-2]=n[e-1];for(let a=e-3;a>=0;--a)s[a]=`(${s[a+1]} * ${n[a+1]})`;return s}var Qr=(r,t,e)=>e==="int32"?`atomicAdd(${r}, bitcast<i32>(${t}));`:`
          {
            var oldValue = 0;
            loop {
              let newValueF32 = bitcast<f32>(oldValue) + (${t});
              let newValue = bitcast<i32>(newValueF32);
              let res = atomicCompareExchangeWeak(${r}, oldValue, newValue);
              if res.exchanged {
                break;
              }
              oldValue = res.old_value;
            }
          }`;var Ii;(function(r){r[r.FROM_PIXELS=0]="FROM_PIXELS",r[r.DRAW=1]="DRAW"})(Ii||(Ii={}));var YB=(r,t,e,o,n)=>{let s={dtype:o.dtype,shape:o.shape},a=rae(e,s,t),i=r.createShaderModule({code:a,label:t.constructor.name}),p=A().get("WEBGPU_PRINT_SHADER");if(p!==""){p=p.toLowerCase();let u=p.split(",");(p==="all"||u.some(c=>t.shaderKey.toLowerCase().includes(c)))&&(console.group(t.shaderKey),console.debug(a),console.groupEnd())}return n?r.createComputePipelineAsync({compute:{module:i,entryPoint:"_start"},label:t.constructor.name,layout:"auto"}):r.createComputePipeline({compute:{module:i,entryPoint:"_start"},label:t.constructor.name,layout:"auto"})},Ae=(r,t="f32")=>{switch(r){case 1:return`${t}`;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${r}-component ${t} is not supported.`)}};function ht(r){if(r<=1)return"i32";if(r===2)return"vec2<i32>";if(r===3)return"vec3<i32>";if(r===4)return"vec4<i32>";if(r===5)return"vec5";if(r===6)return"vec6";throw Error(`GPU for rank ${r} is not yet supported`)}function Mo(r){if(r===0)return"x";if(r===1)return"y";if(r===2)return"z";if(r===3)return"w";if(r===4)return"u";if(r===5)return"v";throw Error(`Index ${r} is not yet supported`)}function G(...r){let t;switch(r.length){case 0:t=`
        fn main()
      `;break;case 1:t=`
        fn main(${r[0]} : i32)
      `;break;default:throw Error("Unreachable")}return t}function qB(r,t){let e;return e=`
     ${tae(t)}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(workgroup_id) WorkgroupId : vec3<u32>,
                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
        localId = LocalId;
        localIndex = LocalIndex;
        globalId = GlobalId;
        numWorkgroups = NumWorkgroups;
        workgroupId = WorkgroupId;
        ${r?"main(getGlobalIndex());":"main();"};
      }
    `,e}function tae(r){return`
  @compute @workgroup_size(${r.workgroupSize[0]}, ${r.workgroupSize[1]}, ${r.workgroupSize[2]})
`}function rae(r,t,e){let o=[],n=e.workgroupSize[0]*e.workgroupSize[1]*e.workgroupSize[2];if(e.outputComponent=e.outputComponent?e.outputComponent:1,o.push(`

      var<private> localId: vec3<u32>;
      var<private> localIndex: u32;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;
      var<private> workgroupId: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${ZB(e)?"  return i32(globalId.x);":`  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +
                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${n}u +
                localIndex);
        `}
      }
    `),e.pixelsOpType!=null){let f=e.pixelsOpType===Ii.FROM_PIXELS?`@group(0) @binding(0) var<storage, read_write> result: array<${Nu(t.dtype,e.outputComponent)}>;`:`@group(0) @binding(1) var<storage, read> inBuf : array<${Nu(r[0].dtype,e.outputComponent)}>;`,h=t.shape.length===3?"vec2<i32>":"i32";o.push(`
        struct Uniform {
          outShapeStrides : ${h},
          size            : i32,
          numChannels     : i32,
          alpha           : f32,
        };

        ${f}
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `);let g=XB(e);return[jB,o.join(`
`),cm(t.shape),e.getUserCode(),qB(g,e)].join(`
`)}let s,a,i="struct Uniforms { NAN : f32, INFINITY : f32, ";e.variableNames.forEach((f,h)=>{let g=ht(r[h].shape.length);i+=`${f.charAt(0).toLowerCase()+f.slice(1)}Shape : ${g}, `,s=r[h].shape.length-1,a=ht(s),i+=`${f.charAt(0).toLowerCase()+f.slice(1)}ShapeStrides: ${a}, `});let p=ht(t.shape.length);i+=`outShape : ${p}, `,s=t.shape.length-1,a=ht(s),i+=`
         outShapeStrides: ${a}, `,e.size&&(i+="size : i32, "),e.uniforms&&(i+=e.uniforms),i+="};",i=cae(i),o.push(i),e.atomic?o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `):o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${Nu(t.dtype,e.outputComponent)}>;
    `),e.variableNames.forEach((f,h)=>{o.push(`
      @group(0) @binding(${1+h}) var<storage, read> ${f}: array<${e.variableComponents?Nu(r[h].dtype,e.variableComponents[h]):Nu(r[h].dtype,e.outputComponent)}>;
        `)}),i!==""&&o.push(`
      @group(0) @binding(${1+e.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);let u=iae(t.shape,e.dispatchLayout),c=[jB,o.join(`
`)+oae,cm(t.shape),u,uae(t.shape.length)];e.atomic||c.push(pae(t.shape,t.dtype,e.outputComponent)),e.variableNames.forEach((f,h)=>{c.push(`${cm(r[h].shape,f)}`)});let l=r.map((f,h)=>aae(f,t.shape,e.variableComponents?e.variableComponents[h]:e.outputComponent,e.dispatchLayout.x.length===t.shape.length)).join(`
`);c.push(l),c.push(e.getUserCode());let m=XB(e);return c.push(qB(m,e)),c.join(`
`)}function QB(r,t,e){let o=r.shaderKey;if(r.pixelsOpType!=null)return o;let n=[],s=[];t.forEach(c=>{n.push(c.shape),s.push(c.dtype)}),n.push(e.shape),s.push(e.dtype);let a=t.map(c=>w.getBroadcastDims(c.shape,e.shape)),i=t.map(c=>y.arraysEqual(c.shape,e.shape)).join("_"),p=a.map(c=>c.join("_")).join(";"),u=ZB(r)?"flatDispatch":"";return o+="_"+(r.workgroupSize?r.workgroupSize.join(","):"")+n.map(c=>c.length).join(",")+s.join(",")+r.variableNames.join(",")+p+i+u,o}var jB=`
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);
    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);
  }
`,oae=`
  fn isinf(val: f32) -> bool {
    return abs(val) == uniforms.INFINITY;
  }
`;function cm(r,t=""){let e=r.length,o=t!==""?`get${t.charAt(0).toUpperCase()+t.slice(1)}CoordsFromIndex`:"getCoordsFromIndex",n=t!==""?`${t.charAt(0).toLowerCase()+t.slice(1)}ShapeStrides`:"outShapeStrides";if(e<=1)return`fn ${o}(index : i32) -> i32 { return index; }`;let s=y.computeStrides(r),a=ht(e),i=[];for(let u=0;u<e;u++)i.push(`d${u}`);if(s.length===1)return`    fn ${o}(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.${n}; let d1 = index - d0 * uniforms.${n};
      return vec2<i32>(d0, d1);
    }`;let p;return p="var index2 = index;"+s.map((u,c)=>{let l=`let ${i[c]} = index2 / uniforms.${n}.${Mo(c)}`,m=c===s.length-1?`let ${i[c+1]} = index2 - ${i[c]} * uniforms.${n}.${Mo(c)}`:`index2 = index2 - ${i[c]} * uniforms.${n}.${Mo(c)}`;return`${l}; ${m};`}).join(""),`
    fn ${o}(index : i32) -> ${a} {
      ${p}
      return ${a}(${i.join(",")});
    }
  `}function nae(r,t){let e=r.name,o=r.shape.length,n=ht(o),s="get"+e.charAt(0).toUpperCase()+e.slice(1),a=["d0","d1","d2","d3","d4","d5"].slice(0,o),i=a.map(c=>`${c} : i32`).join(", ");if(o<1)return`
      fn ${s}() -> ${Ae(t)} {
        return ${Ae(t)}(${e}[0]);
      }
    `;let p=`uniforms.${e.charAt(0).toLowerCase()+e.slice(1)}Shape`,u=`${o}D`;return o===0&&(u="1D"),`
    fn ${s}(${i}) -> ${Ae(t)} {
      return ${Ae(t)}(${e}[getIndexFromCoords${u}(${n}(${a.join(",")}),
        ${p})${t===1?"":` / ${t}`}]);
    }
   `}function sae(r,t,e,o){let n=r.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"ByOutput",i=r.shape.length,p=t.length,u=ht(p);if(y.arraysEqual(r.shape,t)&&o)return`
    fn ${a}Index(globalIndex : i32) -> ${Ae(e)} {
      return ${Ae(e)}(${n}[globalIndex]);
    }

    fn ${a}Coords(coords : ${u}) -> ${Ae(e)} {
      return ${Ae(e)}(${n}[${p>1?"getOutputIndexFromCoords(coords)":"coords"}${e===1?"":` / ${e}`}]);
    }
    `;let c=w.getBroadcastDims(r.shape,t),l=p-i,m="";if(i===0)return`
    fn ${a}Index(globalIndex : i32) -> ${Ae(e)}{
      return get${s}();
    }

    fn ${a}Coords(coords : ${u}) -> ${Ae(e)}{
      return get${s}();
    }
  `;p<2&&c.length>=1?m="coords = 0;":m=c.map(g=>`coords.${Mo(g+l)} = 0;`).join(`
`);let d="";if(p<2&&i>0)d="coords";else if(p>1){let g=ht(i),x=r.shape.map((b,C)=>`coords.${Mo(C+l)}`).join(", ");d=`${g}(${x})`}else d="coords";let f=`uniforms.${n.charAt(0).toLowerCase()+n.slice(1)}Shape`,h=`${i}D`;return`
  fn ${a}Index(globalIndex : i32) -> ${Ae(e)} {
    var coords = getCoordsFromIndex(globalIndex);
    ${m}
    return ${Ae(e)}(${n}[getIndexFromCoords${h}(${d}, ${f})${e===1?"":` / ${e}`}]);
  }

  fn ${a}Coords(coordsIn : ${u}) -> ${Ae(e)} {
    var coords = coordsIn;
    ${m}
    return ${Ae(e)}(${n}[getIndexFromCoords${h}(${d}, ${f})${e===1?"":` / ${e}`}]);
  }
`}function aae(r,t,e,o){let n=nae(r,e);return r.shape.length<=t.length&&(n+=sae(r,t,e,o)),n}function iae(r,t){let{x:e,y:o=[],z:n=[]}=t,s=r.length,a=e.length+o.length+n.length;if(a!==s)return"";if(e.length===s)return`fn getOutputCoords() -> ${ht(s)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;let i="",p=[e,o,n];for(let m=0;m<p.length;m++){let d=p[m];if(d.length!==0)if(d.length===1)i+=`let d${d[0]} = i32(globalId[${m}]);`;else{let f=KB(d,"uniforms.outShape");i+=`var index${m} = i32(globalId[${m}]);`;for(let h=0;h<f.length;h++)i+=`let d${d[h]} = index${m} / ${f[h]};`,h===f.length-1?i+=`let d${d[h+1]} = index${m} - d${d[h]} * ${f[h]};`:i+=`index${m} = index${m} - d${d[h]} * ${f[h]};`}}let u=[];for(let m=0;m<a;m++)u.push(`d${m}`);let c=ht(a),l=`fn getOutputCoords() -> ${c} {
  ${i}
`;return u.length===0?l+=`return ${c}(0); }`:l+=`return ${c}(${u.join(",")}); }`,l}function uae(r){let t="";switch(r){case 0:case 1:t+=`
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;break;case 2:t+=`
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;break;case 3:t+=`
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;break;case 4:t+=`
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;break;case 5:t+=`
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;break;case 6:t+=`
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;break;default:y.assert(!1,()=>`Unsupported ${r}D shape`);break}return t}function ZB(r){return r.dispatch[1]===1&&r.dispatch[2]===1}function Nu(r,t=1){if(r==="float32")return Ae(t,"f32");if(r==="int32"||r==="bool")return Ae(t,"i32");throw new Error(`type ${r} is not supported.`)}function pae(r,t,e){let o=r.length,n=Nu(t,e),s=`fn setOutputAtIndex(flatIndex : i32, value : ${Ae(e)}) {
      result[flatIndex] = ${n}(value);
    }

    fn setOutputAtIndexI32(flatIndex : i32, value : ${Ae(e,"i32")}) {
      result[flatIndex] = ${n}(value);
    }
    `;if(o>=2){let a=["d0","d1","d2","d3","d4","d5"].slice(0,o),i=ht(o);s+=`
      fn setOutputAtCoords(${a.map(p=>`${p} : i32`).join(", ")}, value : ${Ae(e)}) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndex(flatIndex${e===1?"":` / ${e}`}, value);
      }
      fn setOutputAtCoordsI32(${a.map(p=>`${p} : i32`).join(", ")}, value : ${Ae(e,"i32")}) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndexI32(flatIndex${e===1?"":` / ${e}`}, value);
      }
    `}return s}function cae(r){let t=/(\w+)\s*:\s*vec(5|6)/g;r=r.replace(t,o=>"@align(16) "+o);let e=/vec(5|6)\s*,\s*(\w+)/g;return r=r.replace(e,(o,n,s)=>`vec${n}, @align(16) ${s}`),r}function XB(r){return!(r.dispatchLayout.hasOwnProperty("y")&&r.dispatchLayout.y.length!==0||r.dispatchLayout.hasOwnProperty("z")&&r.dispatchLayout.z.length!==0)}var Yv={};qe(Yv,{GPUBytesPerElement:()=>jg,MatMulProgramType:()=>Lo,assertNotComplex:()=>fm,computeDispatch:()=>H,computeWorkPerThreadForConv2d:()=>mm,computeWorkgroupInfoForMatMul:()=>Xv,computeWorkgroupSizeForConv2d:()=>lm,flatDispatchLayout:()=>X,isWebGPUSupported:()=>dm,tilesFitEvenlyIntoShape:()=>mae});var Ap=r=>{let t=1;for(let e=0;e<r.length;e++)t*=r[e];return t};function mae(r,t){if(r.length!==t.length)throw new Error(`Cannot compute whether rank ${r.length} tiles fit evenly into rank ${t.length} shape - ranks must match.`);return t.every((e,o)=>e%r[o]===0)}function H(r,t,e=[1,1,1],o=[1,1,1]){let[n,s,a]=[Math.ceil(Ap(r.x.map(i=>t[i]))/(e[0]*o[0])),r.y?Math.ceil(Ap(r.y.map(i=>t[i]))/(e[1]*o[1])):1,r.z?Math.ceil(Ap(r.z.map(i=>t[i]))/(e[2]*o[2])):1];return[n,s,a]}function Xv(r,t,e,o=!1){let n=[8,8,1],s=[4,4,1];return o||(r<=8&&(s[1]=1),t<=16&&e<=16&&(n[0]=4)),{workgroupSize:n,elementsPerThread:s}}function lm(r,t,e=!1){if(e)return[8,8,1];let o=Ap(r.x.map(s=>t[s])),n=Ap(r.y.map(s=>t[s]));return o<=4?[4,16,1]:n<=4?[16,4,1]:[16,16,1]}function mm(r,t,e=!1){if(e)return[4,4,1];let o=Ap(r.x.map(s=>t[s])),n=Ap(r.y.map(s=>t[s]));return o<=4?[1,2,1]:n<=4?[2,1,1]:[2,2,1]}function X(r){return{x:r.map((t,e)=>e)}}function jg(r){if(r==="float32"||r==="int32"||r==="bool"||r==="string")return 4;if(r==="complex64")return 8;throw new Error(`Unknown dtype ${r}`)}function dm(){return(typeof window!="undefined"||typeof WorkerGlobalScope!="undefined")&&!!navigator.gpu}function fm(r,t){Array.isArray(r)||(r=[r]),r.forEach(e=>{e!=null&&y.assert(e.dtype!=="complex64",()=>`${t} does not support complex64 tensors in the WebGPU backend.`)})}var Lo;(function(r){r[r.MatMulReduceProgram=0]="MatMulReduceProgram",r[r.MatMulSplitKProgram=1]="MatMulSplitKProgram",r[r.MatMulSmallOutputSizeProgram=2]="MatMulSmallOutputSizeProgram",r[r.MatMulPackedProgram=3]="MatMulPackedProgram",r[r.MatMulMax=4]="MatMulMax"})(Lo||(Lo={}));var dae=A().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD"),fae=(r,t)=>{let e=r.limits.maxComputeWorkgroupsPerDimension,o=t.dispatchLayout,n=t.dispatch;if(n.every(a=>a<=e))return n;y.assert(n[0]>e&&o.y===void 0&&o.z===void 0,()=>"Dispatch size exceeds WebGPU limits in Y or Z dimension.");let s=Math.ceil(Math.sqrt(n[0]));return s>e?(s=Math.ceil(Math.cbrt(n[0])),y.assert(s<=e,()=>"Total dispatch size exceeds WebGPU maximum."),[s,s,s]):[s,s,1]},Tu=class extends ao{nextDataId(){return Tu.nextDataId++}constructor(t,e){if(super(),this.commandQueueOwnedIds=new WeakSet,this.dispatchCountInPass=0,this.disposed=!1,this.downloadWaitMs=0,this.tensorDataPendingDisposal=[],this.queryResolveBuffer=null,this.querySet=null,this.querySetCount=2,this.stagingPendingDisposal=[],this.uniformPendingDisposal=[],this.uploadWaitMs=0,this.hasReadSyncWarned=!1,this.hasTimestampQueryWarned=!1,!dm())throw new Error("WebGPU is not supported on this device");this.pipelineCache={},this.device=t,this.queue=t.queue,this.commandEncoder=null,this.computePassEncoder=null,this.adapterInfo=new Hg(e),this.supportTimestampQuery=this.device.features.has("timestamp-query"),this.thresholdToIncreaseWorkgroups=this.adapterInfo.intelGPUGeneration>=12?16:8,this.bufferManager=new Kg(this.device),this.textureManager=new qg(this.device),this.tensorMap=new zo(this,pr()),A().getBool("WEBGPU_USE_PROFILE_TOOL")&&(this.dummyCanvas=document.createElement("canvas"),this.dummyCanvas.width=1,this.dummyCanvas.height=1,this.dummyContext=this.dummyCanvas.getContext("webgpu"),this.dummyContext.configure({device:t,format:"bgra8unorm"}),document.body.appendChild(this.dummyCanvas))}floatPrecision(){return 32}disposeData(t,e=!1){if(!this.tensorMap.has(t))return!0;let o=this.tensorMap.get(t);return e?o.refCount=0:o.refCount--,o.refCount>0?!1:(o.complexTensorInfos!=null&&(this.disposeData(o.complexTensorInfos.real.dataId),this.disposeData(o.complexTensorInfos.imag.dataId)),this.commandQueueOwnedIds.has(t)?(this.tensorDataPendingDisposal.push(t),!0):(this.releaseResource(t),this.tensorMap.delete(t),!0))}memory(){return{numBytesInGPU:this.bufferManager.numBytesUsed,numBytesAllocatedInGPU:this.bufferManager.numBytesAllocated,unreliable:!1}}releaseResource(t){let e=this.tensorMap.get(t);if(!(!e||!e.resource)){if(e.external){e.resource=null;return}e.resource instanceof GPUBuffer?this.bufferManager.releaseBuffer(e.resource):e.resource instanceof GPUTexture&&this.textureManager.releaseTexture(e.resource),e.resource=null}}refCount(t){return this.tensorMap.has(t)?this.tensorMap.get(t).refCount:0}incRef(t){let e=this.tensorMap.get(t);e.refCount++}decRef(t){if(this.tensorMap.has(t)){let e=this.tensorMap.get(t);e.refCount--}}write(t,e,o){if(o==="complex64"&&t!=null)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let n={id:this.nextDataId()};return this.tensorMap.set(n,{dtype:o,shape:e,values:t,refCount:1}),n}move(t,e,o,n,s){if(n==="complex64")throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.tensorMap.set(t,{dtype:n,shape:o,values:e,refCount:s})}submitQueue(){this.queue.submit([this.commandEncoder.finish()]),this.commandEncoder=null,this.dispatchCountInPass=0,this.commandQueueOwnedIds=new WeakSet,this.tensorDataPendingDisposal.forEach(t=>{this.releaseResource(t),this.tensorMap.delete(t)}),this.uniformPendingDisposal.forEach(t=>this.bufferManager.releaseBuffer(t)),this.stagingPendingDisposal.forEach(t=>this.bufferManager.releaseBuffer(t,!1)),this.tensorDataPendingDisposal=[],this.uniformPendingDisposal=[],this.stagingPendingDisposal=[]}ensureCommandEncoderReady(){this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder())}endComputePassEncoder(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}async checkCompileCompletionAsync(){let t;try{t=await Promise.all(Object.values(this.pipelineCache))}catch(e){throw new Error(e.message)}Object.keys(this.pipelineCache).map((e,o)=>{this.pipelineCache[e]=t[o]})}async getBufferData(t){if(A().getBool("WEBGPU_ENGINE_COMPILE_ONLY"))return console.warn("The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false"),null;let e=t.size,o=this.bufferManager.acquireBuffer(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(t,0,o,0,e),this.submitQueue(),await o.mapAsync(GPUMapMode.READ);let n=o.getMappedRange().slice(0);return o.unmap(),o!=null&&this.bufferManager.releaseBuffer(o),A().getBool("WEBGPU_USE_PROFILE_TOOL")&&(y.assert(this.dummyContext!==void 0,()=>"Fail to get context for profiling tool"),this.dummyContext.getCurrentTexture()),n}convertAndCacheOnCPU(t,e){let o=this.tensorMap.get(t);return o.values=e,o.values}readSync(t){let e=this.tensorMap.get(t),{values:o,complexTensorInfos:n}=e;if(o!=null||e.dtype==="string")return o;if(e.dtype==="complex64"){let h=this.readSync(n.real.dataId),g=this.readSync(n.imag.dataId),x=y.convertBackendValuesAndArrayBuffer(w.mergeRealAndImagArrays(h,g).buffer,"float32");return this.convertAndCacheOnCPU(t,x),x}this.hasReadSyncWarned||(this.hasReadSyncWarned=!0,console.warn("The performance of synchronously reading data from GPU to CPU is poor on the webgpu backend, please use asynchronous APIs instead."));let s=["opaque","premultiplied"],a=e.resource,i=a.size;y.assert(i%4===0,()=>"Because there is 4 bytes for one pixel, buffer size must be multiple of 4.");let p=i/4,u=new ArrayBuffer(i),c=256,l=256,m=s.map(h=>new OffscreenCanvas(c,l)),d=new OffscreenCanvas(c,l);this.endComputePassEncoder(),m.map((h,g)=>{let x=h.getContext("webgpu");return x.configure({device:this.device,format:"bgra8unorm",usage:GPUTextureUsage.COPY_DST,alphaMode:s[g]}),x.getCurrentTexture()}).map((h,g)=>{let x=c*4,b=(R,D,P)=>{this.ensureCommandEncoderReady(),this.commandEncoder.copyBufferToTexture({buffer:a,bytesPerRow:x,offset:P},{texture:h},{width:R,height:D}),this.submitQueue();let O=d.getContext("2d",{willReadFrequently:!0});O.clearRect(0,0,R,D),O.drawImage(m[g],0,0);let M=O.getImageData(0,0,R,D).data,L=s[g],B=new Uint8ClampedArray(u,P,R*D*4);for(let z=0;z<B.length;z+=4)if(L==="premultiplied")B[z+3]=M[z+3];else{let U=M[z];B[z]=M[z+2],B[z+1]=M[z+1],B[z+2]=U}},C=Math.floor(p/(c*l)),S=c,k=l,_=0;for(let R=0;R<C;R++)b(S,k,_),_+=c*l*4;let E=p%(c*l);k=Math.floor(E/c),k>0&&(b(S,k,_),_+=k*(c*4)),S=E%c,S>0&&b(S,1,_)});let f=y.convertBackendValuesAndArrayBuffer(u,e.dtype);return this.convertAndCacheOnCPU(t,f),f}async read(t){if(!this.tensorMap.has(t))throw new Error(`Tensor ${t} was not registered!`);let e=this.tensorMap.get(t),{values:o}=e;if(o!=null)return o;let n;if(e.dtype==="complex64"){let s=await Promise.all([this.read(e.complexTensorInfos.real.dataId),this.read(e.complexTensorInfos.imag.dataId)]),a=s[0],i=s[1];n=w.mergeRealAndImagArrays(a,i)}else{let s=await this.getBufferData(e.resource);n=y.convertBackendValuesAndArrayBuffer(s,e.dtype)}return this.convertAndCacheOnCPU(t,n),n}copyBuffer(t){let e=t.size,o=t.usage,n=this.bufferManager.acquireBuffer(e,o);return this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(t,0,n,0,e),this.submitQueue(),n}createTensorFromGPUData(t,e,o){let n=t.buffer;if(o==="complex64")throw new Error("Cannot write to a complex64 dtype. ");let s={id:this.nextDataId()};this.tensorMap.set(s,{dtype:o,shape:e,values:null,refCount:1,external:t.zeroCopy});let a=this.tensorMap.get(s),i=jg(a.dtype)*y.sizeFromShape(a.shape);if(t.buffer.size<i)throw new Error(`GPUBuffer size(${t.buffer.size}) is smaller than tensor size(${i})!`);if((t.buffer.usage&(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))!==(GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC))throw new Error("GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!");return t.zeroCopy!==!0&&(n=this.copyBuffer(n)),a.resource=n,pr().makeTensorFromDataId(s,e,o,this)}readToGPU(t){let e=this.tensorMap.get(t),{values:o,dtype:n,shape:s,resource:a}=e;if(n==="complex64")throw new Error("Does not support reading buffer for complex64 dtype.");if(a==null)throw o!=null?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");let i=a,p=i.size,u=i.usage,c=this.bufferManager.acquireBuffer(p,u);this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,c,0,p),this.submitQueue();let l=this.makeTensorInfo(s,n),m=pr().makeTensorFromTensorInfo(l),d=this.tensorMap.get(l.dataId);return d.resource=c,{tensorRef:m,buffer:c}}bufferSync(t){let e=this.readSync(t.dataId);if(t.dtype==="string")try{let o=e.map(n=>y.decodeString(n));return me(t.shape,t.dtype,o)}catch(o){throw new Error("Failed to decode encoded string bytes into utf-8")}return me(t.shape,t.dtype,e)}async time(t){!this.supportTimestampQuery&&!this.hasTimestampQueryWarned&&(console.warn("This device doesn't support timestamp-query extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis to try it again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled."),this.hasTimestampQueryWarned=!0);let e=this.activeTimers,o=[],n=!1;this.programTimersStack==null?(this.programTimersStack=o,n=!0):this.activeTimers.push(o),this.activeTimers=o,t();let s=y.flatten(this.activeTimers.map(u=>u.query)).filter(u=>u!=null),a=y.flatten(this.activeTimers.map(u=>u.name)).filter(u=>u!=null);this.activeTimers=e,n&&(this.programTimersStack=null);let i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},p=await Promise.all(s);return i.kernelMs=y.sum(p),i.getExtraProfileInfo=()=>p.map((u,c)=>({name:a[c],ms:u})).map(u=>`${u.name}: ${u.ms}`).join(", "),this.uploadWaitMs=0,this.downloadWaitMs=0,i}makeTensorInfo(t,e,o){return e==="string"&&o!=null&&o.length>0&&y.isString(o[0])&&(o=o.map(s=>y.encodeString(s))),{dataId:this.write(o,t,e),shape:t,dtype:e}}tensorToBinding(t){if(!t)return null;let o=this.tensorMap.get(t.dataId).resource;return o instanceof GPUBuffer?{buffer:o}:o instanceof GPUTexture?o.createView():o}uploadToGPU(t){let e=this.tensorMap.get(t);if(e.resource!=null)return;let o=jg(e.dtype)*y.sizeFromShape(e.shape),n,s=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST;if(e.values){if(n=this.bufferManager.acquireBuffer(o,s,!0),n.mapState==="unmapped"){let a=this.bufferManager.acquireBuffer(o,GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC,!0,!1),i=a.getMappedRange();e.dtype==="int32"||e.dtype==="bool"?new Int32Array(i).set(e.values):new Float32Array(i).set(e.values),a.unmap(),this.ensureCommandEncoderReady(),this.endComputePassEncoder(),this.commandEncoder.copyBufferToBuffer(a,0,n,0,o),this.stagingPendingDisposal.push(a)}else{let a=n.getMappedRange();e.dtype==="int32"||e.dtype==="bool"?new Int32Array(a).set(e.values):new Float32Array(a).set(e.values),n.unmap()}e.values=null}else n=this.bufferManager.acquireBuffer(o,s);e.resource=n}makeUniforms(t){let e=0,o=0,n=[],s=1;t.forEach(p=>{p.data.length===0&&(p.data=[1]);let u;switch(p.data.length){case 1:u=4;break;case 2:u=8;break;case 3:u=16;break;case 4:u=16;break;case 5:u=16;break;case 6:u=16;break;default:y.assert(!1,()=>`Unsupported ${p.data.length}D shape`)}(o===5||o===6)&&(u=16),u>s&&(s=u),e=Math.ceil(e/u)*u,o=p.data.length,n.push(e),e+=p.data.length*4}),e=Math.ceil(e/s)*s;let a=new ArrayBuffer(e);t.forEach((p,u)=>{let c=n[u];p.type==="int32"?new Int32Array(a,c,p.data.length).set(p.data):p.type==="uint32"?new Uint32Array(a,c,p.data.length).set(p.data):new Float32Array(a,c,p.data.length).set(p.data)});let i=this.bufferManager.acquireBuffer(e,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);return this.queue.writeBuffer(i,0,a,0,e),this.uniformPendingDisposal.push(i),{offset:0,size:e,buffer:i}}runWebGPUProgram(t,e,o,n,s){if(s||(s=this.makeTensorInfo(t.outputShape,o)),y.sizeFromShape(s.shape)===0)return this.tensorMap.get(s.dataId).values=y.getTypedArrayFromDType(s.dtype,0),s;this.uploadToGPU(s.dataId),t.dispatch=fae(this.device,t);let a=e.map((p,u)=>{if(p.dtype==="complex64")throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");return this.uploadToGPU(p.dataId),{dtype:this.tensorMap.get(p.dataId).dtype,shape:p.shape,name:t.variableNames[u]}});t.shaderKey=QB(t,a,s);let i=A().getBool("WEBGPU_ENGINE_COMPILE_ONLY");return t.shaderKey in this.pipelineCache||(this.pipelineCache[t.shaderKey]=YB(this.device,t,a,s,i)),t.pipeline=this.pipelineCache[t.shaderKey],i||this.recordAndSubmit(t,s,e,n),s}recordAndSubmit(t,e,o,n){if(t.pipeline instanceof Promise)throw new Error("Please call checkCompileCompletionAsync to ensure parallel compilation is done!");let s=[],a=[],i="int32";if(t.pixelsOpType==null){s.push({type:"float32",data:[NaN]},{type:"float32",data:[1/0]}),a=o.concat(e).map(d=>d.shape);let m="int32";a.map(d=>{s.push({type:m,data:d});let f=y.computeStrides(d);s.push({type:m,data:f})})}else{let m=y.computeStrides(e.shape);s.push({type:i,data:m})}if(t.size){let m=y.sizeFromShape(t.outputShape);s.push({type:i,data:[t.outputComponent?m/t.outputComponent:m]})}n&&(s=[...s,...n]);let p=[this.tensorToBinding(e),...o.map(m=>this.tensorToBinding(m)),this.makeUniforms(s)];o.forEach(m=>{this.commandQueueOwnedIds.add(m.dataId)}),this.commandQueueOwnedIds.add(e.dataId);let u=this.device.createBindGroup({layout:t.pipeline.getBindGroupLayout(0),entries:p.map((m,d)=>({binding:d,resource:m}))}),c=this.activeTimers!=null;this.ensureCommandEncoderReady();let l={};c&&this.supportTimestampQuery?(this.endComputePassEncoder(),this.querySet==null&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),l.timestampWrites=[{querySet:this.querySet,queryIndex:0,location:"beginning"},{querySet:this.querySet,queryIndex:1,location:"end"}],this.computePassEncoder=this.commandEncoder.beginComputePass(l)):this.computePassEncoder||(this.computePassEncoder=this.commandEncoder.beginComputePass(l)),this.computePassEncoder.setPipeline(t.pipeline),this.computePassEncoder.setBindGroup(0,u),this.computePassEncoder.dispatchWorkgroups(t.dispatch[0],t.dispatch[1],t.dispatch[2]),this.dispatchCountInPass++,(c||A().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE")<=this.dispatchCountInPass||t.pixelsOpType===Ii.DRAW)&&(this.endComputePassEncoder(),c?this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime()}):this.submitQueue())}async getQueryTime(){if(!this.supportTimestampQuery)return 0;this.queryResolveBuffer==null&&(this.queryResolveBuffer=this.bufferManager.acquireBuffer(this.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST|GPUBufferUsage.QUERY_RESOLVE)),this.commandEncoder.resolveQuerySet(this.querySet,0,this.querySetCount,this.queryResolveBuffer,0);let t=this.bufferManager.acquireBuffer(this.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.querySetCount*8),this.submitQueue(),await t.mapAsync(GPUMapMode.READ);let e=new BigUint64Array(t.getMappedRange()),o=Number(e[1]-e[0])/1e6;return t.unmap(),this.bufferManager.releaseBuffer(t),o}shouldExecuteOnCPU(t,e=dae){return A().getBool("WEBGPU_CPU_FORWARD")&&t.every(o=>this.tensorMap.get(o.dataId).resource==null&&y.sizeFromShape(o.shape)<e)}numDataIds(){return this.tensorMap.numDataIds()-this.tensorDataPendingDisposal.length}dispose(){this.disposed||(this.querySet!=null&&this.querySet.destroy(),this.bufferManager.dispose(),this.textureManager.dispose(),this.disposed=!0)}};Tu.nextDataId=0;dm()&&su("webgpu",async()=>{let r={powerPreference:A().get("WEBGPU_USE_LOW_POWER_GPU")?"low-power":"high-performance"},t=await navigator.gpu.requestAdapter(r),e={},o=[];t.features.has("timestamp-query")&&o.push("timestamp-query"),t.features.has("bgra8unorm-storage")&&o.push(["bgra8unorm-storage"]),e.requiredFeatures=o;let n=t.limits;e.requiredLimits={maxComputeWorkgroupStorageSize:n.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:n.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:n.maxStorageBufferBindingSize,maxBufferSize:n.maxBufferSize,maxComputeWorkgroupSizeX:n.maxComputeWorkgroupSizeX,maxComputeInvocationsPerWorkgroup:n.maxComputeInvocationsPerWorkgroup};let s=await t.requestDevice(e),a=await t.requestAdapterInfo();return new Tu(s,a)},3);var fe;(function(r){r[r.ADD=0]="ADD",r[r.ATAN2=1]="ATAN2",r[r.COMPLEX_MULTIPLY_IMAG=2]="COMPLEX_MULTIPLY_IMAG",r[r.COMPLEX_MULTIPLY_REAL=3]="COMPLEX_MULTIPLY_REAL",r[r.DIV=4]="DIV",r[r.ELU_DER=5]="ELU_DER",r[r.EQUAL=6]="EQUAL",r[r.FLOOR_DIV=7]="FLOOR_DIV",r[r.GREATER=8]="GREATER",r[r.GREATER_EQUAL=9]="GREATER_EQUAL",r[r.LESS=10]="LESS",r[r.LESS_EQUAL=11]="LESS_EQUAL",r[r.LOGICAL_AND=12]="LOGICAL_AND",r[r.LOGICAL_OR=13]="LOGICAL_OR",r[r.MAX=14]="MAX",r[r.MIN=15]="MIN",r[r.MOD=16]="MOD",r[r.MUL=17]="MUL",r[r.NOT_EQUAL=18]="NOT_EQUAL",r[r.POW=19]="POW",r[r.PRELU=20]="PRELU",r[r.SQUARED_DIFFERENCE=21]="SQUARED_DIFFERENCE",r[r.SUB=22]="SUB"})(fe||(fe={}));var hae="let resultTemp = a + b;",gae="let resultTemp = atan2(a, b);",xae="let resultTemp = areal * breal - aimag * bimag;",yae="let resultTemp = areal * bimag + aimag * breal;",bae="let resultTemp = a / b;",Cae="let resultTemp = select(a * (b + 1.0), a, b >= b - b);",wae=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a == b);
`,Sae=`
  let remainder =
      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));
  let quotient = (a - remainder) / b;
  let resultTemp =
      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));
`,Iae=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a > b);
`,vae=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a >= b);
`,kae=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a < b);
`,Nae=`
  let zero = sign(a) * 0 + 0;
  let one = sign(b) * 0 + 1;
  let resultTemp = select(zero, one, a <= b);
`,Tae="return f32(a >= 1.0 && b >= 1.0);",_ae=`return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`,$ae="return f32(a >= 1.0 || b >= 1.0);",Eae=`return min(vec4<f32>(a >= vec4<f32>(1.0)) +
  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`,Rae="let resultTemp = max(a, b);",Dae="let resultTemp = min(a, b);",Aae=`
  let isNaN = b == 0.;
  var resultTemp = a % b;
  resultTemp = select((resultTemp + b) % b, resultTemp,
      (a < 0. && b < 0.) || (a >= 0. && b > 0.));
`,Fae=`
  let isNaN = !vec4<bool>(b);
  var resultTemp = vec4<f32>(a % b);
  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {
    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];
  }
  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {
    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];
  }
  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {
    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];
  }
  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {
    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];
  }
`,Pae="let resultTemp = a * b;",Oae=`
  var resultTemp = f32(a != b);
  let valueForNaN = 1.0;
`,Mae=`
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
`,Lae=`
  let isNaN = a < 0.0 && floor(b) < b;
  if (b == 0.0) {
    return 1.0;
  }
  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),
      round(abs(b) % 2.0) != 1.0);
`,Bae=`
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
`,zae="if (a < 0.0) { return b * a; }  return a;",Vae=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,Wae="let resultTemp = (a - b) * (a - b);",Uae="let resultTemp = a - b;";function Qc(r,t){let e;do{switch(r){case fe.ATAN2:e=gae;break;case fe.MAX:e=Rae;break;case fe.MIN:e=Dae;break;case fe.MOD:e=t?Fae:Aae;break;case fe.NOT_EQUAL:e=t?Mae:Oae;break;case fe.POW:e=t?Bae:Lae;break;default:continue}let o,n,s;return t?(o="isnanVec4",n="vec4<f32>",s="vec4<bool>"):(o="isnan",n="f32",s="bool"),`
      let aIsNaN = ${o}(a);
      let aPostLegalization = select(a, ${n}(42), aIsNaN);
      let bIsNaN = ${o}(b);
      let bPostLegalization = select(b, ${n}(42), bIsNaN);
      let isNaN = false;
      let valueForNaN = uniforms.NAN;
      {
        let a = aPostLegalization;
        let b = bPostLegalization;
        ${e}
        return select(
            resultTemp, ${n}(valueForNaN),
            ${s}(isNaN) | aIsNaN | bIsNaN);
      }
    `}while(!1);switch(r){case fe.ADD:e=hae;break;case fe.COMPLEX_MULTIPLY_IMAG:e=yae;break;case fe.COMPLEX_MULTIPLY_REAL:e=xae;break;case fe.DIV:e=bae;break;case fe.ELU_DER:e=Cae;break;case fe.EQUAL:e=wae;break;case fe.FLOOR_DIV:e=Sae;break;case fe.GREATER:e=Iae;break;case fe.GREATER_EQUAL:e=vae;break;case fe.LESS:e=kae;break;case fe.LESS_EQUAL:e=Nae;break;case fe.LOGICAL_AND:return t?_ae:Tae;case fe.LOGICAL_OR:return t?Eae:$ae;case fe.MUL:e=Pae;break;case fe.PRELU:return t?Vae:zae;case fe.SQUARED_DIFFERENCE:e=Wae;break;case fe.SUB:e=Uae;break;default:}return`
    ${e}
    return resultTemp;
  `}var Z;(function(r){r[r.ABS=0]="ABS",r[r.ACOS=1]="ACOS",r[r.ACOSH=2]="ACOSH",r[r.ASIN=3]="ASIN",r[r.ASINH=4]="ASINH",r[r.ATAN=5]="ATAN",r[r.ATANH=6]="ATANH",r[r.CEIL=7]="CEIL",r[r.COS=8]="COS",r[r.COSH=9]="COSH",r[r.ELU=10]="ELU",r[r.ERF=11]="ERF",r[r.EXP=12]="EXP",r[r.EXPM1=13]="EXPM1",r[r.FLOOR=14]="FLOOR",r[r.IS_FINITE=15]="IS_FINITE",r[r.IS_INF=16]="IS_INF",r[r.IS_NAN=17]="IS_NAN",r[r.LINEAR=18]="LINEAR",r[r.LOG=19]="LOG",r[r.LOG1P=20]="LOG1P",r[r.LOGICAL_NOT=21]="LOGICAL_NOT",r[r.NEG=22]="NEG",r[r.RELU=23]="RELU",r[r.RELU6=24]="RELU6",r[r.LEAKYRELU=25]="LEAKYRELU",r[r.RECIPROCAL=26]="RECIPROCAL",r[r.ROUND=27]="ROUND",r[r.RSQRT=28]="RSQRT",r[r.SELU=29]="SELU",r[r.SIGMOID=30]="SIGMOID",r[r.SIGN=31]="SIGN",r[r.SIN=32]="SIN",r[r.SINH=33]="SINH",r[r.SOFTPLUS=34]="SOFTPLUS",r[r.SQRT=35]="SQRT",r[r.SQUARE=36]="SQUARE",r[r.STEP=37]="STEP",r[r.TAN=38]="TAN",r[r.TANH=39]="TANH",r[r.TO_INT=40]="TO_INT"})(Z||(Z={}));var Gae="return abs(a);",Hae=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return acos(a);
`,Kae=`
  if (a < 1.) {
    return uniforms.NAN;
  }
  return acosh(a);
`,qae=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return asin(a);
`,jae="return asinh(a);",Xae=`
  if (isnan(a)) {
    return uniforms.NAN;
  }
  return atan(a);
`,Yae=`
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  if (a == 1.) {
    return uniforms.INFINITY;
  }
  if (a == -1.) {
    return -uniforms.INFINITY;
  }
  return atanh(a);
`,Qae="return ceil(a);",Zae="return cos(a);",Jae=`
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`,eie="return exp(a) - 1.0;",tie="if (a >= 0.0) { return a; }  return (exp(a) - 1.0);",rie=`
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`,oie=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  let p = ${w.ERF_P};
  let a1 = ${w.ERF_A1};
  let a2 = ${w.ERF_A2};
  let a3 = ${w.ERF_A3};
  let a4 = ${w.ERF_A4};
  let a5 = ${w.ERF_A5};

  let sign = sign(a);
  let absA = abs(a);
  let t = 1.0 / (1.0 + p * absA);
  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));
`,nie="return exp(a);",sie="return floor(a);",aie="return f32(!isnan(a) && !isinf(a));",iie="return f32(isinf(a));",uie="return f32(isnan(a));",pie="return a;",cie=`if (a < 0.0) { return uniforms.NAN; }
  return log(a);`,lie=`
  if (isnan(a)) { return a; }
  return log(1.0 + a);
`,mie="return f32(!(a >= 1.0));",die="return -a;",fie="if (a < 0.0) { return uniforms.alpha * a; } return a;",hie=`
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`,gie="return 1.0 / a;",xie="return select(a, 0.0, a < 0.0);",yie="return clamp(a, 0.0, 6.0);",bie="return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));",Cie=`
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`,wie="return round(a);",Sie="return inverseSqrt(a);",Iie=`
  if (a >= 0.0) {
    return ${w.SELU_SCALE} * a;
  } else {
    return ${w.SELU_SCALEALPHA} * (exp(a) - 1.0);
  }
`,vie="return 1.0 / (1.0 + exp(-1.0 * a));",kie="return sign(a);",Nie="return sin(a);",Tie=`
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`,_ie=`
  let epsilon = 1.1920928955078125e-7;
  let threshold = log(epsilon) + 2.0;

  let too_large = a > -threshold;
  let too_small = a < threshold;
  let exp_a = exp(a);

  if (too_large) {
    return a;
  } else if (too_small) {
    return exp_a;
  } else {
    return log(exp_a + 1.0);
  }
`,$ie="return sqrt(a);",Eie="return a * a;",Rie=`
  if (isnan(a)) {
    return a;
  }

  return select(uniforms.stepAlpha, 1.0, a > 0.0);
`,Die="return tan(a);",Aie=`
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`,Fie="return f32(i32((a)));";function vi(r,t){switch(r){case Z.ABS:return Gae;case Z.ACOS:return Hae;case Z.ACOSH:return Kae;case Z.ASIN:return qae;case Z.ASINH:return jae;case Z.ATAN:return Xae;case Z.ATANH:return Yae;case Z.COS:return Zae;case Z.COSH:return Jae;case Z.CEIL:return Qae;case Z.ELU:return t?rie:tie;case Z.ERF:return oie;case Z.EXP:return nie;case Z.EXPM1:return eie;case Z.FLOOR:return sie;case Z.IS_FINITE:return aie;case Z.IS_INF:return iie;case Z.IS_NAN:return uie;case Z.LINEAR:return pie;case Z.LOG:return cie;case Z.LOG1P:return lie;case Z.LOGICAL_NOT:return mie;case Z.NEG:return die;case Z.LEAKYRELU:return t?hie:fie;case Z.RECIPROCAL:return gie;case Z.RELU:return t?Cie:xie;case Z.RELU6:return t?bie:yie;case Z.ROUND:return wie;case Z.RSQRT:return Sie;case Z.SELU:return Iie;case Z.SIGMOID:return vie;case Z.SIGN:return kie;case Z.SIN:return Nie;case Z.SINH:return Tie;case Z.SOFTPLUS:return _ie;case Z.SQRT:return $ie;case Z.SQUARE:return Eie;case Z.STEP:return Rie;case Z.TAN:return Die;case Z.TANH:return Aie;case Z.TO_INT:return Fie;default:throw new Error(`BinaryType ${r} is not implemented!`)}}function fr(r,t=!1,e=!1,o=3){if(r===null)return"";let n="";if(r==="linear")n=vi(Z.LINEAR);else if(r==="relu")n=vi(Z.RELU,e);else if(r==="elu")n=vi(Z.ELU,e);else if(r==="relu6")n=vi(Z.RELU6,e);else if(r==="prelu")n=Qc(fe.PRELU,e);else if(r==="sigmoid")n=vi(Z.SIGMOID,e);else if(r==="leakyrelu")n=vi(Z.LEAKYRELU,e);else throw new Error(`Activation ${r} has not been implemented for the WebGPU backend.`);let a=Ae(e?4:1),i="";return t?i=`
      fn activation(a : ${a}, coords : vec${o}<i32>) -> ${a} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${n}
      }`:i=`
      fn activation(a : ${a}, coords : vec${o}<i32>) -> ${a} {
        ${n}
      }`,i}function Zr(r,t){return`
      ${r?"value = value + getBiasByOutputCoords(coords);":""}
      ${t?"value = activation(value, coords);":""}
      `}function Qv(r,t,e=!1,o=!1,n=!1,s=1){y.assert(r&&s===1||!r,()=>`transposeA ${r} is not compatible with component size ${s}`);let a=`
      ${r?"value = getA(batch, col, row);":"value = getA(batch, row, col);"}

    `,i=t?"value = getB(batch, col, row);":"value = getB(batch, row, col);";return`
  fn mm_readA(batch: i32, row: i32, col: i32) -> ${Ae(s)} {
    var value = ${Ae(s)}(0.0);
    ${e&&n?a:`
    ${r?"if(row < uniforms.dimAOuter && col < uniforms.dimInner)":"if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${a}
    }
    `}
    return value;
  }

  fn mm_readB(batch: i32, row: i32, col: i32) -> ${Ae(s)} {
    var value = ${Ae(s)}(0.0);
    ${i}
    return value;
  }
  `}function hm(r,t,e,o,n=!1,s=!1,a=!1,i=1){return`
  ${Qv(e,o,n,s,a,i)}
  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${Ae(i)}) {
    ${n&&s?"":"if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${Zr(r,t)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `}var Pie=(r,t)=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol * ${t});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRow + innerRow,
          kStart + inputCol * ${t});
        `,Oie=(r,t,e,o)=>{if(r)return`
      for (var k = 0; k < ${o}; k++) {
        let BCached0 = mm_Bsub[k][tileCol];
        let ACached0 = mm_Asub[k][localRow];
        for (var i = 0; i < ${e}; i++) {
          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);
        }
      }`;{let n="",s="";for(let a=0;a<t;a++)n+=`let BCached${a} = mm_Bsub[k * ${t} + ${a}][tileCol];`,s+=`acc[i] = fma(BCached${a}, vec4<f32>(ACached[${a}]), acc[i]);`;return`
      for (var k = 0; k < ${o/t}; k++) {
        ${n}
        for (var i = 0; i < ${e}; i++) {
          let ACached = mm_Asub[tileRow + i][k];
          ${s}
        }
      }`}};function Fp(r,t,e=!1,o=32,n=!1,s=32,a=!1){let i=t[1]*r[1],p=t[0]*r[0],u=e?i:o,c=e?o:i,l=u/t[0],m=o/t[1],d=r[1],f=r[0];return y.assert((e&&l===4&&r[1]===4||!e&&(l===3||l===4))&&u%t[0]===0&&o%t[1]===0&&r[0]===4,()=>`If transposeA ${e} is true, innerElementSize ${l} and workPerThread[1] ${r[1]} must be 4.
          Otherwise, innerElementSize ${l} must be 3 or 4.
      tileAWidth ${u} must be divisible by workgroupSize[0]${t[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${r[0]} must be 4.`),`
  var<workgroup> mm_Asub : array<array<vec${l}<f32>, ${u/l}>, ${c}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${p/r[0]}>, ${o}>;

  ${G()} {
    let localRow = i32(localId.y);
    let tileRow = localRow * ${d};
    let tileCol = i32(localId.x);

    let globalRow = i32(globalId.y) * ${d};
    let globalCol = i32(globalId.x) * ${f};
    let batch = ${n?"0":"i32(globalId.z)"};
    let batchA = ${n||!a?"batch":"batch % uniforms.aShape[0]"};
    let batchB = ${n||!a?"batch":"batch % uniforms.bShape[0]"};
    let globalRowStart = i32(workgroupId.y) * ${i};

    let numTiles = ${n?`${Math.ceil(s/o)}`:`(uniforms.dimInner - 1) / ${o} + 1`};
    var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

    var acc: array<vec4<f32>, ${d}>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${m};
    for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < ${d}; innerRow++) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${Pie(e,l)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow++) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);
        }
        kStart = kStart + ${o};
        workgroupBarrier();

        // Compute acc values for a single thread.
        ${Oie(e,l,d,o)}
        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < ${d}; innerRow++) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`}var JB=r=>r?`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          kStart + inputRow,
          globalRowStart + inputCol);
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batchA,
          globalRowStart + inputRow,
          kStart + inputCol);
        `,Mie=r=>r?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];";function Pp(r,t,e=!1,o=32,n=!1,s=32,a=!1,i=!1){let p=r[1]*t[1],u=r[0]*t[0],c=e?p:o,l=e?o:p;y.assert(l%t[1]===0&&c%t[0]===0&&o%t[1]===0,()=>`tileAHight ${l} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${o} must be divisible by workgroupSize[1]${t[1]}`);let m=l/t[1],d=c/t[0],f=o/t[1],h=r[1],g=r[0],x=a?`
      let localRow = i32(localId.y);
      let localCol = i32(localId.x);
      let globalRowStart = i32(workgroupId.y) * ${p};
      let globalColStart = i32(workgroupId.x) * ${u};

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        for (var inputRow = localRow; inputRow < ${l}; inputRow = inputRow + ${t[1]}) {
          for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {
            ${JB(e)}
          }
        }
        // Load one tile of B into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${t[1]}) {
              for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${t[0]}) {
            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
              kStart + inputRow,
              globalColStart + inputCol);
          }
        }
        kStart = kStart + ${o};
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, ${g}>;
        for (var k = 0; k < ${o}; k++) {
          for (var inner = 0; inner < ${g}; inner++) {
            BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
          }
          for (var innerRow = 0; innerRow < ${h}; innerRow++) {
            let ACached = ${e?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
            for (var innerCol = 0; innerCol < ${g}; innerCol++) {
              acc[innerRow][innerCol] =
                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
            }
          }
        }
        workgroupBarrier();
      }
      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        let gRow = globalRowStart + localRow + innerRow * ${t[1]};
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          let gCol = globalColStart + localCol + innerCol * ${t[0]};
          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
        }
      }
      `:`
  let tileRow = i32(localId.y) * ${h};
  let tileCol = i32(localId.x) * ${g};

  let globalRow = i32(globalId.y) * ${h};
  let globalCol = i32(globalId.x) * ${g};
  let globalRowStart = i32(workgroupId.y) * ${p};

  let tileRowA = i32(localId.y) * ${m};
  let tileColA = i32(localId.x) * ${d};
  let tileRowB = i32(localId.y) * ${f};
  // Loop over shared dimension.
  for (var t = 0; t < numTiles; t++) {
    // Load one tile of A into local memory.
    for (var innerRow = 0; innerRow < ${m}; innerRow++) {
      for (var innerCol = 0; innerCol < ${d}; innerCol++) {
        let inputRow = tileRowA + innerRow;
        let inputCol = tileColA + innerCol;
        ${JB(e)}
      }
    }

    // Load one tile of B into local memory.
    for (var innerRow = 0; innerRow < ${f}; innerRow++) {
      for (var innerCol = 0; innerCol < ${g}; innerCol++) {
        let inputRow = tileRowB + innerRow;
        let inputCol = tileCol + innerCol;
        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,
          kStart + inputRow,
          globalCol + innerCol);
      }
    }
    kStart = kStart + ${o};
    workgroupBarrier();

    // Compute acc values for a single thread.
    var BCached : array<f32, ${g}>;
    for (var k = 0; k < ${o}; k++) {
      for (var inner = 0; inner < ${g}; inner++) {
        BCached[inner] = mm_Bsub[k][tileCol + inner];
      }

      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        ${Mie(e)}
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] =
              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);
        }
      }
    }

    workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < ${h}; innerRow++) {
    for (var innerCol = 0; innerCol < ${g}; innerCol++) {
      mm_write(batch, globalRow + innerRow, globalCol + innerCol,
          acc[innerRow][innerCol]);
    }
  }
  `;return`
    var<workgroup> mm_Asub : array<array<f32, ${c}>, ${l}>;
    var<workgroup> mm_Bsub : array<array<f32, ${u}>, ${o}>;

    ${G()} {
      let batch = ${n?"0":"i32(globalId.z)"};
      let batchA = ${n||!i?"batch":"batch % uniforms.aShape[0]"};
      let batchB = ${n||!i?"batch":"batch % uniforms.bShape[0]"};
      let numTiles = ${n?`${Math.ceil(s/o)}`:`(uniforms.dimInner - 1) / ${o} + 1`};
      var kStart = ${n?`i32(globalId.z) * ${s}`:"0"};

      var acc : array<array<f32, ${g}>, ${h}>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < ${h}; innerRow++) {
        for (var innerCol = 0; innerCol < ${g}; innerCol++) {
          acc[innerRow][innerCol] = 0.0;
        }
      }
      ${x}
    }
  `}var Lie=r=>r?`
      mm_readA(batchA, colA, globalRow),
      mm_readA(batchA, colA + 1, globalRow),
      mm_readA(batchA, colA + 2, globalRow),
      mm_readA(batchA, colA + 3, globalRow)
  `:`
      mm_readA(batchA, globalRow, colA),
      mm_readA(batchA, globalRow, colA + 1),
      mm_readA(batchA, globalRow, colA + 2),
      mm_readA(batchA, globalRow, colA + 3)
  `;function Bie(r,t=!1){y.assert(r[1]===1&&r[2]===1,()=>`A linear work group size is required. But got ${r}.`);let e=r[0]*4;return`
    var<workgroup> mm_Asub : array<vec4<f32>, ${r[0]}>;

    ${G()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / ${e} + 1;
      let batch = i32(globalId.z);
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t++) {
        // Load one tile of A into local memory.
        let colA = t * ${e} + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${Lie(t)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < ${e/4}; k++) {
          let rowB = t * ${e} + k * 4;
          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),
                              mm_readB(batchB, rowB + 1, globalCol),
                              mm_readB(batchB, rowB + 2, globalCol),
                              mm_readB(batchB, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `}var Xg=class{constructor(t,e,o=!1,n=!1,s=null,a=null,i=null,p=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=e,this.dispatchLayout={x:[2],y:[1],z:[0]};let u=o?t[1]:t[2];if(this.isVec4=(u%4===0&&!o||e[1]%4===0&&o)&&e[2]%4===0&&!n,this.outputComponent=this.isVec4?4:1,this.isVectorA=e[1]===1&&!o,!this.isVec4&&this.isVectorA)this.elementsPerThread=[1,1,1],this.workgroupSize=[32,1,1];else{let m=Xv(e[1],u,e[2],o);this.workgroupSize=m.workgroupSize,this.elementsPerThread=m.elementsPerThread}this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread);let c=s!=null,l=i!=null;c&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),this.sequentialAccessByThreads=p,this.transposeA=o,this.transposeB=n,this.addBias=c,this.activation=a,this.hasPreluActivationWeights=l,[this.fitAOuter,this.fitBOuter,this.fitInner]=this.getShapeFit(e[1],e[2],u),this.shaderKey=`matMulPacked_${this.elementsPerThread}_${o}_${n}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.sequentialAccessByThreads}`}getShapeFit(t,e,o){let n=this.workgroupSize[1]*this.elementsPerThread[1],s=this.workgroupSize[0]*this.elementsPerThread[0];!this.isVec4&&this.isVectorA?this.tileInner=this.workgroupSize[0]*4:this.tileInner=s;let a=t%n===0,i=e%s===0,p=o%this.tileInner===0;return[a,i,p]}getUserCode(){return`
      ${fr(this.activation,this.hasPreluActivationWeights,this.isVec4)}
      ${hm(this.addBias,this.activation,!1,this.transposeB,this.fitAOuter,this.fitBOuter,this.fitInner,this.isVec4?4:1)}
      ${this.isVec4?Fp(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,!0):this.isVectorA?Bie(this.workgroupSize,this.transposeA):Pp(this.elementsPerThread,this.workgroupSize,this.transposeA,this.tileInner,!1,null,this.sequentialAccessByThreads,!0)}
    `}};function zie(r){return`
    var<workgroup> sumValues : array<f32, ${r}>;
    ${G()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let batchA = batch % uniforms.aShape[0];
      let batchB = batch % uniforms.bShape[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + ${r}) {
        let dataA = mm_readA(batchA, row, k);
        let dataB = mm_readB(batchB, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = ${r/2}u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `}var Yg=class{constructor(t,e=!1,o=!1,n=null,s=null,a=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[256,1,1],this.outputShape=t,this.dispatchLayout={x:[],y:[1,2],z:[0]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize);let i=n!=null,p=a!=null;i&&this.variableNames.push("bias"),p&&this.variableNames.push("preluActivationWeights"),this.transposeA=e,this.transposeB=o,this.addBias=i,this.activation=s,this.hasPreluActivationWeights=p,this.shaderKey=`matMulReduce_${this.activation}_${e}_${o}`}getUserCode(){return`
      ${fr(this.activation,this.hasPreluActivationWeights)}
      ${hm(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${zie(this.workgroupSize[0])}
    `}};function Vie(r){let t=r[1],e=r[0],o=t>e?t:e;return`
  var<workgroup> mm_Asub : array<array<f32, ${o}>, ${t}>;
  var<workgroup> mm_Bsub : array<array<f32, ${e}>, ${o}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${G()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);
    let batchA = batch % uniforms.aShape[0];
    let batchB = batch % uniforms.bShape[0];

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${o} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batchA, globalRow, globalColA);
    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${o};
    globalRowB = globalRowB + ${o};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batchA, globalRow, globalColA);
      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${o};
      globalRowB = globalRowB + ${o};

      for (var k = 0; k < ${o}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `}var Qg=class{constructor(t,e,o,n=!1,s=!1,a=null,i=null,p=null){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[16,8,1],this.outputShape=o,this.dispatchLayout={x:[2],y:[1],z:[0]},this.dispatch=[Math.ceil(o[2]/this.workgroupSize[0]),Math.ceil(o[1]/this.workgroupSize[1]),o[0]];let u=a!=null;u&&this.variableNames.push("bias");let c=p!=null;c&&this.variableNames.push("preluActivationWeights"),this.transposeA=n,this.transposeB=s,this.addBias=u,this.activation=i,this.hasPreluActivationWeights=c,this.shaderKey=`matMulSmallOutputSize_${this.activation}_${n}_${s}`}getUserCode(){return`
      ${fr(this.activation,this.hasPreluActivationWeights)}
      ${hm(this.addBias,this.activation,this.transposeA,this.transposeB)}
      ${Vie(this.workgroupSize)}
    `}};var Zg=class{constructor(t,e,o=!1,n=!1){this.variableNames=["A","B"],this.uniforms="dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.workgroupSize=[8,8,1],this.atomic=!0,this.splitedDimInner=128,y.assert(t[0]===1,()=>"MatMulSplitKProgram only supports batch = 1."),this.outputShape=t,this.dispatchLayout={x:[2],y:[1],z:[0,3]};let s=(o&&this.outputShape[1]%4===0||!o&&e%4===0)&&this.outputShape[2]%4===0;this.elementsPerThread=[4,4,this.splitedDimInner],this.outputComponent=s?4:1,s||(this.outputShape[1]<16&&(this.elementsPerThread[1]=1),this.outputShape[2]<16&&(this.elementsPerThread[0]=1)),this.dispatch=H(this.dispatchLayout,[this.outputShape[0],this.outputShape[1],this.outputShape[2],e],this.workgroupSize,this.elementsPerThread),this.transposeA=o,this.transposeB=n,this.shaderKey=`matMulSplitK_${o}_${n}_${this.elementsPerThread}_${this.outputComponent}`}getUserCode(){let t=this.outputComponent;return`
      ${Qv(!1,this.transposeB,!1,!1,!1,t)}
      fn mm_write(batch: i32, row : i32, col : i32, value : ${Ae(t)}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          for (var i = 0; i < ${t}; i = i + 1) {
            ${Qr("&result[flatIndex + i]",`${t>1?"value[i]":"value"}`,"float32")}
          }
        }
      }
      ${t===4?Fp(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner):Pp(this.elementsPerThread,this.workgroupSize,this.transposeA,32,!0,this.splitedDimInner)}
    `}},Jg=class{constructor(t,e=null,o=null,n=null){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=e!=null,this.hasPreluActivationWeights=n!=null,this.activation=o,this.addBias&&this.variableNames.push("bias"),this.hasPreluActivationWeights&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`biasActivation_${o}`}getUserCode(){return`
    ${fr(this.activation,this.hasPreluActivationWeights)}
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${Zr(this.addBias,this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `}};var ex=class{constructor(t){this.variableNames=[],this.outputShape=[],this.uniforms="value : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="fill"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `}};function kt(r){let{backend:t,attrs:e}=r,{shape:o,value:n}=e,{dtype:s}=e;if(s=s||y.inferDtype(n),s==="string"){let a=y.getArrayFromDType(s,y.sizeFromShape(o));return a.fill(n),t.makeTensorInfo(o,s,a)}else{let a=new ex(o),i=[{type:"float32",data:[n]}];return t.runWebGPUProgram(a,[],s,i)}}var ez={kernelName:sa,backendName:"webgpu",kernelFunc:kt};function pe(r){let{inputs:t,attrs:e}=r,{x:o}=t,{shape:n}=e,s=y.sizeFromShape(o.shape),a=y.inferFromImplicitShape(n,s),i=y.sizeFromShape(a);return y.assert(s===i,()=>`The new shape (${a}) has ${i} elements and the old shape (${o.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`),r.backend.incRef(o.dataId),{dataId:o.dataId,shape:a,dtype:o.dtype}}var tz={kernelName:da,backendName:"webgpu",kernelFunc:pe};function Op({a:r,b:t,transposeA:e,transposeB:o,backend:n,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:p=null}){let u=r.shape.length,c=t.shape.length,l=e?r.shape[u-2]:r.shape[u-1],m=o?t.shape[c-1]:t.shape[c-2],d=e?r.shape[u-1]:r.shape[u-2],f=o?t.shape[c-2]:t.shape[c-1],h=r.shape.slice(0,-2),g=t.shape.slice(0,-2),x=y.sizeFromShape(h),b=y.sizeFromShape(g),S=Ir.assertAndGetBroadcastShape(r.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);y.assert(l===m,()=>`Error in matMul: inner shapes (${l}) and (${m}) of Tensors with shapes ${r.shape} and ${t.shape} and transposeA=${e} and transposeB=${o} must match.`);let k=e?[x,l,d]:[x,d,l],_=o?[b,f,m]:[b,m,f],E=pe({inputs:{x:r},backend:n,attrs:{shape:k}}),R=pe({inputs:{x:t},backend:n,attrs:{shape:_}}),D=[E,R],P=Math.max(x,b),O=[E,R],M=[{type:"int32",data:[d]},{type:"int32",data:[f]},{type:"int32",data:[l]}],L,B,z=[P,d,f],U=A().get("WEBGPU_MATMUL_PROGRAM_TYPE");if(U<0){let q=A().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),Y=q>0?q:n.thresholdToIncreaseWorkgroups,J=P*Math.ceil(d/32)*Math.ceil(f/32);J<=Y||d<=8&&J<=Y*2?P*d*f<=128?U=Lo.MatMulReduceProgram:P===1&&m>=2e3?U=Lo.MatMulSplitKProgram:U=Lo.MatMulSmallOutputSizeProgram:U=Lo.MatMulPackedProgram}switch(U){case Lo.MatMulReduceProgram:L=new Yg(z,e,o,s,p,a);break;case Lo.MatMulSplitKProgram:{if(B=kt({backend:n,attrs:{shape:z,value:0,dtype:r.dtype}}),L=new Zg(z,m,e,o),s||p){B=n.runWebGPUProgram(L,O,r.dtype,M,B);let Y=new Jg(B.shape,s,p,a),J=null,re=[B];s&&re.push(s),a&&re.push(a),p==="leakyrelu"&&(J=[{type:"float32",data:[i]}],Y.uniforms+=" alpha : f32,");let ne=n.runWebGPUProgram(Y,re,B.dtype,J);D.push(B);let ee=pe({inputs:{x:ne},backend:n,attrs:{shape:S}});D.push(ne);for(let oe of D)n.disposeData(oe.dataId);return ee}break}case Lo.MatMulSmallOutputSizeProgram:L=new Qg(k,_,z,e,o,s,p,a);break;case Lo.MatMulPackedProgram:let q=n.adapterInfo.isIntel();L=new Xg(k,z,e,o,s,p,a,q);break;default:throw new Error(`Unsupported MatMulProgramType ${U}.`)}s&&O.push(s),a&&O.push(a),p==="leakyrelu"&&(M.push({type:"float32",data:[i]}),L.uniforms+=" alpha : f32,"),B=n.runWebGPUProgram(L,O,r.dtype,M,B);let j=pe({inputs:{x:B},backend:n,attrs:{shape:S}});D.push(B);for(let q of D)n.disposeData(q.dataId);return j}function Wie(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s,bias:a,preluActivationWeights:i}=t,{transposeA:p,transposeB:u,activation:c,leakyreluAlpha:l}=o;return Op({a:n,b:s,transposeA:p,transposeB:u,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:l,activation:c})}var rz={kernelName:Io,backendName:"webgpu",kernelFunc:Wie};var gm=class{constructor(t,e,o){this.variableNames=["AReal","AImag","BReal","BImag"],this.workgroupSize=[128,1,1],this.size=!0,this.outputShape=w.assertAndGetBroadcastShape(e,o),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`binaryOpComplex_${t}`,this.op=t}getUserCode(){return`
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${Qc(this.op,!1)}
      }

      ${G("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `}};var ki=class{constructor(t,e,o){if(this.size=!0,this.variableNames=["A","B"],this.outputShape=w.assertAndGetBroadcastShape(e,o),this.dispatchLayout=X(this.outputShape),this.op=t,this.useSharedMemoryWithA=e.length<=1&&o.length>1&&e[0]<128,this.useSharedMemoryWithB=o.length<=1&&e.length>1&&o[0]<128,this.useSharedMemoryWithA||this.useSharedMemoryWithB)this.outputComponent=1,this.variableComponents=[1,1],this.lastDimensionSize=this.useSharedMemoryWithB?o[0]:e[0],this.shaderKey=`binary_${t}_${this.lastDimensionSize}`,this.type="shared",this.workgroupSize=[256,1,1];else{let n=e.length>0&&e[e.length-1]%4===0,s=o.length>0&&o[o.length-1]%4===0;n&&s?(this.outputComponent=4,this.variableComponents=[4,4]):n&&(y.isScalarShape(o)||o[o.length-1]===1)||s&&(y.isScalarShape(e)||e[e.length-1]===1)?(this.outputComponent=4,this.variableComponents=n?[4,1]:[1,4]):(this.outputComponent=1,this.variableComponents=[1,1]),this.type="nonshared",this.shaderKey=`binary_${t}_${this.variableComponents}`,this.workgroupSize=[128,1,1]}this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.outputComponent,1,1])}getUserCode(){let t,e=this.outputComponent===4?"vec4<f32>":"f32",o=`
    fn binaryOperation(a : ${e}, b : ${e}) -> ${e} {
      ${Qc(this.op,this.outputComponent===4)}
    };
    `;if(this.type==="shared"){let n=this.lastDimensionSize>1?`coords[${this.outputShape.length-1}]`:"0",s=this.useSharedMemoryWithB?`let a = getAByOutputIndex(index);
          let b = sharedBuf[${n}];`:`let a = sharedBuf[${n}];
          let b = getBByOutputIndex(index);`;t=`
        ${o}
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${G("index")} {
          // Fill in the shared memory buffer.
          let localIndex = i32(localId.x);
          if(localIndex < ${this.lastDimensionSize}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB?"B":"A"}[localIndex]);
          }
          workgroupBarrier();

          if(index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            ${s}
            setOutputAtIndex(index, binaryOperation(a, b));
          }
        }
        `}else t=`
       ${o}
       ${G("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index * ${this.outputComponent});
           let a = ${e}(getAByOutputCoords(coords));
           let b = ${e}(getBByOutputCoords(coords));
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `;return t}};function Ft(r){let{inputs:t}=r,{x:e}=t;return r.backend.incRef(e.dataId),{dataId:e.dataId,shape:e.shape,dtype:e.dtype}}var oz={kernelName:wo,backendName:"webgpu",kernelFunc:Ft};function yo(r){let{inputs:t,backend:e}=r,{real:o,imag:n}=t,s=e.makeTensorInfo(o.shape,"complex64"),a=e.tensorMap.get(s.dataId),i=Ft({inputs:{x:o},backend:e}),p=Ft({inputs:{x:n},backend:e});return a.complexTensorInfos={real:i,imag:p},s}var nz={kernelName:Fi,backendName:"webgpu",kernelFunc:yo};var Jr=class{constructor(t,e,o=""){this.variableNames=["A"],this.size=!0;let n=128;this.workgroupSize=[n,1,1],this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.op=e,o!==""&&(this.uniforms=o),this.shaderKey=`unary_${e}`}getUserCode(){return`
      fn unaryOperation(a : f32) -> f32 {
        ${vi(this.op,!1)}
      }
      ${G("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `}};function ye({opType:r,cpuKernelImpl:t,dtype:e}){return({inputs:o,backend:n})=>{let{x:s}=o,a=n,i=e||s.dtype;if(a.shouldExecuteOnCPU([s])&&t!=null){let u=a.tensorMap.get(s.dataId),c=t(u.values,i);return a.makeTensorInfo(s.shape,i,c)}let p=new Jr(s.shape,r);return a.runWebGPUProgram(p,[s],i)}}function et({opType:r,cpuKernelImpl:t,supportsComplex:e=!1,dtype:o}){return({inputs:n,backend:s})=>{let{a,b:i}=n,p=s;if(e&&a.dtype==="complex64"){let l=p.tensorMap.get(a.dataId),m=p.tensorMap.get(i.dataId),d,f;if(r!==fe.MUL)[d,f]=[[l.complexTensorInfos.real,m.complexTensorInfos.real],[l.complexTensorInfos.imag,m.complexTensorInfos.imag]].map(g=>{let[x,b]=g,C={dataId:x.dataId,dtype:x.dtype,shape:a.shape},S={dataId:b.dataId,dtype:b.dtype,shape:i.shape},k=new ki(r,a.shape,i.shape);return p.runWebGPUProgram(k,[C,S],dt(x.dtype,b.dtype))});else{let g=new gm(fe.COMPLEX_MULTIPLY_REAL,a.shape,i.shape),x=new gm(fe.COMPLEX_MULTIPLY_IMAG,a.shape,i.shape),b=[{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:a.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:m.complexTensorInfos.real.dataId,dtype:m.complexTensorInfos.real.dtype,shape:i.shape},{dataId:m.complexTensorInfos.imag.dataId,dtype:m.complexTensorInfos.imag.dtype,shape:i.shape}];d=p.runWebGPUProgram(g,b,"float32"),f=p.runWebGPUProgram(x,b,"float32")}let h=yo({inputs:{real:d,imag:f},backend:p});return p.disposeData(d.dataId),p.disposeData(f.dataId),h}let u=o||dt(a.dtype,i.dtype);if((a.dtype==="string"||i.dtype==="string"||p.shouldExecuteOnCPU([a,i]))&&t!=null){let l=p.tensorMap.get(a.dataId).values,m=p.tensorMap.get(i.dataId).values,d=a.dtype==="string"?w.fromUint8ToStringArray(l):l,f=a.dtype==="string"?w.fromUint8ToStringArray(m):m,[h,g]=t(a.shape,i.shape,d,f,u);return p.makeTensorInfo(g,u,h)}let c=new ki(r,a.shape,i.shape);return p.runWebGPUProgram(c,[a,i],u)}}var{addImpl:sz,castImpl:az,ceilImpl:iz,concatImpl:uz,equalImpl:pz,expImpl:cz,expm1Impl:lz,floorImpl:mz,floorDivImpl:dz,gatherNdImpl:fz,gatherV2Impl:hz,greaterEqualImpl:gz,greaterImpl:xz,lessEqualImpl:yz,lessImpl:bz,logImpl:Cz,maxImpl:wz,maximumImpl:Sz,minimumImpl:Iz,multiplyImpl:vz,negImpl:kz,notEqualImpl:Nz,prodImpl:Tz,rangeImpl:_z,rsqrtImpl:$z,scatterImpl:Ez,simpleAbsImpl:Rz,sliceImpl:Dz,stridedSliceImpl:Az,stringNGramsImpl:Fz,subImpl:Pz,tileImpl:Oz,topKImpl:Mz,transposeImpl:Lz,uniqueImpl:HPt}=Tc;var Uie=ye({opType:Z.ABS,cpuKernelImpl:Rz}),Bz={kernelName:Xs,backendName:"webgpu",kernelFunc:Uie};var Gie=ye({opType:Z.ACOS}),zz={kernelName:Wo,backendName:"webgpu",kernelFunc:Gie};var Hie=ye({opType:Z.ACOSH}),Vz={kernelName:Uo,backendName:"webgpu",kernelFunc:Hie};var Kie=et({opType:fe.ADD,cpuKernelImpl:sz,supportsComplex:!0}),Wz={kernelName:uo,backendName:"webgpu",kernelFunc:Kie};var tx=class{constructor(t){this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t[0],this.variableNames=t.map((e,o)=>`T${o}`),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="addN"}getUserCode(){let t=[];this.variableNames.forEach(n=>{t.push(`let v${n} = get${n}ByOutputCoords(coords);`)});let e=this.variableNames.map(n=>`v${n}`).join(" + ");return`
      ${G("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${t.join(`
        `)}
            setOutputAtIndex(flatIndex, ${e});
          }
        }
      }
    `}};function qie(r){let{inputs:t,backend:e}=r,o=t;if(o.length===1)return Ft({inputs:{x:o[0]},backend:e});let n=o.map(i=>i.dtype).reduce((i,p)=>dt(i,p)),s=o.map(i=>i.shape),a=new tx(s);return e.runWebGPUProgram(a,o,n)}var Uz={kernelName:Go,backendName:"webgpu",kernelFunc:qie};var rx=class{constructor(t,e){this.variableNames=["A"],this.workgroupSize=[16,16,1];let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[e[n]];this.outputShape=o,this.dispatchLayout={x:[0],y:[1]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[1,1,1]),this.shaderKey="transposeShared"}getUserCode(){y.assert(this.workgroupSize[0]===this.workgroupSize[1],()=>`Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`);let t=this.workgroupSize[0];return`
      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0]+1}>, ${this.workgroupSize[0]}>;
      ${G()} {
        var x = i32(workgroupId.x) * ${t} + i32(localId.x);
        var y = i32(workgroupId.y) * ${t} + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = f32(A[y * width + x]);
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * ${t} + i32(localId.x);
        y = i32(workgroupId.x) * ${t} + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `}};var ox=class{constructor(t,e){this.variableNames=["A"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0;let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[e[n]];this.outputShape=o,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.newDim=e,this.shaderKey=`transpose_${e}`}getUserCode(){let t=ht(this.outputShape.length),e=Zv(this.newDim);return`
      ${G("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${t}(${e}), uniforms.aShape)]);
          }
        }
      }
    `}};function Zv(r){let t=r.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let e=new Array(t);for(let o=0;o<r.length;o++)e[r[o]]=`coords.${Mo(o)}`;return e.join()}function yr(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{perm:s}=o,a=e,i=n.shape.length,p=new Array(i);for(let c=0;c<p.length;c++)p[c]=n.shape[s[c]];if(e.shouldExecuteOnCPU([n])){let l=a.tensorMap.get(n.dataId).values,m=Lz(l,n.shape,n.dtype,s,p);return e.makeTensorInfo(p,n.dtype,m)}if(n.shape.length===2&&y.arraysEqual(s,[1,0])){let c=new rx(n.shape,s);return a.runWebGPUProgram(c,[n],n.dtype)}let u=new ox(n.shape,s);return a.runWebGPUProgram(u,[n],n.dtype)}var Gz={kernelName:co,backendName:"webgpu",kernelFunc:yr};var nx=class{constructor(t,e,o){this.variableNames=["x"],this.uniforms="reduceSize : i32,",this.size=!0,this.inputShape=[t.batchSize,t.inSize];let[n]=w.computeOutAndReduceShapes(this.inputShape,[1]);this.outputShape=n.length===0?[1]:n,t.inSize>=32768&&o>=512?this.workgroupSize=[512,1,1]:t.inSize>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,[1,1,1]),this.reduceType=e,this.shaderKey=`reduce_${e}`}getUserCode(){let t="",e="0.0",o=this.workgroupSize[0];this.reduceType==="min"||this.reduceType==="max"?(t=`
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType==="min"?"<":">"} bestValue)
           {  bestValue = candidate; }`,e="f32(x[offset])"):this.reduceType==="sum"||this.reduceType==="mean"?t=" bestValue = bestValue + candidate; ":this.reduceType==="prod"?(t=" bestValue = bestValue * candidate; ",e="1.0"):this.reduceType==="all"?(t=" bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ",e="1.0"):this.reduceType==="any"&&(t=" bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ",e="0.0");let n=this.reduceType==="mean"?"setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));":"setOutputAtIndex(outputIndex, bestValue);";return`
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${o}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length===1?"outputCoords":"outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${G("index")} {
         let outputIndex = index / ${o};
         let offset = getOffset(outputIndex);
         var bestValue = ${e};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), ${o}u);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + ${o}) {
           let candidate = f32(x[offset + k]);
           ${t}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), ${o}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${t}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${n}
        }
       }
     `}};var jie={mean:"float32",all:"bool",any:"bool"};function eo(r,t,e,o,n){let s=r.shape.length,a=[],i=y.parseAxisParam(t,r.shape),p=i,u=w.getAxesPermutation(p,s),c=r;u!=null&&(c=yr({inputs:{x:r},attrs:{perm:u},backend:n}),p=w.getInnerMostAxes(p.length,s),a.push(c)),w.assertAxesAreInnerMostDims(o,p,s);let[l,m]=w.computeOutAndReduceShapes(c.shape,p),d=l;e&&(d=w.expandShapeToKeepDim(l,i));let f;if((o==="max"||o==="prod")&&n.shouldExecuteOnCPU([c])){let h=n.tensorMap.get(c.dataId).values;switch(o){case"max":let g=wz(h,y.sizeFromShape(m),d,r.dtype);f=n.makeTensorInfo(d,r.dtype,g);break;case"prod":let{outVals:x,outShape:b,outDtype:C}=Tz(c.shape,c.dtype,h,p);f=n.makeTensorInfo(b,C,x);break;default:throw new Error(`${o} CPU implementation is not yet supported.`)}}else{let h=y.sizeFromShape(m),x=y.sizeFromShape(c.shape)/h,b={windowSize:h,inSize:h,batchSize:x,outSize:1},C=jie[o]||ni(r.dtype),S=[{type:"int32",data:[h]}],k=new nx(b,o,n.device.limits.maxComputeWorkgroupSizeX),_=n.runWebGPUProgram(k,[c],C,S);a.push(_),f=pe({inputs:{x:_},attrs:{shape:d},backend:n})}return a.forEach(h=>n.disposeData(h.dataId)),f}function Xie(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{keepDims:s,axis:a}=o;return eo(n,a,s,"all",e)}var Hz={kernelName:Ho,backendName:"webgpu",kernelFunc:Xie};function Yie(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{keepDims:s,axis:a}=o;return eo(n,a,s,"any",e)}var Kz={kernelName:Ko,backendName:"webgpu",kernelFunc:Yie};var Zc=class{constructor(t,e,o){this.workgroupSize=[64,1,1],this.variableNames=["x"],this.uniforms="infinityValue : f32,",this.size=!0;let n=[e];this.op=o==="min"?"<":">";let[s,a]=w.computeOutAndReduceShapes(t,n);this.outputShape=s.length===0?[1]:s,this.dispatchLayout=X(this.outputShape),y.sizeFromShape(a)<32?(this.type="plain",this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize)):(this.type="shared",this.dispatch=H(this.dispatchLayout,this.outputShape,[1,1,1])),this.inputShape=t,this.shaderKey=`argMinMax_${this.op}_${this.type}`}getUserCode(){let t=this.workgroupSize[0],e=()=>this.inputShape.length===1?"uniforms.xShape":`uniforms.xShape.${Mo(this.inputShape.length-1)}`,o=()=>{let n="";if(this.outputShape.length===1)this.inputShape.length!==1&&(n+="outputCoords,");else for(let s=0;s<this.outputShape.length;s++)n+=`outputCoords.${Mo(s)},`;return n};return this.type==="shared"?`
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${t}>;
      var<workgroup> xBestValues : array<f32, ${t}>;
    `}

      ${G("index")} {
        let outputIndex = index / ${t};
        let reduceLength = ${e()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + ${t}) {
          let candidate = getX(${o()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), ${t}u);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    `:`
      ${G("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${o()} 0);
          let reduceLength = ${e()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${o()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `}};function Qie(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,a=y.parseAxisParam(s,n.shape),i=w.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=yr({inputs:{x:n},backend:e,attrs:{perm:i}}),u.push(p),a=w.getInnerMostAxes(a.length,p.shape.length)),w.assertAxesAreInnerMostDims("argMax",[a[0]],p.shape.length);let c=new Zc(p.shape,a[0],"max"),l=[{type:"float32",data:[Number.NEGATIVE_INFINITY]}],m=e.runWebGPUProgram(c,[p],"int32",l);return u.forEach(d=>e.disposeData(d.dataId)),m}var qz={kernelName:Ys,backendName:"webgpu",kernelFunc:Qie};function Zie(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s}=o,a=y.parseAxisParam(s,n.shape),i=w.getAxesPermutation(a,n.shape.length),p=n,u=[];i!=null&&(p=yr({inputs:{x:n},backend:e,attrs:{perm:i}}),u.push(p),a=w.getInnerMostAxes(a.length,p.shape.length)),w.assertAxesAreInnerMostDims("argMin",[a[0]],p.shape.length);let c=new Zc(p.shape,a[0],"min"),l=[{type:"float32",data:[Number.POSITIVE_INFINITY]}],m=e.runWebGPUProgram(c,[p],"int32",l);return u.forEach(d=>e.disposeData(d.dataId)),m}var jz={kernelName:Qs,backendName:"webgpu",kernelFunc:Zie};var Jie=ye({opType:Z.ASIN}),Xz={kernelName:qo,backendName:"webgpu",kernelFunc:Jie};var eue=ye({opType:Z.ASINH}),Yz={kernelName:jo,backendName:"webgpu",kernelFunc:eue};var tue=ye({opType:Z.ATAN}),Qz={kernelName:Xo,backendName:"webgpu",kernelFunc:tue};var rue=et({opType:fe.ATAN2}),Zz={kernelName:Qo,backendName:"webgpu",kernelFunc:rue};var oue=ye({opType:Z.ATANH}),Jz={kernelName:Yo,backendName:"webgpu",kernelFunc:oue};var sx=class{constructor(t){this.variableNames=["x"],this.uniforms="strides : vec2<i32>,",this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="poolWithFilterSizeEqualsOne"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.strides;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `}};var za=class{constructor(t,e,o=!1,n=!1,s=!1){if(this.variableNames=["x"],this.uniforms="strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,",this.workgroupSize=[128,1,1],this.size=!0,e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");this.outputShape=t.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=e,this.computePositions=o,this.flattenPositions=n,this.includeBatchIndex=s,this.shaderKey=`pool2D_${e}_${o}_${n}_${s}`}getUserCode(){let t;this.poolType==="avg"?t="resultValue = resultValue + value; count = count + 1.0;":this.computePositions?t=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d":"wR * uniforms.filterDims.y + wC"};
      }`:t="resultValue = max(value, resultValue);";let e="resultValue";return this.poolType==="avg"&&(e="resultValue / max(count, 1.0)"),`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, d);
              ${t}
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${e});`}
        }
      }
    `}},_u=class{constructor(t,e,o=!1,n=!1,s=!1){if(this.variableNames=["x"],this.uniforms="strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,",this.workgroupSize=[128,1,1],this.size=!0,e==="avg"&&o)throw new Error("Cannot compute positions for average pool.");this.outputShape=t.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.poolType=e,this.computePositions=o,this.flattenPositions=n,this.includeBatchIndex=s,this.shaderKey=`pool3D_${e}_${o}_${n}_${s}`}getUserCode(){let t;this.poolType==="avg"?t="resultValue += value; count += 1.0;":this.computePositions?t=`let currMaxValue = mix(value, maxValue, maxValueFound);
      if (value >= currMaxValue) {
        maxValue = value;
        maxValueFound = 1.0;
        maxPosition = ${this.flattenPositions?this.includeBatchIndex?"(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch":"wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC"};
      }`:t="resultValue = max(value, resultValue);";let e="resultValue";return this.poolType==="avg"&&(e="resultValue / max(count, 1.0)"),`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords.x;
          let ch = coords.u;

          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
          let xDCorner = xCorner.x;
          let xRCorner = xCorner.y;
          let xCCorner = xCorner.z;

          ${this.computePositions?`var maxValue = 0.0;
            var maxValueFound = 0.0;
            var maxPosition = 0;`:`var resultValue = ${this.poolType==="avg"?"0.0":"-1.0 / pow(10.0, -20.0)"};`}

          var count = 0.0;
          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {
            let xD = xDCorner + wD;
            if (xD < 0 || xD >= uniforms.convDims.x) {
              continue;
            }

            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {
              let xR = xRCorner + wR;
              if (xR < 0 || xR >= uniforms.convDims.y) {
                continue;
              }

              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {
                let xC = xCCorner + wC;
                if (xC < 0 || xC >= uniforms.convDims.z) {
                  continue;
                }

                let value = getX(batch, xD, xR, xC, ch);
                ${t}
              }
            }
          }

          ${this.computePositions?"setOutputAtIndexI32(index, maxPosition);":`setOutputAtIndex(index, ${e});`}
        }
      }
    `}};function Jv(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reductionIndices:s,keepDims:a}=o;return eo(n,s,a,"max",e)}var eV={kernelName:Vn,backendName:"webgpu",kernelFunc:Jv};function e0(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{keepDims:s,axis:a}=o;return eo(n,a,s,"mean",e)}var tV={kernelName:Gn,backendName:"webgpu",kernelFunc:e0};function ax(r,t,e,o){if(t.filterWidth===1&&t.filterHeight===1&&y.arraysEqual(t.inShape,t.outShape))return Ft({inputs:{x:r},backend:o});if(t.filterWidth===t.inWidth&&t.filterHeight===t.inHeight&&t.batchSize===1&&t.padInfo.type==="VALID"){let a=r.shape.length,i=pe({inputs:{x:r},backend:o,attrs:{shape:[r.shape[a-3]*r.shape[a-2],r.shape[a-1]]}}),p;e==="avg"?p=e0({inputs:{x:i},backend:o,attrs:{axis:0,keepDims:!1}}):(y.assert(e==="max",()=>`Invalid pool type ${e}`),p=Jv({inputs:{x:i},backend:o,attrs:{reductionIndices:0,keepDims:!1}}));let u=pe({inputs:{x:p},backend:o,attrs:{shape:t.outShape}});return o.disposeData(i.dataId),o.disposeData(p.dataId),u}let n,s=[{type:"int32",data:[t.strideHeight,t.strideWidth]}];return t.filterHeight===1&&t.filterWidth===1?n=new sx(t):(e==="avg"?n=new za(t,"avg"):(y.assert(e==="max",()=>`Invalid pool type ${e}`),n=new za(t,"max")),s.push({type:"int32",data:[t.padInfo.top,t.padInfo.left]},{type:"int32",data:[t.dilationHeight,t.dilationWidth]},{type:"int32",data:[t.inHeight,t.inWidth]},{type:"int32",data:[t.effectiveFilterHeight,t.effectiveFilterWidth]})),o.runWebGPUProgram(n,[r],r.dtype,s)}function nue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1,c=w.computePool2DInfo(n.shape,s,a,u,i,p);return ax(n,c,"avg",e)}var rV={kernelName:Zo,backendName:"webgpu",kernelFunc:nue};function sue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dataFormat:p,dimRoundingMode:u}=o,c=[1,1,1],l=w.computePool3DInfo(n.shape,s,a,c,i,u,p),m=new _u(l,"avg"),d=[{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.inDepth,l.inHeight,l.inWidth]},{type:"int32",data:[l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth]}];return e.runWebGPUProgram(m,[n],n.dtype,d)}var oV={kernelName:Zs,backendName:"webgpu",kernelFunc:sue};var ix=class{constructor(t){this.variableNames=["dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool2DBackprop"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);

            dotProd = dotProd + dyValue * uniforms.avgMultiplier;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}},ux=class{constructor(t){this.variableNames=["dy"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="avgPool3DBackprop"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              dotProd += dyValue * uniforms.avgMultiplier;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}};function aue(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,a=s,{filterSize:i,strides:p,pad:u,dimRoundingMode:c}=o,l=w.computePool3DInfo(a.shape,i,p,1,u,c),m=new ux(l),d=1/(l.filterDepth*l.filterHeight*l.filterWidth),f=[{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.effectiveFilterDepth-1-l.padInfo.front,l.effectiveFilterHeight-1-l.padInfo.top,l.effectiveFilterWidth-1-l.padInfo.left]},{type:"int32",data:[l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth]},{type:"int32",data:[l.outDepth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"float32",data:[d]}];return e.runWebGPUProgram(m,[n],a.dtype,f)}var nV={kernelName:Ai,backendName:"webgpu",kernelFunc:aue};function iue(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,a=s;fm([n,s],"avgPoolGrad");let{filterSize:i,strides:p,pad:u}=o,c=w.computePool2DInfo(a.shape,i,p,1,u),l=new ix(c),m=1/(c.filterHeight*c.filterWidth),d=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.effectiveFilterHeight-1-c.padInfo.top,c.effectiveFilterWidth-1-c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]},{type:"int32",data:[c.outHeight]},{type:"int32",data:[c.outWidth]},{type:"float32",data:[m]}];return e.runWebGPUProgram(l,[n],a.dtype,d)}var sV={kernelName:Di,backendName:"webgpu",kernelFunc:iue};function uue(r){let{inputs:t,backend:e,attrs:o}=r,{a:n,b:s}=t,{transposeA:a,transposeB:i}=o;return Op({a:n,b:s,transposeA:a,transposeB:i,backend:e})}var aV={kernelName:Jo,backendName:"webgpu",kernelFunc:uue};var px=class{constructor(t,e){this.variableNames=["source"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.rank=e.length,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.start=t,this.uniforms=`start : ${ht(t.length)}, `,this.shaderKey="slice"}getUserCode(){let t=ht(this.rank),e=pue(this.rank),o;return this.start.length===1?o=this.outputShape.map((s,a)=>"sourceLoc = uniforms.start + coords;"):o=this.outputShape.map((s,a)=>`sourceLoc.${t0[a]} = uniforms.start.${Mo(a)} + coords.${t0[a]};`),`
      ${G("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${t};
          let coords = getCoordsFromIndex(index);
          ${o.join(`
`)}
          setOutputAtIndex(index, getSource(${e}));
        }
      }
    `}},t0=["x","y","z","w","u","v"];function pue(r){if(r===1)return"sourceLoc";if(r<=6)return t0.slice(0,r).map(t=>`sourceLoc.${t}`).join(",");throw Error(`Slicing for rank ${r} is not yet supported`)}function Hs(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,size:a}=o,[i,p]=ct.parseSliceParams(n,s,a);if(ct.assertParamsValid(n,i,p),e.shouldExecuteOnCPU([n])||n.dtype==="string"){let l=e.tensorMap.get(n.dataId),m=Dz(l.values,i,p,n.shape,n.dtype);return e.makeTensorInfo(p,n.dtype,m)}if(y.sizeFromShape(p)===0)return e.makeTensorInfo(p,n.dtype,[]);let u=new px(i,p),c=[{type:"int32",data:i}];return e.runWebGPUProgram(u,[n],n.dtype,c)}var iV={kernelName:ha,backendName:"webgpu",kernelFunc:Hs};var cue=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,crops:a}=o;y.assert(n.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");let i=s.reduce((b,C)=>b*C),p=w.getReshaped(n.shape,s,i),u=w.getPermuted(p.length,s.length),c=w.getReshapedPermuted(n.shape,s,i),l=w.getSliceBeginCoords(a,s.length),m=w.getSliceSize(c,a,s.length),d=[],f=pe({inputs:{x:n},backend:e,attrs:{shape:p}}),h=yr({inputs:{x:f},backend:e,attrs:{perm:u}}),g=pe({inputs:{x:h},backend:e,attrs:{shape:c}}),x=Hs({inputs:{x:g},backend:e,attrs:{begin:l,size:m}});return d.push(f),d.push(h),d.push(g),d.forEach(b=>e.disposeData(b.dataId)),x},uV={kernelName:Js,backendName:"webgpu",kernelFunc:cue};var lue=`
  fn bincount_write(index: i32, value: f32) {
    ${Qr("&result[index]","value","float32")}
  }
`,mue=`
  fn bincount_write(index: i32, value: f32) {
    atomicStore(&result[index], bitcast<i32>(value));
  }
`,Jc=class{constructor(t,e,o=!1){this.outputShape=[],this.variableNames=["x"],this.uniforms="binCountSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.hasWeights=!0,this.binaryOutput=!1,this.outputShape=t,this.rank=t.length,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.binaryOutput=o,o&&(this.atomic=!1),this.hasWeights=e,this.hasWeights&&this.variableNames.push("w"),this.shaderKey=`bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`}getUserCode(){return`
    ${this.binaryOutput?mue:lue}
  ${G("index")} {
    ${this.rank===1?`if (index < uniforms.xShape) {
      let indexVal = i32(getX(index));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(index)":"1."};
        bincount_write(indexVal, value);
      }
    }`:`let coord = getCoordsFromIndex(index);
    if (coordsInBounds2D(coord, uniforms.xShape)) {
      let indexVal = i32(getX(coord[0], coord[1]));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput?1:this.hasWeights?"getW(coord[0], coord[1])":"1."};
        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);
      }
    }`}
  }
  `}};function due(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:a}=o,i=y.sizeFromShape(n.shape),u=y.sizeFromShape(s.shape)>0,c=[a],l=s.dtype,m=kt({backend:e,attrs:{shape:c,value:0,dtype:l}}),d=new Jc([i],u),f=[{type:"int32",data:[a]}],h=u?[n,s]:[n];return e.runWebGPUProgram(d,h,l,f,m)}var pV={kernelName:en,backendName:"webgpu",kernelFunc:due};var cx=class{constructor(t){this.outputShape=[],this.variableNames=["s0","s1"],this.uniforms="s0Size : i32, s1Size : i32, ",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="broadcastArgs"}getUserCode(){return`
  ${G("index")} {
    if (index < uniforms.size) {
      var s0 = 1.0;
      var s1 = 1.0;
      let indexS0 = index - uniforms.size + uniforms.s0Size;
      let indexS1 = index - uniforms.size + uniforms.s1Size;
      if (indexS0 >= 0) {
        s0 = getS0(indexS0);
      }
      if (indexS1 >= 0) {
        s1 = getS1(indexS1);
      }

      if (s0 == 1.0) {
        setOutputAtIndex(index, s1);
      } else if (s1 == 1.0) {
        setOutputAtIndex(index, s0);
      } else if (s0 != s1) {
        setOutputAtIndex(index, uniforms.NAN);
      } else {
        setOutputAtIndex(index, s0);
      }
    }
  }
  `}};function fue(r){let{inputs:t,backend:e}=r,{s0:o,s1:n}=t;if(e.shouldExecuteOnCPU([o,n])){let c=e.tensorMap.get(o.dataId),l=e.tensorMap.get(n.dataId),m=c.values,d=l.values,f=w.assertAndGetBroadcastShape(Array.from(m),Array.from(d));return e.makeTensorInfo([f.length],"int32",Int32Array.from(f))}let s=y.sizeFromShape(o.shape),a=y.sizeFromShape(n.shape),i=Math.max(s,a),p=new cx(i),u=[{type:"int32",data:[s]},{type:"int32",data:[a]}];return e.runWebGPUProgram(p,[o,n],"int32",u)}var cV={kernelName:ea,backendName:"webgpu",kernelFunc:fue};var r0=et({opType:fe.NOT_EQUAL,dtype:"bool",cpuKernelImpl:Nz}),lV={kernelName:Qn,backendName:"webgpu",kernelFunc:r0};function Ni(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.tensorMap.get(o.dataId);return Ft({inputs:{x:n.complexTensorInfos.real},backend:e})}var mV={kernelName:qi,backendName:"webgpu",kernelFunc:Ni};function dV(r,t){let e=new Jr(r.shape,Z.TO_INT),o=t.runWebGPUProgram(e,[r],"int32");return{dataId:o.dataId,shape:o.shape,dtype:o.dtype}}function o0(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dtype:s}=o;if(s==="complex64"){if(n.dtype==="complex64")return Ft({inputs:{x:n},backend:e});let a=Gr(n.shape),i=o0({inputs:{x:n},backend:e,attrs:{dtype:"float32"}}),p=yo({inputs:{real:i,imag:a},backend:e});return a.dispose(),e.disposeData(i.dataId),p}if(n.dtype==="complex64"){let a=Ni({inputs:{input:n},backend:e}),i=o0({inputs:{x:a},backend:e,attrs:{dtype:s}});return e.disposeData(a.dataId),i}if(!y.hasEncodingLoss(n.dtype,s)){let a=Ft({inputs:{x:n},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:s}}if(e.shouldExecuteOnCPU([n])){let a=e.tensorMap.get(n.dataId).values,[i,p,u]=az(a,n.shape,n.dtype,s);return e.makeTensorInfo(i,p,u)}if(s==="int32")return dV(n,e);if(s==="bool"){let a=e.makeTensorInfo([],"bool",y.getTypedArrayFromDType("bool",1)),p=r0({inputs:{a:n,b:a},backend:e});return e.disposeData(a.dataId),p}throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`)}var fV={kernelName:bo,backendName:"webgpu",kernelFunc:o0};var hue=ye({opType:Z.CEIL,cpuKernelImpl:iz}),hV={kernelName:tn,backendName:"webgpu",kernelFunc:hue};var lx=class{constructor(t){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workPerThread=4,this.workgroupSize=[64,1,1],this.outputComponent=4,this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.shaderKey="clipVec4"}getUserCode(){return`
      ${G("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue = clamp(
              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));
          clampedValue = select(clampedValue, value, isnanVec4(value));
          setOutputAtIndex(index, clampedValue);
        }
      }
    `}};var mx=class{constructor(t){this.variableNames=["A"],this.uniforms="minVal : f32, maxVal : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="clip"}getUserCode(){return`
      ${G("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `}};function gue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{clipValueMin:s,clipValueMax:a}=o,i,p=[{type:"float32",data:[s]},{type:"float32",data:[a]}];return y.sizeFromShape(n.shape)%4===0?i=new lx(n.shape):i=new mx(n.shape),e.runWebGPUProgram(i,[n],n.dtype,p)}var gV={kernelName:Co,backendName:"webgpu",kernelFunc:gue};var dx=class{constructor(t){this.outputShape=[],this.variableNames=["real","imag"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="complexAbs"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let re = abs(getRealByOutputIndex(index));
        let im = abs(getImagByOutputIndex(index));
        let mx = max(re, im);

        // The length function in wgsl may be not underflow-safe on some GPUs.
        // So the safe solution is to ensure underflow-safety in all cases.
        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));
      }
    }
  `}};function xV(r,t){return{dataId:t.dataId,dtype:t.dtype,shape:r.shape}}function xue(r){let{inputs:t,backend:e}=r,{x:o}=t,n=e.tensorMap.get(o.dataId),s=new dx(o.shape),a=[xV(o,n.complexTensorInfos.real),xV(o,n.complexTensorInfos.imag)];return e.runWebGPUProgram(s,a,a[0].dtype)}var yV={kernelName:Pi,backendName:"webgpu",kernelFunc:xue};var fx=class{constructor(t){this.uniforms="",this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=w.computeOutShape(t,1),this.variableNames=t.map((e,o)=>`T${o}`),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]),this.offsetLength=t.length-1;for(let e=0;e<this.offsetLength;e++)this.uniforms+=`offset${e} : i32,`;this.shaderKey="concat"}getUserCode(){let t=[];if(this.offsetLength>0){t.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");for(let s=1;s<this.offsetLength;s++)t.push(`else if (yC < uniforms.offset${[s]}){ setOutputAtCoords(coords.x, coords.y, getT${s}(yR, yC - uniforms.offset${s-1})); }`);let o=this.offsetLength,n=this.offsetLength-1;t.push(`else { setOutputAtCoords(coords.x, coords.y, getT${o}(yR, yC - uniforms.offset${n})); }`)}else t.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");return`
      ${G("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${t.join(`
        `)}
          }
        }
      }
    `}};function Mp(r){let{inputs:t,backend:e}=r,{input:o}=t,n=e.tensorMap.get(o.dataId);return Ft({inputs:{x:n.complexTensorInfos.imag},backend:e})}var bV={kernelName:Gi,backendName:"webgpu",kernelFunc:Mp};function el(r,t,e){let o=r[0].dtype;if(o==="complex64"){let f=r.map(C=>Ni({inputs:{input:C},backend:e})),h=r.map(C=>Mp({inputs:{input:C},backend:e})),g=el(f,t,e),x=el(h,t,e),b=yo({inputs:{real:g,imag:x},backend:e});return f.forEach(C=>e.disposeData(C.dataId)),h.forEach(C=>e.disposeData(C.dataId)),e.disposeData(g.dataId),e.disposeData(x.dataId),b}let n=e.shouldExecuteOnCPU(r);if(o==="string"&&(n=!0),n){let f=r.map(k=>{let E=[-1,y.sizeFromShape(k.shape.slice(t))];return pe({inputs:{x:k},backend:e,attrs:{shape:E}})}),h=f.map(k=>({vals:e.readSync(k.dataId),shape:k.shape})),g=w.computeOutShape(f.map(k=>k.shape),1),x=f[0].shape[0]===1,b=uz(h,g,o,x),C=w.computeOutShape(r.map(k=>k.shape),t),S=e.makeTensorInfo(C,o,b);return f.forEach(k=>e.disposeData(k.dataId)),S}let s=e.device.limits.maxStorageBuffersPerShaderStage-1;if(r.length>s){let f=[];for(let g=0;g<r.length;g+=s){let x=r.slice(g,g+s);f.push(el(x,t,e))}let h=el(f,t,e);for(let g of f)e.disposeData(g.dataId);return h}let{tensors2D:a,outShape:i}=yue(r,t,e),p=a.map(f=>f.shape),u=new fx(p),c=[],l=new Array(p.length-1);if(l.length>0){l[0]=p[0][1],c.push({type:"int32",data:[l[0]]});for(let f=1;f<l.length;f++)l[f]=l[f-1]+p[f][1],c.push({type:"int32",data:[l[f]]})}let m=e.runWebGPUProgram(u,a,a[0].dtype,c);a.forEach(f=>e.disposeData(f.dataId));let d=pe({inputs:{x:m},backend:e,attrs:{shape:i}});return e.disposeData(m.dataId),d}function yue(r,t,e){let o=w.computeOutShape(r.map(s=>s.shape),t);return{tensors2D:r.map(s=>pe({inputs:{x:s},backend:e,attrs:{shape:[y.sizeFromShape(s.shape.slice(0,t)),y.sizeFromShape(s.shape.slice(t))]}})),outShape:o}}function n0(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o,s=y.parseAxisParam(n,t[0].shape)[0],a=t.map(u=>u.shape);w.assertParamsConsistent(a,s);let i=w.computeOutShape(t.map(u=>u.shape),s);if(y.sizeFromShape(i)===0)return e.makeTensorInfo(i,t[0].dtype,[]);let p=t.filter(u=>y.sizeFromShape(u.shape)>0);return p.length===1?Ft({inputs:{x:p[0]},backend:e}):el(p,s,e)}var CV={kernelName:ta,backendName:"webgpu",kernelFunc:n0};function bue(r,t,e,o,n=!1,s=null,a=!1,i=4,p=4,u=4){let c=D=>{switch(D){case 1:return"resData = f32(x[xIndex]);";case 3:return"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";case 4:return"resData = vec4<f32>(x[xIndex / 4]);";default:throw new Error(`innerElementSize ${D} is not supported.`)}},l=D=>{switch(D){case 1:return"return f32(W[row * uniforms.wShape[3] + col]);";case 4:return"return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);";default:throw new Error(`innerElementSize ${D} is not supported.`)}},m=r?`
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `,d=r?`
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      `:`
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `,f=r?"uniforms.xShape[1]":"uniforms.xShape[2]",h=r?"uniforms.xShape[2]":"uniforms.xShape[3]",g=r?"row":"col",x=r?"col":"row",b=`
      let inChannels = uniforms.wShape[2];
      let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${x} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${x} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];
      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];
      let xCh = ${x} % inChannels;
      var resData = ${Ae(i)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${h}) {
        ${m}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${c(i)}
      }
      return resData;`,C=r?t&&o?`
      ${b}`:`
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${Ae(i)}(0.0);`:o&&e?`
      ${b}`:`
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${Ae(i)}(0.0);`,S=`${l(p)}`,k=Ae(u),_=r?Ae(i):Ae(p),E=r?Ae(p):Ae(i);return`
      ${fr(s,a,u===4,4)}
      fn mm_readA(batch: i32, row : i32, col : i32) -> ${_} {
        ${r?C:S}
      }

      fn mm_readB(batch: i32, row : i32, col : i32) -> ${E} {
        ${r?S:C}
      }

      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${k}) {
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${r?"uniforms.outShape[2]":"uniforms.outShape[3]"};
        ${d}
        ${Zr(n,s)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`}var hx=class{constructor(t,e,o,n,s=!1,a=null,i=!1,p=!1){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t.outShape,this.isChannelsLast=t.dataFormat==="channelsLast",this.isVec4=((t.inChannels%4===0||t.inChannels%3===0)&&this.isChannelsLast||t.outWidth%4===0&&!this.isChannelsLast)&&t.outChannels%4===0,this.dispatchLayout=this.isChannelsLast?{x:[3],y:[1,2],z:[0]}:{x:[2,3],y:[1],z:[0]},this.workgroupSize=lm(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=mm(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4?(this.outputComponent=4,this.isChannelsLast&&t.inChannels%4!==0?(this.innerElementSize=3,this.variableComponents=[1,4]):(this.innerElementSize=4,this.variableComponents=[4,4]),s&&(this.variableNames.push("bias"),this.variableComponents.push(4)),i&&(this.variableNames.push("preluActivationWeights"),this.variableComponents.push(4))):(this.innerElementSize=this.elementsPerThread[0],s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights")),this.sequentialAccessByThreads=p,this.addBias=s,this.activation=a,this.hasPreluActivationWeights=i,this.tileAOuter=this.workgroupSize[1]*this.elementsPerThread[1],this.tileBOuter=this.workgroupSize[0]*this.elementsPerThread[0],this.tileInner=Math.max(this.workgroupSize[0]*this.innerElementSize,this.workgroupSize[1]),this.fitAOuter=e%this.tileAOuter===0,this.fitBOuter=o%this.tileBOuter===0,this.fitInner=n%this.tileInner===0,this.shaderKey=`conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`}getUserCode(){let t=this.isVec4?Fp(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner):Pp(this.elementsPerThread,this.workgroupSize,!this.isChannelsLast,this.tileInner,!1,null,this.sequentialAccessByThreads),e=this.isVec4?[this.innerElementSize,4,4]:[1,1,1];return`
    ${bue(this.isChannelsLast,this.fitAOuter,this.fitBOuter,this.fitInner,this.addBias,this.activation,this.hasPreluActivationWeights,e[0],e[1],e[2])}
    ${t}
  `}};var gx=class{constructor(t,e=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,",this.workgroupSize=[4,4,8],this.outputShape=t.outShape,this.isChannelsLast=t.dataFormat==="channelsLast",this.dispatchLayout=this.isChannelsLast?{x:[2],y:[1],z:[0,3]}:{x:[3],y:[2],z:[0,1]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.addBias=e,this.activation=o,this.hasPreluActivationWeights=n,e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.shaderKey=`conv2dnaive_${this.activation}_${this.isChannelsLast}`}getUserCode(){return`
       ${fr(this.activation,this.hasPreluActivationWeights,!1,4)}
       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{
         let coords = vec4<i32>(batch, row, col, chan);
         if (coordsInBounds4D(coords, uniforms.xShape)) {
           return  getX(batch, row, col, chan);
         } else {
          return 0.0;
         }
       }
       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
         let coords = vec4<i32>(row, col, xChannel, outChannel);
         if(coordsInBounds4D(coords, uniforms.wShape)) {
           return getW(row, col, xChannel, outChannel);
          } else {
            return 0.0;
          }
       }
       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {
         let coords = ${this.isChannelsLast?"vec4<i32>(batch, row, col, chan);":"vec4<i32>(batch, chan, row, col);"}
         if (coordsInBounds4D(coords, uniforms.outShape)) {
           var value = valueIn;
           ${Zr(this.addBias,this.activation)}
           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);
         }
       }
       ${G("index")} {
         let coords = getOutputCoords();
         let batch = coords[0];
         let outChannel = ${this.isChannelsLast?"coords[3];":"coords[1];"}
         let outRow = ${this.isChannelsLast?"coords[1];":"coords[2];"}
         let outCol = ${this.isChannelsLast?"coords[2];":"coords[3];"}
         var acc : f32 = 0.0;
         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];
             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];
             for (var xChannel = 0; xChannel < ${this.isChannelsLast?"uniforms.xShape[3];":"uniforms.xShape[1];"} xChannel = xChannel + 1) {
               ${this.isChannelsLast?"let v = readInp(batch, xRow, xCol, xChannel);":"let v = readInp(batch, xChannel, xRow, xCol);"}
               let f = readFilt(row, col, xChannel, outChannel);
               acc = acc + v * f;
             }
           }
         }
         writeResult(batch, outRow, outCol, outChannel, acc);
       }
     `}};var xx=class{constructor(t,e){this.variableNames=["x"],this.uniforms=`pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
       inChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=e,this.shaderKey=`im2col_${this.isChannelsLast}`}getUserCode(){let t=this.isChannelsLast?1:2,e=this.isChannelsLast?2:3,o=this.isChannelsLast?"coords[1]":"coords[2]",n=this.isChannelsLast?"coords[2]":"coords[1]",s=this.isChannelsLast?"getX(batch, xRow, xCol, ch)":"getX(batch, ch, xRow, xCol)";return`
    ${G("index")} {
      let coords = getCoordsFromIndex(index);
      if(index < uniforms.size) {
        let batch = coords[0];
        let row = ${o};
        let col = ${n};
        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];
        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);
        var value = 0.0;
        if(xRow < uniforms.xShape[${t}] && xRow >= 0) {
          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -
              uniforms.pads[1];
          let xCol = offsetX + uniforms.dilations[1] * ((col %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
          let ch = col % uniforms.inChannels;
          if(xCol < uniforms.xShape[${e}] && xCol >= 0) {
            value = ${s};
          }
        }
        setOutputAtIndex(index, value);
      }
    }
   `}};function yx(r,t){let e=r.length;return e>=3?t?[...r.slice(0,-3),r[e-3]*r[e-2],r[e-1]]:[...r.slice(0,-3),r[e-3],r[e-2]*r[e-1]]:!t&&e===1&&r[0]>1?[r[0],1]:null}function Cue({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let p=e.dataFormat==="channelsLast",u=!p,c=!1,l=p&&e.filterHeight===e.inHeight&&e.filterWidth===e.inWidth&&e.padInfo.type==="VALID",m=[],d,f;if(l){let x=e.inHeight*e.inWidth*e.inChannels;d=pe({inputs:{x:r},backend:o,attrs:{shape:[1,e.batchSize,x]}}),f=pe({inputs:{x:t},backend:o,attrs:{shape:[1,x,e.outChannels]}})}else d=pe({inputs:{x:r},backend:o,attrs:{shape:p?[e.batchSize,e.inHeight*e.inWidth,e.inChannels]:[e.batchSize,e.inChannels,e.inHeight*e.inWidth]}}),f=pe({inputs:{x:t},backend:o,attrs:{shape:[1,e.inChannels,e.outChannels]}});if(m.push(d),m.push(f),s!=null){let x=yx(s.shape,p);x!=null&&(s=pe({inputs:{x:s},backend:o,attrs:{shape:x}}),m.push(s))}if(n!=null){let x=yx(n.shape,p);x!=null&&(n=pe({inputs:{x:n},backend:o,attrs:{shape:x}}),m.push(n))}let h=Op({a:p?d:f,b:p?f:d,transposeA:u,transposeB:c,backend:o,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a}),g=pe({inputs:{x:h},backend:o,attrs:{shape:e.outShape}});m.push(h);for(let x of m)o.disposeData(x.dataId);return g}function wue({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let{filterWidth:p,filterHeight:u,inChannels:c,strideWidth:l,strideHeight:m,padInfo:d,outWidth:f,outHeight:h,dilationWidth:g,dilationHeight:x,dataFormat:b}=e,C=b==="channelsLast",S=p*u*c,k=h*f,_=C?[e.batchSize,k,S]:[e.batchSize,S,k],E=new xx(_,C),R=[{type:"int32",data:[d.top,d.left]},{type:"int32",data:[m,l]},{type:"int32",data:[x,g]},{type:"int32",data:[f]},{type:"int32",data:[c*p]},{type:"int32",data:[c]}],D=o.runWebGPUProgram(E,[r],r.dtype,R),P=[];P.push(D);let O=pe({inputs:{x:t},backend:o,attrs:{shape:[1,S,-1]}});if(P.push(O),s!=null){let U=yx(s.shape,C);U!=null&&(s=pe({inputs:{x:s},backend:o,attrs:{shape:U}}),P.push(s))}if(n!=null){let U=yx(n.shape,C);U!=null&&(n=pe({inputs:{x:n},backend:o,attrs:{shape:U}}),P.push(n))}let B=Op({a:C?D:O,b:C?O:D,transposeA:!C,transposeB:!1,backend:o,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a}),z=pe({inputs:{x:B},backend:o,attrs:{shape:e.outShape}});P.push(B);for(let U of P)o.disposeData(U.dataId);return z}function bx({x:r,filter:t,convInfo:e,backend:o,bias:n=null,preluActivationWeights:s=null,leakyreluAlpha:a=0,activation:i=null}){let p=n!=null,u=s!=null,c=e.dataFormat==="channelsLast",l=c&&e.filterHeight===e.inHeight&&e.filterWidth===e.inWidth&&e.padInfo.type==="VALID",m=A().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");if(!m&&(l||e.filterHeight===1&&e.filterWidth===1&&e.dilationHeight===1&&e.dilationWidth===1&&e.strideHeight===1&&e.strideWidth===1&&(e.padInfo.type==="SAME"||e.padInfo.type==="VALID")))return Cue({x:r,filter:t,convInfo:e,backend:o,bias:n,activation:i,preluActivationWeights:s,leakyreluAlpha:a});let d=A().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"),f=d>-1?d:o.thresholdToIncreaseWorkgroups,h=e.batchSize*Math.ceil(e.outHeight*e.outWidth/32)*Math.ceil(e.outChannels/32);if(A().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER")||h<=f)return wue({x:r,filter:t,convInfo:e,backend:o,bias:n,preluActivationWeights:s,leakyreluAlpha:a,activation:i});let g,x=[e.padInfo.top,e.padInfo.left],b=[{type:"int32",data:[e.filterHeight,e.filterWidth]},{type:"int32",data:[...x]},{type:"int32",data:[e.strideHeight,e.strideWidth]},{type:"int32",data:[e.dilationHeight,e.dilationWidth]}];if(m)g=new gx(e,p,i,u);else{let _=c?e.outHeight*e.outWidth:e.outChannels,E=c?e.outChannels:e.outHeight*e.outWidth,R=e.filterHeight*e.filterWidth*e.inChannels;b.push({type:"int32",data:[_]},{type:"int32",data:[E]},{type:"int32",data:[R]});let D=o.adapterInfo.isIntel();g=new hx(e,_,E,R,p,i,u,D)}let C=[],S=[r,t];p&&(!c&&n.shape.length===1&&(n=pe({inputs:{x:n},backend:o,attrs:{shape:[n.shape[0],1,1]}}),C.push(n)),S.push(n)),u&&(!c&&s.shape.length===1&&(s=pe({inputs:{x:s},backend:o,attrs:{shape:[s.shape[0],1,1]}}),C.push(s)),S.push(s)),i==="leakyrelu"&&(b.push({type:"float32",data:[a]}),g.uniforms+=" alpha : f32,");let k=o.runWebGPUProgram(g,S,r.dtype,b);for(let _ of C)o.disposeData(_.dataId);return k}function Sue(r){let{inputs:t,attrs:e,backend:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dataFormat:p,dilations:u,dimRoundingMode:c}=e,l=w.convertConv2DDataFormat(p),m=w.computeConv2DInfo(n.shape,s.shape,a,u,i,c,!1,l);return bx({x:n,filter:s,convInfo:m,backend:o})}var wV={kernelName:rn,backendName:"webgpu",kernelFunc:Sue};var Cx=class{constructor(t){this.variableNames=["dy","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,",this.workgroupSize=[64,1,1],this.size=!1,this.isVec4=!1,this.workPerThread=1,this.outputShape=t.inShape,this.isChannelsLast=t.dataFormat==="channelsLast",this.isVec4=this.isChannelsLast&&t.outChannels%4===0&&t.inChannels%4===0,this.isVec4?(this.workPerThread=2,this.outputComponent=4,this.workgroupSize=[4,4,4],this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[4,this.workPerThread,1])):(this.size=!0,this.workPerThread=1,this.workgroupSize=[64,1,1],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize)),this.shaderKey=`conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${this.workPerThread}`}getUserCode(){let t=this.isChannelsLast?1:2,e=this.isChannelsLast?2:3,o=this.isChannelsLast?3:1,n=`
    ${G()} {
      let batch = i32(globalId.z) / uniforms.outShape[1];
      let r = i32(globalId.z) % uniforms.outShape[1];
      let c = i32(globalId.y) * ${this.workPerThread};
      let d1 = i32(globalId.x) * 4;

      let dyCorner = vec2<i32>(r, c) - uniforms.pads;

      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
      // ? = to be determined. : = across all values in that axis.
      var dotProd: array<vec4<f32>, ${this.workPerThread}>;
      for (var i = 0; i < ${this.workPerThread}; i++) {
        dotProd[i] = vec4<f32>(0.0);
      }
      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);
        let wRPerm = uniforms.filterDims.x - 1 - wR;
        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||
            fract(dyR) > 0.0) {
          continue;
        }
        let idyR = i32(dyR);

        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);
          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);
          let wCPerm = uniforms.filterDims.y - 1 - wC;
          var bDyCVal = true;
          var bDyCVal2 = true;
          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
              fract(dyC) > 0.0) {
            bDyCVal = false;
          }
          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||
              fract(dyC2) > 0.0) {
            bDyCVal2 = false;
          }

          let idyC = i32(dyC);
          let idyC2 = i32(dyC2);
          if (bDyCVal && bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
              xValue = getDy(batch, idyR, idyC2, d2);
              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),
                                                  dot(xValue, wValue1),
                                                  dot(xValue, wValue2),
                                                  dot(xValue, wValue3));
            }
          } else if (bDyCVal) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[0] = dotProd[0] + tmpval;
            }
          } else if (bDyCVal2) {
            let d2Length = uniforms.outBackprop[3];
            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {
              let wValue0 = getW(wRPerm, wCPerm, d1, d2);
              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);
              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);
              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);
              var xValue =  getDy(batch, idyR, idyC2, d2);
              let tmpval = vec4<f32>(dot(xValue, wValue0),
                                     dot(xValue, wValue1),
                                     dot(xValue, wValue2),
                                     dot(xValue, wValue3));
              dotProd[1] = dotProd[1] + tmpval;
            }
          }
        }
      }

      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
        let coords = vec4<i32>(batch, r, c + i, d1);
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);
        }
      }
    }
    `;return this.isVec4?`
    ${n}
    `:`
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${o}];

        let dyCorner = vec2<i32>(coords[${t}], coords[${e}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = i32(dyC);

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              let xValue = ${this.isChannelsLast?"getDy(batch, idyR, idyC, d2)":"getDy(batch, d2, idyR, idyC)"};
              let wValue = getW(wRPerm, wCPerm, d1, d2);
              dotProd = dotProd + xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}},wx=class{constructor(t){this.variableNames=["x","dy"],this.uniforms="pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.filterShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t.dataFormat==="channelsLast",this.shaderKey=`conv2DDerFilter_${this.isChannelsLast}`}getUserCode(){return`
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let d2 = coords[3];

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b = b + 1) {
          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];
            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              if (${this.isChannelsLast}) {
                let dyValue = getDy(b, yR, yC, d2);
                let xValue = getX(b, xR, xC, d1);
                dotProd = dotProd + xValue * dyValue;
              } else {
                let dyValue = getDy(b, d2, yR, yC);
                let xValue = getX(b, d1, xR, xC);
                dotProd = dotProd + xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}},Sx=class{constructor(t){this.variableNames=["x","dy"],this.uniforms=`pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,
       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.filterShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerFilter"}getUserCode(){return`
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wF = coords.x;
        let wR = coords.y;
        let wC = coords.z;
        let d1 = coords.w;
        let d2 = coords.u;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yF = 0; yF < uniforms.outDepth; yF++) {
            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];
            if (xF < 0 || xF >= uniforms.inDepth) {
              continue;
            }

            for (var yR = 0; yR < uniforms.outHeight; yR++) {
              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];
              if (xR < 0 || xR >= uniforms.inHeight) {
                continue;
              }

              for (var yC = 0; yC < uniforms.outWidth; yC++) {
                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];
                if (xC < 0 || xC >= uniforms.inWidth) {
                  continue;
                }

                let dyValue = getDy(b, yF, yR, yC, d2);
                let xValue = getX(b, xF, xR, xC, d1);
                dotProd += xValue * dyValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}},Ix=class{constructor(t){this.variableNames=["dy","W"],this.uniforms=`filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3DDerInput"}getUserCode(){return`
    ${G("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let d1 = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyFCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);
          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {
            continue;
          }
          let idyF = i32(dyF);

          let wFPerm = uniforms.filterDims[0] - 1 - wF;

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            let wRPerm = uniforms.filterDims[1] - 1 - wR;

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let wCPerm = uniforms.filterDims[2] - 1 - wC;

              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {
                let xValue = getDy(batch, idyF, idyR, idyC, d2);
                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `}};function Iue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,pad:i,dataFormat:p,dimRoundingMode:u,filterShape:c}=o,l=w.convertConv2DDataFormat(p),m=w.computeConv2DInfo(n.shape,c,a,1,i,u,!1,l),d=new wx(m),f=[{type:"int32",data:[m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.batchSize]},{type:"int32",data:[m.outHeight]},{type:"int32",data:[m.outWidth]},{type:"int32",data:[m.inHeight]},{type:"int32",data:[m.inWidth]}];return e.runWebGPUProgram(d,[n,s],n.dtype,f)}var SV={kernelName:Oi,backendName:"webgpu",kernelFunc:Iue};function vue(r=4){let t=s=>{switch(s){case 1:return"return W[getIndexFromCoords4D(coord, uniforms.wShape)];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${s} is not supported.`)}},o=`if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${Ae(r)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${Ae(r)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${r}];`}
      }
      return ${Ae(r)}(0.0);`;return`
  fn mm_readA(batch: i32, row : i32, col : i32) -> ${Ae(r)} {
    ${o}
  }

  fn mm_readB(batch: i32, row : i32, col : i32) -> ${Ae(r)} {
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${t(r)}
    }
    return ${Ae(r)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${Ae(r)}) {
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${r}] = value;
    }
  }`}var vx=class{constructor(t){this.variableNames=["x","W"],this.uniforms="filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,",this.outputShape=t.inShape,y.assert(t.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),this.isVec4=t.inChannels%4===0&&t.outChannels%4===0,this.dispatchLayout={x:[3],y:[1,2],z:[0]},this.workgroupSize=lm(this.dispatchLayout,this.outputShape,this.isVec4),this.elementsPerThread=mm(this.dispatchLayout,this.outputShape,this.isVec4),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,this.elementsPerThread),this.isVec4&&(this.outputComponent=4,this.variableComponents=[4,1]),this.shaderKey=`conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`}getUserCode(){let t=this.isVec4?Fp(this.elementsPerThread,this.workgroupSize):Pp(this.elementsPerThread,this.workgroupSize);return`
    ${vue(this.isVec4?4:1)}
    ${t}
    `}};function kue(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{inputShape:a,strides:i,pad:p,dataFormat:u,dimRoundingMode:c}=o,l=w.convertConv2DDataFormat(u),m=w.computeConv2DInfo(a,s.shape,i,1,p,c,!1,l),d=[{type:"int32",data:[m.filterHeight,m.filterWidth]},{type:"int32",data:[m.filterHeight-1-m.padInfo.top,m.filterWidth-1-m.padInfo.left]},{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.batchSize,m.outHeight,m.outWidth,m.outChannels]}],f;if(A().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE")||m.dataFormat!=="channelsLast")f=new Cx(m);else{f=new vx(m);let h=m.inHeight*m.inWidth,g=m.inChannels,x=m.filterHeight*m.filterWidth*m.outChannels;d.push({type:"uint32",data:[h]},{type:"uint32",data:[g]},{type:"uint32",data:[x]})}return e.runWebGPUProgram(f,[n,s],"float32",d)}var IV={kernelName:on,backendName:"webgpu",kernelFunc:kue};var kx=class{constructor(t){this.variableNames=["x","W"],this.uniforms="filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="conv3dnaive"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords.x;
        let d2 = coords.u;

        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;
        let xFCorner = xFRCCorner.x;
        let xRCorner = xFRCCorner.y;
        let xCCorner = xFRCCorner.z;

        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;
        let inputDepthVec4Remainder = uniforms.xShape.u % 4;

        var dotProd = 0.0;
        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {
          let xF = xFCorner + wF * uniforms.dilations[0];
          if (xF < 0 || xF >= uniforms.xShape.y) {
            continue;
          }

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let xR = xRCorner + wR * uniforms.dilations[1];
            if (xR < 0 || xR >= uniforms.xShape.z) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let xC = xCCorner + wC * uniforms.dilations[2];
              if (xC < 0 || xC >= uniforms.xShape.w) {
                continue;
              }

              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {
                let xValues = vec4<f32>(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                let wValues = vec4<f32>(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (inputDepthVec4Remainder == 1) {
                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *
                  getW(wF, wR, wC, inputDepthNearestVec4, d2);
              } else if (inputDepthVec4Remainder == 2) {
                let xValues = vec2<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)
                );
                let wValues = vec2<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (inputDepthVec4Remainder == 3) {
                let xValues = vec3<f32>(
                  getX(batch, xF, xR, xC, inputDepthNearestVec4),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)
                );
                let wValues = vec3<f32>(
                  getW(wF, wR, wC, inputDepthNearestVec4, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),
                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }`}};function Nue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p}=o,u=w.computeConv3DInfo(n.shape,s.shape,a,p,i),c=[u.padInfo.front,u.padInfo.top,u.padInfo.left],l=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[...c]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationDepth,u.dilationHeight,u.dilationWidth]}],m=new kx(u),d=dt(n.dtype,s.dtype);return e.runWebGPUProgram(m,[n,s],d,l)}var vV={kernelName:nn,backendName:"webgpu",kernelFunc:Nue};function Tue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,pad:i,filterShape:p}=o,u=w.computeConv3DInfo(n.shape,p,a,1,i),c=new Sx(u),l=[{type:"int32",data:[u.padInfo.front,u.padInfo.top,u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.batchSize]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.inDepth]},{type:"int32",data:[u.inHeight]},{type:"int32",data:[u.inWidth]}];return e.runWebGPUProgram(c,[n,s],s.dtype,l)}var kV={kernelName:Xa,backendName:"webgpu",kernelFunc:Tue};function _ue(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:a,pad:i,inputShape:p}=o,u=w.computeConv3DInfo(p,s.shape,a,1,i),c=new Ix(u),l=[{type:"int32",data:[u.filterDepth,u.filterHeight,u.filterWidth]},{type:"int32",data:[u.filterDepth-1-u.padInfo.front,u.filterHeight-1-u.padInfo.top,u.filterWidth-1-u.padInfo.left]},{type:"int32",data:[u.strideDepth,u.strideHeight,u.strideWidth]},{type:"int32",data:[u.outDepth]},{type:"int32",data:[u.outHeight]},{type:"int32",data:[u.outWidth]},{type:"int32",data:[u.outChannels]}];return e.runWebGPUProgram(c,[n,s],n.dtype,l)}var NV={kernelName:sn,backendName:"webgpu",kernelFunc:_ue};var $ue=ye({opType:Z.COS}),TV={kernelName:an,backendName:"webgpu",kernelFunc:$ue};var Eue=ye({opType:Z.COSH}),_V={kernelName:un,backendName:"webgpu",kernelFunc:Eue};var Nx=class{constructor(t,e,o,n){this.variableNames=["Image","Boxes","BoxInd"],this.uniforms="extrapolationValue : f32,",this.workgroupSize=[64,1,1],this.size=!0;let[s]=e;this.outputShape=[s,o[0],o[1],t],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.methodId=n==="bilinear"?1:0,this.cropHeightBiggerThan1=this.outputShape[1]>1,this.cropWidthBiggerThan1=this.outputShape[2]>1,this.shaderKey=`cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`}getUserCode(){let[t,e]=["f32(uniforms.imageShape[1] - 1)","f32(uniforms.imageShape[2] - 1)"],[o,n,s]=this.cropHeightBiggerThan1?[`(${t} / f32(uniforms.outShape[1] - 1))`,"(y2-y1) * height_ratio",`y1*${t} + f32(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${t}`],[a,i,p]=this.cropWidthBiggerThan1?[`(${e} / f32(uniforms.outShape[2] - 1))`,"(x2-x1) * width_ratio",`x1*${e} + f32(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${e}`];return`
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${o});
        let width_ratio = f32(${a});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${i};
        let in_y = ${s};
        if( in_y < 0.0 || in_y > ${t} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${p};
        if( in_x < 0.0 || in_x > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `}};var Rue=r=>{let{inputs:t,backend:e,attrs:o}=r,{image:n,boxes:s,boxInd:a}=t,{cropSize:i,method:p,extrapolationValue:u}=o,c=new Nx(n.shape[3],s.shape,i,p),l=[{type:"float32",data:[u]}];return e.runWebGPUProgram(c,[n,s,a],"float32",l)},$V={kernelName:ln,backendName:"webgpu",kernelFunc:Rue};var Lp;(function(r){r.Prod="*",r.Sum="+"})(Lp||(Lp={}));var xm=class{constructor(t,e,o,n){this.variableNames=["x"],this.uniforms="index : f32,",this.size=!0,this.workgroupSize=[128,1,1],this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.exclusive=o,this.reverse=n,this.op=t,this.shaderKey=`cum_${this.op}_${this.exclusive}_${this.reverse}`}getUserCode(){let t=this.outputShape.length,e=this.op===Lp.Prod?"1.0":"0.0",o=this.exclusive?e:`getX(${EV(t,"coords",this.op)})`,n=this.outputShape[this.outputShape.length-1],s="",a="";return this.exclusive?(s=this.reverse?`end != ${n-1}`:"end != 0",a=this.reverse?"end + 1":"end - 1"):(s=this.reverse?`end + pow2 < ${n}`:"end >= pow2",a=this.reverse?"end + pow2":"end - pow2"),`
      ${G("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${RV(t,"coords",this.op)};
         var val = ${o};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${s}) {
           let idx = ${a};
           ${RV(t,"coords",this.op)} = idx;
           val ${this.op}= getX(${EV(t,"coords",this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `}};function EV(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.x, ${t}.y`;if(r===3)return`${t}.x, ${t}.y, ${t}.z`;if(r===4)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function RV(r,t,e){if(r===1)return`${t}`;if(r===2)return`${t}.y`;if(r===3)return`${t}.z`;if(r===4)return`${t}.w`;throw Error(`Cumulative ${e} for rank ${r} is not yet supported`)}function Tx(r,t,e,o,n,s){let a=t.shape.length,i=w.getAxesPermutation([o],a),p=t;i!=null&&(p=yr({inputs:{x:t},backend:e,attrs:{perm:i}}));let u=w.getInnerMostAxes(1,a)[0];if(u!==a-1)throw new Error(`WebGPU cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${o}`);let c=p.shape[u],l=Ft({inputs:{x:p},backend:e});for(let m=0;m<=Math.ceil(Math.log2(c))-1;m++){let d=new xm(r,p.shape,!1,s),f=l,h=[{type:"float32",data:[m]}];l=e.runWebGPUProgram(d,[l],l.dtype,h),e.disposeData(f.dataId)}if(n){let m=new xm(r,p.shape,n,s),d=l,f=[{type:"float32",data:[0]}];l=e.runWebGPUProgram(m,[l],l.dtype,f),e.disposeData(d.dataId)}if(i!=null){let m=w.getUndoAxesPermutation(i),d=yr({inputs:{x:l},backend:e,attrs:{perm:m}});return e.disposeData(l.dataId),e.disposeData(p.dataId),d}return l}function Due(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:a,reverse:i}=o;return Tx(Lp.Prod,n,e,s,a,i)}var DV={kernelName:pn,backendName:"webgpu",kernelFunc:Due};function Aue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,exclusive:a,reverse:i}=o;return Tx(Lp.Sum,n,e,s,a,i)}var AV={kernelName:cn,backendName:"webgpu",kernelFunc:Aue};function Fue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,weights:s}=t,{size:a,binaryOutput:i}=o,p=n.shape.length===1,c=y.sizeFromShape(s.shape)>0,l=s.dtype,m=p?[n.shape[0]]:[n.shape[0],n.shape[1]],d=p?[a]:[n.shape[0],a],f=kt({backend:e,attrs:{shape:d,value:0,dtype:l}}),h=new Jc(m,c,i),g=[{type:"int32",data:[a]}],x=c?[n,s]:[n];return e.runWebGPUProgram(h,x,l,g,f)}var FV={kernelName:ra,backendName:"webgpu",kernelFunc:Fue};var _x=class{constructor(t,e){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.uniforms="blockSize : i32,",this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`depthToSpace_${e}`,this.dataFormat=e}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`}getHeightCoordString(){return this.dataFormat==="NHWC"?"coords[1]":"coords[2]"}getWidthCoordString(){return this.dataFormat==="NHWC"?"coords[2]":"coords[3]"}getDepthCoordString(){return this.dataFormat==="NHWC"?"coords[3]":"coords[1]"}getOutputDepthSize(){return this.dataFormat==="NHWC"?"uniforms.outShape[3]":"uniforms.outShape[1]"}getInputSamplingString(){return this.dataFormat==="NHWC"?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}};function Pue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockSize:s,dataFormat:a}=o,i=n.shape[0],p=a==="NHWC"?n.shape[1]:n.shape[2],u=a==="NHWC"?n.shape[2]:n.shape[3],c=a==="NHWC"?n.shape[3]:n.shape[1],l=p*s,m=u*s,d=c/(s*s),f=a==="NHWC"?[i,l,m,d]:[i,d,l,m],h=[{type:"int32",data:[s]}],g=new _x(f,a);return e.runWebGPUProgram(g,[n],n.dtype,h)}var PV={kernelName:mn,backendName:"webgpu",kernelFunc:Pue};var $x=class{constructor(t,e,o,n=!1,s=null,a=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>,",this.workgroupSize=[16,16,1],this.outputShape=t,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),n&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.addBias=n,this.activation=s,this.hasPreluActivation=a,this.filterHeight=e,this.filterWidth=o,this.shaderKey=`depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`}getUserCode(){let t=this.filterWidth*this.filterHeight,e=this.workgroupSize[0]*this.workgroupSize[1]*this.workgroupSize[2],o=this.workgroupSize[1]+this.filterHeight-1,n=this.workgroupSize[0]+this.filterWidth-1;return`
      ${fr(this.activation,this.hasPreluActivation,!1,4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${o}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${G()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${this.workgroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workgroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = i32(localIndex);
        ${t<e?`if (wIndex < ${t})`:`for(; wIndex < ${t}; wIndex = wIndex + ${e})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${Zr(this.addBias,this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};var tl=class{constructor(t,e=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms="pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,",this.workgroupSize=[64,1,1],this.workPerThread=4,this.outputComponent=4,this.outputShape=t.outShape,this.virtualWidth=Math.ceil(this.outputShape[2]/this.workPerThread)*this.workPerThread;let s=[this.outputShape[0],this.outputShape[1],this.virtualWidth,this.outputShape[3]];this.dispatchLayout=X(s),this.dispatch=H(this.dispatchLayout,s,this.workgroupSize,[this.outputComponent*this.workPerThread,1,1]),y.assert(t.dataFormat==="channelsLast",()=>"TODO: NCHW is unimplemented"),e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=t,this.addBias=e,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwiseVec4_${o}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`}getUserCode(){let t=(this.workPerThread-1)*this.convInfo.strideWidth+this.convInfo.filterWidth,e=this.convInfo.strideHeight,o=this.convInfo.strideWidth;return`
      ${fr(this.activation,this.hasPreluActivation,!0,4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (col >=0 && col < uniforms.inDims[1]) {
          value = getX(batch, row, col, channel);
        }
        return value;
      }

      ${G("index")} {
        let width0 = uniforms.outShape[3] / ${this.outputComponent};
        let d1 = (index % width0) * ${this.outputComponent};
        var index1 = index / width0;
        let width1 = uniforms.virtualWidth / ${this.workPerThread};
        let c = (index1 % width1) * ${this.workPerThread};
        index1 = index1 / width1;
        let r = index1 % uniforms.outShape[1];
        let batch = index1 / uniforms.outShape[1];

        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${e}, ${o}) - uniforms.pads;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${t}>;
        var dotProd : array<vec4<f32>, ${this.workPerThread}>;
        for (var i = 0; i < ${this.workPerThread}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          if (xR >=0 && xR < uniforms.inDims[0]) {
            for (var i = 0; i < ${t}; i++) {
              xVals[i] = readX(batch, xR, xCCorner + i, d1);
            }
            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
              let wValue = getW(wR, wC, d1, 0);
              for (var i = 0; i < ${this.workPerThread}; i++) {
                dotProd[i] = fma(xVals[i * ${o} + wC], wValue, dotProd[i]);
              }
            }
          }
        }

        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${Zr(this.addBias,this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `}};var rl=class{constructor(t,e=!1,o=null,n=!1){this.variableNames=["x","W"],this.uniforms=`pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`,this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.isChannelsLast=t.dataFormat==="channelsLast",e&&this.variableNames.push("bias"),n&&this.variableNames.push("preluActivationWeights"),this.convInfo=t,this.addBias=e,this.activation=o,this.hasPreluActivation=n,this.shaderKey=`depthwise_${this.activation}_${this.isChannelsLast}`}getUserCode(){let t=this.isChannelsLast?"getX(batch, xR, xC, d1);":"getX(batch, d1, xR, xC);";return`
      ${fr(this.activation,this.hasPreluActivation,!1,4)}

      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast?"yz":"zw"}) * uniforms.strides - uniforms.pads;
          let d2 = coords[${this.isChannelsLast?3:1}];
          let channelMul = uniforms.wShape[3];
          let d1 = d2 / channelMul;
          let q = d2 % channelMul;

          let inputRowStart = xRCCorner.x;
          let inputColStart = xRCCorner.y;
          let inputRowEnd = inputRowStart + uniforms.filterHeight *
              uniforms.dilations[0];
          let inputColEnd = inputColStart + uniforms.filterWidth *
              uniforms.dilations[1];

          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
          var value = 0.0;

          // Extract if checking out of for loop for performance.
          if (inputRowStart >= 0 && inputColStart >= 0 &&
            inputRowEnd < uniforms.inDims[0] &&
                inputColEnd < uniforms.inDims[1]) {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  let xVal = ${t};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            } else {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilations[0];

                if (xR < 0 || xR >= uniforms.inDims[0]) {
                  continue;
                }

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilations[1];

                  if (xC < 0 || xC >= uniforms.inDims[1]) {
                    continue;
                  }

                  let xVal = ${t};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            }
            ${Zr(this.addBias,this.activation)}
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `}};function Oue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dataFormat:p,dilations:u,dimRoundingMode:c}=o,l=w.convertConv2DDataFormat(p),m=u;m==null&&(m=[1,1]);let d=w.computeConv2DInfo(n.shape,s.shape,a,m,i,c,!0,l),f=[{type:"int32",data:[d.padInfo.top,d.padInfo.left]},{type:"int32",data:[d.inHeight,d.inWidth]}],h=d.dataFormat==="channelsLast",g;return!h&&d.inHeight>16&&d.inWidth>16&&d.strideHeight===1&&d.strideWidth===1&&d.dilationWidth===1&&d.dilationHeight===1&&d.inChannels===d.outChannels?g=new $x(d.outShape,d.filterHeight,d.filterWidth):h&&d.outHeight>4&&d.outWidth>4&&d.strideWidth<=2&&d.inChannels===d.outChannels&&d.dilationHeight===1&&d.dilationWidth===1&&d.inChannels%4===0?(g=new tl(d),f.push({type:"int32",data:[g.virtualWidth]})):(g=new rl(d),f.push({type:"int32",data:[d.filterHeight]},{type:"int32",data:[d.filterWidth]},{type:"int32",data:[d.strideHeight,d.strideWidth]},{type:"int32",data:[d.dilationHeight,d.dilationWidth]})),e.runWebGPUProgram(g,[n,s],n.dtype,f)}var OV={kernelName:dn,backendName:"webgpu",kernelFunc:Oue};var Ex=class{constructor(t){this.variableNames=["x","dy"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,
      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.filterShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_filter"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let wR = coords[0];
        let wC = coords[1];
        let d1 = coords[2];
        let dm = coords[3];
        let d2 = d1 * uniforms.channelMul + dm;

        var dotProd = 0.0;
        for (var b = 0; b < uniforms.batchSize; b++) {
          for (var yR = 0; yR < uniforms.outHeight; yR++) {
            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];

            if (xR < 0 || xR >= uniforms.inHeight) {
              continue;
            }

            for (var yC = 0; yC < uniforms.outWidth; yC++) {
              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];

              if (xC < 0 || xC >= uniforms.inWidth) {
                continue;
              }

              let dyValue = getDy(b, yR, yC, d2);
              let xValue = getX(b, xR, xC, d1);
              dotProd += xValue * dyValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}},Rx=class{constructor(t){this.variableNames=["dy","W"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32, channelMul : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="depthwise_conv2d_backprop_input"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[3];
        let dyCorner = coords.yz - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }

          let idyR = i32(dyR);
          let wRPerm = uniforms.filterDims[0] - 1 - wR;

          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }

            let idyC = i32(dyC);
            let wCPerm = uniforms.filterDims[1] - 1 - wC;

            for (var dm = 0; dm < uniforms.channelMul; dm++) {
              let d2 = d1 * uniforms.channelMul + dm;
              let xValue = getDy(batch, idyR, idyC, d2);
              let wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}};function Mue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,dy:s}=t,{strides:a,dilations:i,pad:p,dimRoundingMode:u,filterShape:c}=o,l=w.computeConv2DInfo(n.shape,c,a,i,p,u,!0),m=new Ex(l),d=[{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"int32",data:[l.inHeight]},{type:"int32",data:[l.inWidth]},{type:"int32",data:[l.batchSize]},{type:"int32",data:[l.outChannels/l.inChannels]}];return e.runWebGPUProgram(m,[n,s],"float32",d)}var MV={kernelName:Mi,backendName:"webgpu",kernelFunc:Mue};function Lue(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,filter:s}=t,{strides:a,dilations:i,pad:p,dimRoundingMode:u,inputShape:c}=o,l=w.computeConv2DInfo(c,s.shape,a,i,p,u,!0),m=new Rx(l),d=[{type:"int32",data:[l.strideHeight,l.strideWidth]},{type:"int32",data:[l.filterHeight-1-l.padInfo.top,l.filterWidth-1-l.padInfo.left]},{type:"int32",data:[l.filterHeight,l.filterWidth]},{type:"int32",data:[l.outHeight]},{type:"int32",data:[l.outWidth]},{type:"int32",data:[l.outChannels/l.inChannels]}];return e.runWebGPUProgram(m,[n,s],n.dtype,d)}var LV={kernelName:Li,backendName:"webgpu",kernelFunc:Lue};var Dx=class{constructor(t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t,t],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="diag"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);
          setOutputAtIndex(index, value);
        }
      }
    `}};function Bue(r){let{inputs:t,backend:e}=r,{x:o}=t,n=[...o.shape,...o.shape],s=y.sizeFromShape(o.shape),a=pe({inputs:{x:o},backend:e,attrs:{shape:[s]}}),i=new Dx(s),p=e.runWebGPUProgram(i,[a],a.dtype),u=pe({inputs:{x:p},backend:e,attrs:{shape:n}});return e.disposeData(a.dataId),e.disposeData(p.dataId),u}var BV={kernelName:oa,backendName:"webgpu",kernelFunc:Bue};var Ax=class{constructor(t){this.variableNames=["x","w"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.outShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="dilation2d"}getUserCode(){return`
       ${G("index")} {
         if (index < uniforms.size) {
           let neg_infinity = -3.4e38;
           let coords = getOutputCoords();
           let batch = coords.x;
           let d1 = coords.w;
           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;
           let hBeg = outTopLeftCorner.x;
           let wBeg = outTopLeftCorner.y;

           var curVal = neg_infinity;
           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {
             let hIn = hBeg + h * uniforms.dilations[0];

             if (hIn >= 0 && hIn < uniforms.xShape[1]) {
               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {
                 let wIn = wBeg + w * uniforms.dilations[1];

                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {
                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);
                   if (val > curVal) {
                     curVal = val;
                   }
                 }
               }
             }
           }

           setOutputAtIndex(index, curVal);
         }
       }
     `}};function zue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s}=t,{strides:a,pad:i,dilations:p}=o,u=w.computeDilation2DInfo(n.shape,s.shape,a,i,"NHWC",p),c=[u.padInfo.top,u.padInfo.left],l=[{type:"int32",data:[u.filterHeight,u.filterWidth]},{type:"int32",data:[...c]},{type:"int32",data:[u.strideHeight,u.strideWidth]},{type:"int32",data:[u.dilationHeight,u.dilationWidth]}],m=new Ax(u);return e.runWebGPUProgram(m,[n,s],n.dtype,l)}var zV={kernelName:fn,backendName:"webgpu",kernelFunc:zue};var Fx=class{constructor(t,e){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t.inShape,this.dispatchLayout=X(t.outShape),this.dispatch=H(this.dispatchLayout,t.outShape,this.workgroupSize),e!=="float32"&&e!=="int32")throw new Error(`Dilation2DBackpropInput only supports float32 and int32
          types, does not support ${e} type.`);this.type=e,this.shaderKey="dilation2DBackpropInput"}getUserCode(){return`
       ${G("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var xRMax = 0;
           var xCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     xRMax = xR;
                     xCMax = xC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.xShape[3] *
               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));
           let value = getDy(b, r, c, d);
           ${Qr("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}},Px=class{constructor(t,e,o){if(this.variableNames=["x","w","dy"],this.uniforms="filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t.filterShape,this.dispatchLayout=X(t.outShape),this.dispatch=H(this.dispatchLayout,t.outShape,this.workgroupSize),o!=="float32"&&o!=="int32")throw new Error(`Dilation2DBackpropFilter only supports float32 and int32
          types, does not support ${o} type.`);this.type=o,this.shaderKey="dilation2DBackpropFilter"}getUserCode(){return`
       ${G("index")} {
         if (index < uniforms.dySize) {
           let coords = getDyCoordsFromIndex(index);
           let b = coords[0];
           let r = coords[1];
           let c = coords[2];
           let d = coords[3];

           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;
           var curVal = -3.4e38;  // neg_infinity
           var wRMax = 0;
           var wCMax = 0;

           // In the case of multiple argmax branches, we only back-propagate
           // along the last branch, i.e., the one with largest value of
           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling
           // backward routines.
           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {
             let xR = dyCorner.x + wR * uniforms.dilations[0];

             if (xR >= 0 && xR < uniforms.xShape[1]) {
               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {
                 let xC = dyCorner.y + wC * uniforms.dilations[1];

                 if (xC >= 0 && xC < uniforms.xShape[2]) {
                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);
                   if (val > curVal) {
                     curVal = val;
                     wRMax = wR;
                     wCMax = wC;
                   }
                 }
               }
             }
           }

           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);
           let value = getDy(b, r, c, d);
           ${Qr("&result[flatIndexIn]","value",this.type)}
         }
       }
     `}};function Vue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,dy:a}=t,{strides:i,pad:p,dilations:u}=o,c=w.computeDilation2DInfo(n.shape,s.shape,i,p,"NHWC",u),l=s.dtype,m=new Px(c,s.shape,l),d=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[y.sizeFromShape(c.outShape)]}],f=kt({backend:e,attrs:{shape:s.shape,value:0,dtype:l}});return e.runWebGPUProgram(m,[n,s,a],l,d,f)}var VV={kernelName:zi,backendName:"webgpu",kernelFunc:Vue};function Wue(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,dy:a}=t,{strides:i,pad:p,dilations:u}=o,c=w.computeDilation2DInfo(n.shape,s.shape,i,p,"NHWC",u),l=n.dtype,m=new Fx(c,l),d=[{type:"int32",data:[c.filterHeight,c.filterWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[y.sizeFromShape(c.outShape)]}],f=kt({backend:e,attrs:{shape:c.inShape,value:0,dtype:l}});return e.runWebGPUProgram(m,[n,s,a],l,d,f)}var WV={kernelName:Bi,backendName:"webgpu",kernelFunc:Wue};var Ox=class{constructor(t,e,o){this.variableNames=["Image"],this.uniforms="alpha: f32,",this.workgroupSize=[64,1,1],this.pixelsOpType=Ii.DRAW,this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.type=e,this.textureFormat=o,this.shaderKey=`draw_${e}_${o}`}getUserCode(){let t,e=this.type==="float32"?"value":"value / 255.0";return t=`
      if (uniforms.numChannels == 1) {
        rgba[0] = ${e};
        rgba[1] = ${e};
        rgba[2] = ${e};
      } else {
        rgba[d] = ${e};
      }`,`
       @group(0) @binding(0) var outImage : texture_storage_2d<${this.textureFormat}, write>;
       ${G("index")} {
         if (index < uniforms.size) {
           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);
           for (var d = 0; d < uniforms.numChannels; d = d + 1) {
             let value = f32(inBuf[index * uniforms.numChannels + d]);
             ${t}
           }
           rgba.x = rgba.x * rgba.w;
           rgba.y = rgba.y * rgba.w;
           rgba.z = rgba.z * rgba.w;
           let coords = getCoordsFromIndex(index);
           textureStore(outImage, vec2<i32>(coords.yx), rgba);
         }
       }
      `}};function Uue(r){let{inputs:t,backend:e,attrs:o}=r,{image:n}=t,{canvas:s,options:a}=o,[i,p]=n.shape.slice(0,2),{imageOptions:u}=a||{},c=(u==null?void 0:u.alpha)||1,l=e.device.features.has("bgra8unorm-storage")?"bgra8unorm":"rgba8unorm",m=[i,p],d=new Ox(m,n.dtype,l);s.width=p,s.height=i;let f="webgpu",h=s.getContext(f),g;h||(g=new OffscreenCanvas(p,i),h=g.getContext(f));let x=n.shape.length===3?n.shape[2]:1;h.configure({device:e.device,format:l,usage:GPUTextureUsage.STORAGE_BINDING,alphaMode:"premultiplied"});let b="int32",C=e.makeTensorInfo(m,b),S=e.tensorMap.get(C.dataId);S.resource=h.getCurrentTexture(),S.external=!0;let k=[{type:"uint32",data:[x]},{type:"float32",data:[c]}];if(e.runWebGPUProgram(d,[n],b,k,C),g){let _=s.getContext("2d");if(!_)throw new Error("Please make sure this canvas has only been used for 2d or webgpu context!");_.drawImage(g,0,0)}return e.disposeData(C.dataId),n}var UV={kernelName:Pu,backendName:"webgpu",kernelFunc:Uue};var s0=et({opType:fe.MUL,cpuKernelImpl:vz,supportsComplex:!0}),GV={kernelName:Yn,backendName:"webgpu",kernelFunc:s0};function a0(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;return eo(n,s,a,"sum",e)}var HV={kernelName:Is,backendName:"webgpu",kernelFunc:a0};function Gue(r){let{inputs:t,backend:e,attrs:o}=r,{equation:n}=o,s=t,{allDims:a,summedDims:i,idDims:p}=w.decodeEinsumEquation(n,s.length);w.checkEinsumDimSizes(a.length,p,s);let{path:u,steps:c}=w.getEinsumComputePath(i,p),l=c.length,m=null,d=a.length,f=[];for(let h=0;h<l;++h){for(let g of c[h]){let{permutationIndices:x,expandDims:b}=w.getEinsumPermutation(d,p[g]),C;w.isIdentityPermutation(x)?C=s[g]:(C=yr({inputs:{x:s[g]},backend:e,attrs:{perm:x}}),f.push(C));let S=C.shape.slice();for(let k=0;k<b.length;++k)S.splice(b[k],0,1);y.arraysEqual(C.shape,S)||(C=pe({inputs:{x:C},backend:e,attrs:{shape:S}}),f.push(C)),m===null?m=C:(m=s0({inputs:{a:C,b:m},backend:e}),f.push(m))}h<l-1&&(u[h]>=0&&(m=a0({inputs:{x:m},backend:e,attrs:{axis:u[h]-(a.length-d),keepDims:!1}}),f.push(m)),d--)}for(let h of f)h!==m&&e.disposeData(h.dataId);return m}var KV={kernelName:Vi,backendName:"webgpu",kernelFunc:Gue};var Hue=ye({opType:Z.ELU}),qV={kernelName:gn,backendName:"webgpu",kernelFunc:Hue};var Kue=r=>{let{inputs:t,backend:e}=r,{dy:o,y:n}=t,s=new ki(fe.ELU_DER,o.shape,n.shape);return e.runWebGPUProgram(s,[o,n],o.dtype)},jV={kernelName:Ya,backendName:"webgpu",kernelFunc:Kue};var que=et({opType:fe.EQUAL,dtype:"bool",cpuKernelImpl:pz}),XV={kernelName:yn,backendName:"webgpu",kernelFunc:que};var jue=ye({opType:Z.ERF}),YV={kernelName:xn,backendName:"webgpu",kernelFunc:jue};var Xue=ye({opType:Z.EXP,cpuKernelImpl:cz,dtype:"float32"}),QV={kernelName:bn,backendName:"webgpu",kernelFunc:Xue};function Mx(r){let{inputs:t,attrs:e,backend:o}=r,{dim:n}=e,{input:s}=t,a=s.shape.length,i=s.shape.slice(),p=n;return n<0&&(y.assert(-(a+1)<=n,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),p=a+n+1),i.splice(p,0,1),pe({inputs:{x:s},backend:o,attrs:{shape:i}})}var ZV={kernelName:na,backendName:"webgpu",kernelFunc:Mx};var Yue=ye({opType:Z.EXPM1,cpuKernelImpl:lz}),JV={kernelName:Cn,backendName:"webgpu",kernelFunc:Yue};var ym=class{constructor(t,e){this.variableNames=["real","imag"],this.outputShape=[],this.uniforms="exponentMultiplier : f32, denominator: f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.component=t,this.shaderKey=`fft_${t}`}getUserCode(){return`
    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {
      ${this.component==="real"?"return real * expR - imag * expI;":"return real * expI + imag * expR;"}
    }

    fn mulMatDFT(batch: i32, index: i32) -> f32 {
      let indexRatio = f32(index) / f32(uniforms.realShape[1]);
      let exponentMultiplierTimesIndexRatio =
          uniforms.exponentMultiplier * indexRatio;

      var result = 0.0;

      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {
        // x = (-2|2 * PI / N) * index * i;
        let x = exponentMultiplierTimesIndexRatio * f32(i);
        let expR = cos(x);
        let expI = sin(x);
        let real = getReal(batch, i);
        let imag = getImag(batch, i);

        result = result +
            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;
      }

      return result;
    }

    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));
      }
    }
  `}};function Lx(r,t,e){let o=e.tensorMap.get(r.dataId),n=y.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],a=n/s,i=[],p=pe({inputs:{x:r},backend:e,attrs:{shape:[a,s]}});i.push(p);let u=p.shape,c=new ym("real",u),l=new ym("imag",u),m=[{dataId:o.complexTensorInfos.real.dataId,dtype:o.complexTensorInfos.real.dtype,shape:u},{dataId:o.complexTensorInfos.imag.dataId,dtype:o.complexTensorInfos.imag.dtype,shape:u}],d=t?2*Math.PI:-2*Math.PI,f=t?u[1]:1,h=[{type:"float32",data:[d]},{type:"float32",data:[f]}],g=e.runWebGPUProgram(c,m,"float32",h);i.push(g);let x=e.runWebGPUProgram(l,m,"float32",h);i.push(x);let b=yo({inputs:{real:g,imag:x},backend:e});i.push(b);let C=pe({inputs:{x:b},backend:e,attrs:{shape:r.shape}});return i.forEach(S=>e.disposeData(S.dataId)),C}function Que(r){let{inputs:t,backend:e}=r,{input:o}=t;return Lx(o,!1,e)}var eW={kernelName:Wi,backendName:"webgpu",kernelFunc:Que};var Bx=class{constructor(t){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="flipLeftRight"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `}};var tW={kernelName:wn,backendName:"webgpu",kernelFunc:({inputs:r,backend:t})=>{let{image:e}=r,o=t,n=new Bx(e.shape);return o.runWebGPUProgram(n,[e],e.dtype)}};var Zue=ye({opType:Z.FLOOR,cpuKernelImpl:mz}),rW={kernelName:Sn,backendName:"webgpu",kernelFunc:Zue};var Jue=et({opType:fe.FLOOR_DIV,cpuKernelImpl:dz,dtype:"int32"}),oW={kernelName:In,backendName:"webgpu",kernelFunc:Jue};var zx=class{constructor(t,e,o=!1){this.pixelsOpType=Ii.FROM_PIXELS,this.outputShape=[0],this.variableNames=[],this.workgroupSize=[256,1,1],this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[e,1,1]),this.importVideo=o,this.shaderKey=`fromPixels_${this.importVideo}`}getUserCode(){let t=this.importVideo?"textureLoad(src, vec2<i32>(coords.yx));":"textureLoad(src, vec2<i32>(coords.yx), 0)";return`
      @binding(1) @group(0) var src: ${this.importVideo?"texture_external":"texture_2d<f32>"};
      ${G("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${t};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `}};var nW={kernelName:Mu,backendName:"webgpu",kernelFunc:epe},ol,i0=A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");function epe(r){let{inputs:t,backend:e,attrs:o}=r,{pixels:n}=t,{numChannels:s}=o;if(n==null)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let a=typeof HTMLVideoElement!="undefined"&&n instanceof HTMLVideoElement,i=typeof HTMLImageElement!="undefined"&&n instanceof HTMLImageElement,p=typeof HTMLCanvasElement!="undefined"&&n instanceof HTMLCanvasElement||typeof OffscreenCanvas!="undefined"&&n instanceof OffscreenCanvas,u=typeof ImageBitmap!="undefined"&&n instanceof ImageBitmap,[c,l]=a?[n.videoWidth,n.videoHeight]:[n.width,n.height],m=[l,c,s],d=!1,f=a||i;if(u||p||f){let b;if(d)b=e.device.importExternalTexture({source:n});else{if(f){let L=A().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(ol==null||L!==i0)&&(i0=L,ol=document.createElement("canvas").getContext("2d",{willReadFrequently:i0})),ol.canvas.width=c,ol.canvas.height=l,ol.drawImage(n,0,0,c,l),n=ol.canvas}let P=GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,O="rgba8unorm",M=e.textureManager.acquireTexture(m[1],m[0],O,P);e.queue.copyExternalImageToTexture({source:n},{texture:M},[m[1],m[0]]),b=M}let C=y.sizeFromShape(m),S=y.computeStrides(m),k=new zx(m,s,d),_=[{type:"uint32",data:[C]},{type:"uint32",data:[s]},{type:"uint32",data:[...S]}],E=e.makeTensorInfo([l,c],"int32"),R=e.tensorMap.get(E.dataId);R.resource=b;let D=e.runWebGPUProgram(k,[E],"int32",_);return e.disposeData(E.dataId),D}let h=n.data,g=h;if(s!=null&&s!==4){g=new Uint8Array(n.width*n.height*s);let b=h.length,C=0;for(let S=0;S<b;S++)S%4<s&&(g[C++]=h[S])}let x=e.makeTensorInfo(m,"int32",new Int32Array(g));return e.uploadToGPU(x.dataId),x}var Vx=class{constructor(t,e,o,n,s){this.uniforms="varianceEpsilon : f32,",this.workgroupSize=[128,1,1],this.size=!0,this.variableNames=["x","mean","variance"],w.assertAndGetBroadcastShape(t,e),w.assertAndGetBroadcastShape(t,o),this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),n!=null&&(w.assertAndGetBroadcastShape(t,n),this.variableNames.push("offset")),s!=null&&(w.assertAndGetBroadcastShape(t,s),this.variableNames.push("scale")),this.offsetShape=n,this.scaleShape=s,this.shaderKey="batchNorm"}getUserCode(){let t="0.0";this.offsetShape!=null&&(t="getOffsetByOutputIndex(index)");let e="1.0";return this.scaleShape!=null&&(e="getScaleByOutputIndex(index)"),`
      ${G("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${t};
          let scaleValue = ${e};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `}};var sW={kernelName:vn,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o,scale:n,offset:s,mean:a,variance:i}=r,{varianceEpsilon:p}=t,u=e,c=[o,a,i],l=null;s!=null&&(l=s.shape,c.push(s));let m=null;n!=null&&(m=n.shape,c.push(n));let d=new Vx(o.shape,a.shape,i.shape,l,m),f=[{type:"float32",data:[p]}];return u.runWebGPUProgram(d,c,o.dtype,f)}};function tpe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=t,{strides:p,pad:u,dataFormat:c,dilations:l,dimRoundingMode:m,activation:d,leakyreluAlpha:f}=o,h=w.convertConv2DDataFormat(c),g=w.computeConv2DInfo(n.shape,s.shape,p,l,u,m,!1,h);return bx({x:n,filter:s,convInfo:g,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:f,activation:d})}var aW={kernelName:vo,backendName:"webgpu",kernelFunc:tpe};function rpe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,filter:s,bias:a,preluActivationWeights:i}=t,{strides:p,pad:u,dilations:c,dimRoundingMode:l,activation:m,leakyreluAlpha:d}=o,f=c;f==null&&(f=[1,1]),y.assert(w.eitherStridesOrDilationsAreOne(p,f),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${f}'`);let h=w.computeConv2DInfo(n.shape,s.shape,p,f,u,l,!0),g=[n,s],x=a!=null,b=i!=null;x&&g.push(a),b&&g.push(i);let C=[{type:"int32",data:[h.padInfo.top,h.padInfo.left]},{type:"int32",data:[h.inHeight,h.inWidth]}],S;return h.outHeight>4&&h.outWidth>4&&h.strideWidth<=2&&h.inChannels===h.outChannels&&h.dilationHeight===1&&h.dilationWidth===1&&h.inChannels%4===0?(S=new tl(h,x,m,b),C.push({type:"int32",data:[S.virtualWidth]})):(S=new rl(h,x,m,b),C.push({type:"int32",data:[h.filterHeight]},{type:"int32",data:[h.filterWidth]},{type:"int32",data:[h.strideHeight,h.strideWidth]},{type:"int32",data:[h.dilationHeight,h.dilationWidth]})),m==="leakyrelu"&&(C.push({type:"float32",data:[d]}),S.uniforms+=" alpha : f32,"),e.runWebGPUProgram(S,g,"float32",C)}var iW={kernelName:ko,backendName:"webgpu",kernelFunc:rpe};var Wx=class{constructor(t,e){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey=`gathernd_${t}`,this.sliceDim=t,this.uniforms=`sliceDim : i32, strides : ${ht(t)},`}getUserCode(){let t;return this.sliceDim>1?t="uniforms.strides[j]":t="uniforms.strides",`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${t};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `}};function ope(r){let{inputs:t,backend:e}=r,{params:o,indices:n}=t,s=n.shape,a=s[s.length-1],i=y.sizeFromShape(o.shape),[p,u,c,l]=w.prepareAndValidate(o,n),m=pe({inputs:{x:n},backend:e,attrs:{shape:[u,a]}}),d=pe({inputs:{x:o},backend:e,attrs:{shape:[y.sizeFromShape(o.shape)/c,c]}});if(e.shouldExecuteOnCPU([o,n])||o.dtype==="string"){let b=e.readSync(n.dataId),C=e.bufferSync(o),S=fz(b,C,o.dtype,u,a,c,l,o.shape,i);return e.makeTensorInfo(p,o.dtype,S.values)}let f=new Wx(a,[u,c]),h=[{type:"int32",data:[a]},{type:"int32",data:l}],g=e.runWebGPUProgram(f,[d,m],d.dtype,h),x=pe({inputs:{x:g},backend:e,attrs:{shape:p}});return e.disposeData(m.dataId),e.disposeData(d.dataId),e.disposeData(g.dataId),x}var uW={kernelName:kn,backendName:"webgpu",kernelFunc:ope};var Ux=class{constructor(t,e){this.variableNames=["A","indices"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.slice(),this.aShape=t,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="gather"}getUserCode(){let t=npe(this.aShape);return`
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${t}));
        }
      }
    `}};function npe(r){let t=["resRC.x","resRC.y","resRC.z","resRC.w"],e=[];for(let o=0;o<r.length;o++)o===2?e.push("indexZ"):e.push(`${t[o]}`);return e.join()}function u0(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,indices:s}=t,{axis:a,batchDims:i}=o,p=y.parseAxisParam(a,n.shape)[0],u=w.segment_util.collectGatherOpShapeInfo(n,s,p,i),c=y.sizeFromShape(s.shape),l=[],m=pe({inputs:{x:n},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=pe({inputs:{x:s},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});l.push(m),l.push(d);let f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([n,s])){let C=e.tensorMap.get(d.dataId).values,S=me(d.shape,d.dtype,C),_=e.tensorMap.get(m.dataId).values,E=me(m.shape,m.dtype,_),R=hz(E,S,f);return l.forEach(D=>e.disposeData(D.dataId)),e.makeTensorInfo(u.outputShape,R.dtype,R.values)}let h=new Ux(m.shape,f),g=e.runWebGPUProgram(h,[m,d],m.dtype);l.push(g);let x=pe({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return l.forEach(b=>e.disposeData(b.dataId)),x}var pW={kernelName:aa,backendName:"webgpu",kernelFunc:u0};var spe=et({opType:fe.GREATER,cpuKernelImpl:xz,dtype:"bool"}),cW={kernelName:Nn,backendName:"webgpu",kernelFunc:spe};var ape=et({opType:fe.GREATER_EQUAL,dtype:"bool",cpuKernelImpl:gz}),lW={kernelName:Tn,backendName:"webgpu",kernelFunc:ape};function ipe(r){let{inputs:t,backend:e}=r,{input:o}=t;return Lx(o,!0,e)}var mW={kernelName:Ui,backendName:"webgpu",kernelFunc:ipe};var upe=ye({opType:Z.IS_FINITE,dtype:"bool"}),dW={kernelName:_n,backendName:"webgpu",kernelFunc:upe};var ppe=ye({opType:Z.IS_INF,dtype:"bool"}),fW={kernelName:$n,backendName:"webgpu",kernelFunc:ppe};var cpe=ye({opType:Z.IS_NAN,dtype:"bool"}),hW={kernelName:En,backendName:"webgpu",kernelFunc:cpe};function lpe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{alpha:s}=o,a=[{type:"float32",data:[s]}],i=new Jr(n.shape,Z.LEAKYRELU,"alpha : f32,");return e.runWebGPUProgram(i,[n],"float32",a)}var gW={kernelName:Rn,backendName:"webgpu",kernelFunc:lpe};var mpe=et({opType:fe.LESS,dtype:"bool",cpuKernelImpl:bz}),xW={kernelName:Dn,backendName:"webgpu",kernelFunc:mpe};var dpe=et({opType:fe.LESS_EQUAL,dtype:"bool",cpuKernelImpl:yz}),yW={kernelName:An,backendName:"webgpu",kernelFunc:dpe};var Gx=class{constructor(t){this.variableNames=[],this.outputShape=[],this.uniforms="start : f32, step : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="linSpace"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);
        }
      }
    `}};function fpe(r){let{backend:t,attrs:e}=r,{start:o,stop:n,num:s}=e,a=(n-o)/(s-1),i=new Gx(s),p=[{type:"float32",data:[o]},{type:"float32",data:[a]}];return t.runWebGPUProgram(i,[],"float32",p)}var bW={kernelName:Fn,backendName:"webgpu",kernelFunc:fpe};var hpe=ye({opType:Z.LOG,cpuKernelImpl:Cz}),CW={kernelName:Pn,backendName:"webgpu",kernelFunc:hpe};var gpe=ye({opType:Z.LOG1P}),wW={kernelName:On,backendName:"webgpu",kernelFunc:gpe};var xpe=et({opType:fe.LOGICAL_AND,dtype:"bool"}),SW={kernelName:Mn,backendName:"webgpu",kernelFunc:xpe};var ype=ye({opType:Z.LOGICAL_NOT}),IW={kernelName:Ln,backendName:"webgpu",kernelFunc:ype};var bpe=et({opType:fe.LOGICAL_OR}),vW={kernelName:Bn,backendName:"webgpu",kernelFunc:bpe};var kW=`
  var powValue = 0.0;
  let basis = uniforms.bias + uniforms.alpha * sum;
  if (uniforms.beta == 0.5) {
    powValue = inverseSqrt(basis);
  } else if (uniforms.beta == 1.0) {
    powValue = 1.0 / basis;
  } else {
    powValue = exp(log(basis) * (-uniforms.beta));
  }
`,Hx=class{constructor(t){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];
        let d = coords[3];

        let x = getX(b, r, c, d);
        var sum = 0.0;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let idx = d + i;
          if (idx >= 0 && idx < uniforms.xShape[3]) {
            let z = getX(b, r, c, idx);
            sum = sum + z * z;
          }
        }
        ${kW}

        setOutputAtIndex(index, x * powValue);
      }
    }
  `}},Kx=class{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.uniforms="radius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[256,1,1],this.maxAllowRadius=16,y.assert(e<=this.maxAllowRadius,()=>`Radius must be less than or equal to ${this.maxAllowRadius}, current radius is ${e}`),this.outputShape=t,this.elementsPerWorkgroup=this.workgroupSize[0]-2*this.maxAllowRadius,this.dispatchLayout={x:[3],y:[2],z:[0,1]},this.dispatch=H(this.dispatchLayout,this.outputShape,[this.elementsPerWorkgroup,this.workgroupSize[1],this.workgroupSize[2]]),this.shaderKey="lrn_shared"}getUserCode(){return`
    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;
    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};
    const maxAllowRadius = ${this.maxAllowRadius};

    ${G()} {
      let localDepth = i32(localId.x);
      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;
      let xDepth = workgroupDepth + localDepth - maxAllowRadius;
      let b = i32(globalId.z) / uniforms.xShape[1];
      let r = i32(globalId.z) - b * uniforms.xShape[1];
      let c = i32(globalId.y);
      let d = workgroupDepth + localDepth;

      var x = 0.0;
      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {
        x = getX(b, r, c, xDepth);
      }
      lrnSub[localDepth] = x;
      workgroupBarrier();

      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {
        var sum = 0.0;
        let index = localDepth + maxAllowRadius;
        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {
          let z = lrnSub[index + i];
          sum = sum + z * z;
        }
        ${kW}

        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);
      }
    } `}};function Cpe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{depthRadius:s,bias:a,alpha:i,beta:p}=o,u;s>16?u=new Hx(n.shape):u=new Kx(n.shape,s);let c=[{type:"int32",data:[s]},{type:"float32",data:[a]},{type:"float32",data:[i]},{type:"float32",data:[p]}];return e.runWebGPUProgram(u,[n],n.dtype,c)}var NW={kernelName:zn,backendName:"webgpu",kernelFunc:Cpe};var qx=class{constructor(t){this.outputShape=[],this.variableNames=["inputImage","outputImage","dy"],this.uniforms="depthRadius : i32, bias : f32, alpha : f32, beta : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="lrn_grad"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let b = coords[0];
        let r = coords[1];
        let c = coords[2];

        let MIN_DEPTH_BEGIN = 0;
        let MAX_DEPTH_END = uniforms.outShape[3];
        var result = 0.0;
        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {
          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);
          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);

          var norm = 0.0;
          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            } else {
              break;
            }
          }

          norm = uniforms.alpha * norm + uniforms.bias;

          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {
            if (k < depthBegin) {
              continue;
            } else if (k >= depthBegin && k < depthEnd) {
              var dyi = -2.0 * uniforms.alpha * uniforms.beta
                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * uniforms.beta);
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            } else {
              break;
            }
          }
        }

        setOutputAtIndex(index, result);
      }
    }
  `}};function wpe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,y:s,dy:a}=t,{depthRadius:i,bias:p,alpha:u,beta:c}=o,l=new qx(n.shape),m=[{type:"int32",data:[i]},{type:"float32",data:[p]},{type:"float32",data:[u]},{type:"float32",data:[c]}];return e.runWebGPUProgram(l,[n,s,a],n.dtype,m)}var TW={kernelName:Qa,backendName:"webgpu",kernelFunc:wpe};var Spe=et({opType:fe.MAX,cpuKernelImpl:Sz}),_W={kernelName:Wn,backendName:"webgpu",kernelFunc:Spe};function Ipe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:p}=o,u=1,c=w.computePool2DInfo(n.shape,s,a,u,i,p);return ax(n,c,"max",e)}var $W={kernelName:Un,backendName:"webgpu",kernelFunc:Ipe};function vpe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{filterSize:s,strides:a,pad:i,dataFormat:p,dimRoundingMode:u}=o,c=[1,1,1],l=w.computePool3DInfo(n.shape,s,a,c,i,u,p),m=new _u(l,"max"),d=[{type:"int32",data:[l.strideDepth,l.strideHeight,l.strideWidth]},{type:"int32",data:[l.padInfo.front,l.padInfo.top,l.padInfo.left]},{type:"int32",data:[l.inDepth,l.inHeight,l.inWidth]},{type:"int32",data:[l.effectiveFilterDepth,l.effectiveFilterHeight,l.effectiveFilterWidth]}];return e.runWebGPUProgram(m,[n],n.dtype,d)}var EW={kernelName:ia,backendName:"webgpu",kernelFunc:vpe};var jx=class{constructor(t){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,
       outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool2DBackprop"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d = coords[3];

        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;
        let dyRCorner = dyRCCorner.x;
        let dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;
        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {
          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);

          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {
            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);

            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
              continue;
            }
            let idyC = i32(dyC);

            let dyValue = getDy(batch, idyR, idyC, d);
            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            let curPosValue = wR * uniforms.filterDims[1] + wC;
            let mask = select(0.0, 1.0, maxPosValue == curPosValue);
            dotProd += dyValue * mask;
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
    `}},Xx=class{constructor(t){this.variableNames=["dy","maxPos"],this.uniforms=`strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,
      outDepth : i32, outHeight : i32, outWidth : i32`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t.inShape,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="maxPool3DBackprop"}getUserCode(){return`
      ${G("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords.x;
        let ch = coords.u;

        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;
        let dyDCorner = dyCorner.x;
        let dyRCorner = dyCorner.y;
        let dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;

        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {
          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);

          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {
            continue;
          }
          let idyD = i32(dyD);

          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {
            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);

            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {
              continue;
            }
            let idyR = i32(dyR);

            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {
              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);

              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {
                continue;
              }
              let idyC = i32(dyC);

              let dyValue = getDy(batch, idyD, idyR, idyC, ch);
              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;
              let mask = select(0.0, 1.0, maxPosValue == curPosValue);
              dotProd += dyValue * mask;
            }
          }
        }

        setOutputAtIndex(index, dotProd);
      }
    }
    `}};function kpe(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s}=t,a=s,{filterSize:i,strides:p,pad:u,dimRoundingMode:c}=o,l=[1,1,1],m=w.computePool3DInfo(a.shape,i,p,l,u,c),d=new _u(m,"max",!0),f=[{type:"int32",data:[m.strideDepth,m.strideHeight,m.strideWidth]},{type:"int32",data:[m.padInfo.front,m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.inDepth,m.inHeight,m.inWidth]},{type:"int32",data:[m.effectiveFilterDepth,m.effectiveFilterHeight,m.effectiveFilterWidth]}],h=e.runWebGPUProgram(d,[a],"int32",f),g=new Xx(m);f=[{type:"int32",data:[m.strideDepth,m.strideHeight,m.strideWidth]},{type:"int32",data:[m.effectiveFilterDepth-1-m.padInfo.front,m.effectiveFilterHeight-1-m.padInfo.top,m.effectiveFilterWidth-1-m.padInfo.left]},{type:"int32",data:[m.effectiveFilterDepth,m.effectiveFilterHeight,m.effectiveFilterWidth]},{type:"int32",data:[m.outDepth]},{type:"int32",data:[m.outHeight]},{type:"int32",data:[m.outWidth]}];let x=e.runWebGPUProgram(g,[n,h],a.dtype,f);return e.disposeData(h.dataId),x}var RW={kernelName:Ki,backendName:"webgpu",kernelFunc:kpe};function Npe(r){let{inputs:t,backend:e,attrs:o}=r,{dy:n,input:s,output:a}=t,i=s;fm([s,a],"maxPoolGrad");let{filterSize:p,strides:u,pad:c,dimRoundingMode:l}=o,m=w.computePool2DInfo(i.shape,p,u,1,c,l),d=new za(m,"max",!0),f=[{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.padInfo.top,m.padInfo.left]},{type:"int32",data:[m.dilationHeight,m.dilationWidth]},{type:"int32",data:[m.inHeight,m.inWidth]},{type:"int32",data:[m.effectiveFilterHeight,m.effectiveFilterWidth]}],h=e.runWebGPUProgram(d,[i],"int32",f),g=new jx(m);f=[{type:"int32",data:[m.strideHeight,m.strideWidth]},{type:"int32",data:[m.effectiveFilterHeight-1-m.padInfo.top,m.effectiveFilterWidth-1-m.padInfo.left]},{type:"int32",data:[m.dilationHeight,m.dilationWidth]},{type:"int32",data:[m.effectiveFilterHeight,m.effectiveFilterWidth]},{type:"int32",data:[m.outHeight]},{type:"int32",data:[m.outWidth]}];let x=e.runWebGPUProgram(g,[n,h],i.dtype,f);return e.disposeData(h.dataId),x}var DW={kernelName:Hi,backendName:"webgpu",kernelFunc:Npe};function Tpe(r){let{inputs:t,backend:e,attrs:o}=r,{filterSize:n,strides:s,pad:a,includeBatchInIndex:i}=o,{x:p}=t;y.assert(p.shape.length===4,()=>`Error in maxPool: input must be rank 4 but got rank ${p.shape.length}.`);let u=[1,1];y.assert(w.eitherStridesOrDilationsAreOne(s,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);let c=w.computePool2DInfo(p.shape,n,s,u,a),l=[{type:"int32",data:[c.strideHeight,c.strideWidth]},{type:"int32",data:[c.padInfo.top,c.padInfo.left]},{type:"int32",data:[c.dilationHeight,c.dilationWidth]},{type:"int32",data:[c.inHeight,c.inWidth]},{type:"int32",data:[c.effectiveFilterHeight,c.effectiveFilterWidth]}],m=new za(c,"max",!1),d=e.runWebGPUProgram(m,[p],p.dtype,l);m=new za(c,"max",!0,!0,i);let f=e.runWebGPUProgram(m,[p],"int32",l);return[d,f]}var AW={kernelName:ua,backendName:"webgpu",kernelFunc:Tpe};function _pe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;return eo(n,s,a,"min",e)}var FW={kernelName:Hn,backendName:"webgpu",kernelFunc:_pe};var $pe=et({opType:fe.MIN,cpuKernelImpl:Iz}),PW={kernelName:Kn,backendName:"webgpu",kernelFunc:$pe};var Yx=class{constructor(t,e,o){this.uniforms="",this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.map((n,s)=>n[0]+t[s]+n[1]),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=t,e.map((n,s)=>{this.uniforms+=` pad${s} : vec2<i32>,`}),this.offset=o==="reflect"?0:1,this.shaderKey=`mirrorPad_${o}`}getUserCode(){let t=this.xShape.length,e=this.xShape.map((u,c)=>`uniforms.pad${c}[0]`).join(","),o=this.xShape.map((u,c)=>`uniforms.pad${c}[0] + uniforms.xShape${t>1?`[${c}]`:""}`).join(","),n=t===1?"start":"start[i]",s=t===1?"end":"end[i]",a=t===1?"outC":"outC[i]",i=ht(t),p=t>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,t):"coords";return`
      ${G("index")} {
        if (index < uniforms.size) {
          let start = ${i}(${e});
          let end = ${i}(${o});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${t}; i = i + 1) {
            if (${a} < ${n}) {
              ${a} = ${n} * 2 - ${a} - ${this.offset};
            } else if(${a} >= ${s}) {
              ${a} = (${s} - 1) * 2 - ${a} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${p}));
        }
      }
    `}};var OW={kernelName:qn,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{x:o}=r,{paddings:n,mode:s}=t,a=e,i=n.map(c=>({type:"int32",data:[c[0],c[1]]})),p=new Yx(o.shape,n,s);return a.runWebGPUProgram(p,[o],o.dtype,i)}};var Epe=et({opType:fe.MOD}),MW={kernelName:jn,backendName:"webgpu",kernelFunc:Epe};var Qx=class{constructor(t,e){this.variableNames=["probs"],this.outputShape=[],this.uniforms="seed : f32, numOutcomes: i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t,e],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="multinomial"}getUserCode(){return`
    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {
      let HASHSCALE1 = 443.8975;
      let p = resultUV * seed;
      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);
      p3 = p3 + dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${G("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        let batch = coords[0];

        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),
            f32(coords[0]) / f32(uniforms.outShape[0]));
        let r = random(uniforms.seed, resUV);
        var cdf = 0.0;
        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {
          cdf = cdf + getProbs(batch, i);

          if (r < cdf) {
            setOutputAtIndexI32(index, i);
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);
      }
    }
  `}};var Zx=class{constructor(t){this.variableNames=["logits"],this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=[this.outputShape[0],1,1],this.outputShape[1]>=4096?this.workgroupSize=[256,1,1]:this.workgroupSize=[64,1,1],this.shaderKey="softmax"}getUserCode(){return`
    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;
    var<workgroup> rowMaxShared : f32;
    var<workgroup> rowSumShared : f32;
    const blockSize = ${this.workgroupSize[0]};
    ${G("index")} {
      let row = index / blockSize;
      let tid = i32(localId.x);
      let cols = uniforms.outShape[1];

      var threadMax = -3.402823e+38f;
      for (var col = tid; col < cols; col += blockSize) {
        let value = getLogits(row, col);
        threadMax = max(threadMax, value);
      }
      if (tid < cols) {
        buf[tid] = threadMax;
      }
      workgroupBarrier();

      var reduceSize = min(cols, blockSize);
      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
        reduceSize = currSize + (reduceSize & 1);
        if (tid < currSize) {
          buf[tid] = max(buf[tid], buf[tid + reduceSize]);
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowMaxShared = buf[0];
      }
      workgroupBarrier();

      var threadSum = 0.0;
      for (var col = tid; col < cols; col += blockSize) {
        let subExp = exp(getLogits(row, col) - rowMaxShared);
        threadSum += subExp;
      }
      buf[tid] = threadSum;
      workgroupBarrier();

      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {
        if (tid < currSize) {
          buf[tid] = buf[tid] + buf[tid + currSize];
        }
        workgroupBarrier();
      }

      if (tid == 0) {
        rowSumShared = buf[0];
      }
      workgroupBarrier();

      for (var col = tid; col < cols; col += blockSize) {
        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;
        setOutputAtCoords(row, col, value);
      }
  }
    `}};function p0(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{dim:s}=o,a=pe({inputs:{x:n},backend:e,attrs:{shape:[y.sizeFromShape(n.shape)/n.shape[s],n.shape[s]]}}),i=new Zx(a.shape),p=e.runWebGPUProgram(i,[a],n.dtype),u=pe({inputs:{x:p},backend:e,attrs:{shape:n.shape}});return e.disposeData(a.dataId),e.disposeData(p.dataId),u}var LW={kernelName:vs,backendName:"webgpu",kernelFunc:p0};function Rpe(r){let{inputs:t,backend:e,attrs:o}=r,{logits:n}=t,{numSamples:s,seed:a,normalized:i}=o,p=i?n:p0({inputs:{logits:n},backend:e,attrs:{dim:n.shape.length-1}}),u=p.shape[0],c=p.shape[1],l=new Qx(u,s),m=[{type:"float32",data:[a]},{type:"int32",data:[c]}],d=e.runWebGPUProgram(l,[p],"int32",m);return i||e.disposeData(p.dataId),d}var BW={kernelName:Xn,backendName:"webgpu",kernelFunc:Rpe};function Dpe(r){let{inputs:t,backend:e}=r,{x:o}=t;if(e.shouldExecuteOnCPU([o])){let s=e.tensorMap.get(o.dataId),[a,i]=kz(s.values,o.shape,o.dtype);return e.makeTensorInfo(i,o.dtype,a)}let n=new Jr(o.shape,Z.NEG);return e.runWebGPUProgram(n,[o],o.dtype)}var zW={kernelName:pa,backendName:"webgpu",kernelFunc:Dpe};function Ape(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p}=o,u=e.readSync(n.dataId),c=e.readSync(s.dataId),{selectedIndices:l}=Wt.nonMaxSuppressionV3Impl(u,c,a,i,p);return e.makeTensorInfo([l.length],"int32",new Int32Array(l))}var VW={kernelName:Zn,backendName:"webgpu",kernelFunc:Ape};function Fpe(r){console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:e,attrs:o}=r,{boxes:n,scores:s}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:p,softNmsSigma:u}=o,c=e.readSync(n.dataId),l=e.readSync(s.dataId),m=a,d=i,f=p,h=u,{selectedIndices:g,selectedScores:x}=Wt.nonMaxSuppressionV5Impl(c,l,m,d,f,h);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([x.length],"float32",new Float32Array(x))]}var WW={kernelName:Jn,backendName:"webgpu",kernelFunc:Fpe};var Jx=class{constructor(t,e){this.variableNames=["x"],this.uniforms="onValue : f32, offValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t,e],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="onehot"}getUserCode(){return`
      ${G("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,
                                      f32(i32(round(getX(coords.x))) == coords.y)));
        }
      }
    `}};function Ppe(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n}=t,{dtype:s,depth:a,onValue:i,offValue:p}=o,u=y.sizeFromShape(n.shape),c=new Jx(u,a),l=pe({inputs:{x:n},backend:e,attrs:{shape:[u]}}),m=[{type:"float32",data:[i]},{type:"float32",data:[p]}],d=e.runWebGPUProgram(c,[l],s,m);e.disposeData(l.dataId);let f=[...n.shape,a],h=pe({inputs:{x:d},backend:e,attrs:{shape:f}});return e.disposeData(d.dataId),h}var UW={kernelName:es,backendName:"webgpu",kernelFunc:Ppe};function bm(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="complex64"){let n=Ni({inputs:{input:o},backend:e}),s=bm({inputs:{x:n},backend:e}),a=Mp({inputs:{input:o},backend:e}),i=bm({inputs:{x:a},backend:e}),p=yo({inputs:{real:s,imag:i},backend:e});return e.disposeData(n.dataId),e.disposeData(s.dataId),e.disposeData(a.dataId),e.disposeData(i.dataId),p}else return kt({attrs:{shape:o.shape,dtype:o.dtype,value:o.dtype==="string"?"":0},backend:e})}var GW={kernelName:Sa,backendName:"webgpu",kernelFunc:bm};function HW(r){let{inputs:t,backend:e}=r,{x:o}=t;if(o.dtype==="string")throw new Error("onesLike is not supported under string dtype");if(o.dtype==="complex64"){let n=Ni({inputs:{input:o},backend:e}),s=HW({inputs:{x:n},backend:e}),a=Mp({inputs:{input:o},backend:e}),i=bm({inputs:{x:a},backend:e}),p=yo({inputs:{real:s,imag:i},backend:e});return e.disposeData(n.dataId),e.disposeData(s.dataId),e.disposeData(a.dataId),e.disposeData(i.dataId),p}else return kt({attrs:{shape:o.shape,dtype:o.dtype,value:1},backend:e})}var KW={kernelName:ca,backendName:"webgpu",kernelFunc:HW};function Ope(r){let{inputs:t,backend:e,attrs:o}=r,{axis:n}=o;if(t.length===1)return Mx({inputs:{input:t[0]},backend:e,attrs:{dim:n}});let s=t[0].shape,a=t[0].dtype;t.forEach(c=>{y.assertShapesMatch(s,c.shape,"All tensors passed to stack must have matching shapes"),y.assert(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});let i=[],p=t.map(c=>{let l=Mx({inputs:{input:c},backend:e,attrs:{dim:n}});return i.push(l),l}),u=n0({inputs:p,backend:e,attrs:{axis:n}});return i.forEach(c=>e.disposeData(c.dataId)),u}var qW={kernelName:la,backendName:"webgpu",kernelFunc:Ope};function c0(r,t=!1){let e=r.length,o=ht(e),n=r.map((l,m)=>`uniforms.pad${m}[0]`).join(","),s=r.map((l,m)=>`uniforms.pad${m}[0] + uniforms.xShape${e>1?`[${m}]`:""}`).join(","),a=e>1?`${o}(${n})`:`${n}`,i=e>1?`${o}(${s})`:`${s}`,p=e>1?"any(paddedCoords < start)":"paddedCoords < start",u=e>1?"any(paddedCoords >= end)":"paddedCoords >= end",c=e>1?["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,e):"coords";return`
        let start = ${a};
        let end = ${i};
        if (${p} || ${u}) {
          setOutputAtIndex(index, ${t?0:"uniforms.constantValue"});
        } else {
          let coords = paddedCoords - start;
          setOutputAtIndex(index, getX(${c}));
        }
  `}var ey=class{constructor(t,e){this.variableNames=["x"],this.uniforms="constantValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e.map((o,n)=>o[0]+t[n]+o[1]),this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),e.map((o,n)=>{this.uniforms+=` pad${n} : vec2<i32>,`}),this.xShape=t,this.shaderKey="pad"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let paddedCoords = getCoordsFromIndex(index);
          ${c0(this.xShape)}
        }
      }
    `}};var Mpe=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{paddings:s,constantValue:a}=o;if(s.every(u=>y.arraysEqual(u,[0,0])))return Ft({inputs:{x:n},backend:e});if(y.sizeFromShape(n.shape)===0){let u=s.map((c,l)=>c[0]+n.shape[l]+c[1]);return kt({backend:e,attrs:{shape:u,value:a,dtype:n.dtype}})}let i=[{type:"float32",data:[a]}];s.map(u=>i.push({type:"int32",data:[u[0],u[1]]}));let p=new ey(n.shape,s);return e.runWebGPUProgram(p,[n],n.dtype,i)},jW={kernelName:ts,backendName:"webgpu",kernelFunc:Mpe};var Lpe=et({opType:fe.POW}),XW={kernelName:rs,backendName:"webgpu",kernelFunc:Lpe};function Bpe(r){let{inputs:t,backend:e}=r,{x:o,alpha:n}=t,s=new ki(fe.PRELU,o.shape,n.shape);return e.runWebGPUProgram(s,[o,n],"float32")}var YW={kernelName:os,backendName:"webgpu",kernelFunc:Bpe};function zpe(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{axis:s,keepDims:a}=o;return eo(n,s,a,"prod",e)}var QW={kernelName:ns,backendName:"webgpu",kernelFunc:zpe};var Vpe=r=>{let{backend:t,attrs:e}=r,{start:o,stop:n,step:s,dtype:a}=e,i=_z(o,n,s,a);return t.makeTensorInfo([i.length],a,i)},ZW={kernelName:ma,backendName:"webgpu",kernelFunc:Vpe};var Wpe=et({opType:fe.DIV}),JW={kernelName:hn,backendName:"webgpu",kernelFunc:Wpe};var Upe=ye({opType:Z.RECIPROCAL}),eU={kernelName:ss,backendName:"webgpu",kernelFunc:Upe};var Gpe=ye({opType:Z.RELU}),tU={kernelName:as,backendName:"webgpu",kernelFunc:Gpe};var Hpe=ye({opType:Z.RELU6}),rU={kernelName:ps,backendName:"webgpu",kernelFunc:Hpe};var ty=class{constructor(t,e,o){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t[0],e,o,t[3]],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="resizeBilinear"}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function Kpe(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,size:a,halfPixelCenters:i}=o,[p,u]=a,c=s&&p>1?1:0,l=s&&u>1?1:0,d=[{type:"float32",data:[c,l]},{type:"float32",data:[i?.5:0]}],f=new ty(n.shape,p,u);return e.runWebGPUProgram(f,[n],"float32",d)}var oU={kernelName:us,backendName:"webgpu",kernelFunc:Kpe};var ry=class{constructor(t,e){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,
       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=e,this.shaderKey=`resizeBilinearBackprop_${e}`}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let dxR = f32(dyR) * uniforms.heightScale;
              let topDxRIndex = i32(floor(dxR));
              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));
              let dxRLerp = dxR - f32(topDxRIndex);
              let inverseDxRLerp = 1.0 - dxRLerp;

              let dxC = f32(dyC) * uniforms.widthScale;
              let leftDxCIndex = i32(floor(dxC));
              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));
              let dxCLerp = dxC - f32(leftDxCIndex);
              let inverseDxCLerp = 1.0 - dxCLerp;

              if (r == topDxRIndex && c == leftDxCIndex) {
                // topLeft
                accumulator +=
                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
              }

              if (r == topDxRIndex && c == rightDxCIndex) {
                // topRight
                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
              }

              if (r == bottomDxRIndex && c == leftDxCIndex) {
                // bottomLeft
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
              }

              if (r == bottomDxRIndex && c == rightDxCIndex) {
                // bottomRight
                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}};function qpe(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:a}=o,[,i,p]=n.shape,[,u,c]=s.shape,l=[a&&u>1?i-1:i,a&&c>1?p-1:p],m=[a&&u>1?u-1:u,a&&c>1?c-1:c],d=l[0]/m[0],f=l[1]/m[1],h=1/d,g=1/f,x=Math.ceil(h)*2+2,b=Math.ceil(g)*2+2,C=new ry(n.shape,a),S=[{type:"int32",data:l},{type:"int32",data:m},{type:"float32",data:[d]},{type:"float32",data:[f]},{type:"float32",data:[h]},{type:"float32",data:[g]},{type:"int32",data:[x]},{type:"int32",data:[b]}];return e.runWebGPUProgram(C,[s],s.dtype,S)}var nU={kernelName:ei,backendName:"webgpu",kernelFunc:qpe};var oy=class{constructor(t,e,o,n){this.variableNames=["x"],this.uniforms="adjustHeightWidth : vec2<f32>, roundBase : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=[t[0],e,o,t[3]],this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.halfPixelCenters=n,this.shaderKey=`resizeNearest_${n}`}getUserCode(){let t;return this.halfPixelCenters?t="max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))":t="vec2<f32>(rc) * effectiveInputOverOutputRatioRC",`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${t};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `}};function jpe(r){let{inputs:t,backend:e,attrs:o}=r,{images:n}=t,{alignCorners:s,halfPixelCenters:a,size:i}=o,[p,u]=i,c=s&&p>1?1:0,l=s&&u>1?1:0,d=[{type:"float32",data:[c,l]},{type:"float32",data:[s?.5:0]}],f=new oy(n.shape,p,u,a);return e.runWebGPUProgram(f,[n],n.dtype,d)}var sU={kernelName:is,backendName:"webgpu",kernelFunc:jpe};var ny=class{constructor(t,e){this.variableNames=["dy"],this.uniforms=`effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,
       winHeight : i32, winWidth : i32,`,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.alignCorners=e,this.shaderKey=`resizeNearestNeigborBackprop_${e}`}getUserCode(){return`
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let b = coords[0];
          let d = coords[3];
          let r = coords[1];
          let c = coords[2];

          var accumulator = 0.0;

          // Compute bounds for where in dy we will look
          let startRLerp = floor(f32(r) * uniforms.invHeightScale);
          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));

          let startCLerp = floor(f32(c) * uniforms.invWidthScale);
          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));

          // Loop over dy
          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {
            let dyR = startDyR + dyROffset;

            // Guard against the window exceeding the bounds of dy
            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {
              continue;
            }

            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {
              let dyC = startDyC + dyCOffset;

              // Guard against the window exceeding the bounds of dy
              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {
                continue;
              }

              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *
                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));

              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *
                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));

              let sourceNearestRow =
                  i32(min(f32(uniforms.outShape[1] - 1),
                  ${this.alignCorners?"floor(sourceFracRow + 0.5)":"floor(sourceFracRow)"}));

              let sourceNearestCol =
                  i32(min(f32(uniforms.outShape[2] - 1),
                  ${this.alignCorners?"floor(sourceFracCol + 0.5)":"floor(sourceFracCol)"}));

              if (r == sourceNearestRow && c == sourceNearestCol) {
                accumulator += getDy(b, dyR, dyC, d);
              }
            }
          }
          // End loop over dy

          setOutputAtIndex(index, accumulator);
        }
      }
    `}};function Xpe(r){let{inputs:t,backend:e,attrs:o}=r,{images:n,dy:s}=t,{alignCorners:a}=o,[,i,p]=n.shape,[,u,c]=s.shape,l=[a&&u>1?i-1:i,a&&c>1?p-1:p],m=[a&&u>1?u-1:u,a&&c>1?c-1:c],d=l[0]/m[0],f=l[1]/m[1],h=1/d,g=1/f,x=Math.ceil(h)*2+2,b=Math.ceil(g)*2+2,C=new ny(n.shape,a),S=[{type:"int32",data:l},{type:"int32",data:m},{type:"float32",data:[h]},{type:"float32",data:[g]},{type:"int32",data:[x]},{type:"int32",data:[b]}];return e.runWebGPUProgram(C,[s],s.dtype,S)}var aU={kernelName:Ja,backendName:"webgpu",kernelFunc:Xpe};var sy=class{constructor(t){this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=" axis : vec4<i32>,",this.shaderKey="reverse"}getUserCode(){return`
      
      // Using uniform variables as judging conditions, so the function has
      // coherent execution within all threads.
      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {
        var reverseCoords = coords;
        if (uniforms.axis[0] == 1) {
          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;
        }
        if (uniforms.axis[1] == 1) {
          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;
        }
        if (uniforms.axis[2] == 1) {
          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;
        }
        if (uniforms.axis[3] == 1) {
          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;
        }

        return reverseCoords;
      }
    
      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let reverseCoords = getReverseCoords(coords);
          setOutputAtIndex(index, getX(reverseCoords[0],
              reverseCoords[1], reverseCoords[2], reverseCoords[3]));
        }
      }
    `}};function Ype(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{dims:s}=o,a=n.shape.length;if(a===0)return Ft({inputs:{x:n},backend:e});let i=n.shape,p=[1,1,1,1];i.forEach((g,x)=>{let b=x+4-a;p[b]=g});let u=y.parseAxisParam(s,n.shape),c=[0,0,0,0];u.forEach(g=>{let x=g+4-a;c[x]=1});let l=[{type:"int32",data:c}],m=pe({inputs:{x:n},backend:e,attrs:{shape:p}}),d=new sy(p),f=e.runWebGPUProgram(d,[m],m.dtype,l);e.disposeData(m.dataId);let h=pe({inputs:{x:f},backend:e,attrs:{shape:i}});return e.disposeData(f.dataId),h}var iU={kernelName:cs,backendName:"webgpu",kernelFunc:Ype};var ay=class{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`,this.shaderKey="rotate",this.outputShape=t,typeof e=="number"?(this.uniforms+=" fillValue : f32,",this.fillSnippet="var outputValue = uniforms.fillValue;",this.shaderKey+="_float"):(this.uniforms+=" fillValue : vec3<f32>,",this.fillSnippet="var outputValue = uniforms.fillValue[coords[3]];",this.shaderKey+="_vec3")}getUserCode(){return`
        ${G("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `}};var uU={kernelName:As,backendName:"webgpu",kernelFunc:({inputs:r,attrs:t,backend:e})=>{let{image:o}=r,{radians:n,fillValue:s,center:a}=t,i=e,p=new ay(o.shape,s),[u,c]=w.getImageCenter(a,o.shape[1],o.shape[2]),l=[{type:"float32",data:[u]},{type:"float32",data:[c]},{type:"float32",data:[Math.sin(n)]},{type:"float32",data:[Math.cos(n)]}];return typeof s=="number"?l.push({type:"float32",data:[Number.parseFloat(s.toFixed(2))]}):l.push({type:"float32",data:s}),i.runWebGPUProgram(p,[o],o.dtype,l)}};var Qpe=ye({opType:Z.ROUND}),pU={kernelName:ls,backendName:"webgpu",kernelFunc:Qpe};var Zpe=ye({opType:Z.RSQRT,cpuKernelImpl:$z}),cU={kernelName:ms,backendName:"webgpu",kernelFunc:Zpe};var Va=class{constructor(t,e,o,n,s,a,i,p=!0){this.variableNames=["updates","indices"],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=a,this.type=i,this.sumDupeIndices=p,this.dispatchLayout=X(t),this.dispatch=H(this.dispatchLayout,t,this.workgroupSize),this.sliceDimGreaterThanOne=e>1,this.shaderKey=`scatter_${o}_${n}_${this.sliceDimGreaterThanOne}_${i}_${p}`;let u=ht(s.length);this.uniforms=`sliceDim : i32, strides: ${u}, updatesSize: i32,`,this.updatesRank=n,this.indicesRank=o}getUserCode(){let t="";this.indicesRank===1?t="coords[0]":this.indicesRank===2&&(t="coords[0], j");let e=`getIndices(${t})`,o=this.sliceDimGreaterThanOne?"uniforms.strides[j]":"uniforms.strides",n="",s="";this.dispatchLayout.x.length===1?(n="flattenedIndex",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `):this.dispatchLayout.x.length===2&&(n="vec2<i32>(flattenedIndex, coords[1])",s=`
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);let i=`getUpdates(${Array.from({length:this.updatesRank},(u,c)=>`coords[${c}]`).join(", ")})`;return`
    ${s}
      ${G("index")} {
        if (index < uniforms.updatesSize) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${e}));
            flattenedIndex = flattenedIndex + indexInside * ${o};
          }
          let updateValue =
              ${Nu(this.type)}(${i});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${this.sumDupeIndices?Qr("&result[flatIndex]","updateValue",this.type):"atomicStore(&result[flatIndex], bitcast<i32>(updateValue));"}
        }
      }`}};function Jpe(r){let{inputs:t,backend:e,attrs:o}=r,{indices:n,updates:s}=t,{shape:a}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:c,outputSize:l}=w.calculateShapes(s,n,a),m=[l/u,u];if(l===0)return e.makeTensorInfo(a,n.dtype);let d=pe({inputs:{x:n},backend:e,attrs:{shape:[p,i]}}),f=pe({inputs:{x:s},backend:e,attrs:{shape:[p,u]}}),h=f.dtype,g=kt({backend:e,attrs:{shape:m,value:0,dtype:h}}),x=y.sizeFromShape(f.shape),b=[{type:"int32",data:[i]},{type:"int32",data:c},{type:"int32",data:[x]}],C=new Va(f.shape,i,d.shape.length,f.shape.length,c,m,h),S=e.runWebGPUProgram(C,[f,d],h,b,g),k=pe({inputs:{x:S},backend:e,attrs:{shape:a}});return e.disposeData(d.dataId),e.disposeData(f.dataId),e.disposeData(S.dataId),k}var lU={kernelName:ds,backendName:"webgpu",kernelFunc:Jpe};var iy=class{constructor(t,e){this.outputShape=[],this.variableNames=["sortedSequence","values"],this.uniforms="numInputs : i32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.side=e,this.shaderKey=`search_sorted_${e}`}getUserCode(){return`
      fn findBound(batch: i32, value: f32) -> i32 {
        var left = i32(0);
        var right = uniforms.numInputs;
        while (left < right) {
          var mid = (left + right) / 2;
          if (getSortedSequence(batch, mid) ${this.side==="left"?"<":"<="} value) {
            left = mid + 1;
          } else {
            right = mid;
          }
        }
        return right;
      }

      ${G("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let value = getValuesByOutputIndex(index);
          setOutputAtIndexI32(index, findBound(coords[0], value));
        }
      }
    `}};function ece(r){let{inputs:t,backend:e,attrs:o}=r,{sortedSequence:n,values:s}=t,{side:a}=o,i=new iy([s.shape[0],s.shape[1]],a),p=[{type:"int32",data:[n.shape[1]]}];return e.runWebGPUProgram(i,[n,s],"int32",p)}var mU={kernelName:hs,backendName:"webgpu",kernelFunc:ece};var uy=class{constructor(t,e,o){this.variableNames=["c","a","b"],this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=e,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.cRank=t,this.rank=o,this.shaderKey="select"}getUserCode(){let t,e;if(this.rank>4)throw Error(`Where for rank ${this.rank} is not yet supported`);if(this.rank===1)e="resRC",t="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],a=[];for(let i=0;i<this.outputShape.length;i++)a.push(`${n[i]}`),i<this.cRank&&s.push(`${n[i]}`);t=s.join(),e=a.join()}return`
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${t});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${e}));
          } else {
            setOutputAtIndex(index, getB(${e}));
          }
        }
      }
    `}};function tce(r){let{inputs:t,backend:e}=r,{condition:o,t:n,e:s}=t,a=new uy(o.shape.length,n.shape,n.shape.length);return e.runWebGPUProgram(a,[o,n,s],dt(n.dtype,s.dtype))}var dU={kernelName:fa,backendName:"webgpu",kernelFunc:tce};var rce=ye({opType:Z.SELU}),fU={kernelName:gs,backendName:"webgpu",kernelFunc:rce};var oce=ye({opType:Z.SIGMOID}),hU={kernelName:Cs,backendName:"webgpu",kernelFunc:oce};var nce=ye({opType:Z.SIGN}),gU={kernelName:bs,backendName:"webgpu",kernelFunc:nce};var sce=ye({opType:Z.SIN}),xU={kernelName:xs,backendName:"webgpu",kernelFunc:sce};var ace=ye({opType:Z.SINH}),yU={kernelName:ys,backendName:"webgpu",kernelFunc:ace};var ice=ye({opType:Z.SOFTPLUS}),bU={kernelName:ws,backendName:"webgpu",kernelFunc:ice};var py=class{constructor(t,e,o,n,s,a){this.variableNames=["x"],this.outputShape=[],this.uniforms="",this.workgroupSize=[64,1,1],this.size=!0;let i=new Array(n.length);for(let p=0;p<i.length;p++)i[p]=n[s[p]];this.outputShape=i,this.newDim=s,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.xShape=t,this.paddedXShape=e,this.uniforms+=`reshapedPaddedXShape : ${ht(n.length)}, paddedXShapeStrides : ${ht(a)}, `,o.map((p,u)=>{this.uniforms+=` pad${u} : vec2<i32>,`}),this.shaderKey=`spaceToBatchND_${s}`}getUserCode(){let t=ht(this.outputShape.length),e=Zv(this.newDim);return`
      ${cm(this.paddedXShape,"PaddedX")}
      ${G("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${t}(${e}), uniforms.reshapedPaddedXShape);
          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);
          ${c0(this.xShape,!0)}
        }
      }
    `}};var uce=r=>{let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{blockShape:s,paddings:a}=o;y.assert(n.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");let i=s.reduce((b,C)=>b*C),p=[[0,0]];p.push(...a);for(let b=1+s.length;b<n.shape.length;++b)p.push([0,0]);let u=p.map((b,C)=>b[0]+n.shape[C]+b[1]),c=w.getReshaped(u,s,i,!1),l=w.getPermuted(c.length,s.length,!1),m=w.getReshapedPermuted(u,s,i,!1),d=y.computeStrides(u),f=new py(n.shape,u,p,c,l,d.length),h=[{type:"int32",data:c},{type:"int32",data:d}];p.map(b=>h.push({type:"int32",data:[b[0],b[1]]}));let g=e.runWebGPUProgram(f,[n],n.dtype,h),x=pe({inputs:{x:g},backend:e,attrs:{shape:m}});return e.disposeData(g.dataId),x},CU={kernelName:ga,backendName:"webgpu",kernelFunc:uce};var cy=class{constructor(t,e,o){this.variableNames=["input","indices","segmentIds"],this.outputShape=[],this.uniforms="segmentSize : i32, sparseSize : i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=t,this.type=o,this.dispatchLayout=X([e]),this.dispatch=H(this.dispatchLayout,[e],this.workgroupSize),this.shaderKey="sparseSegmentSum"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.sparseSize) {
        let indexInSegmentIds = index / uniforms.segmentSize;
        let indexInSegment = index % uniforms.segmentSize;
        let indexInInput = indices[indexInSegmentIds];
        let segmentId = segmentIds[indexInSegmentIds];

        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];
        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;
        ${Qr("&result[outIndex]","value",this.type)}
      }
    }
  `}},ly=class{constructor(t,e){this.variableNames=["segmentIds"],this.outputShape=[],this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=[t],this.dispatchLayout=X(e),this.dispatch=H(this.dispatchLayout,e,this.workgroupSize),this.shaderKey="sparseSegmentIdCountProgram"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.segmentIdsShape) {
        let segmentId = segmentIds[index];
        ${Qr("&result[segmentId]","1","int32")}
      }
    }
  `}},my=class{constructor(t,e){this.variableNames=["segmentSum","sameSegmentIdCount"],this.outputShape=[],this.uniforms="segmentSize : i32",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.type=e,this.dispatchLayout=X(t),this.dispatch=H(this.dispatchLayout,t,this.workgroupSize),this.shaderKey="sparseSegmentMean"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.size) {
        let segmentId = index / uniforms.segmentSize;
        let count = sameSegmentIdCount[segmentId];
        if (count != 0) {
          ${this.type==="float32"?"setOutputAtIndex(index, segmentSum[index] / f32(count));":"setOutputAtIndexI32(index, segmentSum[index] / count);"}
        }
      }
    }
  `}};function dy(r,t,e,o=!1,n){let a=y.sizeFromShape(r.shape)/r.shape[0],i=r.dtype,p=y.sizeFromShape(t.shape),u=n.readSync(e.dataId),l=p>0?u[p-1]+1:0,m,d=r.shape.slice();d[0]=l;let f=p*a,h=kt({backend:n,attrs:{shape:d,value:0,dtype:i}});m=new cy(d,f,i);let g=[{type:"int32",data:[a]},{type:"int32",data:[f]}],x=n.runWebGPUProgram(m,[r,t,e],i,g,h);if(o)return x;let b=kt({backend:n,attrs:{shape:[l],value:0,dtype:"int32"}});m=new ly(l,e.shape);let C=n.runWebGPUProgram(m,[e],"int32",null,b),S=kt({backend:n,attrs:{shape:d,value:0,dtype:i}});m=new my(d,i),g=[{type:"int32",data:[a]}];let k=n.runWebGPUProgram(m,[x,C],i,g,S);return n.disposeData(x.dataId),n.disposeData(C.dataId),k}function pce(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;return dy(o,n,s,!1,e)}var wU={kernelName:ya,backendName:"webgpu",kernelFunc:pce};function cce(r){let{inputs:t,backend:e}=r,{data:o,indices:n,segmentIds:s}=t;return dy(o,n,s,!0,e)}var SU={kernelName:ba,backendName:"webgpu",kernelFunc:cce};var fy=class{constructor(t,e){this.variableNames=["A"],this.workgroupSize=[64,1,1],this.size=!0;let o=new Array(t.length);for(let n=0;n<o.length;n++)o[n]=t[n]*e[n];this.outputShape=o,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.rank=this.outputShape.length,this.shaderKey="tile"}getUserCode(){let t=lce(this.rank,"uniforms.");return`
      ${G("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${t}));
        }
      }
    `}};function lce(r,t=""){if(r>=5)throw Error(`Tile for rank ${r} is not yet supported`);if(r===1)return`(resRC % ${t}aShape)`;let e=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[];for(let n=0;n<r;n++)o.push(`(${e[n]} % ${t}aShape[${n}])`);return o.join()}function Cm(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{reps:s}=o;if(e.shouldExecuteOnCPU([n])||n.dtype==="string"||n.shape.length>=5){let p=e.readSync(n.dataId),u=n.dtype==="string"?p.map(m=>y.decodeString(m)):p,c=me(n.shape,n.dtype,u),l=Oz(c,s);return e.makeTensorInfo(l.shape,l.dtype,l.values)}let a=new fy(n.shape,s);return e.runWebGPUProgram(a,[n],n.dtype)}var IU={kernelName:po,backendName:"webgpu",kernelFunc:Cm};function mce(r){let{inputs:t,backend:e,attrs:o}=r,{sparseIndices:n,sparseValues:s,defaultValue:a}=t,{outputShape:i}=o,{sliceRank:p,numUpdates:u,sliceSize:c,strides:l,outputSize:m}=w.calculateShapes(s,n,i),d=!1;if(s.dtype==="string"){let R=e.bufferSync(n),D=e.bufferSync(s),P=y.decodeString(e.readSync(a.dataId)[0]),O=Ez(R,D,i,m,c,u,p,l,P,d);return e.makeTensorInfo(i,O.dtype,O.values)}let f=[m/c,c],h=pe({inputs:{x:n},backend:e,attrs:{shape:[u,p]}}),g=s.shape.length?pe({inputs:{x:s},backend:e,attrs:{shape:[u,c]}}):Ft({inputs:{x:s},backend:e}),x=g.dtype,b=e.makeTensorInfo([],x,y.makeZerosTypedArray(1,x)),C=pe({inputs:{x:a},backend:e,attrs:{shape:Array(f.length).fill(1)}}),S=Cm({inputs:{x:C},backend:e,attrs:{reps:f}}),k=y.sizeFromShape([u,c]),_=[{type:"int32",data:[p]},{type:"int32",data:l},{type:"int32",data:[k]}];switch(u){case 0:break;case 1:{let R=new Va([u,c],p,h.shape.length,g.shape.length,l,f,x,d);e.runWebGPUProgram(R,[g,h],x,_,S)}break;default:{let R=new Va([u,c],p,h.shape.length,b.shape.length,l,f,x,d);e.runWebGPUProgram(R,[b,h],x,_,S)}{let R=new Va([u,c],p,h.shape.length,g.shape.length,l,f,x);e.runWebGPUProgram(R,[g,h],x,_,S)}}let E=pe({inputs:{x:S},backend:e,attrs:{shape:i}});return e.disposeData(h.dataId),e.disposeData(g.dataId),e.disposeData(C.dataId),e.disposeData(b.dataId),e.disposeData(S.dataId),E}var vU={kernelName:ks,backendName:"webgpu",kernelFunc:mce};function dce(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{numOrSizeSplits:s,axis:a}=o,i=y.parseAxisParam(a,n.shape)[0],p=w.prepareSplitSize(n,s,i),u=n.shape.length,c=new Array(u).fill(0),l=n.shape.slice();return p.map(m=>{let d=[...l];d[i]=m;let f=Hs({inputs:{x:n},backend:e,attrs:{begin:c,size:d}});return c[i]+=m,f})}var kU={kernelName:xa,backendName:"webgpu",kernelFunc:dce};var fce=ye({opType:Z.SQRT}),NU={kernelName:Ss,backendName:"webgpu",kernelFunc:fce};var TU={kernelName:Xi,backendName:"webgpu",kernelFunc:({inputs:r,backend:t})=>{let{x:e}=r,o=t,n=new Jr(e.shape,Z.SQUARE);return o.runWebGPUProgram(n,[e],e.dtype)}};var hce=et({opType:fe.SQUARED_DIFFERENCE}),_U={kernelName:Ns,backendName:"webgpu",kernelFunc:hce};function gce({inputs:r,attrs:t,backend:e}){let{x:o}=r,n=new Jr(o.shape,Z.STEP,"stepAlpha : f32,"),s=[{type:"float32",data:[t.alpha]}];return e.runWebGPUProgram(n,[o],o.dtype,s)}var $U={kernelName:So,backendName:"webgpu",kernelFunc:gce};var hy=class{constructor(t){this.variableNames=["x"],this.workPerThread=1,this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize,[this.workPerThread,1,1]);let e=ht(this.outputShape.length);this.uniforms=`begin : ${e},  strides : ${e}, `,this.shaderKey="stridedSlice"}getUserCode(){let t=this.outputShape.length,e="";if(t===1)e="coords * uniforms.strides + uniforms.begin";else{let n=0;e=this.outputShape.map((s,a)=>(n++,this.outputShape.length===1?`coords * uniforms.strides[${a}] + uniforms.begin[${a}]`:`coords[${n-1}] * uniforms.strides[${a}] + uniforms.begin[${a}]`)).join(",")}return`
       ${G("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${e}));
         }
       }
     `}};function xce(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{begin:s,end:a,strides:i,beginMask:p,endMask:u,ellipsisMask:c,newAxisMask:l,shrinkAxisMask:m}=o,{finalShapeSparse:d,finalShape:f,isIdentity:h,sliceDim0:g,isSimpleSlice:x,begin:b,end:C,strides:S}=ct.sliceInfo(n.shape,s,a,i,p,u,c,l,m),k;if(h)k=pe({inputs:{x:n},backend:e,attrs:{shape:f}});else if(g||x){y.assert(n.shape.length>=1,()=>`Input must have rank at least 1, got: ${n.shape.length}`);let _=ct.computeOutShape(b,C,S),E=Hs({inputs:{x:n},backend:e,attrs:{begin:b,size:_}});k=pe({inputs:{x:E},backend:e,attrs:{shape:f}}),e.disposeData(E.dataId)}else if(e.shouldExecuteOnCPU([n])){let E=e.readSync(n.dataId),R=me(n.shape,n.dtype,E),D=Az(d,R,S,b);k=e.makeTensorInfo(f,n.dtype,D.values)}else{let E=new hy(d),R=[{type:"int32",data:b},{type:"int32",data:S}],D=e.runWebGPUProgram(E,[n],n.dtype,R);k=pe({inputs:{x:D},backend:e,attrs:{shape:f}}),e.disposeData(D.dataId)}return k}var EU={kernelName:Ts,backendName:"webgpu",kernelFunc:xce};function yce(r){let{inputs:t,backend:e,attrs:o}=r,{separator:n,nGramWidths:s,leftPad:a,rightPad:i,padWidth:p,preserveShortSequences:u}=o,{data:c,dataSplits:l}=t,m=e.readSync(c.dataId),d=e.readSync(l.dataId),[f,h]=Fz(m,d,n,s,a,i,p,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(l.shape,"int32",h)]}var RU={kernelName:Ca,backendName:"webgpu",kernelFunc:yce};var bce=et({opType:fe.SUB,cpuKernelImpl:Pz,supportsComplex:!0}),DU={kernelName:_s,backendName:"webgpu",kernelFunc:bce};var Cce=ye({opType:Z.TAN}),AU={kernelName:$s,backendName:"webgpu",kernelFunc:Cce};var wce=ye({opType:Z.TANH}),FU={kernelName:Es,backendName:"webgpu",kernelFunc:wce};function Sce(r){let{inputs:t,backend:e,attrs:o}=r,{tensor:n,indices:s,updates:a}=t,{}=o,{sliceRank:i,numUpdates:p,sliceSize:u,strides:c,outputSize:l}=w.calculateShapes(a,s,n.shape),m=[l/u,u];if(l===0)return e.makeTensorInfo(n.shape,s.dtype);let d=[],f=pe({inputs:{x:s},backend:e,attrs:{shape:[p,i]}});d.push(f);let h=pe({inputs:{x:a},backend:e,attrs:{shape:[p,u]}});d.push(h);let g=pe({inputs:{x:n},backend:e,attrs:{shape:m}});d.push(g);let x=Cm({inputs:{x:g},backend:e,attrs:{reps:Array(m.length).fill(1)}}),b=new Va([p,u],i,f.shape.length,h.shape.length,c,m,n.dtype,!1),C=y.sizeFromShape([p,u]),S=[{type:"int32",data:[i]},{type:"int32",data:c},{type:"int32",data:[C]}],k=e.runWebGPUProgram(b,[h,f],g.dtype,S,x);d.push(k);let _=pe({inputs:{x:k},backend:e,attrs:{shape:n.shape}});return d.forEach(E=>e.disposeData(E.dataId)),_}var PU={kernelName:fs,backendName:"webgpu",kernelFunc:Sce};var gy=class{constructor(t){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms=`inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`,this.shaderKey="swap"}getUserCode(){return`
        ${G("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}},xy=class{constructor(t){this.variableNames=["x","indices"],this.workgroupSize=[256,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.uniforms="inputSize : i32, firstPass : i32, k : i32,",this.shaderKey="merge"}getUserCode(){return`
        ${G("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `}};function nl(r,t){t!==null&&r.disposeData(t.dataId)}function OU(r){let t=1;for(;t<r;)t*=2;return t}function Ice(r){let{inputs:t,backend:e,attrs:o}=r,{x:n}=t,{k:s,sorted:a}=o,i=n.shape,p=i[i.length-1];if(e.shouldExecuteOnCPU([n])){let k=e.readSync(n.dataId),[_,E]=Mz(k,i,n.dtype,s,a);return[e.makeTensorInfo(_.shape,_.dtype,_.values),e.makeTensorInfo(E.shape,E.dtype,E.values)]}if(s===0)return i[i.length-1]=0,[e.makeTensorInfo(i,n.dtype,[]),e.makeTensorInfo(i,"int32",[])];if(p===1)return[n,kt({attrs:{shape:i,dtype:"int32",value:0},backend:e})];let c=y.sizeFromShape(i)/p,l=pe({inputs:{x:n},attrs:{shape:[c,p]},backend:e}),m=OU(s),d=OU(p),f=null,h=()=>f===null?[l,l]:[l,f],g=(k,_,E)=>{let R=h(),D=new gy(E),O=[{type:"int32",data:[p]},{type:"int32",data:[f===null?1:0]},{type:"float32",data:[Number.NEGATIVE_INFINITY]},{type:"int32",data:[k]},{type:"int32",data:[_]}],M=f;f=e.runWebGPUProgram(D,R,"int32",O),nl(e,M)};for(let k=1;k<m;k*=2){let _=k*2;for(let E=k;E>=1;E/=2)g(_,E,[c,d])}for(let k=d;k>m;k/=2){let _=h(),E=new xy([c,k/2]),D=[{type:"int32",data:[p]},{type:"int32",data:[f===null?1:0]},{type:"int32",data:[m]}],P=f;f=e.runWebGPUProgram(E,_,"int32",D),nl(e,P);let O=m/2,M=O*2;for(let L=O;L>=1;L/=2)g(M,L,f.shape)}let x=f;f=Hs({inputs:{x:f},backend:e,attrs:{begin:0,size:[c,s]}}),nl(e,x);let b=u0({inputs:{x:l,indices:f},backend:e,attrs:{axis:1,batchDims:1}});nl(e,l);let C=i.slice(0,-1);C.push(s),x=f,f=pe({inputs:{x:f},attrs:{shape:C},backend:e}),nl(e,x);let S=b;return b=pe({inputs:{x:b},attrs:{shape:C},backend:e}),nl(e,S),[b,f]}var MU={kernelName:Rs,backendName:"webgpu",kernelFunc:Ice};var yy=class{constructor(t){this.variableNames=["Image","Transforms"],this.uniforms="interpolationModeId : i32, fillModeId : i32, fillValue : f32,",this.workgroupSize=[64,1,1],this.size=!0,this.outputShape=t,this.dispatchLayout=X(this.outputShape),this.dispatch=H(this.dispatchLayout,this.outputShape,this.workgroupSize),this.shaderKey="transform"}getUserCode(){return`
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${G("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `}};function vce(r){let{inputs:t,backend:e,attrs:o}=r,{image:n,transforms:s}=t,{interpolation:a,fillMode:i,fillValue:p,outputShape:u}=o,[c,l,m,d]=n.shape,[f,h]=u!=null?u:[l,m],g=[c,f,h,d],x=new yy(g),b=a==="nearest"?1:2,C;switch(i){case"constant":C=1;break;case"reflect":C=2;break;case"wrap":C=3;break;case"nearest":C=4;break;default:C=1;break}let S=[{type:"int32",data:[b]},{type:"int32",data:[C]},{type:"float32",data:[p]}];return e.runWebGPUProgram(x,[n,s],"float32",S)}var LU={kernelName:Ds,backendName:"webgpu",kernelFunc:vce};function kce(r){let{inputs:t,backend:e,attrs:o}=r,{value:n}=t,{axis:s}=o;s<0&&(s+=n.shape.length);let a=n,i=a.shape.length,p=n.shape[s],u=new Array(i-1),c=0;for(let h=0;h<i;h++)h!==s&&(u[c++]=a.shape[h]);let l=[],m=new Array(i).fill(0),d=a.shape.slice();d[s]=1;let f=new Array(p);for(let h=0;h<f.length;h++){m[s]=h;let g=Hs({inputs:{x:a},backend:e,attrs:{begin:m,size:d}}),x=pe({inputs:{x:g},backend:e,attrs:{shape:u}});f[h]=x,l.push(g)}return l.forEach(h=>e.disposeData(h.dataId)),f}var BU={kernelName:wa,backendName:"webgpu",kernelFunc:kce};var by=class{constructor(t,e,o){if(this.outputShape=[],this.variableNames=["x","segmentIds"],this.uniforms="numSegments : i32, xSize: i32,",this.workgroupSize=[64,1,1],this.atomic=!0,this.outputShape=e,this.dispatchLayout=X(t),this.dispatch=H(this.dispatchLayout,t,this.workgroupSize),o!=="float32"&&o!=="int32")throw new Error(`UnsortedSegmentSum only supports float32 and int32
              types, does not support ${o} type.`);this.type=o,this.shaderKey="unsortedSegmentSum"}getUserCode(){return`
    ${G("index")} {
      if (index < uniforms.xSize) {
        let coords = getXCoordsFromIndex(index);
        let b = coords[0];
        let inCol = coords[1];

        let segmentId = i32(getSegmentIds(inCol));
        if (segmentId >= 0) {
          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;
          let value = getX(b, inCol);

          ${Qr("&result[flatIndex]","value",this.type)}
        }
      }
    }
  `}};function Nce(r){let{inputs:t,backend:e,attrs:o}=r,{x:n,segmentIds:s}=t,{numSegments:a}=o,i=n.shape.length,p=[],u=0,c=w.getAxesPermutation([u],i),l=n;c!=null&&(l=yr({inputs:{x:n},backend:e,attrs:{perm:c}}),p.push(l),u=w.getInnerMostAxes(1,i)[0]);let m=w.segment_util.computeOutShape(l.shape,u,a),d=y.sizeFromShape([l.shape[u]]),f=pe({inputs:{x:l},backend:e,attrs:{shape:[-1,d]}});p.push(f);let h=n.dtype,g=[f.shape[0],a],x=kt({backend:e,attrs:{shape:g,value:0,dtype:h}}),b=new by(f.shape,g,h),C=[{type:"int32",data:[a]},{type:"int32",data:[y.sizeFromShape(f.shape)]}],S=e.runWebGPUProgram(b,[f,s],h,C,x),k=pe({inputs:{x:S},backend:e,attrs:{shape:m}});p.push(S);let _=k;if(c!=null){p.push(k);let E=w.getUndoAxesPermutation(c);_=yr({inputs:{x:_},backend:e,attrs:{perm:E}})}return p.forEach(E=>e.disposeData(E.dataId)),_}var zU={kernelName:Ji,backendName:"webgpu",kernelFunc:Nce};var Tce=[rz,Bz,zz,Vz,Wz,Uz,Hz,Kz,qz,jz,Xz,Yz,Qz,Zz,Jz,rV,oV,nV,sV,aV,uV,pV,cV,fV,hV,gV,nz,yV,CV,wV,SV,IV,vV,kV,NV,TV,_V,$V,DV,AV,FV,PV,MV,LV,OV,BV,zV,VV,WV,UV,KV,qV,jV,XV,YV,QV,ZV,JV,eW,ez,tW,nW,rW,oW,sW,aW,iW,uW,pW,cW,lW,oz,mW,bV,dW,fW,hW,gW,xW,yW,bW,wW,CW,SW,IW,vW,NW,TW,eV,_W,$W,DW,EW,RW,AW,tV,FW,PW,OW,MW,BW,GV,zW,VW,WW,lV,UW,KW,qW,jW,XW,YW,QW,ZW,mV,JW,eU,tU,rU,tz,oU,nU,sU,aU,iU,uU,pU,cU,lU,mU,dU,fU,hU,gU,xU,yU,iV,$U,EU,RU,LW,bU,CU,wU,SU,vU,kU,NU,TU,_U,DU,HV,AU,FU,PU,IU,MU,LU,Gz,BU,zU,GW];for(let r of Tce)ri(r);var VU="4.11.0",_ce="4.11.0",$ce="4.11.0",Ece="4.11.0",Rce="4.11.0",Dce="4.11.0",Ace={tfjs:VU,"tfjs-core":VU,"tfjs-converter":_ce,"tfjs-backend-cpu":$ce,"tfjs-backend-webgl":Ece,"tfjs-backend-wasm":Rce,"tfjs-backend-webgpu":Dce};export{Xs as Abs,Wo as Acos,Uo as Acosh,np as AdadeltaOptimizer,sp as AdagradOptimizer,ap as AdamOptimizer,ip as AdamaxOptimizer,uo as Add,Go as AddN,Ho as All,Ko as Any,Ys as ArgMax,Qs as ArgMin,qo as Asin,jo as Asinh,Xo as Atan,Qo as Atan2,Yo as Atanh,Zo as AvgPool,Zs as AvgPool3D,Ai as AvgPool3DGrad,Di as AvgPoolGrad,pm as BackendWasm,Jo as BatchMatMul,Js as BatchToSpaceND,en as Bincount,ja as BitwiseAnd,ea as BroadcastArgs,Bce as BroadcastTo,bo as Cast,tn as Ceil,Co as ClipByValue,Fi as Complex,Pi as ComplexAbs,ta as Concat,rn as Conv2D,Oi as Conv2DBackpropFilter,on as Conv2DBackpropInput,nn as Conv3D,Xa as Conv3DBackpropFilterV2,sn as Conv3DBackpropInputV2,an as Cos,un as Cosh,ln as CropAndResize,pn as Cumprod,cn as Cumsum,zo as DataStorage,ra as DenseBincount,mn as DepthToSpace,dn as DepthwiseConv2dNative,Mi as DepthwiseConv2dNativeBackpropFilter,Li as DepthwiseConv2dNativeBackpropInput,oa as Diag,fn as Dilation2D,zi as Dilation2DBackpropFilter,Bi as Dilation2DBackpropInput,Pu as Draw,nw as ENV,Vi as Einsum,gn as Elu,Ya as EluGrad,hl as Environment,yn as Equal,xn as Erf,bn as Exp,na as ExpandDims,Cn as Expm1,Wi as FFT,sa as Fill,wn as FlipLeftRight,Sn as Floor,In as FloorDiv,Mu as FromPixels,vn as FusedBatchNorm,vo as FusedConv2D,ko as FusedDepthwiseConv2D,kp as GPGPUContext,kn as GatherNd,aa as GatherV2,Bl as GraphModel,Nn as Greater,Tn as GreaterEqual,Ui as IFFT,wo as Identity,Gi as Imag,_n as IsFinite,$n as IsInf,En as IsNan,ao as KernelBackend,zn as LRN,Qa as LRNGrad,Rn as LeakyRelu,Dn as Less,An as LessEqual,Fn as LinSpace,Pn as Log,On as Log1p,zce as LogSoftmax,Mn as LogicalAnd,Ln as LogicalNot,Bn as LogicalOr,$0 as LogicalXor,Vce as LowerBound,xu as MathBackendCPU,wu as MathBackendWebGL,Wce as MatrixBandPart,Vn as Max,Un as MaxPool,ia as MaxPool3D,Ki as MaxPool3DGrad,Hi as MaxPoolGrad,ua as MaxPoolWithArgmax,Wn as Maximum,Gn as Mean,Hn as Min,Kn as Minimum,qn as MirrorPad,jn as Mod,up as MomentumOptimizer,Xn as Multinomial,Yn as Multiply,pa as Neg,Zn as NonMaxSuppressionV3,Za as NonMaxSuppressionV4,Jn as NonMaxSuppressionV5,Qn as NotEqual,kw as OP_SCOPE_SUFFIX,es as OneHot,ca as OnesLike,Nr as Optimizer,Pl as OptimizerConstructors,la as Pack,ts as PadV2,Uce as Pool,rs as Pow,os as Prelu,ns as Prod,pp as RMSPropOptimizer,Qp as RaggedGather,Zp as RaggedRange,Jp as RaggedTensorToTensor,ma as Range,hw as Rank,qi as Real,hn as RealDiv,ss as Reciprocal,Rt as Reduction,as as Relu,ps as Relu6,da as Reshape,us as ResizeBilinear,ei as ResizeBilinearGrad,is as ResizeNearestNeighbor,Ja as ResizeNearestNeighborGrad,cs as Reverse,As as RotateWithOffset,ls as Round,ms as Rsqrt,mi as SGDOptimizer,ds as ScatterNd,hs as SearchSorted,fa as Select,gs as Selu,Cs as Sigmoid,bs as Sign,xs as Sin,ys as Sinh,ha as Slice,vs as Softmax,ws as Softplus,ga as SpaceToBatchND,ji as SparseFillEmptyRows,ti as SparseReshape,ya as SparseSegmentMean,ba as SparseSegmentSum,ks as SparseToDense,xa as SplitV,Ss as Sqrt,Xi as Square,Ns as SquaredDifference,Ou as StaticRegexReplace,So as Step,Ts as StridedSlice,Ca as StringNGrams,Yi as StringSplit,Qi as StringToHashBucketFast,_s as Sub,Is as Sum,$s as Tan,Es as Tanh,ut as Tensor,tt as TensorBuffer,fs as TensorScatterUpdate,po as Tile,Rs as TopK,Ds as Transform,co as Transpose,Zi as Unique,wa as Unpack,Ji as UnsortedSegmentSum,Gce as UpperBound,oi as Variable,Tu as WebGPUBackend,Sa as ZerosLike,Io as _FusedMatMul,Jt as abs,kk as acos,Nk as acosh,Ce as add,Tk as addN,_k as all,$k as any,Ek as argMax,Rk as argMin,Dk as asin,Ak as asinh,Fk as atan,Pk as atan2,Ok as atanh,fd as avgPool,Bk as avgPool3d,vde as backend,w as backend_util,zk as basicLSTMCell,au as batchNorm,Wk as batchNorm2d,Uk as batchNorm3d,Gk as batchNorm4d,hd as batchToSpaceND,gd as bincount,Hk as bitwiseAnd,E6 as booleanMaskAsync,Kk as broadcastArgs,iu as broadcastTo,Ir as broadcast_util,oT as browser,me as buffer,We as cast,qk as ceil,jk as clipByValue,Ur as clone,Er as complex,bt as concat,Xk as concat1d,Yk as concat2d,Qk as concat3d,Zk as concat4d,Jk as conv1d,uu as conv2d,e2 as conv2dTranspose,t2 as conv3d,o2 as conv3dTranspose,Zce as copyRegisteredKernels,n2 as cos,s2 as cosh,Rl as cosineWindow,a2 as cumprod,i2 as cumsum,vr as customGrad,u2 as denseBincount,Pw as deprecationWarn,p2 as depthToSpace,lc as depthwiseConv2d,A5 as deregisterOp,ou as device_util,c2 as diag,l2 as dilation2d,dde as disableDeprecationWarnings,Mt as dispose,fde as disposeVariables,je as div,d2 as divNoNan,f2 as dot,W6 as dropout,pu as einsum,Cd as elu,mde as enableDebugMode,lde as enableProdMode,Qw as enclosingPowerOfTwo,pr as engine,h2 as ensureShape,A as env,bd as equal,g2 as erf,b2 as euclideanNorm,$o as exp,Ms as expandDims,C2 as expm1,wd as eye,fc as fft,Ea as fill,Sde as findBackend,Ide as findBackendFactory,Sd as floor,dd as floorDiv,MD as forceHalfFloat,Zw as fused,Id as gather,z6 as gatherND,af as gather_util,Cde as getBackend,iw as getGradient,tc as getKernel,Ym as getKernelsForBackend,Zse as getThreadsCount,cv as gpgpu_util,AK as grad,FK as grads,qu as greater,vd as greaterEqual,Ju as ifft,lu as imag,Kj as image,G6 as inTopKAsync,fi as io,Kd as irfft,w2 as isFinite,S2 as isInf,I2 as isNaN,Rr as keep,Wt as kernel_impls,kd as leakyRelu,_l as less,mc as lessEqual,qj as linalg,v2 as linspace,$8 as loadGraphModel,E8 as loadGraphModelSync,k2 as localResponseNormalization,pi as log,Nd as log1p,N2 as logSigmoid,T2 as logSoftmax,$d as logSumExp,ju as logicalAnd,Ed as logicalNot,Rd as logicalOr,_2 as logicalXor,jj as losses,$2 as lowerBound,Ze as matMul,JN as math,Ra as max,Ad as maxPool,E2 as maxPool3d,R2 as maxPoolWithArgmax,Fd as maximum,Xu as mean,hde as memory,D2 as meshgrid,Tl as min,Yu as minimum,A2 as mirrorPad,F2 as mod,P2 as moments,A6 as movingAverage,se as mul,O2 as multiRNNCell,M2 as multinomial,cr as neg,pS as nextFrame,Ku as norm,Pd as notEqual,El as oneHot,Da as ones,L2 as onesLike,N as op,B2 as outerProduct,Aa as pad,z2 as pad1d,V2 as pad2d,W2 as pad3d,U2 as pad4d,G2 as pool,ui as pow,Md as prelu,md as print,H2 as prod,gde as profile,K2 as raggedGather,q2 as raggedRange,j2 as raggedTensorToTensor,X2 as rand,g1 as randomGamma,Ud as randomNormal,x1 as randomStandardNormal,dc as randomUniform,y1 as randomUniformInt,mu as range,bde as ready,ci as real,b1 as reciprocal,su as registerBackend,Xce as registerGradient,ri as registerKernel,D5 as registerOp,du as relu,Gd as relu6,wde as removeBackend,W as reshape,mo as reverse,C1 as reverse1d,w1 as reverse2d,S1 as reverse3d,I1 as reverse4d,hc as rfft,Hd as round,v1 as rsqrt,ke as scalar,P6 as scatterND,hu as scatter_util,$l as searchSorted,k1 as selu,N1 as separableConv2d,WN as serialization,yde as setBackend,kde as setPlatform,Qse as setThreadsCount,Xse as setWasmPath,Yse as setWasmPaths,vI as setWebGLContext,T1 as setdiff1dAsync,Tc as shared,$a as sigmoid,_1 as sign,Hj as signal,$1 as sin,E1 as sinh,Xe as slice,R1 as slice1d,D1 as slice2d,A1 as slice3d,F1 as slice4d,ct as slice_util,P1 as softmax,_d as softplus,Od as spaceToBatchND,Xj as sparse,L6 as sparseToDense,Gj as spectral,li as split,Dr as sqrt,er as square,qd as squaredDifference,gc as squeeze,kr as stack,jd as step,O1 as stridedSlice,Yj as string,Te as sub,ot as sum,ni as sumOutType,M1 as tan,Nl as tanh,ur as tensor,tr as tensor1d,fu as tensor2d,Xd as tensor3d,L1 as tensor4d,B1 as tensor5d,z1 as tensor6d,W1 as tensorScatterUpdate,ek as tensor_util,h1 as test_util,De as tidy,cu as tile,xde as time,U1 as topk,TGe as train,yc as transpose,G1 as truncatedNormal,H1 as unique,Qce as unregisterGradient,Yce as unregisterKernel,K1 as unsortedSegmentSum,fo as unstack,dt as upcastType,q1 as upperBound,y as util,PK as valueAndGrad,OK as valueAndGrads,j1 as variable,zw as variableGrads,Ace as version,D8 as version_converter,_X as version_core,cY as version_cpu,Jse as version_wasm,s9 as version_webgl,Cat as webgl,Ac as webgl_util,Yv as webgpu_util,lo as where,Qd as whereAsync,Gr as zeros,Ht as zerosLike};
